[{"model": "meta_review.participant", "pk": "0x48piraj", "fields": {"name": "Piyush Raj", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-11-27T07:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AMR-KELEG", "fields": {"name": "Amr Mohamed ", "score": 0.35000000000000003, "rank": 125, "trend": 0, "last_active_at": "2017-08-07T14:56:27Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10357676163791465, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AbdealiJK", "fields": {"name": "AbdealiJK", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2018-05-13T05:29:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Adrianzatreanu", "fields": {"name": "Zatreanu Adrian-Gabriel", "score": 2.925239107332622, "rank": 56, "trend": 0, "last_active_at": "2017-08-24T14:10:44Z", "pos_in": 10, "weighted_pos_in": 2.5752391073326217, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12989395148810007, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Alexander-N", "fields": {"name": null, "score": 0.9273113708820407, "rank": 96, "trend": 0, "last_active_at": "2017-12-27T23:33:49Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10947649067935124, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Arsfiqball", "fields": {"name": "Iqbal Mohammad Abdul Ghoni", "score": 4.094314558979797, "rank": 42, "trend": 0, "last_active_at": "2017-07-18T16:10:12Z", "pos_in": 19, "weighted_pos_in": 4.0443145589797975, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14184110642318398, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Asalle", "fields": {"name": "Asalle Mirzaieva", "score": 1.5429330499468639, "rank": 79, "trend": 0, "last_active_at": "2017-11-21T07:54:10Z", "pos_in": 2, "weighted_pos_in": 0.4429330499468638, "pos_out": 22, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11576772497977314, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AsnelChristian", "fields": {"name": "Christian Asnel Ngoulla Sob", "score": 4.504303931987234, "rank": 38, "trend": 0, "last_active_at": "2017-07-21T06:52:13Z", "pos_in": 15, "weighted_pos_in": 3.754303931987234, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1460309185984002, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CCInCharge", "fields": {"name": "Charles Chen", "score": 0.20095642933049948, "rank": 155, "trend": 0, "last_active_at": "2018-06-09T22:24:25Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1020536378494904, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CleanCut", "fields": {"name": "Nathan Stocks", "score": 1.0, "rank": 94, "trend": 0, "last_active_at": "2017-04-09T08:02:04Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11021931896547044, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Crphang", "fields": {"name": "Phang Chun Rong", "score": 0.9773113708820408, "rank": 95, "trend": 0, "last_active_at": "2018-04-22T03:43:34Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10998745662762476, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Elgayar", "fields": {"name": "Mostafa Elgayar", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2016-12-31T09:57:53Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "EverWinter23", "fields": {"name": "rishabh", "score": 0.8492029755579165, "rank": 97, "trend": 0, "last_active_at": "2018-06-21T15:48:01Z", "pos_in": 3, "weighted_pos_in": 1.3492029755579165, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.10867827607365295, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "FosterSamuel", "fields": {"name": "Samuel Foster", "score": 0.15000000000000002, "rank": 171, "trend": -2, "last_active_at": "2017-08-12T15:45:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10153289784482057, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Grox-Ni", "fields": {"name": "GroxNi", "score": 0.4250265674814016, "rank": 117, "trend": 0, "last_active_at": "2017-12-18T09:18:14Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1043434820618915, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HarshKhatore", "fields": {"name": "Harsh Khatore", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-11-04T01:32:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Harshish", "fields": {"name": "Harshish Yadav", "score": 0.3468650371944737, "rank": 126, "trend": 0, "last_active_at": "2017-02-28T16:55:27Z", "pos_in": 1, "weighted_pos_in": 0.1468650371944737, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1035447244530601, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HemabhKamboj", "fields": {"name": "Hemabh Kamboj", "score": 0.16256851959283897, "rank": 163, "trend": null, "last_active_at": "2018-07-29T05:49:39Z", "pos_in": 1, "weighted_pos_in": 0.16256851959283897, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10166133955546355, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HitRam", "fields": {"name": "Hitesh Ramchandani", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-01-23T17:54:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Hsankesara", "fields": {"name": "Heet Sankesara", "score": 0.15000000000000002, "rank": 171, "trend": -2, "last_active_at": "2017-07-18T08:34:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10153289784482057, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HyungKun", "fields": {"name": "HyungKun Jung", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-03-31T12:39:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IamRaviTejaG", "fields": {"name": "Ravi Teja Gannavarapu", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-10-27T15:46:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IpshitaC", "fields": {"name": "Ipshita Chatterjee", "score": 1.5447396386822505, "rank": 78, "trend": 0, "last_active_at": "2018-06-07T17:54:23Z", "pos_in": 6, "weighted_pos_in": 1.0447396386822505, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11578618708629948, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JoeSiew", "fields": {"name": null, "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-07-19T05:18:10Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnMoutafis", "fields": {"name": "John Moutafis", "score": 0.15000000000000002, "rank": 171, "trend": -2, "last_active_at": "2017-07-17T12:05:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10153289784482057, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnS-01", "fields": {"name": null, "score": 0.27502656748140175, "rank": 131, "trend": 0, "last_active_at": "2017-05-08T19:17:17Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10281058421707093, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Kagamihime", "fields": {"name": "Eisha Chen-yen-su", "score": 0.7311902231668423, "rank": 102, "trend": 0, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 3, "weighted_pos_in": 0.5811902231668423, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10747226611497548, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "KevinHock", "fields": {"name": "", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-04-11T21:42:17Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LappleApple", "fields": {"name": "Lauri Apple", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-06-08T17:44:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LeafyLi", "fields": {"name": null, "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-01-15T18:18:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LenaAn", "fields": {"name": null, "score": 0.9273113708820407, "rank": 96, "trend": 0, "last_active_at": "2018-02-26T15:56:46Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10947649067935124, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Logan1x", "fields": {"name": "Khushal Sharma", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-09-17T10:03:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Lyrenhex", "fields": {"name": "Damian Heaton", "score": 0.20425079702444154, "rank": 154, "trend": 0, "last_active_at": "2017-11-28T20:58:50Z", "pos_in": 1, "weighted_pos_in": 0.20425079702444154, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10208730404374433, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MacBox7", "fields": {"name": "Ankit Joshi", "score": 6.207332624867159, "rank": 28, "trend": 0, "last_active_at": "2018-07-29T05:49:39Z", "pos_in": 15, "weighted_pos_in": 5.707332624867159, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16343471201828835, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Makman2", "fields": {"name": "Mischa Kr\u00fcger", "score": 88.06849096705629, "rank": 1, "trend": 0, "last_active_at": "2018-07-26T14:00:42Z", "pos_in": 372, "weighted_pos_in": 82.5184909670563, "pos_out": 117, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.5, "weight_factor": 1.0, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "Mariatta", "fields": {"name": "", "score": 1.0757173219978733, "rank": 92, "trend": 0, "last_active_at": "2017-12-12T08:00:26Z", "pos_in": 8, "weighted_pos_in": 1.0257173219978732, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11099309843017793, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MariosPanag", "fields": {"name": "Marios Panagopoulos", "score": 0.5500531349628035, "rank": 106, "trend": 0, "last_active_at": "2017-05-07T21:48:37Z", "pos_in": 2, "weighted_pos_in": 0.5500531349628035, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10562116843414185, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MikeTheReader", "fields": {"name": "Mike Lundin", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-05-24T17:18:50Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mixih", "fields": {"name": "mixih", "score": 13.817640807651394, "rank": 12, "trend": 0, "last_active_at": "2017-12-29T20:29:44Z", "pos_in": 43, "weighted_pos_in": 13.421466524973392, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2412068787636901, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mohit17067", "fields": {"name": "Mohit Juneja", "score": 0.4214665249734319, "rank": 118, "trend": 0, "last_active_at": "2018-04-10T05:39:26Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10430710085197192, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Monal5031", "fields": {"name": "Monal Shadi", "score": 4.19867162592986, "rank": 41, "trend": 0, "last_active_at": "2018-04-10T12:56:57Z", "pos_in": 5, "weighted_pos_in": 3.4486716259298604, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1429075645766476, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Naveenaidu", "fields": {"name": "Naveen Naidu", "score": 0.1, "rank": 178, "trend": -1, "last_active_at": "2018-03-04T05:26:23Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nickatak", "fields": {"name": "", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-02-14T19:34:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "NiklasMM", "fields": {"name": "Niklas", "score": 11.478055260361305, "rank": 14, "trend": 0, "last_active_at": "2018-06-13T23:49:49Z", "pos_in": 41, "weighted_pos_in": 10.728055260361305, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.217297907808928, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nosferatul", "fields": {"name": "Alexandru-Sorin Maxim", "score": 3.1732199787460154, "rank": 53, "trend": 0, "last_active_at": "2017-08-28T19:37:32Z", "pos_in": 6, "weighted_pos_in": 2.373219978746015, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13242814711040884, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nshul", "fields": {"name": "Anshul Mittal", "score": 1.6474495217853333, "rank": 76, "trend": 0, "last_active_at": "2018-04-18T22:34:33Z", "pos_in": 4, "weighted_pos_in": 1.5974495217853333, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11683581214263605, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PierceAndy", "fields": {"name": "Pierce Fu", "score": 0.5020722635494147, "rank": 110, "trend": 0, "last_active_at": "2017-04-04T04:11:31Z", "pos_in": 2, "weighted_pos_in": 0.3520722635494147, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10513083660492721, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PlentyMore", "fields": {"name": "PlentyMore", "score": 0.15929861849096674, "rank": 164, "trend": -1, "last_active_at": "2017-11-09T17:41:24Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10162792339311798, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Prabhat-IIT", "fields": {"name": "Prabhat", "score": 0.3758235919234855, "rank": 122, "trend": 0, "last_active_at": "2018-01-15T18:09:46Z", "pos_in": 3, "weighted_pos_in": 0.32582359192348553, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1038406611606149, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PrajwalM2212", "fields": {"name": "PRAJWAL M", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2018-05-08T04:55:07Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RJ722", "fields": {"name": "Rahul Jha", "score": 5.073007438894791, "rank": 34, "trend": 0, "last_active_at": "2018-07-09T12:48:29Z", "pos_in": 8, "weighted_pos_in": 2.9730074388947907, "pos_out": 42, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15184268113227015, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Rahmeen14", "fields": {"name": "Rahmeen Habib", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-12-18T10:49:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RaiVaibhav", "fields": {"name": "Vaibhav Rai", "score": 8.501912858660999, "rank": 18, "trend": 2, "last_active_at": "2018-07-29T05:05:47Z", "pos_in": 21, "weighted_pos_in": 6.761636556854409, "pos_out": 84, "neg_in": 3, "weighted_neg_in": 1.3597236981934104, "neg_out": 2, "offset": 1.5, "weight_factor": 0.1817740998365561, "modified_comments_after_meta_review": 3}}, {"model": "meta_review.participant", "pk": "Raman1121", "fields": {"name": "Raman Dutt", "score": 0.18225292242295388, "rank": 159, "trend": 0, "last_active_at": "2017-09-02T18:12:11Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295388, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10186250074662931, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RohanVB", "fields": {"name": "Rohan", "score": 4.547077577045693, "rank": 36, "trend": 0, "last_active_at": "2017-04-28T16:22:19Z", "pos_in": 16, "weighted_pos_in": 3.9470775770456923, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1464680361205684, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "S2606", "fields": {"name": "Shagun Khemka", "score": 0.428427205100956, "rank": 116, "trend": 0, "last_active_at": "2017-07-20T07:39:17Z", "pos_in": 3, "weighted_pos_in": 0.378427205100956, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10437823426241169, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SanketDG", "fields": {"name": "Sanket Dasgupta", "score": 15.109723698193388, "rank": 10, "trend": 0, "last_active_at": "2018-02-27T08:55:23Z", "pos_in": 40, "weighted_pos_in": 13.159723698193389, "pos_out": 39, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.25441108595196577, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Sanny26", "fields": {"name": "Santhoshini ", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-02-10T16:27:28Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shade5", "fields": {"name": "George Joseph", "score": 1.1057385759829967, "rank": 91, "trend": 0, "last_active_at": "2017-03-25T17:05:36Z", "pos_in": 2, "weighted_pos_in": 1.1057385759829967, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11129989520039532, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ShivamSinghania", "fields": {"name": "Shivam Singhania", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-01-18T22:12:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shruti9520", "fields": {"name": "Shruti Singh", "score": 0.6628586609989368, "rank": 103, "trend": 0, "last_active_at": "2017-02-05T19:51:42Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10677396408577278, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SiddharthKumar02", "fields": {"name": "Siddharth Kumar", "score": 0.21285866099893672, "rank": 150, "trend": 0, "last_active_at": "2017-01-22T12:51:10Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10217527055131108, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Siddhartha1234", "fields": {"name": "Siddhartha Mishra", "score": 1.573379383634431, "rank": 77, "trend": 0, "last_active_at": "2017-04-13T15:21:34Z", "pos_in": 4, "weighted_pos_in": 1.4233793836344308, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11607886577505552, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Stropek", "fields": {"name": "Przemys\u0142aw Curzytek", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-09-05T12:13:36Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SubbulakshmiRS", "fields": {"name": "R S Subbulakshmi", "score": -0.3263549415515413, "rank": 183, "trend": -3, "last_active_at": "2018-06-15T15:55:05Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.0, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "Techievena", "fields": {"name": "Abinash Senapati", "score": 5.320563230605731, "rank": 31, "trend": 0, "last_active_at": "2017-12-07T11:28:19Z", "pos_in": 21, "weighted_pos_in": 4.370563230605731, "pos_out": 19, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1543725327295138, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "The-Compiler", "fields": {"name": "Florian Bruhin", "score": 0.15547290116896886, "rank": 165, "trend": -1, "last_active_at": "2018-05-13T15:15:13Z", "pos_in": 1, "weighted_pos_in": 0.15547290116896886, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10158882716753276, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Udayan12167", "fields": {"name": "Udayan Tandon", "score": 14.813496280552588, "rank": 11, "trend": 0, "last_active_at": "2017-07-19T19:08:09Z", "pos_in": 33, "weighted_pos_in": 14.817321997874586, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2513838434847768, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "UnimaginaryUnit", "fields": {"name": "Alexander Voronkov", "score": 0.10860786397449518, "rank": 174, "trend": -2, "last_active_at": "2017-12-03T07:10:37Z", "pos_in": 1, "weighted_pos_in": 0.10860786397449518, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1011098984041138, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vamshi99", "fields": {"name": "Vamshi Krishna", "score": 4.276301806588733, "rank": 39, "trend": 0, "last_active_at": "2018-06-12T19:05:29Z", "pos_in": 12, "weighted_pos_in": 3.5145589798087116, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.13825717321997855, "neg_out": 2, "offset": 0.0, "weight_factor": 0.14370089215414772, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vedarth", "fields": {"name": "Vedarth Sharma", "score": 0.9273113708820407, "rank": 96, "trend": 0, "last_active_at": "2017-12-10T17:48:03Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10947649067935124, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Warewolf96", "fields": {"name": "Parth Verma", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-02-15T03:42:58Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Yashwanthv21", "fields": {"name": "Yashwanth Reddy", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-03-04T17:26:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Zimmerman", "fields": {"name": "Martin Zimmerman", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-05-10T10:07:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aalind0", "fields": {"name": "Aalind Singh", "score": 0.26285866099893673, "rank": 134, "trend": 0, "last_active_at": "2017-02-08T17:34:24Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10268623649958461, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashraybhandar1", "fields": {"name": null, "score": 2.8158873538788507, "rank": 57, "trend": 0, "last_active_at": "2018-04-02T14:07:50Z", "pos_in": 7, "weighted_pos_in": 2.765887353878851, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1287764510401225, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashutoshrathi", "fields": {"name": "Aashutosh Rathi", "score": 1.9815621679064774, "rank": 72, "trend": 0, "last_active_at": "2017-11-24T10:30:37Z", "pos_in": 8, "weighted_pos_in": 1.7315621679064774, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.12025021584374537, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "abhsag24", "fields": {"name": "Abhay Raizada", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-01-29T06:17:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "acashmkj", "fields": {"name": "acash mkj", "score": 1.8260892667375135, "rank": 74, "trend": 0, "last_active_at": "2017-11-15T17:54:51Z", "pos_in": 3, "weighted_pos_in": 2.0760892667375135, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.11866138867621268, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "adhikasp", "fields": {"name": "Adhika Setya Pramudita", "score": 8.034112646121137, "rank": 20, "trend": -1, "last_active_at": "2018-07-23T04:23:31Z", "pos_in": 23, "weighted_pos_in": 5.80913921360254, "pos_out": 50, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1821031597352316, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adi23arora", "fields": {"name": "Aditya Arora", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-12-29T18:22:08Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adrienverge", "fields": {"name": "Adrien Verg\u00e9", "score": 1.0, "rank": 94, "trend": 0, "last_active_at": "2017-02-06T20:17:25Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11021931896547044, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adtac", "fields": {"name": "Adhityaa", "score": 5.25170031880977, "rank": 32, "trend": 0, "last_active_at": "2018-03-12T08:43:40Z", "pos_in": 15, "weighted_pos_in": 4.60170031880977, "pos_out": 13, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1536688006689798, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alisianoi", "fields": {"name": "Alexander Lisianoi", "score": 1.2738575982996783, "rank": 85, "trend": 0, "last_active_at": "2018-04-26T10:02:38Z", "pos_in": 7, "weighted_pos_in": 2.173857598299678, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11301795711361252, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alphadose", "fields": {"name": "Anish Mukherjee", "score": 2.0546227417640814, "rank": 69, "trend": 0, "last_active_at": "2017-11-11T23:56:03Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12099684515179654, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amalrajan", "fields": {"name": "Amal Rajan", "score": 0.1528692879914984, "rank": 168, "trend": -1, "last_active_at": "2018-01-19T13:24:25Z", "pos_in": 1, "weighted_pos_in": 0.1028692879914984, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10156222001400948, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amitsin6h", "fields": {"name": "Amit singh", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-11-15T15:53:07Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ananyaarun", "fields": {"name": "Ananya Arun", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2018-06-18T13:40:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anctartica", "fields": {"name": "", "score": 3.205951115834216, "rank": 52, "trend": 0, "last_active_at": "2018-07-20T19:11:21Z", "pos_in": 11, "weighted_pos_in": 3.411689691817213, "pos_out": 4, "neg_in": 1, "weighted_neg_in": 0.10573857598299678, "neg_out": 1, "offset": 0.5, "weight_factor": 0.13276263704041572, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "andrewda", "fields": {"name": "Andrew Dassonville", "score": 17.158182784272032, "rank": 7, "trend": 0, "last_active_at": "2018-07-23T18:25:47Z", "pos_in": 33, "weighted_pos_in": 14.908182784272032, "pos_out": 45, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2753449427403195, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ankurg22", "fields": {"name": "Ankur Gupta", "score": 0.24373007438894745, "rank": 140, "trend": 0, "last_active_at": "2018-02-01T15:18:15Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1024907553716585, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anshumanv", "fields": {"name": "Anshuman Verma", "score": 0.2239107332624866, "rank": 144, "trend": 0, "last_active_at": "2018-03-19T12:25:28Z", "pos_in": 1, "weighted_pos_in": 0.12391073326248658, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10228821520300173, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aptrishu", "fields": {"name": "Rishav Kumar", "score": 4.235653560042503, "rank": 40, "trend": 0, "last_active_at": "2018-05-14T21:16:42Z", "pos_in": 11, "weighted_pos_in": 2.885653560042503, "pos_out": 27, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14328549475730473, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arjunsinghy96", "fields": {"name": "Arjun Singh Yadav", "score": 4.036928799149839, "rank": 43, "trend": 0, "last_active_at": "2017-04-28T06:55:34Z", "pos_in": 7, "weighted_pos_in": 3.686928799149839, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14125466303940576, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arnab1896", "fields": {"name": null, "score": 0.6147715196599357, "rank": 104, "trend": 0, "last_active_at": "2017-02-24T10:21:12Z", "pos_in": 2, "weighted_pos_in": 0.31477151965993566, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10628254625029186, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arpit7714", "fields": {"name": "ARPIT VARSHNEY", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-02-18T16:04:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arrayslayer", "fields": {"name": "Aditya Lahiri", "score": 0.26285866099893673, "rank": 134, "trend": 0, "last_active_at": "2017-06-27T11:07:04Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10268623649958461, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arush0311", "fields": {"name": "Arush Goyal", "score": 2.241126461211477, "rank": 65, "trend": 0, "last_active_at": "2017-02-12T19:30:48Z", "pos_in": 3, "weighted_pos_in": 2.141126461211477, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1229027861490761, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ashwini0529", "fields": {"name": "Ashwini Purohit", "score": 0.3138150903294362, "rank": 128, "trend": 0, "last_active_at": "2017-12-16T06:15:38Z", "pos_in": 2, "weighted_pos_in": 0.3138150903294362, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10320697650425444, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "attilanagy", "fields": {"name": "Attila Nagy", "score": 0.2841657810839528, "rank": 130, "trend": 0, "last_active_at": "2018-05-07T19:26:59Z", "pos_in": 2, "weighted_pos_in": 0.2841657810839528, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10290398075596896, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "atultherajput", "fields": {"name": "Atul Krishna", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-09-26T13:54:51Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "avirlrma", "fields": {"name": "Aviral Verma", "score": 0.18225292242295385, "rank": 160, "trend": 0, "last_active_at": "2017-12-14T11:27:06Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295385, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10186250074662931, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush1999", "fields": {"name": "Ayush Shridhar", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-08-03T10:15:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush9398", "fields": {"name": "Ayush Mittal", "score": 0.4972901168969174, "rank": 111, "trend": 0, "last_active_at": "2018-02-15T08:16:08Z", "pos_in": 3, "weighted_pos_in": 0.520935175345376, "pos_out": 3, "neg_in": 1, "weighted_neg_in": 0.17364505844845868, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10508196632294568, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayushin78", "fields": {"name": "Ayushi Negi", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-02-24T06:18:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bekicot", "fields": {"name": "Yana Agun Siswanto", "score": 0.2554729011689688, "rank": 137, "trend": 0, "last_active_at": "2018-06-23T05:39:31Z", "pos_in": 2, "weighted_pos_in": 1.1554729011689688, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1026107590640798, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bhavishyagopesh", "fields": {"name": "BHAVISHYA", "score": 0.5437300743889475, "rank": 107, "trend": 0, "last_active_at": "2017-12-29T11:09:57Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10555655106129963, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "biscuitsnake", "fields": {"name": "biscuitsnake", "score": 0.15069075451647157, "rank": 170, "trend": -2, "last_active_at": "2018-05-01T03:13:16Z", "pos_in": 1, "weighted_pos_in": 0.15069075451647157, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10153995688555123, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "blazeu", "fields": {"name": "Surya Widi", "score": 23.743557964069797, "rank": 3, "trend": 0, "last_active_at": "2018-07-29T06:14:20Z", "pos_in": 75, "weighted_pos_in": 22.993557964069797, "pos_out": 35, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 1.0, "weight_factor": 0.3426429922099651, "modified_comments_after_meta_review": 2}}, {"model": "meta_review.participant", "pk": "cRAN-cg", "fields": {"name": "Chiranjeev Gupta", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-06-12T07:59:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chetasr", "fields": {"name": "Chetas Murali", "score": 0.10573857598299678, "rank": 175, "trend": -2, "last_active_at": "2018-02-23T11:18:05Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10108057623492488, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chhabrabhishek", "fields": {"name": "Abhishek Chhabra", "score": 0.15382571732199785, "rank": 167, "trend": -1, "last_active_at": "2018-06-23T06:56:10Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10157199407040579, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "clarammdantas", "fields": {"name": "Clara Moraes Dantas", "score": 0.20956429330499465, "rank": 151, "trend": 0, "last_active_at": "2018-01-17T12:48:39Z", "pos_in": 1, "weighted_pos_in": 0.10956429330499463, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10214160435705714, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cornu-ammonis", "fields": {"name": "Andrew Jones", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-10-20T21:15:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cristianossd", "fields": {"name": "Cristiano Santos", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-10-19T23:32:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cypher-naman", "fields": {"name": "Naman Sharma", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-07-25T12:56:23Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "d3db0t", "fields": {"name": "Shady Tantawy", "score": 0.5092986184909668, "rank": 109, "trend": 0, "last_active_at": "2017-03-17T07:27:27Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10520468503103264, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damian1996", "fields": {"name": "Damian Stachura", "score": 0.39373007438894747, "rank": 121, "trend": 0, "last_active_at": "2018-04-17T22:34:07Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10402365321647906, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damngamerz", "fields": {"name": "Saurav Singh", "score": 7.708395324123271, "rank": 21, "trend": 0, "last_active_at": "2018-06-08T18:36:00Z", "pos_in": 12, "weighted_pos_in": 5.208395324123271, "pos_out": 50, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.17877455052915656, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "danes44", "fields": {"name": "Frume44", "score": 0.2561636556854405, "rank": 136, "trend": 0, "last_active_at": "2017-12-25T03:02:06Z", "pos_in": 1, "weighted_pos_in": 0.20616365568544046, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10261781810481047, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "devshiva619", "fields": {"name": "Devesh Verma", "score": 0.15000000000000002, "rank": 171, "trend": -2, "last_active_at": "2018-04-30T09:59:22Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10153289784482057, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dhishan", "fields": {"name": "Dhishan", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-01-06T22:08:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "diveshuttam", "fields": {"name": "Divesh Uttamchandani", "score": 0.4523379383634426, "rank": 114, "trend": 0, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 2, "weighted_pos_in": 0.3023379383634426, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10462258567231933, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "djokester", "fields": {"name": "Samriddhi Sinha", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-04-11T22:55:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dob9601", "fields": {"name": "Daniel O'Brien", "score": 1.4791710945802308, "rank": 80, "trend": 0, "last_active_at": "2018-01-06T15:55:07Z", "pos_in": 5, "weighted_pos_in": 1.8791710945802307, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.11511612122001942, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "dorothykiz1", "fields": {"name": null, "score": 0.18225292242295388, "rank": 159, "trend": 0, "last_active_at": "2018-05-30T10:29:50Z", "pos_in": 2, "weighted_pos_in": 0.36450584484590776, "pos_out": 0, "neg_in": 1, "weighted_neg_in": 0.18225292242295388, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10186250074662931, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dracarys09", "fields": {"name": "Abhijeet Dubey", "score": 1.3006907545164714, "rank": 82, "trend": 0, "last_active_at": "2017-02-15T10:40:45Z", "pos_in": 3, "weighted_pos_in": 1.2506907545164714, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11329217369584223, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "etotientz", "fields": {"name": "Satrap Rathore", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-02-02T14:26:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "fatma-mohamed", "fields": {"name": "Fatma Mohamed", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2018-05-23T18:45:13Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "firesans", "fields": {"name": "Sanjana Gunna", "score": 0.05, "rank": 179, "trend": null, "last_active_at": "2018-02-28T02:00:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gabru-md", "fields": {"name": "Manish Devgan", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-11-14T05:24:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gaocegege", "fields": {"name": "Ce Gao", "score": 2.072848034006375, "rank": 68, "trend": 0, "last_active_at": "2018-05-22T13:45:35Z", "pos_in": 6, "weighted_pos_in": 1.722848034006375, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12118309522645945, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gatesn", "fields": {"name": "Nicholas Gates", "score": 0.5619022316684372, "rank": 105, "trend": 0, "last_active_at": "2018-05-18T08:07:47Z", "pos_in": 3, "weighted_pos_in": 0.4119022316684372, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10574225813282943, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "girishramnani", "fields": {"name": "girish ramnani", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-05-03T17:41:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gkrishnan724", "fields": {"name": "GopalaKrishnan P", "score": 2.6393198724760856, "rank": 61, "trend": 0, "last_active_at": "2017-06-26T15:23:19Z", "pos_in": 8, "weighted_pos_in": 2.4393198724760854, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12697205162873787, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gokberksahin", "fields": {"name": "G\u00f6kberk \u015eahin", "score": 0.1286928799149839, "rank": 173, "trend": -2, "last_active_at": "2017-12-27T19:27:08Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10131515358843621, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gopalgoel19", "fields": {"name": "Gopal Goel", "score": 0.35000000000000003, "rank": 125, "trend": 0, "last_active_at": "2018-05-13T17:04:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10357676163791465, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gureks", "fields": {"name": "Gurek Singh", "score": 1.2214665249734318, "rank": 86, "trend": 0, "last_active_at": "2017-11-12T12:23:52Z", "pos_in": 2, "weighted_pos_in": 1.2214665249734318, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11248255602434826, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gurpreetsingh00885", "fields": {"name": null, "score": 0.25, "rank": 139, "trend": 0, "last_active_at": "2017-09-26T18:48:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10255482974136762, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshhx17", "fields": {"name": "Harsh Kumar Bhartiya", "score": 0.25, "rank": 139, "trend": 0, "last_active_at": "2018-06-22T06:05:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10255482974136762, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshit890", "fields": {"name": null, "score": 0.9273113708820407, "rank": 96, "trend": 0, "last_active_at": "2017-01-16T20:38:31Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10947649067935124, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "hemangsk", "fields": {"name": "Hemang Kumar", "score": 10.134112646121137, "rank": 16, "trend": 0, "last_active_at": "2018-06-10T02:15:49Z", "pos_in": 31, "weighted_pos_in": 7.334112646121137, "pos_out": 56, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2035637295627195, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "himanshu1603", "fields": {"name": "", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2018-02-22T18:31:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsavru", "fields": {"name": "Urvashi Verma", "score": 0.2605207226354941, "rank": 135, "trend": 0, "last_active_at": "2017-07-23T17:27:24Z", "pos_in": 2, "weighted_pos_in": 0.2105207226354941, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10266234436172697, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsraham", "fields": {"name": "Maharshi Mishra", "score": 0.3162592986184909, "rank": 127, "trend": 0, "last_active_at": "2017-11-18T19:16:03Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10323195464837832, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "impmihai", "fields": {"name": "Mihai Ionut", "score": 2.0, "rank": 71, "trend": 0, "last_active_at": "2017-04-29T21:12:36Z", "pos_in": 2, "weighted_pos_in": 2.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12043863793094087, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "incorrectusername", "fields": {"name": "Yogesh Gupta", "score": 0.4, "rank": 120, "trend": 0, "last_active_at": "2017-08-13T02:03:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10408772758618819, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "indmind", "fields": {"name": "Indmind", "score": 0.3750265674814016, "rank": 123, "trend": 0, "last_active_at": "2017-12-07T10:17:48Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10383251611361798, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ishanSrt", "fields": {"name": "Ishan Srivastava", "score": 6.946227417640803, "rank": 24, "trend": 0, "last_active_at": "2018-07-21T13:25:56Z", "pos_in": 26, "weighted_pos_in": 6.761424017003182, "pos_out": 8, "neg_in": 2, "weighted_neg_in": 0.4151965993623793, "neg_out": 1, "offset": 0.0, "weight_factor": 0.1709857135875674, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jack17529", "fields": {"name": "JACK_1729", "score": 0.35000000000000003, "rank": 125, "trend": 0, "last_active_at": "2017-03-26T17:53:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10357676163791465, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jackthepirate6", "fields": {"name": "Ajinkya Narnaware", "score": 1.9773113708820407, "rank": 73, "trend": 0, "last_active_at": "2018-05-12T15:32:01Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12020677559309519, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jayvdb", "fields": {"name": "John Vandenberg", "score": 82.70508366455638, "rank": 2, "trend": 0, "last_active_at": "2018-07-29T05:05:47Z", "pos_in": 376, "weighted_pos_in": 77.65508366455639, "pos_out": 161, "neg_in": 4, "weighted_neg_in": 4.0, "neg_out": 10, "offset": 1.0, "weight_factor": 0.9451896300340201, "modified_comments_after_meta_review": 2}}, {"model": "meta_review.participant", "pk": "jckw", "fields": {"name": "Jack W", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-03-23T17:08:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jendrikseipp", "fields": {"name": "Jendrik Seipp", "score": 2.332093517534533, "rank": 62, "trend": 0, "last_active_at": "2017-08-28T07:45:46Z", "pos_in": 15, "weighted_pos_in": 2.332093517534533, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12383240751299132, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jsecrest", "fields": {"name": "Jason Secrest", "score": 0.21381509032943616, "rank": 149, "trend": 0, "last_active_at": "2018-06-01T04:32:02Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10218504460770739, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "k4ni5h", "fields": {"name": "Kanish", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-12-22T10:09:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kartikeys98", "fields": {"name": "Kartikey", "score": 0.21625929861849089, "rank": 148, "trend": 0, "last_active_at": "2017-10-25T06:31:30Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10221002275183129, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kaustubhhiware", "fields": {"name": "Kaustubh Hiware", "score": 0.765621679064823, "rank": 100, "trend": 0, "last_active_at": "2017-05-09T10:22:07Z", "pos_in": 3, "weighted_pos_in": 0.615621679064823, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10782413214524247, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khanchi97", "fields": {"name": "Sushil khanchi", "score": 1.2997874601487758, "rank": 83, "trend": 0, "last_active_at": "2018-02-12T20:28:41Z", "pos_in": 8, "weighted_pos_in": 1.1997874601487757, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11328294264257904, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khushmeeet", "fields": {"name": "Khushmeet Singh", "score": 0.7428267800212515, "rank": 101, "trend": 0, "last_active_at": "2017-04-12T07:41:07Z", "pos_in": 3, "weighted_pos_in": 0.7428267800212515, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10759118380113052, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kriti21", "fields": {"name": "Kriti Rohilla", "score": 3.7732731137088185, "rank": 46, "trend": 0, "last_active_at": "2018-07-17T02:24:42Z", "pos_in": 12, "weighted_pos_in": 3.3232731137088183, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13856028149282423, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksangam68", "fields": {"name": "Sangam Kumar", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-02-19T15:10:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksdme", "fields": {"name": "Kilari Teja", "score": 5.480605738575982, "rank": 30, "trend": 0, "last_active_at": "2018-07-22T07:49:36Z", "pos_in": 9, "weighted_pos_in": 4.4306057385759825, "pos_out": 17, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.15600805816649566, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lalitmee", "fields": {"name": "Lalit Kumar", "score": 0.22364505844845867, "rank": 145, "trend": 0, "last_active_at": "2018-04-11T21:31:49Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10228550018733608, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "li-boxuan", "fields": {"name": "Boxuan Li", "score": 12.980021253985113, "rank": 13, "trend": 0, "last_active_at": "2018-07-29T06:14:20Z", "pos_in": 23, "weighted_pos_in": 9.280021253985112, "pos_out": 74, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2326469773730594, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lilithxxx", "fields": {"name": "Rishav Chakraborty", "score": 0.13730074388947908, "rank": 172, "trend": -2, "last_active_at": "2018-05-10T12:39:54Z", "pos_in": 1, "weighted_pos_in": 0.13730074388947908, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10140312009600295, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lshobith", "fields": {"name": "sai shobith", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-03-10T14:42:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lucas03", "fields": {"name": "Lukas Vojt", "score": 0.22077577045696029, "rank": 147, "trend": 0, "last_active_at": "2017-06-18T15:25:10Z", "pos_in": 1, "weighted_pos_in": 0.1707757704569603, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10225617801814717, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "madhukar01", "fields": {"name": "Madhukar S Holla", "score": 3.424601487778958, "rank": 50, "trend": 0, "last_active_at": "2017-04-10T16:11:59Z", "pos_in": 6, "weighted_pos_in": 3.3746014877789583, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13499709493323778, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "manankalra", "fields": {"name": "Manan Kalra", "score": 1.147980871413389, "rank": 89, "trend": 0, "last_active_at": "2018-07-20T15:46:39Z", "pos_in": 4, "weighted_pos_in": 0.597980871413389, "pos_out": 31, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11173158269123212, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mani87", "fields": {"name": "Mani Kumar", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-08-30T03:25:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mansiagarwal451", "fields": {"name": "Mansi Agarwal", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-10-16T20:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "margobra8", "fields": {"name": "Marcos G\u00f3mez", "score": 1.9773113708820407, "rank": 73, "trend": 0, "last_active_at": "2018-01-15T17:06:39Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12020677559309519, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "marian-ald", "fields": {"name": "", "score": 0.2714665249734317, "rank": 132, "trend": 0, "last_active_at": "2016-12-04T17:59:51Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10277420300715134, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "maweki", "fields": {"name": "Mario Wenzel", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-02-07T18:27:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "meetmangukiya", "fields": {"name": "Meet Mangukiya", "score": 15.419234856535589, "rank": 9, "trend": 0, "last_active_at": "2018-07-25T23:03:20Z", "pos_in": 41, "weighted_pos_in": 11.800212539851206, "pos_out": 88, "neg_in": 4, "weighted_neg_in": 1.0809776833156182, "neg_out": 4, "offset": 0.5, "weight_factor": 0.2575740792024369, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "mohit2872", "fields": {"name": "Mohit Gupta", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-11-14T09:48:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mohitkyadav", "fields": {"name": "Mohit Kumar Yadav", "score": 0.8475557917109453, "rank": 98, "trend": 0, "last_active_at": "2017-12-15T13:06:08Z", "pos_in": 4, "weighted_pos_in": 1.3975557917109453, "pos_out": 9, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10866144297652598, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "monsij", "fields": {"name": "Monsij Biswal", "score": 0.4547821466524974, "rank": 113, "trend": 0, "last_active_at": "2018-05-10T16:23:03Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10464756381644323, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mridubhatnagar", "fields": {"name": "Mridu Bhatnagar", "score": 4.983315621679066, "rank": 35, "trend": 0, "last_active_at": "2017-12-14T10:46:03Z", "pos_in": 10, "weighted_pos_in": 4.483315621679066, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15092609184354996, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mrtes", "fields": {"name": null, "score": 2.742401700318808, "rank": 58, "trend": 0, "last_active_at": "2017-11-12T12:33:42Z", "pos_in": 6, "weighted_pos_in": 2.742401700318808, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12802547770700637, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mvinoba", "fields": {"name": "Vin\u00edcius Figueiredo", "score": 0.24373007438894745, "rank": 140, "trend": 0, "last_active_at": "2018-02-06T06:52:29Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1024907553716585, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myfrom", "fields": {"name": "Wiktor Olejniczak", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-12-14T15:45:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myint", "fields": {"name": "Steven Myint", "score": 0.21625929861849089, "rank": 148, "trend": 0, "last_active_at": "2017-03-25T11:58:13Z", "pos_in": 2, "weighted_pos_in": 0.21625929861849089, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10221002275183129, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nalinbhardwaj", "fields": {"name": "Nalin Bhardwaj", "score": 2.6726886291179595, "rank": 59, "trend": 0, "last_active_at": "2018-04-19T05:18:22Z", "pos_in": 5, "weighted_pos_in": 2.372688629117959, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12731305759634234, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namantw", "fields": {"name": "Naman Tiwari", "score": 0.20095642933049948, "rank": 155, "trend": 0, "last_active_at": "2018-01-07T17:19:37Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1020536378494904, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namanyadav12", "fields": {"name": "Naman Yadav", "score": 0.24017003188097746, "rank": 141, "trend": 0, "last_active_at": "2017-01-16T17:45:30Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10245437416173891, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "naveentata", "fields": {"name": "Naveen Tata", "score": 0.10382571732199786, "rank": 176, "trend": -2, "last_active_at": "2017-11-18T13:39:12Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10106102812213227, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nealkarpe", "fields": {"name": "Neal Karpe", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-11-12T09:50:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "neelanshsahai", "fields": {"name": "Neelansh Sahai", "score": 0.8163124335812947, "rank": 99, "trend": 0, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 4, "weighted_pos_in": 0.7663124335812946, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10834215713424665, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nemaniarjun", "fields": {"name": "Arjun Nemani", "score": 3.230765143464399, "rank": 51, "trend": 0, "last_active_at": "2018-05-10T20:29:45Z", "pos_in": 11, "weighted_pos_in": 3.080765143464399, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13301621950358655, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "netman92", "fields": {"name": "Stanislav Komanec", "score": 0.31381509032943616, "rank": 129, "trend": 0, "last_active_at": "2017-05-29T08:39:39Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10320697650425444, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "newbazz", "fields": {"name": null, "score": 7.5072263549415466, "rank": 22, "trend": 0, "last_active_at": "2018-05-10T12:40:12Z", "pos_in": 23, "weighted_pos_in": 4.907226354941546, "pos_out": 44, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.1767187406671336, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nguptaa", "fields": {"name": "Nikhil Gupta", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2018-02-16T14:44:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikhil-seth", "fields": {"name": "Nikhil Seth", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-12-08T13:18:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikita1412", "fields": {"name": null, "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-03-14T08:25:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nitinkgp23", "fields": {"name": "Nitin Choudhary", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-01-27T23:54:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityanandagohain", "fields": {"name": "Nityananda Gohain", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-04-28T15:40:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityeshaga", "fields": {"name": "Nityesh Agarwal", "score": 1.8207757704569603, "rank": 75, "trend": 0, "last_active_at": "2018-03-17T17:54:36Z", "pos_in": 5, "weighted_pos_in": 1.4707757704569602, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11860708836289986, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nkprince007", "fields": {"name": "Naveen Kumar Sangi", "score": 3.759404888416573, "rank": 47, "trend": 0, "last_active_at": "2017-12-06T18:01:02Z", "pos_in": 11, "weighted_pos_in": 3.659404888416573, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13841855767507777, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nvzard", "fields": {"name": "Nitanshu", "score": 3.929171094580231, "rank": 44, "trend": 0, "last_active_at": "2018-07-25T23:03:20Z", "pos_in": 4, "weighted_pos_in": 0.8791710945802313, "pos_out": 81, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14015345268542198, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "paavininanda", "fields": {"name": "Paavini Nanda", "score": 0.24373007438894745, "rank": 140, "trend": 0, "last_active_at": "2018-01-23T12:07:14Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1024907553716585, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "palash25", "fields": {"name": "Palash Nigam", "score": 8.18544102019128, "rank": 19, "trend": -1, "last_active_at": "2018-07-10T08:27:49Z", "pos_in": 19, "weighted_pos_in": 5.785441020191281, "pos_out": 40, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.1836496326583804, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pareksha", "fields": {"name": "Pareksha Manchanda", "score": 6.506323060573857, "rank": 27, "trend": 0, "last_active_at": "2018-07-26T10:45:40Z", "pos_in": 11, "weighted_pos_in": 4.956323060573857, "pos_out": 31, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16649019064840007, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parimatrix", "fields": {"name": "Parikansh Ahluwalia", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-12-15T11:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parthboricha", "fields": {"name": null, "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-11-01T17:22:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prachi1210", "fields": {"name": "Prachi Manchanda", "score": 0.15155001112871574, "rank": 169, "trend": null, "last_active_at": "2017-06-21T12:11:03Z", "pos_in": 1, "weighted_pos_in": 0.15155001112871574, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10154873790294494, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pradeepgangwar", "fields": {"name": "Pradeep Gangwar", "score": 2.285653560042508, "rank": 63, "trend": 0, "last_active_at": "2018-01-15T17:40:31Z", "pos_in": 4, "weighted_pos_in": 2.1856535600425078, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12335782277463742, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prashant0598", "fields": {"name": "Prashant Nigam", "score": 1.1847502656748123, "rank": 87, "trend": 0, "last_active_at": "2017-11-30T07:03:00Z", "pos_in": 4, "weighted_pos_in": 0.7347502656748123, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11210734085935675, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pratyushprakash", "fields": {"name": "Pratyush Prakash", "score": 5.201700318809775, "rank": 33, "trend": 0, "last_active_at": "2017-04-24T19:26:51Z", "pos_in": 14, "weighted_pos_in": 4.501700318809775, "pos_out": 14, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15315783472070635, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "priyanshsaxena", "fields": {"name": "Priyansh Saxena", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-01-28T10:54:01Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prnvdixit", "fields": {"name": "Pranav Dixit", "score": 6.53639744952178, "rank": 26, "trend": 0, "last_active_at": "2018-07-23T08:03:02Z", "pos_in": 24, "weighted_pos_in": 5.48639744952178, "pos_out": 21, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1667975304217505, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "proishan11", "fields": {"name": "Ishan Singh", "score": 0.5401700318809775, "rank": 108, "trend": 0, "last_active_at": "2017-03-24T11:54:16Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10552016985138005, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pushkalkatara", "fields": {"name": "Pushkal Katara", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-02-12T19:39:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raduklb", "fields": {"name": null, "score": 1.1506907545164715, "rank": 88, "trend": 0, "last_active_at": "2018-07-19T05:08:35Z", "pos_in": 2, "weighted_pos_in": 1.1506907545164715, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11175927585102166, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raghavmittal101", "fields": {"name": "Raghav Mittal", "score": 0.21285866099893672, "rank": 150, "trend": 0, "last_active_at": "2017-07-05T15:51:33Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10217527055131108, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rahulkrishnan98", "fields": {"name": "Rahul Krishnan", "score": 0.2691285866099893, "rank": 133, "trend": 0, "last_active_at": "2017-02-08T10:22:43Z", "pos_in": 1, "weighted_pos_in": 0.11912858660998926, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10275031086929372, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raj-maurya", "fields": {"name": "Raj Maurya", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-02-08T20:43:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "random-access7", "fields": {"name": "Aabhaas Vaish", "score": 1.4155685441020194, "rank": 81, "trend": 0, "last_active_at": "2018-03-01T07:59:09Z", "pos_in": 2, "weighted_pos_in": 1.0655685441020193, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11446614646966514, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rattandeep1998", "fields": {"name": "RATTANDEEP SINGH", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-12-18T14:24:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "realslimshanky", "fields": {"name": "Shashank Kumar", "score": 0.18618490967056384, "rank": 158, "trend": 0, "last_active_at": "2018-02-13T11:28:23Z", "pos_in": 1, "weighted_pos_in": 0.10669500531349625, "pos_out": 4, "neg_in": 2, "weighted_neg_in": 0.3205100956429324, "neg_out": 1, "offset": 0.0, "weight_factor": 0.1019026829784808, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refactormyself", "fields": {"name": "Bolarinwa Saheed Olayemi", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-04-12T08:45:21Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refeed", "fields": {"name": "Rafid Aslam", "score": 2.9663124335812947, "rank": 55, "trend": 0, "last_active_at": "2018-07-11T04:13:07Z", "pos_in": 5, "weighted_pos_in": 2.666312433581295, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.1303136929100081, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "rhemon", "fields": {"name": "Ridhwanul Haque", "score": 3.904357066950049, "rank": 45, "trend": 0, "last_active_at": "2018-05-08T09:23:07Z", "pos_in": 13, "weighted_pos_in": 3.904357066950049, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13989987022225117, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "richer6605", "fields": {"name": "Dean Lin", "score": 0.27502656748140175, "rank": 131, "trend": 0, "last_active_at": "2017-11-27T21:08:43Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10281058421707093, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "robbyoconnor", "fields": {"name": "Robby O'Connor", "score": 0.2714665249734317, "rank": 132, "trend": 0, "last_active_at": "2017-10-23T06:16:26Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10277420300715134, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanbanerjee", "fields": {"name": "Rohan Banerjee", "score": 0.9273113708820407, "rank": 96, "trend": 0, "last_active_at": "2018-01-16T19:52:50Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10947649067935124, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanraju97", "fields": {"name": "Rohan Raju", "score": 0.15478214665249734, "rank": 166, "trend": -1, "last_active_at": "2017-03-28T16:55:43Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1015817681268021, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanrk", "fields": {"name": "Rohan", "score": 0.36354941551540826, "rank": 124, "trend": 0, "last_active_at": "2018-05-07T10:39:40Z", "pos_in": 2, "weighted_pos_in": 0.36354941551540826, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1037152274368623, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rpanczer", "fields": {"name": "Bobby Panczer", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-10-17T00:31:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rubdos", "fields": {"name": "Ruben De Smet", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-03-07T03:13:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rupav", "fields": {"name": "rupav jain", "score": 0.25, "rank": 139, "trend": 0, "last_active_at": "2017-10-03T17:34:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10255482974136762, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sadovnychyi", "fields": {"name": "Dmytro Sadovnychyi", "score": 0.2, "rank": 156, "trend": 0, "last_active_at": "2017-06-14T11:01:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10204386379309409, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sahilarora535", "fields": {"name": "Sahil Arora", "score": 0.44102019128586484, "rank": 115, "trend": 0, "last_active_at": "2017-03-19T16:49:09Z", "pos_in": 2, "weighted_pos_in": 0.44102019128586484, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10450692600496304, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sangamcse", "fields": {"name": "Sangam Kumar", "score": 8.647874601487777, "rank": 17, "trend": 0, "last_active_at": "2018-07-18T18:08:43Z", "pos_in": 20, "weighted_pos_in": 7.797874601487778, "pos_out": 33, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 1.0, "weight_factor": 0.18837538892599412, "modified_comments_after_meta_review": 2}}, {"model": "meta_review.participant", "pk": "sanjeethboddi", "fields": {"name": "Sanjeeth", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2018-05-21T03:55:15Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sarthakchakerverty", "fields": {"name": "Sarthak Chakerverty", "score": -0.21955366631243298, "rank": 182, "trend": -3, "last_active_at": "2018-07-13T08:57:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 2, "weighted_neg_in": 0.319553666312433, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "satwikkansal", "fields": {"name": "Satwik Kansal", "score": 10.68698193411264, "rank": 15, "trend": 0, "last_active_at": "2018-04-07T15:38:12Z", "pos_in": 18, "weighted_pos_in": 9.63698193411264, "pos_out": 21, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.20921367716291722, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sgsh123", "fields": {"name": null, "score": 0.10573857598299678, "rank": 175, "trend": -2, "last_active_at": "2017-02-20T03:35:34Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10108057623492488, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shaipranesh11", "fields": {"name": null, "score": 0.2, "rank": 156, "trend": 0, "last_active_at": "2017-12-02T09:48:06Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10204386379309409, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shashank-b", "fields": {"name": "Shashank Batra", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-01-08T18:17:29Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shikharvaish28", "fields": {"name": "Shikhar Vaish", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-06-21T17:43:50Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreab373", "fields": {"name": "shreab373", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-04-08T16:45:09Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyans800755", "fields": {"name": "Shreyans", "score": 18.680286928799145, "rank": 5, "trend": 0, "last_active_at": "2018-06-09T12:13:12Z", "pos_in": 38, "weighted_pos_in": 17.205313496280546, "pos_out": 35, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2908998104919066, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyateeza", "fields": {"name": "Shreya", "score": 1.276780021253985, "rank": 84, "trend": 0, "last_active_at": "2018-01-14T18:09:18Z", "pos_in": 4, "weighted_pos_in": 1.3841657810839527, "pos_out": 1, "neg_in": 1, "weighted_neg_in": 0.15738575982996783, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1130478222859346, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shrutishrm512", "fields": {"name": "Shruti Sharma", "score": 0.25, "rank": 139, "trend": 0, "last_active_at": "2017-03-28T08:50:11Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10255482974136762, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sibasish14", "fields": {"name": "Sibasish Ghosh", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-12-14T12:59:16Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "siddhant-curious", "fields": {"name": "Siddhant Chhabra", "score": 0.22773645058448444, "rank": 143, "trend": 0, "last_active_at": "2018-05-08T04:55:07Z", "pos_in": 2, "weighted_pos_in": 0.22773645058448444, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10232731142858695, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sidharthskumar", "fields": {"name": "sidharth sk", "score": 0.42104144527098825, "rank": 119, "trend": 0, "last_active_at": "2017-07-18T10:13:56Z", "pos_in": 1, "weighted_pos_in": 0.1210414452709882, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1043027568269069, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sils", "fields": {"name": "Lasse Schuirmann", "score": 17.284856535600408, "rank": 6, "trend": 0, "last_active_at": "2018-01-03T08:40:29Z", "pos_in": 60, "weighted_pos_in": 16.934856535600407, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2766394622096968, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sims1253", "fields": {"name": "Maximilian Scholz", "score": 6.859936238044619, "rank": 25, "trend": 0, "last_active_at": "2017-11-02T17:21:01Z", "pos_in": 34, "weighted_pos_in": 6.759936238044619, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.17010387649936728, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "singhYash123", "fields": {"name": "Yash", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-10-29T13:43:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sks444", "fields": {"name": "Shrikrishna Singh", "score": 5.523485653560039, "rank": 29, "trend": 0, "last_active_at": "2018-07-28T07:20:24Z", "pos_in": 12, "weighted_pos_in": 2.9234856535600384, "pos_out": 62, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.15644626169492998, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "snakevenom04", "fields": {"name": "Sir Cheshire", "score": 0.2547821466524973, "rank": 138, "trend": 0, "last_active_at": "2017-08-25T07:26:44Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10260370002334913, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "solutusimmensus", "fields": {"name": "SolutusImmensus", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-11-09T02:37:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sonali0901", "fields": {"name": "sonali0901", "score": 0.10095642933049948, "rank": 177, "trend": -2, "last_active_at": "2017-10-18T17:04:10Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10103170595294335, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sopelj", "fields": {"name": "Jesse Sopel", "score": 0.2, "rank": 156, "trend": 0, "last_active_at": "2018-05-05T13:35:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10204386379309409, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "soumya-ranjan7", "fields": {"name": "Soumya Ranjan", "score": 0.10382571732199786, "rank": 176, "trend": -2, "last_active_at": "2017-10-19T11:28:17Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10106102812213227, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sourojit", "fields": {"name": "Sourojit Bhaduri", "score": 1.135919234856536, "rank": 90, "trend": 0, "last_active_at": "2018-01-02T20:21:03Z", "pos_in": 3, "weighted_pos_in": 1.135919234856536, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11160832098001207, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "srikanth100", "fields": {"name": "Srikanth Kini", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-02-13T12:59:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "starkblaze01", "fields": {"name": "MAYANK PATHELA", "score": 0.2286928799149839, "rank": 142, "trend": 0, "last_active_at": "2018-06-28T12:56:00Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10233708548498326, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "stellargo", "fields": {"name": "Sumit Sarin", "score": 0.4702444208289045, "rank": 112, "trend": 0, "last_active_at": "2018-04-22T10:08:32Z", "pos_in": 2, "weighted_pos_in": 0.3702444208289045, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1048055777281835, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supergr35", "fields": {"name": "Grant Parajuli", "score": 7.251859723698191, "rank": 23, "trend": 0, "last_active_at": "2017-11-14T19:07:24Z", "pos_in": 25, "weighted_pos_in": 6.65185972369819, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1741090676093201, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supriyanta", "fields": {"name": "Supriyanta Poddar", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-11-19T19:37:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "susg", "fields": {"name": "sushant gupta", "score": 1.0, "rank": 94, "trend": 0, "last_active_at": "2018-04-18T22:25:59Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11021931896547044, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "swapagarwal", "fields": {"name": "Swapnil Agarwal", "score": 0.16599362380446298, "rank": 161, "trend": 0, "last_active_at": "2017-10-18T06:50:39Z", "pos_in": 1, "weighted_pos_in": 0.16599362380446298, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10169634178789212, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "synicalsyntax", "fields": {"name": "Cynthia Lin", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-12-08T07:18:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "tabias", "fields": {"name": null, "score": 0.1633900106269925, "rank": 162, "trend": 0, "last_active_at": "2017-03-02T07:57:36Z", "pos_in": 1, "weighted_pos_in": 0.11339001062699249, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10166973463436885, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "theOriginalMuktaka", "fields": {"name": "", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-12-27T12:40:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "thisch", "fields": {"name": "Thomas Hisch", "score": 2.6401700318809724, "rank": 60, "trend": 0, "last_active_at": "2017-06-12T21:21:05Z", "pos_in": 8, "weighted_pos_in": 2.6401700318809724, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12698073967886792, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "traff", "fields": {"name": "Dmitry Trofimov", "score": 0.0, "rank": 181, "trend": -3, "last_active_at": "2017-01-26T00:50:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "troublemagnet", "fields": {"name": "Gunjan Karamchandani", "score": 2.155738575982997, "rank": 66, "trend": 0, "last_active_at": "2017-11-11T12:00:39Z", "pos_in": 3, "weighted_pos_in": 2.105738575982997, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12203018011413927, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "twinone", "fields": {"name": "Luuk W.", "score": 0.19277364505844796, "rank": 157, "trend": 0, "last_active_at": "2017-03-20T14:45:54Z", "pos_in": 1, "weighted_pos_in": 0.19277364505844796, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10197001536698867, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "umeshksingla", "fields": {"name": "Umesh Singla", "score": 2.0046227417640816, "rank": 70, "trend": 0, "last_active_at": "2017-09-04T17:38:53Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12048587920352302, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "underyx", "fields": {"name": "Bence Nagy", "score": 0.10382571732199786, "rank": 176, "trend": -2, "last_active_at": "2017-05-28T03:21:13Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10106102812213227, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "urohit011", "fields": {"name": "Rohit Upadhyay", "score": 1.0273113708820407, "rank": 93, "trend": 0, "last_active_at": "2017-11-23T03:10:16Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11049842257589827, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "userzimmermann", "fields": {"name": "Stefan Zimmermann", "score": 15.993251859723685, "rank": 8, "trend": 0, "last_active_at": "2018-01-06T09:09:24Z", "pos_in": 46, "weighted_pos_in": 11.443251859723684, "pos_out": 83, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.2634401420496196, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "utkarsh2102", "fields": {"name": "Utkarsh Gupta", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-05-28T22:48:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaibhavsingh97", "fields": {"name": "Vaibhav Singh", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-10-29T20:38:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaishnavm217", "fields": {"name": "Vaishnav Murali", "score": 0.20451647183846944, "rank": 153, "trend": 0, "last_active_at": "2017-03-01T11:58:41Z", "pos_in": 1, "weighted_pos_in": 0.15451647183846942, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10209001905940998, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vddesai1998", "fields": {"name": "Vishal Desai", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2017-12-21T12:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vibhanshuvaibhav", "fields": {"name": "Vibhanshu Vaibhav", "score": 0.20738575982996782, "rank": 152, "trend": 0, "last_active_at": "2018-01-19T13:24:25Z", "pos_in": 1, "weighted_pos_in": 0.15738575982996783, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10211934122859889, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vijeth-aradhya", "fields": {"name": "euleram", "score": 2.080446333687567, "rank": 67, "trend": 0, "last_active_at": "2017-03-26T12:34:47Z", "pos_in": 3, "weighted_pos_in": 1.980446333687567, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1212607446744968, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vipuldcoder", "fields": {"name": "vipul Aggarwal", "score": 0.1, "rank": 178, "trend": -2, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102193189654705, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "virresh", "fields": {"name": "Viresh Gupta", "score": 3.634218916046757, "rank": 48, "trend": 1, "last_active_at": "2018-07-28T14:31:32Z", "pos_in": 11, "weighted_pos_in": 3.334218916046757, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13713924229342803, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wisn", "fields": {"name": "Wisnu Adi Nurcahyo", "score": 3.5862380446333617, "rank": 49, "trend": -1, "last_active_at": "2018-07-23T13:50:33Z", "pos_in": 12, "weighted_pos_in": 3.2362380446333616, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13664891046421332, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wyj1026", "fields": {"name": "Wang Yijie", "score": 0.2214665249734319, "rank": 146, "trend": 0, "last_active_at": "2017-12-19T16:43:19Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10226323705887783, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "xferra", "fields": {"name": "Andrey", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yash-nisar", "fields": {"name": "Yash Nisar", "score": 20.523113708820397, "rank": 4, "trend": 0, "last_active_at": "2017-09-03T12:50:43Z", "pos_in": 33, "weighted_pos_in": 14.273113708820395, "pos_out": 135, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.3097322451550546, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "yashLadha", "fields": {"name": "Yash Ladha", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-03-02T12:08:38Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashasingh", "fields": {"name": "Yasha", "score": -0.4513283740701395, "rank": 184, "trend": -3, "last_active_at": "2017-12-12T17:28:20Z", "pos_in": 2, "weighted_pos_in": 0.3759829968119013, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.9273113708820407, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashovardhanagrawal", "fields": {"name": "Yashovardhan Agrawal", "score": 2.268862911795962, "rank": 64, "trend": 0, "last_active_at": "2017-11-27T07:58:27Z", "pos_in": 11, "weighted_pos_in": 2.0688629117959616, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12318623378456896, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yukiisbored", "fields": {"name": "Muhammad Kaisar Arkhan", "score": 4.521625929861844, "rank": 37, "trend": 0, "last_active_at": "2018-05-18T17:39:46Z", "pos_in": 27, "weighted_pos_in": 4.771625929861844, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.14620793761980003, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "yzgyyang", "fields": {"name": "Guangyuan (Charlie) Yang", "score": 3.1009564293304996, "rank": 54, "trend": 0, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 4, "weighted_pos_in": 3.1009564293304996, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13168966284935466, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zenara", "fields": {"name": "Chathurika Senani", "score": 0.05, "rank": 179, "trend": -2, "last_active_at": "2017-04-06T19:27:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10051096594827352, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zwliew", "fields": {"name": "Zhao Wei Liew", "score": 0.04871011885228427, "rank": 180, "trend": null, "last_active_at": "2017-12-28T06:48:01Z", "pos_in": 2, "weighted_pos_in": 0.5487101188522843, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.1056074437241327, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI2Mzk3ODM5OQ==", "fields": {"body": "So, have I to do it for the link above? http://coala.github.io/coala-html/#/", "diff": null, "created_at": "2016-11-30T19:59:28Z", "last_edited_at": null, "author": "marian-ald", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI2NDcxNzMzMw==", "fields": {"body": "I meant below ABOUT section and above PROJECT STATUS section, ie. between the ABOUT and PROJECT STATUS section. Also, since we already have a title named DEMO, renaming DEMO PAGE to something else would be a good option. \ud83d\ude04", "diff": null, "created_at": "2016-12-04T17:26:20Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI2OTM5MDIwMg==", "fields": {"body": "nice, I like the direction of this :) 'til now you aren't really supposed to use affected code at all are you? You gotta also add a commit to DefaultArgParser adding the info to the help.", "diff": null, "created_at": "2016-12-27T22:13:57Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI2OTY1MzMwNw==", "fields": {"body": "@LeafyLi we're helping a lot of people getting started and it doesn't matter who's good enough or not. What matters is who gets good enough. That's what this newcomer process is about, we're not vetting out people who aren't good enough because if you look at it this way most people aren't. But the whole point of this is to become good enough. Every community has it's tricks and things that you have to learn to become good enough to get in. If you do it, you win. Key takeaway is: we all sucked when we started, it's on you to become better and we're here to help you doing that as best as we can.", "diff": null, "created_at": "2016-12-29T16:17:37Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI2OTcxNTAyMg==", "fields": {"body": "@sils Yeah I have done a couple of basic reviews if that counts. And, this counts as one difficulty/low right? :) I've also added GhcModBear PR just now as well. Would love to be a part of this community :D\nI need to fill up the survey form though!", "diff": null, "created_at": "2016-12-30T00:31:56Z", "last_edited_at": null, "author": "vijeth-aradhya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI2OTg0MTM0Nw==", "fields": {"body": "one last shot and it's ready :)", "diff": null, "created_at": "2016-12-31T01:15:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI2OTgzNDY1OQ==", "fields": {"body": ":D I didn't know we had international bears", "diff": null, "created_at": "2016-12-30T23:28:16Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI2OTk2OTQwMA==", "fields": {"body": "/me watches the build like a really good tv series", "diff": null, "created_at": "2017-01-02T12:58:40Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MDA2NTcwNw==", "fields": {"body": "Oh and also your commit message does not comply with our standard. Please read this guide and adjust it :)", "diff": null, "created_at": "2017-01-03T08:04:48Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MTAxMzUzMA==", "fields": {"body": "Try to run the command coala locally before pushing to your fork. It'd help you avoid gitmate errors.", "diff": null, "created_at": "2017-01-06T21:33:39Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MTE4Nzk1Mg==", "fields": {"body": "well a long commit body doesn't really hurt anyone :D", "diff": null, "created_at": "2017-01-08T23:20:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MTEwNTIxNw==", "fields": {"body": "@satwikkansal I think you should squash your 4 commits into 2 ( or 1 ). One for gem and one for package.json.\nWe dont want to clutter our git log. And the changes are clearly related.", "diff": null, "created_at": "2017-01-07T19:41:42Z", "last_edited_at": "2017-01-07T19:41:55Z", "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MTIyMTM4Nw==", "fields": {"body": "Hey, this is your first contribution, right? Congrats and welcome to the coalaians! :) You've done your first step to become a coala developer.\nRultor will now automatically release your changes as a prerelease so users can experience the goodness of your changes right now.\nWe would really appreciate it if you could help us with\n\ntelling us about your experience\nsome code reviews for other newcomers\nfixing at least a difficulty/low issue\nfill our usability survey\n\nIf you've done those and tell us about it so we can promote you to a coala developer!\nWe're all volunteers and we're currently struggling to keep this up. Helping all those newcomers is a lot of work and we do need your help so we can continue this for others!", "diff": null, "created_at": "2017-01-09T07:02:44Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MTIyMjI2OQ==", "fields": {"body": "ok I don't want to be so nitpicky and since it's already rebased I'm just merging it - still in the future try to watch your commit messages! a5c2841 is ready", "diff": null, "created_at": "2017-01-09T07:12:48Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MTkwNzA1OQ==", "fields": {"body": "unack 9265066", "diff": null, "created_at": "2017-01-11T15:57:09Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MTkwNzI3Mg==", "fields": {"body": "commit message ->\nLinter: Add __module__ attribute\n\nNeeded for Windows compatability to support pickling of Linter classes.", "diff": null, "created_at": "2017-01-11T15:57:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MjU0MDYzNw==", "fields": {"body": "Oh. Didn't know you could add doctests.\nThanks for the info.", "diff": null, "created_at": "2017-01-13T20:32:26Z", "last_edited_at": "2017-01-13T20:32:52Z", "author": "namanyadav12", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MjUzODc1Mw==", "fields": {"body": "I have added tests. (doctests)\nCI wont pass without 100% coverage btw :)", "diff": null, "created_at": "2017-01-13T20:23:56Z", "last_edited_at": "2017-01-13T20:27:18Z", "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MjY4ODMwNA==", "fields": {"body": "@aptrishu I'll batch merge a lot of PRs after all this reviewing so don't bother with the rebase", "diff": null, "created_at": "2017-01-15T11:10:01Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MjYxNzI0MA==", "fields": {"body": "No issue most importantly learn and get better, we all do errors :)", "diff": null, "created_at": "2017-01-14T11:05:30Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MzE2NTYzNQ==", "fields": {"body": "I think the regex should be [^:]*|[^:]*[^: ]: [A-Z0-9*].*\nThe current one would also allow messages like\ns:: description\nand not allow\nt: description (it has to match two letters currently)", "diff": null, "created_at": "2017-01-17T13:54:42Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MzQyNTYzNA==", "fields": {"body": "Hey if  you push your code and tests here. It will be easy to review and help you.  :)", "diff": null, "created_at": "2017-01-18T09:28:00Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MzU5MzQyMg==", "fields": {"body": "ack 911b1f1", "diff": null, "created_at": "2017-01-18T20:34:01Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MzUxMDMwMA==", "fields": {"body": "@shrutishrm512 Push your tests too. The problem is probably in the tests, not in the code.\nOnce the tests are online everyone can help find the mistake. :)", "diff": null, "created_at": "2017-01-18T15:41:20Z", "last_edited_at": "2017-01-18T15:42:25Z", "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MzcxMjU2MQ==", "fields": {"body": "ack bcd2c65", "diff": null, "created_at": "2017-01-19T08:37:48Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3MzgzNTUwNA==", "fields": {"body": "urgh @Makman2 just made a bunch of cherry picks but left out this one apparently :/", "diff": null, "created_at": "2017-01-19T17:06:10Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDA1MzQyNQ==", "fields": {"body": "Spelling mistake in shortlog of 906a05a", "diff": null, "created_at": "2017-01-20T11:43:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDA2ODMxMQ==", "fields": {"body": "(also please rebase while you're at it, you know the drill :))", "diff": null, "created_at": "2017-01-20T13:09:13Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDEwODM3Nw==", "fields": {"body": "now we can use rultor \ud83c\udf89", "diff": null, "created_at": "2017-01-20T16:01:54Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDEyNzc0Mg==", "fields": {"body": "aaand another rebase, then we can really merge this :)", "diff": null, "created_at": "2017-01-20T17:19:30Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDI2NTM1Mg==", "fields": {"body": "@pratyushprakash thanks a lot for this :)", "diff": null, "created_at": "2017-01-21T14:34:46Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDI2NjY4NQ==", "fields": {"body": "Hey your shortlog is greater than 50 characters try shortening it.", "diff": null, "created_at": "2017-01-21T15:00:28Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDI4MjI0Mw==", "fields": {"body": "ack 7f3c97e gogogo! :)", "diff": null, "created_at": "2017-01-21T19:21:42Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDMyODkzMQ==", "fields": {"body": "@hemangsk I made the necessary changes. Is it alright now?", "diff": null, "created_at": "2017-01-22T12:48:14Z", "last_edited_at": null, "author": "SiddharthKumar02", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDMzODkyNw==", "fields": {"body": "Adding a sample output would be nice while you are updating the info.", "diff": null, "created_at": "2017-01-22T15:51:56Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDU2Mjg5OQ==", "fields": {"body": "could you also formulate why coala needs/wants a gui in a nice paragraph? I guess I know your Idea behind it but considering who the target audience of coala is(devs) why would a gui be a nice thing?", "diff": null, "created_at": "2017-01-23T17:47:50Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTEwNDgyNA==", "fields": {"body": "@Techievena oh I see what you actually did. Sorry for misinterpreting, I thought you were silencing. Yes, this is fine\nI would recommend you correct download progress information in the commit to download progress indicators then.", "diff": null, "created_at": "2017-01-25T13:15:10Z", "last_edited_at": "2017-01-25T13:16:25Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTI1NjQ1Ng==", "fields": {"body": "Hi, I am PyCharm team lead. I can be a co-mentor for this project. The idea behind the support of mypy and pylint along with the coala is that it's better to have a general mechanism of highlighting code analysis results from external tools. (By the way, we already have something similar for PEP8) Of course the primary goal can be to support coala, but the API should be done in a way to be able to support others.", "diff": null, "created_at": "2017-01-25T22:43:00Z", "last_edited_at": null, "author": "traff", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTI5MjU4MA==", "fields": {"body": "Hi, I'm a newcomer to coala and I'm interested in this project.\nSo jetbrains IDEs don't have a good support to static analysis and the community want students to find a general way to write static analysis plugin?\nCould we reference https://github.com/Microsoft/language-server-protocol?", "diff": null, "created_at": "2017-01-26T02:20:11Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTIzNDI1NQ==", "fields": {"body": "Simple lru cache\n\u2026\nOn Jan 25, 2017 21:56, \"Mischa Kr\u00fcger\" ***@***.***> wrote:\n *@Makman2* commented on this pull request.\n ------------------------------\n\n In coalib/bearlib/abstractions/Linter.py\n <#3534>:\n\n >              \"\"\"\n -            return options['executable']\n +            return shutil.which(options['executable'])\n\n can we maybe cache the value? For 1000+ files this could be a bit slow^^\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#3534>, or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AFc6KMCHUfzMGwRas7L08iXUR0yHFmvwks5rV7cagaJpZM4LhVsg>\n .", "diff": null, "created_at": "2017-01-25T21:12:05Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTU0ODc5Nw==", "fields": {"body": "should be the last iteration, after your changes we should be able to merge \ud83d\udc4d :)", "diff": null, "created_at": "2017-01-26T23:39:34Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTYwNzUxNw==", "fields": {"body": "@Makman2 Did as you said :) . Btw, what does ack and unack mean? I couldn't understand those comments.", "diff": null, "created_at": "2017-01-27T07:48:20Z", "last_edited_at": null, "author": "nitinkgp23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTc0NDIxMw==", "fields": {"body": ":D Thanks @Makman2 . That was my first PR merged! Hope to have many more soon! :D", "diff": null, "created_at": "2017-01-27T18:55:22Z", "last_edited_at": null, "author": "nitinkgp23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTk3NjAzNg==", "fields": {"body": "This is related to Issue #3654", "diff": null, "created_at": "2017-01-30T04:03:09Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NjAyNzk0MQ==", "fields": {"body": "@NiklasMM don't worry I'll always be there for you ;)", "diff": null, "created_at": "2017-01-30T10:30:29Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ==", "fields": {"body": "In the future, please develop on a new branch rather than master. Here's a link to explain how :)\nhttp://api.coala.io/en/latest/Developers/Git_Basics.html#creating-a-new-branch", "diff": null, "created_at": "2017-02-01T20:29:09Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NjcyOTE0Ng==", "fields": {"body": "Please change your commit shortlog to use \"Change\" instead of \"Changing\". This uses the imperative tense. See the following link :)\nhttp://api.coala.io/en/latest/Developers/Writing_Good_Commits.html#shortlog", "diff": null, "created_at": "2017-02-01T17:51:16Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3Njk3MDY0Mw==", "fields": {"body": "Hey, this is your first contribution, right? Congrats and welcome to the coalaians! :) You've done your first step to become a coala developer.\nYour changes are auomatically released and live already.\nWe would really appreciate it if you could help us with\n\ntelling us about your experience\nsome code reviews for other newcomers\nfixing at least a difficulty/low issue\nfill our usability survey\n\nIf you've done those and tell us about it so we can promote you to a coala developer!\nWe're all volunteers and we're currently struggling to keep this up. Helping all those newcomers is a lot of work and we do need your help so we can continue this for others!", "diff": null, "created_at": "2017-02-02T14:22:47Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3Njk3NDg5NA==", "fields": {"body": "ack bdde582", "diff": null, "created_at": "2017-02-02T14:39:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzE4MzY1Mg==", "fields": {"body": "@sils I actually tried this last week myself as well. Somehow I didn't see the same performance increase as with the other method. Have you benchmarked this?", "diff": null, "created_at": "2017-02-03T07:38:41Z", "last_edited_at": null, "author": "underyx", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI2MzkwNw==", "fields": {"body": "Ya the Left align solution sounds better \ud83d\udc4d", "diff": null, "created_at": "2017-02-03T14:44:29Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI3NTQ4NA==", "fields": {"body": "your commits need squashing and please read coala.io/commits carefully", "diff": null, "created_at": "2017-02-03T15:24:32Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI4MTA4NQ==", "fields": {"body": "credits to @impmihai for the solution :)", "diff": null, "created_at": "2017-02-03T15:43:14Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw==", "fields": {"body": "Yup, not possible. No problem, i will get onto another isuue.", "diff": null, "created_at": "2017-02-03T11:50:29Z", "last_edited_at": null, "author": "aalind0", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzM0MTE0OQ==", "fields": {"body": "@Mariatta Here is the screenshot-", "diff": null, "created_at": "2017-02-03T19:35:30Z", "last_edited_at": null, "author": "Shruti9520", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzMzOTEyOQ==", "fields": {"body": "Can you also post a screenshot of how the new page will look like after these changes you make?\nThanks.", "diff": null, "created_at": "2017-02-03T19:27:39Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzQ2OTcyNw==", "fields": {"body": "Looks good in the screenshot, tested locally as well \ud83d\udc4d  \ud83c\udf89", "diff": null, "created_at": "2017-02-04T19:36:44Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzQzMTA0Mw==", "fields": {"body": "This is very wrong.  Please discuss on the issue.", "diff": null, "created_at": "2017-02-04T09:21:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzU0MTkzOQ==", "fields": {"body": "Sorry this is getting a bit tedious for you \ud83d\ude05  but we get the hang of the drill after some time \ud83d\ude03  \ud83d\udc4d\n\nYou need to squash your commits coala.io/git\nAnd then rebase your branch", "diff": null, "created_at": "2017-02-05T19:19:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzU1NDUzOA==", "fields": {"body": "There's typo:\nwining -> winning", "diff": null, "created_at": "2017-02-05T22:18:45Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzU4NDM1OQ==", "fields": {"body": "Hey, please follow this http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nAsk for help.on gitter channel if u want...", "diff": null, "created_at": "2017-02-06T04:29:10Z", "last_edited_at": null, "author": "Warewolf96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzU5NTgxMg==", "fields": {"body": "I cherry picked this to #3706 so we can merge it in one go without so much rebase. You don't need to do anything and it's taken care of that this gets merged, thanks for your contribution!", "diff": null, "created_at": "2017-02-06T06:24:25Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3Nzg0ODc1MQ==", "fields": {"body": "Hey @adrienverge thanks for your contribution! Do you have any idea on how the contribution process or using coala could have been smoother? (See also coala.io/usability)", "diff": null, "created_at": "2017-02-06T23:30:04Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzgwMDQwNA==", "fields": {"body": "@jayvdb thanks for having a look here!\nI intentionally didn't touch file extensions as they aren't directly related to this change (which is about the language name).\nSince you raise this point, I updated this PR for rubocop_config.yaml and tailor.yaml.\nAbout CI config files, you're right: if done, it should be in a separated PR.", "diff": null, "created_at": "2017-02-06T20:17:01Z", "last_edited_at": null, "author": "adrienverge", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODA4MDE4Nw==", "fields": {"body": "we are not as strict on the projects repo so I'll just grab everything when it's done and make it nice ;)", "diff": null, "created_at": "2017-02-07T17:44:49Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODA4NTg5OQ==", "fields": {"body": "you have quite some typos in there, consider putting your text into https://languagetool.org/ before you submit it :)", "diff": null, "created_at": "2017-02-07T18:01:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw==", "fields": {"body": "There :)", "diff": null, "created_at": "2017-02-07T14:55:02Z", "last_edited_at": null, "author": "rahulkrishnan98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzYzMQ==", "fields": {"body": "ack  \t667c893\nThanks!", "diff": null, "created_at": "2017-02-07T14:56:57Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODIyMzgxNg==", "fields": {"body": "@gkrishnan724 @rahulkde Do you guys feel we need a little margin left (1em/2em) on the search icon ?", "diff": null, "created_at": "2017-02-08T04:06:55Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM4MDIyMQ==", "fields": {"body": "I did... now it works so maybe just had to wait 5 minutes :)", "diff": null, "created_at": "2017-02-08T16:32:58Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTI5NA==", "fields": {"body": "@arnab1896 Looks nice! there is one more inconsistency in generic_bears.md that the headings are not in uppercase like in the other projects, can you fix those too while we're at it  \ud83d\ude03", "diff": null, "created_at": "2017-02-08T16:59:06Z", "last_edited_at": "2017-02-08T16:59:40Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTc5Mg==", "fields": {"body": "Thats ok. I will make a huge PR fixing all the remaining Projects now as we're running out of time", "diff": null, "created_at": "2017-02-08T17:00:35Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM5MTI4MA==", "fields": {"body": "@hemangsk Done with the changes ! :D", "diff": null, "created_at": "2017-02-08T17:04:57Z", "last_edited_at": null, "author": "aalind0", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODQ0MDQ1MQ==", "fields": {"body": "@raj-maurya the deadline is in 17 hours... can you address this issues like ASAP...", "diff": null, "created_at": "2017-02-08T19:47:13Z", "last_edited_at": null, "author": "dracarys09", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODQ0MDU0NQ==", "fields": {"body": "you're using wrong commit sha.. @meetmangukiya", "diff": null, "created_at": "2017-02-08T19:47:33Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODQxOTcyNw==", "fields": {"body": "@raj-maurya ; need any help with editing your commit message? Do let me know.\nmeanwhile; carefully read this if you still haven't-----> http://api.coala.io/en/latest/Developers/Git_Basics.html", "diff": null, "created_at": "2017-02-08T18:33:55Z", "last_edited_at": null, "author": "arnab1896", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODQyNTI0MA==", "fields": {"body": "@Makman2 If a user runs it over an empty file, the output it prints is 'The line belonging to the following result cannot be printed because it refers to a line that doesn't seem to exist in the given file'.\nAs a user, I think just the error message 'Expecting value' is sufficient. What do you suggest? Should that message be displayed?\n\nIf you can catch this case it would be good. Though \"Expecting value\" is bad imo, I mean if I would read the message my brain would be totally confused. Rather say \"file is empty\", because that's the case ;)", "diff": null, "created_at": "2017-02-08T18:53:27Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODk2NzY4Mw==", "fields": {"body": "@AsnelChristian I was busy with few evaluations....will complete by sunday.", "diff": null, "created_at": "2017-02-10T15:02:05Z", "last_edited_at": null, "author": "Sanny26", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODk5NTU1MA==", "fields": {"body": "Since this commit does not fix a bug, I think we need Closes instead of Fixes in the commit message. Isn't it @AsnelChristian @meetmangukiya ?", "diff": null, "created_at": "2017-02-10T16:45:13Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3OTE0MzkyMQ==", "fields": {"body": "Thank you so much ! :) i finally understood how git works.", "diff": null, "created_at": "2017-02-11T13:31:09Z", "last_edited_at": null, "author": "srikanth100", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3OTE3NzM0Mw==", "fields": {"body": "I think you should rebase, want to see all lights go green here :3", "diff": null, "created_at": "2017-02-11T21:33:11Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3OTE5ODA5MA==", "fields": {"body": "@yash-nisar @Vamshi99  for acking a PR you gotta comment here. gitmate won't consider reviews as acking", "diff": null, "created_at": "2017-02-12T05:31:14Z", "last_edited_at": "2017-02-12T05:31:43Z", "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3OTM4NDY2NA==", "fields": {"body": "It looks fine to me now \ud83d\udc4d", "diff": null, "created_at": "2017-02-13T12:57:51Z", "last_edited_at": null, "author": "impmihai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3OTYyOTMwOQ==", "fields": {"body": "Changes look good.\nBut you would have to amend the commit to something like\nREADME: Bump the stable version to 0.10.0\nAlso include the reference to the issue by adding\nCloses <issue link>", "diff": null, "created_at": "2017-02-14T07:33:52Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3OTk0NDQ3NA==", "fields": {"body": "We need to close this as #3617 has been resolved ! @aptrishu @meetmangukiya @pratham-pc", "diff": null, "created_at": "2017-02-15T08:13:51Z", "last_edited_at": "2017-02-15T08:14:10Z", "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDA0ODE4MQ==", "fields": {"body": "Btw please fixup both commits together, tests shall be directly introduced with the causing change :)", "diff": null, "created_at": "2017-02-15T15:49:08Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDI2Njk0MQ==", "fields": {"body": "@yukiisbored Add WIP: to the title of the PR.", "diff": null, "created_at": "2017-02-16T08:35:08Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDM5MjQ5MQ==", "fields": {"body": "Sure.  are you ok with \"test against bad commit messages\" being out of scope for this change?\nIf so, a stored list of 100 previous messages is the way forward (and will be quicker than fetching the last 100 out of git anyway).", "diff": null, "created_at": "2017-02-16T17:04:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDg0OTM4MQ==", "fields": {"body": "It appears you made the second commit on Github, not local+push. Please rebase, squash the extra commit and push :)", "diff": null, "created_at": "2017-02-18T14:35:46Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDg3NjcwOQ==", "fields": {"body": "Hey, this is your first contribution, right? Congrats and welcome to the coalaians! :) You've done your first step to become a coala developer.\nRultor will now automatically release your changes as a prerelease so users can experience the goodness of your changes right now.\nWe would really appreciate it if you could help us with\n\ntelling us about your experience\nsome code reviews for other newcomers\nfixing a difficulty/low issue\nfill our usability survey\n\nIf you've done those we can promote you to a coala developer!\nWe're all volunteers and we're currently struggling to keep this up. Helping all those newcomers is a lot of work and we do need your help so we can continue this for others!", "diff": null, "created_at": "2017-02-18T21:34:07Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDg5MjU3Mw==", "fields": {"body": "sorry, presently bit busy with my studies, will do the changes as soon as possible", "diff": null, "created_at": "2017-02-19T03:14:41Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDg5MjU3OA==", "fields": {"body": "sorry, presently bit busy with my studies, will do the changes as soon as possible", "diff": null, "created_at": "2017-02-19T03:14:58Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDgxNzQ4Mg==", "fields": {"body": "I think\nBefore we get to the next step add \n`CI <http://api.coala.io/en/latest/Developers/Adding_CI.html>`_\n to your fork.\n\nWould fit better", "diff": null, "created_at": "2017-02-18T03:13:58Z", "last_edited_at": null, "author": "Shade5", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDkxMzkzMQ==", "fields": {"body": "Hi,\nWhile even I am new to this I think the problem occurring is that though you squashed the commits locally as you had already uploaded two separate commits to this pull request remotely this request took in the squashed commit as a new commit. I think the best solution would be to close this pull request and start a new one with only a single commit.\nAlso the Gitmate errors are occurring as you have not push a space after the : in the shortlog and because your shortlog is exceeding the character limit.\nHope this helped!", "diff": null, "created_at": "2017-02-19T11:47:43Z", "last_edited_at": null, "author": "sgsh123", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MTI0NjE5OQ==", "fields": {"body": "There's a typo in your commit message. Please correct it when you push again :)", "diff": null, "created_at": "2017-02-21T05:03:28Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MTIzMTgzMg==", "fields": {"body": "Alright @aptrishu I will keep that in mind from  now :)", "diff": null, "created_at": "2017-02-21T02:58:12Z", "last_edited_at": null, "author": "Harshish", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MTczODgwMA==", "fields": {"body": "ok, try next time to solve your problems on the same pr!", "diff": null, "created_at": "2017-02-22T17:23:18Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MTg0NjQ4OQ==", "fields": {"body": "@satwikkansal I think it should be Closes instead \ud83d\ude03", "diff": null, "created_at": "2017-02-23T00:04:29Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MTgyOTE4MA==", "fields": {"body": "Tests using that argument please. The goal is not to get 100% coverage but to actually test the functionality you have added \ud83d\ude04", "diff": null, "created_at": "2017-02-22T22:42:07Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MjA3NTE2Mw==", "fields": {"body": "The changes look good to me ! Try to work on a new branch because we generally don't mess up with the master branch. ;)", "diff": null, "created_at": "2017-02-23T18:18:12Z", "last_edited_at": "2017-02-23T18:19:55Z", "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MjAzODUyMg==", "fields": {"body": "@incorrectusername I think he meant you have to write the corresponding unittests in ConfigurationGatheringTest.py and not just locally testing it", "diff": null, "created_at": "2017-02-23T16:13:17Z", "last_edited_at": "2017-02-23T16:13:36Z", "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MjI1NDE0NQ==", "fields": {"body": "@kshitijkg01 , do you have access to a terminal?\nThen you might be able to clone your fork and work", "diff": null, "created_at": "2017-02-24T10:09:07Z", "last_edited_at": null, "author": "arnab1896", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MjQ3NzM3OA==", "fields": {"body": "in my opinion there is a distinction:\na bug is a feature or a given that disrupts the intended function (requiring Fixes)\na feature/enhancement is an addition resulting in an improvement (requiring Closes)\nlinked issue: #418", "diff": null, "created_at": "2017-02-25T11:13:44Z", "last_edited_at": null, "author": "tabias", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MjY1NDY2MA==", "fields": {"body": "@damngamerz The commit body had a grammatical error, had it been Change year from 2016 to 2017, it would have been understandable. However, the 'from' was missing from the body, hence I thought it would be better to make a further improvement. \ud83d\ude00\n@saurabhmarpadge Rest is cool. \ud83d\ude04", "diff": null, "created_at": "2017-02-27T08:16:28Z", "last_edited_at": "2017-02-27T08:17:01Z", "author": "sahilarora535", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MjY1ODc4Nw==", "fields": {"body": "Use imperative tense when you write a commit message  . Follow  http://coala.io/commit  . Use git commit --amend and force push :)", "diff": null, "created_at": "2017-02-27T08:38:24Z", "last_edited_at": null, "author": "Siddhartha1234", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4Mjk2NTI1NA==", "fields": {"body": "Regarding commit message,\n\nrequests.Response.raise_for_status raises an exception\nwhen the HTTP status code is not 200.\n\nI think it raises an exception only when the HTTP status code is above 400, just verified in my computer \ud83d\ude05", "diff": null, "created_at": "2017-02-28T07:38:03Z", "last_edited_at": "2017-02-28T07:39:02Z", "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MzI0ODAyMw==", "fields": {"body": "@rohanraju97 I don't think so otherwise it'd be marked as newcomer :P btw I think you should clarify your doubt by pinging the person who created the issue on the gitter channel. :)", "diff": null, "created_at": "2017-03-01T05:23:10Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MzM2ODk2Mg==", "fields": {"body": "By the way, advice for the future: Please don't develop on the master branch. It can create some problems down the line, and we develop on other branches. If you don't know how check the git basics documentation. :)", "diff": null, "created_at": "2017-03-01T15:18:59Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MzMwMzYzNQ==", "fields": {"body": "Double ticks\n\u2026\nOn Wed, Mar 1, 2017 at 3:25 PM, Vaishnav Murali ***@***.***> wrote:\n wait is it single ` or ``?\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#422 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AJvoP2jvX_NdSaZKC_BBlvOFk2i2pQEJks5rhUChgaJpZM4MOeew>\n .", "diff": null, "created_at": "2017-03-01T10:30:13Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MzU0NjY0Ng==", "fields": {"body": "This is fixed in rstcheck 3.0.1.", "diff": null, "created_at": "2017-03-02T03:35:58Z", "last_edited_at": null, "author": "myint", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MzYwNDM1Ng==", "fields": {"body": "To use Travis language based configs, we first need #1386 .", "diff": null, "created_at": "2017-03-02T09:38:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MzYyOTE0NA==", "fields": {"body": "That's a separate issue @yashLadha.", "diff": null, "created_at": "2017-03-02T11:29:48Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4Mzg2NDc4Nw==", "fields": {"body": "@Makman2, yes, this is just the test, preparing the way for #3831 .\nI built it separately as it is quite difficult to generate a read failure without creating a parameter timeout which I believe is an anti-pattern: Bears shouldn't be doing network problem negotiation/fallback like timeouts. The download function should just work (TM), or the bear be disabled.", "diff": null, "created_at": "2017-03-03T04:49:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4Mzk2MTMxMg==", "fields": {"body": "You're still not updating the documentation inside Linter.py accordingly^^", "diff": null, "created_at": "2017-03-03T14:05:52Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NDE1NzUyMg==", "fields": {"body": "unack 1a3edf9", "diff": null, "created_at": "2017-03-04T15:14:48Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NDIxMzI0Mg==", "fields": {"body": "That's fine, but we can not review until the tests pass. They might fail even after fixing that issue. So, It'd be a waste of time for others to review it until then. It's completely fine, you can label them pending review once the tests pass. :)", "diff": null, "created_at": "2017-03-05T08:21:15Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NDUyMTEwNQ==", "fields": {"body": "Make sure to run coala locally before pushing to get rid of the gitmate issues. :)", "diff": null, "created_at": "2017-03-06T20:25:31Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NDY3MzU1Mg==", "fields": {"body": "@Makman2 I have approved the commit and made issues for the things required to be done post merge.", "diff": null, "created_at": "2017-03-07T09:51:18Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NDgxMTE1MA==", "fields": {"body": "Tests are skipped, seems like the executable can't be found^^", "diff": null, "created_at": "2017-03-07T18:24:23Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NTQ2ODU0MA==", "fields": {"body": "Short log can be Linter.py: Fix typo or Correct typo. Everything else seems fine.", "diff": null, "created_at": "2017-03-09T20:16:57Z", "last_edited_at": null, "author": "arjunsinghy96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NTY1ODM4Ng==", "fields": {"body": "Some issues with the commit message remain:\nPlease change the parentheses to quotation marks around the int and in.\nAlso put the full URL to the issue with the \"Fixes\" keyword into the commit message like so:\nFixes https://github.com/coala/coala/issues/3865", "diff": null, "created_at": "2017-03-10T12:35:02Z", "last_edited_at": "2017-03-10T12:37:42Z", "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NTYzNjIzNQ==", "fields": {"body": "Your branch needs rebase. Everything else seems fine.", "diff": null, "created_at": "2017-03-10T10:39:38Z", "last_edited_at": null, "author": "arjunsinghy96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NTYzNzQzNA==", "fields": {"body": "You need to rebase this branch such that only 87cedcb shows up in the PR. If you need help, first read this", "diff": null, "created_at": "2017-03-10T10:45:23Z", "last_edited_at": "2017-03-10T10:47:00Z", "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NTg3ODk2OA==", "fields": {"body": "good that you tested that actually \ud83d\udc4d\n(me is filing an issue now for writing tests for apertium lint :D)", "diff": null, "created_at": "2017-03-11T16:29:44Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NTg3OTc2NQ==", "fields": {"body": "Very interesting approach.\nBefore 'accepting' this approach, I would like to see if the other cases of pytest.raises are as problematic.", "diff": null, "created_at": "2017-03-11T16:42:32Z", "last_edited_at": "2017-03-11T19:09:02Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NTg5MjUxNQ==", "fields": {"body": "Yea, or you could try to fix the other ones yourself. I've upgraded the issue from newcomer to low, but you're welcome to keep working on it, as you appear to know what you are doing here.", "diff": null, "created_at": "2017-03-11T19:10:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NTk0Nzg3MA==", "fields": {"body": "Hello @pratyushprakash !\nI am kind of caught up on what do I have to fix in the shortlog comment, is it because of the : or is there something else I am messing up. I followed this link for the rules regarding commit messages.\nedit: No problem, got it : add ==> Add", "diff": null, "created_at": "2017-03-12T14:22:44Z", "last_edited_at": "2017-03-12T15:13:12Z", "author": "proishan11", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NTkzODYyNA==", "fields": {"body": "What do you mean by Adds more analysis. in the commit message? I guess this can either be removed or be more concrete.", "diff": null, "created_at": "2017-03-12T11:34:08Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NjA1ODE1OQ==", "fields": {"body": "I think it should be Closes. Is fixing typo a bug fix?", "diff": null, "created_at": "2017-03-13T09:40:46Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NjI4MTM1MA==", "fields": {"body": "I don't think Makman2 wanted you to create an entirely different pull request. When he said use 2 commits, he meant to have two commits in one pull request, #3908 .", "diff": null, "created_at": "2017-03-14T00:02:29Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NjIzMTI3Mg==", "fields": {"body": "@nikita1412 @Techievena\nCan the commit message be more clear?\nSomething like this ?\nThis now correctly implies that there is \nno need to specify cast type for new taste.\n\nJust a recommendation :D", "diff": null, "created_at": "2017-03-13T20:21:22Z", "last_edited_at": "2017-03-13T20:21:53Z", "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NjMxOTAwNA==", "fields": {"body": "@nemaniarjun @nikita1412 @Techievena\nI would even go so far as to say that\nImply that there is no need \nto specifiy cast type for new taste\n\nIs a good shortlog, as this message will be in the imperative mood and describes why this change is necessary. This will also need a rebase.", "diff": null, "created_at": "2017-03-14T04:27:31Z", "last_edited_at": "2017-03-14T04:34:27Z", "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NjMyMDE1Mw==", "fields": {"body": "I agree with Techivana's message. Also, will need another rebase before merge.", "diff": null, "created_at": "2017-03-14T04:38:12Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NjU3MDA3Ng==", "fields": {"body": "One last thing: the commit message should be in the imperative mood. Thus, Replaced ->Replace . After this and a rebase I believe it should be mergeable.", "diff": null, "created_at": "2017-03-14T21:42:21Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NjU3MjY3Mg==", "fields": {"body": "See the thing is when we merge, if your branch is behind the coala master branch in terms of changes, it refuses to merge because fast-forwarding is not possible. Thus, you are required to rebase no matter how many commits you have, or where the change is. Your local fork must be in sync with the main coala branch if you would like to be merged.  :)", "diff": null, "created_at": "2017-03-14T21:52:37Z", "last_edited_at": "2017-03-14T21:54:32Z", "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NjU4Mzc4NQ==", "fields": {"body": "In the commit message, I feel like New property has_changes is added to Diff could be changed to Add new property has_changes to Diff, because this change puts it in the imperative mood. If someone disagrees, notify me :)", "diff": null, "created_at": "2017-03-14T22:39:02Z", "last_edited_at": "2017-03-14T22:39:16Z", "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NjU4NDA3NA==", "fields": {"body": "Rebase completed \ud83d\udc4d @supergr35", "diff": null, "created_at": "2017-03-14T22:40:17Z", "last_edited_at": null, "author": "d3db0t", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4Njc0NDA3OQ==", "fields": {"body": "@supergr35 I checked it before commiting ^^ The issue was labeled bug so I wrote Fixes.\nI will change (:", "diff": null, "created_at": "2017-03-15T13:40:43Z", "last_edited_at": "2017-03-15T13:54:51Z", "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4Njk3MjY0MA==", "fields": {"body": "Your tests fail, because you have unmet dependencies and therefore incomplete coverage. You can ignore that for now.\nFirst adress the core issues of the PR:\n\n Choose a meaningful title for the PR. \"jack17529 patch 1\" does not tell us anything.\n Fix the issues pointed out by gitmate-bot. These are coala errors. You can reproduce them by running coala in the root directory of the repository. This should always be done before opening a PR.\n Rebase your branch to have only one commit with a good commit message", "diff": null, "created_at": "2017-03-16T06:52:17Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzA4Nzg1NQ==", "fields": {"body": "@hemangsk thanks, I've been tinkering with this for the last 20 minutes :D", "diff": null, "created_at": "2017-03-16T15:10:21Z", "last_edited_at": null, "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzE3NDM0Mg==", "fields": {"body": "Sorry @GPhantom you'll need to rebase again.", "diff": null, "created_at": "2017-03-16T20:01:00Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzY0MDUxNA==", "fields": {"body": "If you think those tests are okay for a first step, then imo it suffices to get a review, and you can add better tests later \ud83d\udc4d", "diff": null, "created_at": "2017-03-19T19:27:26Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzYwMjIwMw==", "fields": {"body": "@meetmangukiya Thank you for the help :) Kudos", "diff": null, "created_at": "2017-03-19T08:33:45Z", "last_edited_at": null, "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzYxNTIzMA==", "fields": {"body": "Could you show the contents of your .coafile? @vimcoffee", "diff": null, "created_at": "2017-03-19T13:02:44Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ==", "fields": {"body": "@meetmangukiya I'm looking into them :)", "diff": null, "created_at": "2017-03-19T15:20:51Z", "last_edited_at": null, "author": "sahilarora535", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4Nzc4MDA4MQ==", "fields": {"body": "@NiklasMM Oops, I confused it with the PR title. I'll add @Udayan12167 's change and amend!", "diff": null, "created_at": "2017-03-20T14:42:25Z", "last_edited_at": null, "author": "twinone", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4Nzg3MTkyMQ==", "fields": {"body": "The issue of people cloning the wrong repo is addressed in #3948. In terms of the recommendation of setting things as upstream, it's probably best to talk to a maint about that rather than a dev like me.", "diff": null, "created_at": "2017-03-20T19:31:07Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzkwMTQ2Mg==", "fields": {"body": "Make the changes and rebase,  marked wip.", "diff": null, "created_at": "2017-03-20T21:19:31Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzkyMTEzMg==", "fields": {"body": "Hm for such scenarios I would override __eq__ and others. Imo you should include a check for the text. If they don't match, comparison is impossible^^", "diff": null, "created_at": "2017-03-20T22:43:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODE4NDgzNw==", "fields": {"body": "@djokester can you please elaborate your commit?\nAlso please try to follow this format : fileName.rst: What you fixed\nAdditional message along with this is a plus.\nYou can add a description body by typing : git commit -m 'main message' -m 'description body'\nTo amend changes, type : git commit --amend -m 'main message' -m 'description body'\nHope it helps \ud83d\ude04", "diff": null, "created_at": "2017-03-21T19:02:15Z", "last_edited_at": null, "author": "ashwini0529", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODE5OTgwMg==", "fields": {"body": "@pratyushprakash You should also take a look at this PR and tell your opinion :)", "diff": null, "created_at": "2017-03-21T19:58:28Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODI5OTYwMQ==", "fields": {"body": "@RohanVB There are 70+ files to be changed. So can't be assigned to a single person :)", "diff": null, "created_at": "2017-03-22T05:04:40Z", "last_edited_at": null, "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODM0NzEzMw==", "fields": {"body": "This is trying to solve the same issue as #3942.", "diff": null, "created_at": "2017-03-22T09:45:16Z", "last_edited_at": "2017-03-22T09:45:49Z", "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODM1ODQ5Mg==", "fields": {"body": "@adhikasp IMO we should avoid any conflict or synchronization effort and handle things according to your first option:\n\nExclusively use metaclass to define aspect, metadata only for backward compatibility.", "diff": null, "created_at": "2017-03-22T10:33:25Z", "last_edited_at": "2017-03-22T10:36:37Z", "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODQ1NjI4MQ==", "fields": {"body": "Please rebase and repush, it'll fix your appveyor failing.", "diff": null, "created_at": "2017-03-22T16:26:53Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODU1MjYwMA==", "fields": {"body": "hey please fix the gitmate issues before asking for review. ugly formatting makes it super hard to review and therefore maintainers will refuse to review your PR", "diff": null, "created_at": "2017-03-22T21:57:11Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODUyODg4MA==", "fields": {"body": "Please fix the issues pointed out by gitmate-bot (you can reproduce them locally by running coala). You also did not address the issues pointed out by adtac and myself here and here\nAlso refrain from trying to talk us into merging code before it meets even the most basic of quality measures. This behavior is ridiculous and quite frankly offensive and insulting.", "diff": null, "created_at": "2017-03-22T20:28:54Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODY0Njc3NQ==", "fields": {"body": "I don't think GitHub recognizes the \"Solves\" keyword, please use Closes instead as per our docs.", "diff": null, "created_at": "2017-03-23T08:17:32Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODY4NzkxMQ==", "fields": {"body": "this looks good, to me. but let's wait for Ci", "diff": null, "created_at": "2017-03-23T11:16:14Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODcwNDg2Ng==", "fields": {"body": "This PR is somewhat stuck and I'd like to get it going again, so I'm gonna try to summarize the issues I see:\n\n\n@userzimmermann and I were debating over the design of the CounterHandler here. I outlined here why it's awkward to have the level_called member on instance level instead of class level. But taking the __init__ away destroys the tests, because the counter is only reset on import.\n\n\n@jayvdb has pointed out a number of tests which mere missing assertions and I have added a bunch. There are still some occurrences of execute_coala in CachingTest.py without them, but I'd argue that checking the exit code is not in the scope of those tests.\n\n\nSo yeah, if you two (and maybe others) could chime in again, that would help me get this going again :)", "diff": null, "created_at": "2017-03-23T12:34:46Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODcyOTA1Mg==", "fields": {"body": "ack b3154ca4d505053f0f33754d5d4925b3ab71646e", "diff": null, "created_at": "2017-03-23T14:04:21Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4ODk0OTUzOQ==", "fields": {"body": "You still have not addressed any of the issues referenced from this comment and your commit is full of unnecessary changes, which I pointed out at least two times now. If you are having problems fixing that, please ask.\nThe next time you update this, please list the improvements you have made in a comment.", "diff": null, "created_at": "2017-03-24T07:10:39Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTA3NTQxMg==", "fields": {"body": "@jack17529 there aren't any associated issues.", "diff": null, "created_at": "2017-03-24T16:39:24Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTE5MjI1Ng==", "fields": {"body": "@Makman2 Thanks! \ud83d\ude06", "diff": null, "created_at": "2017-03-25T06:21:14Z", "last_edited_at": null, "author": "Shade5", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTExNjc0Nw==", "fields": {"body": "I feel as if the commit message body could be changed to actually identify what this commit is doing. Please address this and make sure it's in the imperative mood.", "diff": null, "created_at": "2017-03-24T19:05:31Z", "last_edited_at": "2017-03-24T19:05:57Z", "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTI0MzI4Nw==", "fields": {"body": "@jack17529 can you do a quick rebase? (You know how that works?)", "diff": null, "created_at": "2017-03-25T22:15:49Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTI0NjgyMw==", "fields": {"body": "Your commit message doesn't directly describe the change made in the imperative mood.\nThe addition of the \"SEE_MORE\" attribute simplifies\n\ncould be more like\nAdd a \"SEE_MORE\" attribute, which simplifies", "diff": null, "created_at": "2017-03-25T23:29:48Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTI5NTc4MA==", "fields": {"body": "I can offer 4k ^.\nWe'll rebase it for you unless you do, probably tomorrow to test our new bot that will automatically rebase things.", "diff": null, "created_at": "2017-03-26T16:37:14Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTIwODMwMQ==", "fields": {"body": "How about writing a test-case for it? Something like tests/bearlib/DeprecateSettingsTest.py where you check that applying this decorator to a function/a class does not swallow the docstring?", "diff": null, "created_at": "2017-03-25T12:18:43Z", "last_edited_at": null, "author": "alisianoi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTIzOTU3MQ==", "fields": {"body": "About #3922 (review) @NiklasMM I disagree with you on that. python3 is the binary and on https://www.python.org/downloads/ you will find they name it Python 3, nobody ever writes Python3 in english text if it's not about the command.", "diff": null, "created_at": "2017-03-25T21:06:15Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTM3MjY3NA==", "fields": {"body": "Should we file an issue for auto-checking the : in commit messages.?\n\nCould be worth a discussion, yes.\nBtw: You still haven't pushed :)", "diff": null, "created_at": "2017-03-27T07:17:14Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTU2MDk3MQ==", "fields": {"body": "ack ab572e7", "diff": null, "created_at": "2017-03-27T19:34:14Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTY2NDMzMQ==", "fields": {"body": "@RJ722 I don't think you can merge. Moreover you haven't rebased.", "diff": null, "created_at": "2017-03-28T05:07:07Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTY3MDk2Nw==", "fields": {"body": "ack e1adbfb", "diff": null, "created_at": "2017-03-28T05:55:21Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTYwMjUwMg==", "fields": {"body": "Up to you. Doctests are useful for simple demonstrations \ud83d\udc4d", "diff": null, "created_at": "2017-03-27T22:15:31Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTcwMDY1MA==", "fields": {"body": "@shrutishrm512 You can acknowledge my PR as well. :)", "diff": null, "created_at": "2017-03-28T08:32:40Z", "last_edited_at": "2017-03-28T08:32:56Z", "author": "rohanraju97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTcwNTA3MQ==", "fields": {"body": "go home bot, you're drunk", "diff": null, "created_at": "2017-03-28T08:50:29Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTg3MTk2Mg==", "fields": {"body": "I meant to say in commit message finds -> find", "diff": null, "created_at": "2017-03-28T19:03:20Z", "last_edited_at": null, "author": "arjunsinghy96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTgzNDM1Mg==", "fields": {"body": "reack f0a6620", "diff": null, "created_at": "2017-03-28T16:54:21Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDE0Nzc4OA==", "fields": {"body": "ack d773b72", "diff": null, "created_at": "2017-03-29T16:37:01Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDEwOTkxMA==", "fields": {"body": "@meetmangukiya We don't.", "diff": null, "created_at": "2017-03-29T14:35:52Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDM5NjYyMA==", "fields": {"body": "@HyungKen Almost ;) It's not about your pull request message. It's about your git commit message (which is still just \"Typo in docstring\"). Just re-commit with git commit --amend to change it. Then re-push your branch with -f (force). For more details look at:\nhttps://help.github.com/articles/changing-a-commit-message/", "diff": null, "created_at": "2017-03-30T12:32:59Z", "last_edited_at": "2017-03-30T12:34:25Z", "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDQwNjYwMQ==", "fields": {"body": "@userzimmermann I went through typo commits in coala git log --oneline | grep typo it seems that we have most of the commits in this form File: Fix typo <typo> -> <correct> So I think we should promote this in future", "diff": null, "created_at": "2017-03-30T13:13:46Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDY5OTA2MQ==", "fields": {"body": "@HyungKen Want to take over #4034 ? :)", "diff": null, "created_at": "2017-03-31T12:29:38Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDcwODAzNw==", "fields": {"body": "Hey @jayvdb , won't we ideally squash these two commits. Everything else works.", "diff": null, "created_at": "2017-03-31T13:12:01Z", "last_edited_at": null, "author": "arjunsinghy96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDk5MzE2MQ==", "fields": {"body": "thx @hemangsk you're gorgeous!", "diff": null, "created_at": "2017-04-02T15:22:10Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDkxMDcwOQ==", "fields": {"body": "You did the rebase in docstring_fix_param branch and this pull request is on docstring_param_fix branch. I would not use such confusing names. By the way, you have to rebase again. git rebase is confusing but once you learn it, it is great \ud83d\ude04 . Now you just need to rebase your docstring_param_fix branch.", "diff": null, "created_at": "2017-04-01T10:09:38Z", "last_edited_at": null, "author": "arjunsinghy96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTA5NDA5Mw==", "fields": {"body": "Just noting the changes are correct, but we can not accept two commits for this, and the commit message must be following our commit guidelines.  Please squash your two commits into one commit, and amend the commit message.\nCome join us on http://coala.io/chat if you need help.", "diff": null, "created_at": "2017-04-03T09:34:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTAwMzM3Nw==", "fields": {"body": "The original cabal require shellcheck version 0.4.1 while this apt use version 0.3.7. Does it have potential breakage?", "diff": null, "created_at": "2017-04-02T18:05:43Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTAwODA1OA==", "fields": {"body": "i guess i need to rebase", "diff": null, "created_at": "2017-04-02T19:16:26Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTM5MTIxOA==", "fields": {"body": "Commit body: say -> explain", "diff": null, "created_at": "2017-04-04T04:36:33Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTQ4NjU0OA==", "fields": {"body": "@Siddhartha1234 This is a good and important PR! Keep going! Finish it :)", "diff": null, "created_at": "2017-04-04T12:37:56Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTQxMzM1MQ==", "fields": {"body": "@arjunsinghy96 Please look at the comment above, these errors shown are supposed to be an indication for what to be opened in separate issues, that is the point of this PR and it's labelled status/blocked. We will decide how to club these into appropriate parts as separate issues and merge them first ,then this commit can be merged \ud83d\ude04", "diff": null, "created_at": "2017-04-04T07:07:12Z", "last_edited_at": "2017-04-04T07:43:56Z", "author": "Siddhartha1234", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTUxMzg3Mg==", "fields": {"body": "ack f93b958", "diff": null, "created_at": "2017-04-04T14:17:03Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTg4MDAzMQ==", "fields": {"body": "Here ya go: http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html :D", "diff": null, "created_at": "2017-04-05T14:31:51Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTk1ODgzOQ==", "fields": {"body": "needs rebase", "diff": null, "created_at": "2017-04-05T18:48:24Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MjI0MTUzOQ==", "fields": {"body": "Bit of a tip: Run coala on your code locally so you can avoid these gitmate errors.\nAlso, in the commit body, it can be a bit clearer. Something more like:\nReinforce that PRs should not be closed,\ntell newcomers to contact us on gitter \nif they have an issue\n\nWith the right newlines and spacing.", "diff": null, "created_at": "2017-04-06T17:10:13Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MjI4MTU4OA==", "fields": {"body": "@userzimmermann Thanks for pointing out \ud83d\ude04, Corrected it.", "diff": null, "created_at": "2017-04-06T19:11:25Z", "last_edited_at": null, "author": "Monal5031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MjQ4ODA4NQ==", "fields": {"body": "Note that the patch author doesn't have the same username on GitLab: https://gitlab.com/bhavishyagopesh (and username search on GitLab is a bit borked)\nI have emailed the patch author just now.  If there isnt some traction soon, the PR should be closed and the issue re-assigned.", "diff": null, "created_at": "2017-04-07T09:28:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MjQ5NjI3OQ==", "fields": {"body": "Okey :) Lets discuss #4048 and after we fix it i will amend this commit to include tuples with more than one element.", "diff": null, "created_at": "2017-04-07T10:04:05Z", "last_edited_at": null, "author": "MariosPanag", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5Mjc1MDc2Ng==", "fields": {"body": "I hope you all don't mind that I jumped in and reviewed this PR.  Just thought I could be helpful.  I'm quite...well-versed...in unittest internals.", "diff": null, "created_at": "2017-04-08T22:42:21Z", "last_edited_at": null, "author": "CleanCut", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5Mjc1MTE3Nw==", "fields": {"body": "Heh, I am an old grumpy maintainer.\nOkay, well, I guess  I'm not always grumpy... ;-)", "diff": null, "created_at": "2017-04-08T22:50:54Z", "last_edited_at": null, "author": "CleanCut", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5Mjc4OTk0Nw==", "fields": {"body": "Hi @aashutoshrathi\nThe code itself is already OK. But the commit message is still lacking \ud83d\ude05\nMake sure you follow this guideline https://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nAnd also, you shouldn't change PR issue back and forth like that. You can use cobot command in our gitter channel to mark WIP.", "diff": null, "created_at": "2017-04-09T14:41:22Z", "last_edited_at": "2017-04-09T14:48:10Z", "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MjcxNTgwNQ==", "fields": {"body": "@NiklasMM I like your compromise! And can't wait to see it implemented :)", "diff": null, "created_at": "2017-04-08T12:46:20Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MjczMjgwMg==", "fields": {"body": "@jayvdb Finally my desperate review call reached someone :)", "diff": null, "created_at": "2017-04-08T17:24:41Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5Mjg2MTQ1Mg==", "fields": {"body": "@userzimmermann @Techievena changes done", "diff": null, "created_at": "2017-04-10T06:33:55Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5Mjg3MzcyOA==", "fields": {"body": "unack d4ab7d62e9274273501ac1c4217b914195237ae1 as I am not sure this is the way I want our docs to go.", "diff": null, "created_at": "2017-04-10T07:44:12Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MjgwOTc4MA==", "fields": {"body": "Aaaaannnddd the testsss passsss  \ud83c\udf89", "diff": null, "created_at": "2017-04-09T20:13:40Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5Mjk4Nzg0MQ==", "fields": {"body": "@jayvdb  @adtac I will do the following changes requested:\n\nShortlog: .coafile: Activate remove_all_unused_import\nRename section to flakes\ndefault_actions = *:ShowPatchAction\nAdd to commit body Automatic fixes may remove critical imports\nRemove first line of section's comment.", "diff": null, "created_at": "2017-04-10T15:37:30Z", "last_edited_at": "2017-04-10T15:48:14Z", "author": "arjunsinghy96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MjkxMDc2MQ==", "fields": {"body": "@adhikasp I reverted the rename of root.py to Root.py since it causes that strange error on python setup.py docs:\nWarning, treated as error:\nC:\\Users\\Zimmermann\\Projects\\coala\\lib\\coalib\\bearlib\\aspects\\__init__.py:docstring of coalib.bearlib.aspects.Root:0: WARNING: duplicate object description of coalib.bearlib.aspects.Root, other instance in C:\\Users\\Zimmermann\\Projects\\coala\\lib\\docs\\coalib.bearlib.aspects.rst, use :noindex: for one of them\n\nI don't want to waste on investigating that issue.\nAlso, it avoids re-importing of Root in aspectsModule.__init__. Let's just keep everything lowercase except the actual non-root aspect definition submodules.", "diff": null, "created_at": "2017-04-10T10:27:31Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MjkxMzYxNg==", "fields": {"body": "@userzimmermann Yeah saw that error, that was weird \ud83d\ude15\nAnyway, this looks great! \ud83c\udf89", "diff": null, "created_at": "2017-04-10T10:40:30Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MzE4MjA3OA==", "fields": {"body": "I would like __getitem__ instead of get_num_calls_for_level, but we can play with other ideas in followup patches.\nNo need for a metaclasses to achieve that.\nIt also could use instance variables instead of class variables, and then one instance is stored somewhere.  You never know when another instance of the class is needed, to count something else, or a subset of messages, etc.", "diff": null, "created_at": "2017-04-11T08:03:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MzI4OTI5OA==", "fields": {"body": "@pratyushprakash: @jayvdb made a goint point in #1573 (comment) based on my #1573 (comment)\nWe should try to create some shared logic between coalaBear and aspectsYEAHBear as part of this PR :) I definitely support this idea from a purely technical view! And furthermore I'm sure we can then also get back to aspects harmony and remove the status/blocked label ;)\n@coala/aspects-developers", "diff": null, "created_at": "2017-04-11T14:53:56Z", "last_edited_at": "2017-04-11T14:58:11Z", "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MzIzNzQ2Nw==", "fields": {"body": "I get 100% coverage when tested locally, don't know what is the problem here.", "diff": null, "created_at": "2017-04-11T12:02:30Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MzQ3NjQ3NQ==", "fields": {"body": "Since I had included it in my GSoC proposal, the plan was to do it during GSoC if at all I get selected but I'll complete this asap once I'm done with my exams. :)", "diff": null, "created_at": "2017-04-12T05:18:51Z", "last_edited_at": "2017-04-12T05:19:29Z", "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MzQ5MDQwNA==", "fields": {"body": "I have noted your suggestions, I am working on it.", "diff": null, "created_at": "2017-04-12T06:54:53Z", "last_edited_at": null, "author": "khushmeeet", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NDA3OTcxNw==", "fields": {"body": "Yeah working on it, will positively submit a patch today. \ud83d\ude04", "diff": null, "created_at": "2017-04-14T03:52:07Z", "last_edited_at": "2017-04-14T05:07:17Z", "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NDAwMTcyMw==", "fields": {"body": "@RJ722 Still working on this? :)", "diff": null, "created_at": "2017-04-13T19:39:08Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NDE1MTc3NA==", "fields": {"body": "Note to self: Make changes to deal with issue #3920", "diff": null, "created_at": "2017-04-14T13:15:53Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NDM2MDAzNQ==", "fields": {"body": "I'll put this here so it's not hidden \ud83d\udc4d\n@pratyushprakash  #4111 (diff) regarding language comparison.\n\nOr instead of this we could maybe wait for #4109", "diff": null, "created_at": "2017-04-16T16:16:13Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NDMxNDI1NQ==", "fields": {"body": "@RJ722 PyDocStyleBear only relies on pydocstyle, which is not intended for such checks. IMO we need a new bear for this. Also, it's not really a matter of style ;)", "diff": null, "created_at": "2017-04-15T19:49:40Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NDQ5OTE3MQ==", "fields": {"body": "For rebasing:\n\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout <branch_name>\ngit rebase master\n\nYou need to reset last commit before this.\nFor amending commit message:\n\ngit commit --amend This will allow you to amend your last commit message.\n\nPlease, please read the guidelines here.", "diff": null, "created_at": "2017-04-17T14:42:04Z", "last_edited_at": "2017-04-17T14:44:58Z", "author": "arjunsinghy96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NDg0NjYzNg==", "fields": {"body": "In the issue reference, Fixes -> Closes since it's not a bug :)", "diff": null, "created_at": "2017-04-18T13:37:18Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NTEwNzEyNw==", "fields": {"body": "@RohanVB ~/nltk_data still needs to be in the cached directories, otherwise every CI build will refetch the same 200Mb.\nIt is the explicit fetch which can be removed as newcomer issues, and this PR does remove them from the CI scripts of this repo.", "diff": null, "created_at": "2017-04-19T05:54:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NTgwNjcxMw==", "fields": {"body": "Note all these three commits are needed, or I need to disable the .ci/generate_bear_requirements.py script in CI,  which catches the bear requirements being out of sync with requirments.txt, Gemfile and package.json.", "diff": null, "created_at": "2017-04-20T16:40:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NTkyOTc5OA==", "fields": {"body": "I think this style is fine. Makes it clear that we want them to follow the guide and we can tell if they don't use it but it's not too harsh/evil.", "diff": null, "created_at": "2017-04-20T21:49:20Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjIyNzY4OQ==", "fields": {"body": "@Makman2 rebase and if you like it, merge. I read quite a few times your code and I didn't find something that should be changed \ud83d\udc4d", "diff": null, "created_at": "2017-04-21T15:46:44Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjM2MjIwOQ==", "fields": {"body": "@meetmangukiya can you approve/disapprove your request of changes? I dont think a newline is needed there either tbh.", "diff": null, "created_at": "2017-04-22T09:56:55Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjM2MzM1MQ==", "fields": {"body": "@userzimmermann can you take a look and approve/request changes? as you requested some", "diff": null, "created_at": "2017-04-22T10:17:17Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ==", "fields": {"body": "@Techievena Pro-tip: Use a different branch on your fork so you can update it easily without issues with \"merging\" from the origin remote when pulling.", "diff": null, "created_at": "2017-04-22T15:57:12Z", "last_edited_at": "2017-04-22T15:57:19Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg==", "fields": {"body": "@hemangsk works good locally!\nbut why do we have the status for high-involvement as 'crowded'?  why don't we keep it as high_involvement? because if people search for high-involvement projects, they will probably input high-involvement in the search bar, not crowded since the label indicates high involvement.", "diff": null, "created_at": "2017-04-24T14:50:00Z", "last_edited_at": "2017-04-24T14:50:42Z", "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjkwMDY2OQ==", "fields": {"body": "This is not a newcomer issue.  The file is generated, so the generator needs fixing.", "diff": null, "created_at": "2017-04-25T04:27:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NzIxMjE0Nw==", "fields": {"body": "The data still needs to be cached, and we need to explicitly tell the CI what to cache.", "diff": null, "created_at": "2017-04-26T01:33:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NzU5NTU1MQ==", "fields": {"body": "This pr is getting batch merged at  #4142 as it is release critical. Thanks for your contribution!", "diff": null, "created_at": "2017-04-27T02:40:25Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NzY3MzYzMg==", "fields": {"body": "can we support multiple statuses on one project? Right now we don't need it but might in the future.", "diff": null, "created_at": "2017-04-27T10:16:20Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NzYwMTU5Mg==", "fields": {"body": "after some discussion, we've decided to move next gen to 0.12 earliest", "diff": null, "created_at": "2017-04-27T03:29:06Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5Nzk2Nzk3Ng==", "fields": {"body": "done @jayvdb", "diff": null, "created_at": "2017-04-28T10:47:38Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NzkyMDkzMg==", "fields": {"body": "@RohanVB, can you undo the change as @sims1253 requested, rebase, and then we can ack and get this merged.\nThey are only minor changes, but they are good changes.", "diff": null, "created_at": "2017-04-28T06:44:50Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5ODE3NTUzOQ==", "fields": {"body": "don't know, will delete those comments^^\nEDIT: Comments deleted", "diff": null, "created_at": "2017-04-29T15:25:04Z", "last_edited_at": "2017-04-29T15:25:23Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5ODE5NzkyNQ==", "fields": {"body": "Also, imo, the commit body could be thinned a bit", "diff": null, "created_at": "2017-04-29T22:16:34Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5ODQ2NzgzNw==", "fields": {"body": "commit could be better, but meh, this is important. @meetmangukiya rebase and merge. Also add to bugfixes as it was broken in 0.10", "diff": null, "created_at": "2017-05-02T00:29:59Z", "last_edited_at": "2017-05-02T00:32:05Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5ODg3MDE4NA==", "fields": {"body": "I think it's nice, people see that we're active :)", "diff": null, "created_at": "2017-05-03T10:03:52Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5ODk0NTI4Nw==", "fields": {"body": "Now you have an extra commit, please remove that. Please come to https://coala.io/chat if you have any problems", "diff": null, "created_at": "2017-05-03T15:24:46Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5OTY0NDUyNA==", "fields": {"body": "ack 3866a56", "diff": null, "created_at": "2017-05-06T14:47:12Z", "last_edited_at": null, "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5OTY2NTUyNw==", "fields": {"body": "@pratyushprakash I think contains works fine as the \"item\" parameter is used to create a Language instance whose versions will be checked. There is no need to raise complexity here.", "diff": null, "created_at": "2017-05-06T20:58:40Z", "last_edited_at": null, "author": "MariosPanag", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5OTczOTcyNA==", "fields": {"body": "Also, I had thought about raising an exception in case of comparison of incompatible objects(as we do in @generate_ordering), but I thought False would suffice. I'll change it to raise the exception. \ud83d\udc4d\n@Makman2 @userzimmermann", "diff": null, "created_at": "2017-05-07T22:28:42Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5OTk0NTQyMw==", "fields": {"body": "I'll do it today, but I'll need some time to squash/rebash my commits. I've edited the .py file through the browser as I will have to fix authentication stuff with my Git bash terminal.", "diff": null, "created_at": "2017-05-08T18:10:33Z", "last_edited_at": null, "author": "JohnS-01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDE4ODAzNg==", "fields": {"body": "@ayush1999\nYou can pickup any other Newcomer issue from https://github.com/coala/coala/issues/ meanwhile \ud83d\ude04 - Just ensure that you are assigned to an issue before starting working on that as that actually saves your time. \ud83d\udc4d", "diff": null, "created_at": "2017-10-28T12:39:46Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDI0MTU2Nw==", "fields": {"body": "@acashmkj  I think when you deletion effects the cache and helps it in run,\nI would like to add my review  on previous PULL i.e creation and deletion, hope you don't have problem", "diff": null, "created_at": "2017-10-29T06:52:49Z", "last_edited_at": "2017-10-29T06:54:31Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDI0MTUxMQ==", "fields": {"body": "@RaiVaibhav deleted default_coafile and them created a new system_coafile. Thanks for your help. :-)", "diff": null, "created_at": "2017-10-29T06:50:54Z", "last_edited_at": "2017-10-29T06:51:38Z", "author": "acashmkj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDI2MzI4Mg==", "fields": {"body": "This is @RaiVaibhav commenting BTW \ud83d\ude1b", "diff": null, "created_at": "2017-10-29T13:43:22Z", "last_edited_at": "2017-10-29T13:43:30Z", "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDI3MDMxMg==", "fields": {"body": "This looks good should be merged.\n@ayush1999 a word of advice please don't open multiple PRs for one issue, this helps us keep the PR history clutter-free.", "diff": null, "created_at": "2017-10-29T15:26:02Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDI3MjQwNA==", "fields": {"body": "@ayush1999  change your shortlog to the one that @prnvdixit suggested and then I will reack this.", "diff": null, "created_at": "2017-10-29T15:54:54Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDI5MDU4OQ==", "fields": {"body": "Please don't put a colon between Closes and the issue number, just Closes XXXX.", "diff": null, "created_at": "2017-10-29T20:13:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDI5MDc4NQ==", "fields": {"body": "@vaibhavsingh97 if you download the full output as a file from CircleCI link then you will see it is failing just because of GitCommitBear means if you fix your commit message then CicleCI would not fail.", "diff": null, "created_at": "2017-10-29T20:16:22Z", "last_edited_at": "2017-10-29T20:17:39Z", "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDI5MTc5Ng==", "fields": {"body": "@vaibhavsingh97  Use this inside a commit message, u have to give a gap between two\nPHPMessDetectorBearTest: Close test files properly\n\nCloses https://github.com/coala/coala-bears/issues/2047", "diff": null, "created_at": "2017-10-29T20:31:35Z", "last_edited_at": "2017-10-29T20:57:05Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDMxNjg5MQ==", "fields": {"body": "No it won't error, but we just change the filename we tell our users to use for this. This means we change public API, so we have to deprecate things properly. We will add a deprecation message and we will support both filenames, as this should be fairly easy to do. The system_coafile will have precedence then.", "diff": null, "created_at": "2017-10-30T00:43:17Z", "last_edited_at": "2017-10-30T00:44:09Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDU1NDI5Mg==", "fields": {"body": "@tulphoon @userzimmermann\nIf @userzimmermann  is going to work on this, please close this PR if not required as its no longer to be reviewed.", "diff": null, "created_at": "2017-10-30T19:16:28Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDU1NjMzOQ==", "fields": {"body": "Resolve conflicts", "diff": null, "created_at": "2017-10-30T19:24:08Z", "last_edited_at": null, "author": "aashutoshrathi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDY2MDg4Mw==", "fields": {"body": "Sorry, we can't accept this PR. You could have at least disguised the spam.", "diff": null, "created_at": "2017-10-31T05:03:25Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDY4MjcxMg==", "fields": {"body": "@Monal5031 please see if things are in place. \ud83d\udc4d", "diff": null, "created_at": "2017-10-31T07:32:35Z", "last_edited_at": null, "author": "anshumanv", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDc4MDU1NA==", "fields": {"body": "@aashutoshrathi Please follow http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nfileName: Mention changes summary\nChanges\n\nCloses #{issue number}", "diff": null, "created_at": "2017-10-31T14:32:02Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDcxNjk3MA==", "fields": {"body": "@newbazz remove the space after , in line 10.", "diff": null, "created_at": "2017-10-31T10:10:42Z", "last_edited_at": "2017-10-31T10:11:46Z", "author": "aashutoshrathi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDgyNjgzNQ==", "fields": {"body": "Umm... The Shortlog is still not in imperative mood. Actually, you changed the title of your PR \ud83d\ude04.\nIdeally, Shortlog should be index.html: Fix spacing issues as drop-down issue has been solved in another PR already \ud83d\ude03. You can amend your Shortlog by git commit -a --amend \ud83d\udc4d.\nAlso, the spacing issue seems to be fixed now - Good work \ud83d\udc4d", "diff": null, "created_at": "2017-10-31T16:50:14Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTAxOTUxNw==", "fields": {"body": "Fix whitespace in your commit message.\nAnd rebase your patch.", "diff": null, "created_at": "2017-11-01T07:33:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTQ5MDgxNQ==", "fields": {"body": "you should take a look at http://api.coala.io/en/latest/Developers/Git_Basics.html#rebasing and clean up your commits.\nDo an interactive rebase and squash them all into one. If you need help with this after reading the guide, ask for help in the chat.", "diff": null, "created_at": "2017-11-02T17:05:16Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw==", "fields": {"body": "@ai-coder , you have done one newcomer issue.  Fixing individual spelling mistakes are newcomer issues.\nThe bug you are solving was low because it was about adding a spell checker bear, which is not what you are doing in this PR.", "diff": null, "created_at": "2017-11-03T08:19:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw==", "fields": {"body": "The content of your patch is fine; please amend your commit message\nhttp://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nThis type of change is \"Closes\", not a \"Fixes\", as the current version is not broken.", "diff": null, "created_at": "2017-11-03T14:00:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTg1ODEyMw==", "fields": {"body": "Alright closing then :)\nI'll unassign you from the issue. If you want to take it up again, get assigned and reopen the PR \ud83d\udc4d", "diff": null, "created_at": "2017-11-04T00:32:00Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkxODYyNw==", "fields": {"body": "@yashovardhanagrawal one way is that u can add members that are in core development groups and omit those who are in pending removal group and list cannot be a static number.", "diff": null, "created_at": "2017-11-04T18:16:42Z", "last_edited_at": null, "author": "prashant0598", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkyMDEyOQ==", "fields": {"body": "@prashant0598 Rather than using APIs or any specific number, I am just thinking to add a counter to count the number of cards displayed. I am studying the backend for this, let's see \ud83d\ude04", "diff": null, "created_at": "2017-11-04T18:39:16Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg==", "fields": {"body": "I would rather recommend to write it lowercase, because it's not referring to a name or title. Do it then for both, inside the commit body and in the .rst", "diff": null, "created_at": "2017-11-04T20:26:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjAwMTAwNA==", "fields": {"body": "Please squash the three commits to one:\nFirst, sync your master with coala master and then rebase.\ngit checkout master\ngit pull upstream/master\ngit push upstream/master\ngit checkout file\ngit rebase -i master\ngit push --force", "diff": null, "created_at": "2017-11-05T20:06:15Z", "last_edited_at": "2017-11-05T20:25:14Z", "author": "aashutoshrathi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ==", "fields": {"body": "@Grox-Ni You missed a full stop at the end of commit description \ud83d\ude09.", "diff": null, "created_at": "2017-11-07T15:42:01Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Mjc3Mzc3NA==", "fields": {"body": "Hey @userzimmermann haml-lint 0.27.0 requires rubocop version greater than 0.50.0, which is why the builds are failing. Should I bump it up from 0.49.1 to 0.50.0 too? \ud83d\ude04", "diff": null, "created_at": "2017-11-08T10:20:53Z", "last_edited_at": null, "author": "IpshitaC", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjgzNTQwOQ==", "fields": {"body": "@prashant0598 that issue if for a different task, this PR remains and I think the proposed work for this PR is also completed by me. \ud83d\ude1c\nAbout the issue, it is yet unlabelled and unlabelled issue are not meant to be assigned to newcomers so corobo cannot assign it to me.\nYou might view the whole conversation here, if you want to know more about what is the progress \ud83d\ude04", "diff": null, "created_at": "2017-11-08T14:34:39Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Mjk1ODc5OQ==", "fields": {"body": "Sorry, it took some time but I'm hoping this time it's okay.", "diff": null, "created_at": "2017-11-08T21:04:02Z", "last_edited_at": null, "author": "solutusimmensus", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzA2NDI2NA==", "fields": {"body": "Hi @RaiVaibhav the files you are referring to are simply test files, for testing the bear. I don't think that a newline would be required at the end \ud83d\ude09 \ud83d\ude04", "diff": null, "created_at": "2017-11-09T06:56:42Z", "last_edited_at": null, "author": "IpshitaC", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzQ1MzUzMw==", "fields": {"body": "@Makman2 But you see that it keeps the discussion alive ;)", "diff": null, "created_at": "2017-11-10T11:49:06Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzQxODk0NA==", "fields": {"body": "@prnvdixit this usually happens on bigger PRs addressing more difficult issues. To get some issue closed, more changes in code are needed which can often packed into several atomic commits instead of a single one (makes review easier and code more intuitive). Although those commits relate to the issue, this is sometimes not mentioned (it's currently not always mandatory).", "diff": null, "created_at": "2017-11-10T09:13:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzU2NTc0MA==", "fields": {"body": "Passing it is then.\nPlease update the commit:\n.coafile: Add file in the list of files to be linted\nUpdate the file to follow code styles required by bears.\nCloses <issue>", "diff": null, "created_at": "2017-11-10T19:34:51Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzUwMTA5MQ==", "fields": {"body": "Thanks for your review, I will fix the issues soon. @userzimmermann", "diff": null, "created_at": "2017-11-10T15:20:49Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ==", "fields": {"body": "@troublemagnet done thanks!!", "diff": null, "created_at": "2017-11-11T11:55:28Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzY5MjQxMA==", "fields": {"body": "@newbazz  @Makman2 has said that it is better to use 2 commits for easier reviewing . One for removing the section param in the test file and one for adding the deprecation function .", "diff": null, "created_at": "2017-11-11T20:35:19Z", "last_edited_at": null, "author": "alphadose", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Mzc0NDg1NA==", "fields": {"body": "@RaiVaibhav Thanks for your review but I already figured travis was failing due to some other issue. I myself made the PR as wip, was waiting for it be solved \ud83d\ude09", "diff": null, "created_at": "2017-11-12T15:26:33Z", "last_edited_at": "2017-11-12T15:27:49Z", "author": "Monal5031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Mzc2NTE4Nw==", "fields": {"body": "@supriyanta  see Circle CI passes, did you get the difference here \ud83d\ude09  , also please change your commit message make it to something like assertEquals has been deprecated instead use assertEqual so that everyone understands why these changes are made,  your commit message is still inappropriate.\nI thinks It's 4th time I request you to change your commit message \ud83d\ude1e", "diff": null, "created_at": "2017-11-12T20:31:01Z", "last_edited_at": "2017-11-12T20:33:36Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Mzc3NDM1OA==", "fields": {"body": "Please make two commits out of this: one putting the existing build steps into a new file, and another one modifying it to conform to the issue and implementing the skip of builds on non-masters for unsupported versions.", "diff": null, "created_at": "2017-11-12T22:38:52Z", "last_edited_at": "2017-11-12T22:39:03Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzcyMDg1Mg==", "fields": {"body": "@nealkarpe This PR is closed \ud83d\ude09 Please review the actual PR corresponding to the issue at #4720 \ud83d\ude04 \ud83d\udc4d", "diff": null, "created_at": "2017-11-12T08:17:52Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDA0Njc1OA==", "fields": {"body": "build_and_test: Rename to be more travis\n\nThis one should be squashed with the commit creating the file, no need to do a rename when you already introduce the file here ;)", "diff": null, "created_at": "2017-11-13T20:25:47Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE0OTkzMw==", "fields": {"body": "You need to rebase your patches before you submit a PR. :/", "diff": null, "created_at": "2017-11-14T05:22:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE4OTY5MQ==", "fields": {"body": "Umm... @yashovardhanagrawal I think you already have one PR in queue (the GIF one?).... Please, try not to solve more newcomer issues \ud83d\ude09 \ud83d\udc4d", "diff": null, "created_at": "2017-11-14T09:02:00Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE5NDk5OQ==", "fields": {"body": "@prnvdixit I did this as the process was blocked for that GIF PR\nwill not do any newcomer PR now", "diff": null, "created_at": "2017-11-14T09:22:08Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE5ODY2Nw==", "fields": {"body": "Also, please refrain from pushing commits from your \"master\" branch.", "diff": null, "created_at": "2017-11-14T09:35:02Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDIzOTU0OA==", "fields": {"body": "unack a448fdf\n@vipuldcoder it would be better if your shortlog and the commit body are visible and same in both, the conversation as well as the commits section \ud83d\udc4d", "diff": null, "created_at": "2017-11-14T12:08:17Z", "last_edited_at": null, "author": "neelanshsahai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDU3MzM4NA==", "fields": {"body": "Don't mind my last comment about repeating shortlog, its ok I think :p", "diff": null, "created_at": "2017-11-15T12:06:42Z", "last_edited_at": "2017-11-15T12:06:49Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw==", "fields": {"body": "Also, again - try not to make changes to your \"master\" branch, the consequences of doing so are well documented here \ud83d\ude09 \ud83d\udc4d", "diff": null, "created_at": "2017-11-15T13:05:46Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDY0ODA5Ng==", "fields": {"body": "Hey @supriyanta.\nCongrats on raising your PR in the community.\nIn my opinion we can amend the commit message a bit.\n\nIt changes the code\n\nWe can replace this and have something like\n\nUse assertEqual as assertEquals has been\ndeprecated.", "diff": null, "created_at": "2017-11-15T16:29:01Z", "last_edited_at": "2017-11-15T16:29:52Z", "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDY3MjIxMA==", "fields": {"body": "#4870, @Asalle  It looks like we have to wait", "diff": null, "created_at": "2017-11-15T17:46:09Z", "last_edited_at": "2017-11-15T17:46:42Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQwOA==", "fields": {"body": "Also first get the issue assigned to yourself via corobo in gitter chat using\ncorobo assign <issue link>\nfollow the commit guidelines\nI have mentioned an example in your other PR", "diff": null, "created_at": "2017-11-15T15:39:22Z", "last_edited_at": "2017-11-15T15:39:36Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQxOA==", "fields": {"body": "First get an issue assigned to yourself via corobo in gitter chat\nthen only start to work on a PR\nremember this while contributing in coala \ud83d\ude04", "diff": null, "created_at": "2017-11-15T15:39:24Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA==", "fields": {"body": "@neelanshsahai You don't need to unack just to request changes, use GitHub's feature or just make it a comment.\nOf course, unack is used when you disagree that this is acceptable and has been ack'd by someone else.", "diff": null, "created_at": "2017-11-16T11:02:09Z", "last_edited_at": "2017-11-16T11:02:48Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDg5NTA4OA==", "fields": {"body": "Problem in coverage on appveyor it's not 100% \ud83d\ude15\n\nftr, there was no problem here.", "diff": null, "created_at": "2017-11-16T11:25:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDgyMTIzOA==", "fields": {"body": "@Makman2 I feel it's not a duplicate, he has addressed two different issues in these two PRs\njust the thing is he has added extra commit related to that PR also", "diff": null, "created_at": "2017-11-16T05:37:25Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDk3ODMzNA==", "fields": {"body": "It's --json ;)\nIf commit message is too long then, you can remove the .py ending in the tag ;)\nIt dDisables ...\nUse Closes instead of Fixes, the addressed issue is not a bug.", "diff": null, "created_at": "2017-11-16T16:29:30Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDk5NTAxMw==", "fields": {"body": "Look at the CI tests, there is still something wrong.\n@Makman2 has already pointed it out!", "diff": null, "created_at": "2017-11-16T17:20:37Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDkwNjIxMg==", "fields": {"body": "Filed an issue: coala/coala#4876", "diff": null, "created_at": "2017-11-16T12:17:11Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTA2Njc1MQ==", "fields": {"body": "@nvzard\nIn commit shortlog:\nConsoleInteractions->ConsoleInteraction\nPlease specify about json in shortlog. Makes it easier to trace", "diff": null, "created_at": "2017-11-16T21:22:50Z", "last_edited_at": "2017-11-16T21:23:35Z", "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTI3Mzk4OA==", "fields": {"body": "Also, you need to add tests! \ud83d\ude09", "diff": null, "created_at": "2017-11-17T15:25:55Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTI3NjkxMg==", "fields": {"body": "At the moment we just put no message at all into the empty Json.\n\nAlso, is there an alternate message we need to show when we have --json flag?\n\nThanks a lot @RJ722 , this is my first code related issue and I really needed something like this. Thanks a lot again :)", "diff": null, "created_at": "2017-11-17T15:36:27Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTI3NzQ2Nw==", "fields": {"body": "Also, is there an alternate message we need to show when we have --json flag?\n\nNo that's what we want to get rid off with this PR ;)\nAn empty json list will emit something into the terminal, probably [], which is quite understandable meaning \"no bears\" ;)", "diff": null, "created_at": "2017-11-17T15:38:34Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTMxMDEzNA==", "fields": {"body": "Thank you @Makman2  \ud83d\ude03 .So now I have to just wait for it to get merged?", "diff": null, "created_at": "2017-11-17T17:31:54Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA==", "fields": {"body": "Yes, the documentation should focus on describing .coarc , rather than default_coafile, but I think this example is good enough for this PR/issue.  The problem with default_coafile is in core, not the documentation, and further improvements of docs dont help users a great deal.", "diff": null, "created_at": "2017-11-17T17:39:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjAwNw==", "fields": {"body": "first, read our commit guidelines\nyou shortlog is wrong and also you have not added a commit description the main reason why the last PR for this issue was closed", "diff": null, "created_at": "2017-11-18T18:40:46Z", "last_edited_at": "2017-11-18T18:45:48Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjQ0NA==", "fields": {"body": "A better shortlog can be:\ncoala_will_apply_for_gsoc_2018.md: Add new FAQ\nDescription:\n\nThis adds a new FAQ related to coala applying for\nGoogle Summer of Code - 2018\nAlso adds GSoC timeline is in the answer\nCloses issue link", "diff": null, "created_at": "2017-11-18T18:48:03Z", "last_edited_at": "2017-11-18T18:50:04Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjcyMg==", "fields": {"body": "Also forgot to mention, rebase your commit to update the changes\nyou might read http://api.coala.io/en/latest/Developers/Git_Basics.html for more information about how to do it", "diff": null, "created_at": "2017-11-18T18:52:23Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg==", "fields": {"body": "@prashant0598 please insert a line break between the description and Closes #128\nas I had suggested", "diff": null, "created_at": "2017-11-18T18:55:51Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2NDE1OQ==", "fields": {"body": "@prashant0598 will keep that in mind from the next time, in this PR I cannot change the branch and I think closing a PR would not be good.\n@yashovardhanagrawal I have again updated a few changes\nYou both may review it", "diff": null, "created_at": "2017-11-18T19:13:58Z", "last_edited_at": null, "author": "ihsraham", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTYzNzE4MQ==", "fields": {"body": "You need to rebase.", "diff": null, "created_at": "2017-11-20T09:22:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTg0OTQ1Nw==", "fields": {"body": "@nvzard\nTry this:\nargs = parse_args(['--json'])\n(This might not be the exact line you've to add, but should be something similar to construct args)\nSource: https://stackoverflow.com/questions/18160078/how-do-you-write-tests-for-the-argparse-portion-of-a-python-module\nSolution I mentioned looked clean and good to me. You can look for more answers if there is any better one.", "diff": null, "created_at": "2017-11-20T22:14:53Z", "last_edited_at": "2017-11-20T22:15:33Z", "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NjM4OTYwOQ==", "fields": {"body": "setup.py: Change url\nChanged url from http://coala.rtfd.org/\nto http://coala.io/.\nCloses #2135\nExplanation regarding what you have done to close the\nissue should go in the commit description.\nWhere have you made the changes. (which file)\nand basic idea of what the patch is about that goes in the first line.\nAnd, which issue your patch closes is what you mention in the last line\nof your commit message.\nI hope this helps. Read the developer docs as well for writing good\ncommit messages. :)", "diff": null, "created_at": "2017-11-22T15:46:24Z", "last_edited_at": "2017-11-22T15:54:09Z", "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Njc0MDM5Mg==", "fields": {"body": "This pr should be closed as the issue has been already resolved by another pr  #4821", "diff": null, "created_at": "2017-11-24T04:24:59Z", "last_edited_at": null, "author": "Vedarth", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Njc0MDY0OA==", "fields": {"body": "unack f38fd43", "diff": null, "created_at": "2017-11-24T04:28:03Z", "last_edited_at": null, "author": "Vedarth", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Njk0ODE0Mw==", "fields": {"body": "@nvzard\nLook at #4877 (comment).\nWe need to show something like {} or [] to indicate there are no bears matching the filter criteria.\nYou are not showing anything here.\nunack bfcf40e", "diff": null, "created_at": "2017-11-25T15:42:39Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ==", "fields": {"body": "Also, fix your commit to adhere to https://coala.io/commit \ud83d\ude04", "diff": null, "created_at": "2017-11-26T05:35:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA3NTQyOQ==", "fields": {"body": "Thank so much \ud83d\ude03", "diff": null, "created_at": "2017-11-27T04:21:03Z", "last_edited_at": null, "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg==", "fields": {"body": "@0x48piraj, please follow the instructions given to you by our developers.  We have good reasons for why and how we do things, which you will learn if you proceed through the newcomer process.\nOur newcomer process exists only to ensure you know how to use git correctly.\nIf you dont follow our processes, we discard your PR.\nThank you.", "diff": null, "created_at": "2017-11-27T05:39:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA4OTQ5OQ==", "fields": {"body": "This PR is ghosted.", "diff": null, "created_at": "2017-11-27T06:23:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng==", "fields": {"body": "Also, it's a great first PR \ud83d\ude04 - you needn't start a new PR, just go through the suggested changes and associated guides \ud83d\ude03.\n\nI was talking about setting up the project in git \ud83d\ude1b\nAnd \"I never said anything\" was for that this was just a request to accept this PR, and from next issue, I will do it via git.\nAnyways, you all are right! I read the guidelines, but of my laziness I did it via web-interface.\nI know I'm assigned \ud83d\ude09\nThanks @prnvdixit for such a positive comment.\nFrom now, I will do as it is done in coala \ud83d\ude0a", "diff": null, "created_at": "2017-11-27T06:48:31Z", "last_edited_at": null, "author": "0x48piraj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzAzNjI3NA==", "fields": {"body": "@nvzard\nOh got it. You are using self.assertIn.\nInstead, use self.assertEqual and match the exact string.", "diff": null, "created_at": "2017-11-26T20:33:58Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzI0NTE2Mg==", "fields": {"body": "@userzimmermann Thanks :) I'll adjust both the commit message and PR quickly.", "diff": null, "created_at": "2017-11-27T16:51:03Z", "last_edited_at": "2017-11-27T16:51:13Z", "author": "richer6605", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzI1NjE0NA==", "fields": {"body": "@userzimmermann Modified both the commit and PR message. Please check, thx!", "diff": null, "created_at": "2017-11-27T17:21:42Z", "last_edited_at": null, "author": "richer6605", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzU2MTYxOA==", "fields": {"body": "@akspr7 there are many PR's you have raised and closed for the same issue. Closing the PR's is not a good idea. So, in case you get stuck with any git related issues. Always ping in the gitter channel. Someone from the community will help you out. The newcomers issues are basically there to make newcomers learn git. And there is always a way out to fix those git issues.\nPS: I was advised this when I had joined :) . Forwarding it to you.\nIMO this commit does not need a description. As the first line is self explanatory.\nSomething will only be closed. When it is open.", "diff": null, "created_at": "2017-11-28T15:34:53Z", "last_edited_at": "2017-11-28T15:38:45Z", "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzY2MTM4OA==", "fields": {"body": "Alright, sorry. Addressed. :)", "diff": null, "created_at": "2017-11-28T20:58:29Z", "last_edited_at": null, "author": "Lyrenhex", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzcyODE2OA==", "fields": {"body": "I checked on Netlify , using https://deploy-preview-430--coala-projects.netlify.com/gsoc/2017/statusreport/hemangkumar , and functionally the code is good. (surprise!)\nNow just need to tidy it up", "diff": null, "created_at": "2017-11-29T02:02:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzgxMTE1MA==", "fields": {"body": "@margobra8 we require changes to be made within the same commit. Ideally, you would have made your changes and then done a git add path/to/TypeScript.py and then done a git commit --amend. However, it seems like you did a git commit without the --amend.\nYou can fix this with a git squash to squash these two commits into one commit. You can find some documentation on how to do it over here: http://api.coala.io/en/latest/Developers/Git_Basics.html#squashing-your-commits - if you ever get stuck, please feel free to ask for help via chat (on gitter or zulip).", "diff": null, "created_at": "2017-11-29T10:02:36Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzgzNjE0NA==", "fields": {"body": "Hi @mridubhatnagar Thankyou for the advice.Now I Exactly Got What You are trying to say.Actually ai am all new to GitHub, thats why i am making such silly mistakes.\nThankyou", "diff": null, "created_at": "2017-11-29T11:44:16Z", "last_edited_at": null, "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODQ2MzY2NQ==", "fields": {"body": "It's full link now\ud83d\ude1b", "diff": null, "created_at": "2017-12-01T10:47:30Z", "last_edited_at": null, "author": "Grox-Ni", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODU4ODMzNw==", "fields": {"body": "closing per move request. @shaipranesh11 you can still transfer the commit using the git cli", "diff": null, "created_at": "2017-12-01T19:15:30Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODY0NDY5Ng==", "fields": {"body": "@realslimshanky A commit body is not necessary if the commit shortlog / diff is self-descriptive or if the issue contains enough information.", "diff": null, "created_at": "2017-12-01T23:50:16Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODY5ODQ0MQ==", "fields": {"body": "Also make sure to include the new migrations, using makemigrations", "diff": null, "created_at": "2017-12-02T15:15:39Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTM5MA==", "fields": {"body": "Please, rebase your branch using git rebase (do not press github 'update branch' button, it's evil ;D)\nEverything else is alright \ud83d\udc4d", "diff": null, "created_at": "2017-12-03T05:22:46Z", "last_edited_at": null, "author": "UnimaginaryUnit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzEwMg==", "fields": {"body": "Please check these screenshots. this && this\nI am confused about the allowed rooms, should we allow render test in coala/corobo?", "diff": null, "created_at": "2017-12-03T17:04:44Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzI3Nw==", "fields": {"body": "@mohitkyadav Please add tests", "diff": null, "created_at": "2017-12-03T17:05:54Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA==", "fields": {"body": "Done :)", "diff": null, "created_at": "2017-12-05T03:33:08Z", "last_edited_at": null, "author": "indmind", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTIyMTEzMA==", "fields": {"body": "@khanchi97 yeah, but it could be also because there is no oclint executable present.", "diff": null, "created_at": "2017-12-05T07:37:55Z", "last_edited_at": null, "author": "bhavishyagopesh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg==", "fields": {"body": "Also, it's not labelled \"bug\" - So, use \"Closes\" instead of \"Fixes\" in commit. \ud83d\udc4d", "diff": null, "created_at": "2017-12-05T07:48:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTM0OTczNg==", "fields": {"body": "Why do you move the test file? Please keep it at the same location \ud83d\udc4d", "diff": null, "created_at": "2017-12-05T16:00:35Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng==", "fields": {"body": "If #37 is merged shortly, it'll still be good to add static/js/*.js to the linted JavaScript files.", "diff": null, "created_at": "2017-12-06T08:28:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw==", "fields": {"body": "Comment on a3bbb6d, file scrap.js, line 10.\nBroken link - unable to connect to https://codein.withgoogle.com/api/program/2017/organization/?status=2 (HTTP Error: 503)\nOrigin: InvalidLinkBear, Section: all.links.", "diff": null, "created_at": "2017-12-06T05:25:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw==", "fields": {"body": "You might need run this 2 line inside the project folder\nexport PATH=$PATH:./node_modules/.bin\nexport NODE_PATH=$NODE_PATH:./node_modules\n\nTo let coala use the local eslint.", "diff": null, "created_at": "2017-12-07T10:15:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTkyNTU2NQ==", "fields": {"body": "Thanks for the guidance, I will take care of it next time.", "diff": null, "created_at": "2017-12-07T10:23:25Z", "last_edited_at": null, "author": "starkblaze01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDA4MDQyOA==", "fields": {"body": "Shortlog of HEAD commit isn't in imperative mood! Bad words are 'Updated'\n\nThis error is raised by the gitmate bot because your commit message uses keyword\nas 'Updated' . Commit messages are always in present tense. Hence, Update or Updates\nwould work.", "diff": null, "created_at": "2017-12-07T20:10:02Z", "last_edited_at": null, "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDAxNDY2NA==", "fields": {"body": "I did it to rebuild since travis failed first time.", "diff": null, "created_at": "2017-12-07T16:10:15Z", "last_edited_at": null, "author": "gokberksahin", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE0MTgzMA==", "fields": {"body": "@mohit2872 please read also @userzimmermann's review \ud83d\udc4d", "diff": null, "created_at": "2017-12-08T01:03:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE0MjI5OA==", "fields": {"body": "@bhavishyagopesh please don't ping maintainers personally for reviews (or any other person specifically). Anybody mentioned somewhere will get subscribed to the thread and the messages are appearing in the \"Participating\" list. Just because people are writing on an issue doesn't mean they are involved.", "diff": null, "created_at": "2017-12-08T01:07:00Z", "last_edited_at": "2017-12-08T01:07:40Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg==", "fields": {"body": "Could you modify this as well as part of your folder restructuring?\n\n  \n    \n      gci-leaders/.coafile\n    \n    \n         Line 2\n      in\n      df44130\n    \n    \n    \n    \n\n        \n          \n           files = *.js, static/js/*.js", "diff": null, "created_at": "2017-12-08T06:09:21Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw==", "fields": {"body": "This is so awesome \u2764\ufe0f", "diff": null, "created_at": "2017-12-08T06:58:37Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA==", "fields": {"body": "#49 and #50 should use Closes\nThe rest is good enough, however try to keep to our 'one commit for one issue' guideline next time.", "diff": null, "created_at": "2017-12-08T07:07:31Z", "last_edited_at": "2017-12-08T07:14:48Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE5MTI4Mw==", "fields": {"body": "@Grox-Ni Read the commit guidelines mentioned in the docs.\nIt's just the filename that you specify. And not the function name.\nhttp://api.coala.io/en/latest/Developers/Writing_Good_Commits.html.", "diff": null, "created_at": "2017-12-08T07:16:03Z", "last_edited_at": null, "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng==", "fields": {"body": "LGTM = looks good to me. ack tells the bot to accept the patch", "diff": null, "created_at": "2017-12-08T16:41:11Z", "last_edited_at": "2017-12-08T16:41:29Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDQ1MDU0Mw==", "fields": {"body": "@Vamshi99 @meetmangukiya this is kinda urgent. We could disable auto invite and let our developers help manage the load of inviting with a revised onboarding process.", "diff": null, "created_at": "2017-12-09T11:26:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDQ3OTA5NA==", "fields": {"body": "Hi @mridubhatnagar . Actually yes I am facing an issue. Locally coala does not show any SpaceInconsistency. Manually too I have checked for that on the file. But the gitmate bot says there is a space inconsistency. I tried taking help, but could not reach to the reason for this. It would be great if you could point out what's wrong. Thanks a lot!", "diff": null, "created_at": "2017-12-09T15:41:25Z", "last_edited_at": null, "author": "parimatrix", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDU1OTE0MA==", "fields": {"body": "Sorry for being so late! I was busy with my university exams. I will try to do the required changes asap.", "diff": null, "created_at": "2017-12-10T16:14:13Z", "last_edited_at": null, "author": "Vedarth", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDU2NDk3Ng==", "fields": {"body": "+ your commit body could be more descriptive and less redundant ;)\n(Also add a space after period! :D)", "diff": null, "created_at": "2017-12-10T17:42:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDU2NDkxMg==", "fields": {"body": "Imo the commit message is a bit confusing: Disable two kinds of error\nThis sounds like you are just disabling two error types (which sound to be different)\nI think you should point out that you managed to remove a redundancy in the checks, like Deduplicate results or similar", "diff": null, "created_at": "2017-12-10T17:41:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDU5NTM5OQ==", "fields": {"body": "Commit message:\nI would slightly rephrase the shortlog: Add filename length check\nAnd the body is wrong: If the length has less than 4096, it's actually okay. And nothing gets shortened there from coala side, the user has to do it.", "diff": null, "created_at": "2017-12-11T00:29:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw==", "fields": {"body": "I think we should have a strong horizontal line between each org, and a much less visually distracting separator between icons and participants.", "diff": null, "created_at": "2017-12-11T06:45:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDk1MTkyNQ==", "fields": {"body": "Thanks for the review @vddesai1998. For this trivial change, I don't see a need to create an issue, so I'll bypass it.", "diff": null, "created_at": "2017-12-12T05:46:56Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTA1MzQ1OQ==", "fields": {"body": "check the checks in the checklist as well ;)", "diff": null, "created_at": "2017-12-12T13:38:04Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTExOTY1OQ==", "fields": {"body": "@Makman2 the old version is passing verify_local_bear ..\n\nThis doesn't work?\nPHPCodeSnifferBearLineLengthTest = verify_local_bear(\n    PHPCodeSnifferBear,\n    valid_files=(long_length_test_file,),  # <-- note to put the contents of the test file, not the path\n    settings={'max_line_length', '160'}\n    tempfile_kwargs={'suffix': '.php'})", "diff": null, "created_at": "2017-12-12T17:13:52Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA==", "fields": {"body": "Oh, one last thing, it might be better to use the Wikipedia and Wikimedia logos without text, because it's not readable anyways when the logo is so small. Using just the icon without text will help it fit in more.", "diff": null, "created_at": "2017-12-12T22:05:57Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ==", "fields": {"body": "how do we determine the parent repo of the fork?\n\nThat would be another GitHub API call .. ;)\nBut I meant that it would be OK to just hard code https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nI dont feel particularly inclined to help someone create an alternative version without sending their improvements to this repo.  I am more concerned about the ability for development forks of this repo to build correctly, so newcomers can easily participate in this repo.\nThe problem is that if you use https://raw.githubusercontent.com/andrewda/gh-pages/data.min.json , and dont use https://raw.githubusercontent.com/coala/gh-pages/data.min.json , the build on the fork will be 'reset' , and will need to have several builds before it catches up to the data which has been found in https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nSo if you do use https://raw.githubusercontent.com/xxxx/gh-pages/data.min.json , you should also fall back to https://raw.githubusercontent.com/coala/gh-pages/data.min.json (and IMO , just hard-code it).", "diff": null, "created_at": "2017-12-13T08:23:52Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng==", "fields": {"body": "That would be one option, but adding a CACHE_VERSION would allow us to avoid this problem entirely in the future, such as if a new key were added or an existing one were taken away.", "diff": null, "created_at": "2017-12-14T03:21:12Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTUxNDE4NQ==", "fields": {"body": "Could you rephrase the shortlog to ApertiumLintBear: Fix typos? In the old variant you've technically no verb^^\nOptional: You can actually remove the commit body (except the issue reference), as the described changes are immediately reflected in the diff.", "diff": null, "created_at": "2017-12-13T20:35:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTUzMjk1Ng==", "fields": {"body": "Ah.. good catch @Makman2.\nI missed out on that \"for\". Fix Typos looks better.", "diff": null, "created_at": "2017-12-13T21:37:37Z", "last_edited_at": null, "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTY5OTA3OA==", "fields": {"body": "Yup.", "diff": null, "created_at": "2017-12-14T12:35:32Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTc4MjI1OQ==", "fields": {"body": "I checked this out, this does not work as expected #4648 (comment)", "diff": null, "created_at": "2017-12-14T17:35:18Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTcwMzQ5NQ==", "fields": {"body": "No squash, just push", "diff": null, "created_at": "2017-12-14T12:56:42Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTk0MjMzMg==", "fields": {"body": "Get a overview of coverage but read all about init and how to create a test of bear. No ,you have not solved init problem, take a look at gitmate bot comment.\nAnd when you create a test, coverage problem will gets solved", "diff": null, "created_at": "2017-12-15T08:19:06Z", "last_edited_at": "2017-12-15T10:15:29Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTk4NjU3Ng==", "fields": {"body": "@Vamshi99 take a look.", "diff": null, "created_at": "2017-12-15T11:46:17Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjE2MzUwNA==", "fields": {"body": "@Monal5031 , common gitignore entries can be done using moban.  Setting that up is my next project after getting the GCI app here working.", "diff": null, "created_at": "2017-12-16T05:55:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjE2NDE1Mg==", "fields": {"body": "Sure.  You could do code review of other peoples patches... :P", "diff": null, "created_at": "2017-12-16T06:13:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjE2OTkxNQ==", "fields": {"body": "I will modify the Fixes from commit description to 'fixes'", "diff": null, "created_at": "2017-12-16T08:39:28Z", "last_edited_at": null, "author": "Nshul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjE3OTg3Nw==", "fields": {"body": "@Nshul  appreciate your work \ud83d\udc4d\nCommit Head is enough for explanation (it's good if you added the description here \ud83d\udc4d ), no more changes needed here IMO  LGTM :)\nack 60b0c02", "diff": null, "created_at": "2017-12-16T12:16:40Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjEwNDk5MA==", "fields": {"body": "@Makman2  thanks a lot :D", "diff": null, "created_at": "2017-12-15T20:33:24Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI0NTE1MQ==", "fields": {"body": "@RaiVaibhav ohh okay with the same bear?", "diff": null, "created_at": "2017-12-17T10:17:18Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI1ODIyMw==", "fields": {"body": "The issue is not yet solved:\n\nand prevent them from re-occurring by improving the .coafile.\n\nHowever I would allow a merge if you change the issue reference to \"Related to ...\" instead of \"Closes ...\", fixing spelling errors is always good \ud83d\udc4d\n\nuntil SpellCheckBear can be added to CI tests.\n\nWhy it can't be added?", "diff": null, "created_at": "2017-12-17T14:08:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI2NTM0Mw==", "fields": {"body": "I think you'll need to update the Requirement in each bear to be the same.", "diff": null, "created_at": "2017-12-17T15:55:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ==", "fields": {"body": "Also the expected results says to use yeah but you have changed it to true", "diff": null, "created_at": "2017-12-17T17:16:16Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw==", "fields": {"body": "@ishanSrt\n\nAlso the expected results says to use yeah but you have changed it to true\n\nthat is the expected results it depends what we passed , but on Tutorial we passed True :)", "diff": null, "created_at": "2017-12-17T17:54:01Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzM5OQ==", "fields": {"body": "@Makman2 is it alright now? Also I apologise for creating a new pull request. I had to make one due to some unavoidable circumstances.", "diff": null, "created_at": "2017-12-17T17:57:51Z", "last_edited_at": null, "author": "shreyateeza", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg==", "fields": {"body": "If you want to use var = arr.map then you need to return the whole object, not just mutating them.\nBut let's just use forEach", "diff": null, "created_at": "2017-12-18T07:56:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ==", "fields": {"body": "http://coala.io/newcomer tells you not to do that, twice.  Please read it carefully.", "diff": null, "created_at": "2017-12-18T09:46:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjQ3OTMxNQ==", "fields": {"body": "You can rebuild ur PR. ;)\n\nHe mean to say Rebase your PR \ud83d\ude1b", "diff": null, "created_at": "2017-12-18T16:30:17Z", "last_edited_at": "2017-12-18T16:30:41Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjQwNDg4Mw==", "fields": {"body": "I dont have time to check what the impact of this is.  All I can say is it is introducing risk that we dont have qualified manpower to manage.\nMost of the repos are already red.\nMany of the editor plugins are broken for recent versions of coala.\nWe havent done a release of coala yet since many of the recent deprecations.\nWe need at least one minor release between breaking changes, otherwise CI everywhere fails and it is hard to unbreak things.", "diff": null, "created_at": "2017-12-18T11:51:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjQzODg4NQ==", "fields": {"body": "@shreyateeza\nYeah, done that \ud83d\ude03\nSince its my first PR on the code base, I'll definitely get to learn from here.\nThanks, again !!", "diff": null, "created_at": "2017-12-18T14:22:27Z", "last_edited_at": null, "author": "rattandeep1998", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjQzODgxMA==", "fields": {"body": "@rattandeep1998 Are you getting it?", "diff": null, "created_at": "2017-12-18T14:22:11Z", "last_edited_at": null, "author": "shreyateeza", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mjc0MTgwOQ==", "fields": {"body": "The CI is failing because the lack of tests, update the test file to test the code you've written, see:\nhttps://ci.appveyor.com/project/coala/coala/build/1.0.10861/job/mgy2xnye1nja75m7", "diff": null, "created_at": "2017-12-19T12:59:08Z", "last_edited_at": null, "author": "wyj1026", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjgzNzk2Nw==", "fields": {"body": "@palash25 Check the items in the checklist.", "diff": null, "created_at": "2017-12-19T18:00:38Z", "last_edited_at": null, "author": "shreyateeza", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzA2NTk2OA==", "fields": {"body": "we'll probably not need php-codesniffer in apt-packages\n\nyup that would be a separate PR", "diff": null, "created_at": "2017-12-20T13:42:00Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA==", "fields": {"body": "Would be good to have the RSS mentioned in the index.html", "diff": null, "created_at": "2017-12-20T10:41:27Z", "last_edited_at": "2017-12-20T10:41:36Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw==", "fields": {"body": "@blazeu Is it?", "diff": null, "created_at": "2017-12-21T06:07:46Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzI5MTI1OQ==", "fields": {"body": "@vddesai1998 done \ud83d\udc4d", "diff": null, "created_at": "2017-12-21T08:39:28Z", "last_edited_at": null, "author": "sourojit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA==", "fields": {"body": "Ignoring the line is probably the best way.", "diff": null, "created_at": "2017-12-21T00:37:25Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzQ0MjMzMg==", "fields": {"body": "@k4ni5h I am not talking about #432 (comment).\nYou have to change your commit message here - https://github.com/coala/projects/pull/432/commits.\nUse command git commit --amend and then change your commit message there and then do git push --force branch_name\nTake help from http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html to write a good commit", "diff": null, "created_at": "2017-12-21T19:51:29Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzU0NzAxNg==", "fields": {"body": "I suspect that it is the foo & which is tripping it up.", "diff": null, "created_at": "2017-12-22T08:19:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg==", "fields": {"body": "Please squash your rss commits.  There is no need to create a file in one commit and then modify it in another , within one PR.  It is one code addition.", "diff": null, "created_at": "2017-12-22T05:47:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ==", "fields": {"body": "Ideally a PR shouldn't come from your master branch it can complicate things.\nBut don't worry, do not close this one. You can discuss about it in our chat.", "diff": null, "created_at": "2017-12-22T15:31:46Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA==", "fields": {"body": "In general, it's let for reassignable variable or const for unassignable.\nSee our backend js.\nWe have Babel so browser support is pretty good.", "diff": null, "created_at": "2017-12-24T00:53:38Z", "last_edited_at": "2017-12-24T00:54:23Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mzc3Nzg3Ng==", "fields": {"body": "Here is the preview:  https://deploy-preview-68--coala-community.netlify.com/\nCould you reduce the height and width of the logo in the HTML/CSS.  Leave the image file with its current dimensions.\nOptional, you can also remove the logo from gci/ page.", "diff": null, "created_at": "2017-12-24T10:53:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzcxNDU4OA==", "fields": {"body": "Ok thanks \ud83d\ude00", "diff": null, "created_at": "2017-12-23T08:45:03Z", "last_edited_at": null, "author": "sourojit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mzg4ODIzMA==", "fields": {"body": "@Makman2 I tried finding a way so that we can do version check using something like\nif libclang.version < 3.4:\nbut was unable to find one, should we stick with the try block?\n\nGitHub doesn't let me answer on that comment directly, however:\nIf you can't find a way now it's okay, keep it in a try block. But if possible I would like to check it somehow at module-import-stage so people immediately know that things aren't going to work out in all cases. But if that's also too complicated, then nvm ;)\n\nOr do you want me to change libclang-py3~=3.4.0 to libclang-py3=3.4 in requirements.txt ?\n\nNo the current spec is already good, the problem is that if users might have a different version installed, that we don't crash completely but give him a hint how to fix it, which is what you're doing right now :)", "diff": null, "created_at": "2017-12-25T19:54:55Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mzk4MjYzNw==", "fields": {"body": "@paavininanda You need not close this just push to existing branch and this will update. This will be a good practice. \ud83d\udc4d Rest is up to you \ud83d\ude04", "diff": null, "created_at": "2017-12-26T15:51:56Z", "last_edited_at": null, "author": "pradeepgangwar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDE2MTA4NQ==", "fields": {"body": "Alright :) Some explanations on how things work in detail inside coala:\n\ncoala loads .coafile's (there's not only the one the user provides, but also system-wide coafiles and user-wide coafiles, but this is not so important)\ncoala reads all sections, and assigns the values to Section objects.\nSome settings are special, like files, bears or default_actions, which control also coala-internal logic.\nDuring coala's code flow, it will retrieve the value of files which is still a glob yet, and passes is to globbing functions to retrieve all paths of all files the user wants to analyze that exist on the current user's file tree.\nFor all file paths retrieved, coala now loads all files into memory, and places them into the \"file-dict\":\n{'filepathA': ['content:\\n', 'line2\\n', 'line3\\n'], ...}\nNote that at this stage, files have gone virtual, and coala won't read those files any more (at least they have no relevance for the bears after this).\ncoala now instantiates all requested bears, fills them up with all settings from the user (via the Section objects) and with the file-dict.\nThose bear instances get scheduled into the core, so they are actually run.\nThe bears now emit Result objects, defining what codestyle-violations, hints, etc etc have been found.\ncoala collects these results and takes care of presenting them to the user or doing other result-handling (e.g. applying patches immediately)\n\nSo this is a little overview, trying to address your questions specifically:\n\nI don't understand what should I provide for the parameter, file_dict\n\nIt has to be at least a dict, mapping file-names/paths to the respective file contents. Like mentioned, files here are completely virtual, you can actually place whatever you like there. E.g.\n{'filepathA': ['content:\\n', 'line2\\n', 'line3\\n']}\nis referring to a set containing a single file, with the name filepathA containing\ncontent:\nline2\nline3\n\nThis file doesn't have to exist for real in the OS filesystem. At the apply_patches function coala has already loaded real files into this dict.\n\nAlso I need to get the parameter results which I am not sure how am I gonna obtain that.\n\nThis is a list of Result objects. Those are only holding information about an issue, like message, severity, etc. You can create a Result object to your likings, like said, it's just holding information. Those are returned by the bear, once they have analyzed files that were passed via the file-dict. In fact bears can be mathematically seen as a function performing this mapping:\none file-dict --> many Results. So you can imagine an example run of coala with some unknown bear that has generated results for your file-dict. Having that said: You can provide any results you like, they can contain anything.\n\nI only need to know if the given function returns an empty list if i replicate the conditions in the issue\n\nThat's what I don't know, I haven't written the function :3", "diff": null, "created_at": "2017-12-27T19:01:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDE2MzU1Nw==", "fields": {"body": "Yeah i know, commit body is needed, i meant for this particular PR.", "diff": null, "created_at": "2017-12-27T19:13:44Z", "last_edited_at": null, "author": "gokberksahin", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDEwODg3Nw==", "fields": {"body": "@manankalra Actually, it's the PR that you have commented on. If he doesn't make the changes in some days, ping some maintainer on issue thread please.\nI don't think much is required to be changed in this PR - ping @nikhil-seth, please do the required changes.\nIssue thread - #4903", "diff": null, "created_at": "2017-12-27T12:44:14Z", "last_edited_at": "2017-12-27T12:44:39Z", "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw==", "fields": {"body": "According to the Best Practices doc mentioned in the original issue, the image size has to be at least 200x200 pixels for smaller sharing posts, or 600x315 pixels for larger sharing posts.\nThe current image is 72x72 pixels (after commit f95ffaf214f529b69de444760653ce75f2621410, so I decided to re-add the previous image instead.", "diff": null, "created_at": "2017-12-28T06:31:41Z", "last_edited_at": "2017-12-28T06:35:40Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ==", "fields": {"body": "I believe an image with a white background works and looks fine.\nExample using an image with a white background:", "diff": null, "created_at": "2017-12-28T06:40:15Z", "last_edited_at": "2017-12-28T06:40:25Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQ5NTE5Ng==", "fields": {"body": "ack 3d73db3", "diff": null, "created_at": "2017-12-29T20:13:43Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQwNjc3Mg==", "fields": {"body": "Sorry, I wasn't clear, please amend you commit in git to change fixes into closes. I think we've generally standardised on using Fixes for issue labeled with bug only. The bug metric algorithm works at the commit level.", "diff": null, "created_at": "2017-12-29T06:57:06Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng==", "fields": {"body": "@blazeu That was actually caused by my padding: 10px instead of padding: 10px 0. I just fixed the padding instead.", "diff": null, "created_at": "2017-12-29T08:17:08Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQyNDEwOQ==", "fields": {"body": "@adi23arora apparently my commit message had a trailing period. I have updated the commit \ud83d\ude03 . Please review.\n\nShortlog\nExample:\nsetup.py: Change bears' entrypoint\nMaximum of 50 characters.\nKeeping subject lines at this length ensures that they are readable, and explains the change in a concise way.\nShould describe the change - the action being done in the commit.\nShould have a tag and a short description separated by a colon (:)\nTag\n\nThe file or class or package being modified.\nNot mandatory.\n\nShort Description\n\nStarts with a capital letter.\nWritten in imperative present tense (i.e. Add something, not Adding something or Added something).\nNo trailing period.", "diff": null, "created_at": "2017-12-29T09:52:46Z", "last_edited_at": null, "author": "namantw", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDU1Njg0NA==", "fields": {"body": "Ah! Just forgot about that, my bad. Thanks for clearing it for me though, @namantw  \ud83d\udcaf", "diff": null, "created_at": "2017-12-30T17:09:18Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDU2NjczMA==", "fields": {"body": "Actually I dislike the commit message: The goal was to add a new setting, not to upgrade jshint. This was just a consequence. Please adapt your message.\nAlso: Please don't put a colon between Closes and the issue id.", "diff": null, "created_at": "2017-12-30T20:30:58Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA==", "fields": {"body": "@blazeu I've mentioned it above. See here.", "diff": null, "created_at": "2017-12-31T10:04:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDUxNDg2Ng==", "fields": {"body": "Hi! :)\nHave a look at the commit guidelines http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nAlso, this may help if you want to change your commit message http://api.coala.io/en/latest/Developers/Git_Basics.html#follow-up", "diff": null, "created_at": "2017-12-30T00:05:11Z", "last_edited_at": null, "author": "clarammdantas", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDY2MTczMA==", "fields": {"body": "Just add info on those additional changes from #5021 to the commit message body\n\nthats what you told me to do \ud83e\uddd0", "diff": null, "created_at": "2018-01-01T16:19:54Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDY2NzQyMA==", "fields": {"body": "@pareksha Try to understand the difference. This is a bug was mentioned by coala as after it found out one of the params were missing while this issue may not be a bug.\n\n@pareksha if you think this is a bug, get a maintainer to add the label type/bug on the issue", "diff": null, "created_at": "2018-01-01T18:17:04Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDY2Nzc3MQ==", "fields": {"body": "also you need to adjust the test cases according to the changes you made", "diff": null, "created_at": "2018-01-01T18:24:19Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDYxMzc4MA==", "fields": {"body": "sorry @userzimmermann . Didn't quite look into that and merely changed everything till all the tests passed \ud83e\udd13. Made the required changes.", "diff": null, "created_at": "2017-12-31T16:47:11Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDgyNjQ0Mg==", "fields": {"body": "yes", "diff": null, "created_at": "2018-01-02T17:41:30Z", "last_edited_at": null, "author": "sourojit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDk1OTUyMg==", "fields": {"body": "please note that the smallness doesn't matter but the impact of the code multiplied by the likelyhood of it containing bugs. This piece is very simple, easily reviewed and even if it breaks almost nobody will care so the overall risk isn't high.", "diff": null, "created_at": "2018-01-03T08:36:14Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDk2MzYyMA==", "fields": {"body": "If your if clause is never false, you can add this workaround: add another parameter to the function and set its default value to be get_distribution('libclang-py3').version, test this against '3.4.0'\nand then in the test case give any other random value to that param.\ncc @Makman2 your thoughts on this?", "diff": null, "created_at": "2018-01-03T09:01:41Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA==", "fields": {"body": "Note that this was working way back before @dob9601 added a bunch of new codes, so I accepted the task in GCI.", "diff": null, "created_at": "2018-01-03T14:30:35Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTMwOTE5OQ==", "fields": {"body": "ack 68915cb", "diff": null, "created_at": "2018-01-04T15:20:47Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTMxMDg1Mg==", "fields": {"body": "I did rebased it just a while ago!", "diff": null, "created_at": "2018-01-04T15:26:50Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTQ4MjM1Ng==", "fields": {"body": "okay so now as I have reversed all the file before start to check trailing blanklines.So now we will be checking the file in this order:\nfile= 6.   \"\\n\"\n      5.    \"     \\n\"\n      4.    \"}\\n\"\n      3.    \"printf(\"%d\",a);\\n\"\n      2.    \"a = 5;\\n\"\n      1.    \"int main(){\\n\"\n\nSo now after exit from that for loop what do you think what would be the value of line_nr_start.\nI think it should be 5.Now try to iterate this file into that for loop and tell me where do you have doubt?", "diff": null, "created_at": "2018-01-05T06:27:22Z", "last_edited_at": "2018-01-05T06:28:01Z", "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTU3MjMxNA==", "fields": {"body": "seems somethings wrong with travis and appveyor. Failing everywhere with same error log", "diff": null, "created_at": "2018-01-05T14:49:57Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTU5MDk1OA==", "fields": {"body": "@ishan I think we should consider a line containing only a newline character \"\\n\" and a line with whitespace also \"   \\n\" to be a blankline and prompt the user that there are some trailing blanklines in your source code.", "diff": null, "created_at": "2018-01-05T16:01:35Z", "last_edited_at": null, "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTY2NjY1Ng==", "fields": {"body": "Use unittest.patch, then you can modify any function you like to throw exceptions / doing whatever on certain conditions \ud83d\udc4d", "diff": null, "created_at": "2018-01-05T21:12:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTY5MDUzMw==", "fields": {"body": "Yeah recent build breakage: #5045\nBut fixed now \ud83d\udc4d", "diff": null, "created_at": "2018-01-05T23:11:29Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng==", "fields": {"body": "done", "diff": null, "created_at": "2018-01-06T15:10:14Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTcwMDYyNg==", "fields": {"body": "Yeah recent build breakage: #5045\nBut fixed now \ud83d\udc4d", "diff": null, "created_at": "2018-01-06T00:19:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTg3NDY5OQ==", "fields": {"body": "Otherwise LGTM (Y)", "diff": null, "created_at": "2018-01-08T02:35:54Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTgwODE4OA==", "fields": {"body": "Read the commit guidelines from https://coala.io/commits as given in the checklist. Also it would be better if you check the items of the checklist.", "diff": null, "created_at": "2018-01-07T08:43:46Z", "last_edited_at": null, "author": "shreyateeza", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Njg4MTQ5Mg==", "fields": {"body": "Done @nalinbhardwaj", "diff": null, "created_at": "2018-01-11T09:47:12Z", "last_edited_at": null, "author": "Prabhat-IIT", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzA0OTY5OA==", "fields": {"body": "@Makman2 I need some time, actually i got busy with my daily schedule these days. I will update here if there is any progress.", "diff": null, "created_at": "2018-01-11T20:21:00Z", "last_edited_at": "2018-01-11T20:21:16Z", "author": "pradeepgangwar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzIxMTE4NA==", "fields": {"body": "Btw you have tests failing, correct them and then push ;)", "diff": null, "created_at": "2018-01-12T11:10:10Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzQ3MDE4MA==", "fields": {"body": "Write commit according to http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html", "diff": null, "created_at": "2018-01-13T21:54:57Z", "last_edited_at": null, "author": "Prabhat-IIT", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzQ5MDUwMQ==", "fields": {"body": "Follow commit guidelines http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html", "diff": null, "created_at": "2018-01-14T05:50:56Z", "last_edited_at": null, "author": "shreyateeza", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzQyNTEyNA==", "fields": {"body": "@paavininanda you can ask for help in the gitter channel ;P", "diff": null, "created_at": "2018-01-13T10:41:23Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzU4ODEzNA==", "fields": {"body": "I have to change the shortlog to Executing_Tests.rst: Fix a grammatical mistake and the commit body to Change \"testing\" to \"test\" for better readability., if I'm right?", "diff": null, "created_at": "2018-01-15T05:46:00Z", "last_edited_at": null, "author": "Kagamihime", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzUyNDkyOA==", "fields": {"body": "@nvzard did you run pytest --cov --cov-report html? and look which lines of code have not been executed or partially executed?", "diff": null, "created_at": "2018-01-14T16:51:12Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzUzMzc0MA==", "fields": {"body": "I'll definitely go through everything you've asked me to.\nThanks.", "diff": null, "created_at": "2018-01-14T19:05:54Z", "last_edited_at": null, "author": "vibhanshuvaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Nzc0MTgyMg==", "fields": {"body": "CI says that your bad file isn't as bad as you think ;)", "diff": null, "created_at": "2018-01-15T17:11:15Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Nzc0NzAxNQ==", "fields": {"body": "--> pip3 install -r docs-requirements.txt\nHow can you build docs if you never have installed the tools for them? ;) Maybe this command can be added to the docs.", "diff": null, "created_at": "2018-01-15T17:34:21Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzczOTE3MQ==", "fields": {"body": "Done", "diff": null, "created_at": "2018-01-15T16:59:54Z", "last_edited_at": null, "author": "margobra8", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NzkxNDY2MA==", "fields": {"body": "Sure.\nSorry for not abiding by it.\nWill make the changes asap.\n\u2026\nOn Monday, January 15, 2018, Mischa Kr\u00fcger ***@***.***> wrote:\n @rohanbanerjee <https://github.com/rohanbanerjee> please look our commit\n guidelines.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#5067 (comment)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/AYZqqGlbQY9CoDeFrUxakngaZjPdtxEzks5tK4wzgaJpZM4RZ7Qy>\n .\n\n\n-- \nRohan Banerjee\nSRM University\n+91 9833397430", "diff": null, "created_at": "2018-01-16T10:15:49Z", "last_edited_at": null, "author": "rohanbanerjee", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODA4MzkyNQ==", "fields": {"body": "We synchronize them from the respective issues \ud83d\udc4d Somebody might want to review only certain things in coala ;)", "diff": null, "created_at": "2018-01-16T19:51:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODA4ODU4MQ==", "fields": {"body": "Sorry my bad. Won't happen again", "diff": null, "created_at": "2018-01-16T20:07:55Z", "last_edited_at": null, "author": "jackthepirate6", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODE5MDg4MQ==", "fields": {"body": "Yeah my bad, and change the title from Fix a typo to correct grammatical mistake", "diff": null, "created_at": "2018-01-17T04:02:09Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODI2NTg4Mw==", "fields": {"body": "during my first issue ;)", "diff": null, "created_at": "2018-01-17T10:41:56Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODI2OTMzNg==", "fields": {"body": "but she had a different PR opened from the same branch. So there was no choice, one PR needed to be closed", "diff": null, "created_at": "2018-01-17T10:56:10Z", "last_edited_at": "2018-01-17T10:56:20Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODI3MTE2Nw==", "fields": {"body": "Got it @newbazz Thanks :)", "diff": null, "created_at": "2018-01-17T11:03:45Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODI4MzE0Mw==", "fields": {"body": "Commit message: I would rather rephrase to\n.coafile: Change glob of default_actions\n\n... in section [python].\n\nCloses xxxx\n\nCurrently it sounds a bit like you've modified ApplyPatchAction.py^^", "diff": null, "created_at": "2018-01-17T11:57:10Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODM1OTQ2MA==", "fields": {"body": "Yes @newbazz. Right now, I'm traveling. So I'll update it after 2 days.", "diff": null, "created_at": "2018-01-17T16:26:30Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ==", "fields": {"body": "and make sure in your commit message you are using only present tense \ud83d\ude09", "diff": null, "created_at": "2018-01-18T22:11:34Z", "last_edited_at": null, "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODkzNjk4OA==", "fields": {"body": "Done @vibhanshuvaibhav. Thanks for the suggestion :)", "diff": null, "created_at": "2018-01-19T11:13:11Z", "last_edited_at": null, "author": "amalrajan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTI5MzA0NQ==", "fields": {"body": "The issue was labelled as difficulty/low on coala/documentation but you've marked it as difficulty/newcomer here\n\nThat was a mistake, labels changed \ud83d\udc4d", "diff": null, "created_at": "2018-01-21T23:48:55Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTIzMzQ4Mw==", "fields": {"body": "@newbazz I've removed the lines", "diff": null, "created_at": "2018-01-21T08:56:05Z", "last_edited_at": null, "author": "Kagamihime", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTQwNjAxMA==", "fields": {"body": "I dont think so, in that case the appveyor should also fail but it is not the case here.", "diff": null, "created_at": "2018-01-22T12:11:10Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng==", "fields": {"body": "@Kagamihime Oh forgot to change the comment here. Had already changed the commit by looking at another PR.", "diff": null, "created_at": "2018-01-22T14:01:03Z", "last_edited_at": null, "author": "diveshuttam", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTc2NjI5NA==", "fields": {"body": "Sorry, didn't see those. Making changes ASAP.", "diff": null, "created_at": "2018-01-23T11:48:02Z", "last_edited_at": null, "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTc2OTg2Mg==", "fields": {"body": "@ankan17 The issue on which this Issue depends has not been resolved yet, so this PR is basically blocked by that issue. So i would suggest you to find another issue to work on :)", "diff": null, "created_at": "2018-01-23T12:03:54Z", "last_edited_at": null, "author": "paavininanda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MDEyNzA3Mg==", "fields": {"body": "@ankurg22 it allows you to make an empty commit, i.e to commit even if you havent changed any file ;)", "diff": null, "created_at": "2018-01-24T13:10:22Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MDQ0NDQzMQ==", "fields": {"body": "@newbazz #2251 (comment) :)", "diff": null, "created_at": "2018-01-25T11:49:22Z", "last_edited_at": null, "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MDgwMjQ5OA==", "fields": {"body": "Full stop expected in commit body", "diff": null, "created_at": "2018-01-26T14:42:45Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MDk4MDk3OA==", "fields": {"body": "Yeah remove that :P", "diff": null, "created_at": "2018-01-27T12:15:37Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTA0NDY0Nw==", "fields": {"body": "@priyanshsaxena In the commit body, add the before community.\nOtherwise, LGTM. ;)", "diff": null, "created_at": "2018-01-28T07:46:34Z", "last_edited_at": null, "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTA3NDcxMQ==", "fields": {"body": "YES!!", "diff": null, "created_at": "2018-01-28T16:19:00Z", "last_edited_at": null, "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTA5NDcyNA==", "fields": {"body": "Nope:\n**** GitCommitBear [Section: commit | Severity: NORMAL] ****\n!    ! Invalid full issue reference: #2212\nExecuting section rst...\n\nRead the logs ;)", "diff": null, "created_at": "2018-01-28T20:50:06Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTAyMjcyNQ==", "fields": {"body": "@Makman2 nope, target is already used, this is just a little typo in the template: https://github.com/coala/corobo/blob/master/plugins/labhub.py#L119-L124", "diff": null, "created_at": "2018-01-27T23:03:05Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTMwMjIxNw==", "fields": {"body": "@newbazz Got it. It needs full issue url in commit.", "diff": null, "created_at": "2018-01-29T16:29:23Z", "last_edited_at": null, "author": "ankurg22", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTQ4NDEzNA==", "fields": {"body": "@Makman2 I couldn't write tests and it's been a long time I took up the issue. Someone else will work on this.", "diff": null, "created_at": "2018-01-30T05:47:50Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTY0NjY4NA==", "fields": {"body": "ack 86575f3", "diff": null, "created_at": "2018-01-30T16:19:18Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTk0NjA3Mg==", "fields": {"body": "@monsij\nAdded full stop ;)", "diff": null, "created_at": "2018-01-31T14:20:56Z", "last_edited_at": null, "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MjE0MDMwOQ==", "fields": {"body": "@ankurg22 you can now start solving a difficulty/low issue?", "diff": null, "created_at": "2018-02-01T02:40:03Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MjE5MTk4Mg==", "fields": {"body": "@EverWinter23 I still think you can be more descriptive in your commit body. You have not just removed the second code snippet but incorporated its functionality into the first one.", "diff": null, "created_at": "2018-02-01T08:21:59Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MjI2MTUxNQ==", "fields": {"body": "Thats bad. \ud83d\ude13 Very bad. Sorry.", "diff": null, "created_at": "2018-02-01T13:12:23Z", "last_edited_at": "2018-02-01T18:57:47Z", "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Mjc3MzU1MQ==", "fields": {"body": "@ishanSrt both of the above links you mentioned refer to the same thing but the changes I have made are for http://api.coala.io/en/latest/Developers/Newcomers_Guide.html Because this is sort of a design issue, major change was on css rendering part.", "diff": null, "created_at": "2018-02-03T03:17:38Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Mjg5ODA4NQ==", "fields": {"body": "Changed:\nFixes #4056 => Closes #4056\nin commit-body (it is the body? Or is it the tail? I'm trying to get a hang of all the terminology x_X)", "diff": null, "created_at": "2018-02-04T10:54:16Z", "last_edited_at": null, "author": "Nickatak", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng==", "fields": {"body": "coala says:\n|    | [NORMAL] GitCommitBear:\n|    | No newline found between shortlog and body at HEAD commit. Please add one.\n\nYour commit needs to be like this\nMain.css: Fix broken social link\n\nFixes https://github.com/coala/gci-leaders/issues/73\n\n1 newline between shortlog and body.", "diff": null, "created_at": "2018-02-04T14:53:15Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA==", "fields": {"body": "I implemented wisn's suggestion, the one that made the issue a newcomer one, but perhaps there are better ways to solve this issue.", "diff": null, "created_at": "2018-02-06T06:49:20Z", "last_edited_at": null, "author": "mvinoba", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MzQ2NDM2NQ==", "fields": {"body": "@Makman2 your guidance really made my day. This one finally passed all the tests. Please review :)", "diff": null, "created_at": "2018-02-06T15:47:52Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Mzc3Nzc3OQ==", "fields": {"body": "It's not necessary @prakashdanish.\nShortlog will exceed the character limit if i do so.", "diff": null, "created_at": "2018-02-07T14:02:22Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Mzg1NjU4MQ==", "fields": {"body": "@monsij you can still remove the unwanted commits from here and rebase again.", "diff": null, "created_at": "2018-02-07T18:03:57Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NDAwODExNQ==", "fields": {"body": "@prakashdanish .py is understood as while importing we do from x.y.x import w an not from x.y.z.py import w.", "diff": null, "created_at": "2018-02-08T05:37:37Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NDg0NzExNg==", "fields": {"body": "1.8.2 is not stable version of pylint. I read the pylint documentation. So,\ndecided to stick with 1.7.2. Maybe we can move to new updates when it has\nstable updates. \ud83d\ude00", "diff": null, "created_at": "2018-02-12T07:38:05Z", "last_edited_at": "2018-02-12T08:10:44Z", "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NDg0NzQ2Ng==", "fields": {"body": "Yes", "diff": null, "created_at": "2018-02-12T07:40:36Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTAzMjk4NQ==", "fields": {"body": "Why closed the PR?", "diff": null, "created_at": "2018-02-12T19:22:32Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTI0MDQzOA==", "fields": {"body": "It's the body ;) The commit consists of the shortlog (the first line) and the body (following the first line). There's no commit tail (though I like this word, if git would be newer this might have become established :D)", "diff": null, "created_at": "2018-02-13T11:32:21Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg==", "fields": {"body": "Now we are talking, looks good :D", "diff": null, "created_at": "2018-02-13T11:24:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTU3ODkxMQ==", "fields": {"body": "Take a look http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html#how-to-write-good-commit-messages", "diff": null, "created_at": "2018-02-14T11:41:57Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTU4NjY2Nw==", "fields": {"body": "Visual Studio is a noun for your information. Can you just change OpenEditorAction.py: addition of visual studio in known editors to OpenEditorAction.py: Addition of Visual Studio in known editors?", "diff": null, "created_at": "2018-02-14T12:03:26Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTYxNDUwNQ==", "fields": {"body": "Commit message: Seems you somehow messed up the shortlog, can you fix this? :)", "diff": null, "created_at": "2018-02-14T13:57:36Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTcxMTMzOA==", "fields": {"body": "Not necessary, this is a pretty simple change.", "diff": null, "created_at": "2018-02-14T19:05:21Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTg0OTM3Nw==", "fields": {"body": "Your changes are good except the commit message. Change Fixes to Closes as this PR is not for bug issue.", "diff": null, "created_at": "2018-02-15T07:51:20Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTg0OTcyNQ==", "fields": {"body": "@sangamcse I have made the changes", "diff": null, "created_at": "2018-02-15T07:53:04Z", "last_edited_at": null, "author": "ayush9398", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw==", "fields": {"body": "Sure @Makman2 This won't repeat again :)", "diff": null, "created_at": "2018-02-15T14:41:19Z", "last_edited_at": null, "author": "nguptaa", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NjI1NTMzMA==", "fields": {"body": "We need tests for this with LocalBearTestHelper.check_results, otherwise we could write anything into the message format and tests would still pass.", "diff": null, "created_at": "2018-02-16T14:48:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NjQ1MjU1Ng==", "fields": {"body": "End tag label does not match expected label\nControl start tag has no corresponding end\n\n\nThese are already detected by Jinja2Bear . The only issue that is still to be addressed is that some tests for control start tags also apply for statement tags  (if i write a more general regex). So perhaps we could file two issues once this is approved.\n\nTo correct mistakes in the control start tags\nAnd then improve regex for statement tags as well.", "diff": null, "created_at": "2018-02-17T16:27:23Z", "last_edited_at": "2018-02-17T16:43:39Z", "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NjQ5MjE5Ng==", "fields": {"body": "Please actually import the data into the data model.\nI'll probably need to add a key to netlify & travis , etc so that your import process works.", "diff": null, "created_at": "2018-02-18T04:40:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NjQyOTAyMw==", "fields": {"body": "yes I think you might need to use unittest \ud83d\udc4d", "diff": null, "created_at": "2018-02-17T09:28:05Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NjUzMjk4MA==", "fields": {"body": "unack 353ccae", "diff": null, "created_at": "2018-02-18T17:41:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NjcxNTA2OQ==", "fields": {"body": "I would also recommend to replace Fix with Use -->\nLanguageToolBear: Use triple double quotes\nAs strongly taken, it's not a real \"fix\" \ud83d\ude04", "diff": null, "created_at": "2018-02-19T14:50:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NzA4Mjg1MQ==", "fields": {"body": "Please don't close PRs just because of gitmate issues. You can always fix them up in the same PR.", "diff": null, "created_at": "2018-02-20T19:02:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Nzc1NDczOA==", "fields": {"body": "I think it should be correct now. Please check it.", "diff": null, "created_at": "2018-02-22T17:21:23Z", "last_edited_at": null, "author": "himanshu1603", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDcwOA==", "fields": {"body": "Thanks a lot for helping me so much!", "diff": null, "created_at": "2018-02-22T18:26:52Z", "last_edited_at": null, "author": "himanshu1603", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NzkyNjM1NQ==", "fields": {"body": "Fixed the commit", "diff": null, "created_at": "2018-02-23T06:55:20Z", "last_edited_at": null, "author": "chetasr", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODIyMTE4Nw==", "fields": {"body": "Hey! Thanks for this contribution, a few minor things though, can we have tests that ensure this is working as expected?\nAlso commit messages should follow the guideline set here", "diff": null, "created_at": "2018-02-24T11:16:25Z", "last_edited_at": "2018-02-24T11:16:45Z", "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODMyNzA5MA==", "fields": {"body": "Then better use SEE_MORE = 'https://github.com/projectatomic/dockerfile_lint' without any braces. This will resolve all checks.", "diff": null, "created_at": "2018-02-25T17:24:16Z", "last_edited_at": "2018-02-25T17:24:57Z", "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODMzMDgwOQ==", "fields": {"body": "Just give a push to this PR after requested changes are done and then I will check it from here.", "diff": null, "created_at": "2018-02-25T18:10:39Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODMzMTgyNw==", "fields": {"body": "yes please push your changes here so that we can tell what is going wrong.", "diff": null, "created_at": "2018-02-25T18:24:18Z", "last_edited_at": "2018-02-25T18:24:47Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODQ5MTUxMw==", "fields": {"body": "Squash your commits into one", "diff": null, "created_at": "2018-02-26T12:53:20Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODQxNjY5Mw==", "fields": {"body": "That was a previous commit in which the text was not clear as said by Makman2. So I created a new asciinema and now I want to update the previous link.", "diff": null, "created_at": "2018-02-26T07:51:14Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODQxOTcyNA==", "fields": {"body": "Now your commit is good. If you are doing any changes in files, then after that use git add thatfile, git commit --amend then git push -f origin yourbranch. I hope you got it clearly.", "diff": null, "created_at": "2018-02-26T08:06:27Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODQyMDUyNQ==", "fields": {"body": "I don't think it will fail now. It was failing because you pulled upstream and pushed that in this branch.\nAnd please do changes as requested by Makman2.", "diff": null, "created_at": "2018-02-26T08:10:14Z", "last_edited_at": "2018-02-26T08:11:47Z", "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODU0MjI0MA==", "fields": {"body": "Most of them are dependencies of html-proofer. I updated html-proofer because the version we used to use depends on nokogiri (~> 1.7)", "diff": null, "created_at": "2018-02-26T15:34:50Z", "last_edited_at": null, "author": "LenaAn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODU0MzMyMg==", "fields": {"body": "I apologize for the mistake, @Makman2 . Will keep this in mind next time.", "diff": null, "created_at": "2018-02-26T15:37:48Z", "last_edited_at": null, "author": "random-access7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODU4MjcwOA==", "fields": {"body": "Commit message:\n\nShows\nIf possible try to include labhub as tag (you can omit the ending btw): labhub: Show 'invite me'....\nTo have less chars, you can also remove \"method\", this is more or less redundant :)\nAddedd\n\"Made changes\" can and should be removed ;)\nJust to verify: Have you put the full url to the issue reference?", "diff": null, "created_at": "2018-02-26T17:33:17Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODUxMjk4NA==", "fields": {"body": "You don't need to do that. See the Git basics documentation http://api.coala.io/en/latest/Developers/Git_Basics.html rebase it \ud83d\ude04", "diff": null, "created_at": "2018-02-26T14:02:38Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODY0NjUzNQ==", "fields": {"body": "Good question, yeah some additional field like executable-name or similar could work out here. But now that it works like it works, let's file rather an issue for this feature.", "diff": null, "created_at": "2018-02-26T20:53:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODc0MTYzMw==", "fields": {"body": "@firesans , you need to follow the commit guidelines\nand squash your commits into one :)", "diff": null, "created_at": "2018-02-27T04:13:22Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODg0ODg4MA==", "fields": {"body": "@manankalra  Reverted back to the original comment. Sorry! Didn't know about that.", "diff": null, "created_at": "2018-02-27T11:50:19Z", "last_edited_at": null, "author": "Naveenaidu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODk0NzAwMQ==", "fields": {"body": "Please read our Git basics tutorial and Writing Good Commits tutorial @mbiesek", "diff": null, "created_at": "2018-02-27T16:54:05Z", "last_edited_at": null, "author": "nityeshaga", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODk2MDg2NA==", "fields": {"body": "ack b1eaf58", "diff": null, "created_at": "2018-02-27T17:34:41Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODk2MzQ2Nw==", "fields": {"body": "No need of any tests here and also remove commit body.", "diff": null, "created_at": "2018-02-27T17:42:33Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODk2NTM4Mg==", "fields": {"body": "Changes made, @Vamshi99 \ud83d\ude03", "diff": null, "created_at": "2018-02-27T17:48:35Z", "last_edited_at": null, "author": "random-access7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2OTM2OTc0Ng==", "fields": {"body": "@mbiesek  : Squash all your commits into one as because even if one commit is not according to the regex, the checks would fail.", "diff": null, "created_at": "2018-02-28T20:20:12Z", "last_edited_at": null, "author": "monsij", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2OTQzMTU4MQ==", "fields": {"body": "LGTM!", "diff": null, "created_at": "2018-03-01T00:25:59Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MDEyOTIxMw==", "fields": {"body": "Mohit if your passes fine means your work is done for now , if other bear test is not passing then it means everyone will get the same error in CI build. \ud83d\ude03", "diff": null, "created_at": "2018-03-03T08:09:23Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MDIzNTY5Nw==", "fields": {"body": "Yeah this commit shouldn't fail in CI... we have to fix that asap^^", "diff": null, "created_at": "2018-03-04T14:59:21Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MDM1NjY1MQ==", "fields": {"body": "@RaiVaibhav assertion statement will be same as both are linter bears and using LocalBearTestHelper methods.", "diff": null, "created_at": "2018-03-05T09:19:17Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MTcxOTEzMw==", "fields": {"body": "No, this is an enhancement, and needs to be done carefully.  Not rushed.\nFirst we pin the versions to safe versions, then proceed with upgrading our dependency slowly and carefully.", "diff": null, "created_at": "2018-03-09T05:40:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MTcyNTU2NA==", "fields": {"body": "first work of commit message shortlog should be runtime.txt", "diff": null, "created_at": "2018-03-09T06:28:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MjIxNjU5Nw==", "fields": {"body": "ack 768b6a9 708c8b0", "diff": null, "created_at": "2018-03-12T07:33:45Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MjIxNjcxOQ==", "fields": {"body": "ack 768b6a9 708c8b0", "diff": null, "created_at": "2018-03-12T07:34:23Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDE3NzUyMA==", "fields": {"body": "The commit guideline examples all have colons after the filenames in their shortlog.", "diff": null, "created_at": "2018-03-19T11:12:43Z", "last_edited_at": "2018-03-19T11:12:56Z", "author": "rohanrk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDE5MTc4MA==", "fields": {"body": "https://deploy-preview-486--coala-projects.netlify.com/#/projects?project=improve_lint_bear_quality looks good", "diff": null, "created_at": "2018-03-19T12:14:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDE5MzY4OA==", "fields": {"body": "You'll see it creates a nice git log, without a messy commit list full of merge commits.", "diff": null, "created_at": "2018-03-19T12:22:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDI4MDgwNA==", "fields": {"body": "@virresh Could you explain the second part of point 1 above. I am slightly confused with this one.\nAnd regarding the 2nd point,\n\n@kriti21 , from my understanding, it is always possible to determine the shortlog prefix, since always the prefix in the shortlog is the file name which has the maximum changes\nfor example if in a patch, the file PEP8Bear.py has the most changes, the shortlog prefix should be PEP8Bear ideally", "diff": null, "created_at": "2018-03-19T16:43:49Z", "last_edited_at": "2018-03-19T16:45:01Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDI4NTYzMA==", "fields": {"body": "If there is nothing to correct in the PR then there is nothing to review. So your reviews are not really valid and don't help the PR. If you want to approve of the PR without suggesting any improvements/changes then just comment with a LGTM (Looks Good To Me) and that would be much appreciated. \ud83d\ude04\ncc @lalitmee @li-boxuan", "diff": null, "created_at": "2018-03-19T16:56:03Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDk5MTgwMw==", "fields": {"body": "IMHO single commit with shortlog => definitions: Add new language definitions\nWould work quite well.", "diff": null, "created_at": "2018-03-21T15:57:39Z", "last_edited_at": "2018-03-21T15:59:15Z", "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NTc2MTg0NA==", "fields": {"body": "@li-boxuan adding the executable to the environment path is a basic requirement for many linters, if one wishes to execute them using CLI. This could happen with most of the linters. The error message submitted by coala would simply be executable not installed. Modifying it just for this special case IMO is not necessary.\nAs for the copyright issue is it necessary to use MathWord code? Can't you come up with some test cases of your own?", "diff": null, "created_at": "2018-03-23T18:37:12Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NTc3MjM5OA==", "fields": {"body": "@MacBox7 Thanks for comments!\n\nadding the executable to the environment path is a basic requirement for many linters\n\nThis case is special to me because it is not trivial to find the mlint executable. It is not documented on Matlab website (They don't even tell users that there is such an executable; they only say mlint is a function call in Matlab). I didn't know the existence of mlint executable until I saw https://github.com/Gimly/vscode-matlab/blob/master/README.md.\n\nCan't you come up with some test cases of your own?\n\nYes, sure. The reason I used official examples is that I found them pretty nice and this would be consistent with the example on https://www.mathworks.com/help/matlab/ref/mlint.html. I would write my own test cases if it's necessary (but may not be as good as official ones).", "diff": null, "created_at": "2018-03-23T19:19:23Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NTczMTQxMg==", "fields": {"body": "I've notified @GitMate; hopefully they fix it soon.", "diff": null, "created_at": "2018-03-23T16:54:57Z", "last_edited_at": "2018-03-23T16:55:34Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NzI4MTcyNg==", "fields": {"body": "@sanjeethboddi Fix the issue raised by gitmate-bot your circle build is failing because of that.", "diff": null, "created_at": "2018-03-29T15:53:55Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NzI4MjAyNQ==", "fields": {"body": "Also keep in mind fixes/closes are keywords in Github", "diff": null, "created_at": "2018-03-29T15:54:51Z", "last_edited_at": "2018-03-29T15:57:06Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NzM2MzY3NQ==", "fields": {"body": "The issue #4509 has been closed. I guess this PR can be closed too.", "diff": null, "created_at": "2018-03-29T20:33:58Z", "last_edited_at": null, "author": "susg", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NzQ5ODI0Nw==", "fields": {"body": "@refeed, good catch \ud83d\ude09. I just removed that line before your comment.", "diff": null, "created_at": "2018-03-30T10:32:21Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NzU5MzM1NA==", "fields": {"body": "IMO bandit_selected_tests might be a better name.", "diff": null, "created_at": "2018-03-30T18:41:34Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NzkzNjAwNA==", "fields": {"body": "@Makman2  can you reopen it .. I'm working on it currently.. will be sending a pr in a day or two", "diff": null, "created_at": "2018-04-02T14:04:01Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3ODE0NTU0Nw==", "fields": {"body": "@rammanoj You didn't change the rst section yet", "diff": null, "created_at": "2018-04-03T06:45:37Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3ODE5NDUwNA==", "fields": {"body": "technically git section also shouldn't require any derivation but currently it requires the files from [all] but waiting for a PR to be merged, will reference this PR there if it gets merged before this, then you can make changes. \ud83d\udc4d", "diff": null, "created_at": "2018-04-03T09:52:48Z", "last_edited_at": "2018-04-03T09:53:28Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3ODMxMDE0Nw==", "fields": {"body": "IMO generate_skip_decorator should be added, but seems that's not related to this issue.", "diff": null, "created_at": "2018-04-03T16:24:18Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTA1Nzg3Mg==", "fields": {"body": "That's why I asked whether to open another issue for that. \ud83d\ude09", "diff": null, "created_at": "2018-04-05T19:57:29Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTAwMjE4NA==", "fields": {"body": "@sangamcse You mean like keywords? Honestly, I have no idea :) But IMO this is unrelated to this issue.", "diff": null, "created_at": "2018-04-05T16:49:15Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTU5MTUzNw==", "fields": {"body": "Okay, I just looked at the default css for this theme, and I found out why we needed div or we must use ! important. The default css has div in front of everything. Sorry for catching up late.\nIn this case using div.note is okay, just need to put that csslint ignore line. /* csslint allow: overqualified-elements */. Either way we have to ignore csslint rule.", "diff": null, "created_at": "2018-04-08T23:31:05Z", "last_edited_at": "2018-04-08T23:32:55Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTUzMTczMg==", "fields": {"body": "Interesting error on Appveyor.  maybe different version of pylint there?", "diff": null, "created_at": "2018-04-08T08:35:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTc2MjU1OA==", "fields": {"body": "By highlight, @RaiVaibhav means use double back ticks around the with.", "diff": null, "created_at": "2018-04-09T14:01:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTk0MTYyOQ==", "fields": {"body": "I think we dont need the .keep file", "diff": null, "created_at": "2018-04-10T01:09:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTk0Njg5NA==", "fields": {"body": "5:30:08 PM: CommandError: Failed to render view: 'total_count'\n\nNo doubt you are aware that this is the problem atm.\n@sks444 , here is an example of the problem in distill.  It doesnt say which view caused the error.", "diff": null, "created_at": "2018-04-10T01:43:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MDM0MjA1NQ==", "fields": {"body": "Hello @kriti21, thanks for this patch!\nWhat you have here looks good to me, I'm just wondering if we need to cover more cases.\nTake a look at the documentation for string literals: Python2 and Python3.\n\nFor Python 2  u\"\"\" and ur\"\"\" are also valid prefixes for docstrings.\nUnfortunately these prefixes are case insensitive, which means R, Ur, uR and UR are also valid.\n\nCases we don't need to cover:\n\nf: F-Strings are as far as I know not allowed as docstrings. (related bugreport)\nb: Byte object literals are no string literals and thus can't be a docstring.\n\nI'm not sure if adding support for all of these cases goes beyond the scope of this PR, but it is worth discussing. What do others think?", "diff": null, "created_at": "2018-04-11T06:29:23Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MDUwMzM5Ng==", "fields": {"body": "it should pass if you make the HTML changes before the coala config changes I think?\n\nYeah, but doesn't sound good, right? At first, we are adding the bear then we are finding what changes to make.\nGoing for the multi: then. :)", "diff": null, "created_at": "2018-04-11T15:54:18Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng==", "fields": {"body": "I notice that JBoss has two linked on https://gci-leaders.netlify.com/ , but none on https://deploy-preview-148--gci-leaders.netlify.com/ .", "diff": null, "created_at": "2018-04-17T04:57:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MjAwMDcyMg==", "fields": {"body": "@kriti21 : The simplest method to implement that is using a library like GitPython, which offers a commit object making it as simple as repo.commit(<hash>) to get a commit. I suspect a large part of your implementation for first part would also be rendered redundant by it.\nAlternately, a way to implement that yourself would be calling the shell command git log -n 1 <hash> to read a lot of the details, I'm not sure which one is preferred, maybe @jayvdb should decide that. It seems currently most of the functionality is self implemented by GitCommitBear.\nIn future, please don't use pastebin etc., try to stick to git, makes it much easier to review code in it's entirety :)", "diff": null, "created_at": "2018-04-17T13:53:28Z", "last_edited_at": "2018-04-17T13:59:12Z", "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MjAxNzU1Mw==", "fields": {"body": "You have a conflict, because some whitespace was added to the args.  You will need to rebase manually.", "diff": null, "created_at": "2018-04-17T14:40:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA==", "fields": {"body": "fwiw, a part of the problem was that 92a68a2 cleared out all of the data in the deploy.\nWe dont need a special case for JBoss.  The link in GCI is old, but a head request will give us the new URL.\nThat is needed for any github/gitter URL which changes.\nThat should be a new PR which just fixes master.", "diff": null, "created_at": "2018-04-20T02:18:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzM1MjMxNQ==", "fields": {"body": "@Crphang did you check why is it empty for the first time? otherwise this should be the case with all actions\n\nI'll change the fix to localize this change within ShowAppliedPatchesActions instead.\n\n\ud83d\udc4d\nalso if you are changing it here please check that it doesn't change the behaviour of other actions instead in the process", "diff": null, "created_at": "2018-04-22T03:22:55Z", "last_edited_at": "2018-04-22T03:25:07Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzM1NTg4MA==", "fields": {"body": "@palash25 Travis builds are failing but that's unrelated to this change. That's why I add the '[skip ci]' statement.", "diff": null, "created_at": "2018-04-22T05:07:35Z", "last_edited_at": null, "author": "attilanagy", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzM1NjQ2OQ==", "fields": {"body": "@attilanagy Travis builds are broken in corobo repo, so need to add anything like skip ci", "diff": null, "created_at": "2018-04-22T05:24:29Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzM2NzcyNw==", "fields": {"body": "ack bbfb116", "diff": null, "created_at": "2018-04-22T09:27:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzMwMzAyMg==", "fields": {"body": "Problem needs to be fixed in errbot", "diff": null, "created_at": "2018-04-21T14:55:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA==", "fields": {"body": "#551 (comment) kind of comments can be disabled by turning on travis-buddy only if the tests fail.", "diff": null, "created_at": "2018-04-22T20:56:04Z", "last_edited_at": null, "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTE4NDk0MQ==", "fields": {"body": "Click on the build link for Circle CI and click on the rerun job button.\nSimilarly for other CIs", "diff": null, "created_at": "2018-04-28T15:38:37Z", "last_edited_at": null, "author": "IpshitaC", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM0MDAzMg==", "fields": {"body": "go ahead @pareksha :) i'd do it but i don't have time atm unfortunately", "diff": null, "created_at": "2018-04-30T08:36:42Z", "last_edited_at": "2018-04-30T08:54:36Z", "author": "biscuitsnake", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM0OTM4MQ==", "fields": {"body": "No you are not following the guidelines\nThis is your commit message Spelling mistake correct\nNow read this http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nDo you think it follows the guidelines? This is the reason why travis is failing too.\nGive it another try if you still can't figure it out I'll tell you what to do. \ud83d\udc4d", "diff": null, "created_at": "2018-04-30T09:24:04Z", "last_edited_at": "2018-04-30T09:24:34Z", "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM1MjY3NQ==", "fields": {"body": "No, change your commit message not your PR title.\nCommit message is the one you enter when you do git commit -m \"Spelling mistake correct\"", "diff": null, "created_at": "2018-04-30T09:41:04Z", "last_edited_at": "2018-04-30T09:41:19Z", "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM1NTQyNw==", "fields": {"body": "You clearly have not read the guides and jumped to the issue straight. Go and checkout the guides and the git tutorial.", "diff": null, "created_at": "2018-04-30T09:55:07Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkxMzE0Mg==", "fields": {"body": "But what's the aim of doing that? It doesn't seem to save API hits.\n\nIt does save API hits, and it is also much quicker.  The user should be able to load the specified repositories with only a few API hits used.\nIt is also stored in gh-pages, and then used by community repo at https://github.com/coala/community/blob/master/activity/scraper.py#L144", "diff": null, "created_at": "2018-05-02T09:07:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkyNTc0MA==", "fields": {"body": ".. but closed issues/prs is empty ..\n\nI see that https://deploy-preview-18--coala-gh-board.netlify.com/issues.json does include closed & merged items , so the graphql isnt the problem.\nHowever there is only 1577 items in the JSON.  The number should be much higher.\nAccording to https://developer.github.com/v4/guides/resource-limitations/ , the last: 100 is as high as it goes, and it means multiple GraphQL requests will be needed per repo, or the pre-fetcher may need to revert to using the REST API for the larger repos.\nWhat is very nice about the GraphQL approach is that it works much better on PRs, which do not have a token.", "diff": null, "created_at": "2018-05-02T09:55:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkzNjI2NQ==", "fields": {"body": "ya all those are appropriate additions.", "diff": null, "created_at": "2018-05-02T10:41:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NjUxMjg2Ng==", "fields": {"body": "Then issues.json is not storing them in the correct format, and/or the loader is not unserializing them correctly into the user's browser local storage.\n\nTo see the difference, run the old fetch-issues process locally on your machine, and see the format that issues.json needs to be for the unserializer to load it correctly.", "diff": null, "created_at": "2018-05-04T06:08:22Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NjUyODExNQ==", "fields": {"body": "I've put it as a separate issue as loading the last 100 issues is good enough for now, to get the build working again.\n\nThat's indeed a great idea and we definitely should do that but I don't think that's urgent. Actually I have fixed my script and it is able to fetch all issues (by using cursor in GraphQL) now. I would update this PR later.\n@jayvdb I'm afraid I may not be able to solve #23 during the bonding period. Would it be OK if I put that into coding phase?", "diff": null, "created_at": "2018-05-04T07:46:57Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MTc5OA==", "fields": {"body": "Is this file linted using .eslint in the project? because the last time I made this it isn't linted automatically, and it made me merge code with completely different style from the rest of the project.", "diff": null, "created_at": "2018-05-05T02:03:37Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjMyMw==", "fields": {"body": "I'm willing to merge without updating the lifecycle method in this PR. There's no deprecation warning in 16.3, but the next version will.", "diff": null, "created_at": "2018-05-05T02:13:56Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ==", "fields": {"body": "Just run it manually for now, it can come later in another PR after this one.\n@jayvdb different folder, script isn't included ;)", "diff": null, "created_at": "2018-05-05T02:19:53Z", "last_edited_at": "2018-05-05T02:20:47Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3ODkzNA==", "fields": {"body": "sorry I had forgotten about this one ;-)", "diff": null, "created_at": "2018-05-05T04:46:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NzA5ODQ4Mg==", "fields": {"body": "Thanks @ksdme\nThe shortlog was exceeding character limit, so replaced support with add \ud83d\ude05", "diff": null, "created_at": "2018-05-07T15:15:09Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NzE3NTEyNA==", "fields": {"body": "@PrajwalM2212 the issue reported by GitMate bot has been already fixed.", "diff": null, "created_at": "2018-05-07T19:24:50Z", "last_edited_at": null, "author": "attilanagy", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NzYyMjY4OQ==", "fields": {"body": "I would also recommend you to update your local pycodestyle version to 2.4 and then run coala after flushing the cache, you will then get to see those errors that cause failure on ci\n(Also note that many rules that were added to ignore list in #5381 were removed later, and are not present in the current .coafile. )\nSo after rebasing run coala locally and lint your code as per the new rules.", "diff": null, "created_at": "2018-05-09T05:17:36Z", "last_edited_at": "2018-05-09T05:18:05Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Nzc3MDEzMw==", "fields": {"body": "I have tested yet, but it looks good.\n(edit) I have not tested yet, but it looks good.", "diff": null, "created_at": "2018-05-09T15:03:54Z", "last_edited_at": "2018-05-11T11:43:00Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Nzg3NzIxNQ==", "fields": {"body": "Might want to look at https://pypi.org/project/automergetool/ to provide FIXES, or raise that as a separate issue after this is merged.", "diff": null, "created_at": "2018-05-09T21:12:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Nzk4MTQwMg==", "fields": {"body": "using @staticmethod without self like CPPCheckBear does\n\n@ishanSrt its actually the other way around. CPPCheckBear doesn't use @staticmethod but uses self", "diff": null, "created_at": "2018-05-10T07:56:45Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4ODI3NTE1MA==", "fields": {"body": "ack for the overall PR  - but As we spoke earlier - the blog seems to be down.\nThe Blog seems to be down due to technical issues but that should be up in a day or two\n@jayvdb - can we merge this or wait for the blog to get back up?", "diff": null, "created_at": "2018-05-11T06:39:29Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4ODM1OTY5MA==", "fields": {"body": "As mentioned on gitter, please beg for more reviews from the other people who have pending patches related to ignore comments. i.e. bond with your peers in the community ;-)", "diff": null, "created_at": "2018-05-11T13:13:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4ODY0MDc1OA==", "fields": {"body": "Your issue isnt a bug, so the commit message should be Closes ... instead of Fixes ...\nAlso you will need to rebase your local branch (or sync your local branch with this PR's rebased branch).\nOther than that, I think this is good enough.\nThere will be more improvements, but this is enough to resolve the current issue.", "diff": null, "created_at": "2018-05-13T16:56:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDA5NjMxMQ==", "fields": {"body": "I agree that it is better to reuse the code in python language server. I think we could refer to the arch of python language server.\nRunning coala as a subprocess is a temporary solution. We are investigating call coala from python while it needs some changes from coala side.", "diff": null, "created_at": "2018-05-18T05:11:28Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDUwMTM5OQ==", "fields": {"body": "ping @Anubhav-Bhargava please read the commit guidelines http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html your commit message doesn't follow them.\nAlso I think it would be best if you drop the description and only keep the shortlog and the issue link.\n\nThe commit message says adds .vscode, this should also indicate that .vscode is a directory.\n\n@ksdme I don't think that there is a file named .vscode so I'm not sure how that would cause confusing its always a directory.", "diff": null, "created_at": "2018-05-20T18:27:24Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDY2MjUzMg==", "fields": {"body": "@blazeu What about saving two files, one is full issues.json and the other one called recent-issues.json which only has recent (e.g. a month) issues/prs/reviews? The full issues.json is needed by coala/community and we only load the smaller recent-issues.json to the frontend.", "diff": null, "created_at": "2018-05-21T14:02:29Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDk5NDI1NQ==", "fields": {"body": "/LGTM\nThanks for the detail!", "diff": null, "created_at": "2018-05-22T13:41:17Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTIyNzkzMg==", "fields": {"body": "On Wed, 23 May 2018 at 07:31, Palash Nigam ***@***.***> wrote:\n ping @dorothykiz1 <https://github.com/dorothykiz1>\n\n \u2014\n You are receiving this because you were mentioned.\n\n\n Reply to this email directly, view it on GitHub\n <#5411 (comment)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/AdYOAGxrW5kRddy-VBGCOZ_ZVLR9Da2Iks5t1OYTgaJpZM4TeaV0>\n .\n\nSure will work on it . Thank you\n-- \nRegards, Dorothy", "diff": null, "created_at": "2018-05-23T05:48:00Z", "last_edited_at": null, "author": "dorothykiz1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTM2ODYwOA==", "fields": {"body": "Ok how about we limit those concurrency?\nUsing something like https://github.com/sindresorhus/p-all , or see the related modules there, might be useful.", "diff": null, "created_at": "2018-05-23T14:30:08Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTQxMzgzNg==", "fields": {"body": "Looks good to me @fatma-mohamed \ud83d\udc4d", "diff": null, "created_at": "2018-05-23T16:32:52Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjUyMTU3MA==", "fields": {"body": "However, I heartily apologise if you felt I'm talking about the commit message.\n\nOh I didn't realise that you were only talking about file changes. But since you approved it I thought the you approved the commit message too.\nWe only ack PRs when they are perfect and ready to merge for pointing out things separately we resort to reviews and comments.\nSo PRs should only be approved once they are ready to be merged and that is usually done by the maintainers. @utkarsh2102 \ud83d\ude04", "diff": null, "created_at": "2018-05-28T13:03:27Z", "last_edited_at": "2018-05-28T13:04:29Z", "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjY3MTg2NQ==", "fields": {"body": "@sanshay, you should at least take a look at each comments on your PR.\nThe changes I requested should be done using git commit --amend which @palash25 has mentioned in #2506 (comment).\nAny way, you have made 2 commits here. So you need to squash your commits into one. After that your PR will be ready to merge. \ud83d\ude09", "diff": null, "created_at": "2018-05-29T06:56:18Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjY4Mzk4MA==", "fields": {"body": "No, why another commit? That would make it 3 commits, and only one is acceptable. Please follow the steps, I suggested with git and describe the problems you are facing.", "diff": null, "created_at": "2018-05-29T07:47:07Z", "last_edited_at": "2018-05-29T07:48:26Z", "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjYzMzY4NA==", "fields": {"body": "i am working on this issue\n\nYou can't just start working on an issue that is being worked on by someone else. That is stealing an issue and that way your PR will never be merged.\nAlso don't comment on the PR comment on the issue thread and ask whether you can be assigned to this since there is already a PR open for it.\nYou already have newcomer PRs if I'm not wrong and newcomers can only work on 1 newcomer issue so instead of grabbing more easy issues get your previous PRs merged and look for more difficult issues.\n@dorothykiz1 still working on this? This isn't going to take much time and I think that you are stuck so please ask for help on gitter regarding this PR this way we can merge it faster.", "diff": null, "created_at": "2018-05-29T02:13:42Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjgwMDk2Mg==", "fields": {"body": "@palash25 i had no way of editing the other after working on my reviews  , thats why i created this, let me close the former", "diff": null, "created_at": "2018-05-29T14:39:05Z", "last_edited_at": null, "author": "dorothykiz1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjgwNDEwOA==", "fields": {"body": "You did have a way of editing the last one. Its a simple command called git commit --amend\nIf you had referred to the docs or ask for help on gitter instead of deciding it for yourself (that it can't be edited) then you would have learnt a new command.\nYou better learn how to amend your commits because we have to do it for every PR and if you keep making multiple PRs for every little amend a maintainer will have to ban you from contributing till you learn git.\nThis has happened to a newcomer before.", "diff": null, "created_at": "2018-05-29T14:47:36Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjgwNDc5NQ==", "fields": {"body": "Thank You", "diff": null, "created_at": "2018-05-29T14:49:19Z", "last_edited_at": null, "author": "dorothykiz1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MzY3ODY4OQ==", "fields": {"body": "You should never close a pull request. You should just get help fixing this one. I also see that there are a few commits in this branch. When you fixed your commit message you should have amended the commit. After amending the commit then you force push it. (see the follow up section in the coala git tutorial) As it is maybe you need to squash them? (Not sure, I'm still learning.)\nA great place to get help is here https://gitter.im/coala/coala - there are a lot of active contributors who monitor that chat.", "diff": null, "created_at": "2018-05-31T21:01:07Z", "last_edited_at": null, "author": "jsecrest", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5Mzc0ODM1MQ==", "fields": {"body": "As @jsecrest points out, you need to squash your commit messages and then do a force push.", "diff": null, "created_at": "2018-06-01T03:34:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDA1MjA4MQ==", "fields": {"body": "@RJ722 yea, after the change, it is weird :).\nThe fix itself looks good to me.\nEdit:\nI think we can keep http://github.com/summerofcode/gsoc-prep-tasks . It is already redirected. So, wasn't an Issue.", "diff": null, "created_at": "2018-06-02T02:46:04Z", "last_edited_at": "2018-06-02T02:50:34Z", "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDA4MTgxNg==", "fields": {"body": "Don't we want a modified version that tells user of the new newcomer process? That is select an issue and ask a maintainer for assignment. And then maintainer will invite the newcomer to the newcomer team and then assign the issue.", "diff": null, "created_at": "2018-06-02T11:55:03Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDE1NjY3OQ==", "fields": {"body": "@Makman2 \ud83d\ude05 I think I have taken care of everything this time, hopefully.", "diff": null, "created_at": "2018-06-03T11:48:28Z", "last_edited_at": null, "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDcyMTc1NQ==", "fields": {"body": "I found that the test file isn't properly linted.\nI think we should add that in #24 along with the script directory.", "diff": null, "created_at": "2018-06-05T14:05:10Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDczMDM2Mg==", "fields": {"body": "@li-boxuan seems we never had a package-lock.json committed. I would do that in another issue, that one would also include to verify that package-lock.json has the right content^^", "diff": null, "created_at": "2018-06-05T14:27:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NTM2MTcwOQ==", "fields": {"body": "Okay, I thought it was ready for review \ud83d\ude05", "diff": null, "created_at": "2018-06-07T09:49:40Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NTk2Mzg4Nw==", "fields": {"body": "Gitmate testing ... ;-)", "diff": null, "created_at": "2018-06-09T12:01:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NTk3MjA1Mg==", "fields": {"body": "@CCInCharge , looking good.  I think you need to update one of the tests.", "diff": null, "created_at": "2018-06-09T14:08:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NTkyODY0Mg==", "fields": {"body": "coala/coala-bears#2525 is the same change for bears repo.", "diff": null, "created_at": "2018-06-09T01:11:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NjAwODAzNg==", "fields": {"body": "This obviously should not be merged until the things in this document have been merged, like --debug-bears.", "diff": null, "created_at": "2018-06-10T00:08:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NjY5ODM4Mg==", "fields": {"body": "@meetmangukiya I can't work on this right now. Can you unassign me on this and close the PR? @nvzard can use this code in his PR.", "diff": null, "created_at": "2018-06-12T19:01:11Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5Njg3MzQyNQ==", "fields": {"body": "Please do not change the default in this PR.\nThat is a separate issue, and that issue requires discussion.", "diff": null, "created_at": "2018-06-13T09:23:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NzUxNzU5OA==", "fields": {"body": "@gautam1858 Pls, read the  commit guidelines carefully. Your shortlog, and your commit message do not correspond to the format specified.\nChecklist specifically tells you to go through the commit guidelines, but you seem to have skipped that part altogether.\nYou're commit message should be something like this:\nReview.rst: Typo Github->GitHub\nCloses #5512\nThis format makes sure, that the issue is closed automatically when the pull request is merged. Filename is important because when you see your repository, it displays you're last commit in that directory, and it's much easier to know where the change was made when the filename is specified in the commit shortlog.\nPlease update your PR, and DO NOT FORGET TO SQUASH YOU'RE COMMITS into one. If you have trouble squashing commits, let me know.", "diff": null, "created_at": "2018-06-15T05:28:20Z", "last_edited_at": "2018-06-15T05:29:05Z", "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NzY2MjM5Nw==", "fields": {"body": "There should be a new line between the shortlog and body and that between the body and issue reference , right ?\n@sangamcse", "diff": null, "created_at": "2018-06-15T15:45:35Z", "last_edited_at": "2018-06-15T15:55:05Z", "author": "SubbulakshmiRS", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5Nzg0OTEzMg==", "fields": {"body": "max_file_length defines a rule for a hard physical line count maximum.\nThe LineCountBear would implement this taste by detecting files which exceed it, and producing an error.  That bear is a detection bear, not a fixing/suggestion bear.\nWe do not have any bear which attempts to fix files which exceed a maximum line count.  That would be difficult.\nWe do not have any bear which attempts to fix files which have insufficient line count.  However this is more feasible to implement.  We could have a bear which automatically fixed a minimum line count for Python, by automatically adding a dummy docstring.  It would also be possible to fix it for any scripting language by adding a 'hashbang', but that would be dumb as the otherwise empty file probably isn't runnable.", "diff": null, "created_at": "2018-06-17T01:52:16Z", "last_edited_at": "2018-06-17T01:52:51Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODA0Mjc4Nw==", "fields": {"body": "We have another bug which you have uncovered.\nI'll get that fixed.\n#5541", "diff": null, "created_at": "2018-06-18T12:49:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODQ5MzA5OQ==", "fields": {"body": "@li-boxuan Travis runs the build on the result of a merge between your branch and the branch it's merging into if possible. If you update your branch to be in-sync with master, you'll see the python manage.py test.\nhttps://github.com/coala/community/blame/d8e760bf8abd555ef643652bdcdf652fda5575ee/.ci/build.sh#L18\nMight help you debug the failing build a little more.", "diff": null, "created_at": "2018-06-19T18:08:43Z", "last_edited_at": "2018-06-19T18:09:20Z", "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODcwOTYxNg==", "fields": {"body": ",one disadvantage it that pytest-pofiling display only first 20 profiled data on the basis of cumulative time\n\nsofixit", "diff": null, "created_at": "2018-06-20T10:58:16Z", "last_edited_at": "2018-06-20T10:59:25Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ==", "fields": {"body": "Any opinion on if we should should have a wrapped link - If you believe someone is violating the code of conduct <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>__ to maintain line length?", "diff": null, "created_at": "2018-06-21T07:12:04Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE0NTQxOA==", "fields": {"body": "Hiya @shikharvaish28, thanks for reviewing.\nWe now have a template for creating the .gitignore, at https://gitlab.com/coala/mobans/blob/master/templates/gitignore.jj2 .\nIt pulls in a bunch of rules from https://github.com/github/gitignore .\nThe same template is being used on all of our repos, so that they are always in sync, and being updated whenever new rules are added to https://github.com/github/gitignore .\nThis also means that individual additions in each repo are no longer desirable; instead an addition needs to be proposed at https://github.com/github/gitignore , where they will be reviewed carefully and will benefit more people; when accepted, the change will flow through to our repos.", "diff": null, "created_at": "2018-06-21T15:31:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE0ODgxNQ==", "fields": {"body": "This PR has a duplicate here #5528\nAlso this work wasn't assigned to @hemanthsavasere  see the issue link #5512\nSomeone has already asked for assignment unlike the other two newcomers. @jayvdb maybe we should assign this to this newcomer #5512 (comment) and close the two PRs since they didn't ask for assignement", "diff": null, "created_at": "2018-06-21T15:41:31Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE2NTc0NA==", "fields": {"body": "IGitt is doing its work as it is supposed to but it is making a second trial request because the token is invalid. This portion is handled by backoff https://pypi.org/project/backoff/ which makes the request function retry until some condition is met.", "diff": null, "created_at": "2018-06-21T16:32:37Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE3MjQzNg==", "fields": {"body": "@nvzard , IGitt is causing this failure.  If you cant disable the 'feature' of IGitt causing this failure, then that is a problem in IGitt.  And please remove 'fix' from this commit message.  It hasnt fixed anything.  It has only obscured the problem, and it will bite us again another day.  This is a workaround at best. :P  A very useful workaround to get the builds working again, but we still need a solution to the problem.", "diff": null, "created_at": "2018-06-21T16:55:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg==", "fields": {"body": "See follow up notice at #2539 (comment)\nThe objective of this issue / PR is to move the apt installs to travis' managed list.", "diff": null, "created_at": "2018-06-22T05:55:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTYyOTU0NQ==", "fields": {"body": "Hey! I think your code is quite satisfying but your commit message is incorrect based on the community commit guidelines. So I suggest you to please change your commit message.\nYou can refer to http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html for correcting your commit. Also use Fixes/Fix instead of closes because you are dealing with a bug issue.", "diff": null, "created_at": "2018-06-23T04:19:42Z", "last_edited_at": null, "author": "chhabrabhishek", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTczMTEzOQ==", "fields": {"body": "@kriti21\nIf nothing else, then the first point that I'd question is why does the assertion in GitCommitBear get a 'HEAD commit information'\nwhile you are checking for the CommitResult Object in the VCSCommitBearTests\nI know that you are using the same function of self.run_uut which was meant to only return messages,\nBut checking if the hidden result was generated or not is of no use in the GitCommitBear, either don't check it at all, (using some approach as described in my previous comment) or check the whole commit object like what would be done in the VCSCommitResult (both of them should be done imo, i.e don't check for the hidden results in the existing tests, so they won't change, and make another class to check for the hidden results)\nAs for the main logic, I'd recommended previously as well to have a look over generators,\nThe for loop that I had written as an example was simply to illustrate the point why the tests weren't being executed, I expected you to read up a little more on that and use the appropriate things\nWhat would be apt would be using a yield from IMO\nI hope I haven't got things wrong here and am clearer now \ud83d\ude05", "diff": null, "created_at": "2018-06-24T05:39:53Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMTA4NDU5NQ==", "fields": {"body": "@NiklasMM Noticed one of my mentor's name is not here \ud83d\ude22 (yours \ud83d\ude1b )\nAdding the same with another commit.", "diff": null, "created_at": "2017-05-12T14:01:04Z", "last_edited_at": null, "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMTI2MjA0NQ==", "fields": {"body": "Can be closed, since this PR is superseded by the merged PR #4181", "diff": null, "created_at": "2017-05-13T17:23:09Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMTkxNDQ4MA==", "fields": {"body": "so, ideally, we need to have these in the default str argument of pycodestyle, @shreyans800755 can you open an issue?", "diff": null, "created_at": "2017-05-16T21:01:57Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMjI0NzEwMw==", "fields": {"body": "@SanketDG already filed ;) --> #1739", "diff": null, "created_at": "2017-05-17T22:16:42Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMzIxMTUwOA==", "fields": {"body": "I implemented your suggestions @Makman2.\nI have kept the EoF-State in modified/original currently, but we can still discuss how to deal with it.", "diff": null, "created_at": "2017-05-22T20:29:57Z", "last_edited_at": null, "author": "mrtes", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMzU2OTY0NQ==", "fields": {"body": "unack 806f52c", "diff": null, "created_at": "2017-05-23T23:52:19Z", "last_edited_at": null, "author": "underyx", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMzc4MDA2NQ==", "fields": {"body": "Almost perfect, but the problem is in the commit message. Use Closes instead of Fixes please \ud83d\udc4d", "diff": null, "created_at": "2017-05-24T16:35:36Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMzk3NzQ2NQ==", "fields": {"body": "Note that with pytest 3.1 the usage of assertRaisesRegex generates a deprecation warning. Therefore, I've created #4276, which replaces assertRaisesRegex by pytest.raises.", "diff": null, "created_at": "2017-05-25T10:25:47Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMzkxNjk2MQ==", "fields": {"body": "That's all I got! Thanks for bearing with me throughout this learning session for the both of us \ud83d\ude43", "diff": null, "created_at": "2017-05-25T04:06:27Z", "last_edited_at": null, "author": "underyx", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNDYwNDU5Mg==", "fields": {"body": "@netman92 please rebase in order to get past the problems of #4277", "diff": null, "created_at": "2017-05-29T08:30:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNDkyOTI5NA==", "fields": {"body": "ack 157ae44", "diff": null, "created_at": "2017-05-30T16:12:57Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTAyNjkzNQ==", "fields": {"body": "Every filter we put into the same package where you define your main filter class handling everything can be autodetected maybe. Just an example:\n# don't use star imports! I just do it because of simplicity!\nfrom coalib.parsing.filters import *\n\n\ndef find_filters():\n    for cls in dir():\n        # Just an idea how we can identify filters using classes (I'm always using classes it seems...)\n        if issubclass(cls, Filter):\n            yield cls\n\nclass Filter:\n    all_filters = set(find_filters) # <-- I know this needs to be a dict, but I hope you get the idea.\nActually when I'm thinking of it, this is quite difficult, nvm.", "diff": null, "created_at": "2017-05-30T22:28:10Z", "last_edited_at": "2017-05-30T22:28:22Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTAyODAwNw==", "fields": {"body": "@shreyans800755 no really let's make it afterwards with a separate issue. This takes too much time in the first iteration. Don't want to drag you away from the challenge, but this is really another step. One by one :)", "diff": null, "created_at": "2017-05-30T22:34:03Z", "last_edited_at": "2017-05-30T22:34:42Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTM5MDU0OQ==", "fields": {"body": "Even the Quotesbear patch is different... some of them are double and some of them are single. It seems like QuoteBear is still buggy, do you want me to revert 51d79e4 ? @Udayan12167 ? This is invalid, please ignore", "diff": null, "created_at": "2017-06-01T05:09:52Z", "last_edited_at": "2017-06-02T09:27:52Z", "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTU5NjY4MA==", "fields": {"body": "@userzimmermann, indeed. I must have overlooked it ;)", "diff": null, "created_at": "2017-06-01T19:32:04Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTU5NzY3OQ==", "fields": {"body": "@userzimmermann, @jayvdb I hope that the commit body is fine now.", "diff": null, "created_at": "2017-06-01T19:36:19Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTU5ODY5Mw==", "fields": {"body": "Should I update the pytest version in test-requirements.txt as well?", "diff": null, "created_at": "2017-06-01T19:38:31Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTc0MTc0Ng==", "fields": {"body": "i think that italicizing it may be a little overkill. however, me and my student had a better idea: checkboxes. what do you think? https://github.com/coala/projects/blob/master/data/projects/coala_cli.md check here and let me know your thoughts", "diff": null, "created_at": "2017-06-02T09:47:15Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNjQ1MTk1NA==", "fields": {"body": "arrrghh. I'll do it in the evening", "diff": null, "created_at": "2017-06-06T10:57:36Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNjUwNTg1Nw==", "fields": {"body": "@AsnelChristian Why is just coala no enough in your opinion btw?\nOtherwise coalaCorrect would also sound nice IMO :)\ncc @coala/aspects-developers", "diff": null, "created_at": "2017-06-06T14:35:46Z", "last_edited_at": "2017-06-06T14:36:56Z", "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNjYxOTM4NQ==", "fields": {"body": "Okay that  makes sense. Thx for your answer @Makman2", "diff": null, "created_at": "2017-06-06T21:14:37Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNjc2MzczNw==", "fields": {"body": "We need an issue for StyleLintBear problem (725a617) as that is a user facing warning.\nAnd it looks like you've now hit the exact same \"Circle - only\" bug that @yash-nisar has been struggling with on .", "diff": null, "created_at": "2017-06-07T11:10:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNjcwNzg0Nw==", "fields": {"body": "You have three commits on https://github.com/coala/coala/pull/4063/commits\nWe want one.\nRead all the messages you have received above on this Pull Request.\nIf you cant understand them, come and chat for a real human to guide you.\nOr, close this PR because we will NOT accept three commits for a one line change.\nNewcomer issues are part of our process, so newcomers can learn to use git properly, otherwise they are wasting our time.", "diff": null, "created_at": "2017-06-07T07:14:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNjgxOTg3NQ==", "fields": {"body": "ack eacd302", "diff": null, "created_at": "2017-06-07T14:52:52Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNjkwMDYwNg==", "fields": {"body": "oops didnt notice this, but we use Fixes instead of Closes for  type/bug", "diff": null, "created_at": "2017-06-07T19:31:11Z", "last_edited_at": "2017-06-07T19:31:28Z", "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNjkwNjUyOA==", "fields": {"body": "@jayvdb @yash-nisar That error while formatting arguments ... problem as pasted in #1819 (comment) and also happening in #1575 originates from Python's internal typing._Optional.__getitem__ calling typing._type_check\nOnly strange that this check is only failing on CircleCI o.O Maybe there was a bug that was fixed in some Python micro version release, which is not available in CircleCI... Or can we chose the exact Python versions there?\ncc @sils @Makman2 @AbdealiJK", "diff": null, "created_at": "2017-06-07T19:54:29Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNzA0ODk2OA==", "fields": {"body": "@sims1253 Hey, this PR remains unmerged and now there are conflicts. Seems like a lot of bot energy for such a small PR ...", "diff": null, "created_at": "2017-06-08T09:23:31Z", "last_edited_at": null, "author": "LappleApple", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNzE3NjEzMQ==", "fields": {"body": "@LappleApple This is good training for the bot's fitness...", "diff": null, "created_at": "2017-06-08T17:43:07Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNzYyODQ4Ng==", "fields": {"body": "@userzimmermann sure they will! Thanks man!", "diff": null, "created_at": "2017-06-11T13:15:31Z", "last_edited_at": null, "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNzcxNjM4OQ==", "fields": {"body": "@cRAN-cg please do a git commit --amend with no changes and then a force push, this will retrigger the CI; if it still doesn't appear ping me again and I'll look through the logs if we have any bug connected to this.", "diff": null, "created_at": "2017-06-12T07:56:17Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNzg0MDc0Nw==", "fields": {"body": "I've checked the custom setup.py commands docs, and it uses sphinx-apidoc -f which forces overwriting.  But that is quite unnecessary anyway, as the docs/API area is not cached between CI builds and it isnt generated in any earlier steps of the CI build, so docs/API is empty each CI build when (the next line) python setup.py docs is executed. (but even if it isnt, the docs command will clean it, so the rm -rf docs/API is absolutely useless, unless there is a bug in sphinx-autodoc's -f, which we should fix upstream.", "diff": null, "created_at": "2017-06-12T16:21:28Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNzg4ODA4MQ==", "fields": {"body": "finally, @jayvdb and @userzimmermann thx for reviewing this!", "diff": null, "created_at": "2017-06-12T19:02:32Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNzg5NjY1OQ==", "fields": {"body": "great! \ud83d\udc4d", "diff": null, "created_at": "2017-06-12T19:36:52Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNzgxOTY2MA==", "fields": {"body": "Unfortunately, I don't get notified when you push commits. Can you please ping me when you're done with the changes?", "diff": null, "created_at": "2017-06-12T15:12:02Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNzk1MDQxNg==", "fields": {"body": "There are a few holes in running pytest locally, which are being tracked on #4335", "diff": null, "created_at": "2017-06-12T22:20:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwODA0MDQxNA==", "fields": {"body": "Nice improvement @userzimmermann !", "diff": null, "created_at": "2017-06-13T08:09:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwODAzNDY4Mw==", "fields": {"body": "Nice improvement @userzimmermann !", "diff": null, "created_at": "2017-06-13T07:44:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwODEyNDYxMg==", "fields": {"body": "The list is not in alphabetical order any more :/ Somehow the old commit got in again :/", "diff": null, "created_at": "2017-06-13T13:58:24Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwODcyMDU3OA==", "fields": {"body": "@userzimmermann Maybe you can reference #1554 (I can't change the version in our title to 1.6.2 since the issue has been filed by cobot) in your commit ?", "diff": null, "created_at": "2017-06-15T12:51:54Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwODg5MTYxOQ==", "fields": {"body": "We should have a setting to expand one-liners or not. Actually I prefer not using one-liners, because the preceding \"\"\" look quite ugly imo and don't make the docstring look like one :3\nEspecially as this bear shall once work on the coala repo, we need a switch for that \ud83d\udc4d", "diff": null, "created_at": "2017-06-15T23:22:54Z", "last_edited_at": "2017-06-15T23:23:10Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwODgxNTkxMw==", "fields": {"body": "Hi, I was trying this bear few days ago. These two changes were a problematic:\n|  27|  27| def save(data, **kw):\n|  28|    |-    sql = \"\"\"INSERT INTO data (order_id, invoice_link, ...)\n|  29|    |-    VALUES (%(order_id)s, %(invoice_link)s, ...)\"\"\"\n|    |  28|+    sql = \"\"\"\n|    |  29|+    sql = INSERT INTO failed_exponea (order_id, invoice_link, ...)\n|    |  30|+    sql =  (%(order_id)s, %(invoice_link)s, ...)\n|    |  31|+    sql = \"\"\"\n\nand also one liners:\n|  46|    |-    \"\"\"Endpoints for partner handling.\"\"\"\n|    |  46|+    \"\"\"\n|    |  47|+    Endpoints for partner handling.\n|    |  48|+    \"\"\"", "diff": null, "created_at": "2017-06-15T17:40:15Z", "last_edited_at": null, "author": "lucas03", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwODgyOTM1Nw==", "fields": {"body": "@lucas03 This is still WIP. one-liners as accepted in PEP-257 are not being accepted by DocStyleBear yet. Althought Im not sure about the 1st case its a fancy string which is right now also not supported. Look\ncoala/coala#4291", "diff": null, "created_at": "2017-06-15T18:31:50Z", "last_edited_at": "2017-06-15T18:32:13Z", "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwOTA0OTQ4NA==", "fields": {"body": "@yash-nisar Regarding #1819 (comment) ... Very simply ;)\n> for /f \"usebackq\" %P in (`python -c \"print(__import__('sys').prefix)\"`) do (\n      grep -Rn \"Optional\\[t\\] requires a single type.\" %P)\n\nC:\\Users\\Zimmermann\\Miniconda3\\envs\\coala/Lib/typing.py:786:        arg = _type_check(arg, \"Optional[t] requires a single type.\")", "diff": null, "created_at": "2017-06-16T15:00:15Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwOTI3OTA1OQ==", "fields": {"body": "Please create new issues for all of these and more.\nThere are lots of situations and 'styles' that this bear doesnt yet cover.", "diff": null, "created_at": "2017-06-18T13:53:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwOTI4NzQzNA==", "fields": {"body": "Hey, it seems based on your recent comment on #1829 . Unneeded needs to be changed to unused. Which is contrary to your comment on #1844. Hence, based on recent comment. Again making changes. I hope I have interpreted it correct.", "diff": null, "created_at": "2017-06-18T16:21:01Z", "last_edited_at": null, "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwOTMwNDAwNw==", "fields": {"body": "@prachi1210 Try running coala locally that might help in resolving the issue \ud83d\ude03", "diff": null, "created_at": "2017-06-18T21:26:24Z", "last_edited_at": null, "author": "Monal5031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwOTQwODE4OA==", "fields": {"body": "@jayvdb @Makman2 @userzimmermann @lucas03 cool created issues...\n#1856 Adding a setting for the expansion of one-liners\n#4291 Handling fancy strings.\nWe can continue discussions there. If you find any issues. feel free to ping me up \ud83d\ude04", "diff": null, "created_at": "2017-06-19T11:03:52Z", "last_edited_at": null, "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwOTQxMjkyMg==", "fields": {"body": "@IpshitaC We've followed that convention here. From the docs :\n\nWritten in imperative present tense (i.e. Add something, not Adding something or Added something).\n\nThe sentence below is already written in imperative mood.\nReplace all instances of check_validity(..,valid=false)\nwith check_invalidity(..)", "diff": null, "created_at": "2017-06-19T11:27:39Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwOTgxMDM2Nw==", "fields": {"body": "@meetmangukiya Can you squash the commit? I think you don't need 3 of them just for a single feature added. Also, please add the git library to the requirements so it'll be installed.", "diff": null, "created_at": "2017-06-20T16:15:32Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDA1NTM4Nw==", "fields": {"body": "@RJ722 done", "diff": null, "created_at": "2017-06-21T11:52:57Z", "last_edited_at": null, "author": "prachi1210", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDIwNjg5Ng==", "fields": {"body": "You have something in mind that might change in future?\n\nI don't have anything in mind at the moment. But with the changes in core design through aspects and all, I though there be some change in future for filters too. Just thinking out loud, and not much consolidated idea.", "diff": null, "created_at": "2017-06-21T21:12:29Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDU4MDU2Nw==", "fields": {"body": "Also I have for now included fancy string test for python, for other languages teach me senpai xD \ud83d\ude1d\n\nNo, your're the one getting paid for this. Changes without proper testing are not acceptable and we're not here to spoon-feed them to you. Please create explicit test cases in DocumentationExtractionTest that make it very clear, what we expect to happen here, just adding this one string variable ist not making anything clear e.g. for someone just looking at documentation extraction.\nI don't understand, why you don't make the changes at the first position where the begin marker is found, as I described here", "diff": null, "created_at": "2017-06-23T06:08:36Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDU5MjgzNQ==", "fields": {"body": "And hence their assignment of strings are always in form abc=\"xyz\". leaving no space for using those explicit markers for assignment. This is the case only in python. Although I was just asking if there's any which i might have missed.\n\nNo, this seems right. Python seems to be the weirdo in that regard ;)", "diff": null, "created_at": "2017-06-23T07:25:55Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDUyNjg3OA==", "fields": {"body": "ImportError while importing test module '/home/ubuntu/coala/tests/testing/LocalBearTestHelperTest.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\ntests/testing/LocalBearTestHelperTest.py:11: in <module>\n    from coalib.testing.LocalBearTestHelper import verify_local_bear, execute_bear\ncoalib/testing/LocalBearTestHelper.py:10: in <module>\n    from coala_utils.Comparable import Comparable\nE   ImportError: No module named 'coala_utils.Comparable'\n\nCould you try to rebuild without cache? Maybe that solves the problem^^", "diff": null, "created_at": "2017-06-22T23:09:56Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDY4NTM2Mw==", "fields": {"body": "FAIL tests/misc/ContextManagersTest.py::ContextManagersTest::test_subprocess_timeout\n\nOkay, this thing starts to piss me off, gonna create an issue for this since it happens way too common.", "diff": null, "created_at": "2017-06-23T14:47:09Z", "last_edited_at": "2017-06-23T14:47:20Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDYzNjk5NQ==", "fields": {"body": "Nope! They may work on the same issue, if they try to resolve different errors though.\nFor example: There is an issue (#3) saying there are two different errors in file A: err1 and err2.\nLet's say there are two PR's going: #1 and #2. Now, #2 resolves err1 and #2 resolves err2. When #1 would get merged, it may happen that #2 faces merge conflicts and after the author of #2 resolves them, It is good to go. \ud83c\udf89\nAfter both the PR's are merged, we can close the issue #3. \ud83c\udf89", "diff": null, "created_at": "2017-06-23T10:59:43Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDc2Nzg5MQ==", "fields": {"body": "Also, let's not call it fancy string, lets call something like triple quote string literals", "diff": null, "created_at": "2017-06-23T20:40:47Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDg4NTU0NA==", "fields": {"body": "commit message for 4cd30b6 says 'puncuation'", "diff": null, "created_at": "2017-06-25T06:31:38Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDg4NTkxNg==", "fields": {"body": "wouldn't the commit message be better if its something like 'Adds link to exit codes' documentation in Help/FAQ.rst.' ? since the repetition of \"reference\" makes it kind of seem confusing to me. could also be \"reference\" instead of \"link\"", "diff": null, "created_at": "2017-06-25T06:43:07Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDgzMzQwNA==", "fields": {"body": "Waiting for confirmation that coala-bears is fixed, then will merge this one.", "diff": null, "created_at": "2017-06-24T11:34:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDk2MTQ1Ng==", "fields": {"body": "This is what comes up.", "diff": null, "created_at": "2017-06-26T04:31:20Z", "last_edited_at": null, "author": "arrayslayer", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMTAzMjc0Nw==", "fields": {"body": "Good catch\n\u2026\nOn Jun 26, 2017 12:14, \"Stefan Zimmermann\" ***@***.***> wrote:\n ***@***.**** requested changes on this pull request.\n\n @AsnelChristian <https://github.com/asnelchristian> asepct names should\n refer to matters and not certain qualities of those matters. Please don't\n name them LongMethod, LongParameterList, LargeClass, GeneralMisspelledWord,\n ...\n\n It's really the intention of aspects to be named like MethodLength,\n ParameterListLength, ClassLength, GeneralWordSpelling, ...\n\n cc @sils <https://github.com/sils> @Udayan12167\n <https://github.com/udayan12167> @jayvdb <https://github.com/jayvdb>\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#4398 (review)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/AFc6KPyHAKgz_AkffKuWPvMe6VSdOHcnks5sH4SOgaJpZM4OEYDN>\n .", "diff": null, "created_at": "2017-06-26T11:25:42Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMTMzMDk1MA==", "fields": {"body": "@IpshitaC @nityeshaga Please review the changes", "diff": null, "created_at": "2017-06-27T11:29:49Z", "last_edited_at": null, "author": "S2606", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMTQ2NjkyOA==", "fields": {"body": "@Makman2 thanks \ud83d\ude04\nI really enjoyed the whole review process and I am looking forward to collaborating with you in further contributions to coala.", "diff": null, "created_at": "2017-06-27T19:54:42Z", "last_edited_at": null, "author": "AMR-KELEG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMTQ4NTk0NQ==", "fields": {"body": "@Makman2 I had not really thought of using boolean values for filters. That's actually a good idea. I wasn't aware of the function any() \ud83d\ude04", "diff": null, "created_at": "2017-06-27T21:08:06Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMTU4NDA3NA==", "fields": {"body": "@nityeshaga I didn't realize that I would have to be so specific!\nI like that though, thanks \ud83d\ude04", "diff": null, "created_at": "2017-06-28T07:48:44Z", "last_edited_at": "2017-06-28T07:49:31Z", "author": "JohnMoutafis", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMjI3NjQ2Mw==", "fields": {"body": "I have a suggestion, most people are lazy when reading really long set of words and I think it's a good idea to use points in a communicative form and the explanation of it afterwards, like:\n- **It's harder to update the fork's master if upstream has newer commits** because blah blah blah blah ...", "diff": null, "created_at": "2017-06-30T14:06:40Z", "last_edited_at": "2017-06-30T14:09:16Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMjM1ODUzMA==", "fields": {"body": "I'm rebasing this for you to #4430 and merging it", "diff": null, "created_at": "2017-06-30T19:51:05Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMjM1OTgxOQ==", "fields": {"body": "rebased this for you to https://github.com/coala/coala/pull/4430/commits", "diff": null, "created_at": "2017-06-30T19:57:54Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMjQ0NDU2Mw==", "fields": {"body": "Imo it's okay to remove log_printer in one go ;)", "diff": null, "created_at": "2017-07-01T17:22:25Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMjQ0OTA5Ng==", "fields": {"body": "@Makman2 : See #4399 (comment)", "diff": null, "created_at": "2017-07-01T18:46:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzE3MTc1Nw==", "fields": {"body": "You have already created a pull request for this issue. Please close the last one. When you create commits they are automatically added to your PR so you don't have to create a new PR everytime :)", "diff": null, "created_at": "2017-07-05T17:29:35Z", "last_edited_at": null, "author": "ihsavru", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzE5Njc1Ng==", "fields": {"body": "You could write into the commit message body that part of the fixing was to improve the tests.", "diff": null, "created_at": "2017-07-05T19:04:35Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ==", "fields": {"body": "Thank you so much.. this is my first ever PR accepted in an opensource project. hooray!! \ud83d\ude03", "diff": null, "created_at": "2017-07-05T13:20:36Z", "last_edited_at": null, "author": "raghavmittal101", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzM0NjQ5OQ==", "fields": {"body": "ack b9c53c81f303b4fd302b9dbaadeb9510393a438e", "diff": null, "created_at": "2017-07-06T09:33:38Z", "last_edited_at": null, "author": "IpshitaC", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzg0Njc0Nw==", "fields": {"body": "@sidharthskumar, you have two problems:\n\ntwo commits in https://github.com/coala/coala/pull/4447/commits ; there should only be one commit.\nthere is a merge conflict in your commits.  They are the <<<<<<< HEAD you can see in 5a7d326", "diff": null, "created_at": "2017-07-08T10:04:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNDA0MTcwMg==", "fields": {"body": "I think I have followed the guide ; about the commit body there's isn't much to be written since i have  mentioned what I have done and the commit log was suggested by John and what else should be changed ?", "diff": null, "created_at": "2017-07-10T08:36:39Z", "last_edited_at": null, "author": "sidharthskumar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNDY2NDgzNg==", "fields": {"body": "Added -> Add.\nAlso, changing PR title is not equivalent to changing commit messages", "diff": null, "created_at": "2017-07-12T06:13:25Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTU5NTQwOQ==", "fields": {"body": "Thank you! It seems the same.", "diff": null, "created_at": "2017-07-16T08:59:35Z", "last_edited_at": null, "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTU5OTk2OA==", "fields": {"body": "@Tecbeast-com Hey, your second commit message doesn't follow the commit guidelines, could you please fix it.", "diff": null, "created_at": "2017-07-16T10:27:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTUzODQ0Mw==", "fields": {"body": "Works great so far, I play with it. \ud83d\udc4d\nMaybe we need to put intstruction to run this stuff locally in readme or somewhere...\nsupercool!", "diff": null, "created_at": "2017-07-15T14:43:50Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTY4NjExNQ==", "fields": {"body": "@Nosferatul Not my PR mate.", "diff": null, "created_at": "2017-07-17T07:39:33Z", "last_edited_at": null, "author": "JohnMoutafis", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTYwNjU4Mg==", "fields": {"body": "Sure, here it is http://api.coala.io/en/latest/Developers/Git_Basics.html#follow-up, you have to amend the second commit message updated coala-quickstart on both the CI projects to follow the specified commit message format", "diff": null, "created_at": "2017-07-16T12:39:29Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg==", "fields": {"body": "Sorry to just echo what you said @hemangsk \ud83d\ude1b  Didn't read through the whole thread after seeing the commit message \ud83d\ude1c .", "diff": null, "created_at": "2017-07-17T17:34:00Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg==", "fields": {"body": "@Arsfiqball I have done the required changes, please take a look :)", "diff": null, "created_at": "2017-07-17T23:01:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNjExNDE4OQ==", "fields": {"body": "ack 382eb56 6a5994a c245c92 5d5f04a f11f196", "diff": null, "created_at": "2017-07-18T16:09:19Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNjI5ODA2OA==", "fields": {"body": "This is great \ud83d\udc4d\nDocumentationAPI is under heavy development...Status Blocked till its final revamp...", "diff": null, "created_at": "2017-07-19T07:32:36Z", "last_edited_at": "2017-07-19T07:33:11Z", "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzA0NTU1MQ==", "fields": {"body": "I think we should merge #4414 first.", "diff": null, "created_at": "2017-07-21T16:20:41Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzI2ODQ3NQ==", "fields": {"body": "Oh I dint know about that...Thanks !", "diff": null, "created_at": "2017-07-23T17:25:52Z", "last_edited_at": null, "author": "snakevenom04", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzM1OTAwOA==", "fields": {"body": "run coala locally and resolve your conflict.", "diff": null, "created_at": "2017-07-24T08:49:50Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzQ0Nzk5OA==", "fields": {"body": "you can easily combine commits (called squashing or fixup) with the help of an interactive rebase:\ngit rebase -i master\n\njust for the future ;)\nnext time please don't close PRs, you can always modify existing commits in a PR without problems by rebasing and repushing :)", "diff": null, "created_at": "2017-07-24T14:52:10Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzQxMjAyMg==", "fields": {"body": "@jayvdb is thia better? I got my last review, we can merge it after :)", "diff": null, "created_at": "2017-07-24T12:48:31Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzQyOTI1NA==", "fields": {"body": "Looks good to me, api doc exists for all params, tests added, clean code.", "diff": null, "created_at": "2017-07-24T13:53:05Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzU3MjAyNQ==", "fields": {"body": "@hemangsk added Hindi in the menu. Also rebased it. I think it's good to go?\nPlease let me know if anything else is required.", "diff": null, "created_at": "2017-07-24T22:22:13Z", "last_edited_at": null, "author": "ashwini0529", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzcwOTU5Ng==", "fields": {"body": "Woah.... Thanks for letting me know : ) I ll do that next time !", "diff": null, "created_at": "2017-07-25T11:29:52Z", "last_edited_at": null, "author": "snakevenom04", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxODYwMDk5Ng==", "fields": {"body": "@shreyans800755 You can prefix the title with WIP instead of manually marking it as WIP with corobo. e.g Something like WIP LogPrinter...", "diff": null, "created_at": "2017-07-28T09:04:11Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxODg2MTI0NA==", "fields": {"body": "nice @yash-nisar \ud83d\udc4d documented, clean code.", "diff": null, "created_at": "2017-07-29T21:36:39Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxODg2MTM2NQ==", "fields": {"body": "@ayush1999 run coala locally in your repo, this should fix the issues \ud83d\udc4d", "diff": null, "created_at": "2017-07-29T21:38:57Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxODg2MTk3NQ==", "fields": {"body": "Yes, I was vacationing, will be back on this once I get settled in my\ncollege :)\n\u2026\nOn Sat, Jul 29, 2017 at 7:47 PM Mischa Kr\u00fcger ***@***.***> wrote:\n @nemaniarjun <https://github.com/nemaniarjun> wanna get this going again?\n :)\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#3740 (comment)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/AO_ONvViVmGuNOhd7i9HVB6GV39Qv3umks5sSz8OgaJpZM4MATC6>\n .", "diff": null, "created_at": "2017-07-29T21:51:37Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxODgyOTA0Mw==", "fields": {"body": "This issue is about moving the code of def filter into FilterHelper.py, not the filter functions^^", "diff": null, "created_at": "2017-07-29T12:49:48Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTA1Njg2Ng==", "fields": {"body": "@Nosferatul you would also want add the language in this array https://github.com/coala/projects/blob/master/resources/js/app.js#L5", "diff": null, "created_at": "2017-07-31T12:46:25Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTA5MDA0Mw==", "fields": {"body": "Not sure about the commit message:\nReplace `hasattr(cls, 'process_output')`\n\nimo it should resemble this part of information you've described in the body:\n\nan isinstance(cls, LinterParent) is safer and easier to understand", "diff": null, "created_at": "2017-07-31T14:49:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTA5MDM5MQ==", "fields": {"body": "Both issues close the same issue, that's technically not possible. If both are a part of the issue, write inside the PR message that it closes the issue, and inside the commits refer to the issue with Related to ...", "diff": null, "created_at": "2017-07-31T14:50:28Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTEwNzcyMg==", "fields": {"body": "done", "diff": null, "created_at": "2017-07-31T15:37:57Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTEyNjIxNA==", "fields": {"body": "@hemangsk rultor is not responding because of the github outage, probably", "diff": null, "created_at": "2017-07-31T16:37:18Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTMwNjUxNQ==", "fields": {"body": "Looks good to me... I think CI is hanged... repush the commit :)", "diff": null, "created_at": "2017-08-01T08:38:52Z", "last_edited_at": null, "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTU0MTc1Nw==", "fields": {"body": "Still unaddressed review comments shown by Github here, and on https://github.com/coala/coala-bears/pull/1428/files .  Shouldn't be in the review queue.", "diff": null, "created_at": "2017-08-02T01:24:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDE3Mzk1Nw==", "fields": {"body": "Rebase again and see why the tests are failing (if they still are after rebasing) \ud83d\udc4d", "diff": null, "created_at": "2017-08-04T07:03:48Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDI3NzQwNw==", "fields": {"body": "@userzimmermann , how are you going to automatically map those to aspects?\nAnd we dont want PSScriptAnalyzer based naming; we have consistent naming for common concepts.\nYou'll end up with a custom parser that is quite complex, and most importantly that parser doesnt belong in the bear.  Put it in a .ci script which checks the linter output to identify new settings not supported by the bear yet, and then maybe recommends the change needed to the bear.", "diff": null, "created_at": "2017-08-04T15:23:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDI4MzkyOQ==", "fields": {"body": "@jayvdb I didn't write anything about automatic mapping to aspects... only settings\nBut it seems like manual adjustments are needed... So it looks like we could need some interactive tool-options<-->settings mapping assistant... For the development process... Something the bearship could offer... Should offer! Thanks for making me get this idea! :D That's going to be a great WIP ;)", "diff": null, "created_at": "2017-08-04T15:50:00Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDQ0MzQ4OA==", "fields": {"body": "Looks okay, though what are they used for in YANG? :) A docstring is always good ;)", "diff": null, "created_at": "2017-08-05T13:23:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDQ2MzYxMw==", "fields": {"body": "@vaibhavgarg11 this is just getting worse, I think it'd be better to create a new PR from a new branch branched off master. ;)", "diff": null, "created_at": "2017-08-05T18:56:03Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDQzODc0Mw==", "fields": {"body": "euhm, I think the commit message is a bit confusing. It doesn't describe the change properly :/", "diff": null, "created_at": "2017-08-05T11:34:50Z", "last_edited_at": "2017-08-05T11:35:12Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDUyODE3Nw==", "fields": {"body": "@yash-nisar\nI'm expecting this to fail. I'm waiting for coala/coala#4608 to get merged first. After that, tests will pass as I'm not passing log_printer arg to one of the function. You can review that meanwhile.", "diff": null, "created_at": "2017-08-06T19:47:59Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDYwMjgyOQ==", "fields": {"body": "http://imgur.com/n17engK", "diff": null, "created_at": "2017-08-07T08:31:32Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTE4NjYxOA==", "fields": {"body": "I think the empty lines before and after the \"which bear, what severity, and which section\" text is not needed. It's better for them to be removed tbqh.", "diff": null, "created_at": "2017-08-09T08:16:12Z", "last_edited_at": "2017-08-09T08:17:41Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTEwMjEwNg==", "fields": {"body": "Thx for the contribution ;)\nHowever there are some changes that are necessary for your commit message:\n\nInstead of Processes, mention the file name affected (without extension): Processing\nUpper-case letter after :\nInstead of Fixes XXXX, use Closes XXXX. We will use this information somewhen for bug-prediction \ud83d\udc4d", "diff": null, "created_at": "2017-08-08T22:41:35Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTQxNDk2MA==", "fields": {"body": "@userzimmermann Hey man, sorry for the delay. I think I've finally got it right after taking a break from this for a bit. I didn't get earlier that I needed to skip pull all together and do push -f only.\nHopefully it's fine now and I can move on to a low issue now :P", "diff": null, "created_at": "2017-08-10T00:11:10Z", "last_edited_at": null, "author": "Stropek", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg==", "fields": {"body": "Hello,\nIt looks like your commit doesn't follow our guidelines. Please take a look at https://coala.io/commit for the commit guidelines.\nI suggest using your current PR title as the commit shortlog and describe what you did on the commit description. Don't forget to mention the issue on the bottom with Fixes!\nThanks!", "diff": null, "created_at": "2017-08-10T02:53:12Z", "last_edited_at": "2017-08-10T02:53:32Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ==", "fields": {"body": "Yeah definitely :) yukiisbored already provided you the link where you can read commit guidelines, Let us know if you need any help :)", "diff": null, "created_at": "2017-08-10T16:01:49Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw==", "fields": {"body": "One thing, you don't have to create a new PR or branch to fix stuff/rewriting history. Just do it on the same branch and do a force push.", "diff": null, "created_at": "2017-08-11T23:43:03Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTk1NTkwNw==", "fields": {"body": "rebase needed", "diff": null, "created_at": "2017-08-12T04:00:50Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTk5ODQ4NQ==", "fields": {"body": "@incorrectusername okay, I combined your and mine desired changes, added tests, and updated the PR  #4622 \ud83c\udf89", "diff": null, "created_at": "2017-08-12T18:38:46Z", "last_edited_at": "2017-08-12T18:39:33Z", "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMjM5MTkwMw==", "fields": {"body": "@damngamerz one last thing: The commit message needs an update: kind doesn't exist anymore", "diff": null, "created_at": "2017-08-15T06:59:19Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMjQ1MTgxNQ==", "fields": {"body": "But if you do a change, don't ack it yourself, it has to be reviewed again by someone else.", "diff": null, "created_at": "2017-08-15T12:21:36Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMjUzMTQzMg==", "fields": {"body": "@IpshitaC I faced the same problem...\nNow this is what I did: Unfollow your fork from Circle-CI. And repush your PR. This will use coala-bears cache instead of your fork....(There's something really wrong with CI cache.) After my GSoC I will look into this.\n^CC @yash-nisar \ud83d\ude09", "diff": null, "created_at": "2017-08-15T17:22:18Z", "last_edited_at": "2017-08-15T17:22:45Z", "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMjc3NjczMA==", "fields": {"body": "Congratulations on getting PR number 2000 :-)", "diff": null, "created_at": "2017-08-16T13:48:45Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMzMxODIwOQ==", "fields": {"body": "@userzimmermann Yeah its an angular plugin https://github.com/btford/angular-markdown-directive to convert the markdown to html. Its being used at https://github.com/coala/landing-frontend/blob/master/partials/tabs/languages.html#L79 as well.\n@sils I was trying to follow this https://www.uplabs.com/posts/profile-card-albert-einstein for bio and name, but <p> looks better. fixed it", "diff": null, "created_at": "2017-08-18T10:24:11Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMzQxNjA2OA==", "fields": {"body": "The code looks good. This can be merged once all tests pass from my point of view.", "diff": null, "created_at": "2017-08-18T17:38:58Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMzYxMjM2OQ==", "fields": {"body": "@Makman2 Can this be merged?", "diff": null, "created_at": "2017-08-20T21:12:51Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMzgzMDQ1OQ==", "fields": {"body": "@snakevenom04 Please follow the guidelines for commit message given at coala.io/commit and update it accordingly.\nYou can write something like:\nConfigurationGathering: Fix typo in docstring\n<Description>\nFixes <issue link>\n\nunack a480efa", "diff": null, "created_at": "2017-08-21T19:27:01Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDE0MjE4MA==", "fields": {"body": "@snakevenom04 Appreciate it.", "diff": null, "created_at": "2017-08-22T20:27:38Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDM5Nzk3Mw==", "fields": {"body": "Quoting corobo:\n\ncoala is always written with a lower case c. \ud83d\ude16\n\n\ud83d\ude04", "diff": null, "created_at": "2017-08-23T16:58:16Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDQwMzA2OQ==", "fields": {"body": "Yes you have to write the remove after the colon upper-case :)", "diff": null, "created_at": "2017-08-23T17:17:08Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDQwMzI4Mw==", "fields": {"body": "Btw you can also omit the .py ending in the messages \ud83d\udc4d", "diff": null, "created_at": "2017-08-23T17:17:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDQwNDgwNQ==", "fields": {"body": "If your commit addresses an issue, please add a reference \ud83d\udc4d\nAlso regarding your current commit body:\nYou don't have to mention that you are adjusting tests. This is usual, so you don't have to mention it explicitly again ;) (So imo you can just remove the current commit body altogether, except the issue reference you will probably add)", "diff": null, "created_at": "2017-08-23T17:23:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDYxODY2MQ==", "fields": {"body": "@Asalle please run coala locally in your repo directory.", "diff": null, "created_at": "2017-08-24T12:18:07Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDc0MDQ5MQ==", "fields": {"body": "I've deleted the gitmate comments as you've addressed them \ud83d\udc4d", "diff": null, "created_at": "2017-08-24T19:57:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDc0MDU2NQ==", "fields": {"body": "Sorry accidentally closed :3", "diff": null, "created_at": "2017-08-24T19:57:58Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDc0MDU4Ng==", "fields": {"body": "Also tests are missing \ud83d\udc4d", "diff": null, "created_at": "2017-08-24T19:58:04Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDcyNzg2MA==", "fields": {"body": "I think we should squash both commits ;)", "diff": null, "created_at": "2017-08-24T19:05:18Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDk5MzEwNA==", "fields": {"body": "Minor change + rebase necessary, but almost ready \ud83d\udc4d", "diff": null, "created_at": "2017-08-25T17:54:23Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNDk5NjQ2MQ==", "fields": {"body": "About the shortlog: I would insert the word \"new\", this definitely clears up some things if you don't read the commit body :) --> VultureBear: Make use of new vulture API\nYou don't need an __init__.py file inside a test file directory, as you don't load them as a module :)", "diff": null, "created_at": "2017-08-25T18:06:35Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTA0MzgzNg==", "fields": {"body": "Reintroduce __init__.py for now, we will open another issue blocked by coala/coala#4673 removing it again \ud83d\udc4d", "diff": null, "created_at": "2017-08-25T22:01:06Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTA1NzQ1Ng==", "fields": {"body": "I'll add \"Thanks @mridubhatnagar for helping\", works?\nAlso, CircleCI is failing every time. Do I need to check my tests?", "diff": null, "created_at": "2017-08-25T23:42:41Z", "last_edited_at": "2017-08-25T23:48:00Z", "author": "umeshksingla", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTExOTA4MA==", "fields": {"body": "Thanks @Makman2 and @umeshksingla for taking this forward. I was stuck on the tests part becuase of which it was pending since long.\nOnce, this gets approved. There is one of the issues blocked because of this. It can also be closed then.", "diff": null, "created_at": "2017-08-26T11:48:03Z", "last_edited_at": null, "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTEyODI4OQ==", "fields": {"body": "After language-check could be installed after some rebuilds, this needs fixing:\nProject wide:\n**** GitCommitBear [Section: commit | Severity: NORMAL] ****\n!    ! Invalid full issue reference: #1723\n\nPlease provide a full link inside the commit message instead the short #1723 variant.", "diff": null, "created_at": "2017-08-26T13:37:05Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTEzMTAzNw==", "fields": {"body": "@umeshksingla  Yes. It is for updating the repo to use rstCheckbear. But adding rstcheckbear in coafile raised error related to directive and roles. Hence, for resolving that error. A seperate issue for roles and directives was raised.", "diff": null, "created_at": "2017-08-26T14:09:12Z", "last_edited_at": null, "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTEzOTY4Nw==", "fields": {"body": "yeah sounds good :)", "diff": null, "created_at": "2017-08-26T15:44:13Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTEzOTc3OA==", "fields": {"body": "About commit message:\n\nPlease write Closes <full-link-to-issue> instead of just issue number\nYou can leave the part \"and a ut\" in the shortlog. Adding tests is common, so you don't have to write that explicitly :)", "diff": null, "created_at": "2017-08-26T15:45:15Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTI4MjQxNA==", "fields": {"body": "Looks good to me :-)", "diff": null, "created_at": "2017-08-28T07:36:56Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTI4Mjg4MA==", "fields": {"body": "Can you give me push access to your repo, so I can make some minor changes, please?", "diff": null, "created_at": "2017-08-28T07:39:10Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTM2NDMwMw==", "fields": {"body": "Please use the filename you modified as a tag in the commit message. Also use Closes XXXX instead of Fixes XXXX, as the referenced issue is not marked as bug.", "diff": null, "created_at": "2017-08-28T14:10:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTM2NDU1Mg==", "fields": {"body": "If the commit message gets too long, you can strip off the part with \"... describing functions\", as this is usually always intended with docstrings :)", "diff": null, "created_at": "2017-08-28T14:11:46Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTMwMDc0NA==", "fields": {"body": "@hemangsk thank you !", "diff": null, "created_at": "2017-08-28T09:03:11Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTQ0NTUzMA==", "fields": {"body": "ack 6ac25db", "diff": null, "created_at": "2017-08-28T18:56:02Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTQ4NzAyOA==", "fields": {"body": "Commit message: I would rephrase shortlog to\nSetting.py: Add shortcuts for typed_list\n\nFor str, int, float and bool types.\n\nCloses XXXX\n\nI think the information about typed_list is essential :)", "diff": null, "created_at": "2017-08-28T21:26:08Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTQxNTExMA==", "fields": {"body": "Please use Closes instead of Fixes in commit message\nAnd read up on the usage of assertTrue again, this change has not the desired effect.", "diff": null, "created_at": "2017-08-28T17:12:04Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTUwMjkyMA==", "fields": {"body": "@Makman2 Can I run rultor now?\n\nPlease only let maintainers do that :)", "diff": null, "created_at": "2017-08-28T22:37:33Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTUwMzYwNQ==", "fields": {"body": "@Makman2 Roger that.\nPhew, that took much longer than I thought it would :P", "diff": null, "created_at": "2017-08-28T22:41:40Z", "last_edited_at": null, "author": "Stropek", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTUzODU5OQ==", "fields": {"body": "Thanks @jendrikseipp and @hemangsk! \ud83c\udf89", "diff": null, "created_at": "2017-08-29T02:42:15Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTY3MTM5Nw==", "fields": {"body": "The issue states to use assertEqual^^", "diff": null, "created_at": "2017-08-29T13:54:27Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTY3MzE3NQ==", "fields": {"body": "yeah \ud83d\udca5 tough PR, but we got it :D", "diff": null, "created_at": "2017-08-29T14:00:26Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTc1MDkyMw==", "fields": {"body": "Possibly, I restarted the job.", "diff": null, "created_at": "2017-08-29T18:20:42Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTgxNTE1MQ==", "fields": {"body": "Maybe also for the shortlog: The improvement is aimed at check_prerequisites-related tests, so maybe something like Improve check_prerequisites tests :)", "diff": null, "created_at": "2017-08-29T21:51:33Z", "last_edited_at": "2017-08-29T21:51:48Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTk2ODc3NQ==", "fields": {"body": "ack 6ff87d1 d9b2376", "diff": null, "created_at": "2017-08-30T11:59:08Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNjA0MjM5Mw==", "fields": {"body": "yeah \ud83d\udca5 tough PR, but we got it :D\n\n@Makman2 Roger that!\nBTW I've opened #2025", "diff": null, "created_at": "2017-08-30T16:17:06Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNjE0ODYwNw==", "fields": {"body": "", "diff": null, "created_at": "2017-08-30T23:39:36Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNjc2MDI0NA==", "fields": {"body": "@palash25 @IpshitaC Great advice! I will keep that in mind from now on. It's great learning new things from people like you. Thanks again!", "diff": null, "created_at": "2017-09-02T17:58:41Z", "last_edited_at": null, "author": "Raman1121", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNjc4Mjk5MQ==", "fields": {"body": "@meetmangukiya We wait for the release of coala-utils, this remains blocked till then. :)", "diff": null, "created_at": "2017-09-03T03:58:15Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNjk5NDg1NA==", "fields": {"body": "Though I don't mind, imo it's okay like this. If you want to change it like @mridubhatnagar suggested or if you, @mridubhatnagar, want it changed, feel free to file an issue. Imo both styles are okay: A. mixing test data and tests or B. test data first and then tests \ud83d\ude04", "diff": null, "created_at": "2017-09-04T16:06:01Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNzAwNjg5Nw==", "fields": {"body": "Thanks again, @Makman2, though I use coala through tox.", "diff": null, "created_at": "2017-09-04T17:38:00Z", "last_edited_at": null, "author": "umeshksingla", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNzI3NDQ2NA==", "fields": {"body": "Yay!! @SanketDG we have gitmate to rebase now :D", "diff": null, "created_at": "2017-09-05T19:13:03Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyODY3Njc1Nw==", "fields": {"body": "@atultherajput Changes looks good.\nJust small request regarding commit description:\nRemove the word page as its part of CLI output and not a page.\nYou may put something like:\non help page -> in coala CLI help string", "diff": null, "created_at": "2017-09-11T22:27:14Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMDAwMzkyMg==", "fields": {"body": "@Logan1x Yes, I'm working on this. Just created a new PR. \ud83d\ude04", "diff": null, "created_at": "2017-09-17T00:36:50Z", "last_edited_at": null, "author": "IamRaviTejaG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMTY0MjQ3Ng==", "fields": {"body": "@atultherajput yeah looks like you've hit the same error. I'm acking your commit, as it's good, however a merge has to wait until the bug is resolved \ud83d\udc4d", "diff": null, "created_at": "2017-09-23T15:23:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMjI3MzI1Mw==", "fields": {"body": "Alright will separate into separate commits \ud83d\udc4d I already separated (1) and (3), but wasn't sure in the end whether everything should be put into a single commit to fix the CI immediately with that.", "diff": null, "created_at": "2017-09-26T17:26:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMjU0NDEyNw==", "fields": {"body": "@Makman2 Incorporated all your suggestions into my PR :) Again, thanks a lot :)", "diff": null, "created_at": "2017-09-27T14:42:01Z", "last_edited_at": "2017-09-27T14:42:44Z", "author": "stellargo", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMjU0NzA3OQ==", "fields": {"body": "hmm just thinking, maybe we should also test the case when we miss only one of the additional include paths? Your decision @stellargo \ud83d\udc4d", "diff": null, "created_at": "2017-09-27T14:50:45Z", "last_edited_at": "2017-09-27T14:50:58Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMjk2MzUxNg==", "fields": {"body": "Could you improve the shortlog? \"Change docstring\" is very general :) Try to describe that you changed triple quotes to double quotes. If space does not suffice, you can be more general^^\n(to gain space of 3 chars, you can remove the .py ending from the tag)", "diff": null, "created_at": "2017-09-28T21:03:55Z", "last_edited_at": "2017-09-28T21:04:20Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMzEzMjI4NQ==", "fields": {"body": "Nah not the PR title, but the commit message ;)\ngit commit --amend", "diff": null, "created_at": "2017-09-29T13:52:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMzM3MDc4OA==", "fields": {"body": "Will remember that @Makman2 .", "diff": null, "created_at": "2017-10-01T11:39:30Z", "last_edited_at": null, "author": "urohit011", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMzMyNDI3Mg==", "fields": {"body": "\"Closes\" should start with upper-case\nWhen we're already on it, you can add a period after \"Use assertEqual instead of assertEquals\" :)\n\nLooks good otherwise \ud83d\udc4d", "diff": null, "created_at": "2017-09-30T17:42:38Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMzg2OTQ4Mw==", "fields": {"body": "@rupav you'll need to use git now ;) if you're not intending to contribute long term we can do that for you but if you want then you really need to change the commit message, PRs are a github concept and one of the big reasons for us doing newcomer issues is so you can learn about things like changing your commit message", "diff": null, "created_at": "2017-10-03T14:58:20Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMzg3NDE0NA==", "fields": {"body": "This is about python entrypoints, if you're interested you can google setuptools entrypoints; however for commits and git it's not really a relevant detail. If you find it confusing we should maybe file an issue to change the docs to have a simpler example?", "diff": null, "created_at": "2017-10-03T15:12:26Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMzg3OTc3Ng==", "fields": {"body": "this is good just be sure to fllow the guidelines especially for the first line/shortlog!", "diff": null, "created_at": "2017-10-03T15:30:41Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMzgzMDk4OA==", "fields": {"body": "hi, can you check http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html closely? The commit message isn't descriptive nor in imperative tense.", "diff": null, "created_at": "2017-10-03T12:48:42Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzMzgzMTczNQ==", "fields": {"body": "code looks good :)", "diff": null, "created_at": "2017-10-03T12:51:47Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNDE3MDM5OQ==", "fields": {"body": "But good catch with using \"resolve\" for phrasing, that may really lessen the confusion :)", "diff": null, "created_at": "2017-10-04T14:18:08Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNTAwNDI1Mg==", "fields": {"body": "I would remove the Ignore: DS_Store part inside the commit body, otherwise good \ud83d\udc4d", "diff": null, "created_at": "2017-10-08T12:44:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNTAwNDQ3MA==", "fields": {"body": "@Makman2  lets some begineer do these change and make a new PR , also add Hacktoberfest Label", "diff": null, "created_at": "2017-10-08T12:48:11Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNTYzNDY5NQ==", "fields": {"body": "We should also add a log message inside code:\nif section is not None:\n    logging.warn('fail_acquire_settings: section parameter is deprecated.')\n\nor a similar message.", "diff": null, "created_at": "2017-10-10T23:12:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNTgxOTU5NQ==", "fields": {"body": "please squash the commits together ;)", "diff": null, "created_at": "2017-10-11T14:00:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNjcwMTcxNg==", "fields": {"body": "Next time please ensure that you are assigned to the issue before you start working on it beforehand. \ud83d\ude04 \ud83d\udc4d", "diff": null, "created_at": "2017-10-15T10:27:00Z", "last_edited_at": "2017-10-15T10:27:42Z", "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNjg4MTk5Ng==", "fields": {"body": "Could you improve your commit message and remove the duplicated sentences? :)", "diff": null, "created_at": "2017-10-16T13:11:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzA3MDkwMA==", "fields": {"body": "@swapagarwal this will probably take some time until we release coala-bears 0.12 as well as gitmate handling for different coala versions; sorry for that. You can help making that happen by pushing for a release and helping the maintainers making it happen. We haven't done one for quite a while...", "diff": null, "created_at": "2017-10-16T23:15:42Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzA3NzU3Nw==", "fields": {"body": "Just add a space between the colon and the next word, e.g.\ndocs: Add regex ............", "diff": null, "created_at": "2017-10-16T23:58:25Z", "last_edited_at": null, "author": "CCInCharge", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzAwNzg1Nw==", "fields": {"body": "@acashmkj Any maintainer would either merge or request changes in the PR soon after reviewing it again.... Changes LGTM. \ud83d\udc4d\nack 6f8a47a16925c38d17a2394783dd212992b239af", "diff": null, "created_at": "2017-10-16T19:29:00Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzAyNzMwMQ==", "fields": {"body": "How about\nshortlog - Refactor docstring\nbody - refactor line to line number\nbetter than using line no.", "diff": null, "created_at": "2017-10-16T20:22:19Z", "last_edited_at": "2017-10-16T20:22:39Z", "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzMyMjA1OQ==", "fields": {"body": "@nealkarpe @RaiVaibhav I updated the commit before it was reviewed. Added a newline manually and edited the commit body to have less than 72 characters, hence it passed the checks in the second go. Let me know if any change is needed.", "diff": null, "created_at": "2017-10-17T18:20:16Z", "last_edited_at": null, "author": "sonali0901", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ2NTI0OA==", "fields": {"body": "@prnvdixit I thought of that issue as being always open, as we can never have enough of them (squirrels). \ud83d\ude1b So this PR shouldn't actually close the issue IMO.", "diff": null, "created_at": "2017-10-18T05:36:08Z", "last_edited_at": "2017-10-18T05:38:25Z", "author": "swapagarwal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ2NjI5Ng==", "fields": {"body": "Sorry this was closed by mistake and new PR was opened.", "diff": null, "created_at": "2017-10-18T05:44:05Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjI3MA==", "fields": {"body": "@prnvdixit Well, I'd prefer suggesting these to the assignee as that is the official way to contribute. \ud83d\ude04", "diff": null, "created_at": "2017-10-18T06:23:54Z", "last_edited_at": null, "author": "swapagarwal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjUyMA==", "fields": {"body": "@prashant0598 Some suggestions can be found at #301 \ud83d\ude04", "diff": null, "created_at": "2017-10-18T06:25:15Z", "last_edited_at": null, "author": "swapagarwal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ3Nzc5Mw==", "fields": {"body": "@prashant0598 Actually, you have to mention it in commit in the PR \ud83d\ude09", "diff": null, "created_at": "2017-10-18T06:55:26Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ5MDUyNg==", "fields": {"body": "@prashant0598 fix gitmate issues and change the commit message to something similar to ship_it: Add squirrel images . For more, read commit guidelines http://coala.io/commit", "diff": null, "created_at": "2017-10-18T07:52:08Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzYyNTEyNw==", "fields": {"body": "yeah sounds good, you could generalize that a bit to ease tests \ud83d\udc4d :)", "diff": null, "created_at": "2017-10-18T15:13:38Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzYyODcwNg==", "fields": {"body": "@sonali0901 soory for the late reply as you know there is a  festival going on so i was busy there there is not any issue according to your screen shot", "diff": null, "created_at": "2017-10-18T15:24:27Z", "last_edited_at": "2017-10-18T15:25:17Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzg3ODY1Ng==", "fields": {"body": "ack 8f3693c", "diff": null, "created_at": "2017-10-19T11:23:15Z", "last_edited_at": null, "author": "soumya-ranjan7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzgwOTgyMA==", "fields": {"body": "@acashmkj Please improve your commit message and remove the duplicate statements :)", "diff": null, "created_at": "2017-10-19T06:14:05Z", "last_edited_at": null, "author": "alphadose", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzk2NjA5OA==", "fields": {"body": "@nvzard Yeah.... Go for them \ud83d\ude09 \ud83d\udc4d", "diff": null, "created_at": "2017-10-19T16:39:26Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzk2NzA1NA==", "fields": {"body": "Thanks for helping me with my first PR :)", "diff": null, "created_at": "2017-10-19T16:42:55Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzkxMzQwOA==", "fields": {"body": "But imo it's not okay if you copy someone's work and don't mention him as a co-author. Please mention @cristianossd in your work.", "diff": null, "created_at": "2017-10-19T13:48:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzkxMzU0Ng==", "fields": {"body": "@cristianossd because you haven't reacted to our requests and another one has taken up the issue officially, I have to close the PR. We have to be strict with this so we don't have conflicts in the future.", "diff": null, "created_at": "2017-10-19T13:49:22Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODE1NTMwNA==", "fields": {"body": "we've had GitMate.io deployment issues and are working on resolving the issue for future cases. Right now GitMate is operational again, just do an empty amend and force push to retrigger the CI pipeline.", "diff": null, "created_at": "2017-10-20T09:27:24Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODIwNDA1NA==", "fields": {"body": "@kartikeys98 Good work... \ud83d\udc4d \ud83d\ude04", "diff": null, "created_at": "2017-10-20T13:20:17Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODIyNDAwNw==", "fields": {"body": "Thanks @prnvdixit for being calm and guiding me for my first contribution.", "diff": null, "created_at": "2017-10-20T14:32:48Z", "last_edited_at": null, "author": "kartikeys98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODM5MTU4NA==", "fields": {"body": "Commit message:\n\n.travis: Run tests up to 3.4 only on master only\n\n;)", "diff": null, "created_at": "2017-10-21T12:39:11Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODM5MTY0NA==", "fields": {"body": "Recommendation: I would switch the commit order: First move the old testing steps into a separate script, and then make the relevant modifications for the actual issue. This is easier I believe \ud83d\udc4d But optional \ud83d\udc4d", "diff": null, "created_at": "2017-10-21T12:40:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODMwNTU4MA==", "fields": {"body": "I am not sure about banned words in .coafile either \ud83d\ude09\nAlso, you should try not to push more than one PRs to a single issue (that hinders in keeping reviews at one place). In case of any problem, head over to gitter channel and ask the same - Someone would be around to help you \ud83d\ude03. \ud83d\udc4d", "diff": null, "created_at": "2017-10-20T19:48:46Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODMyMzk4MQ==", "fields": {"body": "@prnvdixit Thanks for helping a newbie \ud83d\udc4d", "diff": null, "created_at": "2017-10-20T21:15:17Z", "last_edited_at": null, "author": "cornu-ammonis", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODU1NDEwMA==", "fields": {"body": "i also reported the user\n\u2026\nOn Oct 23, 2017 1:39 AM, \"Lasse Schuirmann\" ***@***.***> wrote:\n @robbyoconnor <https://github.com/robbyoconnor> @TheSharpieOne\n <https://github.com/thesharpieone> thanks for the heads up. I've reported\n the user to GitHub so they can remove the github user, that should be way\n more efficient.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#4776 (comment)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/AABaMBsB4myd4Ebqy-_4wyaA1QzVo0TXks5svCabgaJpZM4QCJlP>\n .", "diff": null, "created_at": "2017-10-23T05:49:54Z", "last_edited_at": null, "author": "robbyoconnor", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODg5NTQwNw==", "fields": {"body": "Yeah, there are errors \ud83d\ude09- Please fix them using coala \ud83d\ude04. For knowing more about how to apply patches using coala refer this \ud83d\udc4d", "diff": null, "created_at": "2017-10-24T07:09:48Z", "last_edited_at": "2017-10-24T07:09:58Z", "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTAxNDI5NQ==", "fields": {"body": "@prashant0598 Fix the issues as said by @prnvdixit and squash your commits into a single message.", "diff": null, "created_at": "2017-10-24T14:42:57Z", "last_edited_at": null, "author": "kartikeys98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTE5MTMxNw==", "fields": {"body": "After some searching i found that this error is related to setuptools", "diff": null, "created_at": "2017-10-25T02:07:16Z", "last_edited_at": "2017-10-25T02:07:46Z", "author": "acashmkj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTEwMjcxNg==", "fields": {"body": "Please don't ping unrelated persons for review directly, your PR will be definitely reviewed. I just made some organizational stuff on the related issue, nothing more, I haven't filed it and don't know what is exactly expected right now ;)\nAbout the AppVeyor issue: No idea, let's try a rebuild^^", "diff": null, "created_at": "2017-10-24T19:23:08Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTIxMTQwMw==", "fields": {"body": "Yup, agree with @Makman2's review comments above, including copy (without as little modification as possible) as one commit, then edit as separate commit.  That makes it easier to understand what happened.", "diff": null, "created_at": "2017-10-25T04:31:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTQ2NDg3Mg==", "fields": {"body": "Could you share your investigations on #4794 ?", "diff": null, "created_at": "2017-10-25T20:42:22Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTU5NTczMA==", "fields": {"body": "Do an empty force push", "diff": null, "created_at": "2017-10-26T08:44:43Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTYwMTIxNA==", "fields": {"body": "Thanks @nvzard and @RaiVaibhav for your help.", "diff": null, "created_at": "2017-10-26T09:05:50Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTYzMDgxNQ==", "fields": {"body": "@acashmkj we know, we don't need a \"please review and merge accordingly\" on every comment ;)", "diff": null, "created_at": "2017-10-26T11:04:20Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTk0NDgxOA==", "fields": {"body": "@prnvdixit ohhh ok seems perfect then :)", "diff": null, "created_at": "2017-10-27T11:19:54Z", "last_edited_at": null, "author": "stellargo", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMTAwNzI3OA==", "fields": {"body": "That was a transient error - a timeout in installation.", "diff": null, "created_at": "2018-06-28T11:44:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMTAyMzU1Ng==", "fields": {"body": "ack 2365086", "diff": null, "created_at": "2018-06-28T12:51:51Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMTUzNDgzNg==", "fields": {"body": "@kriti21 this is a basic language file. Amendments for that can be made later on. Moreover, this file is not of any use as for now. Creating this language file was necessary for me to see the possibilities of defining tastes for the Quotation aspect.", "diff": null, "created_at": "2018-06-30T11:22:14Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzA3MzQ5MQ==", "fields": {"body": "Actually, have you seen this? --> https://pypi.org/project/cached-property/\n\nI have seen something similar but not this package \ud83d\ude06 . But if I had just copy pasted this I wouldn't get to learn so much about the dunder functions, so I'm glad I missed this.", "diff": null, "created_at": "2018-07-06T15:51:51Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzQ2NjYzMw==", "fields": {"body": "Interesting, it appears that ignore setting are not being inherited from [all] because the following appears to work:\n[all.PythonPackageInit]\nbears = PythonPackageInitBear\nignore = *.py, tests/python/vulture_test_files", "diff": null, "created_at": "2018-07-09T12:46:46Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNDAwMTU5Nw==", "fields": {"body": "@refeed, different floating number implementations.\nJust using an if to get your build green.", "diff": null, "created_at": "2018-07-10T23:54:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw==", "fields": {"body": "Ugh.  Repeat of #5633 .  @JoeSiew , do not ever delete your fork.\nFollow our newcomers guide carefully https://github.com/coala/coala/blob/master/docs/Developers/Newcomers_Guide.rst", "diff": null, "created_at": "2018-07-19T04:27:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjg0NzU0Ng==", "fields": {"body": "You can also find out squashing guide at https://api.coala.io/en/latest/Developers/Git_Basics.html#rebasing.", "diff": null, "created_at": "2018-07-22T07:39:53Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjgxMTM5Mw==", "fields": {"body": "The PR won't be merged until you fix what has been suggested. And every PR should pass all test case.\n\nDo not close this PR\nDo not delete this branch\nDo not create new commits.\n\nMake changes in the same commit and use git commit --amend  to that.", "diff": null, "created_at": "2018-07-21T17:28:32Z", "last_edited_at": "2018-07-21T17:28:53Z", "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjk0NzE4OQ==", "fields": {"body": "@prnvdixit, not as of now.\n\nissue being closed without a MR getting merged for it\n\nThe reason is we don't have the data of those mrs who are not opened by newcomers.\nYes, if we can identify the closer of the issue, we can deduct points for the newcomers who closes their own issues, as it clearly indicates that the mrs for those issues aren't merged. But IGitt doesn't provide the details of the issue or mr closer yet.\nBut another way of doing it is to check the labels on the issues, and in case the labels are invalid or duplicate then deduct points of the newcomer who opened the issue.", "diff": null, "created_at": "2018-07-23T05:55:06Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNzAxNjY4MQ==", "fields": {"body": "@cypher-naman don't give up. All are here to learn. Ask your doubts in chat we are here to support. Let's get this done together.", "diff": null, "created_at": "2018-07-23T10:47:01Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODA5NzgyMw==", "fields": {"body": "I am getting a lot of failed builds with this PR and #85 ; not sure what is the problem.\n\nI checked the log. Those fail builds are due to the error element (\".modal-dialog button.close\") still not existing after 60000ms\nI am also facing this issue recently. The reason could be, syncing issues takes too much time, or the page isn't correctly loaded due to some unknown reason.\nI wonder if we should abandon the current integration test, which is instable and hard to report coverage, and start building unittests.", "diff": null, "created_at": "2018-07-26T13:29:58Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA==", "fields": {"body": "@MacBox7 will do it by today", "diff": null, "created_at": "2018-07-29T05:35:51Z", "last_edited_at": null, "author": "HemabhKamboj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjM5NTA2MA==", "fields": {"body": "why not super()?", "diff": "@@ -5,6 +5,41 @@\n from coalib.results.SourceRange import SourceRange\n from coalib.results.AbsolutePosition import AbsolutePosition\n from coala_utils.string_processing.Core import unescaped_search_for\n+from coala_utils.decorators import (enforce_signature, generate_repr,\n+                                    generate_ordering)\n+\n+\n+@generate_repr(('id', hex),\n+               'origin',\n+               'string_ranges',\n+               'comment_ranges',\n+               'exception_msg',\n+               'message')\n+@generate_ordering('string_ranges',\n+                   'comment_ranges',\n+                   'exception_msg',\n+                   'contents',\n+                   'message',\n+                   'origin',\n+                   'message_base')\n+class AnnotationResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin,\n+                 string_ranges: (tuple, None)=None,\n+                 comment_ranges: (tuple, None)=None,\n+                 exception_msg: (str, None)=None):\n+\n+        Result.__init__(self, origin,", "created_at": "2017-10-03T13:09:33Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzMjQxMg==", "fields": {"body": "You mean roomname_match, right?", "diff": "@@ -242,14 +242,63 @@ def mark_cmd(self, msg, match):\n                             bot_prefix=self.bot_config.BOT_PREFIX)\n                         )\n \n-    @re_botcmd(pattern=r'^assign\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear\n-               re_cmd_name_help='assign <complete-issue-URL>',\n-               flags=re.IGNORECASE)\n-    def assign_cmd(self, msg, match):\n+    @arg_botcmd('issue_reference', type=str)\n+    def assign(self, msg, issue_reference):\n         \"\"\"Assign to GitLab and GitHub issues.\"\"\"  # Ignore QuotesBear\n-        org = match.group(2)\n-        repo_name = match.group(3)[:-1]\n-        iss_number = match.group(4)\n+\n+        # Complete URL to issue\n+        def process_full_url(issue_reference):\n+            rgx = r'https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(2), m.group(3)[:-1], m.group(4)\n+\n+        # Short issue reference (e.g. `coala/corobo#12`)\n+        def process_short_ref(issue_reference):\n+            rgx = r'(.+?)/(.+?)#(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(1), m.group(2), m.group(3)\n+\n+        # Super short issue reference (e.g. `#1234`)\n+        def process_super_short_ref(issue_reference):\n+            issue_rgx = r'#(\\d+)'\n+            issue_reference_match = re.fullmatch(issue_rgx, issue_reference)\n+\n+            if issue_reference_match is None:\n+                return None\n+\n+            roomname_rgx = r'(.+?)/(.+)'\n+            roomname_match = re.fullmatch(\n+                roomname_rgx, msg.frm.room.idd, re.IGNORECASE)\n+\n+            if roommatch is None:", "created_at": "2017-10-03T15:15:34Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzNDEyMw==", "fields": {"body": "msg.frm.room.uri instead of msg.frm.room.idd", "diff": "@@ -242,14 +242,63 @@ def mark_cmd(self, msg, match):\n                             bot_prefix=self.bot_config.BOT_PREFIX)\n                         )\n \n-    @re_botcmd(pattern=r'^assign\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear\n-               re_cmd_name_help='assign <complete-issue-URL>',\n-               flags=re.IGNORECASE)\n-    def assign_cmd(self, msg, match):\n+    @arg_botcmd('issue_reference', type=str)\n+    def assign(self, msg, issue_reference):\n         \"\"\"Assign to GitLab and GitHub issues.\"\"\"  # Ignore QuotesBear\n-        org = match.group(2)\n-        repo_name = match.group(3)[:-1]\n-        iss_number = match.group(4)\n+\n+        # Complete URL to issue\n+        def process_full_url(issue_reference):\n+            rgx = r'https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(2), m.group(3)[:-1], m.group(4)\n+\n+        # Short issue reference (e.g. `coala/corobo#12`)\n+        def process_short_ref(issue_reference):\n+            rgx = r'(.+?)/(.+?)#(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(1), m.group(2), m.group(3)\n+\n+        # Super short issue reference (e.g. `#1234`)\n+        def process_super_short_ref(issue_reference):\n+            issue_rgx = r'#(\\d+)'\n+            issue_reference_match = re.fullmatch(issue_rgx, issue_reference)\n+\n+            if issue_reference_match is None:\n+                return None\n+\n+            roomname_rgx = r'(.+?)/(.+)'\n+            roomname_match = re.fullmatch(\n+                roomname_rgx, msg.frm.room.idd, re.IGNORECASE)", "created_at": "2017-10-03T15:21:22Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzM2NzY1OA==", "fields": {"body": "bad indentation, just 4 spaces \ud83d\udc4d", "diff": "@@ -2,7 +2,7 @@\n \n from coalib import coala\n from coalib.parsing.FilterHelper import (\n-    get_all_filters_str, InvalidFilterException)\n+        available_filters, InvalidFilterException)", "created_at": "2017-10-08T21:52:18Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY5NTk4MA==", "fields": {"body": "No. If show-bears is specified along with json mode, execution flow won't come to this file. Have a look at https://github.com/coala/coala/pull/4726/files/fa62b7ba0d032b0d65a8c25c57f121b738a04202#diff-aed82cdd504caf613603b250c092f460L56. I've shifted this condition below show-bears condition in coala.py file.\n@Makman2", "diff": "@@ -46,34 +46,17 @@ def mode_json(args, debug=False):\n     import json\n \n     from coalib.coala_main import run_coala\n-    from coalib.misc.DictUtilities import inverse_dicts\n-    from coalib.misc.Exceptions import get_exitcode\n     from coalib.output.Logging import configure_json_logging\n     from coalib.output.JSONEncoder import create_json_encoder\n \n     if args.log_json:\n         log_stream = configure_json_logging()\n \n     JSONEncoder = create_json_encoder(use_relpath=args.relpath)\n-    results = []\n-\n-    if args.show_bears:\n-        try:\n-            from coalib.parsing.FilterHelper import apply_filter\n-\n-            local_bears, global_bears = apply_filter(\n-                'language', args.filter_by_language)\n-            bears = inverse_dicts(local_bears, global_bears)\n-            for bear, _ in sorted(bears.items(),\n-                                  key=lambda bear_tuple:\n-                                  bear_tuple[0].name):\n-                results.append(bear)\n-        except BaseException as exception:  # pylint: disable=broad-except\n-            return get_exitcode(exception)\n-    else:\n-        results, exitcode, _ = run_coala(args=args, debug=debug)\n \n-    retval = {'bears': results} if args.show_bears else {'results': results}\n+    results, exitcode, _ = run_coala(args=args, debug=debug)\n+\n+    retval = {'results': results}", "created_at": "2017-10-14T15:12:38Z", "last_edited_at": "2017-10-14T18:55:57Z", "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTQ1MDc0Mw==", "fields": {"body": "Imo this should be placed into writing-linter-bears under the regex-output-format section. This is kinda unrelated here.", "diff": "@@ -20,6 +20,11 @@ directory of the coala-tutorial repository.\n     If you want to wrap an already existing tool, please refer to\n     :doc:`this tutorial instead<Writing_Linter_Bears>`.\n \n+.. note::\n+\n+    Also refer `Python3 regex guide <https://docs.python.org/3/library/re.html>`_ for understanding regex.\n+    For further information refer `this <http://www.diveintopython3.net/regular-expressions.html>`_.", "created_at": "2017-10-18T15:26:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTQ1MTQ0OA==", "fields": {"body": "You should also concatenate the following sentence with this one by just writing <linkA> and <linkB>", "diff": "@@ -20,6 +20,11 @@ directory of the coala-tutorial repository.\n     If you want to wrap an already existing tool, please refer to\n     :doc:`this tutorial instead<Writing_Linter_Bears>`.\n \n+.. note::\n+\n+    Also refer `Python3 regex guide <https://docs.python.org/3/library/re.html>`_ for understanding regex.", "created_at": "2017-10-18T15:28:27Z", "last_edited_at": "2017-10-18T15:28:42Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTQ1MTczMw==", "fields": {"body": "Could you rephrase \"this\" and be more precise? Like \"refer to this tutorial\" or so (if it's one)", "diff": "@@ -20,6 +20,11 @@ directory of the coala-tutorial repository.\n     If you want to wrap an already existing tool, please refer to\n     :doc:`this tutorial instead<Writing_Linter_Bears>`.\n \n+.. note::\n+\n+    Also refer `Python3 regex guide <https://docs.python.org/3/library/re.html>`_ for understanding regex.\n+    For further information refer `this <http://www.diveintopython3.net/regular-expressions.html>`_.", "created_at": "2017-10-18T15:29:24Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTQzODAzNQ==", "fields": {"body": "hmm so we don't support args.output... I won't change this commit that much it's still very good, however we have to streamline the functionality of different output formats and arguments like args.output next time.", "diff": "@@ -922,27 +933,49 @@ def print_bears(bears,\n     :param show_params:      True if the parameters and their description\n                              should be shown.\n     :param console_printer:  Object to print messages on the console.\n+    :param args:             Args passed to coala command.\n     \"\"\"\n     if not bears:\n         console_printer.print('No bears to show. Did you forget to install '\n                               'the `coala-bears` package? Try `pip3 install '\n                               'coala-bears`.')\n         return\n \n-    for bear, sections in sorted(bears.items(),\n-                                 key=lambda bear_tuple:\n-                                 bear_tuple[0].name.lower()):\n-        show_bear(bear,\n-                  show_description,\n-                  show_params,\n-                  console_printer)\n+    results = [bear for bear, _ in sorted(bears.items(),\n+                                          key=lambda bear_tuple:\n+                                          bear_tuple[0].name.lower())]\n+    if args and args.json:\n+        from coalib.output.JSONEncoder import create_json_encoder\n+        JSONEncoder = create_json_encoder(use_relpath=args.relpath)\n+        json_output = {'bears': results}\n+        import json\n+        json_formatted_output = json.dumps(json_output,\n+                                           cls=JSONEncoder,\n+                                           sort_keys=True,\n+                                           indent=2,\n+                                           separators=(',', ': '))\n+        if args.output:\n+            filename = str(args.output[0])\n+            with open(filename, 'w+') as fp:\n+                fp.write(json_formatted_output)\n+        else:\n+            print(json_formatted_output)\n+    elif args and args.format:\n+        print_bears_formatted(results)", "created_at": "2017-10-18T14:47:34Z", "last_edited_at": "2017-10-18T14:48:50Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjE2ODAxOA==", "fields": {"body": "args.output is list of file names given as args. It is used in similar manner in other places (a581d09#diff-a297897b536e74044ca36e47697b169dL83) as well.", "diff": "@@ -922,27 +933,49 @@ def print_bears(bears,\n     :param show_params:      True if the parameters and their description\n                              should be shown.\n     :param console_printer:  Object to print messages on the console.\n+    :param args:             Args passed to coala command.\n     \"\"\"\n     if not bears:\n         console_printer.print('No bears to show. Did you forget to install '\n                               'the `coala-bears` package? Try `pip3 install '\n                               'coala-bears`.')\n         return\n \n-    for bear, sections in sorted(bears.items(),\n-                                 key=lambda bear_tuple:\n-                                 bear_tuple[0].name.lower()):\n-        show_bear(bear,\n-                  show_description,\n-                  show_params,\n-                  console_printer)\n+    results = [bear for bear, _ in sorted(bears.items(),\n+                                          key=lambda bear_tuple:\n+                                          bear_tuple[0].name.lower())]\n+    if args and args.json:\n+        from coalib.output.JSONEncoder import create_json_encoder\n+        JSONEncoder = create_json_encoder(use_relpath=args.relpath)\n+        json_output = {'bears': results}\n+        import json\n+        json_formatted_output = json.dumps(json_output,\n+                                           cls=JSONEncoder,\n+                                           sort_keys=True,\n+                                           indent=2,\n+                                           separators=(',', ': '))\n+        if args.output:\n+            filename = str(args.output[0])", "created_at": "2017-10-23T05:20:29Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjMzNTU5Nw==", "fields": {"body": "@Makman2 yes docker compresses data. The actual amount of data that\u2019s pushed will be compressed before sending,", "diff": "@@ -1,3 +1,44 @@\n+What is Docker ?\n+================\n+\n+Docker is a tool designed to make it easier to create, deploy, and run\n+applications by using containers. Containers allow a developer to package\n+up an application with all of the parts it needs, like libraries and other\n+dependencies, and ship it all out as a single package.\n+\n+With the help of containers, the developer can rest assured that\n+the application will run on other machine regardless of any\n+customized settings that machine might have that could differ from the\n+machine used for writing and testing the code.\n+\n+Unlike a virtual machine, rather than creating a whole virtual operating\n+system, Docker allows applications to use the same kernel as the system\n+that they're running on and only requires applications be shipped\n+with things not already running on the host computer. This gives a\n+significant performance boost and reduces the size of the application.", "created_at": "2017-10-23T17:20:42Z", "last_edited_at": null, "author": "acashmkj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQwMTI1Ng==", "fields": {"body": "Please insert a new line at the end.", "diff": "@@ -0,0 +1,19 @@\n+root = true\n+\n+[**]\n+end_of_line = lf\n+insert_final_newline = true\n+max_line_length = 80\n+\n+# Set default charset and indentation for python files\n+[{*.py, coalib/**/*.py, ./coala, tests/**/*.py}]\n+charset = utf-8\n+indent_style = space\n+indent_size = 4\n+trim_trailing_whitespace = true\n+\n+# 2 space indentation for yml fies and package.json\n+[{package.json,*.yml}]\n+indent_style = space\n+indent_size = 2\n+trim_trailing_whitespace = true", "created_at": "2017-10-27T12:46:57Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzU2MTkyOQ==", "fields": {"body": "Please add test case to cover this scenario as well. That's why travis CI is failing due to coverage.", "diff": "@@ -74,12 +74,20 @@ def run(self, filename, file):\n                 version_spec_match.end(1) + 1,\n             )\n \n-            yield Result(\n-                self,\n-                message_template.format(vuln=vulnerability),\n-                additional_info=vulnerability.description,\n-                affected_code=(source_range, ),\n-            )\n+            try:\n+                yield Result(\n+                    self,\n+                    message_template.format(vuln=vulnerability),\n+                    additional_info=vulnerability.description,\n+                    affected_code=(source_range, ),\n+                )\n+            except:  # Ignore PycodestyleBear (E722)", "created_at": "2017-10-28T19:08:42Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzU3MTcxOA==", "fields": {"body": "You can remove this comment now since you have specified the exception name, it will now conform to standards :)\nI had a look at your circleCI build, I think you should have a look at other coala-bears PRs that were built after yours to see if this issue is coming up only for this or others too :)", "diff": "@@ -74,12 +74,20 @@ def run(self, filename, file):\n                 version_spec_match.end(1) + 1,\n             )\n \n-            yield Result(\n-                self,\n-                message_template.format(vuln=vulnerability),\n-                additional_info=vulnerability.description,\n-                affected_code=(source_range, ),\n-            )\n+            try:\n+                yield Result(\n+                    self,\n+                    message_template.format(vuln=vulnerability),\n+                    additional_info=vulnerability.description,\n+                    affected_code=(source_range, ),\n+                )\n+            except KeyError:  # Ignore PycodestyleBear (E722)", "created_at": "2017-10-29T06:25:54Z", "last_edited_at": "2017-10-29T06:26:44Z", "author": "stellargo", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzU5MzIxMw==", "fields": {"body": "what we needed from the new annotationbear is that it should separately return ranges for singleline/multiline strings/comments.", "diff": "@@ -31,274 +37,50 @@ def run(self, filename, file, language: str, coalang_dir: str = None):\n             ``u\"string\"``, the ``u`` will not be in the source range).\n         \"\"\"\n         try:\n-            lang_dict = LanguageDefinition(language, coalang_dir=coalang_dir)\n-        except FileNotFoundError:\n+            # ignore whitespace on pygments lexer name lookup\n+            pygment = get_lexer_by_name(re.sub(r'\\s+', '', language))\n+        except ClassNotFound:\n             content = ('coalang specification for ' + language +\n                        ' not found.')\n             yield HiddenResult(self, content)\n             return\n \n-        string_delimiters = dict(lang_dict['string_delimiters'])\n-        multiline_string_delimiters = dict(\n-            lang_dict['multiline_string_delimiters'])\n-        multiline_comment_delimiters = dict(\n-            lang_dict['multiline_comment_delimiters'])\n-        comment_delimiter = dict(lang_dict['comment_delimiter'])\n-        string_ranges = comment_ranges = ()\n+        # the HiddenResult's content dict of SourceRange objects\n+        content = {'comments': (), 'strings': ()}\n+        # the pygments token types for the different types of source ranges\n+        token_types = {'comments': Token.Comment, 'strings': Token.String}", "created_at": "2017-10-29T20:21:57Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzgxNDI1Nw==", "fields": {"body": "Add charset = utf-8 here rather than python block", "diff": "@@ -0,0 +1,19 @@\n+root = true\n+\n+[**]\n+end_of_line = lf", "created_at": "2017-10-30T19:47:55Z", "last_edited_at": null, "author": "aashutoshrathi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzgxOTkwNQ==", "fields": {"body": "Not with @linter ;)", "diff": "@@ -0,0 +1,44 @@\n+from os.path import dirname\n+\n+from coala_utils.decorators import enforce_signature\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='pyang',\n+        use_stderr=True,\n+        output_format='regex',\n+        output_regex=r'.*:(?P<line>\\d+):\\s*(?P<message>.*)')\n+class YANGBear:", "created_at": "2017-10-30T20:09:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzkwMjA0Mw==", "fields": {"body": "No @newbazz, Add a new line charset = utf-8.", "diff": "@@ -0,0 +1,19 @@\n+root = true\n+\n+[**]\n+end_of_line = lf", "created_at": "2017-10-31T06:08:04Z", "last_edited_at": "2017-10-31T06:11:27Z", "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzkwMzkyNg==", "fields": {"body": "Please add a space after,", "diff": "@@ -0,0 +1,20 @@\n+root = true\n+\n+[**]\n+charset = utf-8\n+end_of_line = lf\n+insert_final_newline = true\n+max_line_length = 80\n+\n+# Set default charset and indentation for python files\n+[{*.py, coalib/**/*.py, ./coala, tests/**/*.py}]\n+charset = utf-8\n+indent_style = space\n+indent_size = 4\n+trim_trailing_whitespace = true\n+\n+# 2 space indentation for yml fies and package.json\n+[{package.json,*.yml}]", "created_at": "2017-10-31T06:28:07Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODIxMDgxNA==", "fields": {"body": "Please remove the spaces after ,.\nCheck http://editorconfig.org/ for more references.", "diff": "@@ -0,0 +1,20 @@\n+# top-most EditorConfig file\n+root = true\n+\n+[*]\n+end_of_line = lf\n+insert_final_newline = true\n+max_line_length = 80\n+\n+# Set default charset and indentation for python files\n+[{*.py, coalib/**/*.py, ./coala}]", "created_at": "2017-11-01T09:08:59Z", "last_edited_at": null, "author": "aashutoshrathi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODMwOTc4NQ==", "fields": {"body": "optional: I usually prefer putting the space into the string from the previous line, but as you like :) just a note \ud83d\udc4d", "diff": "@@ -12,11 +13,35 @@ class InteractionsTest(unittest.TestCase):\n     def test_(self):\n         log_printer = LogPrinter(NullPrinter())\n         section = Section('')\n-        self.assertRaises(TypeError, fail_acquire_settings, log_printer, None,\n-                          section)\n+        self.assertRaises(TypeError, fail_acquire_settings, log_printer,\n+                          None, section)\n+\n         self.assertRaises(AssertionError,\n                           fail_acquire_settings,\n                           log_printer,\n                           {'setting': ['description', 'bear']}, section)\n-        self.assertEqual(fail_acquire_settings(log_printer, {}, section), None,\n-                         section)\n+\n+        self.assertEqual(fail_acquire_settings(log_printer, {}, None),\n+                         None, section)\n+\n+    def test_section_deprecation(self):\n+\n+        with LogCapture() as capture:\n+\n+            self.test_()\n+            capture.check(\n+              ('root',\n+               'WARNING',\n+               'fail_acquire_settings: section parameter'\n+               ' is deprecated.'),\n+              ('root',\n+               'WARNING',\n+               'fail_acquire_settings: section parameter'\n+               ' is deprecated.'),", "created_at": "2017-11-01T16:25:16Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODU0NDIyOA==", "fields": {"body": "I think generating is not the most appropriate word that can be used here. Perhaps you could write something like \"If you are making..\"", "diff": "@@ -333,6 +333,12 @@ and clicking ``New Pull Request``.\n     updated, you can edit your comment instead. If you need to add new\n     information, make a new comment.\n \n+    If you are generating a pull request for a particular issue, you need to", "created_at": "2017-11-02T14:14:39Z", "last_edited_at": null, "author": "troublemagnet", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ==", "fields": {"body": "Please make it to  https://coala.io instead https://coala.io/", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T12:19:56Z", "last_edited_at": "2017-11-03T14:42:32Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg==", "fields": {"body": "That is irrelevant", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T13:58:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA==", "fields": {"body": "This can be a bit misleading. I suggest you, write it in the form minified files (*.min.js) and backup files (*.orig).", "diff": "@@ -39,6 +39,15 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n+It can be used to define the type of files you usually\n+don't want to lint like minified files\n+and backup files (e.g. ``*.min.js``, ``*.orig``)", "created_at": "2017-11-03T14:36:02Z", "last_edited_at": "2017-11-03T14:41:58Z", "author": "troublemagnet", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODgzMzk5NA==", "fields": {"body": "CI build failed due to the failing tests, you should modify the tests to fix it.\nI think the SystemExit call caused the tests failing, and you can fix it like this:\nwith self.assertRaises(SystemExit) as cm:\n    your test code", "diff": "@@ -185,6 +186,21 @@ def warn_nonexistent_targets(targets, sections, log_printer=None):\n         raise SystemExit(2)  # Invalid CLI options provided\n \n \n+def warn_bears_absent(bears, log_printer=None):\n+    \"\"\"\n+    Checks if coala-bears was also installed.\n+\n+    :param bears:        A dictionary with bears as keys and list of\n+                         sections containing those bears as values.\n+    :param log_printer:  A log printer to emit the warning to.\n+    \"\"\"\n+    if not bears:\n+        logging.error('No bears are installed. Did you forget to install '\n+                      'the `coala-bears` package? Try `pip3 install '\n+                      'coala-bears`.')\n+        raise SystemExit(2)", "created_at": "2017-11-03T16:38:38Z", "last_edited_at": null, "author": "PlentyMore", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkyODgyOA==", "fields": {"body": "What is 288 ?", "diff": "@@ -31,6 +31,13 @@ app.directive('getinvolved', ['$http', function ($http) {\n             $scope.loadMore = function () {\n                 $scope.totalDisplayed += 20;\n             };\n+\n+            $scope.nomoreItems = function () {\n+                if($scope.totalDisplayed > 288 ) {", "created_at": "2017-11-04T12:04:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTc0Mjk5MA==", "fields": {"body": "We don't build only if we're not on master and we are not supported,\nlet x == 'is not supported'\ny == 'is on master'\nx && !y == don't build\nlet's see when we do build\n!(x && !y) --by deMorgan theorem--> !x || y", "diff": "@@ -0,0 +1,22 @@\n+#!/bin/bash\n+\n+set -e\n+\n+# Get environment variables, readily decrypted by rultor\n+#source ../rultor_secrets.sh\n+\n+if [${UNSUPPORTED} == \"false\"] || [${TRAVIS_BRANCH} == \"master\"]; then", "created_at": "2017-11-08T17:40:37Z", "last_edited_at": null, "author": "Asalle", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkwODkzNA==", "fields": {"body": "an* issue template", "diff": "@@ -0,0 +1,114 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Add a ISSUE_TEMPLATE.md file to a GitHub repository.\"\n+difficulty: low\n+initiatives:\n+  - GCI\n+issues:\n+  - \"https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md\"\n+markdown: add_issue_template.md\n+mentors:\n+  - Monal5031\n+  - yashovardhanagrawal\n+  - prashant0598\n+name: \"Add a ISSUE_TEMPLATE.md file to GitHub repository\"\n+requirements:\n+  - \"Joined http://coala.io/chat .\"\n+tags:\n+  - github\n+  - markdown\n+  - standard templates\n+---\n+This is a repeatable task for Google Code-in.\n+\n+## Task\n+\n+Add a ISSUE_TEMPLATE.md file to a GitHub repository mentioned in the\n+issue's wiki, so that a standard template appears whenever someone\n+will try to create a new issue.\n+\n+## Requirements\n+\n+This task only requires use of the GitHub web interface.\n+\n+## Process\n+\n+There are three steps for this task:\n+\n+1. Select a repository with open issue from wiki link.\n+2. Determine a suitable standard issue template for the repository.\n+3. Create a pull request adding a `ISSUE_TEMPLATE.md` file.\n+\n+----\n+\n+## Step 1\n+\n+Go through the [issue wiki](https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md)\n+and select an issue which is not yet completed or taken by someone else.\n+\n+Check that GitHub does not show anything while opening an issue\n+directly from GitHub UI, (You will have to check this manually).\n+\n+Check that the repository does not have a `ISSUE_TEMPLATE.md` file.\n+Maybe GitHub does not recognise the contents of the file.\n+\n+Check the pull requests for the repository.\n+Maybe someone has already proposed a `ISSUE_TEMPLATE.md` file.\n+Do not send another pull request to add a `ISSUE_TEMPLATE.md` file.\n+\n+## Step 2\n+\n+### Does the repository already have a issue template selected?", "created_at": "2017-11-09T09:48:35Z", "last_edited_at": null, "author": "neelanshsahai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkxMDE3MA==", "fields": {"body": "Make sure you are not missing out* any points which must be there* in the file.", "diff": "@@ -0,0 +1,114 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Add a ISSUE_TEMPLATE.md file to a GitHub repository.\"\n+difficulty: low\n+initiatives:\n+  - GCI\n+issues:\n+  - \"https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md\"\n+markdown: add_issue_template.md\n+mentors:\n+  - Monal5031\n+  - yashovardhanagrawal\n+  - prashant0598\n+name: \"Add a ISSUE_TEMPLATE.md file to GitHub repository\"\n+requirements:\n+  - \"Joined http://coala.io/chat .\"\n+tags:\n+  - github\n+  - markdown\n+  - standard templates\n+---\n+This is a repeatable task for Google Code-in.\n+\n+## Task\n+\n+Add a ISSUE_TEMPLATE.md file to a GitHub repository mentioned in the\n+issue's wiki, so that a standard template appears whenever someone\n+will try to create a new issue.\n+\n+## Requirements\n+\n+This task only requires use of the GitHub web interface.\n+\n+## Process\n+\n+There are three steps for this task:\n+\n+1. Select a repository with open issue from wiki link.\n+2. Determine a suitable standard issue template for the repository.\n+3. Create a pull request adding a `ISSUE_TEMPLATE.md` file.\n+\n+----\n+\n+## Step 1\n+\n+Go through the [issue wiki](https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md)\n+and select an issue which is not yet completed or taken by someone else.\n+\n+Check that GitHub does not show anything while opening an issue\n+directly from GitHub UI, (You will have to check this manually).\n+\n+Check that the repository does not have a `ISSUE_TEMPLATE.md` file.\n+Maybe GitHub does not recognise the contents of the file.\n+\n+Check the pull requests for the repository.\n+Maybe someone has already proposed a `ISSUE_TEMPLATE.md` file.\n+Do not send another pull request to add a `ISSUE_TEMPLATE.md` file.\n+\n+## Step 2\n+\n+### Does the repository already have a issue template selected?\n+\n+It is quite common for a repository to not have a `ISSUE_TEMPLATE.md`\n+file, but still have already selected a template which they want to use or\n+even have some points which need be added.\n+\n+If the repository has already chosen a template and/or points, simply create the\n+`ISSUE_TEMPLATE.md` file with that template and/or points.\n+\n+Check the issues in the repository.\n+Maybe an issue already contains a discussion about template or points to use.\n+\n+A good approach is to search the repository for the words `ISSUE_TEMPLATE` or \n+`issue template`, and read each search result for hints of existing template\n+and/or points.\n+\n+If you are confident that you have found the template and/or points that is implicitly\n+chosen by the project team members, skip to Step 3.\n+\n+### Or, discuss suitable points for the issue template with project team members.\n+\n+It is always good to consult a mentor or project team member for suitable points for\n+the template.\n+\n+It is recommended that beginners go back to step 1 and find a different repository that\n+already mentions a specific issue template.\n+\n+It maybe possible that issue template is going to be same for multiple repositories,\n+in such case it is mentioned in issue description which existing template to use.\n+\n+## Step 3\n+\n+You can read more about the standard templates [here](https://github.com/blog/2111-issue-and-pull-request-templates)\n+\n+1. Copy the templates and/or points in a file temporarily.\n+2. Fork the repository\n+3. Add a `ISSUE_TEMPLATE.md` file to the repository, committing the new file to a branch.\n+   1. Make sure you paste all the contents properly in the file.\n+   2. Make sure you don't miss out on any points which need to be in the file.", "created_at": "2017-11-09T09:53:34Z", "last_edited_at": "2017-11-09T09:57:41Z", "author": "neelanshsahai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDAzNjIzMA==", "fields": {"body": "foo doesnt have version 1.0, so that is erroneous input.\nAnd you are testing comments here.  That should be done in a separate test method.  One test method per type of possible error.  The name of the method then says what broke.", "diff": "@@ -0,0 +1,25 @@\n+from queue import Queue\n+from bears.python.requirements.PySafetyBear import PySafetyBear\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+\n+\n+class PySafetyBearTest(LocalBearTestHelper):\n+\n+    def setUp(self):\n+        self.uut = PySafetyBear(Section('name'), Queue())\n+\n+    def test_without_vulnerability(self):\n+        self.check_validity(self.uut, ['# whee', 'foo==1.0', '# whee'])", "created_at": "2017-11-09T17:46:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDMzNjMwMg==", "fields": {"body": "https://rubygems.org/gems/jekyll-netlify\nhttps://github.com/jayvdb/jekyll-netlify\n(my first Ruby gem)", "diff": "@@ -1,4 +1,5 @@\n source \"https://rubygems.org\"\n \n gem \"jekyll\"\n+gem \"jekyll-netlify\"", "created_at": "2017-11-10T20:59:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDQyNjc4Nw==", "fields": {"body": "Indeed, good old boolean functions.\n\nCan we drop building and buidling docs on python < 3.4?\n\nFile an issue ;)", "diff": "@@ -0,0 +1,22 @@\n+#!/bin/bash\n+\n+set -e\n+\n+# Get environment variables, readily decrypted by rultor\n+#source ../rultor_secrets.sh\n+\n+if [${UNSUPPORTED} == \"false\"] || [${TRAVIS_BRANCH} == \"master\"]; then", "created_at": "2017-11-12T22:37:53Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDcwMzk4MQ==", "fields": {"body": "I think that's a bit redundant since it's already on the PR template...", "diff": "@@ -0,0 +1,76 @@\n+---\n+collaborating_projects:\n+  - docker-coala-base\n+desc: \"Find creative ways to decrease the coala Docker image size\"\n+issues:\n+  - https://github.com/coala/docker-coala-base/issues/55\n+difficulty: \"hard\"\n+initiatives:\n+  - GCI\n+markdown: decrease_docker_image_size.md\n+mentors:\n+  - yukiisbored\n+name: \"Decrease Docker image size\"\n+tags:\n+  - coala\n+  - docker\n+  - linux\n+---\n+\n+## Task\n+\n+Submit a Pull Request to the [docker-coala-base][repo] project which decreases\n+the image size.\n+\n+## Objective\n+\n+This task is considerably hard which requires creativity and knowledge for\n+Docker and Linux to decrease the Docker Image size.\n+\n+## Background\n+\n+The Docker image for coala is huge (around ~2G!) which makes it a huge drawback\n+to be used especially for those who are with limited Internet access.\n+\n+Decreasing it isn't easy because a lot of linters requires a lot of dependencies\n+and some weird edge cases as well.\n+\n+Since this is Docker where images are compose of layers, deleting stuff from\n+other layers (like the openSUSE base image) doesn't change much.\n+\n+## Finding bloat\n+\n+To find bloat, we can start by seeing the size generated by each layer. We can\n+do this by running `docker history <image name>` which will give us each layers'\n+size.\n+\n+Some of these layers are probably outdated since `docker history` also shows\n+previous versions as well, so make sure you're looking at a layer which is a\n+part of the latest image.\n+\n+Finding the actual files within the layer can be challenging and requires\n+knowing what the command which makes the layer does.\n+\n+For example, when installing a program it may contain some documentations since\n+this is a Docker image which sole purpose is to run coala the documentation\n+isn't really helpful or even important.\n+\n+## Removing bloat\n+\n+Removing bloat for a layer can be done just by adding another command to the\n+layer's command. This should be done **not** by adding another `RUN` command but\n+appending it's `RUN` command with `&&`.\n+\n+Example:\n+```Dockerfile\n+RUN zypper in kirisame && \\\n+    rm -rf /usr/share/man/man1/kirisame.gz \\\n+           /usr/share/man/man6/kirisamectl.gz\n+```\n+\n+## Submit a PR\n+\n+If you've decreased any amount of the Docker Image, please create a PR and\n+submit it to the [repo][repo].", "created_at": "2017-11-14T00:10:15Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDg5MDYwOA==", "fields": {"body": "That explains what you are doing, but it is wrong.  Please understand what check_invalidity is doing.", "diff": "@@ -0,0 +1,25 @@\n+from queue import Queue\n+from bears.python.requirements.PySafetyBear import PySafetyBear\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+\n+\n+class PySafetyBearTest(LocalBearTestHelper):\n+\n+    def setUp(self):\n+        self.uut = PySafetyBear(Section('name'), Queue())\n+\n+    def test_without_vulnerability(self):\n+        self.check_validity(self.uut, ['lxml==3.6.0'])\n+\n+    def test_with_vulnerability(self):\n+        self.check_invalidity(self.uut, ['bottle<0.12.10', 'bottle==0.10.1'])", "created_at": "2017-11-14T16:41:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA==", "fields": {"body": "Hmm that reads bad as a first sentence. Rather I would make some kind of citation at the end^^\nAlso:\n\nThe layout needs to be very clear that it is an unmodified copy only, and no editing of the text is desirable.\n\nNot sure that this intention gets to the reader here^^", "diff": "@@ -1,6 +1,8 @@\n What is Docker?\n ===============\n \n+According to `opensource.com <https://opensource.com/resources/what-docker>`__:", "created_at": "2017-11-15T17:21:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTM4MTQ4Ng==", "fields": {"body": "No, we avoid == if possible.", "diff": "@@ -4,11 +4,10 @@ apertium-lint~=0.29\n autoflake~=0.7\n autopep8~=1.2\n bandit~=1.2\n-click==6.6\n cmakelint~=1.3\n cppclean~=0.12.0\n cpplint~=1.3\n-dennis~=0.8\n+dennis~=0.9", "created_at": "2017-11-16T10:57:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTg0NDA2Nw==", "fields": {"body": "and a positive message\nlike\n\nYes, coala will apply for Google Summer of Code - 2018. You might read the GSoC Timeline to get an idea of how things will proceed.", "diff": "@@ -0,0 +1,3 @@\n+---\n+question: \"coala will apply to GSOC 2018\"\n+---", "created_at": "2017-11-18T18:44:21Z", "last_edited_at": "2017-11-18T18:46:09Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTgyOTY2OQ==", "fields": {"body": "Remove this line", "diff": "@@ -0,0 +1,62 @@\n+import json\n+import os\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.results.Result import Result\n+\n+\n+@linter(executable='sass-lint')\n+class SASSLintBear:\n+    \"\"\"\n+    Check SCSS/SASS code to keep it clean and readable.\n+\n+    More information is available at <https://github.com/sasstools/sass-lint>.\n+    \"\"\"\n+\n+    LANGUAGES = {'SCSS', 'SASS'}\n+    # https://github.com/sasstools/sass-lint/blob/develop/README.md", "created_at": "2017-11-18T05:58:07Z", "last_edited_at": null, "author": "naveentata", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTgzODM4MQ==", "fields": {"body": "please remove space", "diff": "@@ -0,0 +1,59 @@\n+import json\n+import os\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.results.Result import Result\n+\n+\n+@linter(executable='sass-lint')\n+class SASSLintBear:\n+    \"\"\"\n+    Check SCSS/SASS code to keep it clean and readable.\n+    \"\"\"\n+\n+    LANGUAGES = {'SCSS', 'SASS'}\n+    REQUIREMENTS = {NpmRequirement('sass-lint', '1.12.1')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting'}\n+    SEE_MORE = 'https://github.com/sasstools/sass-lint'\n+\n+    severity_map = {2: RESULT_SEVERITY.MAJOR,\n+                    1: RESULT_SEVERITY.NORMAL,\n+                    0: RESULT_SEVERITY.INFO}\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file, sasslint_config: str=''):\n+        \"\"\"\n+        :param sasslint_config: The location of the sass-lint config file.\n+        \"\"\"\n+        args = tuple()\n+\n+        if os.path.splitext(filename)[1] == '.scss':\n+            args += ('--syntax=scss',)\n+", "created_at": "2017-11-18T13:56:13Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTgzODQxMg==", "fields": {"body": "same here extra space please remove it and for others below", "diff": "@@ -0,0 +1,122 @@\n+import os\n+\n+from bears.scss.SASSLintBear import SASSLintBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+# Test examples from http://sass-lang.com/guide\n+good_sass_file = '''\n+nav\n+  ul\n+    list-style: none\n+    margin: 0\n+    padding: 0\n+\n+  li\n+    display: inline-block\n+\n+  a\n+    display: block\n+    padding: 6px 12px\n+    text-decoration: none\n+", "created_at": "2017-11-18T13:59:21Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTgzODQyOA==", "fields": {"body": "2 line space make it 1 please,even it will work without any space", "diff": "@@ -0,0 +1,122 @@\n+import os\n+\n+from bears.scss.SASSLintBear import SASSLintBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+# Test examples from http://sass-lang.com/guide\n+good_sass_file = '''\n+nav\n+  ul\n+    list-style: none\n+    margin: 0\n+    padding: 0\n+\n+  li\n+    display: inline-block\n+\n+  a\n+    display: block\n+    padding: 6px 12px\n+    text-decoration: none\n+\n+'''\n+\n+bad_sass_file = '''\n+nav\n+  ul\n+    margin: 0\n+    padding: 0 !important\n+    err-style: none\n+\n+  li\n+    display: inline-block\n+\n+  a\n+    display: block\n+    padding: 6px 12px\n+    text-decoration: none\n+\n+'''\n+\n+good_sass_file_with_config = '''\n+nav\n+  ul\n+    margin: 0\n+    padding: 0 !important\n+\n+  li\n+    display: inline-block\n+\n+'''\n+\n+good_scss_file = \"\"\"\n+nav {\n+  ul {\n+    list-style: none;\n+    margin: 0;\n+    padding: 0;\n+  }\n+\n+  li { display: inline-block; }\n+\n+  a {\n+    display: block;\n+    padding: 6px 12px;\n+    text-decoration: none;\n+  }\n+}\n+\"\"\"\n+\n+bad_scss_file = \"\"\"\n+nav {\n+  ul {\n+    margin: 0\n+    padding: 0\n+    list-style: none\n+  }\n+\n+  li { display: inline-block; }\n+\n+  a {\n+    display: block;\n+    padding: 6px 12px;\n+    text-decoration: none;\n+}\n+\"\"\"\n+\n+", "created_at": "2017-11-18T14:01:12Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MjgyODIzMQ==", "fields": {"body": "module_dir should never be in sys.path.\nAdd an assert that module_dir is not in sys.path.\nDestroy this if block, and rewrite this patch based on the above, fixing any test which violates this rule.", "diff": "@@ -28,6 +25,18 @@ def _import_module(file_path):\n                 module_name = cased_module_name\n                 break\n \n+    if module_dir not in sys.path:", "created_at": "2017-11-23T15:30:50Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzA0ODQ0MQ==", "fields": {"body": "Output should be {} or [] and not empty.", "diff": "@@ -938,6 +939,12 @@ def test_show_bears_empty(self):\n             show_bears({}, {}, True, True, self.console_printer)\n             self.assertIn('No bears to show.', stdout.getvalue())\n \n+    def test_show_bears_with_json(self):\n+        args = default_arg_parser().parse_args(['--json'])\n+        with retrieve_stdout() as stdout:\n+            show_bears({}, {}, True, True, self.console_printer, args)\n+            self.assertIn('', stdout.getvalue())", "created_at": "2017-11-25T15:43:20Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzA5MTUwNQ==", "fields": {"body": "or generally a conversion function instead of a class", "diff": "@@ -22,6 +23,23 @@ def _format_action_invocation(self, action):\n             return ', '.join(parts)\n \n \n+class PathArg(str):\n+    \"\"\"\n+    Uni(xi)fying OS-native directory separators in path arguments.\n+\n+    Removing the pain from interactively using coala in a Windows cmdline,\n+    because backslashes are interpreted as escaping syntax and therefore\n+    removed when arguments are turned into coala settings\n+\n+    >>> import os\n+    >>> PathArg(os.path.join('path', 'with', 'separators'))\n+    'path/with/separators'\n+    \"\"\"\n+\n+    def __new__(cls, path):\n+        return str.__new__(cls, path.replace(os.path.sep, '/'))", "created_at": "2017-11-27T01:33:55Z", "last_edited_at": "2017-11-27T01:33:59Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzA5MTUzNA==", "fields": {"body": "not sure if we should call it path_arg instead (thinking of str, int, etc because these are also all lowercase)", "diff": "@@ -22,6 +23,23 @@ def _format_action_invocation(self, action):\n             return ', '.join(parts)\n \n \n+class PathArg(str):", "created_at": "2017-11-27T01:34:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzEyOTgwOA==", "fields": {"body": "@Makman2 I also thought a lot about that... But lowercase path is usually used for instances. All well-known path classes are capitalized, like pathlib.Path or path.py's path.Path", "diff": "@@ -22,6 +23,23 @@ def _format_action_invocation(self, action):\n             return ', '.join(parts)\n \n \n+class PathArg(str):", "created_at": "2017-11-27T08:26:41Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzQ4NjY2NQ==", "fields": {"body": "The assert statement can throw AssertionError. Seems we can have it in the try branch.", "diff": "@@ -166,16 +166,20 @@ def from_clang_fixit(cls, fixit, file):\n         \"\"\"\n         assert isinstance(file, (list, tuple))", "created_at": "2017-11-28T13:12:57Z", "last_edited_at": null, "author": "yashasingh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzQ4NjcyMg==", "fields": {"body": "Accordingly, after having assert statement in try branch. It could be modified as except Error as err: and inside you may handle LibclangError separately. This will make the code more robust IMO \ud83d\ude00", "diff": "@@ -166,16 +166,20 @@ def from_clang_fixit(cls, fixit, file):\n         \"\"\"\n         assert isinstance(file, (list, tuple))\n \n-        oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n-                                  fixit.range.end.line])\n-        endindex = fixit.range.end.column - len(file[fixit.range.end.line-1])-1\n-\n-        newvalue = (oldvalue[:fixit.range.start.column-1] +\n-                    fixit.value +\n-                    oldvalue[endindex:])\n-        new_file = (file[:fixit.range.start.line-1] +\n-                    type(file)(newvalue.splitlines(True)) +\n-                    file[fixit.range.end.line:])\n+        try:\n+            oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n+                                      fixit.range.end.line])\n+            endindex = fixit.range.end.column - len(file[fixit.range.end.line-1])-1\n+\n+            newvalue = (oldvalue[:fixit.range.start.column-1] +\n+                        fixit.value +\n+                        oldvalue[endindex:])\n+            new_file = (file[:fixit.range.start.line-1] +\n+                        type(file)(newvalue.splitlines(True)) +\n+                        file[fixit.range.end.line:])\n+        except LibclangError as err:", "created_at": "2017-11-28T13:13:10Z", "last_edited_at": null, "author": "yashasingh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzY3NzIyMg==", "fields": {"body": "Please do not modify lines that doesn't relate to the commit, so the diff will look nicer ;)", "diff": "@@ -22,7 +22,7 @@\n                     <h4 class=\"left light\">Google Summer of Code 2017 Work Product Submission </h4>\n                 </div>\n                 <br>\n-            </div> \n+            </div>", "created_at": "2017-11-29T02:01:47Z", "last_edited_at": "2017-11-29T02:05:44Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ5NjE1MA==", "fields": {"body": "Well, if we're moving to use of multiple orgs, it'd be better to have a separate model for orgs too.", "diff": "@@ -1 +1,27 @@\n-# Create your models here.\n+import json\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    id = models.IntegerField(default=0, primary_key=True)\n+    display_name = models.CharField(max_length=100, default='')\n+    organization_id = models.IntegerField(default=0)", "created_at": "2017-12-02T13:14:11Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ5NjMwOA==", "fields": {"body": "Why?  This value is like a series .  We'll want to do > and < comparisons, but I cant see date comparisons occurring.\nWe could build a separate structure for GCI programs, because we'll no doubt participate again the future, and we can manually add the start & end dates for each GCI (i.e. Nov 28 - Jan 18?), and date comparisons on them would be sensible.\nThen program_year here is a foreign key.", "diff": "@@ -1 +1,27 @@\n-# Create your models here.\n+import json\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    id = models.IntegerField(default=0, primary_key=True)\n+    display_name = models.CharField(max_length=100, default='')\n+    organization_id = models.IntegerField(default=0)\n+    organization_name = models.CharField(max_length=100, default='')\n+    program_year = models.IntegerField(default=0)", "created_at": "2017-12-02T13:21:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQxOTg3MQ==", "fields": {"body": "I don't think a smiley face emoji is a good option here. This is a list of emojis that will be randomly used down on line 30, and a smiley doesn't fit the pattern.", "diff": "@@ -9,10 +9,20 @@ class Coala_lowercase_c(BotPlugin):\n \n     def callback_message(self, msg):\n         emots = [':(', ':angry:', ':confounded:',\n-                 ':disappointed:', ':triumph:']\n+                 ':disappointed:', ':triumph:' , ':D']", "created_at": "2017-12-01T18:52:53Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDU3MTE1NQ==", "fields": {"body": "sprinkle with CSS classes so that other ppl can make it prettier without fiddling here.", "diff": "@@ -28,4 +30,26 @@ def index(request):\n                  '<a href=\"https://github.com/{username}\">{username}</a>'\n                  .format(student_url=student_url, student_id=student_id,\n                          username=username))\n+    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n+    s.append('</ul><i id=\"time\" data-time=\"{unix}\">'", "created_at": "2017-12-04T07:11:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDc2MDY5MA==", "fields": {"body": "put all of this into two function.\nThe first function should be a HTML unaware utility function which takes a timestamp and ago value, and returns the timestring.\nThe function second should be a function which is given two HTML element objects, one for the time and the other for ago, and this section function would call the first function to get the computed value and would put that value into the ago element.\nOptionally add a third function which takes no arguments, fetches the desired elements, and calls the second function.\nThe second or third function should be invoked from inside the HTML ; worse case, use body.onload to invoke it.", "diff": "@@ -0,0 +1,20 @@\n+var timestamp = document.getElementById('time').getAttribute('data-time');", "created_at": "2017-12-04T20:06:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg1MDEwMw==", "fields": {"body": "you can pass in username here, and it can be None, and use jinja's if syntax.\nBugger it, pass in username to them all, as we have another issue about personalising these messages, so if the username is available, that task becomes a jinja-markdown-only task, so newcomer level.", "diff": "@@ -1,103 +1,40 @@\n import re\n+import glob\n+import os.path\n \n from errbot import BotPlugin, re_botcmd\n+from errbot.templating import tenv\n \n \n class Explain(BotPlugin):\n     \"\"\"\n     Explain various terms\n     \"\"\"\n \n-    MSGS = {\n-        'review': 'After creating your `Pull Request`, it is under the review '\n-                  'process. This can be deduced from the `process/pending '\n-                  'review` label. Now you have to wait for the reviewers to '\n-                  'review your PR. You should *not* ask for reviews on our '\n-                  'Gitter channel - we review those PRs continuously.\\n\\n'\n-                  'We\\'re usually swamped with reviews, while you are waiting '\n-                  '**please review other people\\'s PRs** at [coala.io/review]'\n-                  '(https://coala.io/review): that helps you and will make '\n-                  'your review happen faster as well. As a rule of thumb, '\n-                  '*for every review you receive, give at least one review '\n-                  'to someone else!*\\n\\nFor a good review, look at every '\n-                  'commit on its own and place `ack <sha>`(commit is ready) or '\n-                  '`unack <sha>(commit needs work) needs work` comments on the '\n-                  'pull request, be sure to remove other spacing like tabs. If '\n-                  'you\\'re done with a pull request, you can use '\n-                  '`{bot_prefix} mark wip <pull URL>` to mark it *work in '\n-                  'progress* finally.',\n-        'closes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                  'keyword in commit messages. To get good results from that '\n-                  'we need to use `Closes` for normal issues instead of `Fixes`'\n-                  ' which should only be used for real bugs. (See also [the '\n-                  'commit message docs](https://coala.io/commit).) To change '\n-                  'your message you just use `git commit --amend` and then '\n-                  '`git push --force` the new commit to replace the old one.',\n-        'fixes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                 'keyword in commit messages. To get good results from that '\n-                 'we need to use `Fixes` for bugfix issues instead of '\n-                 '`Closes`. (See also [the commit message docs]'\n-                 '(https://coala.io/commit).) To change your message you '\n-                 'just use `git commit --amend` and then `git push --force` '\n-                 'the new commit to replace the old one.',\n-        'commit message': 'To change your message you just use `git commit '\n-                          '--amend` and then `git push --force` the new '\n-                          'commit to replace the old one.\\n\\nIf you\\'re just '\n-                          'looking to fix an issue very quickly and not '\n-                          'interested in contributing to coala long term, we '\n-                          'can fix up the message for you - just tell us :).',\n-        'rebase': 'It looks like your PR is out of date and needs a rebase.'\n-                  '\\n\\n[This page](https://coala.io/rebase) may help you to get'\n-                  ' started on this. We also have [a quick video tutorial on '\n-                  'how to rebase](https://asciinema.org/a/78683). That should '\n-                  'help you understand the basics of how it works and what you'\n-                  'should be doing.\\n\\nIf you\\'re just looking to fix an issue '\n-                  'very quickly and not interested in contributing to coala '\n-                  'long term, we can fix it up for you - just tell us :).',\n-        'cep': 'At coala we\\'re using [cEP\\'s (coala Enhancement Proposals)]'\n-               '(http://coala.io/cep) to define major design decisions - '\n-               'they\\'re a bit like PEP\\'s but not quite as extensive and '\n-               'obviously written with a lower case c.',\n-        'gitlab': 'We are currently evaluating on if we want to use GitLab for'\n-                  'code hosting. That\\'s why some repositories are already on '\n-                  'GitLab, if you want to participate in the migration '\n-                  'discussion, please add information [at our GitLab wiki page]'\n-                  '(https://github.com/coala/coala/wiki/GitLab).',\n-        'google': 'Hey. This message was triggered because someone was too '\n-                  'lazy to type this *again*. Don\\'t take it personally. '\n-                  'Please.\\n\\nWe all got to learn this: *use google*. Or '\n-                  'duckduckgo. Anything. The search engine that earned your '\n-                  'trust. You got a build error? Search for the first red '\n-                  'thing and google it. You got an exception? *Read the '\n-                  'message.* Search it. *Think.*\\n\\nKeep this in mind: *You*'\n-                  'are sitting in front of the problem, not us. You will have '\n-                  'a much easier time solving it. That\\'s why you should try '\n-                  'doing it first.',\n-        'promotion': 'To become part of the coala developers team, there '\n-                     'are a few steps you need to complete. The newcomer '\n-                     'process is as follows:\\nYou will start as a newcomer, '\n-                     'which is kind of a trial. If you complete the following '\n-                     'tasks, you will become a developer at coala:\\n\\n- run '\n-                     'coala on a project of yours\\n- merge a difficulty/'\n-                     'newcomer Pull Request\\n- review at least a difficulty/'\n-                     'newcomer Pull Request\\n- merge a difficulty/low Pull '\n-                     'Request\\n- review at least a difficulty/low or higher '\n-                     'Pull Request'\n-    }\n+    files = glob.glob('plugins/templates/explanations/*.jinja2.md')\n+    KNOWN_KEYS = []\n+    for fname in files:\n+        KNOWN_KEYS.append(fname.replace(\n+            'plugins/templates/explanations/', ''\n+        ).replace('.jinja2.md', ''))\n \n     ERROR_MSG = (\n         'Sorry, I only know about these things:\\n- ' +\n-        '\\n- '.join(MSGS.keys())\n+        '\\n- '.join(KNOWN_KEYS)\n     )\n \n     @re_botcmd(pattern=r'^explain\\s+(\\w+)(?:\\s+to\\s+@?([\\w-]+))?$',\n                re_cmd_name_help='explain <term>',\n                flags=re.IGNORECASE)\n     def explain(self, msg, match):\n         \"\"\"Explain various terms.\"\"\"  # Ignore QuotesBear\n-        return ('{}'.format('@{}: \\n'.format(match.group(2))\n-                            if match.group(2) else '') +\n-                self.MSGS.get(\n-                    match.group(1).lower(),\n-                    self.ERROR_MSG\n-                ).format(bot_prefix=self.bot_config.BOT_PREFIX))\n+        response = ''\n+        filename = 'explanations/{}.jinja2.md'.format(match.group(1).lower())\n+        if match.group(1).lower() in self.KNOWN_KEYS:\n+            if match.group(2):\n+                response += '@{}: \\n'.format(match.group(2))\n+            response += tenv().get_template(filename).render()", "created_at": "2017-12-05T05:28:42Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4Nzg3MA==", "fields": {"body": "@andrewda missing this in the final change, we want to replace bot_prefix in one of the strings", "diff": "@@ -1,103 +1,44 @@\n import re\n+import glob\n+import os.path\n \n from errbot import BotPlugin, re_botcmd\n+from errbot.templating import tenv\n \n \n class Explain(BotPlugin):\n     \"\"\"\n     Explain various terms\n     \"\"\"\n \n-    MSGS = {\n-        'review': 'After creating your `Pull Request`, it is under the review '\n-                  'process. This can be deduced from the `process/pending '\n-                  'review` label. Now you have to wait for the reviewers to '\n-                  'review your PR. You should *not* ask for reviews on our '\n-                  'Gitter channel - we review those PRs continuously.\\n\\n'\n-                  'We\\'re usually swamped with reviews, while you are waiting '\n-                  '**please review other people\\'s PRs** at [coala.io/review]'\n-                  '(https://coala.io/review): that helps you and will make '\n-                  'your review happen faster as well. As a rule of thumb, '\n-                  '*for every review you receive, give at least one review '\n-                  'to someone else!*\\n\\nFor a good review, look at every '\n-                  'commit on its own and place `ack <sha>`(commit is ready) or '\n-                  '`unack <sha>(commit needs work) needs work` comments on the '\n-                  'pull request, be sure to remove other spacing like tabs. If '\n-                  'you\\'re done with a pull request, you can use '\n-                  '`{bot_prefix} mark wip <pull URL>` to mark it *work in '\n-                  'progress* finally.',\n-        'closes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                  'keyword in commit messages. To get good results from that '\n-                  'we need to use `Closes` for normal issues instead of `Fixes`'\n-                  ' which should only be used for real bugs. (See also [the '\n-                  'commit message docs](https://coala.io/commit).) To change '\n-                  'your message you just use `git commit --amend` and then '\n-                  '`git push --force` the new commit to replace the old one.',\n-        'fixes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                 'keyword in commit messages. To get good results from that '\n-                 'we need to use `Fixes` for bugfix issues instead of '\n-                 '`Closes`. (See also [the commit message docs]'\n-                 '(https://coala.io/commit).) To change your message you '\n-                 'just use `git commit --amend` and then `git push --force` '\n-                 'the new commit to replace the old one.',\n-        'commit message': 'To change your message you just use `git commit '\n-                          '--amend` and then `git push --force` the new '\n-                          'commit to replace the old one.\\n\\nIf you\\'re just '\n-                          'looking to fix an issue very quickly and not '\n-                          'interested in contributing to coala long term, we '\n-                          'can fix up the message for you - just tell us :).',\n-        'rebase': 'It looks like your PR is out of date and needs a rebase.'\n-                  '\\n\\n[This page](https://coala.io/rebase) may help you to get'\n-                  ' started on this. We also have [a quick video tutorial on '\n-                  'how to rebase](https://asciinema.org/a/78683). That should '\n-                  'help you understand the basics of how it works and what you'\n-                  'should be doing.\\n\\nIf you\\'re just looking to fix an issue '\n-                  'very quickly and not interested in contributing to coala '\n-                  'long term, we can fix it up for you - just tell us :).',\n-        'cep': 'At coala we\\'re using [cEP\\'s (coala Enhancement Proposals)]'\n-               '(http://coala.io/cep) to define major design decisions - '\n-               'they\\'re a bit like PEP\\'s but not quite as extensive and '\n-               'obviously written with a lower case c.',\n-        'gitlab': 'We are currently evaluating on if we want to use GitLab for'\n-                  'code hosting. That\\'s why some repositories are already on '\n-                  'GitLab, if you want to participate in the migration '\n-                  'discussion, please add information [at our GitLab wiki page]'\n-                  '(https://github.com/coala/coala/wiki/GitLab).',\n-        'google': 'Hey. This message was triggered because someone was too '\n-                  'lazy to type this *again*. Don\\'t take it personally. '\n-                  'Please.\\n\\nWe all got to learn this: *use google*. Or '\n-                  'duckduckgo. Anything. The search engine that earned your '\n-                  'trust. You got a build error? Search for the first red '\n-                  'thing and google it. You got an exception? *Read the '\n-                  'message.* Search it. *Think.*\\n\\nKeep this in mind: *You*'\n-                  'are sitting in front of the problem, not us. You will have '\n-                  'a much easier time solving it. That\\'s why you should try '\n-                  'doing it first.',\n-        'promotion': 'To become part of the coala developers team, there '\n-                     'are a few steps you need to complete. The newcomer '\n-                     'process is as follows:\\nYou will start as a newcomer, '\n-                     'which is kind of a trial. If you complete the following '\n-                     'tasks, you will become a developer at coala:\\n\\n- run '\n-                     'coala on a project of yours\\n- merge a difficulty/'\n-                     'newcomer Pull Request\\n- review at least a difficulty/'\n-                     'newcomer Pull Request\\n- merge a difficulty/low Pull '\n-                     'Request\\n- review at least a difficulty/low or higher '\n-                     'Pull Request'\n-    }\n+    files = glob.glob('plugins/templates/explanations/*.jinja2.md')\n+    KNOWN_KEYS = []\n+    for fname in files:\n+        KNOWN_KEYS.append(fname.replace(\n+            'plugins/templates/explanations/', ''\n+        ).replace('.jinja2.md', ''))\n \n     ERROR_MSG = (\n         'Sorry, I only know about these things:\\n- ' +\n-        '\\n- '.join(MSGS.keys())\n+        '\\n- '.join(KNOWN_KEYS)\n     )\n \n     @re_botcmd(pattern=r'^explain\\s+(\\w+)(?:\\s+to\\s+@?([\\w-]+))?$',\n                re_cmd_name_help='explain <term>',\n                flags=re.IGNORECASE)\n     def explain(self, msg, match):\n         \"\"\"Explain various terms.\"\"\"  # Ignore QuotesBear\n-        return ('{}'.format('@{}: \\n'.format(match.group(2))\n-                            if match.group(2) else '') +\n-                self.MSGS.get(\n-                    match.group(1).lower(),\n-                    self.ERROR_MSG\n-                ).format(bot_prefix=self.bot_config.BOT_PREFIX))", "created_at": "2017-12-05T09:27:14Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4OTY3Mg==", "fields": {"body": "since you are following this everywhere else, append a , ;)", "diff": "@@ -333,13 +320,19 @@ def eligible(user, iss):\n                            'issue. :tada:')\n                 else:\n                     yield 'You are not eligible to be assigned to this issue.'\n-                    yield '\\n'.join(eligility_conditions)\n+                    yield tenv().get_template(\n+                        'errors/not-eligible.jinja2.md'\n+                    ).render(\n+                        organization=self.GH_ORG_NAME,\n+                    )\n             elif user in iss.assignees:\n                 yield ('The issue is already assigned to you.')\n             else:\n-                yield ('The issue is already assigned to someone. Please '\n-                       'check if the assignee is still working on the issue, '\n-                       'if not, you should ask for reassignment.')\n+                yield tenv().get_template(\n+                    'errors/already-assigned.jinja2.md'\n+                ).render(\n+                    username=user", "created_at": "2017-12-05T09:34:35Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg5MjE2NA==", "fields": {"body": "Discussion in gitter regarding this. It messes up the gitter formatting to limit lines to 80 characters.", "diff": "@@ -0,0 +1 @@\n+We use bug prediction in coala which relies on the `Fixes` keyword in commit messages. To get good results from that we need to use `Closes` for normal issues instead of `Fixes` which should only be used for real bugs. (See also [the commit message docs](https://coala.io/commit).) To change your message you just use `git commit --amend` and then `git push --force` the new commit to replace the old one.", "created_at": "2017-12-05T09:44:51Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw==", "fields": {"body": "base url is a constant that may be needed again in future enhancements.", "diff": "@@ -17,20 +17,78 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n-async function fetchOrgsWithLeaders() {\n+async function searchGitHubOrgs(query) {\n+  const token = process.env.GITHUB_TOKEN\n+  const res = await fetch(\n+    `https://api.github.com/search/users?q=${query}%20type:org`,", "created_at": "2017-12-05T16:05:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTA5NDAwMQ==", "fields": {"body": "I think we're using django-distill (static site generator) exclusively, so it'll only get generated once.", "diff": "@@ -14,6 +15,11 @@ def index(request):\n     org_id = linked_students[0]['organization_id']\n     org_name = linked_students[0]['organization_name']\n     s = []\n+\n+    get_logo()", "created_at": "2017-12-05T22:23:11Z", "last_edited_at": "2017-12-05T22:32:00Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAwMTE3Ng==", "fields": {"body": "@nkprince007 most modern browsers support pngs\nhttps://en.wikipedia.org/wiki/Favicon#File_format_support\n(every one on wikipedia listed does)", "diff": "@@ -0,0 +1,27 @@\n+import os\r\n+import requests\r\n+\r\n+\r\n+def get_logo():\r\n+    # Obtain the org name from the Travis environment variables\r\n+    org_name = os.environ['TRAVIS_REPO_SLUG'].split('/')[0]\r\n+\r\n+    image_url_short_max_res = 'http://github.com/%s.png' % (org_name)\r\n+\r\n+    # Follow the redirect to the page containing the image and\r\n+    # store it in the response variable\r\n+    response_max_res = requests.get(image_url_short_max_res)\r\n+\r\n+    # Write the image to a file and save\r\n+    image = open('images/org_logo.png', 'wb')\r\n+    image.write(response_max_res.content)\r\n+    image.close()\r\n+\r\n+    # Run the same code again but download a 16x16 version for favicon\r\n+    image_url_short_favicon = 'http://github.com/%s.png?size=16' % (org_name)\r\n+\r\n+    response_favicon = requests.get(image_url_short_favicon)\r\n+\r\n+    image = open('favicon.png', 'wb')\r", "created_at": "2017-12-05T16:29:23Z", "last_edited_at": "2017-12-05T16:30:36Z", "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA==", "fields": {"body": "Remove one of the spaces after the equals sign.\nWe should get coala working ASAP", "diff": "@@ -1,6 +1,7 @@\n const fs = require('fs')\n const Mustache = require('mustache')\n const orgs = require('./out/data.json')\n+const timestamp =  new Date(fs.statSync('./out/data.json').mtime).getTime()", "created_at": "2017-12-05T17:38:31Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE0MjM5OA==", "fields": {"body": "And please change the name of the field. The class name is already Mentors", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100, default='')\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100, default='')\n+    org_logo = models.ImageField(upload_to='', blank=True, default='')\n+    org_url = models.URLField(default='', blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200, default='')\n+    description = models.TextField(max_length=500, default='')\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80, default='')\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)\n+    status = models.IntegerField()\n+    completion_date = models.DateField()\n+    deadline = models.DateField()\n+    modified = models.DateField()\n+\n+class ProgramYear(models.Model):\n+    start_date = models.DateField()\n+    last_date = models.DateField()\n+\n+class Mentors(models.Model):\n+    mentors_email_id = models.EmailField(default='')", "created_at": "2017-12-06T04:04:15Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ==", "fields": {"body": "Weird, ok. I can look into that more in a while, but for now adding both seems fine \ud83d\udc4d", "diff": "@@ -1,8 +1,15 @@\n ---\n+env:\n+  node: true", "created_at": "2017-12-06T08:27:32Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw==", "fields": {"body": "eslint-config-prettier is for turning off eslint rules that conflict with prettier\nhttps://github.com/prettier/eslint-plugin-prettier should be used instead", "diff": "@@ -12,5 +12,9 @@\n   \"dependencies\": {\n     \"mustache\": \"^2.3.0\",\n     \"node-fetch\": \"^1.7.3\"\n+  },\n+  \"devDependencies\": {\n+    \"eslint\": \"^4.12.1\",\n+    \"eslint-config-prettier\": \"^2.9.0\"", "created_at": "2017-12-05T23:51:12Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA==", "fields": {"body": "you can add node_modules/.bin to PATH\nand set NODE_PATH (see our dockerfile)\nhttps://github.com/coala/docker-coala-base/blob/master/Dockerfile#L10\nhttps://github.com/coala/coala-atom/blob/master/circle.yml#L32", "diff": "@@ -1,7 +1,15 @@\n-sudo: false\n-language: node_js\n+sudo: required\n+language: python\n+python: 3.6\n+\n+before_install:\n+  - nvm install 8\n+  - npm install\n+  - npm install -g eslint prettier eslint-plugin-prettier", "created_at": "2017-12-06T01:58:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMjkyMg==", "fields": {"body": "You could rather rename these fields to task, student and organization. Because a ForeignKey attribute actually only holds the primary key of the related members. Check the docs here for more on its internal representation.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100, default='')\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100, default='')\n+    org_logo = models.ImageField(upload_to='', blank=True, default='')\n+    org_url = models.URLField(default='', blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200, default='')\n+    description = models.TextField(max_length=500, default='')\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80, default='')\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)", "created_at": "2017-12-06T11:39:52Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzA4OA==", "fields": {"body": "And please use models.CASCADE for the on_delete keyword argument for ForeignKeys.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100, default='')\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100, default='')\n+    org_logo = models.ImageField(upload_to='', blank=True, default='')\n+    org_url = models.URLField(default='', blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200, default='')\n+    description = models.TextField(max_length=500, default='')\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80, default='')\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)", "created_at": "2017-12-06T11:40:43Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzk0MQ==", "fields": {"body": "Please avoid using fields names similar to the Model class. If it represents the name of a tag, rather use name than tags.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100)\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100)\n+    org_logo = models.ImageField(upload_to='', blank=True)\n+    org_url = models.URLField(blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200)\n+    description = models.TextField(max_length=500)\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80)\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)\n+    status = models.IntegerField()\n+    completion_date = models.DateField()\n+    deadline = models.DateField()\n+    modified = models.DateField()\n+\n+class ProgramYear(models.Model):\n+    start_date = models.DateField()\n+    last_date = models.DateField()\n+\n+class Mentors(models.Model):\n+    email_id = models.EmailField()\n+\n+    def __str__(self):\n+        return self.mentors_email_id\n+\n+class Tags(models.Model):\n+    tags = models.CharField(max_length=100)", "created_at": "2017-12-06T11:45:26Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzk3Ng==", "fields": {"body": "Same thing goes here.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100)\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100)\n+    org_logo = models.ImageField(upload_to='', blank=True)\n+    org_url = models.URLField(blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200)\n+    description = models.TextField(max_length=500)\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80)\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)\n+    status = models.IntegerField()\n+    completion_date = models.DateField()\n+    deadline = models.DateField()\n+    modified = models.DateField()\n+\n+class ProgramYear(models.Model):\n+    start_date = models.DateField()\n+    last_date = models.DateField()\n+\n+class Mentors(models.Model):\n+    email_id = models.EmailField()\n+\n+    def __str__(self):\n+        return self.mentors_email_id\n+\n+class Tags(models.Model):\n+    tags = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.tags\n+\n+class Categories(models.Model):\n+    categories = models.CharField(max_length=100)", "created_at": "2017-12-06T11:45:38Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxNDA5Ng==", "fields": {"body": "Never use private variable names for model fields.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100)\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100)\n+    org_logo = models.ImageField(upload_to='', blank=True)\n+    org_url = models.URLField(blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200)\n+    description = models.TextField(max_length=500)\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80)\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)", "created_at": "2017-12-06T11:46:17Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTMzMzk2NA==", "fields": {"body": "I don't think we need to take care of this separately. This way, we'll two different output if we are printing it on console or in file.\nSomething like this should be fine:\n{\n  bears: []\n}\n\nAnd update the tests accordingly.", "diff": "@@ -952,6 +953,8 @@ def print_bears(bears,\n             filename = args.output[0]\n             with open(filename, 'w') as fp:\n                 fp.write(json_formatted_output)\n+        elif not results:\n+            print(json_output['bears'])", "created_at": "2017-12-06T19:18:52Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTQ5NTAwMQ==", "fields": {"body": "Though I am not sure about this. I think this would be rather // 7. We need the floor value for the number of weeks right.", "diff": "@@ -0,0 +1,80 @@\n+import requests\n+import json\n+import datetime\n+from dateutil import parser, relativedelta\n+\n+issuesurl = \"https://coala.github.io/gh-board/issues.json\"\n+today = datetime.datetime.today()\n+\n+def diff_month(d1, d2):\n+\treturn (d1.year - d2.year) * 12 + d1.month - d2.month\n+\n+def diff_week(d1, d2):\n+\tmonday1 = (d1 - datetime.timedelta(days=d1.weekday()))\n+\tmonday2 = (d2 - datetime.timedelta(days=d2.weekday()))\n+\treturn (monday1 - monday2).days / 7", "created_at": "2017-12-07T11:23:54Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTY5MTYyMg==", "fields": {"body": "EOL", "diff": "@@ -0,0 +1,7 @@\n+.student {\n+    padding-bottom: 20px;\n+}\n+\n+.students {\n+    list-style: none;\n+}", "created_at": "2017-12-08T02:19:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTYzMjgxMg==", "fields": {"body": "data-height=\"\" attribute is not needed, right?", "diff": "@@ -26,8 +26,9 @@ def index(request):\n         student_url = STUDENT_URL.format(org_id=org_id,\n                                          student_id=student_id,\n                                          )\n-        s.append('<li><a href=\"{student_url}\">{student_id}</a>: '\n-                 '<a href=\"https://github.com/{username}\">{username}</a>'\n+        s.append('<li><a href=\"{student_url}\">{student_id}</a>:<br />'\n+                 '<div class=\"github-card\" data-github=\"{username}\" '\n+                 'data-width=\"400\" data-height=\"\" data-theme=\"default\"></div>'", "created_at": "2017-12-07T20:32:01Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTYzMzQ5MA==", "fields": {"body": "Also mention that these {student_id} are student ids, otherwise they'll look like just arbitrary numbers.\nSomething like\n<span>STUDENT ID: </span> {student_id}", "diff": "@@ -26,8 +26,9 @@ def index(request):\n         student_url = STUDENT_URL.format(org_id=org_id,\n                                          student_id=student_id,\n                                          )\n-        s.append('<li><a href=\"{student_url}\">{student_id}</a>: '\n-                 '<a href=\"https://github.com/{username}\">{username}</a>'\n+        s.append('<li><a href=\"{student_url}\">{student_id}</a>:<br />'", "created_at": "2017-12-07T20:34:40Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ==", "fields": {"body": "The <script> tag can be put on the bottom of the body, after app.js", "diff": "@@ -21,6 +21,13 @@ <h1>Google Code-in 2017 Current Leaders</h1>\n     <i>\n       The leading participants for each organization are listed randomly. \n     </i>\n+    <div class=\"twitter\">\n+      <a class=\"twitter-timeline\"  href=\"https://twitter.com/hashtag/googlecodein\"\n+         data-widget-id=\"938830025809432577\">Tweets about GCI\n+      </a>\n+      <script src=\"static/js/twitter.js\"></script>", "created_at": "2017-12-08T04:04:21Z", "last_edited_at": "2017-12-08T04:15:53Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA==", "fields": {"body": "Otherwise it would have so many digits, so maybe not readable?", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen)/(24*3600*1000)\n+const timeLeft = (noClaims-today)/(24*3600*1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100-(timeLeft/totalTime)*100)", "created_at": "2017-12-10T13:19:40Z", "last_edited_at": null, "author": "Grox-Ni", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw==", "fields": {"body": "I prefer this to be in the frontend, because we might not do build everyday.\nUse and modify timeDifference function inside static/js/app.js.", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen) / (24 * 3600 * 1000)\n+const timeLeft = (noClaims - today) / (24 * 3600 * 1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100 - timeLeft / totalTime * 100)", "created_at": "2017-12-10T13:26:14Z", "last_edited_at": "2017-12-10T13:31:14Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw==", "fields": {"body": "As this is invalid on a fork, I think these should be in Travis environment variables. (also COMMIT_*).", "diff": "@@ -1,6 +1,11 @@\n language: python\n python: 3.6\n \n+env:\n+  global:\n+    - ENCRYPTION_LABEL: \"b7c548322a41\"", "created_at": "2017-12-10T14:15:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA==", "fields": {"body": "In my version, the build is not in the deploy script.  The deploy script should take a built version, and overlay it on the previous built version.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN\n+    npm run build\n+    return\n+fi\n+\n+# Save some useful information\n+REPO=`git config remote.origin.url`\n+SSH_REPO=${REPO/https:\\/\\/github.com\\//git@github.com:}\n+SHA=`git rev-parse --verify HEAD`\n+\n+# Clone the existing gh-pages for this repo into out/\n+# Create a new empty branch if gh-pages doesn't exist yet (should only happen on first deploy)\n+rm -r out\n+git clone $REPO out\n+cd out\n+git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH\n+cd ..\n+\n+# Clean out existing contents\n+rm -rf out/*\n+\n+# Run our compile script\n+npm run build", "created_at": "2017-12-10T14:17:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA==", "fields": {"body": "the PR wont get an env var on Travis, or any other sane system (Netlify isnt sane/safe), so this is useless on Travis.\nbut more importantly, this is useless.  If the token is available here, a malicious person could modify this script to emit it to the log , or send it via email to themselves, or anything.\nHowever this isnt such a large problem if the token in GITHUB_TOKEN has no scopes which allow greater access than the malicious person could obtain themselves.  The worst they can do is abuse the token so that GitHub cancels it, breaking the builds.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN", "created_at": "2017-12-10T14:23:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA==", "fields": {"body": "maybe condition: \"$ENCRYPTION_LABEL\" = \"\" ?", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:21:08Z", "last_edited_at": "2017-12-10T15:21:19Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ==", "fields": {"body": "^ Yup, tested on my fork.", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:52:27Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1NDc0OQ==", "fields": {"body": "up to you: maybe inlining args and args.json", "diff": "@@ -929,7 +929,8 @@ def print_bears(bears,\n     :param console_printer:  Object to print messages on the console.\n     :param args:             Args passed to coala command.\n     \"\"\"\n-    if not bears:\n+    json_flag = args and args.json\n+    if not bears and not json_flag:", "created_at": "2017-12-10T17:44:44Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg==", "fields": {"body": "I'd prefer the chat platform type to be included also, to give a bit of clarity in the JSON.", "diff": "@@ -84,13 +95,19 @@ async function fetchOrgsWithData() {\n   const orgs = await fetchOrgs()\n   const fetchingLeaders = orgs.map(org => fetchLeaders(org.id))\n   const fetchingGitHub = orgs.map(org => findOrganization(org))\n+  const fetchingChat = orgs.map(org => chattie(org.irc_channel))\n   const orgLeaders = await Promise.all(fetchingLeaders)\n   const orgGitHub = await Promise.all(fetchingGitHub)\n+  const orgChats = await Promise.all(fetchingChat)\n \n   return orgs.map((org, index) =>\n     Object.assign(org, {\n       leaders: orgLeaders[index],\n       github: orgGitHub[index],\n+      chat: {\n+        url: orgChats[index].url,\n+        image: CHAT_IMAGES[chattie.CHAT[orgChats[index].type]],", "created_at": "2017-12-10T22:29:03Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw==", "fields": {"body": "ESLint wants this all on one line", "diff": "@@ -127,6 +128,18 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n-  fs.writeFileSync(`${__dirname}/../out/data.json`, JSON.stringify(data))\n+  // readable JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.json`,\n+    JSON.stringify(data, null, 2)\n+  )\n+  // minified JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.min.json`,\n+    JSON.stringify(data)\n+  )", "created_at": "2017-12-11T05:23:50Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ==", "fields": {"body": "EOF", "diff": "@@ -128,4 +157,4 @@ <h3>\n     <script src=\"static/js/app.js\"></script>\n     <script src=\"static/js/twitter.js\"></script>\n   </body>\n-</html>\n+</html>", "created_at": "2017-12-11T06:19:53Z", "last_edited_at": "2017-12-11T06:25:53Z", "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA==", "fields": {"body": "Don't use the org's image for their website prompt. Usually a globe is used, similar to https://image.flaticon.com/icons/png/128/12/12195.png (you might need to find one from somewhere else or give proper attribution for that one).", "diff": "@@ -92,26 +107,40 @@ <h3>\n                 {{name}}\n               </a>\n             </h3>\n-            <p>Tasks Completed: {{completed_task_instance_count}}\n-              {{#github}}\n+            <p>Tasks Completed: {{completed_task_instance_count}}</p>\n+            {{#github}}\n               <a href=\"https://github.com/{{github}}\">\n                 <img\n                   src=\"https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\"\n                   class=\"github\"\n                 />\n               </a>\n-              {{/github}}\n-              {{#mailing_list}}\n+            {{/github}}\n+            {{#mailing_list}}\n               <a href=\"{{mailing_list}}\">\n                 <img src=\"static/images/mail.png\" class=\"chat\" />\n               </a>\n-              {{/mailing_list}}\n-              {{#chat}}\n+            {{/mailing_list}}\n+            {{#chat}}\n               <a href=\"{{chat.url}}\">\n                 <img src=\"{{chat.image}}\" class=\"chat\" />\n               </a>\n-              {{/chat}}\n-            </p>\n+            {{/chat}}\n+            {{#twitter_url}}\n+              <a href=\"{{twitter_url}}\">\n+                <img src=\"static/images/logos/twitter.png\" class=\"chat\" />\n+              </a>\n+            {{/twitter_url}}\n+            {{#gplus_url}}\n+              <a href=\"{{gplus_url}}\">\n+                <img src=\"static/images/logos/gplus.png\" class=\"chat\" />\n+              </a>\n+            {{/gplus_url}}\n+            {{#website_url}}\n+              <a href=\"{{website_url}}\">\n+                <img src=\"https://{{image_url}}\" class=\"chat\" />", "created_at": "2017-12-11T06:23:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkyODAzNg==", "fields": {"body": "What do you mean? The repo requirements.txt doesn't contain it.\nEdit: This is the same PR, I have just modified it to include the other changes.", "diff": "@@ -2,3 +2,4 @@ django<2.0\n django-distill\n IGitt\n requests\n+python-dateutil", "created_at": "2017-12-09T17:49:05Z", "last_edited_at": "2017-12-09T17:49:35Z", "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjAwMzc2NA==", "fields": {"body": "ughh. we don't need this test case at all", "diff": "@@ -326,7 +325,7 @@ def test_invite_me(self):\n \n         plugins.labhub.os.environ['GH_TOKEN'] = 'patched?'\n         testbot.assertCommand('!invite me',", "created_at": "2017-12-11T08:11:10Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjE0OTg1NQ==", "fields": {"body": "Use logging please instead of print", "diff": "@@ -166,16 +166,21 @@ def from_clang_fixit(cls, fixit, file):\n         \"\"\"\n         assert isinstance(file, (list, tuple))\n \n-        oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n-                                  fixit.range.end.line])\n-        endindex = fixit.range.end.column - len(file[fixit.range.end.line-1])-1\n-\n-        newvalue = (oldvalue[:fixit.range.start.column-1] +\n-                    fixit.value +\n-                    oldvalue[endindex:])\n-        new_file = (file[:fixit.range.start.line-1] +\n-                    type(file)(newvalue.splitlines(True)) +\n-                    file[fixit.range.end.line:])\n+        try:\n+            oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n+                                      fixit.range.end.line])\n+            endindex = fixit.range.end.column - \\\n+                len(file[fixit.range.end.line-1])-1\n+\n+            newvalue = (oldvalue[:fixit.range.start.column-1] +\n+                        fixit.value +\n+                        oldvalue[endindex:])\n+            new_file = (file[:fixit.range.start.line-1] +\n+                        type(file)(newvalue.splitlines(True)) +\n+                        file[fixit.range.end.line:])\n+        except LibclangError as err:\n+            print('coala requires clang 3.4')", "created_at": "2017-12-11T17:57:34Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI1MDY4Mw==", "fields": {"body": "no please keep it. This is exactly the intention of the except syntax when you provide a specific exception. Catching broad exceptions is usually a bad thing as other errors that you don't know yet are silently catched, and then the program might go into an unpredicted state (which can cause security issues or whatever...).\nRobust code doesn't always mean catching any exception ;)", "diff": "@@ -166,16 +166,20 @@ def from_clang_fixit(cls, fixit, file):\n         \"\"\"\n         assert isinstance(file, (list, tuple))\n \n-        oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n-                                  fixit.range.end.line])\n-        endindex = fixit.range.end.column - len(file[fixit.range.end.line-1])-1\n-\n-        newvalue = (oldvalue[:fixit.range.start.column-1] +\n-                    fixit.value +\n-                    oldvalue[endindex:])\n-        new_file = (file[:fixit.range.start.line-1] +\n-                    type(file)(newvalue.splitlines(True)) +\n-                    file[fixit.range.end.line:])\n+        try:\n+            oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n+                                      fixit.range.end.line])\n+            endindex = fixit.range.end.column - len(file[fixit.range.end.line-1])-1\n+\n+            newvalue = (oldvalue[:fixit.range.start.column-1] +\n+                        fixit.value +\n+                        oldvalue[endindex:])\n+            new_file = (file[:fixit.range.start.line-1] +\n+                        type(file)(newvalue.splitlines(True)) +\n+                        file[fixit.range.end.line:])\n+        except LibclangError as err:", "created_at": "2017-12-12T01:32:22Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI1MDc0OQ==", "fields": {"body": "that's definitely an error, no warning ;)", "diff": "@@ -166,16 +166,21 @@ def from_clang_fixit(cls, fixit, file):\n         \"\"\"\n         assert isinstance(file, (list, tuple))\n \n-        oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n-                                  fixit.range.end.line])\n-        endindex = fixit.range.end.column - len(file[fixit.range.end.line-1])-1\n-\n-        newvalue = (oldvalue[:fixit.range.start.column-1] +\n-                    fixit.value +\n-                    oldvalue[endindex:])\n-        new_file = (file[:fixit.range.start.line-1] +\n-                    type(file)(newvalue.splitlines(True)) +\n-                    file[fixit.range.end.line:])\n+        try:\n+            oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n+                                      fixit.range.end.line])\n+            endindex = fixit.range.end.column - \\\n+                len(file[fixit.range.end.line-1])-1\n+\n+            newvalue = (oldvalue[:fixit.range.start.column-1] +\n+                        fixit.value +\n+                        oldvalue[endindex:])\n+            new_file = (file[:fixit.range.start.line-1] +\n+                        type(file)(newvalue.splitlines(True)) +\n+                        file[fixit.range.end.line:])\n+        except LibclangError as err:\n+            logging.warning('coala requires clang 3.4')", "created_at": "2017-12-12T01:32:53Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI1MDgwNg==", "fields": {"body": "please use braces instead of backslashes to break statements over multiple lines.", "diff": "@@ -166,16 +166,21 @@ def from_clang_fixit(cls, fixit, file):\n         \"\"\"\n         assert isinstance(file, (list, tuple))\n \n-        oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n-                                  fixit.range.end.line])\n-        endindex = fixit.range.end.column - len(file[fixit.range.end.line-1])-1\n-\n-        newvalue = (oldvalue[:fixit.range.start.column-1] +\n-                    fixit.value +\n-                    oldvalue[endindex:])\n-        new_file = (file[:fixit.range.start.line-1] +\n-                    type(file)(newvalue.splitlines(True)) +\n-                    file[fixit.range.end.line:])\n+        try:\n+            oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n+                                      fixit.range.end.line])\n+            endindex = fixit.range.end.column - \\\n+                len(file[fixit.range.end.line-1])-1", "created_at": "2017-12-12T01:33:17Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI1MTEwOA==", "fields": {"body": "Can't we maybe check the version directly and raise an error ourselves, instead of letting the code run into an error somewhere until we hit unsupported API? Not sure if we leave memory leaks otherwise^^ (as Libclang binds the C libraries)", "diff": "@@ -166,16 +166,21 @@ def from_clang_fixit(cls, fixit, file):\n         \"\"\"\n         assert isinstance(file, (list, tuple))\n \n-        oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n-                                  fixit.range.end.line])\n-        endindex = fixit.range.end.column - len(file[fixit.range.end.line-1])-1\n-\n-        newvalue = (oldvalue[:fixit.range.start.column-1] +\n-                    fixit.value +\n-                    oldvalue[endindex:])\n-        new_file = (file[:fixit.range.start.line-1] +\n-                    type(file)(newvalue.splitlines(True)) +\n-                    file[fixit.range.end.line:])\n+        try:\n+            oldvalue = '\\n'.join(file[fixit.range.start.line-1:\n+                                      fixit.range.end.line])\n+            endindex = fixit.range.end.column - \\\n+                len(file[fixit.range.end.line-1])-1\n+\n+            newvalue = (oldvalue[:fixit.range.start.column-1] +\n+                        fixit.value +\n+                        oldvalue[endindex:])\n+            new_file = (file[:fixit.range.start.line-1] +\n+                        type(file)(newvalue.splitlines(True)) +\n+                        file[fixit.range.end.line:])\n+        except LibclangError as err:\n+            logging.warning('coala requires clang 3.4')\n+            raise err", "created_at": "2017-12-12T01:35:32Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA==", "fields": {"body": "fyi, there is a flag to turn off creation of .orig files.", "diff": "@@ -3,3 +3,4 @@ out/*\n !out/.keep\n yarn.lock\n .DS_Store\n+**.orig", "created_at": "2017-12-12T04:32:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjQ0MTM3Mg==", "fields": {"body": "this double catching is redundant.", "diff": "@@ -54,11 +54,18 @@ def from_clang_range(cls, range):\n \n         :param range: A cindex.SourceRange object.\n         \"\"\"\n-        return cls.from_values(range.start.file.name,\n-                               range.start.line,\n-                               range.start.column,\n-                               range.end.line,\n-                               range.end.column)\n+        try:\n+            from_values = cls.from_values(range.start.file.name,\n+                                          range.start.line,\n+                                          range.start.column,\n+                                          range.end.line,\n+                                          range.end.column)\n+        except LibclangError as err:\n+            if 'libclang.so version' in str(err):\n+                logging.error('coala requires clang 3.4')\n+                raise err", "created_at": "2017-12-12T17:39:06Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ==", "fields": {"body": "could this be JavaScript, so it can be incorporated into the npm build process ?", "diff": "@@ -11,6 +11,7 @@ before_install:\n script:\n   - coala --non-interactive -V\n   - npm run build\n+  - ./.ci/gather_data.sh", "created_at": "2017-12-13T04:30:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw==", "fields": {"body": "Remove the contents instead of the folder\ni.e. rm -rf out/*\nand if you do that you don't need to recreate the .keep file", "diff": "@@ -4,7 +4,12 @@\n   \"description\": \"\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n-    \"build\": \"node ./lib/scrape.js && node ./lib/generate.js\"\n+    \"scrape\": \"node ./lib/scrape.js\",\n+    \"generate\": \"node ./lib/generate.js\",\n+    \"gather\": \"node ./lib/gather.js\",\n+    \"clean\": \"rm -rf out && mkdir -p out && touch out/.keep\",", "created_at": "2017-12-13T06:50:20Z", "last_edited_at": "2017-12-13T06:52:46Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA==", "fields": {"body": "Shhh... \ud83d\ude0b", "diff": "@@ -210,11 +220,14 @@ async function findWiki(name) {\n }\n \n async function findGitHubUser({ display_name }, org) {\n+=======\n+async function findGitHubUser(displayName, org) {\n+>>>>>>> scrape.js: Reduce number of API calls", "created_at": "2017-12-13T07:20:39Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA==", "fields": {"body": "Maybe in that case https:${wikidataurl}?", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {\n+      const wikipediaurl = wdk.getSitelinkUrl(sitelink['enwiki'])\n+      return {\n+        url: wikipediaurl,\n+        type: 'wikipedia',\n+      }\n+    } else {\n+      return {\n+        url: 'https:' + wikidataurl,", "created_at": "2017-12-12T22:03:28Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg==", "fields": {"body": "In future(with i18n) this should become language_code + 'wiki'. So that'd probably bring us back to this way...", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {", "created_at": "2017-12-12T22:06:35Z", "last_edited_at": null, "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA==", "fields": {"body": "IMO we should remove all translation for now and only keep en or 2.", "diff": "@@ -0,0 +1,21 @@\n+{\n+  \"page-title\": \"Google Code-in 2017 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0928\u0947\u0924\u093e\",\n+  \"last-updated\": \"\u0906\u0916\u0930\u0940 \u0905\u092a\u0921\u0947\u091f\",", "created_at": "2017-12-14T06:10:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjkwMzA5OA==", "fields": {"body": "The line after the period \"It means...\" seems to be redudant.First line and the example are enough.", "diff": "@@ -215,6 +215,13 @@ understands it. This is possible via the ``severity_map`` parameter of\n ``coalib.results.RESULT_SEVERITY`` contains three different values, ``Info``,\n ``Warning`` and ``Error`` you can use.\n \n+.. note::\n+\n+    ``severity_map`` is case insensitive. It means that the", "created_at": "2017-12-14T10:17:36Z", "last_edited_at": null, "author": "avirlrma", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzA4ODIzMQ==", "fields": {"body": "I would maybe put the note after the \"Congratulations\" paragraph below. What do you think?", "diff": "@@ -140,6 +140,12 @@ to be part of the Newcomer team. The invitation will be sent by mail and you\n will have to accept it to join. If you don't find the invitation, accept it\n `here <https://github.com/coala>`__.\n \n+.. note::\n+    If you have any questions, ask them in a precise and respectful way that\n+    maximizes your chances of getting the answer you're looking for.\n+    If you're unsure how to do that, please read: `How To Ask Questions\n+    The Smart Way <http://www.catb.org/esr/faqs/smart-questions.html>`_.", "created_at": "2017-12-14T23:16:06Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA==", "fields": {"body": "Yep, seems to not be working. But in that case just skip over it and only use working XML feeds. That'll be encouragement to get the coala feed fixed \ud83d\ude09", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',\n+]", "created_at": "2017-12-15T03:21:22Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ==", "fields": {"body": "Make it so that when the parser failed it's skipping instead of \"breaking\".", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',", "created_at": "2017-12-15T03:23:31Z", "last_edited_at": "2017-12-15T03:23:40Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg==", "fields": {"body": "if (blog_url) is enough, I think.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(\n+    data.map(org => {\n+      const { blog_url } = org\n+      if (blog_url != null && blog_url != '') {", "created_at": "2017-12-16T13:19:29Z", "last_edited_at": "2017-12-16T13:45:03Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA==", "fields": {"body": "Probably looks neater if you put it inside variable first and then use Promise.all().\nAlso, async function please, instead of then.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(", "created_at": "2017-12-16T13:24:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjkyNg==", "fields": {"body": "I think you can use self.check_invalidity(self.uut, invalid_xml_file) instead of self.check_validity(self.uut, invalid_xml_files, valid=False)", "diff": "@@ -0,0 +1,37 @@\n+import os\n+\n+from queue import Queue\n+from bears.xml2.XCopBear import XCopBear\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+\n+\n+def get_testfile_path(filename):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'test_files',\n+                        filename)\n+\n+\n+def load_testdata(filename):\n+    path = get_testfile_path(filename)\n+    with open(path) as f:\n+        return f.read()\n+\n+\n+valid_xml_file = load_testdata('concept-valid.xml').splitlines()\n+invalid_xml_file = load_testdata('concept-invalid.xml').splitlines()\n+\n+\n+@generate_skip_decorator(XCopBear)\n+class XCopBearTest(LocalBearTestHelper):\n+\n+    def setUp(self):\n+        self.section = Section('')\n+        self.uut = XCopBear(self.section, Queue())\n+\n+    def test_valid(self):\n+        self.check_validity(self.uut, valid_xml_file)\n+\n+    def test_invalid(self):\n+        self.check_validity(self.uut, invalid_xml_file, valid=False)", "created_at": "2017-12-16T14:14:53Z", "last_edited_at": "2017-12-16T14:18:02Z", "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ==", "fields": {"body": "JSON doesn't have linebreaks and the translations for some strings are too long for the linelength limit.", "diff": "@@ -9,7 +9,7 @@ bears = SpaceConsistencyBear\n default_actions = *: ApplyPatchAction\n \n [all.linelength]\n-ignore += **.html\n+ignore += **.html, static/js/i18n/**.json", "created_at": "2017-12-16T15:25:06Z", "last_edited_at": null, "author": "margobra8", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM3NDE4NQ==", "fields": {"body": "Also what do you think whether merging this Note with line 224 Note will be suitable or not?\nIMO it's better to use use one Note instead of two consecutive ones.", "diff": "@@ -215,6 +215,12 @@ understands it. This is possible via the ``severity_map`` parameter of\n ``coalib.results.RESULT_SEVERITY`` contains three different values, ``Info``,\n ``Warning`` and ``Error`` you can use.\n \n+.. note::\n+\n+    ``severity_map`` is case insensitive. For example passing\n+    ``{'E': RESULT_SEVERITY.MAJOR}`` or ``{'e': RESULT_SEVERITY.MAJOR}``\n+    to the severity_map, makes no difference.", "created_at": "2017-12-17T17:14:02Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNjYzOQ==", "fields": {"body": "Should this be returned as an HttpResponse?", "diff": "@@ -129,20 +133,20 @@ def get_data(self):\n         return self.data\n \n \n-if __name__ == '__main__':\n+def activity_json(request):\n \n-    org_name = open('org_name.txt').readline()\n+    org_name = get_remote_owner()\n \n     # URL to grab all issues from\n     issues_url = 'http://' + org_name + '.github.io/gh-board/issues.json'\n \n     content = requests.get(issues_url)\n-    content.raise_for_status()\n-    parsed_json = content.json()\n+    try:\n+        parsed_json = content.json()\n+    except Exception:\n+        return '{}'", "created_at": "2017-12-16T07:42:27Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNjgyNg==", "fields": {"body": "but if someone has done REPOSITORY_URL='' ... :P", "diff": "@@ -0,0 +1,61 @@\n+import os\n+import os.path\n+\n+from git.config import GitConfigParser\n+import giturlparse\n+\n+REPO_DIR = os.path.join(\n+    os.path.dirname(__file__),\n+    '..',\n+)\n+GIT_CONFIG = os.path.join(\n+    REPO_DIR,\n+    '.git',\n+    'config',\n+)\n+\n+_config = None\n+\n+\n+def get_config():\n+    global _config\n+    if not _config:\n+        _config = GitConfigParser(GIT_CONFIG)\n+    return _config\n+\n+\n+def get_config_remote(name='origin'):\n+    config = get_config()\n+\n+    print(config.sections())\n+\n+    has_remote = False\n+\n+    for key in config.sections():\n+        if key == 'remote \"%s\"' % name:\n+            return config.items(key)\n+        elif key.startswith('remote'):\n+            has_remote = True\n+\n+    if has_remote:\n+        raise KeyError('No git remote called \"%s\"' % name)\n+\n+    raise KeyError('No git remotes found')\n+\n+\n+def get_remote_url():\n+    url = os.environ.get('REPOSITORY_URL')\n+    if not url:", "created_at": "2017-12-16T07:56:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzODM5MA==", "fields": {"body": "No, the try/except was to workaround retr0h/git-url-parse#2", "diff": "@@ -0,0 +1,61 @@\n+import os\n+import os.path\n+\n+from git.config import GitConfigParser\n+import giturlparse\n+\n+REPO_DIR = os.path.join(\n+    os.path.dirname(__file__),\n+    '..',\n+)\n+GIT_CONFIG = os.path.join(\n+    REPO_DIR,\n+    '.git',\n+    'config',\n+)\n+\n+_config = None\n+\n+\n+def get_config():\n+    global _config\n+    if not _config:\n+        _config = GitConfigParser(GIT_CONFIG)\n+    return _config\n+\n+\n+def get_config_remote(name='origin'):\n+    config = get_config()\n+\n+    print(config.sections())\n+\n+    has_remote = False\n+\n+    for key in config.sections():\n+        if key == 'remote \"%s\"' % name:\n+            return config.items(key)\n+        elif key.startswith('remote'):\n+            has_remote = True\n+\n+    if has_remote:\n+        raise KeyError('No git remote called \"%s\"' % name)\n+\n+    raise KeyError('No git remotes found')\n+\n+\n+def get_remote_url():\n+    url = os.environ.get('REPOSITORY_URL')\n+    if not url:\n+        remote = get_config_remote()\n+        url = remote[0][1]\n+\n+    try:\n+        url = giturlparse.parse(url)\n+    except Exception:\n+        url = giturlparse.parse(url + '.git')", "created_at": "2017-12-16T09:37:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzUxNDEyMQ==", "fields": {"body": "can you add comment on why this line was added", "diff": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env bash\n+\n+# Non-zero exit code is what we want to check\n+set +e\n+\n+# Enable capturing the non-zero exit status of coverage instead of tee\n+set -o pipefail\n+\n+sed -i.bak -E '/^(mypy-lang|guess-language-spirit)/d' bear-requirements.txt", "created_at": "2017-12-18T15:25:21Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk0MDgyNQ==", "fields": {"body": "can we have set -x for debug output, its always helpful", "diff": "@@ -0,0 +1,30 @@\n+#!/usr/bin/env bash\n+\n+# Non-zero exit code is what we want to check\n+set +e\n+", "created_at": "2017-12-20T05:41:03Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk0MjQ2MQ==", "fields": {"body": "yeah, it's for macosx compatibility. Their version of sed requires it", "diff": "@@ -0,0 +1,30 @@\n+#!/usr/bin/env bash\n+\n+# Non-zero exit code is what we want to check\n+set +e\n+\n+# Enable capturing the non-zero exit status of coverage instead of tee\n+set -o pipefail\n+\n+# mypy-lang and guess-language-spirit do not install on unsupported versions\n+sed -i.bak -E '/^(mypy-lang|guess-language-spirit)/d' bear-requirements.txt", "created_at": "2017-12-20T05:59:58Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng==", "fields": {"body": "Maybe create a new file that holds the last updated time.\nWe have many generated files (org data, blog planet, dates) and that'll give the last updated time to all of that data.", "diff": "@@ -369,14 +377,19 @@ async function fetchDates() {\n }\n \n ;(async () => {\n-  const data = await fetchOrgsWithData()\n+  const orgs = await fetchOrgsWithData()\n   const dates = await fetchDates()\n \n   // sort data by completed_task_instance_count\n-  data.sort(\n+  orgs.sort(\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  const data = {\n+    orgs: sortKeys({ orgs }, { deep: true }).orgs,\n+    lastUpdated: new Date(),", "created_at": "2017-12-20T10:49:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw==", "fields": {"body": "The rss module does this automatically for me. See the output: https://deploy-preview-95--gci-leaders.netlify.com/feed.xml", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,", "created_at": "2017-12-20T17:25:53Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ==", "fields": {"body": "Do we need this? or is this for debugging, we might want a fancier log message or just throw this away completely.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)", "created_at": "2017-12-20T11:47:18Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg==", "fields": {"body": "We might want to fetch this like data.json or the file will not be available on every build.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()", "created_at": "2017-12-20T11:48:36Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg==", "fields": {"body": "Might want to add description.\nThe value can be a readable form of property:old and property:new", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,", "created_at": "2017-12-20T12:01:09Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw==", "fields": {"body": "Every new .js is loading this file again.  And creating a new script , and a longer build command.\nIf these .js are modularised, the data can be parsed once and passed around .", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()", "created_at": "2017-12-20T12:38:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ==", "fields": {"body": "@andrewda went afk, still isn't finished yet. Have yet to remove debug lines", "diff": "@@ -0,0 +1,24 @@\n+function twitter_filter() {\r\n+  var twitter_handles = [];\r\n+  for(var i=0; i<document.getElementsById(\"org-info\"); i++) {\r\n+    var org_info = document.getElementsById(\"org-info\");\r\n+    for(var j=0; i<org_info.children.length; i++) {\r\n+      if(org_info.children[j].href.startsWith(\"https://twitter.com/\")) {\r\n+        twitter_handles.push(org_info.children[j].href.substr(20));\r\n+      }\r\n+    }\r\n+  }\r\n+  console.log(twitter_handles);\r", "created_at": "2017-12-20T21:07:08Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ==", "fields": {"body": "So we can run array function like filter ;)\nYou can use Array.from() instead, more readable.", "diff": "@@ -8,5 +8,40 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('load', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode\n+  var twitter_prefix = 20\n+  var twitter_handles = []\n+  var orgs = document.getElementsByClassName('org-info')\n+  for (var i = 0; i < orgs.length; i++) {\n+    var org_info = orgs[i]\n+    for (var j = 0; j < org_info.children.length; j++) {\n+      if (org_info.children[j].href) {", "created_at": "2017-12-21T22:33:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU3NzQ1MQ==", "fields": {"body": "If you have a look at other bears these 2 methods (get_testfile_path and load_testfile) are used in the test files of bear and not the file that wraps the linter. So these 2 function names didn't make sense to me when I first read your code and then I realized that you use them to load the sample config file (if I'm not wrong). So I think it would be better to rename these methods as get_configfile_path and load_configfile respectively. It would make much more sense to someone who reads your code in the future. \ud83d\ude04", "diff": "@@ -0,0 +1,149 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.bearlib.spacing.SpacingHelper import SpacingHelper\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+from dependency_management.requirements.AnyOneOfRequirements import (\n+    AnyOneOfRequirements)\n+from dependency_management.requirements.ComposerRequirement import (\n+    ComposerRequirement)\n+import os\n+\n+\n+def get_testfile_path(name):\n+    return os.path.join(os.path.dirname(__file__), name)\n+\n+\n+def load_testfile(name):", "created_at": "2017-12-23T06:17:22Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg==", "fields": {"body": "@dob9601 If you do rebase, you can use import and put that in utils file.", "diff": "@@ -8,5 +8,43 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode", "created_at": "2017-12-24T00:50:58Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ==", "fields": {"body": "store in a repo_info.graphql ?\nthe variables are part of the language.", "diff": "@@ -0,0 +1,30 @@\n+module.exports.REPO_INFO_QUERY = `", "created_at": "2017-12-24T02:30:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA==", "fields": {"body": "Can we remove all of these rulers? They look annoying.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***", "created_at": "2017-12-24T04:31:51Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw==", "fields": {"body": "Better to use === instead of ==. See https://github.com/airbnb/javascript#comparison--eqeqeq.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks\n+          .map(u => {\n+            const createdAt = new Date(u.createdAt)\n+            if (createdAt.getTime() > COMPETITION_OPEN.getTime()) {\n+              return u.owner.login.toLowerCase()\n+            }\n+          })\n+          .filter(login => login)\n+      )\n+\n+    repo.watchers.forEach(watcher => {\n+      if (watcher.name) {\n+        names[watcher.name.toLowerCase()] = watcher.login\n+      }\n+    })\n+  })\n+\n+  logins = logins.filter((item, pos, self) => self.indexOf(item) == pos)", "created_at": "2017-12-24T06:38:05Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw==", "fields": {"body": "Group that let and const. See https://github.com/airbnb/javascript#variables--const-let-group.", "diff": "@@ -1,16 +1,22 @@\n const fetch = require('node-fetch')\n+const GraphQL = require('graphql-client')\n const chattie = require('chattie')\n const fs = require('fs')\n const json2yaml = require('json2yaml')\n const validUsername = require('valid-github-username')\n const wdk = require('wikidata-sdk')\n \n+const { REPO_INFO_QUERY } = require('./queries')\n+\n const GH_BASE = 'https://github.com'\n const GH_USER_BASE = `${GH_BASE}/users`\n const GH_ORG_BASE = `${GH_BASE}/orgs`\n const GH_API_BASE = 'https://api.github.com'\n+const GH_GQL_BASE = 'https://api.github.com/graphql'\n const GCI_API_BASE = 'https://codein.withgoogle.com/api'\n \n+let COMPETITION_OPEN", "created_at": "2017-12-24T06:35:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA==", "fields": {"body": "An issue is a very noticable action.  It is a new thing, and the malicious person is the creator.\nA review is not quite as noticeable, but it would need to be done on an obscure open PR in order to not be noticed.\nEither would likely be seen as intentional confusion, maybe suitable for GitHub to investigate as 'abuse'.\nstars/watches/forks are almost invisible.  And it is very hard to file 'abuse' with GitHub for doing those actions.\nYour issue is a specific attempt to do #8 .\nThe biggest problem is that so far this algorithm has a lower confidence level than the previous algorithms, but it is being used first.  This could be used to override the existing algorithms, which are more reliable.\nOnce you have a potential match, which wasnt found using the existing more reliable algorithms, you need to look at the match profiles to determine how you can increase the confidence level of your match.  The more effort you require of the abuser, the more likely their abuse can only be viewed as intentional or at least highly suspicious.\nProbably also a good idea to annotate each match with the matching method used.\nAPI hits isn't relevant now, as the hits can grow over time.  You can include probable matches in the yaml which are not included in the rendered page, as they are needing more analysis deferred until a subsequent build has extra API calls to use.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks", "created_at": "2017-12-24T06:46:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NzYzOA==", "fields": {"body": "Thanks for review my task :)", "diff": "@@ -1,5 +1,7 @@\n <title>Community website</title>\n+", "created_at": "2017-12-24T09:24:38Z", "last_edited_at": null, "author": "danes44", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODUxNjQxMA==", "fields": {"body": "nvm", "diff": "@@ -51,7 +53,8 @@ def correct_single_line_str(self, filename, file, sourcerange,\n                      diff.affected_code(filename), diffs={filename: diff})\n \n     def run(self, filename, file, dependency_results,\n-            preferred_quotation: str='\"'):\n+            preferred_quotation: str='\"',\n+            force_preferred_quotation: bool=False):", "created_at": "2017-12-22T16:01:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg==", "fields": {"body": "And it can be autodetected using shields.io, so may as well do that instead of hardcoding it.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***\n+This is a website to show the current leaders from all organizations in GCI.\n+***\n+ * [Installation](#installation)\n+ * [Languages](#languages)\n+ * [Usage](#usage)\n+ * [Getting Involved](#getting-involved)\n+ * [Support](#support)\n+ * [Authors](#authors)\n+ * [License](#license)\n+***\n+### Installation\n+```\n+npm install\n+```\n+***\n+### Languages:\n+* Node.js\n+* JSON\n+***\n+### Usage:\n+```\n+npm run build\n+```\n+***\n+### Getting Involved\n+If you would like to be a part of the coala community, you can check out our [Getting In Touch](http://coala.readthedocs.io/en/latest/Help/Getting_In_Touch.html) page or ask us at our active Gitter channel, where we have maintainers from all over the world. We appreciate any help!\n+\n+We also have a [newcomer guide](http://api.coala.io/en/latest/Developers/Newcomers_Guide.html) to help you get started by fixing an issue yourself! If you get stuck anywhere or need some help, feel free to contact us on Gitter or drop a mail at our [newcomer mailing list](https://groups.google.com/forum/#!forum/coala-newcomers).\n+***\n+### Support\n+Feel free to contact us at our [Gitter channel](https://gitter.im/coala/coala), we'd be happy to help!\n+\n+If you are interested in commercial support, please contact us on the Gitter channel as well.\n+\n+You can also drop an email at our [mailing list](https://github.com/coala/coala/wiki/Mailing-Lists).\n+***\n+### Authors\n+You can contact to author for more information.\n+[blazeu](mailto:neversleepman@tfwno.gf)\n+***\n+### License\n+[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)", "created_at": "2017-12-25T14:34:47Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ==", "fields": {"body": "Use !== please.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {", "created_at": "2017-12-25T14:42:41Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng==", "fields": {"body": "Use let or const instead.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {\n+      const twitter_account = twitter_url[0].pathname.substr(1)\n+      twitter_handles.push(twitter_account)\n+    }\n+  }\n+  \n+  if (document.getElementById(twitter_id) !== null) {\n+    const tweet_authors = document\n+      .getElementById(twitter_id)\n+      .contentWindow.document.getElementsByClassName(\n+        'TweetAuthor-screenName Identity-screenName'\n+      )\n+      \n+    if (tweet_authors.length > 0) {\n+      for (var k = 0; k < tweet_authors.length; k++) {\n+        if (\n+          twitter_handles.indexOf(tweet_authors[k].innerHTML.substr(1)) > -1\n+        ) {\n+          var tweet = getNodesDeep(tweet_authors[k], 5)", "created_at": "2017-12-25T14:43:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA==", "fields": {"body": "Makes it import { getNodesDeep } from 'utils' please.", "diff": "@@ -1,3 +1,5 @@\n+import {getNodesDeep} from 'utils.js'", "created_at": "2017-12-25T14:42:21Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg==", "fields": {"body": "a README in that directory would be useful.  Also for CC licenses, the full text of the license isnt necessary.  A link is acceptable, and a link to the license file in their repo is really good, as it allows the reader to find the original, which is the intent of CC.", "diff": "@@ -57,6 +57,15 @@ <h3>\n                 />\n               </a>\n             {{/github}}\n+            {{#gitlab}}\n+              <a href=\"https://gitlab.com/{{gitlab}}\">\n+                <img\n+                  src=\"images/logos/gitlab.png\"", "created_at": "2017-12-26T05:29:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODc1NzUwOQ==", "fields": {"body": "I used the word 'merge' because it has been used even in merge a ``difficulty/newcomer`` Pull Request.\nI'll change my line, please tell me whether I should change the instruction list too, should this be a part of another issue.\nI think the 'merge' lines should read like solve a ``difficulty/newcomer`` issue.", "diff": "@@ -23,6 +23,8 @@ following tasks, you will become a developer at coala:\n   - merge a ``difficulty/low`` Pull Request\n   - review at least a ``difficulty/low`` or higher Pull Request\n \n+Note: Please merge only *one* ``difficulty/newcomer`` Pull Request", "created_at": "2017-12-27T03:11:37Z", "last_edited_at": "2017-12-27T03:55:56Z", "author": "theOriginalMuktaka", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODcwNTA1NQ==", "fields": {"body": "I have a little suggestion. I think P should be capital in please . I think anyone else should also have a look. Rest looks good.", "diff": "@@ -23,6 +23,8 @@ following tasks, you will become a developer at coala:\n   - merge a ``difficulty/low`` Pull Request\n   - review at least a ``difficulty/low`` or higher Pull Request\n \n+Note: please merge only *one* ``difficulty/newcomer`` Pull Request", "created_at": "2017-12-26T13:22:01Z", "last_edited_at": null, "author": "pradeepgangwar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODcyMzM0OQ==", "fields": {"body": "If we want the messages and the corrected code I see no other way.", "diff": "@@ -24,5 +30,65 @@ class JSStandardBear:\n     CAN_FIX = {'Formatting'}\n     SEE_MORE = 'https://standardjs.com/rules.html'\n \n+    issue_regex = re.compile(\n+        r'\\s*[^:]+:(?P<line>\\d+):(?P<column>\\d+):'\n+        r'\\s*(?P<message>.+)')\n+\n     def create_arguments(self, filename, file, config_file):\n         return (filename, '--verbose')\n+\n+    @staticmethod\n+    def _get_corrected_code(old_code: List[str]) -> List[str]:\n+        \"\"\"\n+        Pipes the code to JSStandard and returns the corrected code.\n+        \"\"\"\n+        p = Popen(\n+            ('standard', '--stdin', '--fix'),\n+            stdin=PIPE, stdout=PIPE, stderr=PIPE)", "created_at": "2017-12-26T17:11:41Z", "last_edited_at": null, "author": "Alexander-N", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODg3ODQyMw==", "fields": {"body": "access to the file dict sadly happens via self.file_dict for a GlobalBear... this is gonna change in next gen \ud83d\udc4d", "diff": "@@ -775,9 +775,8 @@ def linter(executable: str,\n     ...         output_format='regex',\n     ...         output_regex='...')\n     ... class YLintBear:\n-    ...     @staticmethod\n-    ...     def create_arguments(config_file):\n-    ...         return '--lint', filename\n+    ...     def create_arguments(self, config_file):", "created_at": "2017-12-27T23:07:13Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA==", "fields": {"body": "Can you please update the color? Somebody will be blind. Update the font color to white for example.", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T07:42:35Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng==", "fields": {"body": "Also, crimson or orangered is better than red", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T08:21:51Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTA4MTI4NQ==", "fields": {"body": "Okay. I will correct these. Thanks for guidance.", "diff": "@@ -125,7 +125,8 @@ passed.\n                 self.uut,\n                 file,\n                 [Result.from_values('TooManyLinesBear',\n-                                    'Too many lines')],\n+                                    'Too many lines',\n+                                    'files')],", "created_at": "2017-12-29T16:44:17Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg==", "fields": {"body": "No need, honestly. It's just one line.", "diff": "@@ -55,5 +56,8 @@\n \t\t</TMPL_LOOP>\n \t</ul>\n </div>\n+<script>\n+twemoji.parse(document.body);", "created_at": "2017-12-29T06:28:56Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE2NDQ1Nw==", "fields": {"body": "no :) typing errors are no bugs imo ;) (except bad referencing of variables, but this is not happening because of our full coverage)", "diff": "@@ -150,6 +150,10 @@ Example:\n    If a specific issue may lead to an unintended behaviour from the user\n    or from the program it should be considered a bug, and should be\n    addresed with ``Fixes``.\n+-  If an issue is labelled with ``type/bug`` you should always use ``Fixes``.\n+-  Issues that require fixing some typing errors should also be referenced", "created_at": "2018-01-01T21:50:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE5ODYxMg==", "fields": {"body": "This should return a MergeRequest , which has a .author added in https://gitlab.com/gitmate/open-source/IGitt/merge_requests/159 ?\nBut also, this function should be in IGitt. (as part of the same task, as this is the core of the problem of the original task, and making sure it works on gitlab and github with tests is crucial)", "diff": "@@ -129,6 +130,39 @@ def get_issue_related_students():\n                     break\n \n \n+def get_pr_closing_issue(url):\n+    r = requests.get(url)\n+    result = re.search(\n+        'closed this(?:\\n| )+in(?:\\n| )+<a href=\\\"/(.+)/pull/(?:[0-9]+)\\\">#' +\n+        '([0-9]+)</a>',\n+        r.text\n+    )\n+\n+    if result is not None:\n+        return {", "created_at": "2018-01-02T10:08:14Z", "last_edited_at": "2018-01-02T10:18:12Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE5OTE2Ng==", "fields": {"body": "this seems to be unrelated to your issue.  I assume it is caused by the updated IGitt version, in which case you need a separate commit for the IGitt update and these fixes", "diff": "@@ -160,9 +194,18 @@ def get_linked_students():\n                     elif len(issue.assignees) > 1:\n                         logger.info('task %d: Many assignees for %s: %s' %\n                                     (task_id, url, ', '.join(issue.assignees)))\n+\n+                    if len(issue.assignees) != 1:\n+                        user = get_closing_pr_author(url)\n+                        if user is not None:\n+                            student['username'] = user\n+                            print('student %s is %s because of %s (from PR)' %\n+                                  (student['id'], user, url))\n+                            yield student\n+                            break\n                     else:\n-                        student['username'] = issue.assignees[0]\n+                        student['username'] = list(issue.assignees)[0]", "created_at": "2018-01-02T10:12:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTI0Njg1Mg==", "fields": {"body": "Logging level error is generally used when something went wrong with the code.\nWarning indicates that code is working as expected, something went wrong due to wrong user input.\nHope this clears the doubt @newbazz", "diff": "@@ -73,12 +72,12 @@ def run(self, language: language, minimum_tokens: int=20,\n             comparison.\n         \"\"\"\n         for supported_lang in self.language_dict:\n-            if supported_lang in language:\n+            if supported_lang in programming_language:\n                 cpd_language = self.language_dict[supported_lang]\n                 break\n         else:\n-            self.err('This bear does not support files with the extension '\n-                     \"'{}'.\".format(language))\n+            self.warn('This bear has no support for ' +", "created_at": "2018-01-02T15:24:47Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODAxOQ==", "fields": {"body": "I think this file may not be needed", "diff": "@@ -0,0 +1,3 @@\n+from django.contrib import admin", "created_at": "2018-01-03T03:40:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODQ0NQ==", "fields": {"body": "likewise, can we avoid creating this file here, as it will be created in the other PR.", "diff": "@@ -0,0 +1,3 @@\n+from django.shortcuts import render", "created_at": "2018-01-03T03:47:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODQxNw==", "fields": {"body": "I think we shouldnt have this file if we dont have any tests written", "diff": "@@ -0,0 +1,3 @@\n+from django.test import TestCase", "created_at": "2018-01-03T03:47:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTQ5MjI5NA==", "fields": {"body": "Mentor and Student models can appear above the Project model, so that they are hard references to the model instead of string references to the model.", "diff": "@@ -0,0 +1,222 @@\n+from django.db import models\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open_starts = models.DateField()\n+    org_signup_open_ends = models.DateField()\n+    org_approval_starts = models.DateField()\n+    org_approval_ends = models.DateField()\n+    orgs_published_starts = models.DateField()\n+    orgs_published_ends = models.DateField()\n+    student_signup_open_starts = models.DateField()\n+    student_signup_open_ends = models.DateField()\n+    slot_request_starts = models.DateField()\n+    slot_request_ends = models.DateField()\n+    slot_allocation_grace_period_starts = models.DateField()\n+    slot_allocation_grace_period_ends = models.DateField()\n+    project_acceptance_starts = models.DateField()\n+    project_acceptance_ends = models.DateField()\n+    project_decisions_finalization_starts = models.DateField()\n+    project_decisions_finalization_ends = models.DateField()\n+    first_work_period_starts = models.DateField()\n+    first_work_period_ends = models.DateField()\n+    first_evaluations_start = models.DateField()\n+    first_evaluations_ends = models.DateField()\n+    second_work_period_starts = models.DateField()\n+    second_work_period_ends = models.DateField()\n+    second_evaluations_starts = models.DateField()\n+    second_evaluations_ends = models.DateField()\n+    third_work_period_starts = models.DateField()\n+    third_work_period_ends = models.DateField()\n+    final_week_starts = models.DateField()\n+    final_week_ends = models.DateField()\n+    final_evaluations_mentor_starts = models.DateField()\n+    final_evaluations_mentor_ends = models.DateField()\n+    post_program_starts = models.DateField()\n+    post_program_ends = models.DateField()\n+    community_bonding_period_starts = models.DateField()\n+    community_bonding_period_ends = models.DateField()\n+    coding_period_starts = models.DateField()\n+    coding_period_ends = models.DateField()\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.homepage_start_button\n+\n+\n+class Organization(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    logo = models.ImageField(upload_to='', blank=True)\n+    url = models.URLField(blank=True)\n+    summary = models.TextField(max_length=300, default='')\n+    technologies = models.ManyToManyField('Technology')\n+    topics = models.ManyToManyField('Topic')\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Technology(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Topic(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Project(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    summary = models.TextField(max_length=300, default='')\n+    org = models.ForeignKey(Organization, on_delete=models.CASCADE)\n+    student = models.OneToOneField('Student')\n+    mentor = models.ForeignKey('Mentor', on_delete=models.CASCADE)", "created_at": "2018-01-03T18:19:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTU4OTY5NQ==", "fields": {"body": "You should now change this to Mentor instead of 'Mentor'", "diff": "@@ -0,0 +1,222 @@\n+from django.db import models\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open_starts = models.DateField()\n+    org_signup_open_ends = models.DateField()\n+    org_approval_starts = models.DateField()\n+    org_approval_ends = models.DateField()\n+    orgs_published_starts = models.DateField()\n+    orgs_published_ends = models.DateField()\n+    student_signup_open_starts = models.DateField()\n+    student_signup_open_ends = models.DateField()\n+    slot_request_starts = models.DateField()\n+    slot_request_ends = models.DateField()\n+    slot_allocation_grace_period_starts = models.DateField()\n+    slot_allocation_grace_period_ends = models.DateField()\n+    project_acceptance_starts = models.DateField()\n+    project_acceptance_ends = models.DateField()\n+    project_decisions_finalization_starts = models.DateField()\n+    project_decisions_finalization_ends = models.DateField()\n+    first_work_period_starts = models.DateField()\n+    first_work_period_ends = models.DateField()\n+    first_evaluations_start = models.DateField()\n+    first_evaluations_ends = models.DateField()\n+    second_work_period_starts = models.DateField()\n+    second_work_period_ends = models.DateField()\n+    second_evaluations_starts = models.DateField()\n+    second_evaluations_ends = models.DateField()\n+    third_work_period_starts = models.DateField()\n+    third_work_period_ends = models.DateField()\n+    final_week_starts = models.DateField()\n+    final_week_ends = models.DateField()\n+    final_evaluations_mentor_starts = models.DateField()\n+    final_evaluations_mentor_ends = models.DateField()\n+    post_program_starts = models.DateField()\n+    post_program_ends = models.DateField()\n+    community_bonding_period_starts = models.DateField()\n+    community_bonding_period_ends = models.DateField()\n+    coding_period_starts = models.DateField()\n+    coding_period_ends = models.DateField()\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.homepage_start_button\n+\n+\n+class Organization(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    logo = models.ImageField(upload_to='', blank=True)\n+    url = models.URLField(blank=True)\n+    summary = models.TextField(max_length=300, default='')\n+    technologies = models.ManyToManyField('Technology')\n+    topics = models.ManyToManyField('Topic')\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Technology(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Topic(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Project(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    summary = models.TextField(max_length=300, default='')\n+    org = models.ForeignKey(Organization, on_delete=models.CASCADE)\n+    student = models.OneToOneField('Student')\n+    mentor = models.ForeignKey('Mentor', on_delete=models.CASCADE)", "created_at": "2018-01-04T07:04:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTU4OTc4OA==", "fields": {"body": "Like \"Mentor\", put the GsocEvent and GsocOccurence above Program, so you can refer to the object instead of the name.", "diff": "@@ -0,0 +1,205 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField('GsocEvent', related_name='org_signup_open')", "created_at": "2018-01-04T07:05:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTUwMjU5NQ==", "fields": {"body": "I think we need to use an existing django app or library to provide the data fields, and thus also hold the data.\nhttps://djangopackages.org/grids/g/calendar/ shows the main options.\ndjango-scheduler looks like it has the most features built in, while django-eventtools looks like the most raw & re-usable with fewer features.\nAssuming django-eventtools is our best option, we would need a custom GsocEvent(BaseEvent) and GsocOccurrence(BaseOccurrence), and the Program model would then need to have either\n\nan array of GsocOccurrence , and all of these start/end are pushed into it as events with the event name derived from the prefix (e.g. org_signup_open -> title=\"Org signup open\")\nfields for each event, like org_signup_open = GsocOccurrence()\n\nthe later feels like the better option, at least initially.", "diff": "@@ -0,0 +1,222 @@\n+from django.db import models\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Result(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open_starts = models.DateField()", "created_at": "2018-01-03T19:06:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTUwMjgwMA==", "fields": {"body": "these should be GsocEvent/ GsocOccurrence - they are the same events that are found in the Program json", "diff": "@@ -0,0 +1,222 @@\n+from django.db import models\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open_starts = models.DateField()\n+    org_signup_open_ends = models.DateField()\n+    org_approval_starts = models.DateField()\n+    org_approval_ends = models.DateField()\n+    orgs_published_starts = models.DateField()\n+    orgs_published_ends = models.DateField()\n+    student_signup_open_starts = models.DateField()\n+    student_signup_open_ends = models.DateField()\n+    slot_request_starts = models.DateField()\n+    slot_request_ends = models.DateField()\n+    slot_allocation_grace_period_starts = models.DateField()\n+    slot_allocation_grace_period_ends = models.DateField()\n+    project_acceptance_starts = models.DateField()\n+    project_acceptance_ends = models.DateField()\n+    project_decisions_finalization_starts = models.DateField()\n+    project_decisions_finalization_ends = models.DateField()\n+    first_work_period_starts = models.DateField()\n+    first_work_period_ends = models.DateField()\n+    first_evaluations_start = models.DateField()\n+    first_evaluations_ends = models.DateField()\n+    second_work_period_starts = models.DateField()\n+    second_work_period_ends = models.DateField()\n+    second_evaluations_starts = models.DateField()\n+    second_evaluations_ends = models.DateField()\n+    third_work_period_starts = models.DateField()\n+    third_work_period_ends = models.DateField()\n+    final_week_starts = models.DateField()\n+    final_week_ends = models.DateField()\n+    final_evaluations_mentor_starts = models.DateField()\n+    final_evaluations_mentor_ends = models.DateField()\n+    post_program_starts = models.DateField()\n+    post_program_ends = models.DateField()\n+    community_bonding_period_starts = models.DateField()\n+    community_bonding_period_ends = models.DateField()\n+    coding_period_starts = models.DateField()\n+    coding_period_ends = models.DateField()\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.homepage_start_button\n+\n+\n+class Organization(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    logo = models.ImageField(upload_to='', blank=True)\n+    url = models.URLField(blank=True)\n+    summary = models.TextField(max_length=300, default='')\n+    technologies = models.ManyToManyField('Technology')\n+    topics = models.ManyToManyField('Topic')\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Technology(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Topic(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Project(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    summary = models.TextField(max_length=300, default='')\n+    org = models.ForeignKey(Organization, on_delete=models.CASCADE)\n+    student = models.OneToOneField('Student')\n+    mentor = models.ForeignKey('Mentor', on_delete=models.CASCADE)\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Student(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Mentor(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+# for 2018 events\n+\n+\n+class UpcomingEvent(models.Model):", "created_at": "2018-01-03T19:07:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTYwMzgxMw==", "fields": {"body": "shit got confused between 2017 and 18 \ud83e\udd2a.  You are all good", "diff": "@@ -74,13 +74,13 @@ can be used to help select a repository that meets those criteria.\n To filter out repositories that do not meet the first two requirements, combine\n \n 1. [`stars:>99`](https://github.com/search?o=desc&q=stars%3A%3E%3D99&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93), and\n-2. [`pushed:>2016-09-30`](https://github.com/search?utf8=%E2%9C%93&q=pushed%3A%3E2016-09-30&type=Repositories&ref=searchresults)\n+2. [`pushed:>2017-09-30`](https://github.com/search?utf8=%E2%9C%93&q=pushed%3A%3E2017-09-30&type=Repositories&ref=searchresults)\n \n-The [combined query](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A>2016-09-30&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)\n+The [combined query](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A>2017-09-30&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)\n has more than 28,000 repository results, so there are many to choose from.\n \n An optional additional search term is\n-[`forks:>100`](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A%3E2016-09-30+forks%3A%3E%3D100&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)\n+[`forks:>100`](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A%3E2017-09-30+forks%3A%3E%3D100&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)", "created_at": "2018-01-04T08:59:59Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg3ODIyNw==", "fields": {"body": "move these two int fields to the top.", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()", "created_at": "2018-01-05T13:44:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg4MDAyMA==", "fields": {"body": "foriegn key at top", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)", "created_at": "2018-01-05T13:53:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg4MDMxMQ==", "fields": {"body": "there is no good attribute to use for the str().  can we use the program year ; it is the foreign key ??", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.homepage_start_button", "created_at": "2018-01-05T13:54:52Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5MTM0MA==", "fields": {"body": "the bool doesnt need to exist; it can be derived.", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()", "created_at": "2018-01-05T14:40:50Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5MTU5MQ==", "fields": {"body": "as a 1-1 , it should be at the top, as it is also the primary key", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)", "created_at": "2018-01-05T14:42:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwMzA1Mw==", "fields": {"body": "put this with the other django req, insert roughly in alpha order", "diff": "@@ -8,3 +8,4 @@ pillow\n ruamel.yaml\n markdown2\n python_dateutil\n+django-eventtools", "created_at": "2018-01-05T15:30:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwNDY0OA==", "fields": {"body": "@jayvdb, Django will automatically add a 's' in the end of the model names.", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):", "created_at": "2018-01-05T15:37:19Z", "last_edited_at": "2018-01-05T15:52:55Z", "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDIwMzczMQ==", "fields": {"body": "Other Linter Bears were using class method so I made it this way. If i change it to static method then also the implementation remains same, but i guess having a class method might be better for any kind of changes later.", "diff": "@@ -0,0 +1,33 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='prettier',\n+        use_stdout=True,\n+        use_stderr=True)\n+class PrettierLintBear:\n+    \"\"\"\n+    Formats JavaScript files according to the opinionated code format\n+    using ``prettier``.\n+\n+    See <https://github.com/prettier/prettier> for more information.\n+    \"\"\"\n+    LANGUAGES = {'JavaScript'}\n+    REQUIREMENTS = {NpmRequirement('prettier', '1')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Consistency', 'Correctness', 'Whitespace',\n+                  'Parentheses', 'Strings', 'Empty lines',\n+                  'Multi-line objects'}\n+    SEE_MORE = 'https://prettier.io/'\n+\n+    def process_output(self, output, filename, file):\n+        stdout, stderr = output\n+        regex = '(?P<message>.*)'\n+        yield from self.process_output_corrected(stdout, filename, file)\n+        yield from self.process_output_regex(stderr, filename, file, regex)\n+\n+    @classmethod\n+    def create_arguments(cls, filename, file, config_file):", "created_at": "2018-01-08T17:23:41Z", "last_edited_at": null, "author": "Nshul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDQ3NjYyOA==", "fields": {"body": "coala recommends working in a branch different than master\nso dont you think it is better to merge the master with upstream/master as it is just going to be a fast forward merge and rebase the 'branch-of-development' with the local master\nThis way one is only required to force push the development branch and simply push the master branch", "diff": "@@ -312,6 +320,18 @@ Step 4. Sending Your Changes\n    Your current branch will have an asterisk (\\*) next to it. Ensure that there\n    is no asterisk next to the master branch.\n \n+   Also make sure that your local clone is up-to-date with the original coala\n+   repository before pushing. To do that, run\n+\n+   ::\n+\n+         $ git fetch upstream\n+         $ git checkout master\n+         $ git rebase upstream/master\n+\n+   where ``upstream`` is the original coala remote. You may need to force\n+   push the repository the first time after rebasing.", "created_at": "2018-01-09T17:43:49Z", "last_edited_at": null, "author": "Nshul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ==", "fields": {"body": "@andrewda While some hr elements not using backslash, there is some img elements using backslash. We need to fix this later. Consistency is important.", "diff": "@@ -209,7 +209,8 @@ <h3>\n     </div>\n     <footer>\n       <small data-i18n=\"gci-copyright\">Google Code-in and the Google Code-in logo are trademarks of Google Inc.</small><br />\n-      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small>\n+      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small><br />", "created_at": "2018-01-11T08:00:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTIwNTM5Ng==", "fields": {"body": "@newbazz But I don't ignore all init.py files :) I will ignore it just in special case, it means when number of lines in init file is smaller than allowed minimum set. Then ignore file, means that for this type of file, I can't write the right message, because init can have less lines than set minimum.", "diff": "@@ -48,6 +48,7 @@ body_enforce_issue_reference = False\n enabled = False\n bears = LineCountBear\n max_lines_per_file = 1000\n+ignore_files_regex = ^.*__init__.py$, ^.*\\.gitkeep$, ^.*\\.gitignore$", "created_at": "2018-01-12T12:01:05Z", "last_edited_at": null, "author": "damian1996", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM3NjQ5Mg==", "fields": {"body": "yes", "diff": "@@ -57,11 +57,27 @@ def apply(self, result, original_file_dict, file_diff_dict, language: str,\n         filename = source_range.file\n \n         ignore_diff = Diff(original_file_dict[filename])\n-        ignore_diff.change_line(\n-            source_range.start.line,\n-            original_file_dict[filename][source_range.start.line-1],\n-            original_file_dict[filename][source_range.start.line-1].rstrip() +\n-            '  ' + ignore_comment)\n+\n+        if 'Ignore' in str(original_file_dict[filename][\n+                    source_range.start.line-1].rstrip()) and 'Bear' in str(\n+                    original_file_dict[filename][\n+                        source_range.start.line-1].rstrip()):\n+            ignore_comment = ignore_comment[\n+                ignore_comment.index('Ignore'):].replace('Ignore', ' and')", "created_at": "2018-01-13T16:58:08Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM4NjI3NA==", "fields": {"body": "@newbazz , either I have to put space before and ( as I did ) or I have to put space in ignore_diff.change_line ( after new_line and before ignore_comment ), both will work as Ignore abcBear and xyzBear.There must be a space between abcBear and and. \ud83d\ude04", "diff": "@@ -57,11 +57,27 @@ def apply(self, result, original_file_dict, file_diff_dict, language: str,\n         filename = source_range.file\n \n         ignore_diff = Diff(original_file_dict[filename])\n-        ignore_diff.change_line(\n-            source_range.start.line,\n-            original_file_dict[filename][source_range.start.line-1],\n-            original_file_dict[filename][source_range.start.line-1].rstrip() +\n-            '  ' + ignore_comment)\n+\n+        if 'Ignore' in str(original_file_dict[filename][\n+                    source_range.start.line-1].rstrip()) and 'Bear' in str(\n+                    original_file_dict[filename][\n+                        source_range.start.line-1].rstrip()):\n+            ignore_comment = ignore_comment[\n+                ignore_comment.index('Ignore'):].replace('Ignore', ' and')", "created_at": "2018-01-14T02:58:22Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM5MTY0Mw==", "fields": {"body": "Actually, &gteq; \ud83d\ude1b", "diff": "@@ -33,6 +33,11 @@ <h5 class=\"light\">simply install coala</h5>\n                     </p>\n                 </div>\n                 <div class=\"col m6 s12\">\n+                    <p>In order to use coala, you should have\n+                        <a href=\"https://www.python.org/downloads/\">Python >= 3.4</a> and\n+                        <a href=\"https://pip.pypa.io/en/stable/installing/\">pip >= 8</a> Installed", "created_at": "2018-01-14T09:19:45Z", "last_edited_at": "2018-01-14T09:22:59Z", "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTQwMDA2MQ==", "fields": {"body": "globals is built-in name and we are masking it.. @newbazz", "diff": "@@ -24,5 +24,16 @@ class JSStandardBear:\n     CAN_FIX = {'Formatting'}\n     SEE_MORE = 'https://standardjs.com/rules.html'\n \n-    def create_arguments(self, filename, file, config_file):\n-        return (filename, '--verbose')\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         parser: str = '',\n+                         globals: str= '',\n+                         plugin: str = ''):\n+        args = ('--verbose', filename)\n+        if parser != '':\n+            args += ('--parser', parser)\n+        if globals != '':", "created_at": "2018-01-14T14:50:09Z", "last_edited_at": "2018-01-14T14:50:27Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTQxMjA1OQ==", "fields": {"body": "isn't it actually default_actions? (note the s)", "diff": "@@ -22,7 +22,7 @@ default_actions = *: ApplyPatchAction\n # Do not set default_action to ApplyPatchAction as it may lead to some\n # required imports being removed that might result in coala behaving weirdly.\n \n-default_action: *: ShowPatchAction\n+default_action = *: ShowPatchAction", "created_at": "2018-01-14T22:19:33Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjI1MDA4NA==", "fields": {"body": "They are replaced in coalib/misc/Exception.py in the function get_exitcode, I have committed to that file as well you can have a look.", "diff": "@@ -25,7 +25,7 @@\n                             'coala or running `pip3 install \"%s\"`. Be aware '\n                             'that the latter solution might break other '\n                             'python packages that depend on the currently '\n-                            'installed version.')\n+                            'installed version. The \"%s\" is conflicting')", "created_at": "2018-01-18T04:59:33Z", "last_edited_at": "2018-01-18T04:59:54Z", "author": "jackthepirate6", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng==", "fields": {"body": "we probably don't want this as venv is created here only for using coala whereas in the development setup notes coala-venv is created for the purpose of development.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T09:54:17Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg5Njk4OQ==", "fields": {"body": "I've added the docstring.", "diff": "@@ -0,0 +1,37 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.results.Result import Result\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='dodgy',\n+        use_stdout=True,\n+        use_stderr=False,\n+        global_bear=True)\n+class DodgyBear:\n+    \"\"\"\n+    Checks Python files for \"dodgy\" looking values such\n+    as AWS secret keys, passwords, SCM diff check-ins,\n+    SSH keys and any other type of hardcoded secrets.\n+    \"\"\"\n+\n+    LANGUAGES = {'Python'}\n+    REQUIREMENTS = {PipRequirement('dodgy', '0.1.9')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Security', 'Hardcoded Secret',\n+                  'SCM Diff Check-in', 'SSH Keys'}\n+    SEE_MORE = 'https://github.com/landscapeio/dodgy'\n+\n+    @staticmethod\n+    def create_arguments(config_file):\n+        return []\n+\n+    def process_output(self, output, filename, file):\n+        for issue in json.loads(output)['warnings']:", "created_at": "2018-01-22T10:27:27Z", "last_edited_at": null, "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgwNDcwNQ==", "fields": {"body": "I think these lines can't be left as they are, because the example code has been changed and doesn't use the Bear class' logging system anymore. So it would make more sense to modify them accordingly.\nBut I'm waiting for feedback to know if I can rephrase it in another way though.", "diff": "@@ -110,8 +112,8 @@ You should now see an output like this on your command line:\n     tutorial, else you will see a bunch of other outputs from other bears\n     as well.\n \n-The Bear class also supports ``warn`` and ``err`` to create ``WARNING`` and\n-``ERROR`` messages respectively.\n+The ``logging`` module also supports ``warning`` and ``error`` to\n+create ``WARNING`` and ``ERROR`` messages respectively.", "created_at": "2018-01-21T08:41:51Z", "last_edited_at": "2018-01-21T08:46:31Z", "author": "Kagamihime", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgwNDgxMg==", "fields": {"body": "IMO you can remove this.", "diff": "@@ -110,8 +112,8 @@ You should now see an output like this on your command line:\n     tutorial, else you will see a bunch of other outputs from other bears\n     as well.\n \n-The Bear class also supports ``warn`` and ``err`` to create ``WARNING`` and\n-``ERROR`` messages respectively.\n+The ``logging`` module also supports ``warning`` and ``error`` to\n+create ``WARNING`` and ``ERROR`` messages respectively.", "created_at": "2018-01-21T08:48:35Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgxNjU5MA==", "fields": {"body": "Optional: You can omit the filename part inside {...}", "diff": "@@ -52,13 +52,15 @@ each file:\n .. code:: python\n \n     from coalib.bears.LocalBear import LocalBear\n+    import logging\n \n \n     class HelloWorldBear(LocalBear):\n         def run(self,\n                 filename,\n                 file):\n-            self.debug(\"Hello World! Checking file\", filename, \".\")\n+            logging.debug(\"Hello World! Checking file {filename} .\".format(", "created_at": "2018-01-21T16:01:16Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgxNjY5MA==", "fields": {"body": "Here you can describe logging support for WARNING and ERROR.", "diff": "@@ -110,9 +112,6 @@ You should now see an output like this on your command line:\n     tutorial, else you will see a bunch of other outputs from other bears\n     as well.\n \n-The Bear class also supports ``warn`` and ``err`` to create ``WARNING`` and\n-``ERROR`` messages respectively.\n-", "created_at": "2018-01-21T16:03:35Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgxNjkyMw==", "fields": {"body": "Yes, at the beginning I wanted to put The logging module also supports ``warning`` and ``error`` to create ``WARNING`` and ``ERROR`` messages respectively. but someone told me that it wouldn't make sense to mention that..\nI guess I should stick to what I did at the beginning after all?", "diff": "@@ -110,9 +112,6 @@ You should now see an output like this on your command line:\n     tutorial, else you will see a bunch of other outputs from other bears\n     as well.\n \n-The Bear class also supports ``warn`` and ``err`` to create ``WARNING`` and\n-``ERROR`` messages respectively.\n-", "created_at": "2018-01-21T16:10:46Z", "last_edited_at": null, "author": "Kagamihime", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgyMjk0OQ==", "fields": {"body": "Rename this to check_version, that more describes an action\nDocstring missing", "diff": "@@ -0,0 +1,8 @@\n+from pkg_resources import get_distribution\n+\n+\n+def version_check(package_name, version):", "created_at": "2018-01-21T19:43:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgyMzAwNg==", "fields": {"body": "This test is too system dependent, please use a reliable package or mock.", "diff": "@@ -0,0 +1,14 @@\n+import unittest\n+\n+from coalib.misc.VersionCheck import version_check\n+from pkg_resources import get_distribution\n+\n+\n+class VersionCheckTest(unittest.TestCase):\n+\n+    def test_version_check(self):\n+        package = 'libclang-py3'\n+        good_version = get_distribution(package).version\n+        bad_version = 1.2  # incorrect version", "created_at": "2018-01-21T19:45:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgzMDI3OA==", "fields": {"body": "Hmm... maybe we should at least refer to the official documentation of logging?", "diff": "@@ -110,9 +112,6 @@ You should now see an output like this on your command line:\n     tutorial, else you will see a bunch of other outputs from other bears\n     as well.\n \n-The Bear class also supports ``warn`` and ``err`` to create ``WARNING`` and\n-``ERROR`` messages respectively.\n-", "created_at": "2018-01-21T23:47:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA==", "fields": {"body": "Since it's venv in the rest documentation, use venv only. Didn't note that before. ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:03Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ==", "fields": {"body": "@diveshuttam yea i just had a look and IMO you can carry on withvenv and later on file an issue to change it after asking a maintainer ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:36Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ==", "fields": {"body": "@pareksha @newbazz @diveshuttam I agree with you guys on being consistent with the naming convention. However my comment was only regarding functionality either way \ud83d\ude0a", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T16:32:11Z", "last_edited_at": null, "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA==", "fields": {"body": "@pareksha  @anctartica actually, naming the virtual environment doesn't change its functionality. Using either venv or coala-venv is correct.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:00:41Z", "last_edited_at": "2018-01-22T13:01:01Z", "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA==", "fields": {"body": "yes, i know.. was referring to the context in which the name is used in the documentation", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:06:51Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzgyMzQ2NA==", "fields": {"body": "Default values and their data type has been defined in the run function already.", "diff": "@@ -184,6 +186,45 @@ def check_for_variable_spacing_issues(self,\n                     end_column=m.end(0) + 1,\n                     diffs=diff)\n \n+    def check_for_statement_spacing_issues(self,\n+                                           file,\n+                                           filename,\n+                                           line,\n+                                           line_number,\n+                                           statement_spacing):", "created_at": "2018-01-25T12:01:30Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTAyMDAxMQ==", "fields": {"body": "okay, but if it is not required then you can remove it :)", "diff": "@@ -23,7 +24,40 @@\n apt-get -y -qq upgrade\n \"\"\"\n \n+good_file_nodejs = \"\"\"\n+FROM ubuntu\n+MAINTAINER coala\n+LABEL Name coala-docker\n+LABEL Version 0.1\n+\n+RUN apt-get -y -qq update\n+RUN apt-get -y -qq upgrade\n+RUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n+EXPOSE 5432\n+CMD [\"/usr/bin/node\", \"/var/www/app.js\"]\n+\"\"\"\n+\n+bad_file_nodejs = \"\"\"\n+FROM ubuntu\n+\n+apt-get -y -qq update\n+apt-get -y -qq upgrade\n+curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n+\"\"\"\n+\n+rule_file = os.path.join(os.path.dirname(__file__),\n+                         'test_files',\n+                         'default_rule.yaml')\n \n DockerfileLintBearTest = verify_local_bear(DockerfileLintBear,\n                                            valid_files=(good_file,),\n                                            invalid_files=(bad_file,))\n+\n+DockerfileLintBearRuleTest = verify_local_bear(DockerfileLintBear,\n+                                               valid_files=(\n+                                                   good_file_nodejs,),\n+                                               invalid_files=(\n+                                                   bad_file_nodejs,),\n+                                               settings={'rule_file':\n+                                                         os.path.abspath(", "created_at": "2018-01-31T11:06:09Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTAzNDYwOA==", "fields": {"body": "I think that is unnecessary. This could be considered as part of emphasizing and relevant to the commit.", "diff": "@@ -208,27 +208,27 @@ Now you can start working on it!\n     You can do amazing stuff using corobo.\n \n         * Issue assigning as stated earlier.\n-        * File issues::\n+        * File issues\n \n-            corobo file issue <repo> <title>\n-            <description>\n+            **corobo file issue <repo> <title>**\n+            **<description>**\n \n-        * You shouldn't close any PR, instead mark them as work in progress::\n+        * You shouldn't close any PR, instead mark them as work in progress\n \n-            corobo mark wip <full url>\n+            **corobo mark wip <full url>**", "created_at": "2018-01-31T12:15:42Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA==", "fields": {"body": "I have already mentioned that the user will not see a version number if virtualenv is not installed and I think the output message would be pretty obvious to know that its not installed yet", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:\n+", "created_at": "2018-01-31T16:45:40Z", "last_edited_at": null, "author": "lilithxxx", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ==", "fields": {"body": "You need to explain the use of --user flag.", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:", "created_at": "2018-02-05T07:31:55Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTgyMzM3Ng==", "fields": {"body": "imports sud be in alphabetical order.", "diff": "@@ -7,9 +7,11 @@\n import shutil\n \n from freezegun import freeze_time\n+from testfixtures import LogCapture, StringComparison\n \n import requests\n import requests_mock\n+import logging", "created_at": "2018-02-03T19:42:55Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTgyMzM4MA==", "fields": {"body": "here as well", "diff": "@@ -1,5 +1,6 @@\n import inspect\n import traceback\n+import logging", "created_at": "2018-02-03T19:43:07Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTgyMzM5OA==", "fields": {"body": "here as well.", "diff": "@@ -2,6 +2,7 @@\n import queue\n import unittest\n \n+from testfixtures import LogCapture, StringComparison", "created_at": "2018-02-03T19:43:50Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzc5MDI4Ng==", "fields": {"body": "This code has been made inline.", "diff": "@@ -1,19 +0,0 @@\n-from functools import wraps\n-\n-\n-def filter(filter_function):\n-    def filter_section_bears(bears, args):\n-        return {section:\n-                tuple(bear for bear in bears[section]\n-                      if filter_function(bear, args))\n-                for section in bears}\n-\n-    @wraps(filter_function)\n-    def filter_wrapper(section_to_bears_dict, args):", "created_at": "2018-02-13T08:34:50Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzg0MDE3Ng==", "fields": {"body": "could you call the directory dockerfile_lint_test_files or similar that somehow incorporates the tool name / bear name? Other bears might want to add tests in the future too, having specific directories makes it easier to organize test files.", "diff": "@@ -0,0 +1,225 @@\n+---", "created_at": "2018-02-13T11:48:48Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzg0MDI1Mg==", "fields": {"body": "missing newline at eof", "diff": "@@ -0,0 +1,225 @@\n+---\n+  profile:\n+    name: \"Default\"\n+    description: \"Default Profile. Checks basic syntax.\"\n+    includes:\n+      #- recommended_label_rules.yaml\n+  line_rules:\n+    LABEL:\n+       paramSyntaxRegex: /.+/\n+       # Use defined_label_rules to defined a set of labels for your dockerfile\n+       # In this example, the labels \"Vendor\",\"Authoritative_Registry\",\"BZComponent\"\n+       # have been defined. A label value is 'valid' if matches the regular\n+       # expression 'valueRegex', otherwise an warn is logged with the string \"message\"\n+       # at level 'level'.  'reference_url' provides a web link where the user can\n+       # get more information about the rule.\n+       #\n+       defined_namevals:\n+           Name:\n+             valueRegex: /[\\w]+/\n+             message: \"Label 'Name' is missing or has invalid format\"\n+             level: \"warn\"\n+             required: true\n+             reference_url:\n+               - \"http://docs.projectatomic.io/container-best-practices/#\"\n+               - \"_recommended_labels_for_your_project\"\n+           Version:\n+             valueRegex:  /[\\w.${}()\"'\\\\\\/~<>\\-?\\%:]+/\n+             message: \"Label 'Version' is missing or has invalid format\"\n+             level: \"warn\"\n+             required: true\n+             reference_url:\n+               - \"http://docs.projectatomic.io/container-best-practices/#\"\n+               - \"_recommended_labels_for_your_project\"\n+           Release:\n+             valueRegex:  /[\\w.${}()\"'\\\\\\/~<>\\-?\\%:]+/\n+             message: \"Label 'Release' is missing or has invalid format\"\n+             level: \"warn\"\n+             required: false\n+             reference_url:\n+               - \"http://docs.projectatomic.io/container-best-practices/#\"\n+               - \"_recommended_labels_for_your_project\"\n+           Architecture:\n+             valueRegex: /[\\w]*[6,8][4,6]|[.]*86[.]*64/\n+             message: \"Label 'Architecture' is missing or has invalid format: x86, i386, x86_64\"\n+             level: \"info\"\n+             required: false\n+             reference_url:\n+               - \"http://docs.projectatomic.io/container-best-practices/#\"\n+               - \"_recommended_labels_for_your_project\"\n+           Vendor:\n+             valueRegex: /([\\w]+).+/\n+             message: \"Label 'Vendor' is missing or has invalid format\"\n+             level: \"warn\"\n+             required: false\n+             reference_url:\n+               - \"http://docs.projectatomic.io/container-best-practices/#\"\n+               - \"_recommended_labels_for_your_project\"\n+           Url:\n+             valueRegex: /([\\w]+).+/\n+             message: \"Label 'Url' is missing or has invalid format\"\n+             level: \"warn\"\n+             required: false\n+             reference_url:\n+               - \"http://docs.projectatomic.io/container-best-practices/#\"\n+               - \"_recommended_labels_for_your_project\"\n+           Help:\n+             valueRegex: /([\\w]+).+/\n+             message: \"Label 'Help' is missing or has invalid format\"\n+             level: \"warn\"\n+             required: false\n+             reference_url:\n+               - \"http://docs.projectatomic.io/container-best-practices/#\"\n+               - \"_recommended_labels_for_your_project\"\n+\n+    FROM: \n+      paramSyntaxRegex: /^[\\w./\\-:]+(:[${}\\w.]+)?(-[${}\\w.]+)?$/\n+      rules: \n+        - \n+          label: \"is_latest_tag\"\n+          regex: /latest/\n+          level: \"error\"\n+          message: \"base image uses 'latest' tag\"\n+          description: \"using the 'latest' tag may cause unpredictable builds. It is recommended that a specific tag is used in the FROM line or *-released which is the latest supported release.\"\n+          reference_url: \n+            - \"https://docs.docker.com/engine/reference/builder/\"\n+            - \"#from\"\n+        - \n+          label: \"no_tag\"\n+          regex: /^[:]/\n+          level: \"error\"\n+          message: \"No tag is used\"\n+          description: \"lorem ipsum tar\"\n+          reference_url: \n+            - \"https://docs.docker.com/engine/reference/builder/\"\n+            - \"#from\"\n+    MAINTAINER: \n+      paramSyntaxRegex: /.+/\n+      rules: []\n+    RUN: \n+      paramSyntaxRegex: /.+/\n+      rules: \n+        - \n+          label: \"no_yum_clean_all\"\n+          regex: /yum(?!.+clean all|.+\\.repo|-config|\\.conf)/\n+          level: \"warn\"\n+          message: \"yum clean all is not used\"\n+          description: \"the yum cache will remain in this layer making the layer unnecessarily large\"\n+          reference_url: \n+            - \"http://docs.projectatomic.io/container-best-practices/#\"\n+            - \"_clear_packaging_caches_and_temporary_package_downloads\"\n+        - \n+          label: \"yum_update_all\"\n+          regex: /yum(.+update all|.+upgrade|.+update)/\n+          level: \"info\"\n+          message: \"updating the entire base image may add unnecessary size to the container\"\n+          description: \"update the entire base image may add unnecessary size to the container\"\n+          reference_url: \n+            - \"http://docs.projectatomic.io/container-best-practices/#\"\n+            - \"_clear_packaging_caches_and_temporary_package_downloads\"\n+        -\n+          label: \"no_dnf_clean_all\"\n+          regex: /dnf(?!.+clean all|.+\\.repo)/g\n+          level: \"warn\"\n+          message: \"dnf clean all is not used\"\n+          description: \"the dnf cache will remain in this layer making the layer unnecessarily large\"\n+          reference_url: \n+            - \"http://docs.projectatomic.io/container-best-practices/#\"\n+            - \"_clear_packaging_caches_and_temporary_package_downloads\"\n+        -\n+          label: \"no_rvm_cleanup_all\"\n+          regex: /rvm install(?!.+cleanup all)/g\n+          level: \"warn\"\n+          message: \"rvm cleanup is not used\"\n+          description: \"the rvm cache will remain in this layer making the layer unnecessarily large\"\n+          reference_url: \n+            - \"http://docs.projectatomic.io/container-best-practices/#\"\n+            - \"_clear_packaging_caches_and_temporary_package_downloads\"\n+        -\n+          label: \"no_gem_clean_all\"\n+          regex: /gem install(?!.+cleanup|.+\\rvm cleanup all)/g\n+          level: \"warn\"\n+          message: \"gem cleanup all is not used\"\n+          description: \"the gem cache will remain in this layer making the layer unnecessarily large\"\n+          reference_url: \n+            - \"http://docs.projectatomic.io/container-best-practices/#\"\n+            - \"_clear_packaging_caches_and_temporary_package_downloads\" \n+        -\n+          label: \"no_apt-get_clean\"\n+          regex: /apt-get install(?!.+clean)/g\n+          level: \"info\"\n+          message: \"apt-get clean is not used\"\n+          description: \"the apt-get cache will remain in this layer making the layer unnecessarily large\"\n+          reference_url: \n+            - \"http://docs.projectatomic.io/container-best-practices/#\"\n+            - \"_clear_packaging_caches_and_temporary_package_downloads\" \n+        -\n+          label: \"privileged_run_container\"\n+          regex: /privileged/\n+          level: \"warn\"\n+          message: \"a privileged run container is allowed access to host devices\"\n+          description: \"Does this run need to be privileged?\"\n+          reference_url: \n+            - \"http://docs.docker.com/engine/reference/run/#\"\n+            - \"runtime-privilege-and-linux-capabilities\"\n+        -\n+          label: \"installing_ssh\"\n+          regex: /openssh-server/\n+          level: \"warn\"\n+          message: \"installing SSH in a container is not recommended\"\n+          description: \"Do you really need SSH in this image?\"\n+          reference_url: \"https://github.com/jpetazzo/nsenter\"  \n+        - \n+          label: \"no_ampersand_usage\"\n+          regex: / ; /\n+          level: \"info\"\n+          message: \"using ; instead of &&\"\n+          description: \"RUN do_1 && do_2: The ampersands change the resulting evaluation into do_1 and then do_2 only if do_1 was successful.\"\n+          reference_url:\n+            - \"http://docs.projectatomic.io/container-best-practices/#\"\n+            - \"#_using_semi_colons_vs_double_ampersands\"\n+    EXPOSE: \n+      paramSyntaxRegex: /^[\\d-\\s\\w/\\\\]+$/\n+      rules: []\n+    ENV: \n+      paramSyntaxRegex: /^[\\w-$/\\\\=\\\"[\\]{}@:,'`\\t. ]+$/\n+      rules: []\n+    ADD: \n+      paramSyntaxRegex: /^~?([\\w-.~:/?#\\[\\]\\\\\\/*@!$&'()*+,;=.{}\"]+[\\s]*)+$/\n+    COPY: \n+      paramSyntaxRegex: /.+/\n+      rules: []\n+    ENTRYPOINT:\n+      paramSyntaxRegex: /.+/\n+      rules: []\n+    VOLUME:\n+      paramSyntaxRegex: /.+/\n+      rules: []\n+    USER: \n+      paramSyntaxRegex: /^[a-z0-9_][a-z0-9_-]{0,40}$/\n+      rules: []\n+    WORKDIR: \n+      paramSyntaxRegex: /^~?[\\w\\d-\\/.{}$\\/:]+[\\s]*$/\n+      rules: []\n+    ONBUILD: \n+      paramSyntaxRegex: /.+/\n+      rules: []\n+  required_instructions: \n+    - \n+      instruction: \"EXPOSE\"\n+      count: 1\n+      level: \"info\"\n+      message: \"There is no 'EXPOSE' instruction\"\n+      description: \"Without exposed ports how will the service of the container be accessed?\"\n+      reference_url: \n+        - \"https://docs.docker.com/engine/reference/builder/\"\n+        - \"#expose\"\n+    - \n+      instruction: \"CMD\"\n+      count: 1\n+      level: \"info\"\n+      message: \"There is no 'CMD' instruction\"\n+      description: \"None\"\n+      reference_url: \n+        - \"https://docs.docker.com/engine/reference/builder/\"\n+        - \"#cmd\"", "created_at": "2018-02-13T11:49:10Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzg0MDUzMA==", "fields": {"body": "missing newline at eof", "diff": "@@ -0,0 +1,91 @@\n+---\n+  profile:\n+    name: \"Test\"\n+    description: \"Testing dockerfile_lint\"\n+  line_rules:\n+    FROM:\n+      paramSyntaxRegex: /^[a-z0-9./-]+(:[a-z0-9.]+)?$/\n+      rules:\n+        -\n+          label: \"is_latest_tag\"\n+          regex: /latest/\n+          level: \"info\"\n+          message: \"base image uses 'latest' tag\"\n+          description: \"using the 'latest' tag may cause unpredictable builds. It is recommended that a specific tag is used in the FROM line.\"\n+          reference_url:\n+            - \"https://docs.docker.com/engine/reference/builder/\"\n+            - \"#from\"\n+        -\n+          label: \"no_tag\"\n+          regex: /^[:]/\n+          level: \"warn\"\n+          message: \"No tag is used\"\n+          description: \"lorem ipsum tar\"\n+          reference_url:\n+            - \"https://docs.docker.com/engine/reference/builder/\"\n+            - \"#from\"\n+    MAINTAINER:\n+      paramSyntaxRegex: /.+/\n+      rules: []\n+    RUN:\n+      paramSyntaxRegex: /.+/\n+      rules:\n+        -\n+          label: \"no_yum_clean_all\"\n+          regex: /yum ((?!clean all).)* .+/\n+          level: \"warn\"\n+          message: \"yum clean all is not used\"\n+          description: \"the yum cache will remain in this layer making the layer unnecessarily large\"\n+          reference_url: \"None\"\n+        -\n+          label: \"installing_ssh\"\n+          regex: /ssh/\n+          level: \"warn\"\n+          message: \"installing SSH in a container is not recommended\"\n+          description: \"Do you really need SSH in this image?\"\n+          reference_url: \"https://github.com/jpetazzo/nsenter\"\n+    EXPOSE:\n+      paramSyntaxRegex: /^[0-9]+([0-9\\s]+)?$/\n+      rules: []\n+    ENV:\n+      paramSyntaxRegex: /^[a-zA-Z_]+[a-zA-Z0-9_]* .+$/\n+      rules: []\n+    ADD:\n+      paramSyntaxRegex: /^(~?[A-z0-9\\/_.-]+|https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*))\\s~?[A-z0-9\\/_.-]+$/\n+    COPY:\n+      paramSyntaxRegex: /.+/\n+      rules: []\n+    ENTRYPOINT:\n+      paramSyntaxRegex: /.+/\n+      rules: []\n+    VOLUME:\n+      paramSyntaxRegex: /.+/\n+      rules: []\n+    USER:\n+      paramSyntaxRegex: /^[a-z_][a-z0-9_]{0,30}$/\n+      rules: []\n+    WORKDIR:\n+      paramSyntaxRegex: /^~?[A-z0-9\\/_.-]+$/\n+      rules: []\n+    ONBUILD:\n+      paramSyntaxRegex: /.+/\n+      rules: []\n+  required_instructions:\n+    -\n+      instruction: \"MAINTAINER\"\n+      count: 1\n+      level: \"info\"\n+      message: \"Maintainer is not defined\"\n+      description: \"The MAINTAINER line is useful for identifying the author in the form of MAINTAINER Joe Smith <joe.smith@example.com>\"\n+      reference_url:\n+        - \"https://docs.docker.com/engine/reference/builder/\"\n+        - \"#maintainer\"\n+    -\n+      instruction: \"EXPOSE\"\n+      count: 1\n+      level: \"info\"\n+      message: \"There is no 'EXPOSE' instruction\"\n+      description: \"Without exposed ports how will the service of the container be accessed?\"\n+      reference_url:\n+        - \"https://docs.docker.com/engine/reference/builder/\"\n+        - \"#expose\"", "created_at": "2018-02-13T11:50:27Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzg0Mzk1MQ==", "fields": {"body": "I would put the comment into the except-block, so just move it one line down :) That's a more common placement :)", "diff": "@@ -57,12 +59,19 @@ def run(self,\n         natural_language = (guess_language(joined_text)\n                             if natural_language == 'auto'\n                             else natural_language)\n-        natural_language = 'en-US' if not natural_language \\\n-                           else natural_language\n \n-        tool = LanguageTool(natural_language, motherTongue='en_US')\n-        tool.disabled.update(languagetool_disable_rules)\n+        try:\n+            tool = LanguageTool(natural_language, motherTongue='en_US')\n+        # Using 'en-US' if guessed language is not supported", "created_at": "2018-02-13T12:06:20Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzODE1Mg==", "fields": {"body": "You should use a list and not tuples, this is way faster with that huge amount of args ;)", "diff": "@@ -25,5 +25,130 @@ class GoVetBear:\n     CAN_DETECT = {'Unused Code', 'Smell', 'Unreachable Code'}\n \n     @staticmethod\n-    def create_arguments(filename, file, config_file):\n-        return 'vet', filename\n+    def create_arguments(filename, file, config_file,\n+                         assembly_declarations: bool=False,\n+                         assign: bool=False,\n+                         atomic: bool=False,\n+                         boolean: bool=False,\n+                         build_tags: bool=False,\n+                         invalid_cgo: bool=False,\n+                         unkeyed_composite_literals: bool=False,\n+                         copying_locks: bool=False,\n+                         http_response: bool=False,\n+                         lost_cancel: bool=False,\n+                         methods: bool=False,\n+                         nil_function: bool=False,\n+                         printf: bool=False,\n+                         range_loops: bool=False,\n+                         shadow_variables: bool=False,\n+                         shifts: bool=False,\n+                         struct_tags: bool=False,\n+                         tests_and_docs: bool=False,\n+                         unreachable: bool=False,\n+                         unsafe_pointers: bool=False,\n+                         unused_result: bool=False):\n+        \"\"\"\n+        :param assembly_declarations:\n+            Mismatches between assembly files and Go function declarations.\n+        :param assign:\n+            Check for useless assignments.\n+        :param atomic:\n+            Common mistaken usages of the sync/atomic package.\n+        :param boolean:\n+            Common mistaken usages of the sync/atomic package.\n+        :param build_tags:\n+            Mistakes involving boolean operators.\n+        :param invalid_cgo:\n+            Detect some violations of the cgo pointer passing rules.\n+        :param unkeyed_composite_literals:\n+            Composite struct literals that do not use the field-keyed syntax.\n+        :param copying_locks:\n+            Locks that are erroneously passed by value.\n+        :param http_response:\n+            Mistakes deferring a function call on an HTTP response before\n+            checking whether the error returned with the response was nil.\n+        :param lost_cancel:\n+            The cancelation function returned by context.WithCancel,\n+            WithTimeout, and WithDeadline must be called or the new\n+            context will remain live until its parent context is cancelled.\n+        :param methods:\n+            Non-standard signatures for methods with familiar names, including:\n+            Format, GobEncode, GobDecode, MarshalJSON, MarshalXML, Peek,\n+            ReadByte,ReadFrom, ReadRune, Scan, Seek, UnmarshalJSON, UnreadByte,\n+            UnreadRune, WriteByte, WriteTo\n+        :param nil_function:\n+            Comparisons between functions and nil.\n+        :param printf:\n+            Suspicious calls to functions in the Printf family.\n+        :param range_loops:\n+            Incorrect uses of range loop variables in closures.\n+        :param shadow_variables:\n+            Variables that may have been unintentionally shadowed.\n+        :param shifts:\n+            Shifts equal to or longer than the variable's length.\n+        :param struct_tags:\n+            Struct tags that do not follow the format understood by\n+            reflect.StructTag.Get. Well-known encoding struct tags (json, xml)\n+            used with unexported fields.\n+        :param tests_and_docs:\n+            Mistakes involving tests including functions with incorrect names\n+            or signatures and example tests that document identifiers not in\n+            the package.\n+        :param unreachable:\n+            Unreachable code.\n+        :param unsafe_pointers:\n+            Likely incorrect uses of unsafe.Pointer to convert integers to\n+            pointers.\n+        :param unused_result:\n+            Calls to well-known functions and methods that return a value that\n+            is discarded\n+        \"\"\"\n+        args = ()\n+        # Every check in Vet is true by default.\n+        # Adding a flag set to True enables that check and disables all other\n+        # checks.\n+        # Adding a flag set to False disables that check and runs all\n+        # other checks.\n+        if assembly_declarations:\n+            args += ('-asmdecl=true',)\n+        if assign:\n+            args += ('-assign=true',)\n+        if atomic:\n+            args += ('-atomic=true',)\n+        if boolean:\n+            args += ('-bool=true',)\n+        if build_tags:\n+            args += ('-buildtags=true',)\n+        if invalid_cgo:\n+            args += ('-cgocall=true',)\n+        if unkeyed_composite_literals:\n+            args += ('-composites=true',)\n+        if copying_locks:\n+            args += ('-copylocks=true',)\n+        if http_response:\n+            args += ('-httpresponse=true',)\n+        if lost_cancel:\n+            args += ('-lostcancel=true',)\n+        if methods:\n+            args += ('-methods=true',)\n+        if nil_function:\n+            args += ('-nilfunc=true',)\n+        if printf:\n+            args += ('-printf=true',)\n+        if range_loops:\n+            args += ('-rangeloops=true',)\n+        if shadow_variables:\n+            args += ('-shadow=true',)\n+        if shifts:\n+            args += ('-shift=true',)\n+        if struct_tags:\n+            args += ('-structtags=true',)\n+        if tests_and_docs:\n+            args += ('-tests=true',)\n+        if unreachable:\n+            args += ('-unreachable=true',)\n+        if unsafe_pointers:\n+            args += ('-unsafeptr=true',)\n+        if unused_result:\n+            args += ('-unusedresult=true',)", "created_at": "2018-02-13T11:39:08Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzOTEyNQ==", "fields": {"body": "Oh it's a code-term, then please use double backticks for unsafe.Pointer", "diff": "@@ -25,5 +25,130 @@ class GoVetBear:\n     CAN_DETECT = {'Unused Code', 'Smell', 'Unreachable Code'}\n \n     @staticmethod\n-    def create_arguments(filename, file, config_file):\n-        return 'vet', filename\n+    def create_arguments(filename, file, config_file,\n+                         assembly_declarations: bool=False,\n+                         assign: bool=False,\n+                         atomic: bool=False,\n+                         boolean: bool=False,\n+                         build_tags: bool=False,\n+                         invalid_cgo: bool=False,\n+                         unkeyed_composite_literals: bool=False,\n+                         copying_locks: bool=False,\n+                         http_response: bool=False,\n+                         lost_cancel: bool=False,\n+                         methods: bool=False,\n+                         nil_function: bool=False,\n+                         printf: bool=False,\n+                         range_loops: bool=False,\n+                         shadow_variables: bool=False,\n+                         shifts: bool=False,\n+                         struct_tags: bool=False,\n+                         tests_and_docs: bool=False,\n+                         unreachable: bool=False,\n+                         unsafe_pointers: bool=False,\n+                         unused_result: bool=False):\n+        \"\"\"\n+        :param assembly_declarations:\n+            Mismatches between assembly files and Go function declarations.\n+        :param assign:\n+            Check for useless assignments.\n+        :param atomic:\n+            Common mistaken usages of the sync/atomic package.\n+        :param boolean:\n+            Common mistaken usages of the sync/atomic package.\n+        :param build_tags:\n+            Mistakes involving boolean operators.\n+        :param invalid_cgo:\n+            Detect some violations of the cgo pointer passing rules.\n+        :param unkeyed_composite_literals:\n+            Composite struct literals that do not use the field-keyed syntax.\n+        :param copying_locks:\n+            Locks that are erroneously passed by value.\n+        :param http_response:\n+            Mistakes deferring a function call on an HTTP response before\n+            checking whether the error returned with the response was nil.\n+        :param lost_cancel:\n+            The cancelation function returned by context.WithCancel,\n+            WithTimeout, and WithDeadline must be called or the new\n+            context will remain live until its parent context is cancelled.\n+        :param methods:\n+            Non-standard signatures for methods with familiar names, including:\n+            Format, GobEncode, GobDecode, MarshalJSON, MarshalXML, Peek,\n+            ReadByte,ReadFrom, ReadRune, Scan, Seek, UnmarshalJSON, UnreadByte,\n+            UnreadRune, WriteByte, WriteTo\n+        :param nil_function:\n+            Comparisons between functions and nil.\n+        :param printf:\n+            Suspicious calls to functions in the Printf family.\n+        :param range_loops:\n+            Incorrect uses of range loop variables in closures.\n+        :param shadow_variables:\n+            Variables that may have been unintentionally shadowed.\n+        :param shifts:\n+            Shifts equal to or longer than the variable's length.\n+        :param struct_tags:\n+            Struct tags that do not follow the format understood by\n+            reflect.StructTag.Get. Well-known encoding struct tags (json, xml)\n+            used with unexported fields.\n+        :param tests_and_docs:\n+            Mistakes involving tests including functions with incorrect names\n+            or signatures and example tests that document identifiers not in\n+            the package.\n+        :param unreachable:\n+            Unreachable code.\n+        :param unsafe_pointers:\n+            Likely incorrect uses of unsafe.Pointer to convert integers to", "created_at": "2018-02-13T11:43:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzOTYzNw==", "fields": {"body": "The setting name should include dockerfile_lint (or somehow the toolname), so it's not ambiguous with other bear settings implementing a similar functionality. Maybe dockerfile_lint_config or dockerfile_lint_rule_file. Those setting names can be specific because this is just a convenience feature for compatibility, if people are too lazy to migrate to coala's \"native\" settings.", "diff": "@@ -29,8 +29,16 @@ class DockerfileLintBear:\n         'info': RESULT_SEVERITY.INFO}\n \n     @staticmethod\n-    def create_arguments(filename, file, config_file):\n-        return '--json', '-f', filename\n+    def create_arguments(filename, file, config_file,\n+                         rule_file: str=''):\n+        \"\"\"\n+        :param rule_file:\n+            A yaml rule file for `dockerfile_lint`.", "created_at": "2018-02-13T11:46:16Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzOTg4OA==", "fields": {"body": "unnecessary change", "diff": "@@ -14,7 +16,6 @@\n CMD [\"/bin/bash\", \"coala\"]\n \"\"\"\n \n-", "created_at": "2018-02-13T11:47:24Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzOTk0Nw==", "fields": {"body": "use numbers, not \"one\", \"two\", \"three\", ... :) makes it easier to grasp", "diff": "@@ -23,7 +24,67 @@\n apt-get -y -qq upgrade\n \"\"\"\n \n+good_file_two = \"\"\"\n+FROM ubuntu\n+MAINTAINER coala\n+LABEL Name coala-docker\n+LABEL Version 0.1\n+\n+RUN apt-get -y -qq update\n+RUN apt-get -y -qq upgrade\n+RUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n+EXPOSE 5432\n+CMD [\"/usr/bin/node\", \"/var/www/app.js\"]\n+\"\"\"\n+\n+bad_file_two = \"\"\"", "created_at": "2018-02-13T11:47:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODE1NzYyNg==", "fields": {"body": "I tried to add line but it seems visual studio doesn't support this or have another format, when I add the code for line it opens new file with filename and line-number.", "diff": "@@ -92,6 +92,11 @@\n         'args': '--new-window',\n         'gui': True\n     },\n+    'code': {\n+        'file_arg_template': '{filename}',", "created_at": "2018-02-14T12:21:29Z", "last_edited_at": null, "author": "ayush9398", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODE4MzU5OA==", "fields": {"body": "LGTM as per https://github.com/nose-devs/nose/blob/master/setup.py#L109\ncc @Makman2", "diff": "@@ -77,9 +77,9 @@ def run(self):\n \n if __name__ == '__main__':\n     if platform.system() != 'Windows':\n-        data_files = [('.', ['coala.1'])]\n+        data_files = [('man/man1', ['coala.1'])]", "created_at": "2018-02-14T14:08:05Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODEzMzA2OQ==", "fields": {"body": "code is the default name of the visual studio launching file, i have already tried on my local machine, it works with 'code' only.", "diff": "@@ -92,6 +92,11 @@\n         'args': '--new-window',\n         'gui': True\n     },\n+    'code': {", "created_at": "2018-02-14T10:28:57Z", "last_edited_at": "2018-02-14T10:29:11Z", "author": "ayush9398", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODI5NzUzMw==", "fields": {"body": "Yes you can but not in this case. I don't think so. Unlike the .swp files and the like, tag files are not temporary files in vim. They are real editable permanent files that contain tags to certain function and variable definitions present in the project which are then used during navigation.", "diff": "@@ -38,3 +38,16 @@ Goopfile.lock\n venv/\n rultor_secrets.sh\n .vscode\n+\n+#Ignore tags created by ctags, etags and gtags\n+TAGS\n+.TAGS\n+!TAGS/\n+tags\n+.tags\n+!tags/\n+gtags.files\n+GTAGS\n+GRTAGS\n+GPATH\n+GSYMS", "created_at": "2018-02-14T20:16:08Z", "last_edited_at": null, "author": "nityeshaga", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODQ1MjE3Mw==", "fields": {"body": "But those are quite many... are these really all temporary files by vim? I've seen people provide only tags in some gitignore-files.", "diff": "@@ -38,3 +38,16 @@ Goopfile.lock\n venv/\n rultor_secrets.sh\n .vscode\n+\n+#Ignore tags created by ctags, etags and gtags\n+TAGS\n+.TAGS\n+!TAGS/\n+tags\n+.tags\n+!tags/\n+gtags.files\n+GTAGS\n+GRTAGS\n+GPATH\n+GSYMS", "created_at": "2018-02-15T11:47:55Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODQ3Njg5OQ==", "fields": {"body": "please do\n... = verify_local_bear(\n    DockerfileLintBear,\n    valid_files=...\n    ...\n\n(so 4 spaces indentation, that's quicker to read.)\nSame below.", "diff": "@@ -24,6 +26,71 @@\n \"\"\"\n \n \n+good_file_2 = \"\"\"\n+FROM ubuntu\n+MAINTAINER coala\n+LABEL Name coala-docker\n+LABEL Version 0.1\n+\n+RUN apt-get -y -qq update\n+RUN apt-get -y -qq upgrade\n+RUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n+EXPOSE 5432\n+CMD [\"/usr/bin/node\", \"/var/www/app.js\"]\n+\"\"\"\n+\n+\n+bad_file_2 = \"\"\"\n+FROM ubuntu\n+\n+apt-get -y -qq update\n+apt-get -y -qq upgrade\n+curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n+\"\"\"\n+\n+good_file_3 = \"\"\"\n+FROM kali\n+MAINTAINER coala\n+LABEL Name coala-docker\n+LABEL Version 0.1\n+EXPOSE 5432\n+\"\"\"\n+\n+\n+bad_file_3 = \"\"\"\n+FROM kali\n+LABEL Name\n+LABEL Version\n+\"\"\"\n+\n+default_rule = os.path.join(os.path.dirname(__file__),\n+                            'dockerfile_lint_test_files',\n+                            'default_rule.yaml')\n+\n+sample_rule = os.path.join(os.path.dirname(__file__),\n+                           'dockerfile_lint_test_files',\n+                           'sample_rule.yaml')\n+\n DockerfileLintBearTest = verify_local_bear(DockerfileLintBear,\n                                            valid_files=(good_file,),\n                                            invalid_files=(bad_file,))\n+\n+DockerfileLintBearTest2 = verify_local_bear(DockerfileLintBear,\n+                                            valid_files=(\n+                                                  good_file_2,),\n+                                            invalid_files=(\n+                                                  bad_file_2,),\n+                                            settings={\n+                                                'dockerfile_lint_rule_file':\n+                                                    os.path.abspath(\n+                                                        default_rule)})", "created_at": "2018-02-15T13:39:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODQ3ODMwOA==", "fields": {"body": "You could write a function get_testfile_name that does the path-join (many tests do the same). But optional.", "diff": "@@ -24,6 +26,71 @@\n \"\"\"\n \n \n+good_file_2 = \"\"\"\n+FROM ubuntu\n+MAINTAINER coala\n+LABEL Name coala-docker\n+LABEL Version 0.1\n+\n+RUN apt-get -y -qq update\n+RUN apt-get -y -qq upgrade\n+RUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n+EXPOSE 5432\n+CMD [\"/usr/bin/node\", \"/var/www/app.js\"]\n+\"\"\"\n+\n+\n+bad_file_2 = \"\"\"\n+FROM ubuntu\n+\n+apt-get -y -qq update\n+apt-get -y -qq upgrade\n+curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n+\"\"\"\n+\n+good_file_3 = \"\"\"\n+FROM kali\n+MAINTAINER coala\n+LABEL Name coala-docker\n+LABEL Version 0.1\n+EXPOSE 5432\n+\"\"\"\n+\n+\n+bad_file_3 = \"\"\"\n+FROM kali\n+LABEL Name\n+LABEL Version\n+\"\"\"\n+\n+default_rule = os.path.join(os.path.dirname(__file__),\n+                            'dockerfile_lint_test_files',\n+                            'default_rule.yaml')\n+\n+sample_rule = os.path.join(os.path.dirname(__file__),\n+                           'dockerfile_lint_test_files',\n+                           'sample_rule.yaml')", "created_at": "2018-02-15T13:44:48Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODQwMjY0Mw==", "fields": {"body": "But line is working with 'code'\nshould I change 'vscode' back to 'code'?", "diff": "@@ -92,6 +92,11 @@\n         'args': '--new-window',\n         'gui': True\n     },\n+    'vscode': {\n+        'file_arg_template': '{filename}:{line}',", "created_at": "2018-02-15T08:14:41Z", "last_edited_at": "2018-02-15T08:14:48Z", "author": "ayush9398", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk1NDc5NA==", "fields": {"body": "Maybe add check_ prefix or allow_/disallow_ prefix to many settings to clarify when something is allowed or disallowed.", "diff": "@@ -25,5 +28,96 @@ class GoVetBear:\n     CAN_DETECT = {'Unused Code', 'Smell', 'Unreachable Code'}\n \n     @staticmethod\n-    def create_arguments(filename, file, config_file):\n-        return 'vet', filename\n+    def create_arguments(filename, file, config_file,\n+                         assembly_go_mismatch: bool=False,\n+                         useless_assignment: bool=False,", "created_at": "2018-02-18T15:13:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk1NDczMg==", "fields": {"body": "That is fine by me! Or you can leave it the second issue open for newcomers since there are many newcomers looking for difficulty/newcomer task and I have already done another newcomer task for corobo. I will pick it up if there are no takers within a couple of days.", "diff": "@@ -22,6 +22,8 @@ class DockerfileLintBear:\n     AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Syntax', 'Smell'}\n+    # Ignore PycodestyleBear (E501)\n+    SEE_MORE = 'https://github.com/projectatomic/dockerfile_lint#dockerfile-lint'", "created_at": "2018-02-18T15:11:41Z", "last_edited_at": null, "author": "Crphang", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk1NTY4Ng==", "fields": {"body": "No that's redundant, don't use pass just to have a complete if-else construct. It's totally valid to have an if without an else.", "diff": "@@ -26,7 +29,8 @@ def mode_normal(console_printer, log_printer, args, debug=False):\n         console_printer=console_printer,\n         args=args,\n         debug=debug)\n-\n+    if log_printer:", "created_at": "2018-02-18T15:39:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODkyODk0MA==", "fields": {"body": "Yes absolutely! @sks444", "diff": "@@ -97,6 +99,13 @@ def process_documentation(self,\n \n             new_metadata.append(m._replace(desc=new_desc.lstrip(' ')))\n \n+        # Check for raw doctrings in python\n+        if re.match(r'\\s*r', doc_comment.indent):\n+            doc_comment.marker = ('r\"\"\"', '', '\"\"\"')\n+            doc_comment.indent = ' ' * (len(doc_comment.indent)-1)\n+        else:\n+            doc_comment.indent = ' ' * len(doc_comment.indent)\n+", "created_at": "2018-02-17T18:22:42Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODkyOTU5Ng==", "fields": {"body": "@kriti21 , Sorry, my bad. I pasted your code at the wrong place.\nIt is absolutely working fine \ud83d\udc4d", "diff": "@@ -97,6 +99,13 @@ def process_documentation(self,\n \n             new_metadata.append(m._replace(desc=new_desc.lstrip(' ')))\n \n+        # Check for raw doctrings in python\n+        if re.match(r'\\s*r', doc_comment.indent):\n+            doc_comment.marker = ('r\"\"\"', '', '\"\"\"')\n+            doc_comment.indent = ' ' * (len(doc_comment.indent)-1)\n+        else:\n+            doc_comment.indent = ' ' * len(doc_comment.indent)\n+", "created_at": "2018-02-17T18:47:28Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk2MDY0NA==", "fields": {"body": "This is default, you can just omit use_stdout and use_stderr args ;)", "diff": "@@ -0,0 +1,45 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from coalib.results.Result import Result\n+\n+\n+@linter(executable='dodgy',\n+        use_stdout=True,\n+        use_stderr=False,", "created_at": "2018-02-22T13:53:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk2MTA3MQ==", "fields": {"body": "rather return an empty tuple, then Python will reference always the same object and we save a little bit of memory and performance (minimal, but still :D)", "diff": "@@ -0,0 +1,45 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from coalib.results.Result import Result\n+\n+\n+@linter(executable='dodgy',\n+        use_stdout=True,\n+        use_stderr=False,\n+        global_bear=True)\n+class DodgyBear:\n+    \"\"\"\n+    Checks Python files for \"dodgy\" looking values such\n+    as AWS secret keys, passwords, SCM diff check-ins,\n+    SSH keys and any other type of hardcoded secrets.\n+    \"\"\"\n+\n+    LANGUAGES = {'Python'}\n+    REQUIREMENTS = {PipRequirement('dodgy', '0.1.9')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Security', 'Hardcoded Secret',\n+                  'SCM Diff Check-in', 'SSH Keys'}\n+    SEE_MORE = 'https://github.com/landscapeio/dodgy'\n+\n+    @staticmethod\n+    def create_arguments(config_file):\n+        return []", "created_at": "2018-02-22T13:55:33Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk2MTQxOQ==", "fields": {"body": "My opinion: These variables and API here are all described in the linter docs already, so I would only document additional parameters that are settings.", "diff": "@@ -0,0 +1,45 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from coalib.results.Result import Result\n+\n+\n+@linter(executable='dodgy',\n+        use_stdout=True,\n+        use_stderr=False,\n+        global_bear=True)\n+class DodgyBear:\n+    \"\"\"\n+    Checks Python files for \"dodgy\" looking values such\n+    as AWS secret keys, passwords, SCM diff check-ins,\n+    SSH keys and any other type of hardcoded secrets.\n+    \"\"\"\n+\n+    LANGUAGES = {'Python'}\n+    REQUIREMENTS = {PipRequirement('dodgy', '0.1.9')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Security', 'Hardcoded Secret',\n+                  'SCM Diff Check-in', 'SSH Keys'}\n+    SEE_MORE = 'https://github.com/landscapeio/dodgy'\n+\n+    @staticmethod\n+    def create_arguments(config_file):\n+        return []\n+\n+    def process_output(self, output, filename, file):\n+        \"\"\"\n+        Parses JSON stdout call and yields results\n+        according to the executable output.\n+        :param output:\n+            string output from the executable i.e. dodgy", "created_at": "2018-02-22T13:56:53Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk2MTk1NA==", "fields": {"body": "Here is the correction PersistatHash --> PersistentHash \ud83d\ude05", "diff": "@@ -170,6 +171,23 @@ def __init__(self, bears, result_callback, executor=None):\n \n                 def result_callback(result):\n                     pass\n+        :param cache:\n+            A cache bears can use to speed up runs. If ``None``, no cache will\n+            be used.\n+\n+            The cache stores the results that were returned last time from the\n+            parameters passed to ``execute_task`` in bears. If the section and\n+            parameters to ``execute_task`` are the same from a previous run,\n+            the cache will be queried instead of executing ``execute_task``.\n+\n+            The cache has to be a dictionary-like object, that maps bear types\n+            to respective cache-tables. The cache-tables itself are\n+            dictionary-like objects that map hash-values (generated by\n+            ``PersistantHash.persistent_hash`` from the task objects) to actual", "created_at": "2018-02-22T13:58:52Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA0NzQ1OA==", "fields": {"body": "Good point, however this comment is still valid. One task maps to one future, so this comment is still right (and I guess a bit better to understand when using tasks instead of futures here, as primarily bears emit tasks, not futures. The core turns them into futures to process them, but that's an implementation detail). But I'll revise the comments again \ud83d\udc4d", "diff": "@@ -258,25 +258,25 @@ def _schedule_bears(self, bears):\n                             None, self._execute_task_with_cache,\n                             bear, task)\n \n-                    tasks.add(future)\n+                    futures.add(future)\n \n-                self.running_tasks[bear] = tasks\n+                self.running_futures[bear] = futures\n \n                 # Cleanup bears without tasks after all bears had the chance to\n                 # schedule their tasks. Not doing so might stop the run too", "created_at": "2018-02-22T18:16:26Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw==", "fields": {"body": "till -> until\nRather avoid slang ;)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular\n+section in them (you have not specified any particular sections till", "created_at": "2018-02-22T20:44:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ==", "fields": {"body": "You could actually say \"This special section\" (because it really is special in coala's setting system)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:44:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw==", "fields": {"body": "Maybe say that \"This section groups all the settings that are entered via ...\", because the purpose of sections are their grouping-ability.", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:45:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA==", "fields": {"body": "--> \"that don't belong to a particular section\", I think this one is better :)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular", "created_at": "2018-02-22T20:47:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg==", "fields": {"body": "Ah :3 Regarding \u261d\ufe0f  edf0dae#r170088538\nSo this is what should come earlier, in the Configuration Files - coafiles-paragraph.", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng==", "fields": {"body": "Hm not sure we should encourage people to name it \"all\". But yeah, maybe a good convention in future? Not sure :3", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:28Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDAxMzg3MA==", "fields": {"body": "identation\nthis is better:\nREQUIREMENTS = {AnyOneOfRequirements(\n        [CabalRequirement(package='hlint', version='1.9.35'),\n         DistributionRequirement(apt_get='hlint')\n         ]\n    ),\n}", "diff": "@@ -19,7 +23,12 @@ class HaskellLintBear:\n     \"\"\"\n \n     LANGUAGES = {'Haskell'}\n-    REQUIREMENTS = {DistributionRequirement(apt_get='hlint')}\n+    REQUIREMENTS = {AnyOneOfRequirements(\n+        [CabalRequirement(package='hlint', version='1.9.35'),", "created_at": "2018-02-22T16:24:58Z", "last_edited_at": null, "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDQ4NTg4NA==", "fields": {"body": "Why have you added leading white spaces here ?", "diff": "@@ -75,13 +77,23 @@ The review process for coala is as follows:\n \n     .. note::\n \n-        Only one acknowledgment is needed per commit i.e ``ack commit_SHA``.\n+          Only one acknowledgment is needed per commit i.e ``ack commit_SHA``.", "created_at": "2018-02-26T03:07:53Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDQ4NjIxNA==", "fields": {"body": "This change here is not required IMO", "diff": "@@ -75,13 +77,23 @@ The review process for coala is as follows:\n \n     .. note::\n \n-        Only one acknowledgment is needed per commit i.e ``ack commit_SHA``.\n+          Only one acknowledgment is needed per commit i.e ``ack commit_SHA``.", "created_at": "2018-02-26T03:11:54Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTAwNTgxNA==", "fields": {"body": "The import statement had to be placed here instead of the usual - top of the file - because coala was encountering an error with circularly dependent import.", "diff": "@@ -32,6 +26,7 @@ def apply(self,\n         FILE_DIFF_DICT_INDEX = 2\n         SECTION_INDEX = 3\n \n+        from coalib.output.ConsoleInteraction import format_lines", "created_at": "2018-02-27T17:39:26Z", "last_edited_at": null, "author": "nityeshaga", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0MDEzMw==", "fields": {"body": "accordinly change the test, you use check_result if there is two different message template", "diff": "@@ -0,0 +1,30 @@\n+import re\n+\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Result import Result\n+\n+\n+class CopyrightCheckBear(LocalBear):\n+    \"\"\"\n+    Checks for copyright notice in a file.\n+    \"\"\"\n+    LANGUAGES = {'All'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'License'}\n+\n+    def run(self, filename, file,\n+            author: str=''):\n+        \"\"\"\n+        :param author: pass the name of the author\n+        \"\"\"\n+        copyright_regexp = \\\n+            r'Copyright\\s+(\\(C\\)\\s+)?\\d{4}([-,]\\d{4})*\\s+%(author)s'\n+        re_copyright = re.compile(copyright_regexp %\n+                                  {'author': author}, re.IGNORECASE)\n+        message = ''\n+        if not(re_copyright.search(''.join(file))):\n+            message = 'Copyright notice not present.'\n+\n+        yield Result(self, message)", "created_at": "2018-03-01T17:53:25Z", "last_edited_at": "2018-03-01T17:54:11Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjAxNzg5MQ==", "fields": {"body": "@RaiVaibhav Circle CI is also showing sourceforge issue now.\n@nvzard fixed the class name.", "diff": "@@ -0,0 +1,10 @@\n+//Copyright (C) 2014 - A copyright notice\n+\n+public class copyright_without_author {", "created_at": "2018-03-03T14:04:08Z", "last_edited_at": null, "author": "Mohit17067", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzU1ODUyMA==", "fields": {"body": "Done!", "diff": "@@ -21,11 +21,16 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         cmake_filter: str=None,\n                          cmakelint_config: path=''):\n         \"\"\"\n         :param cmakelint_config: The location of the cmakelintrc config file.\n+", "created_at": "2018-03-09T20:23:53Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDQ2NQ==", "fields": {"body": "this blank line is necessary", "diff": "@@ -11,7 +11,6 @@\n \"\"\"\n \n import os\n-", "created_at": "2018-03-11T01:30:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDU0NA==", "fields": {"body": "use logging", "diff": "@@ -0,0 +1,71 @@\n+import sys\n+import json\n+import requests\n+import xmltodict\n+from openhub.models import MostCommit, MostRecentCommit, AffiliatedCommitter\n+from django.core.management.base import BaseCommand\n+from community.git import get_owner\n+from openhub.oh_token import OH_TOKEN\n+\n+\n+org_name = get_owner()\n+class Command(BaseCommand):\n+    def import_data(self, affiliator):\n+        org = org_name\n+        name = affiliator.get('name', None)\n+        kudos = affiliator.get('kudos', None)\n+        level = affiliator.get('level', None)\n+        project1 = affiliator.get('most_commits', None).get('project')\n+        commits = affiliator.get('most_commits', None).get('commits', None)\n+        project2 = affiliator.get('most_recent_commit', None).get('project', None)\n+        date = affiliator.get('most_recent_commit', None).get('date', None)\n+\n+        try:\n+            cr1, create1 = MostCommit.objects.get_or_create(\n+                project1 = project1,\n+                commits = commits\n+                )\n+            if create1:\n+                cr1.save()\n+            cr2, create2 = MostRecentCommit.objects.get_or_create(\n+                project2 = project2,\n+                date = date\n+                )\n+            if create2:\n+                cr2.save()\n+            c, created = AffiliatedCommitter.objects.get_or_create(\n+                name = name,\n+                org = org,\n+                kudos = kudos,\n+                level = level,\n+                most_commits = cr1,\n+                most_recent_commit = cr2\n+                )\n+            if created:\n+                c.save()\n+                print (\"\\nAffiliatedCommitter, {}, has been saved.\".format(c))", "created_at": "2018-03-11T01:35:30Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDUxNg==", "fields": {"body": "blank line separates std libs and custom packages", "diff": "@@ -0,0 +1,71 @@\n+import sys\n+import json\n+import requests", "created_at": "2018-03-11T01:33:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY1ODA5Mw==", "fields": {"body": "get the token here, and catch the exception, and exit the function.  do not try to run without a token.", "diff": "@@ -0,0 +1,71 @@\n+from github import Github\n+#from inactiveIssue.github_token import GITHUB_TOKEN\n+from dateutil.parser import parse\n+import time\n+from datetime import date\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+import requests,json\n+\n+try:\n+    GH_TOKEN = get_api_key('GH')\n+except:\n+    print(\"Unable to get the token\")\n+    pass\n+\n+\n+\n+def run(request):\n+    g1 = Github(GH_TOKEN)", "created_at": "2018-03-11T15:15:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxNTE0Mg==", "fields": {"body": "put the parameter documentation in the same order as the parameters in the declaration", "diff": "@@ -21,11 +21,15 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         cmake_filter: str=None,\n                          cmakelint_config: path=''):\n         \"\"\"\n         :param cmakelint_config: The location of the cmakelintrc config file.\n+        :param cmake_filter: The filter to be applied on cmake file.", "created_at": "2018-03-10T07:50:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxNjYzOA==", "fields": {"body": "this already adds the test_bears directory, so the test logic below doesnt prove anything", "diff": "@@ -172,3 +172,19 @@ def test_limit_files_negative(self):\n             self.assertFalse(stderr)\n             self.assertEqual(retval, 0,\n                              'coala must return zero when successful')\n+\n+    def test_bear_dirs(self):\n+        with bear_test_module(), \\", "created_at": "2018-03-10T09:04:42Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxODA5Mw==", "fields": {"body": "OpenHub* ?", "diff": "@@ -0,0 +1,8 @@\n+# -*- coding: utf-8 -*-\n+from __future__ import unicode_literals\n+\n+from django.apps import AppConfig\n+\n+\n+class OpenhubConfig(AppConfig):", "created_at": "2018-03-10T10:14:30Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxODAxNw==", "fields": {"body": "should be upper case, and named like the others, so maybe OH_TOKEN", "diff": "@@ -122,3 +123,4 @@\n MEDIA_URL = '/media/'\n MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n STATICFILES_DIRS = ['static/']\n+openhub_api_key = 'enter_your_key'", "created_at": "2018-03-10T10:13:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYyNzI3OA==", "fields": {"body": "this is all junk.  #2331\nno benefit in 'fixing it'", "diff": "@@ -95,7 +95,16 @@\n             - \"#from\"\n     MAINTAINER: \n       paramSyntaxRegex: /.+/\n-      rules: []\n+      rules:", "created_at": "2018-03-10T16:47:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYyNzIxMQ==", "fields": {"body": "no way; we do not support version 0-infinity.\nI bet our tests would fail if someone tried to use most of the versions of this package.", "diff": "@@ -17,7 +17,7 @@ class DockerfileLintBear:\n     more information .\n     \"\"\"\n     LANGUAGES = {'Dockerfile'}\n-    REQUIREMENTS = {NpmRequirement('dockerfile_lint', '0.2.7')}\n+    REQUIREMENTS = {NpmRequirement('dockerfile_lint', '0')}", "created_at": "2018-03-10T16:45:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzc5NjMyOA==", "fields": {"body": "please re-order your imports to comply with PEP8.\nalso use snake_case for filenames", "diff": "@@ -0,0 +1,64 @@\n+from github import Github", "created_at": "2018-03-12T13:32:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzcxOTc3Ng==", "fields": {"body": "RadonBearDefaultsTest does the same. Check the complete file \ud83d\ude04", "diff": "@@ -25,15 +25,11 @@ class class1():\n     RadonBear,\n     valid_files=(test_file1, test_file2, test_file3),\n     invalid_files=(),\n-    settings={'radon_ranks_info': '',\n-              'radon_ranks_normal': '',\n-              'radon_ranks_major': ''})\n+    settings={'cc_threshold': 52})\n \n \n RadonBearReportsTest = verify_local_bear(\n     RadonBear,\n     valid_files=(),\n     invalid_files=(test_file1, test_file2),\n-    settings={'radon_ranks_info': '',\n-              'radon_ranks_normal': 'A',\n-              'radon_ranks_major': ''})\n+    settings={'cc_threshold': 1})", "created_at": "2018-03-12T08:31:29Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDAxNzUzNw==", "fields": {"body": "function names must comply with PEP8: snake case.  no upper case.\nfilenames also must not be upper case.\nand IMO call your app 'inactive_issues', based on only a little reading like https://stackoverflow.com/questions/3098681/is-there-a-naming-convention-for-django-apps", "diff": "@@ -0,0 +1,64 @@\n+import time\n+import json\n+\n+from github import Github\n+from dateutil.parser import parse\n+from datetime import date\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+\n+\n+def run(issue1):\n+    issues_number_list = []\n+    for j in issue1:\n+        issue_no = j.number\n+        events = j.get_events()\n+        myevent = []\n+        data = []\n+        for i in events:\n+            myevent.append(str(i.event))\n+        for i in events:\n+            if i.commit_id is not None:\n+                data.append(str(i.created_at))\n+        for i, myevents in reversed(list(enumerate(myevent))):\n+            if myevents == 'unassigned':\n+                break\n+            elif myevents == 'assigned':\n+                a = events[i].created_at\n+                c = (date.fromtimestamp(time.time()) - a.date()).days\n+                if c >= 60:  # for checking assigned duration\n+\n+                    mydata = list(reversed(data))\n+                    if len(mydata) != 0:\n+                        commit1 = parse(mydata[0])\n+                        calculated_days = (date.fromtimestamp(\n+                            time.time()) - commit1.date()).days\n+                        if calculated_days >= 60:\n+                            # for checking last commit update\n+                            issues_number_list.append(issue_no)\n+                    else:\n+                        issues_number_list.append(issue_no)\n+                break\n+    return issues_number_list\n+\n+\n+def inactiveIssue(request):", "created_at": "2018-03-13T05:05:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDk5MDAyOA==", "fields": {"body": "This is not negotiable.  you need to not use the word coala.  use get_owner , and luckily you can use the owner name as the repo name, which will fetch coala/coala.  That is good enough for the first version of this.", "diff": "@@ -0,0 +1,64 @@\n+import time\n+import json\n+\n+from github import Github\n+from dateutil.parser import parse\n+from datetime import date\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+\n+\n+def run(issue1):\n+    issues_number_list = []\n+    for j in issue1:\n+        issue_no = j.number\n+        events = j.get_events()\n+        myevent = []\n+        data = []\n+        for i in events:\n+            myevent.append(str(i.event))\n+        for i in events:\n+            if i.commit_id is not None:\n+                data.append(str(i.created_at))\n+        for i, myevents in reversed(list(enumerate(myevent))):\n+            if myevents == 'unassigned':\n+                break\n+            elif myevents == 'assigned':\n+                a = events[i].created_at\n+                c = (date.fromtimestamp(time.time()) - a.date()).days\n+                if c >= 60:  # for checking assigned duration\n+\n+                    mydata = list(reversed(data))\n+                    if len(mydata) != 0:\n+                        commit1 = parse(mydata[0])\n+                        calculated_days = (date.fromtimestamp(\n+                            time.time()) - commit1.date()).days\n+                        if calculated_days >= 60:\n+                            # for checking last commit update\n+                            issues_number_list.append(issue_no)\n+                    else:\n+                        issues_number_list.append(issue_no)\n+                break\n+    return issues_number_list\n+\n+\n+def inactiveIssue(request):\n+    try:\n+        GH_TOKEN = get_api_key('GH')\n+    except:\n+        return HttpResponse('[]')\n+    g1 = Github(GH_TOKEN)\n+    org = g1.get_organization('coala')  # Ignore KeywordBear", "created_at": "2018-03-16T03:28:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1MDI4OA==", "fields": {"body": "In my opinion, it's a bad practice of writing test. Why not using setUp to set abs path of test_files and then call it in each test?\nI mean you can do below code in setUp\nself.test_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'test_files'))\nAnd call it in each test by using good_file = os.path.join(self.test_path, 'vet_good.go').", "diff": "@@ -14,13 +14,19 @@ class GoVetBearTest(LocalBearTestHelper):\n     def setUp(self):\n         self.section = Section('test section')\n         self.uut = GoVetBear(self.section, Queue())\n-        self.good_file = os.path.join(os.path.dirname(__file__),\n-                                      'test_files',\n-                                      'vet_good.go')\n-        self.bad_file = os.path.join(os.path.dirname(__file__),\n-                                     'test_files',\n-                                     'vet_bad.go')\n \n-    def test_run(self):\n-        self.check_validity(self.uut, [], self.good_file)\n-        self.check_invalidity(self.uut, [], self.bad_file)\n+    def test_syntax_error(self):\n+        good_file = os.path.join(os.path.dirname(__file__),\n+                                 'test_files',\n+                                 'vet_good.go')\n+        bad_file = os.path.join(os.path.dirname(__file__),\n+                                'test_files',\n+                                'vet_bad_semantics.go')", "created_at": "2018-03-17T07:01:12Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI2NDYxOA==", "fields": {"body": "Okay sure. I'll just modify the milestones and scooch write new actions in there. :-)", "diff": "@@ -0,0 +1,43 @@\n+---\n+name: \"Nextgen action system\"\n+desc: \"Actions in coala should be improved to allow for more dynamic actions\"\n+requirements:\n+ - \"The applicant must understand how results and actions work in coala.\"\n+ - \"The proposal needs to contain a clear concept.\"\n+difficulty: \"medium\"\n+mentors:\n+ - Makman2\n+ - jayvdb\n+initiatives:\n+ - GSoC\n+tags:\n+ - core\n+---\n+\n+Currently, `Result` objects are passed to action objects as parameters when coala tries to apply an action. This is a bit restrictive as this means that coala needs to have a global set of actions that it tries to apply on all `Result` objects. Sure, coala checks if an action `is_applicable()` before it tries to apply it but it needs to do that for every `Result` that every bear ever generates.\n+\n+We need a way allow results to define actions by themselves, like result = Result(actions=[AmendCommitAction, ...]). Here are the benefits of such an approach:\n+1. More control inside actions over the interaction process.\n+2. Bears can specify their own actions, for example the GitCommitBear would highly benefit from this (actions could be added for amending commits). Then, the bear writers could get much more creative and generate even more useful bears.\n+\n+#### Milestones\n+\n+##### COMMUNITY BONDING\n+\n+* Student should have a clear plan and conceptual work must be finished.\n+* The applicant should know how to work with the community.\n+\n+##### CODING PHASE 1 \n+\n+* Changes to the `Result` class must be finished including writing tests and documentation\n+\n+##### CODING PHASE 2\n+\n+* Action classes have been revamped so that they allow the above mentioned benefits\n+* Refactoring of the existing action classes in order to comply with the above plan must be partially complete\n+\n+##### CODING PHASE 3\n+\n+* All existing action classes have been refactored, tested and changes merged\n+* Any other functions/modules that are affected by changes have been refactored\n+* coala tutorials and bear writing tutorials have been updated", "created_at": "2018-03-17T17:35:11Z", "last_edited_at": null, "author": "nityeshaga", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI3NjAwNg==", "fields": {"body": "What should a django Command.handle do when there is an error ?", "diff": "@@ -37,13 +39,19 @@ def handle(self, *args, **options):\n         \"\"\"\n         Makes a GET request to the  API.\n         \"\"\"\n+        logger = logging.getLogger(__name__)\n         headers = {'Content-Type': 'application/json'}\n-        response = requests.get(\n-            url=IMPORT_URL,\n-            headers=headers,\n-        )\n \n-        response.raise_for_status()\n+        try:\n+            response = requests.get(\n+                url=IMPORT_URL,\n+                headers=headers,\n+            )\n+            response.raise_for_status()\n+        except Exception as e:\n+            logger.error(e)\n+            return", "created_at": "2018-03-18T03:03:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI4NjY5NQ==", "fields": {"body": "pep naming please", "diff": "@@ -11,6 +11,16 @@\n from coalib.settings.Setting import typed_list\n \n \n+def cveKeyChecker(vulnerability):", "created_at": "2018-03-18T12:09:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5NjA4OQ==", "fields": {"body": "capturing filename this emits a warning, because the filename is always constant", "diff": "@@ -0,0 +1,66 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\w+\\.go):'", "created_at": "2018-03-18T17:12:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5NjU4Nw==", "fields": {"body": "Well, I went through the code and I saw that all the messages were mapped to essentially 2 severities, warning and error. https://github.com/alecthomas/gometalinter/blob/master/issue.go. Are there really other severity levels besides these two. Have you tested the linter?", "diff": "@@ -0,0 +1,66 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\w+\\.go):'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '", "created_at": "2018-03-18T17:31:32Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5OTE0Ng==", "fields": {"body": "Oh, right. I think I confused it with the other linter bear I was working on. \ud83d\ude04\nWill add the severity map thing. ;)", "diff": "@@ -0,0 +1,66 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\w+\\.go):'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '", "created_at": "2018-03-18T18:42:58Z", "last_edited_at": "2018-03-18T18:43:11Z", "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTQwMTM4OA==", "fields": {"body": "you are not adding the setting to the args", "diff": "@@ -21,10 +23,17 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         max_line_length: int=79,\n                          cmakelint_config: path=''):\n         \"\"\"\n+        :param max_line_length:\n+             Maximum number of characters for a line.\n++            When set to 0 allows infinite line length.\n         :param cmakelint_config: The location of the cmakelintrc config file.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize", "created_at": "2018-03-19T11:22:38Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTg3NDU2OA==", "fields": {"body": "I am allocated on too many project ideas as it is. :P", "diff": "@@ -0,0 +1,86 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"This project is about updating bear to use aspect feature.\"\n+developers_involved: []\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+  - RGSoC\n+issues: []\n+markdown: convert_bear_to_aspects.md\n+mentors:\n+  - jayvdb", "created_at": "2018-03-20T18:21:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTQ0NA==", "fields": {"body": "enocouraged - spelling... but, use stronger language, and gender neutral when possible:\n\nCandidate is expected to incorporate their own ideas and designs.", "diff": "@@ -41,11 +37,108 @@ corrections or gramatical corrections.\n In addition Bears will be able to offer templated patches, e.g. to offer\n variable renamings while the user should be asked for the new variable name.\n \n+#### Sample mockups\n+\n+Source: https://docs.google.com/document/d/1BLZO2tD93yKdO7XhMb5NgJvytu-pWDtPMRidGmjQ8EY/edit?usp=sharing (You are free to use ideas discussed in the proposal).\n+\n+Candidates can take help of following sample mockups to understand the use cases better. The mockups discussed below however need not be strictly followed. Candidate is enocouraged than welcome to incorporate his ideas and designs.", "created_at": "2018-03-21T02:54:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTY5OA==", "fields": {"body": "blank line after :", "diff": "@@ -15,24 +15,20 @@ mentors:\n   - jayvdb\n name: \"Improve Diff Handling\"\n requirements:\n-  - \"The proposal has to contain a clear concept.\"\n+  - \"The proposal has to contain a clear concept and implementation approach.\"\n   - \"The applicant should have one patch accepted to the coala core.\"\n tags:\n   - Core\n   - CLI\n ---\n-One advantage of using coala is that some Bears offer automatically generated\n-diffs to fix the problems they detect. This mechanism works smoothly as of now\n-and even applies the proposed diff automatically to the problematic file if the\n-user so desires. This is very helpful to the users. At the same time, not\n-every issue in the code can have just a single correct solution. The fix can\n-and should also be modifiable by the preferences of the user. Thus the\n-following improvements can be incorporated giving coala the ability to:\n-\n-1. Offer multiple diffs, i.e. multiple different fixes to the same issue.\n+coala provides static analysis routines in the form of bears that have capabilities to detect or even fix the problematic code. coala converts the fixes provided by different bears to its own `Diff` class instance which is later used to display the fix along with the analysis results to the users and let the users choose appropriate actions. This mechanism works smoothly as of now and even applies the proposed diff automatically to the problematic file if the user so desires. This is very helpful to the users. At the same time, not every issue in the code can have just a single correct solution. The fix can and should also be modifiable by the preferences of the user.\n+\n+The primary objective of the project is to improve the existing diff handling capability of coala so that it is possible for the bears to do things like:", "created_at": "2018-03-21T02:57:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTYzNg==", "fields": {"body": "grammar issue with for the enhance features  enhanced?", "diff": "@@ -65,3 +158,4 @@ variable renamings while the user should be asked for the new variable name.\n * The feature of templated patches is merged and fully tested.\n * The new API is fully documented on <https://api.coala.io/>.\n * At least one Bear exists that makes use of this.\n+* Output formats for the enhance features are added and their processing functions are implemented in the `Linter` class.", "created_at": "2018-03-21T02:56:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTczOA==", "fields": {"body": "split lines at 80cpl", "diff": "@@ -15,24 +15,20 @@ mentors:\n   - jayvdb\n name: \"Improve Diff Handling\"\n requirements:\n-  - \"The proposal has to contain a clear concept.\"\n+  - \"The proposal has to contain a clear concept and implementation approach.\"\n   - \"The applicant should have one patch accepted to the coala core.\"\n tags:\n   - Core\n   - CLI\n ---\n-One advantage of using coala is that some Bears offer automatically generated\n-diffs to fix the problems they detect. This mechanism works smoothly as of now\n-and even applies the proposed diff automatically to the problematic file if the\n-user so desires. This is very helpful to the users. At the same time, not\n-every issue in the code can have just a single correct solution. The fix can\n-and should also be modifiable by the preferences of the user. Thus the\n-following improvements can be incorporated giving coala the ability to:\n-\n-1. Offer multiple diffs, i.e. multiple different fixes to the same issue.\n+coala provides static analysis routines in the form of bears that have capabilities to detect or even fix the problematic code. coala converts the fixes provided by different bears to its own `Diff` class instance which is later used to display the fix along with the analysis results to the users and let the users choose appropriate actions. This mechanism works smoothly as of now and even applies the proposed diff automatically to the problematic file if the user so desires. This is very helpful to the users. At the same time, not every issue in the code can have just a single correct solution. The fix can and should also be modifiable by the preferences of the user.", "created_at": "2018-03-21T02:58:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk4Mjc3Nw==", "fields": {"body": "I think it depends on the students. For me, linting feature is enough.", "diff": "@@ -0,0 +1,63 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Offer coala languager server.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+  - RGSoC\n+issues:\n+  - \"https://github.com/coala/coala-vs-code/issues/3\"\n+  - \"https://github.com/coala/coala-vs-code/issues/4\"\n+markdown: coala_language_server.md\n+mentors:\n+  - gaocegege\n+name: \"coala Language Server\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala.\"\n+  - \"The applicant shoule be familiar with language server protocol\"\n+tags:\n+  - Language Server\n+  - Plugins\n+---\n+\n+The [Language Server Protocol](https://langserver.org/) was created by Microsoft to define a common language for programming language analyzers to speak. Today, several companies have come together to support its growth, including Codenvy, Red Hat, and Sourcegraph, and the protocol is becoming supported by a rapidly growing list of editor and language communities:\n+\n+- VS Code\n+- Eclipse Che\n+- Eclipse IDE(Eclipse LSP4E)\n+- IntelliJ / JetBrains IDEs\n+- Vim\n+- Atom (WIP)\n+- Emacs (WIP)\n+- Sublime (WIP)\n+\n+We have a state-of-art implementation in [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed for VS Code only. We need to design and implement a general mechanism for multiple editors/IDEs support.\n+\n+The project is divided into two parts:\n+\n+1. Offer a basic languager server.\n+2. Implement a plugin based on the language server.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- An official repository exists with CI.\n+- An mock language server exists.\n+\n+##### CODING PHASE 1\n+\n+- A basic language server for coala exists.", "created_at": "2018-03-21T04:27:28Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODI2NTk3MA==", "fields": {"body": "Done #2388", "diff": "@@ -3,4 +3,3 @@\n   \"version\": \"{{version}}\",\n   \"dependencies\": {{dependencies | jsonify(indent=4, sort_keys=True)}}\n }\n-", "created_at": "2018-03-30T09:53:11Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzNjk1NQ==", "fields": {"body": "if you add () to this rule then your test case would pass. You should add more test cases where this would fail even with () to show that it is invalid.", "diff": "@@ -105,7 +105,22 @@ def extract_links_from_file(file, link_ignore_regex, link_ignore_list):\n             https?://                   # http:// or https:// as only these\n                                         # are supported by the ``requests``\n                                         # library\n-            [^.:%\\s_/?#[\\]@\\\\]+         # Initial part of domain", "created_at": "2018-03-31T17:09:53Z", "last_edited_at": "2018-03-31T17:10:31Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1Mzg3NQ==", "fields": {"body": "A redundant space here", "diff": "@@ -24,18 +26,24 @@ class BanditBear:\n     def create_arguments(filename, file, config_file,\n                          bandit_skipped_tests: typed_list(str)=\n                          ('B105', 'B106', 'B107', 'B404', 'B603', 'B606',\n-                          'B607')):\n+                          'B607'),\n+                         bandit_selected_tests: typed_list(str)=()):\n         \"\"\"\n-        :param bandit_skipped_tests:\n-            The IDs of the tests ``bandit`` shall not perform. You can get\n-            information about the available builtin codes at\n-            https://github.com/openstack/bandit#usage.\n+        :param bandit_skipped_tests: The IDs of the tests ``bandit`` shall\n+                                     not perform.\n+        :param bandit_selected_tests:  The IDs of the tests ``bandit`` shall", "created_at": "2018-04-02T14:24:48Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODg4MzUzMA==", "fields": {"body": "Can you add a line like stdout, stderr = output otherwise output[1] and output[0] are hard to understand", "diff": "@@ -47,7 +55,22 @@ def create_arguments(filename, file, config_file,\n                       'LOW': 50}\n \n     def process_output(self, output, filename, file):\n-        output = json.loads(output)\n+        def warn_issue(message):\n+            self.warn('While running {0}, some issues were found:'\n+                      .format(self.__class__.__name__))\n+            self.warn(message)\n+\n+        # Taking output from stderr in case bandit shows errors\n+        # such as selected test ID and skipped test ID are same.\n+        err_pattern = re.compile(r'ERROR.*')\n+        match = err_pattern.search(output[1])", "created_at": "2018-04-03T16:25:27Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODg4NDYxOQ==", "fields": {"body": "I understand the default value of use_stdout is True. Not sure here, but maybe explicitly adding use_stdout=True makes the code easier to understand? (ref: http://api.coala.io/en/latest/Developers/Linter_Bears_Advanced.html)", "diff": "@@ -7,7 +8,8 @@\n from coalib.settings.Setting import typed_list\n \n \n-@linter(executable='bandit')\n+@linter(executable='bandit',\n+        use_stderr=True)", "created_at": "2018-04-03T16:29:25Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTAyMQ==", "fields": {"body": "check the comments on the issue", "diff": "@@ -39,7 +39,7 @@ def setup_dependencies(self):\n             nltk.download([\n                 'punkt',\n                 'averaged_perceptron_tagger',\n-            ])\n+            ], quiet=True)", "created_at": "2018-04-05T12:12:39Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTY3MzE1Mg==", "fields": {"body": "this breaks backwards compatibility with existing .coafile settings people might have.  cc @sils to ensure he thinks that is necessary in this case.", "diff": "@@ -17,39 +16,32 @@ class RadonBear(LocalBear):\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Complexity'}\n \n-    def run(self, filename, file,\n-            radon_ranks_info: typed_list(str)=(),\n-            radon_ranks_normal: typed_list(str)=('C', 'D'),\n-            radon_ranks_major: typed_list(str)=('E', 'F')):\n+    def run(self, filename, file, cc_threshold: int=10):\n         \"\"\"\n         Uses radon to compute complexity of a given file.\n \n-        :param radon_ranks_info:   The ranks (given by radon) to", "created_at": "2018-04-06T06:51:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTY4MTczOA==", "fields": {"body": "This is the one used by coala-bears: https://github.com/coala/coala-bears/blob/5ca3eb7/setup.py#L34\nHere is us fixing the same bug twice .. ;-)\n069e468 - Dec 24, 2016\ncoala/coala-bears@0a99c06 - Mar 22, 2016\nInvoking a command unnecessarily makes for bad reading, and the second command could also cause side effects which are undesirable and hard to understand because the exit code is from the first command.", "diff": "@@ -45,26 +44,30 @@ def run_tests(self):\n \n class BuildDocsCommand(setuptools.command.build_py.build_py):\n     apidoc_command = (\n-        'sphinx-apidoc', '-f', '-o', 'docs', '--no-toc', 'coalib'\n+        'sphinx-apidoc', '-f', '-o', 'docs',\n+        '--no-toc',\n+        'coalib'\n     )\n-    doc_command = ('make', '-C', 'docs', 'html', 'SPHINXOPTS=-W')\n+    make_command = ('make', '-C', 'docs', 'html', 'SPHINXOPTS=-W')\n \n     def run(self):\n-        errOne = call(self.apidoc_command)\n-        errTwo = call(self.doc_command)\n-        sys.exit(errOne or errTwo)\n+        err_no = call(self.apidoc_command)\n+        if not err_no:\n+            err_no = call(self.make_command)", "created_at": "2018-04-06T07:43:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTcyNDUzOA==", "fields": {"body": "looks like this is still needed", "diff": "@@ -1,28 +1,10 @@\n import unittest\n-import requests\n-import requests_mock", "created_at": "2018-04-06T10:59:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzE1NQ==", "fields": {"body": "Remove after debugging", "diff": "@@ -138,6 +138,21 @@ export function parseRoute({params, routes, location}) {\n class FilterState {\n   constructor(state) {\n     this.state = state;\n+    if (this.state.repoInfos.length === 0) {\n+      const repositories = process.env.REPOSITORIES || 'coala';\n+      const repoOwner = 'coala'; //default repoOwner\n+\n+      // extracting repo names\n+      let repoNames = repositories.substring(repositories.indexOf(\":\") + 1).split(\"|\");\n+\n+      let arr = [];\n+      repoNames.forEach(repoName => {\n+        arr.push({ repoOwner, repoName});\n+      })\n+\n+      this.state.repoInfos = arr;\n+    }\n+    console.log(this.state.repoInfos)", "created_at": "2018-04-08T10:34:16Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkwNzU1MQ==", "fields": {"body": "this is all the same as JavaScript ES6.\nCreate a separate issue about how to model Flow being a derivative of a specific JavaScript version, and get feedback from people involved in the language definitions, especially @userzimmermann .\nA complication is that ES6 has backticks while other versions don't.\nI doubt we model Python versions correctly yet, so JavaScript versions is going to be breaking new ground.", "diff": "@@ -0,0 +1,12 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class Flow:\n+    extensions = '.js'\n+    comment_delimiter = '//'\n+    multiline_comment_delimiters = {'/*': '*/'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}\n+    multiline_string_delimiters = {'`': '`'}", "created_at": "2018-04-07T03:55:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkxNDEzMQ==", "fields": {"body": "all this circle stuff will go with the circle-ci patch.\nbut that might take a while.", "diff": "@@ -5,13 +5,13 @@ TERM=dumb\n \n # Choose the python versions to install deps for\n case $CIRCLE_NODE_INDEX in\n- 0) dep_versions=( \"3.4.3\" \"3.5.1\" ) ;;", "created_at": "2018-04-07T10:50:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkxNTQzNQ==", "fields": {"body": "oh wow.  that calls for coala/coala#4098 @satwikkansal", "diff": "@@ -0,0 +1,26 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='ktlint',\n+        global_bear=True,\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.*):(?P<line>\\d+):'\n+                     r'(?P<column>\\d+): (?P<message>.+)')\n+class KotlinLintBear:\n+    \"\"\"\n+    Lints your Kotlin files.\n+    Checks for coding standards or semantic problems in Kotlin files.\n+    \"\"\"\n+    LANGUAGES = {'kotlin'}\n+    REQUIREMENTS = {DistributionRequirement(brew='shyiko/ktlint/ktlint')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax'}\n+    SEE_MORE = 'https://ktlint.github.io'\n+\n+    @staticmethod\n+    def create_arguments(config_file):\n+        return ()", "created_at": "2018-04-07T12:14:07Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkyMTI2MQ==", "fields": {"body": "You have not created a GlobalBear , so that is all irrelevant.", "diff": "@@ -0,0 +1,66 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\w+\\.go):'", "created_at": "2018-04-07T16:35:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA3OTI2Nw==", "fields": {"body": "Nicely spotted.  I hadnt implemented that yet.  We can do that later.", "diff": "@@ -0,0 +1,49 @@\n+{% extends 'coala-setup.py.jj2'%}\n+\n+{%block local_import_block%}", "created_at": "2018-04-09T12:36:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MDc3NQ==", "fields": {"body": "Most of these tasks are handled already by IGitt, I recommend using that.", "diff": "@@ -102,6 +105,70 @@ def get_host_from_remotes():\n             netloc = urlparse(url)[1]\n         return netloc.split('.')[0]\n \n+    @staticmethod\n+    def get_owner_from_url(url):", "created_at": "2018-04-09T13:19:01Z", "last_edited_at": null, "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MjEzOA==", "fields": {"body": "Again as @nalinbhardwaj  mentioned earlier, we do support GitLab host also\nSo limiting to GithubAPI could limit the user to not being able to check for issue on other hosts\nIgitt is perhaps the place to handle such stuff", "diff": "@@ -102,6 +105,70 @@ def get_host_from_remotes():\n             netloc = urlparse(url)[1]\n         return netloc.split('.')[0]\n \n+    @staticmethod\n+    def get_owner_from_url(url):\n+        return urlparse(url)[2].split('/')[1]\n+\n+    @staticmethod\n+    def get_repository_from_url(url):\n+        return urlparse(url)[2].split('/')[2]\n+\n+    @staticmethod\n+    def get_owner_from_remote(remote):\n+        \"\"\"\n+        Retrieve the owner from the specified remote.\n+        \"\"\"\n+        url, _ = run_shell_command(\n+                \"git config --get-regex '^remote.{}.url$'\".format(remote))\n+        url = url.split()\n+        if len(url) == 0:\n+            return None\n+        url = url[-1]\n+\n+        if 'git@' in url:\n+            user = re.findall(r':(.*?)/', url)[0]\n+        else:\n+            user = urlparse(url)[2].split('/')[1]\n+        return user\n+\n+    @staticmethod\n+    def get_repository_from_remote(remote):\n+        \"\"\"\n+        Retrieve the owner from the specified remote.\n+        \"\"\"\n+        url, _ = run_shell_command(\n+                \"git config --get-regex '^remote.{}.url$'\".format(remote))\n+        url = url.split()\n+        if len(url) == 0:\n+            return None\n+        url = url[-1]\n+\n+        if 'git@' in url:\n+            repository = re.findall(r'/(.*?).git', url)[0]\n+        else:\n+            repository = urlparse(url)[2].split('/')[2][:-4]\n+        return repository\n+\n+    @staticmethod\n+    def is_issue_open(owner, repo, issue_id):\n+        github_get_issue_api = 'https://api.github.com/repos/{}/{}/issues/{}'", "created_at": "2018-04-09T13:23:44Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDE1NzI2OQ==", "fields": {"body": "blank lines not blanklines", "diff": "@@ -29,6 +30,9 @@ def run(self,\n             True if spaces are to be used instead of tabs.\n         :param allow_trailing_whitespace:\n             Whether to allow trailing whitespace or not.\n+        :param allow_leading_blanklines:\n+            Whether to allow leading blanklines", "created_at": "2018-04-09T16:41:17Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDE1NzQyMw==", "fields": {"body": "at the start not at start", "diff": "@@ -29,6 +30,9 @@ def run(self,\n             True if spaces are to be used instead of tabs.\n         :param allow_trailing_whitespace:\n             Whether to allow trailing whitespace or not.\n+        :param allow_leading_blanklines:\n+            Whether to allow leading blanklines\n+            at start of file or not.", "created_at": "2018-04-09T16:41:50Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI3Nzc4MA==", "fields": {"body": "see SpaceConsistencyBear", "diff": "@@ -0,0 +1,133 @@\n+import json\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from coalib.results.Result import Result\n+\n+_setting_map = {True: 'on',\n+                False: 'off'}\n+\n+\n+@linter(executable='gherkin-lint',\n+        use_stderr=True,\n+        use_stdout=False,\n+        global_bear=True)\n+class GherkinLintBear:\n+    \"\"\"\n+    Use Gherkin to run linting on feature files\n+    \"\"\"\n+\n+    LANGUAGES = {'Gherkin'}\n+    REQUIREMENTS = {NpmRequirement('gherkin-lint', '2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala_devel@googlegroups.com'}\n+    LICENSE = 'AGPL_3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax'}\n+\n+    def process_output(self, output, filename, file):\n+        stderr = json.loads(output)\n+        for fileErr in stderr:\n+            filePath = fileErr['filePath']\n+            for err in fileErr['errors']:\n+                yield Result.from_values(\n+                    origin='{} ({})'.format(\n+                        self.__class__.__name__,\n+                        err['rule']),\n+                    message=err['message'],\n+                    line=int(err['line']),\n+                    file=filePath)\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        indentation: bool = False,\n+                        name_length: bool = False,\n+                        new_line_at_eof: bool = False,\n+                        no_dupe_feature_names: bool = False,\n+                        no_dupe_scenario_names: bool = False,\n+                        no_duplicate_tags: bool = False,\n+                        no_empty_file: bool = False,\n+                        no_files_without_scenarios: bool = False,\n+                        no_homogenous_tags: bool = False,\n+                        no_multiple_empty_lines: bool = False,\n+                        no_restricted_tags: bool = False,\n+                        no_scenario_outlines_without_examples: bool = False,\n+                        no_superfluous_tags: bool = False,\n+                        no_trailing_spaces: bool = False,", "created_at": "2018-04-10T01:52:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI4MDY1MA==", "fields": {"body": "Do not ignore it, see openhub app on how to handle long urls, please never use \\.", "diff": "@@ -0,0 +1,66 @@\n+import json\n+import requests\n+\n+from github import Github\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+\n+from community.git import get_org_name\n+\n+\n+def run(issues, GH_TOKEN, reponame):\n+    issues_number_list = []\n+    for j in issues:\n+        issue_no = j.number\n+        events = j.get_events()\n+        data = []\n+        for i in events:\n+            if i.commit_id is not None:\n+                data.append(str(i.commit_id))\n+        extracted_data = data[-1:]\n+        if len(extracted_data) == 1:\n+            commit_id = extracted_data[0]\n+            url = 'https://api.github.com/search/issues?q='+commit_id + \\\n+                '+type:pr+repo:'+reponame  # Ignore PycodestyleBear (E501)", "created_at": "2018-04-10T02:18:13Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI5ODE4OQ==", "fields": {"body": "this issue doesn't involve making changes to .coafile. Rather than fixing that PEP8Bear showed previously you have simply removed it.", "diff": "@@ -29,12 +20,13 @@ language = Python\n remove_all_unused_imports = true\n \n [autopep8]\n-bears = PEP8Bear, PycodestyleBear\n+bears += PycodestyleBear", "created_at": "2018-04-10T05:07:12Z", "last_edited_at": "2018-04-10T05:07:50Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDQwNzM3NA==", "fields": {"body": "I'm guessing earlier it was because of the line length, now it can be on the same line.", "diff": "@@ -45,26 +44,30 @@ def run_tests(self):\n \n class BuildDocsCommand(setuptools.command.build_py.build_py):\n     apidoc_command = (\n-        'sphinx-apidoc', '-f', '-o', 'docs', '--no-toc', 'coalib'\n+        'sphinx-apidoc', '-f', '-o', 'docs',", "created_at": "2018-04-10T12:50:13Z", "last_edited_at": null, "author": "Monal5031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDg2MTY0Mw==", "fields": {"body": "IMO the logic could be simplified. Wouldn't it be much simpler to simply append .* and prepend https?:(for links starting with //) and perform a regex match in the end.", "diff": "@@ -68,9 +68,35 @@ def parse_pip_vcs_url(link):\n         splitted_schema = splitted_at[splitted_at.index('+') + 1:]\n         return splitted_schema\n \n+    @staticmethod\n+    def process_ignored_list(link_ignore_list):", "created_at": "2018-04-11T18:52:53Z", "last_edited_at": "2018-04-11T19:11:36Z", "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkwNDU0Mw==", "fields": {"body": "oh. Yeah, I just saw that. If this is the case then it's fine. \ud83d\udc4d", "diff": "@@ -0,0 +1,53 @@\n+import unittest\n+\n+from coalib.parsing.FilterHelper import (\n+    apply_filter,\n+    apply_filters,\n+    is_valid_filter,\n+    _filter_section_bears\n+)\n+from coalib.parsing.filters import available_filters\n+from coalib.parsing.InvalidFilterException import InvalidFilterException\n+from coalib.settings.ConfigurationGathering import get_all_bears\n+\n+\n+class FilterHelperTest(unittest.TestCase):\n+\n+    def test_apply_filter_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filter('unknown', ['args'])\n+\n+        message = str(exp.exception)\n+        self.assertEqual(\"'unknown' is an invalid filter. Available filters: \"\n+                         + ', '.join(sorted(available_filters)), message)\n+\n+    def test_apply_filters_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filters([['language', 'C', 'Python'],\n+                           ['unknown', 'args']])\n+\n+        message = str(exp.exception)\n+        self.assertEqual(\"'unknown' is an invalid filter. Available filters: \"\n+                         + ', '.join(sorted(available_filters)), message)\n+\n+    def test_is_valid_filter(self):\n+        wrong_filter_result = is_valid_filter('check')\n+        right_filter_result = is_valid_filter('can_detect')\n+        self.assertFalse(wrong_filter_result)\n+        self.assertTrue(right_filter_result)\n+\n+    def test_filter_section_bears(self):\n+        local_bears, global_bears = get_all_bears()", "created_at": "2018-04-11T21:31:03Z", "last_edited_at": null, "author": "lalitmee", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxMTk4OQ==", "fields": {"body": "You can use local_bears, _ = get_all_bears() in this case. But no big deal, this is your choice. \ud83d\ude09", "diff": "@@ -0,0 +1,53 @@\n+import unittest\n+\n+from coalib.parsing.FilterHelper import (\n+    apply_filter,\n+    apply_filters,\n+    is_valid_filter,\n+    _filter_section_bears\n+)\n+from coalib.parsing.filters import available_filters\n+from coalib.parsing.InvalidFilterException import InvalidFilterException\n+from coalib.settings.ConfigurationGathering import get_all_bears\n+\n+\n+class FilterHelperTest(unittest.TestCase):\n+\n+    def test_apply_filter_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filter('unknown', ['args'])\n+\n+        message = str(exp.exception)\n+        self.assertEqual(\"'unknown' is an invalid filter. Available filters: \"\n+                         + ', '.join(sorted(available_filters)), message)\n+\n+    def test_apply_filters_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filters([['language', 'C', 'Python'],\n+                           ['unknown', 'args']])\n+\n+        message = str(exp.exception)\n+        self.assertEqual(\"'unknown' is an invalid filter. Available filters: \"\n+                         + ', '.join(sorted(available_filters)), message)\n+\n+    def test_is_valid_filter(self):\n+        wrong_filter_result = is_valid_filter('check')\n+        right_filter_result = is_valid_filter('can_detect')\n+        self.assertFalse(wrong_filter_result)\n+        self.assertTrue(right_filter_result)\n+\n+    def test_filter_section_bears(self):\n+        local_bears, global_bears = get_all_bears()", "created_at": "2018-04-11T22:03:23Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxNTE1NA==", "fields": {"body": "@refactormyself\nWe are using coala's docker image to run coala on this repository, so we are not installing coala using pip over here.\nYou should consider removing these pip statements, and rather putting the if condition above the docker line, so that the GitCommitBear is ignored before running coala from docker", "diff": "@@ -10,7 +10,14 @@ cache: bundler\n script:\n   - .ci/build.sh\n   - docker run -v=$(pwd):/app --workdir=/app coala/base coala --ci\n-\n+  - pip install ./dist/coala-*.whl", "created_at": "2018-04-11T22:19:59Z", "last_edited_at": "2018-04-11T22:24:20Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3MjQ3Mw==", "fields": {"body": "if cmakelint_config:\n            args += ('--config=' + cmakelint_config,)\n\n        if max_line_length:\n            args += ('--linelength=' + str(max_line_length),)\n\nWhy I am suggesting to break and make it in 2 conditions is because if a user does not give cmakelint_config then your code has no use of max_line_length that you have given here.", "diff": "@@ -21,11 +23,19 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         max_line_length: int=79,\n                          cmakelint_config: path=''):\n         \"\"\"\n+        :param max_line_length:\n+             Maximum number of characters for a line.\n++            When set to 0 allows infinite line length.\n         :param cmakelint_config: The location of the cmakelintrc config file.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize\n+\n         args = ()\n         if cmakelint_config:\n-            args += ('--config=' + cmakelint_config,)\n+            args += ('--config=' + cmakelint_config,\n+                     '--linelength=' + str(max_line_length),)", "created_at": "2018-04-13T12:29:36Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDI5OA==", "fields": {"body": "there is no need for if max_line_length. Consider what happens when max_line_length is 0.", "diff": "@@ -21,11 +23,19 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         max_line_length: int=79,\n                          cmakelint_config: path=''):\n         \"\"\"\n+        :param max_line_length:\n+             Maximum number of characters for a line.\n++            When set to 0 allows infinite line length.\n         :param cmakelint_config: The location of the cmakelintrc config file.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize\n+\n         args = ()\n         if cmakelint_config:\n-            args += ('--config=' + cmakelint_config,)\n+            args += ('--config=' + cmakelint_config,\n+                     '--linelength=' + str(max_line_length),)", "created_at": "2018-04-13T12:37:33Z", "last_edited_at": "2018-04-13T18:21:44Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDQwNA==", "fields": {"body": "@sangamcse thats what is written in the above review :P", "diff": "@@ -21,11 +23,19 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         max_line_length: int=79,\n                          cmakelint_config: path=''):\n         \"\"\"\n+        :param max_line_length:\n+             Maximum number of characters for a line.\n++            When set to 0 allows infinite line length.\n         :param cmakelint_config: The location of the cmakelintrc config file.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize\n+\n         args = ()\n         if cmakelint_config:\n-            args += ('--config=' + cmakelint_config,)\n+            args += ('--config=' + cmakelint_config,\n+                     '--linelength=' + str(max_line_length),)", "created_at": "2018-04-13T12:38:01Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTU4Nzc2NQ==", "fields": {"body": "The above can be safely ignored.  The bears repo can still have a local override by putting it in the local moban file, overriding whatever global setting there is.", "diff": "@@ -1,5 +1,5 @@\n # NOTE: This file is parsed by .ci/generate_bear_requirements.py\n-# Use >= for development versions so that source builds always work\n+# Edit coala_dependency in coala-build.yaml", "created_at": "2018-04-15T15:57:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk0ODc2Mw==", "fields": {"body": "At various places in coala like ClangComplexityBear, JSHintBear, etc the setting max-complexity or any other such name was deprecated and replaced with cyclomatic_complexity. Since, the main aim was to maintain the consistency, I chose to adopt the setting name as cyclomatic-complexity.", "diff": "@@ -18,39 +19,57 @@ class RadonBear(LocalBear):\n     CAN_DETECT = {'Complexity'}\n \n     def run(self, filename, file,\n+            cyclomatic_complexity: int = None,\n             radon_ranks_info: typed_list(str) = (),\n             radon_ranks_normal: typed_list(str) = ('C', 'D'),\n             radon_ranks_major: typed_list(str) = ('E', 'F'),\n             ):\n         \"\"\"\n         Uses radon to compute complexity of a given file.\n \n-        :param radon_ranks_info:   The ranks (given by radon) to\n-                                   treat as severity INFO.\n-        :param radon_ranks_normal: The ranks (given by radon) to\n-                                   treat as severity NORMAL.\n-        :param radon_ranks_major:  The ranks (given by radon) to\n-                                   treat as severity MAJOR.\n+        :param cyclomatic_complexity: Maximum cyclomatic complexity\n+                                      that is considered to be normal.\n+        :param radon_ranks_info:      The ranks (given by radon) to\n+                                      treat as severity INFO.\n+        :param radon_ranks_normal:    The ranks (given by radon) to\n+                                      treat as severity NORMAL.\n+        :param radon_ranks_major:     The ranks (given by radon) to\n+                                      treat as severity MAJOR.\n         \"\"\"\n         severity_map = {\n             RESULT_SEVERITY.INFO: radon_ranks_info,\n             RESULT_SEVERITY.NORMAL: radon_ranks_normal,\n             RESULT_SEVERITY.MAJOR: radon_ranks_major\n         }\n+\n+        if cyclomatic_complexity is None:\n+            logging.warning('The settings `radon_ranks_info`, '\n+                            '`radon_ranks_normal` and `radon_ranks_major`'\n+                            ' are deprecated. Please use '\n+                            '`cyclomatic_complexity` instead.')\n+\n         for visitor in radon.complexity.cc_visit(''.join(file)):\n             rank = radon.complexity.cc_rank(visitor.complexity)\n             severity = None\n             for result_severity, rank_list in severity_map.items():\n                 if rank in rank_list:\n                     severity = result_severity\n-            if severity is None:\n+\n+            if (cyclomatic_complexity and\n+                    visitor.complexity <= cyclomatic_complexity):\n                 continue\n+            elif (cyclomatic_complexity is None and\n+                    severity is None):\n+                continue\n+\n+            if cyclomatic_complexity is not None:\n+                severity = RESULT_SEVERITY.MAJOR", "created_at": "2018-04-17T04:25:02Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk1MDM0MA==", "fields": {"body": "add a space before the {", "diff": "@@ -449,7 +449,7 @@ class docs:\n                 return unformattedNumber.substring(6,10);\n             }\n         }\n-        public class Customer\u2026\n+        public class Customer{", "created_at": "2018-04-17T04:38:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk2MDk0Nw==", "fields": {"body": "the exception is the same as above, so it doesnt appear that this test case provides anything more than the above", "diff": "@@ -0,0 +1,53 @@\n+import unittest\n+\n+from coalib.parsing.FilterHelper import (\n+    apply_filter,\n+    apply_filters,\n+    is_valid_filter,\n+    _filter_section_bears\n+)\n+from coalib.parsing.filters import available_filters\n+from coalib.parsing.InvalidFilterException import InvalidFilterException\n+from coalib.settings.ConfigurationGathering import get_all_bears\n+\n+\n+class FilterHelperTest(unittest.TestCase):\n+\n+    def test_apply_filter_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filter('unknown', ['args'])\n+\n+        message = str(exp.exception)\n+        self.assertEqual(\"'unknown' is an invalid filter. Available filters: \"\n+                         + ', '.join(sorted(available_filters)), message)\n+\n+    def test_apply_filters_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filters([['language', 'C', 'Python'],", "created_at": "2018-04-17T06:11:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk2MTAzOQ==", "fields": {"body": "this is two test cases.", "diff": "@@ -0,0 +1,53 @@\n+import unittest\n+\n+from coalib.parsing.FilterHelper import (\n+    apply_filter,\n+    apply_filters,\n+    is_valid_filter,\n+    _filter_section_bears\n+)\n+from coalib.parsing.filters import available_filters\n+from coalib.parsing.InvalidFilterException import InvalidFilterException\n+from coalib.settings.ConfigurationGathering import get_all_bears\n+\n+\n+class FilterHelperTest(unittest.TestCase):\n+\n+    def test_apply_filter_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filter('unknown', ['args'])\n+\n+        message = str(exp.exception)\n+        self.assertEqual(\"'unknown' is an invalid filter. Available filters: \"\n+                         + ', '.join(sorted(available_filters)), message)\n+\n+    def test_apply_filters_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filters([['language', 'C', 'Python'],\n+                           ['unknown', 'args']])\n+\n+        message = str(exp.exception)\n+        self.assertEqual(\"'unknown' is an invalid filter. Available filters: \"\n+                         + ', '.join(sorted(available_filters)), message)\n+\n+    def test_is_valid_filter(self):", "created_at": "2018-04-17T06:11:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk2NjI5Ng==", "fields": {"body": "#5398 is for fixing that problem, but first lets get this patch fixed and merged.", "diff": "@@ -0,0 +1,53 @@\n+import unittest\n+\n+from coalib.parsing.FilterHelper import (\n+    apply_filter,\n+    apply_filters,\n+    is_valid_filter,\n+    _filter_section_bears\n+)\n+from coalib.parsing.filters import available_filters\n+from coalib.parsing.InvalidFilterException import InvalidFilterException\n+from coalib.settings.ConfigurationGathering import get_all_bears\n+\n+\n+class FilterHelperTest(unittest.TestCase):\n+\n+    def test_apply_filter_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filter('unknown', ['args'])\n+\n+        message = str(exp.exception)\n+        self.assertEqual(\"'unknown' is an invalid filter. Available filters: \"\n+                         + ', '.join(sorted(available_filters)), message)\n+\n+    def test_apply_filters_exception(self):\n+        with self.assertRaises(InvalidFilterException) as exp:\n+            apply_filters([['language', 'C', 'Python'],\n+                           ['unknown', 'args']])\n+\n+        message = str(exp.exception)\n+        self.assertEqual(\"'unknown' is an invalid filter. Available filters: \"\n+                         + ', '.join(sorted(available_filters)), message)\n+\n+    def test_is_valid_filter(self):\n+        wrong_filter_result = is_valid_filter('check')\n+        right_filter_result = is_valid_filter('can_detect')\n+        self.assertFalse(wrong_filter_result)\n+        self.assertTrue(right_filter_result)\n+\n+    def test_filter_section_bears(self):\n+        local_bears = get_all_bears()[0]\n+        filter_args = {'c', 'java'}\n+        result_for_filter_section = _filter_section_bears(\n+            local_bears, filter_args, 'language')\n+        self.assertIsNotNone(result_for_filter_section)\n+\n+    def test_apply_filter(self):\n+        apply_filter_result = apply_filter('language', ['c', 'java'])\n+        self.assertIsNotNone(apply_filter_result)\n+\n+    def test_apply_filters(self):\n+        apply_filters_result = apply_filters([['language', 'C', 'Python'],", "created_at": "2018-04-17T06:43:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTkyMDk0OQ==", "fields": {"body": "use None for no setting. (and you'll need to adjust the setting type annotation to allow that.", "diff": "@@ -18,39 +19,56 @@ class RadonBear(LocalBear):\n     CAN_DETECT = {'Complexity'}\n \n     def run(self, filename, file,\n-            radon_ranks_info: typed_list(str) = (),\n-            radon_ranks_normal: typed_list(str) = ('C', 'D'),\n-            radon_ranks_major: typed_list(str) = ('E', 'F'),\n-            ):\n+            cyclomatic_complexity: int=-1,", "created_at": "2018-04-17T00:12:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTkzMzEzNQ==", "fields": {"body": "To be useful, we need to report to the user which bear it was.  The only way to do that is raise an exception here, and catch it somewhere higher.\nWould be good to have separate exception for line 0 and column 0, to make it easier to find the source of the problem.", "diff": "@@ -21,6 +23,10 @@ def __init__(self, line: (int, None)=None, column: (int, None)=None):\n         if line is None and column is not None:\n             raise ValueError('A column can only be set if a line is set.')\n \n+        if line == 0 or column == 0:\n+            logging.warning('line or column offset should not be 0. '\n+                            'Please report this to developers.')", "created_at": "2018-04-17T01:53:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw==", "fields": {"body": "Just do multiple variable on a single destructuring line { a, b, c }", "diff": "@@ -9,17 +9,16 @@ const wdk = require('wikidata-sdk')\n const cheerio = require('cheerio')\n \n const { GITHUB_REPO_INFO_QUERY } = require('./queries')\n+const { GITHUB_SEARCH_ORG_QUERY } = require('./queries')\n+const { GITHUB_USER_INFO_QUERY } = require('./queries')", "created_at": "2018-04-17T11:51:49Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1ODYyMA==", "fields": {"body": "we've had a syntax change in pycodestyle.  Please add spaces around the equals.", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str)=(),\n+                         enable_all: bool=False,\n+                         disable: typed_list(str)=(),\n+                         disable_all: bool=False,\n+                         gometalinter_config_file: str='',", "created_at": "2018-04-18T09:08:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1OTQzMQ==", "fields": {"body": "please do not use line continuation symbol \\.", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str)=(),\n+                         enable_all: bool=False,\n+                         disable: typed_list(str)=(),\n+                         disable_all: bool=False,\n+                         gometalinter_config_file: str='',\n+                         ignore_config: bool=False):\n+        \"\"\"\n+        :param enable:\n+            List of linters to enable.\n+            Some linters are disabled by default. Refer goo.gl/gMirRv\n+        :param enable_all:\n+            Enable all supported linters.\n+        :param disable:\n+            List of linters to disable.\n+        :param disable_all:\n+            Disable all supported linters.\n+        :param gometalinter_config_file:\n+            A JSON configuration file for gometalinter.\n+            It overrides ``.gometalinter.json`` which is picked up by\n+            default, if present.\n+        :param ignore_config:\n+            Ignores configuration files, if present.\n+            Can't be used together with ``gometalinter_config_file``.\n+        \"\"\"\n+        # Arguments are parsed in order.\n+        args = (filename,)\n+\n+        if (enable and enable_all) or \\", "created_at": "2018-04-18T09:10:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1OTczNA==", "fields": {"body": "subsequent if condition lines should always be indented 8 or more, so they do not line up with the block inside the if", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str)=(),\n+                         enable_all: bool=False,\n+                         disable: typed_list(str)=(),\n+                         disable_all: bool=False,\n+                         gometalinter_config_file: str='',\n+                         ignore_config: bool=False):\n+        \"\"\"\n+        :param enable:\n+            List of linters to enable.\n+            Some linters are disabled by default. Refer goo.gl/gMirRv\n+        :param enable_all:\n+            Enable all supported linters.\n+        :param disable:\n+            List of linters to disable.\n+        :param disable_all:\n+            Disable all supported linters.\n+        :param gometalinter_config_file:\n+            A JSON configuration file for gometalinter.\n+            It overrides ``.gometalinter.json`` which is picked up by\n+            default, if present.\n+        :param ignore_config:\n+            Ignores configuration files, if present.\n+            Can't be used together with ``gometalinter_config_file``.\n+        \"\"\"\n+        # Arguments are parsed in order.\n+        args = (filename,)\n+\n+        if (enable and enable_all) or \\\n+           (disable and disable_all) or \\", "created_at": "2018-04-18T09:11:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0MzY2MA==", "fields": {"body": "please change this to\nif not stdout_output:\n    return\n\n...\nand if you dont want to write a test, ...\nif not stdout_output:  # pragma: no cover\n    return\n\n...", "diff": "@@ -106,6 +114,8 @@ def run(self, language: language,\n \n         stdout_output, _ = run_shell_command(arguments)\n \n+        os.remove(tmp_filename)\n+\n         if stdout_output:", "created_at": "2018-04-19T06:24:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA==", "fields": {"body": "since rultor died pre tag hasn't been updated for coala. Hardly likely it's done for coala quick start. You must remove this.", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre", "created_at": "2018-04-19T06:45:05Z", "last_edited_at": "2018-04-19T06:47:36Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw==", "fields": {"body": "coala-quickstart coala Quickstart\n\"Generating a .coafile using coala-quickstart\" sounds better", "diff": "@@ -27,6 +27,7 @@ Welcome to the coala documentation!\n    Installing coala <Users/Install>\n    Getting Started with coala <Users/Tutorial>\n    Writing a coala Configuration File (coafile and coarc) <Users/coafile>\n+   Using coala Quickstart to Generate a .coafile <Users/coala_quickstart.rst>", "created_at": "2018-04-19T06:50:10Z", "last_edited_at": "2018-04-19T06:50:27Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA==", "fields": {"body": "this tool called", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called", "created_at": "2018-04-19T06:54:42Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw==", "fields": {"body": "use it, to", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.", "created_at": "2018-04-19T06:55:14Z", "last_edited_at": "2018-04-19T06:56:51Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ==", "fields": {"body": "this doesn't seem much of a feature, you can add automatic detection of bear settings instead of this", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your", "created_at": "2018-04-19T06:58:02Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA==", "fields": {"body": "then", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages", "created_at": "2018-04-19T07:02:44Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA==", "fields": {"body": "After that you will --> You will now", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears", "created_at": "2018-04-19T07:02:27Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ==", "fields": {"body": "good to go --> done!", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are good to go.", "created_at": "2018-04-19T07:03:52Z", "last_edited_at": "2018-04-19T07:07:54Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA==", "fields": {"body": "cli -> CLI", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with", "created_at": "2018-04-19T07:25:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ==", "fields": {"body": "new paragraph for \"It ...\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages", "created_at": "2018-04-19T07:25:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA==", "fields": {"body": "\"fire up\" -> \"execute\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's", "created_at": "2018-04-19T07:27:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA==", "fields": {"body": "shouldnt editing .coafile be done before running coala?", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's\n+root:\n+\n+::\n+\n+    $ coala\n+\n+You can also open the .coafile in your favorite editor and edit the settings", "created_at": "2018-04-19T07:27:28Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA==", "fields": {"body": "you add the clone, cd and then pip install . method for latest development version", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+", "created_at": "2018-04-19T07:32:45Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyMjkyMg==", "fields": {"body": "We do not need this comment repeated everywhere.  The code is ridiculously simple and obvious.", "diff": "@@ -24,8 +44,61 @@ def get_index():\n     return None\n \n \n-urlpatterns = [\n+def get_all_contributors():\n+    # This function needs to return an iterable of dictionaries. Dictionaries", "created_at": "2018-04-19T03:02:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyNDMwOA==", "fields": {"body": "the base layout of these html pages should be one template that other the other templates re-use", "diff": "@@ -0,0 +1,24 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">", "created_at": "2018-04-19T03:16:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjkzMzM4Mg==", "fields": {"body": "Then we have reviewers telling newcomers to close their PRs, even if the PR is good and can be merged quickly.\nYou've raised an important issue, which should be in this guide, but it needs to be a separate addition with lots of careful wording", "diff": "@@ -105,6 +105,11 @@ For the Reviewers\n \n -  All the pull requests waiting to be reviewed can be found at :\n    https://coala.io/review.\n+-  Check the commit message.", "created_at": "2018-04-20T02:41:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIwOTkxOA==", "fields": {"body": "That feels like a bug in process_output_corrected.  If there was an error, the linter can only emit \\n on stdout.  It shouldnt decide that means the file should be blanked.", "diff": "@@ -23,13 +23,17 @@ class PrettierLintBear:\n                   'Multi-line objects'}\n     SEE_MORE = 'https://prettier.io/'\n \n-    regex = re.compile(r'L(?P<line>\\d+)C(?P<column>\\d+): (?P<message>.*)')\n+    regex = re.compile(\n+        r'(?P<message>SyntaxError:.*) '\n+        r'\\((?P<line>\\d+):(?P<column>\\d+)\\)')\n \n     def process_output(self, output, filename, file):\n         stdout, stderr = output\n-        yield from self.process_output_corrected(stdout, filename, file)\n-        yield from self.process_output_regex(stderr, filename, file,\n-                                             self.regex)\n+        if stdout == '\\n':", "created_at": "2018-04-21T13:33:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxMTM5OA==", "fields": {"body": "Following the examples above and below, put spaces around = would be better?", "diff": "@@ -62,6 +84,7 @@ def __init__(self,\n                  diffs: (dict, None) = None,\n                  confidence: int = 100,\n                  aspect: (aspectbase, None) = None,\n+                 actions: list=[],", "created_at": "2018-04-21T14:45:16Z", "last_edited_at": null, "author": "yzgyyang", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxMTY2NQ==", "fields": {"body": "IMO although this is compact, it could be more readable and consistent if you just use\nif type(value == list):\n    ...\nelse:\n    ...", "diff": "@@ -129,6 +154,24 @@ def __init__(self,\n         if self.aspect and not self.additional_info:\n             self.additional_info = '{} {}'.format(\n                 aspect.docs.importance_reason, aspect.docs.fix_suggestions)\n+        self._actions = actions\n+\n+    @property\n+    def actions(self):\n+        return tuple(self._actions)\n+\n+    @actions.setter\n+    @enforce_signature\n+    def actions(self, value: (ResultAction, list)):\n+        self._actions = value if type(value) == list else [value]", "created_at": "2018-04-21T14:56:08Z", "last_edited_at": null, "author": "yzgyyang", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyMzAyNQ==", "fields": {"body": "We need a test which captures the logging and shows this message was shown to the user.", "diff": "@@ -60,6 +52,96 @@ def fill_section(section, acquire_settings, log_printer, bears):\n     return section\n \n \n+def get_required_and_optional_settings(bears):\n+    \"\"\"\n+    Given a list of bears, retrieves the required and optional settings for\n+    each bear, and returns as a dict.\n+\n+    :param bears: All bear classes or instances.\n+    :return:      A tuple with a dict for required and a dict for optional\n+                  settings. Each dict of settings has keys representing the\n+                  setting name, and the value is a list of bear names for\n+                  which that setting is required or optional.\n+    \"\"\"\n+    required_settings = {}\n+    optional_settings = {}\n+    for bear in bears:\n+        needed = bear.get_non_optional_settings()\n+        optional = bear.get_optional_settings()\n+        for key in needed:\n+            if key in required_settings:\n+                required_settings[key].append(bear.name)\n+            else:\n+                required_settings[key] = [needed[key][0],\n+                                          bear.name]\n+        for key in optional:\n+            if key in optional_settings:\n+                optional_settings[key].append(bear.name)\n+            else:\n+                optional_settings[key] = [optional[key][0],\n+                                          bear.name]\n+    return (required_settings, optional_settings)\n+\n+\n+def warn_extraneous_settings(bears, parsed_settings):\n+    \"\"\"\n+    Warns the user if any of the settings are not used by any of the\n+    given bears.\n+\n+    :param bears:           All bear classes or instances.\n+    :param parsed_settings: List of dicts, where each dict has a setting\n+                            and value key, corresponding to each custom\n+                            setting.\n+    \"\"\"\n+    (required_settings,\n+        optional_settings) = get_required_and_optional_settings(bears)\n+    for setting_definition in parsed_settings:\n+        if (setting_definition['setting'] not in required_settings and\n+                setting_definition['setting'] not in optional_settings):\n+            logging.warning('Setting \\'{}\\' is not used by any bear, '", "created_at": "2018-04-22T01:09:18Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjAzNQ==", "fields": {"body": "Actually it 'gets` included somehow (not gone that much in the implementation detail of IGitt issue but) see this PR coala/coala#3806 make irritated me at that time.\nJohn closed this 3 days algo but previously it was in the list of output.", "diff": "@@ -0,0 +1,37 @@\n+import json\n+\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+from IGitt.GitHub import GitHubToken\n+from IGitt.GitHub.GitHubRepository import GitHubRepository\n+\n+from community.git import get_org_name\n+\n+\n+def run(mr_requests):\n+    issues_number_list = []\n+    for pr in mr_requests:\n+        if pr.state._name_ == 'OPEN':\n+            for commit in pr.commits:\n+                mystatus = commit.combined_status._name_\n+                break\n+            if mystatus == 'SUCCESS' or mystatus == 'PENDING':\n+                for issue in pr.closes_issues:\n+                    if str(pr.number) != issue.number:", "created_at": "2018-04-22T05:41:05Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjUzOA==", "fields": {"body": "Yeah, that's what I was telling \ud83d\ude04 , file an issue there.", "diff": "@@ -0,0 +1,37 @@\n+import json\n+\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+from IGitt.GitHub import GitHubToken\n+from IGitt.GitHub.GitHubRepository import GitHubRepository\n+\n+from community.git import get_org_name\n+\n+\n+def run(mr_requests):\n+    issues_number_list = []\n+    for pr in mr_requests:\n+        if pr.state._name_ == 'OPEN':\n+            for commit in pr.commits:\n+                mystatus = commit.combined_status._name_\n+                break\n+            if mystatus == 'SUCCESS' or mystatus == 'PENDING':\n+                for issue in pr.closes_issues:\n+                    if str(pr.number) != issue.number:", "created_at": "2018-04-22T06:14:57Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjYyMQ==", "fields": {"body": "one more problem is there \ud83d\ude05  issue.number is not int check this https://github.com/coala/community/pull/128/files#diff-04e5b4c73d360e0cd6a4955ddd3b2998R20", "diff": "@@ -0,0 +1,37 @@\n+import json\n+\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+from IGitt.GitHub import GitHubToken\n+from IGitt.GitHub.GitHubRepository import GitHubRepository\n+\n+from community.git import get_org_name\n+\n+\n+def run(mr_requests):\n+    issues_number_list = []\n+    for pr in mr_requests:\n+        if pr.state._name_ == 'OPEN':\n+            for commit in pr.commits:\n+                mystatus = commit.combined_status._name_\n+                break\n+            if mystatus == 'SUCCESS' or mystatus == 'PENDING':\n+                for issue in pr.closes_issues:\n+                    if str(pr.number) != issue.number:", "created_at": "2018-04-22T06:20:26Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzMwOTQ0MQ==", "fields": {"body": "as @rhemon stated, you will want to change to self.language == other.language.\nHowever, I believe tests are failing because there is no language property in the class", "diff": "@@ -37,7 +37,9 @@ def __init__(self, language, **taste_values):\n                 setattr(self, name, taste_values.get(name, taste.default))\n \n     def __eq__(self, other):\n-        return type(self) is type(other) and self.tastes == other.tastes\n+        return (type(self) is type(other) and\n+                self.tastes == other.tastes and\n+                self.language == self.language)", "created_at": "2018-04-23T08:19:10Z", "last_edited_at": "2018-04-23T08:27:16Z", "author": "rohanrk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg==", "fields": {"body": "@manankalra Looks good. \ud83d\udc4d\nI also agree with you that adding \"on_success: never\" should be there as well. Gitmate automatically approves the PR if all CI passes, so there should ideally be no message in that case. \ud83d\ude04", "diff": "@@ -11,6 +11,7 @@ script:\n \n notifications:\n   email: false\n+  webhooks: https://www.travisbuddy.com/", "created_at": "2018-04-24T04:40:15Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNjg3NQ==", "fields": {"body": "Just a thought, so github also provides confused, laugh, heart and tada emojis. We can use the confused to find out if the comments are descriptive enough.\nFor example a common advice given to a newcomer PR is to follow coala guidelines for commit and amend the commit message.\nNow there are various ways in which reviewers can express this, some can be descriptive enough, some can be very descriptive with links and stuff, also some can be non descriptive comprising of our internal workflow lingo and hence non newcomer friendly. So maybe this is one of instances where we can exploit the confused emoji.", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.", "created_at": "2018-04-26T08:58:21Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNzU4OA==", "fields": {"body": "So I'd suggest that during this phase,\n\nwe can make some mockups for the frontend you can get feedback\nget acquainted with css designing a bit (materialize css) and data viz library like d3 (?)", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and analyzed. By tracking reactions, a nice feedback loop would be created for both senior and junior reviewers. Also, this information can be used as newcomer metrics.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be tracked and handled.", "created_at": "2018-04-26T09:00:44Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzMzgzMQ==", "fields": {"body": "is this a mistype in THUMBS_UP and THUMBS_DOWN (should be B instead of P)?", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.", "created_at": "2018-04-26T09:57:06Z", "last_edited_at": null, "author": "alisianoi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ==", "fields": {"body": "Also fix coala/gh-board#13 ?\nSee coala/gh-board#10 (comment)\nWe're currently running the app on the browser on CI to fetch the issues from coala repositories and that isn't the most elegant thing https://github.com/coala/gh-board/blob/master/script/fetch-issues.js\nI believe that'll help you in the long run.\nAlso see the React code a bit, you'll notice that it's still using React.createClass which is deprecated, a small refactor to convert that into class component would be nice, and while we're at it might as well upgrade it to React v16.3 and further remove all the deprecations. But, I think all the refactoring is quite big, and not that really important/necessary for achieving this project. It is up to you.", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and analyzed. By tracking reactions, a nice feedback loop would be created for both senior and junior reviewers. Also, this information can be used as newcomer metrics.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be tracked and handled.", "created_at": "2018-04-26T10:00:14Z", "last_edited_at": "2018-04-26T10:00:28Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNTczMA==", "fields": {"body": "The refactoring will help you get familiar with the project and React in general (if you haven't already).", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and analyzed. By tracking reactions, a nice feedback loop would be created for both senior and junior reviewers. Also, this information can be used as newcomer metrics.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be tracked and handled.", "created_at": "2018-04-26T10:04:10Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDU2MTkwNQ==", "fields": {"body": "Note that this project is also about encouraging people to do meta-review of PR comments, systematically.\nCurrently, we do not do this systematically, or even occasionally.  emoji use is currently hap-hazard, and probably the currently implied meaning of :+1: is \"OK, I will do this\", not \"I agree\"+\"I found your communication style appropriate\".\nThis actually presents a problem for gh-board, as its UI is currently centric to the issue/PR, and it does not display issue comments. The granularity of gh-board is wrong.  How then do we use gh-board to show which PR reviews have not been meta-reviewed yet.  Worst case is that the tracking stores in the json which PR do not have meta-reviews, and gh-board shows only a list of those PRs (and the user must then find the reviews in GitHub PR webapp, and do meta-review there).  An improvement is to store the identifier of the PR comments which do not have meta-reviews, and gh-board links to the PR review comment in GitHub PR webapp.  In the ultimate version, gh-board would show the review comments.", "diff": "@@ -0,0 +1,57 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks and provides meaningful analysis of reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch merged to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to a meta-moderation system that can track emoji responses to review comments. These responses are to be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.", "created_at": "2018-04-26T23:54:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDY3NTQ1NA==", "fields": {"body": "I've been thinking, maybe \"Modernize existing React component code in gh-board project\" makes it more clear here.", "diff": "@@ -0,0 +1,95 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks and provides meaningful analysis of reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch merged to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and JavaScript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The meta-review project is about building a meta-review system,\n+similar to a meta-moderation system, that can track emoji responses to\n+review comments. These responses are to be collected, processed and displayed\n+on [gh-board][https://github.com/coala/gh-board], which is a nice serverless\n+kanban board.\n+\n+People including the author of pull request respond to comments by attaching\n+emojis. Those emojis are called meta-review, or\n+[reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMBS_UP\n+and THUMBS_DOWN, together with other reactions, are used by people especially\n+the author of pull request to publicly acknowledge or reject review comments.\n+This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and\n+analyzed. By tracking reactions, a nice feedback loop would be created\n+for both senior and junior reviewers. Also, this information can be used\n+as newcomer metrics.\n+\n+One goal of this project is to encourage people to do meta-reviews,\n+systematically. Worst case is that the tracking stores in the json which\n+PR do not have meta-reviews, and gh-board shows only a list of those PRs\n+(and the user must then find the reviews in GitHub PR webapp, and do\n+meta-review there). An improvement is to store the identifier of the PR\n+comments which do not have meta-reviews, and gh-board links to the PR\n+review comment in GitHub PR webapp. In the ultimate version, gh-board\n+would show the review comments.\n+\n+Also, to encourage people to do more meta-reviews, statistics of meta-reviews\n+are to be collected and analysed. People who do meta-reviews will get scores\n+according to some metrics. A ranking list is to be displayed on gh-board.\n+\n+The scope of this project would exclude non-public meta-reviews. That is,\n+there would not be any anonymous meta-reviews as that introduces too many\n+additional complexities. The public only version would be used for\n+long time before adding support for non-public meta-reviews.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be\n+  tracked and handled.\n+- The applicant has created mockups for the frontend.\n+- The applicant gets acquainted with materialize CSS.\n+- The applicant gets acquainted with data visualization\n+  library (e.g. d3.js).\n+- The applicant gets\n+  [gh-board#13][https://github.com/coala/gh-board/issues/13] fixed.\n+- The applicant refactors React code a bit.", "created_at": "2018-04-27T12:42:20Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA==", "fields": {"body": "I don't think it's necessary to convert method other than event listener to class properties, this is still this class because it's not called from event listener.\nRelated https://stackoverflow.com/questions/44423947/javascript-class-methods-versus-properties#comment75847321_44424064", "diff": "@@ -26,11 +25,13 @@ const FilterCategory = React.createClass({\n       }\n       return true;\n     });\n-  },\n-  onFilterInputChange(e) {\n+  };\n+\n+  onFilterInputChange = (e) => {\n     this.setState({filterStr: e.currentTarget.value});\n-  },\n-  renderItem(item) {\n+  };\n+\n+  renderItem = (item) => {", "created_at": "2018-05-01T15:19:21Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0OTA4Mg==", "fields": {"body": "This can be converted to functional component.\nAll component with only render method can be functional component, I'll stop marking.", "diff": "@@ -49,9 +49,9 @@ const ListGroupWithMore = React.createClass({\n       </BS.ListGroup>\n     );\n   }\n-});\n+}\n \n-const RepoItem = React.createClass({\n+class RepoItem extends React.Component {\n   render() {", "created_at": "2018-05-01T15:28:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ==", "fields": {"body": "Could just be me, but I much prefer extends Component over extends React.Component. (i.e. importing Component using import React, {Component} from 'react')", "diff": "@@ -6,7 +6,7 @@ import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n+class AnonymousModal extends React.Component {", "created_at": "2018-05-01T16:28:59Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI4OTY1OA==", "fields": {"body": "Yeah, let's do that.\nAdditionally, babel-plugin-react-require can be used to auto import React when the file only has functional component that doesn't need to extends from Component", "diff": "@@ -6,7 +6,7 @@ import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n+class AnonymousModal extends React.Component {", "created_at": "2018-05-01T18:04:57Z", "last_edited_at": "2018-05-01T18:05:18Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTM5ODQ3MA==", "fields": {"body": "Spotted something,\nWe do set the path in conf.py\nbut since we do the import before setting the path, the path being set is actually useless", "diff": "@@ -0,0 +1,3 @@\n+[build]\n+  publish = \"docs/_build/html\"\n+  command = \"pip install -r docs-requirements.txt && export PYTHONPATH=$(pwd) && python setup.py docs\"", "created_at": "2018-05-02T05:50:48Z", "last_edited_at": "2018-05-02T05:51:11Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTU0NDA3Mg==", "fields": {"body": "Oh\nSo does setting that path serve any other purpose then ?\nIf not then should we remove that as well (possible the removal would be a non-standard inclusion, but we get rid of some un-used code maybe) ?", "diff": "@@ -0,0 +1,3 @@\n+[build]\n+  publish = \"docs/_build/html\"\n+  command = \"pip install -r docs-requirements.txt && export PYTHONPATH=$(pwd) && python setup.py docs\"", "created_at": "2018-05-02T15:44:44Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5MzQ1MA==", "fields": {"body": "Sorry for nitpicking. For consistency with the other test cases, I think it's better to not name the Section. So just Section() should be enough.", "diff": "@@ -0,0 +1,115 @@\n+import os\n+\n+from bears.go.GoMetaLintBear import GoMetaLintBear\n+from queue import Queue\n+from unittest.case import skipIf\n+from shutil import which\n+\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+\n+\n+def get_testfile_path(testfile):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'gometalinter_test_files',\n+                        testfile)\n+\n+\n+def load_testfile(filename):\n+    with open(get_testfile_path(filename)) as file:\n+        contents = file.read().splitlines(True)\n+    return contents\n+\n+\n+@skipIf(which('go') is None, 'go is not installed')\n+class GoMetaLintBearTest(LocalBearTestHelper):\n+\n+    def setUp(self):\n+        self.section = Section('GoMetaLinter')", "created_at": "2018-05-03T13:18:06Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5MzY5NA==", "fields": {"body": "Sorry for nitpicking. I think get_test_file_path(filename): is better.", "diff": "@@ -0,0 +1,115 @@\n+import os\n+\n+from bears.go.GoMetaLintBear import GoMetaLintBear\n+from queue import Queue\n+from unittest.case import skipIf\n+from shutil import which\n+\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+\n+\n+def get_testfile_path(testfile):", "created_at": "2018-05-03T13:18:48Z", "last_edited_at": "2018-05-03T13:19:09Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5Mzg4NQ==", "fields": {"body": "Sorry for nitpicking. I think load_test_file is better.", "diff": "@@ -0,0 +1,115 @@\n+import os\n+\n+from bears.go.GoMetaLintBear import GoMetaLintBear\n+from queue import Queue\n+from unittest.case import skipIf\n+from shutil import which\n+\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+\n+\n+def get_testfile_path(testfile):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'gometalinter_test_files',\n+                        testfile)\n+\n+\n+def load_testfile(filename):", "created_at": "2018-05-03T13:19:32Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5NDAyNg==", "fields": {"body": "Don't check for go, check for gometalinter", "diff": "@@ -0,0 +1,115 @@\n+import os\n+\n+from bears.go.GoMetaLintBear import GoMetaLintBear\n+from queue import Queue\n+from unittest.case import skipIf\n+from shutil import which\n+\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+\n+\n+def get_testfile_path(testfile):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'gometalinter_test_files',\n+                        testfile)\n+\n+\n+def load_testfile(filename):\n+    with open(get_testfile_path(filename)) as file:\n+        contents = file.read().splitlines(True)\n+    return contents\n+\n+\n+@skipIf(which('go') is None, 'go is not installed')", "created_at": "2018-05-03T13:19:59Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTgyOTg5NA==", "fields": {"body": "I suspect that the only reasons for it was so that \"setup.py docs\" would work.\nIt used to work.  See 687ec1b which broke it.  And #3785 for the original issue.\nProbably broken atm.  I've raised https://gitlab.com/coala/mobans/issues/8\nUntil we have a verified solution again, that line should stay in the local docs/conf.py .  Worst case it will disappear when we mobanise conf.py.", "diff": "@@ -0,0 +1,3 @@\n+[build]\n+  publish = \"docs/_build/html\"\n+  command = \"pip install -r docs-requirements.txt && export PYTHONPATH=$(pwd) && python setup.py docs\"", "created_at": "2018-05-03T15:00:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTQ1OA==", "fields": {"body": "Maybe we could leave this as a separate issue? If we decide to move back to normal methods, we need careful reviews. Errors are likely to be missed in this large PR.\nIf I move some inappropriate methods back to use normal class methods, there would be no diff for that method in this PR, which is almost impossible for reviewers to detect if I make any errors.", "diff": "@@ -26,11 +25,13 @@ const FilterCategory = React.createClass({\n       }\n       return true;\n     });\n-  },\n-  onFilterInputChange(e) {\n+  };\n+\n+  onFilterInputChange = (e) => {\n     this.setState({filterStr: e.currentTarget.value});\n-  },\n-  renderItem(item) {\n+  };\n+\n+  renderItem = (item) => {", "created_at": "2018-05-05T01:58:12Z", "last_edited_at": "2018-05-05T02:02:22Z", "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTY0Nw==", "fields": {"body": "You made the your own getTime function below.", "diff": "@@ -1,64 +1,211 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: moment(node.updatedAt).toDate().getTime(),", "created_at": "2018-05-05T02:07:31Z", "last_edited_at": "2018-05-05T02:09:28Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTcwMA==", "fields": {"body": "Can be turned into arrow function and put at the very top.", "diff": "@@ -1,64 +1,211 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: moment(node.updatedAt).toDate().getTime(),\n+        issue: {\n+          htmlUrl: node.url,\n+          number: node.number,\n+          title: node.title,\n+          body: node.bodyText,\n+          comments: node.comments.totalCount,\n+          updatedAt: node.updatedAt,\n+          state: node.state,\n+          user: {\n+            login: node.author ? node.author.login : null,\n+            avatarUrl: node.author? node.author.avatarUrl : null\n+          },\n+          milestone: {\n+            title: node.milestone ? node.milestone.title : null,\n+            createdAt: node.milestone? node.milestone.createdAt : null,\n+            dueOn: node.milestone? node.milestone.dueOn : null,\n+            state: node.milestone? node.milestone.state : null,\n+            htmlUrl: node.milestone? node.milestone.url : null,\n+            description: node.milestone? node.milestone.description : null,\n+          },\n+          labels: node.labels.nodes.map(label => ({\n+            name: label.name,\n+            color: label.color\n+          }))\n         }\n-      })\n+      };\n+      if (!isIssue) {\n+        info.pullRequest = {\n+          htmlUrl: node.url\n+        };\n+      }\n+      return info;\n+    });\n+    data = data.concat(result);\n+    if (hasPreviousPage && (pageCount < pageThreshold || pageThreshold == -1)) {\n+      return fetchNextPage(owner, name, isIssue, data,\n+        cursor, pageCount);\n+    } else {\n+      return data;\n     }\n+  } else {\n+    console.log('Warning: no available data. owner:', owner, 'name:', name,\n+      'isIssue:', isIssue, 'pageCount:', pageCount);\n+    return data;\n+  }\n+}\n \n-    return Promise.all([\n-      dump('issues'),\n-      dump('repoLabels'),\n-      dump('repositories'),\n-    ])\n-  })\n-\n-  cache = {\n-    issues: cache[0],\n-    repoLabels: cache[1],\n-    repositories: cache[2],\n+async function fetchIssue(owner, names, isIssue) {\n+  //return Promise.all(names.map(async name => {\n+  let result = [];\n+  for (const name of names) {\n+    try {\n+      result = result.concat(\n+        await fetchNextPage(owner, name, isIssue, [], null, 0));\n+    } catch (error) {\n+      console.log('repo owner:', owner, 'repo name:', name,\n+        'is issue:', isIssue, 'error:', error);\n+    }\n   }\n+  return result;\n+}\n+\n+function fetchLabel(owner, names) {\n+  return Promise.all(names.map(async name => {\n+    try {\n+      const { data } = await client.query(GITHUB_LABEL_INFO_QUERY,  {owner, name});\n+      let result = [];\n+      if (data && data.repository) {\n+        result = data.repository.labels.nodes.map(node => ({\n+          id: node.id,\n+          name: node.name,\n+          color: node.color,\n+          default: node.isDefault,\n+        }));\n+      }\n+      return {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result,\n+      };\n+    } catch (error) {\n+      console.log(error);\n+    }\n+  }));\n+}\n+\n+function getTime(timeString) {\n+  return moment(timeString).toDate().getTime();", "created_at": "2018-05-05T02:10:33Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI1MTIwNw==", "fields": {"body": "oh ... that is at the repo level .. hmm.. this might be ok...\ngit grep updatedAtMs\nscript/fetch-issues.js:        updatedAtMs: moment(node.updatedAt).toDate().getTime(),\nsrc/database.js:      updatedAtMs: moment(issue.updatedAt).toDate().getTime(),", "diff": "@@ -1,64 +1,208 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n+\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+const getTime = timeString => moment(timeString).toDate().getTime();\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: getTime(node.updatedAt),", "created_at": "2018-05-05T03:38:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NDQyNA==", "fields": {"body": "Oh\nCool\nThanks @ksdme", "diff": "@@ -34,14 +34,22 @@ class GitCommitBear(GlobalBear):\n             'issue': r'(?:\\w+/\\w+)?#(\\S+)',\n             'full issue': r'https?://gitlab\\S+/issues/(\\S+)',\n         },\n+        'bitbucket': {\n+            'issue': r'#(\\S+)',\n+            'full issue': None,\n+        },\n     }\n     SUPPORTED_HOST_KEYWORD_REGEX = {\n         'github': (r'[Cc]lose[sd]?'\n                    r'|[Rr]esolve[sd]?'\n                    r'|[Ff]ix(?:e[sd])?'),\n         'gitlab': (r'[Cc]los(?:e[sd]?|ing)'\n                    r'|[Rr]esolv(?:e[sd]?|ing)'\n-                   r'|[Ff]ix(?:e[sd]|ing)?')\n+                   r'|[Ff]ix(?:e[sd]|ing)?'),\n+        'bitbucket': (r'[Cc]los(?:e[sd]?|ing)'\n+                      r'|[Rr]esolv(?:e[sd]?|ing)'\n+                      r'|[Ff]ix(?:e[sd]|ing)?'\n+                      r')(?:(?:[ \\t]*(?:bug|issue|ticket)?)?'),", "created_at": "2018-05-06T15:32:17Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NTkzNQ==", "fields": {"body": "Opened https://bitbucket.org/site/master/issues/16240/issue-referencing-on-bitbucket-cloud\nAnd off to support fixes bug#11 and fixes bug #11", "diff": "@@ -34,14 +34,22 @@ class GitCommitBear(GlobalBear):\n             'issue': r'(?:\\w+/\\w+)?#(\\S+)',\n             'full issue': r'https?://gitlab\\S+/issues/(\\S+)',\n         },\n+        'bitbucket': {\n+            'issue': r'#(\\S+)',\n+            'full issue': None,\n+        },\n     }\n     SUPPORTED_HOST_KEYWORD_REGEX = {\n         'github': (r'[Cc]lose[sd]?'\n                    r'|[Rr]esolve[sd]?'\n                    r'|[Ff]ix(?:e[sd])?'),\n         'gitlab': (r'[Cc]los(?:e[sd]?|ing)'\n                    r'|[Rr]esolv(?:e[sd]?|ing)'\n-                   r'|[Ff]ix(?:e[sd]|ing)?')\n+                   r'|[Ff]ix(?:e[sd]|ing)?'),\n+        'bitbucket': (r'[Cc]los(?:e[sd]?|ing)'\n+                      r'|[Rr]esolv(?:e[sd]?|ing)'\n+                      r'|[Ff]ix(?:e[sd]|ing)?'\n+                      r')(?:(?:[ \\t]*(?:bug|issue|ticket)?)?'),", "created_at": "2018-05-06T16:33:10Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQ0NDY4OA==", "fields": {"body": "I just transformed it into the functional component. You are right, the undefined onClickIcon has nothing to do with whether it is using class or function.\nFiled another issue #29 for the undefined onClickIcon.", "diff": "@@ -10,7 +10,7 @@ import GithubFlavoredMarkdown from './gfm';\n import Loadable from './loadable';\n import ColoredIcon from './colored-icon';\n \n-const IssueOrPullRequestBlurb = React.createClass({\n+class IssueOrPullRequestBlurb extends Component {", "created_at": "2018-05-07T14:42:41Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQwOTc5MQ==", "fields": {"body": "This will introduce error, since it's functional component and has no this.setState\nhttps://jsbin.com/dodalubaxo/edit?html,js,output", "diff": "@@ -1,45 +1,42 @@\n-import React from 'react';\n import * as BS from 'react-bootstrap';\n import {GearIcon} from 'react-octicons';\n \n import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n-  render() {\n-    const onHide = () => {\n-      hasAlreadyShownAnonymousModal = true;\n-      this.setState({ showModal: false});\n-    };\n-    let showModal;\n-    if (CurrentUserStore.getUser()) {\n-      showModal = false;\n-    } else {\n-      showModal = !hasAlreadyShownAnonymousModal;\n-    }\n+function AnonymousModal() {\n+  const onHide = () => {\n+    hasAlreadyShownAnonymousModal = true;\n+    this.setState({ showModal: false});", "created_at": "2018-05-07T12:36:34Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg==", "fields": {"body": "Ah ok. We'll leave it as it is.\nBut does it even matter? Since this.onClickIcon is undefined whether it is using class or functional. It would lead to an error either way.\nProbably open an issue after finding where the component is located in the UI, if there's an error.", "diff": "@@ -10,7 +10,7 @@ import GithubFlavoredMarkdown from './gfm';\n import Loadable from './loadable';\n import ColoredIcon from './colored-icon';\n \n-const IssueOrPullRequestBlurb = React.createClass({\n+class IssueOrPullRequestBlurb extends Component {", "created_at": "2018-05-07T12:52:39Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU5NjQ4NA==", "fields": {"body": "Please note that a 'split line' type of change should only be done in this PR where the change already contains a non-whitespace modification to the line.\nWe dont want git diff -w for this patch getting extra changes which are line splits.\nThere are only a few cases in this PR where the very long line is already changing syntax, so we may as well also improve the layout a little.", "diff": "@@ -10,28 +11,32 @@ import Loadable from './loadable';\n import Progress from '../progress';\n import Database from '../database';\n \n-const ProgressView = React.createClass({\n-  getInitialState() {\n-    return {message: null, ticks: 0, max: 0};\n-  },\n+class ProgressView extends Component {\n+  state = {message: null, ticks: 0, max: 0};\n+\n   componentDidMount() {\n     const {progress} = this.props;\n     progress.on('start', this.onStart);\n     progress.on('tick', this.onTick);\n     progress.on('stop', this.onStop);\n-  },\n+  }\n+\n   componentWillUnmount() {\n     const {progress} = this.props;\n     progress.off('start', this.onStart);\n     progress.off('tick', this.onTick);\n     progress.off('stop', this.onStop);\n-  },\n-  onStart(context) { this.setState({max: this.props.progress.max, message: 'Start: ' + context}); },\n-  onTick(context, ticks, max) {\n+  }\n+\n+  onStart = (context) => { this.setState({max: this.props.progress.max, message: 'Start: ' + context}); };\n+\n+  onTick = (context, ticks, max) => {\n     this.setState({ticks: ticks, max: max, message: context});\n     this.forceUpdate();\n-  },\n-  onStop(context) { this.setState({ticks: this.props.progress.ticks, max: this.props.progress.max, message: 'Finished: ' + context}); },\n+  };\n+\n+  onStop = (context) => { this.setState({ticks: this.props.progress.ticks, max: this.props.progress.max, message: 'Finished: ' + context}); };", "created_at": "2018-05-08T01:31:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjY2ODY5OA==", "fields": {"body": "Nah the test failed because currently comparing language still buggy. This still blocked by #4109\nFor example\n>>> Language['py 3.3'] == Language['py 3.3']\n  ...\n  raise InvalidVersion(\"Invalid version: '{0}'\".format(version))\n  packaging.version.InvalidVersion: Invalid version: 'Python 3.3'\n\n>>> Language['py'] == Language['py']\n  ...\n  raise InvalidVersion(\"Invalid version: '{0}'\".format(version))\n  packaging.version.InvalidVersion: Invalid version: 'Python 2.7, 3.3, 3.4, 3.5, 3.6'", "diff": "@@ -37,7 +37,9 @@ def __init__(self, language, **taste_values):\n                 setattr(self, name, taste_values.get(name, taste.default))\n \n     def __eq__(self, other):\n-        return type(self) is type(other) and self.tastes == other.tastes\n+        return (type(self) is type(other) and\n+                self.tastes == other.tastes and\n+                self.language == self.language)", "created_at": "2018-05-08T09:32:20Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjYxNTMxNw==", "fields": {"body": "done", "diff": "@@ -119,8 +122,6 @@ def test_system_coafile_parsing(self):\n         Constants.system_coafile = tmp", "created_at": "2018-05-08T04:40:23Z", "last_edited_at": null, "author": "siddhant-curious", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjYxNjQ2NQ==", "fields": {"body": "Yes it does. This is one of the things I was asking on the channel. I obviously have to fix it; on it.", "diff": "@@ -119,8 +122,6 @@ def test_system_coafile_parsing(self):\n         Constants.system_coafile = tmp", "created_at": "2018-05-08T04:53:19Z", "last_edited_at": null, "author": "siddhant-curious", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNDY0OA==", "fields": {"body": "Are you certain that the coverage will never be 100% locally? otherwise it should be 'You may not get a test coverage of 100% locally.'?", "diff": "@@ -56,8 +56,12 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You will not get a test coverage of 100% locally! - the coverage is", "created_at": "2018-05-09T11:02:05Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNTU4OQ==", "fields": {"body": "I think this line (the coverage on the website is merged for several python versions) is redundant and isn't making things clear enough. What do you think about removing it for the sake of the next line?", "diff": "@@ -56,8 +56,12 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You will not get a test coverage of 100% locally! - the coverage is\n+    measured across builds against several python versions. The coverage", "created_at": "2018-05-09T11:06:23Z", "last_edited_at": "2018-05-09T11:19:26Z", "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNjEzMQ==", "fields": {"body": "merged -> merged results & even without -> even without", "diff": "@@ -56,8 +56,12 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You will not get a test coverage of 100% locally! - the coverage is\n+    measured across builds against several python versions. The coverage\n+    published on `codecov.io <https://codecov.io/gh/coala/>`__ (GitHub\n+    Projects) and `codecov.io <https://codecov.io/gl/coala/>`__ (GitLab\n+    Projects) are actually merged for several python versions. Thus, your\n+    test coverage can 'pass' even without reaching 100% .", "created_at": "2018-05-09T11:09:25Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE0MzIyMg==", "fields": {"body": "whatever explanation gets the job done \ud83d\udc4d\nbut it shouldn't be wrong", "diff": "@@ -56,8 +56,14 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You may not get a test coverage of 100% locally. The coverage\n+    published on `codecov.io <https://codecov.io/gh/coala/>`__ (GitHub\n+    Projects) and `codecov.io <https://codecov.io/gl/coala/>`__ (GitLab\n+    Projects) are actually merged results for several python versions.\n+    Also, the results are merged from different OS. Appveyor results\n+    provide coverage of Windows specific lines, and Travis/Circle\n+    provide coverage of Unix specific lines. Thus, your test coverage\n+    can 'pass' without reaching 100% .", "created_at": "2018-05-09T19:01:38Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE1MDI0MA==", "fields": {"body": "The info that @ishanSrt is providing is also very important, as developers often forget to write tests, and that is typically why they will see test coverage not reach 100%.  But for that to happen, they wont have run pytest, because it will load the plugins mentioned in setup.cfg, which includes coverage, and it will fail locally if they havent written the tests yet.\nThe solution is not for the developer to add #pragma: no cover.  The code reviewer will usually reject that.  And soon we'll have CI automatically reject that, except in the most limited of cases.\nUsually the correct solution is write some tests.", "diff": "@@ -56,8 +56,14 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You may not get a test coverage of 100% locally. The coverage\n+    published on `codecov.io <https://codecov.io/gh/coala/>`__ (GitHub\n+    Projects) and `codecov.io <https://codecov.io/gl/coala/>`__ (GitLab\n+    Projects) are actually merged results for several python versions.\n+    Also, the results are merged from different OS. Appveyor results\n+    provide coverage of Windows specific lines, and Travis/Circle\n+    provide coverage of Unix specific lines. Thus, your test coverage\n+    can 'pass' without reaching 100% .", "created_at": "2018-05-09T19:28:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzEzNjczMQ==", "fields": {"body": "this doesn't seem like the correct explanation for why the coverage is not full.\nits due to\n\npragma no cover\nlack of tests, I stumble upon writing bad code and still passing tests every now and then and reviews correcting me for it. I assume everything in coala is not tested and the initial part of it was merged without adding tests. should confirm this by a maintainer.", "diff": "@@ -56,8 +56,14 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You may not get a test coverage of 100% locally. The coverage\n+    published on `codecov.io <https://codecov.io/gh/coala/>`__ (GitHub\n+    Projects) and `codecov.io <https://codecov.io/gl/coala/>`__ (GitLab\n+    Projects) are actually merged results for several python versions.\n+    Also, the results are merged from different OS. Appveyor results\n+    provide coverage of Windows specific lines, and Travis/Circle\n+    provide coverage of Unix specific lines. Thus, your test coverage\n+    can 'pass' without reaching 100% .", "created_at": "2018-05-09T18:38:44Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzMyODIxMA==", "fields": {"body": "add trailing comma, and put ): on the next line; see other bears", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str) = (),\n+                         enable_all: bool = False,\n+                         disable: typed_list(str) = (),\n+                         disable_all: bool = False,\n+                         gometalinter_config_file: str = '',\n+                         ignore_config: bool = False):", "created_at": "2018-05-10T13:24:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzMyOTY1NQ==", "fields": {"body": "use full URL.", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str) = (),\n+                         enable_all: bool = False,\n+                         disable: typed_list(str) = (),\n+                         disable_all: bool = False,\n+                         gometalinter_config_file: str = '',\n+                         ignore_config: bool = False):\n+        \"\"\"\n+        :param enable:\n+            List of linters to enable.\n+            Some linters are disabled by default. Refer goo.gl/gMirRv", "created_at": "2018-05-10T13:29:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA==", "fields": {"body": "umm, https://raivaibhav.github.io./GSoC.xml or  https://raivaibhav.github.io/GSoC.xml", "diff": "@@ -125,3 +125,6 @@ name = Saksham Bansal\n \n [https://charlieyang.me/feed_gsoc.xml]\n name = Guangyuan Yang\n+\n+[https://raivaibhav.github.io./GSoC.xml]", "created_at": "2018-05-10T20:24:53Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUxODc4Mg==", "fields": {"body": "gracefully documented :) \ud83d\udc4d", "diff": "@@ -0,0 +1,77 @@\n+---\n+name: \"Automate Whitelist creation for vulture\"\n+collaborating_projects:\n+  - coala\n+  - vulture\n+desc: \"Automatically create whitelists and detect falsely positive results for vulture.\"\n+developers_involved:\n+  - RJ722\n+mentors:\n+  - AbdealiJK\n+  - jendrikseipp\n+  - The-Compiler\n+difficulty: medium\n+status: in_progress\n+initiatives:\n+  - GSoC\n+issues: []\n+markdown: automate_vulture_whitelist.md\n+requirements:\n+  - \"Familiarity with vulture and how whitelists work.\"\n+tags:\n+  - Vulture\n+  - AST\n+  - coverage\n+---\n+\n+The aim of this project is to automatically create whitelists (to be utilized by\n+[vulture](https://github.com/jendrikseipp/vulture)) for projects using sip files to\n+communicate between C++ level API and Python programs, most significant of them being\n+PyQt projects.\n+\n+#### IDEAS\n+\n+* Create a script which takes sip files as input and spits a whitelist with all\n+  the virtual functions defined in the sip files. (Add Documentation and tests)\n+* Use that script for generating a whitelist for popular projects using PyQt\n+  (like [qutebrowser](https://github.com/qutebrowser/qutebrowser)).\n+* Allow passing coverage.xml to vulture via `--make-whitelist` and let it find\n+  the list of false-positive functions. (Add Documentation and tests as well)\n+* Write a whitelist generator for shiboken, the binding\n+  generator used for PySide2\n+\n+#### MILESTONES\n+\n+##### COMMUNITY BONDING\n+* Discussion on whether to implement a new Tracer or to directly consume `xml`\n+  output from coverage.py\n+* Get familiar with coverage.xml\n+* Take up small tasks from\n+  [TODO](https://github.com/jendrikseipp/vulture/tree/master/TODO.rst)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28)\n+\n+##### CODING PHASE 1\n+* The script for creating a whitelist from sip files should be implemented.\n+* It should reside in it's own repository, with CI enabled for testing on both\n+  the GNU/Linux and Windows platforms.\n+* It should be gracefully documented.", "created_at": "2018-05-11T04:38:49Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4OTU3NA==", "fields": {"body": "Split into two items:\n\nMaintain 100% test code coverage.\nUpdate documentation for the whitelist generator", "diff": "@@ -0,0 +1,78 @@\n+---\n+name: \"Automate Whitelist creation for vulture\"\n+collaborating_projects:\n+  - coala\n+  - vulture\n+desc: \"Automatically create whitelists and detect false positives for vulture.\"\n+developers_involved:\n+  - RJ722\n+mentors:\n+  - AbdealiJK\n+  - jendrikseipp\n+  - The-Compiler\n+difficulty: medium\n+status: in_progress\n+initiatives:\n+  - GSoC\n+issues: []\n+markdown: automate_vulture_whitelist.md\n+requirements:\n+  - \"Familiarity with vulture and how whitelists work.\"\n+tags:\n+  - Vulture\n+  - AST\n+  - coverage\n+---\n+\n+The aim of this project is to automatically create whitelists (to be utilized\n+by [vulture](https://github.com/jendrikseipp/vulture)) for projects using sip\n+files to communicate between C++ level API and Python programs, most\n+significant of them being PyQt projects.\n+\n+#### IDEAS\n+\n+* Create a script which takes sip files as input and spits a whitelist with all\n+  the virtual functions defined in the sip files. (Add Documentation and tests)\n+* Use that script for generating a whitelist for popular projects using PyQt\n+  (like [qutebrowser](https://github.com/qutebrowser/qutebrowser)).\n+* Allow passing coverage.xml to vulture via `--make-whitelist` and let it find\n+  the list of false-positive functions. (Add Documentation and tests as well)\n+* Write a whitelist generator for shiboken, the binding\n+  generator used for PySide2\n+\n+#### MILESTONES\n+\n+##### COMMUNITY BONDING\n+* Discussion on whether to implement a new Tracer or to directly consume `xml`\n+  output from coverage.py\n+* Get familiar with coverage.xml\n+* Take up small tasks from\n+  [TODO](https://github.com/jendrikseipp/vulture/tree/master/TODO.rst)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28)\n+\n+##### CODING PHASE 1\n+* The script for creating a whitelist from sip files should be implemented.\n+* It should reside in it's own repository, with CI enabled for testing on both\n+  the GNU/Linux and Windows platforms.\n+* It should be gracefully documented.\n+* Use this script to create a whitelist for\n+  [qutebrowser](https://github.com/qutebrowser/qutebrowser).\n+* Look at methods to increase coverage for vulture from it's already excellent\n+  95%+ coverage.\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29)\n+\n+##### CODING PHASE 2\n+* `--make-whitelist`: Vulture should be able to find a list of false positives\n+  (for functions and methods) from `coverage.xml`.\n+* Maintain code coverage, robust tests should be written.\n+* Add documentation, how-to, examples and use cases in\n+  [README](https://github.com/jendrikseipp/vulture/tree/master/README.rst).\n+* Research and planning about how to generate whitelists for\n+  [`shiboken`](https://pypi.org/project/Shiboken/)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30)\n+\n+##### CODING PHASE 3\n+* Implement whitelist generator for\n+  [`shiboken`](https://pypi.org/project/Shiboken/).\n+* Add tests and documentation for the generator.", "created_at": "2018-05-13T05:49:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc5MzU0NQ==", "fields": {"body": "I expect that this means that in milestone 1 you are supplying a PR to qutebrowser which replaces their whitelist generator with your own.\n\nThat whitelist generator would still need to stay, because it has many things in it which are qutebrowser specific. What it'd replace is the current horrible heuristic which ignores any functions which have a capital letter in them (because Qt/PyQt use camelCase for methods).", "diff": "@@ -0,0 +1,78 @@\n+---\n+name: \"Automate Whitelist creation for vulture\"\n+collaborating_projects:\n+  - coala\n+  - vulture\n+desc: \"Automatically create whitelists and detect false positives for vulture.\"\n+developers_involved:\n+  - RJ722\n+mentors:\n+  - AbdealiJK\n+  - jendrikseipp\n+  - The-Compiler\n+difficulty: medium\n+status: in_progress\n+initiatives:\n+  - GSoC\n+issues: []\n+markdown: automate_vulture_whitelist.md\n+requirements:\n+  - \"Familiarity with vulture and how whitelists work.\"\n+tags:\n+  - Vulture\n+  - AST\n+  - coverage\n+---\n+\n+The aim of this project is to automatically create whitelists (to be utilized\n+by [vulture](https://github.com/jendrikseipp/vulture)) for projects using sip\n+files to communicate between C++ level API and Python programs, most\n+significant of them being PyQt projects.\n+\n+#### IDEAS\n+\n+* Create a script which takes sip files as input and spits a whitelist with all\n+  the virtual functions defined in the sip files. (Add Documentation and tests)\n+* Use that script for generating a whitelist for popular projects using PyQt\n+  (like [qutebrowser](https://github.com/qutebrowser/qutebrowser)).\n+* Allow passing coverage.xml to vulture via `--make-whitelist` and let it find\n+  the list of false-positive functions. (Add Documentation and tests as well)\n+* Write a whitelist generator for shiboken, the binding\n+  generator used for PySide2\n+\n+#### MILESTONES\n+\n+##### COMMUNITY BONDING\n+* Discussion on whether to implement a new Tracer or to directly consume `xml`\n+  output from coverage.py\n+* Get familiar with coverage.xml\n+* Take up small tasks from\n+  [TODO](https://github.com/jendrikseipp/vulture/tree/master/TODO.rst)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28)\n+\n+##### CODING PHASE 1\n+* The script for creating a whitelist from sip files should be implemented.", "created_at": "2018-05-13T09:00:50Z", "last_edited_at": null, "author": "The-Compiler", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNzMyOQ==", "fields": {"body": "break lines at 80cpl.\npossibly convert this to a sub-list.", "diff": "@@ -44,15 +44,16 @@ We have a state-of-art implementation in\n for VS Code only. We need to design and implement a general mechanism for\n multiple editors/IDEs support.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n 1. Offer a basic languager server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- Support at least 'textDocument/didOpen', 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.", "created_at": "2018-05-13T17:01:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzkyNjYzOA==", "fields": {"body": "Replace 'basic' with a reference to the request types mentioned in features.", "diff": "@@ -61,29 +69,41 @@ The project is divided into two parts:\n \n - Design documentation about the language server exists.\n   - Architecture of the language server\n-  - Mechanism to support multiple languages.\n+  - Mechanism to support multiple languages and requests.\n \n ##### CODING PHASE 1\n \n - A basic language server for coala exists.\n   - Support linting for python.\n-- Basic test suite exists.\n+  - Supports basic request types:\n+    - 'textDocument/didSave'\n+    - 'textDocument/publishDiagnostics'\n+- Test suite exists with 100% coverage.\n - Basic Documentation exists including asciinema showing the\n   functionality working in any LS editor client.\n+- Performance metrics of the standalone language server against\n+  basic request types exist.", "created_at": "2018-05-14T12:02:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODI5NTQ4MA==", "fields": {"body": "Generally, agree with @ksdme.", "diff": "@@ -42,17 +42,25 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of", "created_at": "2018-05-15T13:54:07Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODU2NjgxMA==", "fields": {"body": "Ugly indentation", "diff": "@@ -93,9 +93,11 @@ def test_create_issue_cmd(self):\n         plugins.labhub.GitHubToken.assert_called_with(None)\n         plugins.labhub.GitLabPrivateToken.assert_called_with(None)\n \n+        # TODO\n+        # Ignoring test assert to prevent build failure for time being\n         # Creating issue in private chat\n-        testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'You\\'re not allowed')\n+        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+        #                      'You\\'re not allowed')", "created_at": "2018-05-16T09:52:31Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODUxMTU0MQ==", "fields": {"body": "also indicate that this project needs to do performance metrics using a few different types of usage, e.g. using various .coafile, especially an isolated perf run which has one a python GlobalBear, to see how it performs.\nI suspect global bears are going to be a large headache for this project.", "diff": "@@ -42,48 +42,86 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n 1. Offer a basic languager server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n - Design documentation about the language server exists.\n   - Architecture of the language server\n-  - Mechanism to support multiple languages.\n+  - Mechanism to support multiple languages and requests.\n \n ##### CODING PHASE 1\n \n - A basic language server for coala exists.\n   - Support linting for python.\n-- Basic test suite exists.\n-- Basic Documentation exists including asciinema showing the\n+  - Supports primary request types:\n+    - 'textDocument/didOpen'\n+    - 'textDocument/didSave'\n+    - 'textDocument/didClose'\n+    - 'textDocument/publishDiagnostics'\n+- Test suite exists with 100% coverage.\n+- Basic Documentation exists including video showing the\n   functionality working in any LS editor client.\n+- Performance metrics of the standalone language server against\n+  all the primary request types exist.", "created_at": "2018-05-16T06:10:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA1NDU4MA==", "fields": {"body": "This project isn't part of RGSoC afaik.", "diff": "@@ -0,0 +1,57 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Explore improvements to coala's dependency management through having Go Linter installed in *BSD system automatially.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+  - RGSoC", "created_at": "2018-05-17T18:18:23Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4NjEwMw==", "fields": {"body": "Some bears in coala are long running and some run on entire projects (GlobalBears or ProjectBears). By filtering the coala configuration at runtime and only allowing the certain sections of the configuration to run which are logical to the request type performance can be massively improved. The first two ideas can help with this by allowing a global blacklist for bears not to run in response to some particular request type and by allowing custom configuration of the bears per request type basis in the coafile.\nA custom entry point into coala refers to the idea of having a custom pipeline into coala. This way we could prevent the overhead by preprocessing the configuration files, gathering the bears, checking for dependencies and then initializing them. The entire setup can then be reused for subsequent calls.", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n+\n+#### Interface Optimizations\n+\n+The current implementation suffers from massive performance\n+problems. This is primarily due to the mode in which lang\n+server interacts with coala. Currently it works by executing\n+coala via cli and redirecting stdout to language server. This\n+is not an efficient mechanism because of all the involved overhead.\n+This projects aims to provide a practical language server with\n+performance improvements. Some ideas currently under consideration\n+to achieve the said improvements are:\n+\n+  - Runtime coala configurations\n+  - Language Server specific parameters in coafiles\n+  - Custom entry point into coala", "created_at": "2018-05-18T07:40:55Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4Nzc0OA==", "fields": {"body": "Yes, support for multiple languages is more about configuring the clients to handle multiple file types. coala Language Server only depends on the coafile configuration to handle it. I do not think there should be any significant problem with the server.", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n+\n+#### Interface Optimizations\n+\n+The current implementation suffers from massive performance\n+problems. This is primarily due to the mode in which lang\n+server interacts with coala. Currently it works by executing\n+coala via cli and redirecting stdout to language server. This\n+is not an efficient mechanism because of all the involved overhead.\n+This projects aims to provide a practical language server with\n+performance improvements. Some ideas currently under consideration\n+to achieve the said improvements are:\n+\n+  - Runtime coala configurations\n+  - Language Server specific parameters in coafiles\n+  - Custom entry point into coala\n+\n+Specific details about each method will be expanded upon\n+once they are discussed with the community.\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n - Design documentation about the language server exists.\n-  - Architecture of the language server\n-  - Mechanism to support multiple languages.\n+  - Architecture of the language server.\n+  - Mechanism to support multiple languages and requests.", "created_at": "2018-05-18T07:48:43Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNDgwMw==", "fields": {"body": "This is textDocument/formatting not workspace", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'", "created_at": "2018-05-17T22:03:26Z", "last_edited_at": null, "author": "gatesn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTA2Mw==", "fields": {"body": "Might be worth being explicit about support for initialize, shutdown and exit", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'", "created_at": "2018-05-17T22:04:52Z", "last_edited_at": null, "author": "gatesn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTE0Mw==", "fields": {"body": "lang server -> the language server", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n+\n+#### Interface Optimizations\n+\n+The current implementation suffers from massive performance\n+problems. This is primarily due to the mode in which lang", "created_at": "2018-05-17T22:05:19Z", "last_edited_at": null, "author": "gatesn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTMzODg5Nw==", "fields": {"body": "These changes depend on the cEP being accepted.", "diff": "@@ -40,10 +43,12 @@ this greatly improved coala's startup speed.\n Performance is key to usability - with faster runtimes, users can get on\n with their work quicker. And it's fun looking for performance bottlenecks!\n \n-In this project, you're to improve on the current strategies. Some enhancements\n-such as section-level caching, globbing improvements to not expand on\n-unmodified directories, and others have been preliminarily explored. Please\n-refer to the related issues to learn more about these.\n+In this project, you're to come up with improved versions of the current caching\n+strategies used by coala's core and integrate these with the NextGen-Core.\n+Some enhancements such as ignoring unmodified directories and use of\n+`FileFactory` and `Directory` classes have been already explored and are to be", "created_at": "2018-05-18T17:25:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ5NTM3MA==", "fields": {"body": "This is a rather inelegant, maybe put up an array of author and comment body to ignore?\nWe fill it with sensible default, and make it so we can add more via env var.", "diff": "@@ -141,14 +148,72 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          if (node.bodyText.search('@gitmate-bot') !== -1) {\n+            // gitmate-bot instructions\n+            flag = false;\n+          } else if (node.bodyText.search('@rultor') !== -1) {\n+            // rultor instructions\n+            flag = false;\n+          } else if (node.bodyText.match(/^(unack|ack)/g)) {\n+            // ack and unack messages\n+            flag = false;\n+          } else if (node.author && node.author.login === 'gitmate-bot') {\n+            // comments by gitmate-bot\n+            flag = false;\n+          } else if (node.author && node.author.login === 'rultor') {", "created_at": "2018-05-21T04:59:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTc3Mzk4NA==", "fields": {"body": "Could you consider renaming id to identifier ? id would interfere with python's built-in function.", "diff": "@@ -0,0 +1,77 @@\n+from django.db import models\n+\n+\n+class Participant(models.Model):\n+    login = models.TextField(default=None, primary_key=True)\n+    name = models.TextField(default=None, null=True)\n+    score = models.FloatField(default=0, null=True)\n+    rank = models.IntegerField(default=None, null=True)\n+\n+    # ranking trend compared to last iteration\n+    trend = models.IntegerField(default=None, null=True)\n+\n+    # time of latest action\n+    last_active_at = models.DateTimeField(default=None, null=True)\n+\n+    # number of positive reactions received\n+    pos_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted positive reactions received\n+    weighted_pos_in = models.FloatField(default=0, null=True)\n+\n+    # number of positive reactions give away\n+    pos_out = models.IntegerField(default=0, null=True)\n+\n+    # number of negative reactions received\n+    neg_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted negative reactions received\n+    weighted_neg_in = models.FloatField(default=0, null=True)\n+\n+    # number of negative reactions give away\n+    neg_out = models.IntegerField(default=0, null=True)\n+\n+    # punishment points\n+    punishment = models.FloatField(default=0, null=True)\n+\n+    # weight factor\n+    weight_factor = models.FloatField(default=0.1, null=True)\n+\n+    def __str__(self):\n+        return 'Meta-reviewer: ' + self.login\n+\n+    class Meta:\n+        ordering = ['rank']\n+\n+\n+class Comment(models.Model):\n+    id = models.TextField(default=None, primary_key=True)", "created_at": "2018-05-22T04:19:07Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTk0MzQ0OQ==", "fields": {"body": "fyi you can also do repositories instead of repositories: repositories.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recent_issues = [];\n+  const today = new Date();\n+  const day_last_month = today.setMonth(today.getMonth() - 1);\n+  for (const issue of issues) {\n+    if (getTime(day_last_month) < issue.updatedAtMs) {\n+      recent_issues.push(issue);\n+    }\n+  }\n+  return recent_issues;\n+}\n+\n ;(async () => {\n   let issueInfo, prInfo, labelInfo;\n   try {\n-    // Don't fetch them concurrently, otherwise some queries may fail \n+    // Don't fetch them concurrently, otherwise some queries may fail\n     issueInfo = await fetchIssue(repoOwner, repoNames, true);\n-    prInfo = await fetchIssue(repoOwner, repoNames, false); \n-    labelInfo = await fetchLabel(repoOwner, repoNames); \n+    labelInfo = await fetchLabel(repoOwner, repoNames);\n+    prInfo = await fetchIssue(repoOwner, repoNames, false);\n   } catch (error) {\n     console.log(error);\n   };\n   const issues = issueInfo.concat(prInfo);\n+  const repositories = generateRepoInfo(repoOwner, repoNames, issues);\n   const result = {\n     issues: issues,\n     repoLabels: labelInfo,\n-    repositories: generateRepoInfo(repoOwner, repoNames, issues)\n+    repositories: repositories\n+  };\n+  const recent_result = {\n+    issues: filterRecent(issues),\n+    repoLabels: labelInfo,\n+    repositories: repositories", "created_at": "2018-05-22T15:20:25Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTA0Mw==", "fields": {"body": "I think the project uses camelCase instead of snake_case variable name, need to keep it consistent here.\nenv is okay though.", "diff": "@@ -18,13 +18,28 @@ const GH_GQL_OPTIONS = {\n \n const client = GraphQL(GH_GQL_OPTIONS);\n \n-// number of pages we want to query (default: 20 pages x 100 items)\n+// number of pages we want to query\n // if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n-const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+const pageThreshold = process.env.PAGE_THRESHOLD || -1;\n console.log('page number threshold:', pageThreshold);\n \n+// earliest date we want to query from\n+// GitHub supports reactions since 2016-03-10\n+const earliestDate = process.env.EARLIEST_DATE || '2016-03-10T00:00:00Z';\n+\n const repo = process.env.REPOSITORIES;\n \n+// review will be ignored if it's written by any author specified here\n+// delimiter: space\n+const ignore_review_author = process.env.IGNORE_REVIEW_AUTHOR ||", "created_at": "2018-05-22T14:24:00Z", "last_edited_at": "2018-05-22T14:28:41Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTY5Mw==", "fields": {"body": "Why not Array.forEach ?\n... or Array.reduce", "diff": "@@ -141,22 +159,76 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignore_content of ignore_review_content.split(' ')) {", "created_at": "2018-05-22T14:25:43Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkzNDgzOQ==", "fields": {"body": "I guess just leave it as is, if you're not going to use reduce", "diff": "@@ -141,22 +159,76 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignore_content of ignore_review_content.split(' ')) {", "created_at": "2018-05-22T14:58:46Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAxMDkyMQ==", "fields": {"body": "Could use issues.filter and be made 1 liner.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recentIssues = [];\n+  const today = new Date();\n+  const dayLastMonth = today.setMonth(today.getMonth() - 1);\n+  for (const issue of issues) {\n+    if (getTime(dayLastMonth) < issue.updatedAtMs) {\n+      recentIssues.push(issue);", "created_at": "2018-05-22T18:41:56Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAyNDQwOA==", "fields": {"body": "let is for a variable that's available to be reassigned, push will not reassign the variable, it'll modify the array inside. In this case, keep using const.\nBut see my comment above, you can return the filter result directly instead without making a variable.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recentIssues = [];", "created_at": "2018-05-22T19:27:59Z", "last_edited_at": "2018-05-22T19:30:00Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDU5OTI4NA==", "fields": {"body": "I believe this partially lies in @nemaniarjun 's project scope which is to implement Repology as a service. What I'd like to do is to make use of the infrastructure provided by that project and specifically implement and ensure the dependencies required for my project has correct data from Repology.", "diff": "@@ -0,0 +1,102 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Explore improvements to coala's dependency management through having Go Linters installed in *BSD systems automatically.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://gitlab.com/coala/package_manager/issues/149\"\n+  - \"https://github.com/coala/coala-bears/issues/2481\"\n+markdown: go_bears_on_bsd.md\n+mentors:\n+  - xferra\n+  - yukiisbored\n+name: \"Linter Dependency Management from a Bare-Metal System\"\n+requirements:\n+  - \"At least one patch to the coala core should be accepted and merged.\"\n+  - \"The proposal needs to show familiarity with coala's dependency management implementation.\"\n+status: in_progress\n+tags:\n+  - Automation\n+  - Installation\n+  - Dependency\n+---\n+\n+`coala-bears` are of two types, Native Bears which implement all the business\n+logic themselves and Linter Bears which wrap existing linters and checkers.\n+Dependencies of bears are mostly language runtimes, language-specific packages\n+(e.g. python:nltk) or command line tools (e.g. git). Both Native Bears and\n+Linter Bears have dependencies which need to be installed before they can be\n+executed.\n+\n+`dependency_management` aims to provide Python APIs for dependency management on\n+various languages and different systems. It is used extensively by coala,\n+however, it lacks most of the key implementation and documentation in its\n+current state.\n+\n+coala now has [several bears written in\n+Go](https://github.com/coala/coala-bears/search?q=GoRequirement), [7 of\n+which](https://github.com/coala/coala-bears/blob/master/bears/go/) are for\n+validating Go files. They need specific versions of Go and some externally\n+supplied packages, and currently Go linter bears just assume they are all in\n+place and work. Go language dependencies are currently managed unversioned in\n+coala-bears. There is no official way provided for versioning, and though there\n+are other commonly used mechanisms for installing specific versions of Go repos,\n+a lot more investigation is needed.\n+\n+The end goal is to be able to bootstrap and recursively install all dependencies\n+on any systems without anything installed other than a base system, but the\n+scope of a complete solution is too large. A proposal has been made with\n+suitable scope, which is to automate the installation of Go linter bears onto\n+bare-metal BSDs.\n+\n+Features will mainly be implemented to coala's `dependency_management`. It\n+should be able to operate system and language-specific package managers to\n+handle dependencies. It should also resolve package names and versions\n+automatically using Repology on multiple operating systems.", "created_at": "2018-05-24T14:07:39Z", "last_edited_at": null, "author": "yzgyyang", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjU2NQ==", "fields": {"body": "If this is really necessary, it's better to have a DEBUG env var that enable/disable verbose log, otherwise just omit.", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {\n+            rawComments.map((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+              return comment;\n+            });\n+          }\n+        } else {\n+          // for debug\n+          // console.log('pull request does not have reactions. repoOwner:', owner,", "created_at": "2018-05-26T11:36:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0Njc4NA==", "fields": {"body": "Not sure what this is doing, do you mean forEach ?\nmap will create new array.", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {\n+            rawComments.map((comment, index) => {", "created_at": "2018-05-26T11:46:51Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjgzOA==", "fields": {"body": "dayLastMonth never changes, I think it's better to call getTime in the dayLastMonth variable itself.", "diff": "@@ -223,24 +379,47 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  const today = new Date();\n+  const dayLastMonth = today.setMonth(today.getMonth() - 1);\n+  return issues.filter(issue => getTime(dayLastMonth) < issue.updatedAtMs);", "created_at": "2018-05-26T11:52:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjkyNA==", "fields": {"body": "empty array is truthy", "diff": "@@ -141,23 +192,128 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {", "created_at": "2018-05-26T11:57:38Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0OTM2NQ==", "fields": {"body": "Nope, that was intentional. iff = if and only if", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff", "created_at": "2018-05-26T13:53:53Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA1MzEwMQ==", "fields": {"body": "Nice job on adding the comments!", "diff": "@@ -0,0 +1,77 @@\n+from django.db import models\n+\n+\n+class Participant(models.Model):\n+    login = models.TextField(default=None, primary_key=True)\n+    name = models.TextField(default=None, null=True)\n+    score = models.FloatField(default=0, null=True)\n+    rank = models.IntegerField(default=None, null=True)\n+\n+    # ranking trend compared to last iteration\n+    trend = models.IntegerField(default=None, null=True)\n+\n+    # time of latest action\n+    last_active_at = models.DateTimeField(default=None, null=True)\n+\n+    # number of positive reactions received\n+    pos_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted positive reactions received\n+    weighted_pos_in = models.FloatField(default=0, null=True)\n+\n+    # number of positive reactions give away\n+    pos_out = models.IntegerField(default=0, null=True)\n+\n+    # number of negative reactions received\n+    neg_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted negative reactions received\n+    weighted_neg_in = models.FloatField(default=0, null=True)\n+\n+    # number of negative reactions give away\n+    neg_out = models.IntegerField(default=0, null=True)\n+\n+    # punishment points\n+    punishment = models.FloatField(default=0, null=True)\n+\n+    # weight factor\n+    weight_factor = models.FloatField(default=0.1, null=True)\n+", "created_at": "2018-05-26T16:22:54Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTAzNzUyNQ==", "fields": {"body": "See #529 (comment)", "diff": "@@ -7,110 +8,87 @@\n \n from plugins.coatils import Coatils\n \n-\n-class TestCoatils(unittest.TestCase):\n-\n-    def setUp(self):\n-        self.testbot = TestBot(extra_plugin_dir='plugins',\n-                               loglevel=logging.ERROR)\n-        self.testbot.start()\n-\n-    def tearDown(self):\n-        self.testbot.stop()\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_total_bears.yaml')\n-    def test_total_bears(self):\n-        self.assertEqual(Coatils.total_bears(),\n-                         102)\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_all_langs.yaml')\n-    def test_all_langs(self):\n-        self.assertEqual(len(Coatils.all_langs()),\n-                         63)\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_contrib.yaml')\n-    def test_contrib_stats(self):\n-        self.testbot.assertCommand('!contrib stats sils',\n-                                    'Commited 2654 commits')\n-        self.testbot.assertCommand('!contrib stats some-non-existent',\n-                                   'stats for some-non-existent not found')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_lang_stats.yaml')\n-    def test_lang_stats(self):\n-        self.testbot.assertCommand('!lang  stats',\n-                                   'coala supports 63 languages')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_bear_stats.yaml')\n-    def test_bear_stats(self):\n-        self.testbot.assertCommand('!bear stats',\n-                                   'There are total 102 bears')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_bear_stats_lang.yaml')\n-    def test_bear_stats_lang(self):\n-        self.testbot.assertCommand('!bear stats python',\n-                                   'There are 17 bears for python language')\n-        self.testbot.assertCommand('!bear stats abc',\n-                                   'No bear exists for abc')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_bear_stats_lang.yaml')\n-    def test_ls_bears(self):\n-        self.testbot.assertCommand('!ls bears r',\n-                                   'Bears for r are')\n-        self.assertIn('RLintBear', self.testbot.pop_message())\n-        self.testbot.assertCommand('!ls bears brainfuck',\n-                                   'No bears found for brainfuck')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_stats.yaml')\n-    def test_stats(self):\n-        self.testbot.assertCommand('!stats',\n-                                   'coala has 102 bears across 63 languages')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_run_coala.yaml')\n-    def test_run_coala(self):\n-        # no results\n-        self.testbot.push_message('!run python SpaceConsistencyBear use_spaces=yes\\n```\\nimport this\\n\\n```')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'coala analysis in progress...')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'Your code is flawless :tada:')\n-        # results and diffs\n-        self.testbot.push_message('!run python PyUnusedCodeBear remove_unused_imports=yes '\n-                                  'PycodestyleBear\\n```\\nimport os\\nimport this\\na=1\\n```')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'coala analysis in progress...')\n-        msg = self.testbot.pop_message()\n-        self.assertIn('Here is what I think is wrong:', msg)\n-        self.assertIn('This file contains unused source code',\n-                      msg)\n-\n-        # ensuring that only one result is yielded\n-        with self.assertRaises(queue.Empty):\n-            next_msg = self.testbot.pop_message()\n-        # error\n-        self.testbot.push_message('!run a b\\n```\\nc\\n```')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'coala analysis in progress...')\n-        self.assertIn('Something went wrong, things to check for',\n-                      self.testbot.pop_message())\n-\n-    def test_construct_settings(self):\n-        self.assertEqual(Coatils.construct_settings('bear1 a=1 b=2 bear2 bear3'),\n-                         {'bear1': {'a': '1', 'b': '2'},\n-                          'bear2': {},\n-                          'bear3': {}})\n-\n-    def test_position(self):\n-        self.assertEqual(Coatils.position(1, 1, 1, 1),\n-                         'At 1:1')\n-        self.assertEqual(Coatils.position(1, 1, 1, 5),\n-                         'At line 1, between col 1 and 5')\n-        self.assertEqual(Coatils.position(1, 5, 3, 10),\n-                         'Between positions 1:5 and 3:10')\n-        self.assertEqual(Coatils.position(1, None, 3, None),\n-                         'Between lines 1 and 3')\n-        self.assertEqual(Coatils.position(3, None, 3, None),\n-                         'At line 3')\n-        self.assertEqual(Coatils.position(1, None, 3, 6),\n-                         'Between line 1 and position 3:6')\n-        self.assertEqual(Coatils.position(1, 4, 5, None),\n-                         'Between position 1:4 and line 5')\n+extra_plugin_dir = 'plugins'\n+\n+\n+@vcr.use_cassette('tests/cassettes/coatils_total_bears.yaml')\n+def test_total_bears():", "created_at": "2018-05-26T02:38:07Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE4NTA1Ng==", "fields": {"body": "I think a .coafile is needed because if you run coala just with --no-config and --config an error of usage will be generated.", "diff": "@@ -71,3 +71,8 @@ def test_check_conflicts(self):\n         with self.assertRaisesRegex(SystemExit, '2') as cm:\n             check_conflicts(sections)\n             self.assertEqual(cm.exception.code, 2)\n+\n+        sections = parse_cli(arg_list=['--no-config', '--config', '.coafile'])", "created_at": "2018-05-28T11:40:49Z", "last_edited_at": null, "author": "raduklb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE5ODAwOA==", "fields": {"body": "ok --config expects one argument so, it is needed here.", "diff": "@@ -71,3 +71,8 @@ def test_check_conflicts(self):\n         with self.assertRaisesRegex(SystemExit, '2') as cm:\n             check_conflicts(sections)\n             self.assertEqual(cm.exception.code, 2)\n+\n+        sections = parse_cli(arg_list=['--no-config', '--config', '.coafile'])", "created_at": "2018-05-28T12:47:21Z", "last_edited_at": "2018-05-28T12:59:20Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI1MzY3OQ==", "fields": {"body": "Why did you add one extra blank line? \ud83d\ude03  We already have one blank line in .gitignore file.", "diff": "@@ -43,3 +43,5 @@ Gemfile.lock\n venv\n bears/upload/\n package-lock.json\n+.pytest_cache\n+", "created_at": "2018-05-28T18:01:54Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI2MzUwMw==", "fields": {"body": "We should expand it regardless what notation the user wants ;) That makes it way more convenient to use.", "diff": "@@ -0,0 +1,120 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The parent directory the file is located in.\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in binary format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Now we can get the filename:\n+\n+    >>> fp.name\n+    './tests/io/FileFactoryTestFiles/test.txt'\n+\n+    Make the object into an iterable when required\n+\n+    >>> fp.lines()\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    Retrieve a single line:\n+\n+    >>> fp.line(1)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ['This is a test file.\\\\n']\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The absolute filepath.", "created_at": "2018-05-28T19:38:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0MDk3OA==", "fields": {"body": "snake_case is a bit unusual for url.", "diff": "@@ -127,6 +128,12 @@ def get_organization():\n         distill_func=get_index,\n         distill_file='contributors/index.html',\n     ),\n+    distill_url(\n+        r'meta-review/$', meta_review_index,", "created_at": "2018-05-29T14:16:09Z", "last_edited_at": "2018-05-29T14:20:52Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0ODc2Ng==", "fields": {"body": "I would like to hear more voice.\nI have thought it for a while and tried finding some evidence to support my original idea. I did find some, very weak though.\nAs https://docs.djangoproject.com/en/2.0/topics/db/models/#automatic-primary-key-fields points out,\nBy default, Django gives each model the following field:\n\nid = models.AutoField(primary_key=True)\n\nAlso, from https://github.com/django/django/blob/f1f4aeb22e7bc9b504f69f7cb111ac9bdedb5f1e/django/db/models/base.py#L1298-L1312 we can see that they allow the usage of id field as long as it has primary_key=True", "diff": "@@ -0,0 +1,77 @@\n+from django.db import models\n+\n+\n+class Participant(models.Model):\n+    login = models.TextField(default=None, primary_key=True)\n+    name = models.TextField(default=None, null=True)\n+    score = models.FloatField(default=0, null=True)\n+    rank = models.IntegerField(default=None, null=True)\n+\n+    # ranking trend compared to last iteration\n+    trend = models.IntegerField(default=None, null=True)\n+\n+    # time of latest action\n+    last_active_at = models.DateTimeField(default=None, null=True)\n+\n+    # number of positive reactions received\n+    pos_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted positive reactions received\n+    weighted_pos_in = models.FloatField(default=0, null=True)\n+\n+    # number of positive reactions give away\n+    pos_out = models.IntegerField(default=0, null=True)\n+\n+    # number of negative reactions received\n+    neg_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted negative reactions received\n+    weighted_neg_in = models.FloatField(default=0, null=True)\n+\n+    # number of negative reactions give away\n+    neg_out = models.IntegerField(default=0, null=True)\n+\n+    # punishment points\n+    punishment = models.FloatField(default=0, null=True)\n+\n+    # weight factor\n+    weight_factor = models.FloatField(default=0.1, null=True)\n+\n+    def __str__(self):\n+        return 'Meta-reviewer: ' + self.login\n+\n+    class Meta:\n+        ordering = ['rank']\n+\n+\n+class Comment(models.Model):\n+    id = models.TextField(default=None, primary_key=True)", "created_at": "2018-05-29T14:35:23Z", "last_edited_at": "2018-05-29T14:35:39Z", "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ1MDUxMg==", "fields": {"body": "Nope, it doesn't cause any error \ud83d\ude1b The name of template passed in to render method doesn't matter, as long as there is a corresponding file under template directory.\nIn this case, since templates/meta_review.html exists, return render(request, 'meta_review.html', args) is fine.", "diff": "@@ -0,0 +1,15 @@\n+from meta_review.models import Participant\n+from django.shortcuts import render\n+from django.db.models import Q\n+\n+\n+def index(request):\n+    participants = Participant.objects.all().exclude(\n+        Q(pos_in=0),\n+        Q(neg_in=0),\n+        Q(pos_out=0),\n+        Q(neg_out=0),\n+        Q(punishment=0)\n+    )\n+    args = {'participants': participants}\n+    return render(request, 'meta_review.html', args)", "created_at": "2018-05-29T14:39:34Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQzNTEzNw==", "fields": {"body": "meta_review_data, maybe? :)", "diff": "@@ -127,6 +128,12 @@ def get_organization():\n         distill_func=get_index,\n         distill_file='contributors/index.html',\n     ),\n+    distill_url(\n+        r'meta-review/$', meta_review_index,\n+        name='meta-review-data',", "created_at": "2018-05-29T14:01:12Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTUyMzYyMw==", "fields": {"body": "Yeah, I've been naming the PK id for a long while and it doesn't create any issues. As @li-boxuan posted from django docs that Django by default creates the PK as id when we don't specify a model field to be PK.", "diff": "@@ -0,0 +1,77 @@\n+from django.db import models\n+\n+\n+class Participant(models.Model):\n+    login = models.TextField(default=None, primary_key=True)\n+    name = models.TextField(default=None, null=True)\n+    score = models.FloatField(default=0, null=True)\n+    rank = models.IntegerField(default=None, null=True)\n+\n+    # ranking trend compared to last iteration\n+    trend = models.IntegerField(default=None, null=True)\n+\n+    # time of latest action\n+    last_active_at = models.DateTimeField(default=None, null=True)\n+\n+    # number of positive reactions received\n+    pos_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted positive reactions received\n+    weighted_pos_in = models.FloatField(default=0, null=True)\n+\n+    # number of positive reactions give away\n+    pos_out = models.IntegerField(default=0, null=True)\n+\n+    # number of negative reactions received\n+    neg_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted negative reactions received\n+    weighted_neg_in = models.FloatField(default=0, null=True)\n+\n+    # number of negative reactions give away\n+    neg_out = models.IntegerField(default=0, null=True)\n+\n+    # punishment points\n+    punishment = models.FloatField(default=0, null=True)\n+\n+    # weight factor\n+    weight_factor = models.FloatField(default=0.1, null=True)\n+\n+    def __str__(self):\n+        return 'Meta-reviewer: ' + self.login\n+\n+    class Meta:\n+        ordering = ['rank']\n+\n+\n+class Comment(models.Model):\n+    id = models.TextField(default=None, primary_key=True)", "created_at": "2018-05-29T18:16:38Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTY1MzAwOQ==", "fields": {"body": "I see that you created another Model called Team in https://gitlab.com/coala/landing/blob/86203d6a9b5b840bc851804858744a4281240286/backend/org/models.py and use teams = models.ManyToManyField(Team) in Contributor model. Is there any reason for the use of JSONField here?", "diff": "@@ -8,6 +10,7 @@ class Contributor(models.Model):\n     num_commits = models.IntegerField(default=None, null=True)\n     reviews = models.IntegerField(default=None, null=True)\n     issues_opened = models.IntegerField(default=None, null=True)\n+    teams = JSONField(default=None, null=True)", "created_at": "2018-05-30T06:21:27Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTY1NDI5OQ==", "fields": {"body": "Is there any reason for the use of JSONField here?\n\nActually, I was using JSONField there; But, yesterday I update that to ManyToManyField, and I still have to update it here.\nWaiting for that to be merged anyway; Could you please review that one :)", "diff": "@@ -8,6 +10,7 @@ class Contributor(models.Model):\n     num_commits = models.IntegerField(default=None, null=True)\n     reviews = models.IntegerField(default=None, null=True)\n     issues_opened = models.IntegerField(default=None, null=True)\n+    teams = JSONField(default=None, null=True)", "created_at": "2018-05-30T06:29:03Z", "last_edited_at": "2018-05-30T06:29:16Z", "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NDcwOQ==", "fields": {"body": "wrapper class", "diff": "@@ -0,0 +1,115 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents", "created_at": "2018-05-31T21:34:07Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NjA4Mg==", "fields": {"body": "return value seems to be a tuple and not a list. I guess you don't mean python list, do you ?", "diff": "@@ -0,0 +1,115 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The parent directory the file is located in.\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in binary format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    Retrieve a single line:\n+\n+    >>> fp.line(1)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The absolute filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._parent = os.path.abspath(os.path.dirname(self._filename))\n+        self._stamp = os.path.getmtime(self._filename)\n+\n+    def line(self, line):\n+        \"\"\"\n+        :param line:\n+            The line number from which the string is to be retrieved.\n+        :return:\n+            The retrieved string at the given line number from the file.\n+        \"\"\"\n+        return linecache.getline(self._filename, line)\n+\n+    @property\n+    def lines(self):\n+        \"\"\"\n+        To get all the lines in the file in form of a list.", "created_at": "2018-05-31T21:40:20Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NzAwNQ==", "fields": {"body": "We should take file name in any format - relative/absolute. And then convert it to absolute if its relative while storing it in self._filename", "diff": "@@ -0,0 +1,115 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The parent directory the file is located in.\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in binary format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    Retrieve a single line:\n+\n+    >>> fp.line(1)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The absolute filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)", "created_at": "2018-05-31T21:44:25Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjM5NDYzMg==", "fields": {"body": "Maybe for simplicity we can remove it for now. As users have access to the path, they can do that manually. We can add it again when we are actually using the FileFactory in bears and see that this is practically useful :)", "diff": "@@ -0,0 +1,115 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The parent directory the file is located in.\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in binary format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    Retrieve a single line:\n+\n+    >>> fp.line(1)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The absolute filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._parent = os.path.abspath(os.path.dirname(self._filename))", "created_at": "2018-06-01T13:25:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1MDE1OQ==", "fields": {"body": "What if developer tries to invites members to dev team? This error message isn't stating this reason.", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +\n+                                 ' developers'].is_member(inviter)\n+        isMaintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the ' + ', '.join(valid_teams)\n+\n+        def invite(invitee, team):\n+\n             team_mapping = {\n                 'newcomers': self.GH_ORG_NAME + ' newcomers',\n                 'developers': self.GH_ORG_NAME + ' developers',\n                 'maintainers': self.GH_ORG_NAME + ' maintainers'\n             }\n \n-            # send the invite\n-            self.TEAMS[team_mapping[team.lower()]].invite(invitee)\n+            self.TEAMS[team_mapping[team]].invite(invitee)\n+\n+        if isDeveloper and team == 'newcomers':\n+            invite(invitee, team)\n+            return tenv().get_template(\n+                'labhub/promotions/{}.jinja2.md'.format(team)\n+            ).render(\n+                targer=invitee,\n+            )\n+        elif isMaintainer:\n+            invite(invitee, team)\n             return tenv().get_template(\n-                'labhub/promotions/{}.jinja2.md'.format(team.lower())\n+                'labhub/promotions/{}.jinja2.md'.format(team)\n             ).render(\n                 target=invitee,\n             )\n         else:\n             return tenv().get_template(\n-                'labhub/errors/not-maintainer.jinja2.md'\n+                'labhub/errors/not-eligible-invite.jinja2.md'", "created_at": "2018-06-02T05:10:41Z", "last_edited_at": "2018-06-02T05:13:02Z", "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NTc2OA==", "fields": {"body": "Nice catch!", "diff": "@@ -22,19 +22,19 @@ tags:\n   - community\n   - web\n ---\n-The basic idea is an extended version of [GSOC Task List](http://github.com/summerofcode/gsoc-prep-tasks).\n+The basic idea is an extended version of [GSOC Task List](https://github.com/coala/git-task-list)", "created_at": "2018-06-02T10:02:36Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1Nzk5Mg==", "fields": {"body": "This would return something like Please select from one of the newcomers, maintainers, developers. I'd rather have something like Please select either of these teams: newcomers, developers, maintainers. something along this lines, motive being it should be distinguishable where the valid teams start.", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +\n+                                 ' developers'].is_member(inviter)\n+        isMaintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the ' + ', '.join(valid_teams)", "created_at": "2018-06-02T12:00:22Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NzkyNw==", "fields": {"body": "Umm... Snake case, this is python. Similarly below.", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +", "created_at": "2018-06-02T11:56:45Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1ODM2OQ==", "fields": {"body": "Remove this line", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +\n+                                 ' developers'].is_member(inviter)\n+        isMaintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the ' + ', '.join(valid_teams)\n+\n+        def invite(invitee, team):\n+", "created_at": "2018-06-02T12:20:46Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTE5NQ==", "fields": {"body": "team developers and maintainers --> developers or maintainers team", "diff": "@@ -0,0 +1,2 @@\n+- A newcomer cannot invite other members to the {{ organization }} org.\n+- You need to be a maintainer in order to invite someone to team developers and maintainers.", "created_at": "2018-06-03T14:12:44Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTEzMA==", "fields": {"body": "targer-->target", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        is_developer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' developers'].is_member(inviter)\n+        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                   ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the valid teams: ' + ', '.join(\n+                    valid_teams)\n+\n+        def invite(invitee, team):\n             team_mapping = {\n                 'newcomers': self.GH_ORG_NAME + ' newcomers',\n                 'developers': self.GH_ORG_NAME + ' developers',\n                 'maintainers': self.GH_ORG_NAME + ' maintainers'\n             }\n \n-            # send the invite\n-            self.TEAMS[team_mapping[team.lower()]].invite(invitee)\n+            self.TEAMS[team_mapping[team]].invite(invitee)\n+\n+        if is_developer and team == 'newcomers':\n+            invite(invitee, team)\n+            return tenv().get_template(\n+                'labhub/promotions/{}.jinja2.md'.format(team)\n+            ).render(\n+                targer=invitee,", "created_at": "2018-06-03T14:10:00Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTc2OQ==", "fields": {"body": "will soon invite you --> will invite you to the organization soon", "diff": "@@ -0,0 +1,11 @@\n+Welcome @{{ target }}! :tada:\n+\n+A developer or maintainer will soon invite you to the orgazinzation.", "created_at": "2018-06-03T14:31:59Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTcwMQ==", "fields": {"body": "orgazinzation --> organization", "diff": "@@ -0,0 +1,11 @@\n+Welcome @{{ target }}! :tada:\n+\n+A developer or maintainer will soon invite you to the orgazinzation.", "created_at": "2018-06-03T14:29:16Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDA0Mg==", "fields": {"body": "-> @property", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    File indicies start with zero in case of\n+    FileFactory objects. To retrieve a single line:\n+\n+    >>> fp.line(0)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+\n+    Get the file contents in raw mode:\n+\n+    >>> fp.raw()\n+    b'This is a test file.'\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._stamp = os.path.getmtime(self._filename)\n+\n+    def line(self, line):\n+        \"\"\"\n+        :param line:\n+            The line number from which the string is to be retrieved.\n+        :return:\n+            The retrieved string at the given line number from the file.\n+        \"\"\"\n+        return linecache.getline(self._filename, line+1)\n+\n+    @property\n+    def lines(self):\n+        \"\"\"\n+        To get all the lines in the file in form of a tuple.\n+        \"\"\"\n+        return tuple(linecache.getlines(self._filename))\n+\n+    def raw(self):\n+        \"\"\"\n+        :return:\n+            Opens the file in binary mode and returns its contents.\n+        \"\"\"\n+        with open(self._filename, 'rb') as fp:\n+            return fp.read()\n+\n+    def string(self):", "created_at": "2018-06-05T19:17:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDE1Ng==", "fields": {"body": "-> @property", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    File indicies start with zero in case of\n+    FileFactory objects. To retrieve a single line:\n+\n+    >>> fp.line(0)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+\n+    Get the file contents in raw mode:\n+\n+    >>> fp.raw()\n+    b'This is a test file.'\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._stamp = os.path.getmtime(self._filename)\n+\n+    def line(self, line):\n+        \"\"\"\n+        :param line:\n+            The line number from which the string is to be retrieved.\n+        :return:\n+            The retrieved string at the given line number from the file.\n+        \"\"\"\n+        return linecache.getline(self._filename, line+1)\n+\n+    @property\n+    def lines(self):\n+        \"\"\"\n+        To get all the lines in the file in form of a tuple.\n+        \"\"\"\n+        return tuple(linecache.getlines(self._filename))\n+\n+    def raw(self):", "created_at": "2018-06-05T19:18:18Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDEyNA==", "fields": {"body": "Be consistent with documentation, use :return: as well", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    File indicies start with zero in case of\n+    FileFactory objects. To retrieve a single line:\n+\n+    >>> fp.line(0)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+\n+    Get the file contents in raw mode:\n+\n+    >>> fp.raw()\n+    b'This is a test file.'\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._stamp = os.path.getmtime(self._filename)\n+\n+    def line(self, line):\n+        \"\"\"\n+        :param line:\n+            The line number from which the string is to be retrieved.\n+        :return:\n+            The retrieved string at the given line number from the file.\n+        \"\"\"\n+        return linecache.getline(self._filename, line+1)\n+\n+    @property\n+    def lines(self):\n+        \"\"\"\n+        To get all the lines in the file in form of a tuple.", "created_at": "2018-06-05T19:18:10Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MTY5MA==", "fields": {"body": "not tuple? ;)\nBtw, I would also add that it's UTF-8 decoded, that's the difference between strings/lists and raw format ;)", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.", "created_at": "2018-06-05T19:23:48Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MTg5Nw==", "fields": {"body": "Enclose code terms like FileFactory into double backticks so they get rendered as code \ud83d\udc4d", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:", "created_at": "2018-06-05T19:24:30Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MjA0OA==", "fields": {"body": "Use single quotes, that's the preferred quotation for strings that don't contain single backticks", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")", "created_at": "2018-06-05T19:24:58Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5NTA2Ng==", "fields": {"body": "Okay with me", "diff": "@@ -1,25 +1,29 @@\n ---\n collaborating_projects:\n   - coala\n-desc: \"Improve coala's performance by improving file caching and other performance bottlenecks.\"\n+desc: \"Improve coala's performance by improving file loading using factory\n+      classes and other performance bottlenecks.\"\n difficulty: medium\n initiatives:\n   - GSoC\n   - RGSoC\n issues:\n-  - \"https://github.com/coala/coala/issues/2541\"\n-  - \"https://github.com/coala/coala/issues/2699\"\n+  - \"https://github.com/coala/coala/issues/3530\"\n   - \"https://github.com/coala/coala/issues/2912\"\n+  - \"https://github.com/coala/coala/issues/2541\"", "created_at": "2018-06-05T19:35:34Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzEwOTc5MQ==", "fields": {"body": "Then dont run moban.  :P  It does give a semi-decent error message.\nfyi this is what we have done for coala & coala-bears.  .travis.yml clones https://gitlab.com/coala/mobans to that location.\nMedium term goal is for moban to manage these dependencies moremoban/moban#35 .  The logic has mostly been written in yehua (https://github.com/moremoban/yehua/blob/master/yehua/project.py#L29)", "diff": "@@ -0,0 +1,15 @@\n+overrides: coala.yaml\n+\n+language: ruby\n+gitignore_language: Jekyll\n+gitignore_extra_rulesets:\n+  - GitBook\n+\n+configuration:\n+  template_dir:\n+    - ../coala-mobans/templates/\n+    - ../coala-mobans/assets/", "created_at": "2018-06-05T15:09:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzU0MTU3MA==", "fields": {"body": "You can write maybe like\nif not len(observed_result) == len(expected_result): This would eliminate one level of indentation atleast. There are so many nested if and for loops.", "diff": "@@ -0,0 +1,36 @@\n+from coala_utils.Comparable import Comparable\n+\n+\n+class BaseTestHelper:\n+    \"\"\"\n+    This is a base class for all Bears' tests of coala's testing API.\n+    \"\"\"\n+\n+    def assertComparableObjectsEqual(self, observed_result, expected_result):\n+        \"\"\"\n+        Compares individual fields of the Result object and yields messages in\n+        case of an attribute mismatch.\n+        \"\"\"\n+        if len(observed_result) == len(expected_result):\n+            messages = ''\n+            for observed, expected in zip(observed_result, expected_result):\n+                if (isinstance(observed, Comparable)\n+                        and isinstance(expected, Comparable)) \\\n+                        and (type(observed) is type(expected)):\n+                    for attribute in type(observed).__compare_fields__:\n+                        try:\n+                            assert getattr(observed, attribute) == \\\n+                                getattr(expected, attribute), \\\n+                                '{} mismatch: {}, {} != {}, {}'.format(\n+                                    attribute,\n+                                    observed.origin, observed.message,\n+                                    expected.origin, observed.message)\n+                        except AssertionError as ex:\n+                            messages += (str(ex) + '\\n\\n')\n+                else:\n+                    assert observed_result == expected_result, '%s != %s' % \\\n+                        (observed_result, expected_result)\n+            if messages:\n+                raise AssertionError(messages)\n+        else:", "created_at": "2018-06-06T20:04:42Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzY2OTM5Ng==", "fields": {"body": "postagged -> pos_tagged maybe?", "diff": "@@ -0,0 +1,66 @@\n+import yaml\n+\n+\n+class DictionaryTagger(object):\n+    def __init__(self, dictionary_paths):\n+        files = [open(path, 'r') for path in dictionary_paths]\n+        dictionaries = [yaml.load(dict_file) for dict_file in files]\n+        map(lambda x: x.close(), files)\n+        self.dictionary = {}\n+        self.max_key_size = 0\n+        for curr_dict in dictionaries:\n+            for key in curr_dict:\n+                if key in self.dictionary:\n+                    self.dictionary[key].extend(curr_dict[key])\n+                else:\n+                    self.dictionary[key] = curr_dict[key]\n+                    self.max_key_size = max(self.max_key_size, len(key))\n+\n+    def tag(self, postagged_sentences):", "created_at": "2018-06-07T08:43:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzY3MjI4Ng==", "fields": {"body": "Missing space before on room", "diff": "@@ -0,0 +1,23 @@\n+from django.db import models\n+\n+\n+class Question(models.Model):\n+    identifier = models.CharField(max_length=500, primary_key=True)\n+    room = models.CharField(max_length=300)\n+    text = models.TextField()\n+    sent_at = models.DateTimeField()\n+    sent_by = models.CharField(max_length=300)\n+\n+    def __str__(self):\n+        return ('sent_by: ' + self.sent_by + 'on room: ' + self.room)", "created_at": "2018-06-07T08:53:14Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzYyNjEwMw==", "fields": {"body": "Old error; this file is now ignored", "diff": "@@ -0,0 +1,9 @@\n+{% extends 'gitignore.jj2' %}\n+{% block extra %}\n+# Django distill\n+/private/\n+_site/\n+/public/\n+\n+{% include 'gitignore/coala.gitignore' %}", "created_at": "2018-06-07T05:00:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3NDY2MQ==", "fields": {"body": "If it has been removed completely, why not just remove the whole code? We can't get it working in the future anyway.\nFor historical purposes, the code will always be there on the git history.\nWe should also remove the readme section https://github.com/coala/gh-board#easter-eggs\nBut it said \"easter eggs\" I'm not sure if it's truly a hidden easter eggs that is not very obvious to find, and we miss it. \ud83d\ude02", "diff": "@@ -59,11 +59,12 @@ test('shows a repo', async t => {\n   t.true(agoRegExp.test(await browser.getText('time.updated-at')));\n });\n \n-test('checks that the games load up', async () => {\n-  await browser.waitForExist('.nav-secret-game');\n-  await browser.click('.nav-secret-game');\n-  await browser.waitForExist('.secret-game-is-playing', 30 * 1000); // It may take some time to fetch the game from the Gist\n-});\n+// game functionality has been removed", "created_at": "2018-06-07T14:48:12Z", "last_edited_at": "2018-06-07T14:48:24Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3Nzk2NA==", "fields": {"body": "I think it's worth adding a comment with a link to the issue, or just explain it in the commit.", "diff": "@@ -22,9 +22,9 @@ before_install:\n   - npm i -g jshint\n \n script:\n+  - coala --non-interactive -V\n   - ./.ci/build.sh\n   - rm -rf private/\n-  - coala --non-interactive -V", "created_at": "2018-06-07T14:56:29Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczMzcyNA==", "fields": {"body": "an extra level is needed in the abstraction, which needs to be a separate PR before this.\nthis isnt creating a meta bear.\nA meta bear is like URLBear, which only yields HiddenResult.  See URLHeadBear and InvalidLinkBear for how they all link together.\nWe need a VCSCommitBear which only yields a CommitResult(HiddenResult).  SkipCIBear would then receive those CommitResult and only yield the CommitResult if the commit was a CI skip.\n(and while trying to understand this, it is better to simply ignore GitCommitBear and HgCommitBear -- those will need to be glued back in after the redesign.)", "diff": "@@ -0,0 +1,44 @@\n+\n+from coalib.misc.Shell import run_shell_command\n+from bears.vcs.CommitBear import _CommitBear\n+\n+\n+class SkipCIBear(_CommitBear):", "created_at": "2018-06-07T12:50:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzg4MjM3MQ==", "fields": {"body": "children = [e for e in relative_recursive_glob(self._path, '**')]\nreturn children[1:]\n\nOr may be just:\nreturn [e for e in relative_recursive_glob(self._path, '**')][1:]", "diff": "@@ -0,0 +1,28 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path')\n+class Directory:\n+    def __init__(self, path):\n+        self._path = os.path.abspath(path)\n+        self._parent = os.path.abspath(os.path.dirname(self._path))\n+\n+    def children(self):\n+        elements = relative_recursive_glob(self._path, '**')\n+        children = []\n+\n+        for e in elements:\n+            children.append(e)\n+\n+        return children[1:]\n+", "created_at": "2018-06-07T20:40:14Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzgyMzk2Mw==", "fields": {"body": "Perhaps you could use snake case for the method name, to ensure consistency. assert_comparable_objects_equal", "diff": "@@ -0,0 +1,41 @@\n+from coala_utils.Comparable import Comparable\n+\n+\n+class BaseTestHelper:\n+    \"\"\"\n+    This is a base class for all Bears' tests of coala's testing API.\n+    \"\"\"\n+\n+    def assertComparableObjectsEqual(self, observed_result, expected_result):", "created_at": "2018-06-07T17:10:45Z", "last_edited_at": null, "author": "IpshitaC", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzgyNDM4NA==", "fields": {"body": "Change to result objects", "diff": "@@ -0,0 +1,41 @@\n+from coala_utils.Comparable import Comparable\n+\n+\n+class BaseTestHelper:\n+    \"\"\"\n+    This is a base class for all Bears' tests of coala's testing API.\n+    \"\"\"\n+\n+    def assertComparableObjectsEqual(self, observed_result, expected_result):\n+        \"\"\"\n+        Compares individual fields of the Result object and yields messages in", "created_at": "2018-06-07T17:12:27Z", "last_edited_at": null, "author": "IpshitaC", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MjQyMg==", "fields": {"body": "removing these should have been another commit in the same PR, as this is related to the fact that Ryan removed the game , and is unrelated to the test runner problems.  Also note that it wasnt mentioned in the commit message.  Anyway, this is minor and it is very distinct changes within the same commit.\nI am guessing Ryan will appreciate this being sent upstream (as two commits, and probably best left to coding phase 2), and it should almost apply without much difficulty, and likewise try the same with Phil, but that is very optional as that codebase probably has other problems which are not related to your project.", "diff": "@@ -59,13 +59,6 @@ test('shows a repo', async t => {\n   t.true(agoRegExp.test(await browser.getText('time.updated-at')));\n });\n \n-test('checks that the games load up', async () => {", "created_at": "2018-06-08T04:54:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI0OTIwNg==", "fields": {"body": "Im doing #132 ..\nBut .. this is not desirable\nIt is better to let them be separate args.\nIf you want to use allow_failure, call it on the cli like --allow_failure", "diff": "@@ -13,12 +13,15 @@ class Command(BaseCommand):\n \n     def add_arguments(self, parser):\n         parser.add_argument('output_dir', nargs='?', type=str)\n-        parser.add_argument('filenames', nargs='+', type=str)\n+        parser.add_argument('filenames', nargs='?', type=str)\n+        parser.add_argument('allow_failure', nargs='?', type=bool,\n+                            default=False)\n \n     def handle(self, *args, **options):\n         logger = logging.getLogger(__name__)\n         output_dir = options.get('output_dir')\n-        filenames = options.get('filenames')\n+        filenames = options.get('filenames').split(' ')", "created_at": "2018-06-10T08:01:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI0OTU5Ng==", "fields": {"body": "The fetch operation should be in a separate management command, so that people can fetch once and then load many times while attempting to debug problems.\nThis could probably be an enhancement to fetch_deployed_data (and community.git) to fetch deployed data from a different repo.", "diff": "@@ -0,0 +1,440 @@\n+from dateutil import parser\n+import json\n+import logging\n+\n+from django.utils import timezone\n+import requests\n+\n+from community.git import get_org_name\n+from meta_review.dump_to_db import dump_all\n+from meta_review.load_from_db import load_all\n+from meta_review.models import Participant\n+\n+\n+def parse_time(time):\n+    \"\"\"\n+    parse string to datetime\n+    :param time: a string represents time, e.g. 2018-05-09T11:19:26Z\n+    :return: an offset-aware datetime object\n+    \"\"\"\n+    if time is None:\n+        return None\n+\n+    return parser.parse(time)\n+\n+\n+class MetaReviewHandler:\n+    \"\"\"\n+    This is the class responsible for scraping provided information (reviews,\n+    reactions), processing them and dumping into Django database\n+    \"\"\"\n+\n+    def __init__(self, content, date):\n+        \"\"\"\n+        Constructs a new ``MetaReviewHandler``\n+\n+        :param content: Parsed JSON data\n+        :param date: The update date\n+        \"\"\"\n+        self.logger = logging.getLogger(__name__)\n+        self.logger.info('this package is alive')\n+\n+        self.date = date\n+\n+        # save comments in memory\n+        self.comments = dict()\n+        for issue in content:\n+            issue = issue['issue']\n+            if not issue.get('pullRequest'):\n+                continue\n+            for comment in issue['pullRequest']['comments']:\n+                # parse time\n+                comment['createdAt'] = parse_time(comment['createdAt'])\n+                comment['lastEditedAt'] = parse_time(comment['lastEditedAt'])\n+                self.comments[comment['id']] = comment\n+\n+        # save reactions in memory\n+        self.reactions = dict()\n+        for key, comment in self.comments.items():\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # record receiver\n+                reaction['receiver'] = {\n+                    'login': comment['author']['login']\n+                }\n+                # record comment id\n+                reaction['comment_id'] = comment['id']\n+                # parse time\n+                reaction['createdAt'] = parse_time(reaction['createdAt'])\n+                self.reactions[reaction['id']] = reaction\n+\n+        # save participants in memory\n+        self.participants = dict()\n+        for key, comment in self.comments.items():\n+            # get author of each comment\n+            author = comment['author']\n+\n+            # skip if user does not exist\n+            # this happens when account is deleted from GitHub\n+            if author['login']:\n+                self.participants[author['login']] = author\n+\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # get user of each reaction\n+                user = reaction['user']\n+\n+                # skip if user does not exist\n+                if author['login']:\n+                    self.participants[user['login']] = user\n+\n+    def handle(self):\n+        \"\"\"\n+        Scrape data, process and store in database\n+        \"\"\"\n+        load_all(self.participants, self.comments, self.reactions)\n+\n+        self.__check_comment_update()\n+        self.__update_score()\n+        self.__update_weight_factors()\n+\n+        # dump first to make use of built-in sort method\n+        dump_all(self.participants, self.comments, self.reactions)\n+        self.__update_rankings()\n+\n+        # dump first to make use of reverse query\n+        dump_all(self.participants, self.comments, self.reactions)\n+        self.__update_time()\n+\n+        dump_all(self.participants, self.comments, self.reactions)\n+\n+        self.logger.info('Meta Review System finishes.')\n+\n+    def __check_comment_update(self):\n+        \"\"\"\n+        If reviewer updates their review comment after it has\n+        been meta-reviewed, they will be slightly punished.\n+        \"\"\"\n+        for key, comment in self.comments.items():\n+            last_edited_at = comment.last_edited_at\n+            author = comment.author\n+\n+            # skip if author does not exist\n+            if not author:\n+                continue\n+\n+            # if already punished during last iteration, don't punish again\n+            # `last_active_at` attribute records time of last iteration\n+            if (author.last_active_at and last_edited_at\n+                    and author.last_active_at >= last_edited_at):\n+                continue\n+\n+            reactions = comment.reaction_set.all()\n+\n+            need_punishment = False\n+\n+            # get reactions createdTime\n+            for reaction in reactions:\n+                if last_edited_at and last_edited_at > reaction.created_at:\n+                    need_punishment = True\n+\n+            if need_punishment:\n+                self.logger.info('%s updates review comment after it has been'\n+                                 'meta-reviewed. 0.5 point deducted for'\n+                                 'punishment. comment id: %s'\n+                                 % (author.login, comment.id))\n+                author.punishment += 0.5\n+                author.score -= 0.5\n+\n+    def __update_time(self):\n+        \"\"\"\n+        Update last_active_at attribute of each participant\n+\n+        Note this does not accurately reflect the last time they were\n+        active in the community.\n+\n+        First, it relies on the accuracy of issues.json fetched from\n+        gh-board repo.\n+\n+        Second, this field should instead be interpreted as 'the last\n+        time the participant had impact on the meta-review system'. This\n+        is the last time among three things: the last time they created/edited\n+        a comment, the last time they did a meta-review, the last time\n+        their review received a meta-review.\n+        \"\"\"\n+        self.logger.info('start updating last active time of all participants')\n+\n+        # load participants from database to make use of reverse query\n+        participants_all = Participant.objects.all()\n+\n+        for participant in participants_all:\n+            old_active_time = participant.last_active_at\n+\n+            # check last time they created/edited a comment\n+            for comment in participant.comment_set.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = comment.created_at\n+                if comment.created_at > participant.last_active_at:\n+                    participant.last_active_at = comment.created_at\n+                if (comment.last_edited_at and\n+                        comment.last_edited_at > participant.last_active_at):\n+                    participant.last_active_at = comment.last_edited_at\n+\n+            # check last time they did a meta-review\n+            for reaction in participant.give.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            # check last time they received a meta-review\n+            for reaction in participant.receive.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            if participant.last_active_at != old_active_time:\n+                self.logger.debug('%s last active time changed from %s to %s'\n+                                  % (participant.login, old_active_time,\n+                                     participant.last_active_at))\n+\n+            self.participants[participant.login] = participant\n+\n+    def __update_score(self):\n+        \"\"\"\n+        Calculate and update score of each participant using\n+        the following formula:\n+\n+        Define:\n+\n+        P1 = total points (weighted) of THUMBS_UP a person gets for all\n+             reviews he did.\n+        P2 = total number of THUMBS_UP a person gives to other\n+             people for their reviews.\n+        N1 = total points (weighted) of THUMBS_DOWN a person gets for all\n+             reviews he did.\n+        N2 = total number of THUMBS_DOWN a person gives to other people for\n+             their reviews.\n+\n+        Then final score, denote by S, is as follows:\n+\n+        S =  P1 - N1 + c1 * P2 + c2 * N2\n+\n+        where c1 = 0.05, c2 = 0.2. One will get at least 0.1 point for a\n+        positive reaction they received, so we want c1 be smaller than that.\n+        c2 is larger because people are reluctant to give negative reactions.\n+        In all, bonus points (P2 and N2) aim to encourage people to do\n+        meta-reviews, but we don't want them to dominate.\n+\n+        Also update score of each review comment.\n+        \"\"\"\n+        self.logger.info('update scores of all participants')\n+        # coefficients of the formula\n+        c1, c2 = 0.05, 0.2\n+        for key, participant in self.participants.items():\n+            # parameters to be used in the formula\n+            p1, p2, n1, n2 = 0, 0, 0, 0\n+            # number of positive/negative reactions received\n+            pos_cnt, neg_cnt = 0, 0\n+\n+            # get reactions received\n+            reactions_in = participant.receive.all()\n+            for reaction in reactions_in:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, receiver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                # get weight factor of the reaction giver\n+                weight_factor = reaction.giver.weight_factor\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction received is %s, positive'\n+                                      % reaction.content)\n+                    p1 += weight_factor\n+                    pos_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.pos += 1\n+                    reaction.review.weighted_pos += weight_factor\n+                    reaction.review.score += weight_factor\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction received is %s, negative'\n+                                      % reaction.content)\n+                    n1 += weight_factor\n+                    neg_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.neg += 1\n+                    reaction.review.weighted_neg += weight_factor\n+                    reaction.review.score -= weight_factor\n+                else:\n+                    self.logger.debug('reaction received is %s, ignore'\n+                                      % reaction.content)\n+\n+            # get reactions give away\n+            reactions_out = participant.give.all()\n+            for reaction in reactions_out:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, giver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction give away is %s, positive'\n+                                      % reaction.content)\n+                    p2 += 1\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction give away is %s, negative'\n+                                      % reaction.content)\n+                    n2 += 1\n+                else:\n+                    self.logger.debug('reaction give away is %s, ignore'\n+                                      % reaction.content)\n+\n+            # update information\n+            participant.pos_in += pos_cnt\n+            participant.weighted_pos_in += p1\n+            participant.pos_out += p2\n+            participant.neg_in += neg_cnt\n+            participant.weighted_neg_in += n1\n+            participant.neg_out += n2\n+            self.logger.debug('update %s info, pos_in += %d, '\n+                              'weighted_pos_in += %.3f, pos_out += %d, '\n+                              'neg_in += %d, weighted_neg_in += %.3f, '\n+                              'neg_out += %d'\n+                              % (participant.login, pos_cnt, p1, p2,\n+                                 neg_cnt, n1, n2))\n+\n+            # update score\n+            s = p1 - n1 + c1 * p2 + c2 * n2\n+            self.logger.debug('update %s score, before: %.3f, after: %.3f'\n+                              % (participant.login, participant.score,\n+                                 participant.score + s))\n+            participant.score += s\n+\n+    def __update_rankings(self):\n+        \"\"\"\n+        Calculate and update rankings based on scores by making\n+        use of Django built-in sorting method\n+        \"\"\"\n+        self.logger.info('update rankings of all participants')\n+\n+        # make use of built-in order_by method to sort participants\n+        participants_all = Participant.objects.order_by('-score', '-pos_in')\n+        rank = 0\n+        last_score = -float('inf')\n+        for participant in participants_all:\n+            if rank == 0 or last_score != participant.score:\n+                rank += 1\n+                last_score = participant.score\n+\n+            # update trend = rank (last time) - rank (this time)\n+            if participant.rank:\n+                if participant.trend:\n+                    self.logger.debug('update %s trend, before: %d, after: %d'\n+                                      % (participant.login, participant.trend,\n+                                         participant.rank - rank))\n+                else:\n+                    # if last time was the first time they get a rank, then\n+                    # they don't have trend last time\n+                    self.logger.debug('update %s trend, before: N/A, after: %d'\n+                                      % (participant.login,\n+                                         participant.rank - rank))\n+                participant.trend = participant.rank - rank\n+            else:\n+                self.logger.debug('%s has no rank before, thus no trend'\n+                                  % participant.login)\n+\n+            # update rank\n+            if participant.rank:\n+                self.logger.debug('update %s rank, before: %d, after: %d'\n+                                  % (participant.login, participant.rank, rank))\n+            else:\n+                self.logger.debug('update %s rank, before: N/A, after: %d'\n+                                  % (participant.login, rank))\n+            participant.rank = rank\n+\n+            # save in memory\n+            self.participants[participant.login] = participant\n+\n+    def __update_weight_factors(self):\n+        \"\"\"\n+        Based on history data and the current iteration, recalculate weight\n+        factors (to be used in the next iteration)\n+\n+        The higher score a person has, the more impacts he has, thus his\n+        meta-reviews are more valuable.\n+\n+        For example, in a previous iteration, Alice got 2 marks, Bob got\n+        0.8 marks and Charlie got 10 marks. The calculation demo would\n+        be as follows:\n+\n+        >>> c = [2, 0.8, 10]\n+        >>> max_score = float(max(c))\n+        >>> result = [i / max_score for i in c]\n+        >>> print(result)\n+        [0.2, 0.08, 1.0]\n+        >>> result_adjust = [i * 0.9 + 0.1 for i in result]  # adjust\n+        >>> result_rounded = [round(i, 3) for i in result_adjust]\n+        >>> print(result_rounded)\n+        [0.28, 0.172, 1.0]\n+\n+        Anyone who gets negative marks from previous run will have weight\n+        factor of 0.\n+\n+        To conclude, the weight factor is a float number ranging from 0 to 1.\n+        \"\"\"\n+        max_score = 1.0\n+        # find max score\n+        for key, participant in self.participants.items():\n+            if participant.score > max_score:\n+                max_score = float(participant.score)\n+\n+        # calculate weight factors\n+        for key, participant in self.participants.items():\n+            if participant.score < 0:\n+                participant.weight_factor = 0\n+            else:\n+                participant.weight_factor = participant.score / max_score\n+                participant.weight_factor *= 0.9\n+                participant.weight_factor += 0.1\n+\n+\n+def handle():\n+    # load data from gh-board repo\n+    org_name = get_org_name()\n+\n+    # URL to grab all issues from\n+    issues_url = 'http://' + org_name + '.github.io/gh-board/issues.json'", "created_at": "2018-06-10T08:20:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ0MA==", "fields": {"body": "do we need this empty section?\nif so, can we get a comment on it explaining why?", "diff": "@@ -0,0 +1,10 @@\n+[Core]\n+name = Ban\n+module = ban\n+\n+[Documentation]\n+description = Ban from all rooms at once\n+[Python]\n+version = 3\n+\n+[Errbot]", "created_at": "2018-06-10T10:29:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ1NA==", "fields": {"body": "horrific style.\nplease get pyflakes & pycodestyle active on these files.\n(and read your diffs before publishing them)", "diff": "@@ -0,0 +1,32 @@\n+import os\n+import logging\n+import unittest\n+from unittest.mock import Mock, MagicMock, PropertyMock, patch\n+\n+from errbot.backends.test import TestBot\n+\n+import plugins.ban\n+\n+from tests.helper import plugin_testbot\n+\n+\n+class TestBan(unittest.TestCase):\n+\n+    @patch('plugins.ban.requests')\n+    @patch('plugins.ban.json')\n+    def test_ban_cmd(self, mockjson, mockreq):\n+        ban, testbot = plugin_testbot(plugins.ban.Ban, logging.ERROR)\n+        ban.activate()\n+\n+        ban.bot_config.ROOMS_TO_JOIN = ('coala/coala', 'coala/coala-bears')\n+        ban.bot_config.BOT_IDENTITY['token'] = 'mocked?'\n+\n+        fake_room_data = [{'id': '130', 'uri': 'coala/coala'},\n+        \t\t  {'id': '234', 'name': 'Nitanshu'},", "created_at": "2018-06-10T10:30:10Z", "last_edited_at": "2018-06-10T10:30:54Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQyNA==", "fields": {"body": "so this is a syntax error.\nnot tested.\nand something is wrong with CI that it didnt find this problem for you.\nplease fix.  separate PR.", "diff": "@@ -104,6 +104,7 @@\n \n ACCESS_CONTROLS = {'render test': {\n     'allowrooms': ('coala/cobot-test', 'coala/corobo',)},\n-    'LabHub:*': {'allowprivate': False}}\n+    'LabHub:*': {'allowprivate': False}", "created_at": "2018-06-10T10:29:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NjY2MQ==", "fields": {"body": "indentation only on this line: 4 spaces back", "diff": "@@ -751,7 +755,12 @@ def execute_section(section,\n                              results (bear names are key) as well as the\n                              file dictionary.\n     \"\"\"\n-    if debug:\n+    debug_bears = (False\n+                   if 'debug_bears' not in section or (\n+                       section['debug_bears'].value == 'False') else (\n+                       typed_list(str)(section['debug_bears'])))", "created_at": "2018-06-10T18:53:41Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzEwNw==", "fields": {"body": "We have to change the name, if possible we should try to look at the pdb naming. Since we use runcall heavily, something similar would be nice. However, since we aren't in the context of pdb, it should include debug as a word.\nMaybe debug_collect_iterable? Nah not so good... or maybe just debug_run? meh... \ud83d\ude05", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue\n+\n+\n+def debug_mode_function(func, dbg, *args, **kwargs):", "created_at": "2018-06-10T19:09:01Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzEzMQ==", "fields": {"body": "wait a second shouldn't it be bear_results?", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue\n+\n+\n+def debug_mode_function(func, dbg, *args, **kwargs):\n+    results = []\n+    bear_results = dbg.runcall(func, *args, **kwargs)\n+    if isinstance(bear_results, collections.Iterable):\n+        try:\n+            iterator = iter(bear_results)\n+            while True:\n+                result = dbg.runcall(next, iterator)\n+                results.append(result)\n+        except StopIteration:\n+            return results\n+    else:\n+        return results", "created_at": "2018-06-10T19:09:55Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzIxMQ==", "fields": {"body": "So -->\nbear_results = dbg.runcall(func, *args, **kwargs)\nif isinstance(bear_results, collections.Iterable):\n    results = []\n    iterator = iter(bear_results)\n    try:\n        while True:\n            result = dbg.runcall(next, iterator)\n            results.append(result)\n    except StopIteration:\n        return results\nelse:\n    return bear_results\nPS: I moved the iter part out of the try block as well, since that shouldn't throw a StopIteration. If it does, it's a serious Python bug, and we should let coala crash :P", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue\n+\n+\n+def debug_mode_function(func, dbg, *args, **kwargs):\n+    results = []\n+    bear_results = dbg.runcall(func, *args, **kwargs)\n+    if isinstance(bear_results, collections.Iterable):\n+        try:\n+            iterator = iter(bear_results)\n+            while True:\n+                result = dbg.runcall(next, iterator)\n+                results.append(result)\n+        except StopIteration:\n+            return results\n+    else:\n+        return results", "created_at": "2018-06-10T19:12:29Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzQ0NA==", "fields": {"body": "I would provide dbg with a default argument:\ndef debug_mode_function(func, dbg=pdb.Pdb(), *args, **kwargs):", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue\n+\n+\n+def debug_mode_function(func, dbg, *args, **kwargs):", "created_at": "2018-06-10T19:18:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTA1OQ==", "fields": {"body": "Shouldn't it be called somehow differently? Otherwise you override do_c / do_continue implicitly, and it will now always clear breakpoints, regardless of doing q or c.", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):", "created_at": "2018-06-10T20:14:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTAxMA==", "fields": {"body": "return 1, redundant braces", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)", "created_at": "2018-06-10T20:13:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTAzMw==", "fields": {"body": "what about assigning those to db?\nclass dbg(pdb.Pdb):\n    def __init__(self, ...):\n        self.do_q = self.do_continue\n        ...\n    def do_continue(self, arg):\n        self.clear_all_breaks()\n        super().do_continue(arg)\n        return 1", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue", "created_at": "2018-06-10T20:13:56Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTE1NQ==", "fields": {"body": "please read my comments on the old PR.", "diff": "@@ -463,6 +473,30 @@ def test_bear_with_specific_language(self):\n         self.assertEqual(str(result), 'Hypertext Markup Language 5.1')\n         self.check_message(LOG_LEVEL.DEBUG)\n \n+    @patch('pdb.Pdb.do_continue')\n+    def test_do_continue(self, do_continue):\n+        arg = {}\n+        self.assertEqual(dbg.do_continue(arg), 1)\n+\n+    @patch('coalib.bears.Bear.dbg.runcall', side_effect=((1, 2), 3, 4))\n+    def test_debug_mode_func_with_return(self, runcall):\n+        section = Section('name')\n+        my_bear = TestOneBear(section, self.queue, debugger=True)\n+        args = {}\n+        kwargs = {}", "created_at": "2018-06-10T20:18:41Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxMzg5OA==", "fields": {"body": "separate std libs and custom packages; and do some reordering, see other apps for example.", "diff": "@@ -0,0 +1,667 @@\n+import requests\n+from requests.exceptions import ReadTimeout\n+import json\n+import logging", "created_at": "2018-06-09T04:35:57Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxMzkwMw==", "fields": {"body": "extra line not required.", "diff": "@@ -0,0 +1,667 @@\n+import requests\n+from requests.exceptions import ReadTimeout\n+import json\n+import logging\n+from dateutil import parser\n+\n+from django.utils import timezone\n+\n+from community.git import get_org_name\n+", "created_at": "2018-06-09T04:36:24Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA0MA==", "fields": {"body": "You can use r.json() as well", "diff": "@@ -381,3 +382,43 @@ def pr_stats(self, msg, match):\n                     state=type(self).community_state(pr_count)\n                  )\n         yield reply\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        if not self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(user):\n+            yield 'Only maintainers are allowed to use this command.'\n+            return\n+\n+        sinner = args[0]\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {'Content-Type': 'application/json',\n+                   'Accept': 'application/json',\n+                   'Authorization': 'Bearer ' +\n+                   self.bot_config.BOT_IDENTITY['token']\n+                   }\n+        data = json.dumps({\"username\": sinner})\n+\n+        r = requests.get('https://api.gitter.im/v1/rooms', headers=headers)\n+        room_data = json.loads(r.text)", "created_at": "2018-06-09T05:21:08Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA2MQ==", "fields": {"body": "use this style:\ndict = {\n    key: value,\n    key: value,\n}", "diff": "@@ -381,3 +382,43 @@ def pr_stats(self, msg, match):\n                     state=type(self).community_state(pr_count)\n                  )\n         yield reply\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        if not self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(user):\n+            yield 'Only maintainers are allowed to use this command.'\n+            return\n+\n+        sinner = args[0]\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {'Content-Type': 'application/json',", "created_at": "2018-06-09T05:21:56Z", "last_edited_at": "2018-06-09T05:31:11Z", "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTIxOA==", "fields": {"body": "for room in filter(lambda x: x['uri'] in joined_rooms, room_data):\n   rq = requests.post('https://api.gitter.im/v1/rooms/' + room['id'] + '/bans', data=data, headers=headers)\n   banned_users.append(room['uri'])\nUse something like this, shorter and better ^^ . Not including the exception handling bit, add it ;)", "diff": "@@ -381,3 +382,43 @@ def pr_stats(self, msg, match):\n                     state=type(self).community_state(pr_count)\n                  )\n         yield reply\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        if not self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(user):\n+            yield 'Only maintainers are allowed to use this command.'\n+            return\n+\n+        sinner = args[0]\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {'Content-Type': 'application/json',\n+                   'Accept': 'application/json',\n+                   'Authorization': 'Bearer ' +\n+                   self.bot_config.BOT_IDENTITY['token']\n+                   }\n+        data = json.dumps({\"username\": sinner})\n+\n+        r = requests.get('https://api.gitter.im/v1/rooms', headers=headers)\n+        room_data = json.loads(r.text)\n+        banned_rooms = []\n+\n+        for room in joined_rooms:\n+            for rm in room_data:\n+                try:\n+                    if rm['uri'] == room:\n+                        url = 'https://api.gitter.im/v1/rooms/' + \\\n+                            rm['id'] + '/bans'\n+                        r = requests.post(url, data=data, headers=headers)\n+                        banned_rooms.append(room)\n+                except KeyError:\n+                    pass", "created_at": "2018-06-09T05:30:28Z", "last_edited_at": "2018-06-09T05:31:20Z", "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNjY2OQ==", "fields": {"body": "Might want to lump these two lines into the try above so that you don't get an UnboundLocalError if the above fails (see: Travis failure).", "diff": "@@ -0,0 +1,666 @@\n+from dateutil import parser\n+import json\n+import logging\n+\n+from django.utils import timezone\n+import requests\n+from requests.exceptions import ReadTimeout\n+\n+from community.git import get_org_name\n+from meta_review.models import Participant, Comment, Reaction\n+\n+\n+def parse_time(time):\n+    \"\"\"\n+    parse string to datetime\n+    :param time: a string represents time, e.g. 2018-05-09T11:19:26Z\n+    :return: an offset-aware datetime object\n+    \"\"\"\n+    if time is None:\n+        return None\n+\n+    return parser.parse(time)\n+\n+\n+class MetaReviewHandler:\n+    \"\"\"\n+    This is the class responsible for scraping provided information (reviews,\n+    reactions), processing them and dumping into Django database\n+    \"\"\"\n+\n+    def __init__(self, content, date):\n+        \"\"\"\n+        Constructs a new ``MetaReviewHandler``\n+\n+        :param content: Parsed JSON data\n+        :param date: The update date\n+        \"\"\"\n+        self.logger = logging.getLogger(__name__)\n+        self.logger.info('this package is alive')\n+\n+        self.date = date\n+\n+        # save comments in memory\n+        self.comments = dict()\n+        for issue in content:\n+            issue = issue['issue']\n+            if not issue.get('pullRequest'):\n+                continue\n+            for comment in issue['pullRequest']['comments']:\n+                # parse time\n+                comment['createdAt'] = parse_time(comment['createdAt'])\n+                comment['lastEditedAt'] = parse_time(comment['lastEditedAt'])\n+                self.comments[comment['id']] = comment\n+\n+        # save reactions in memory\n+        self.reactions = dict()\n+        for key, comment in self.comments.items():\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # record receiver\n+                reaction['receiver'] = {\n+                    'login': comment['author']['login']\n+                }\n+                # record comment id\n+                reaction['comment_id'] = comment['id']\n+                # parse time\n+                reaction['createdAt'] = parse_time(reaction['createdAt'])\n+                self.reactions[reaction['id']] = reaction\n+\n+        # save participants in memory\n+        self.participants = dict()\n+        for key, comment in self.comments.items():\n+            # get author of each comment\n+            author = comment['author']\n+\n+            # skip if user not exist\n+            # this happens when account is deleted from GitHub\n+            if author['login']:\n+                self.participants[author['login']] = author\n+\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # get user of each reaction\n+                user = reaction['user']\n+\n+                # skip if user not exist\n+                if author['login']:\n+                    self.participants[user['login']] = user\n+\n+    def handle(self):\n+        \"\"\"\n+        Scrape data, process and store in database\n+        \"\"\"\n+        print('load participants to memory')\n+        self.__load_participants_to_memory()\n+        print('load comments to memory')\n+        self.__load_comments_to_memory()\n+        print('load reactions to memory')\n+        self.__load_reactions_to_memory()\n+\n+        print('dump participants to database')\n+        self.__dump_participants_to_database()\n+        print('dump comments to database')\n+        self.__dump_comments_to_database()\n+        print('dump reactions to database')\n+        self.__dump_reactions_to_database()\n+\n+        print('update score')\n+        self.__update_score()\n+        print('update ranking')\n+        self.__update_rankings()\n+        print('update weight factors')\n+        self.__update_weight_factors()\n+        print('update time')\n+        self.__update_time()\n+\n+        print('dump participants to database')\n+        self.__dump_participants_to_database()\n+        print('dump comments to database')\n+        self.__dump_comments_to_database()\n+        print('dump reactions to database')\n+        self.__dump_reactions_to_database()\n+\n+        self.logger.info('Meta Review System finishes.')\n+\n+    def __check_comment_update(self, last_edited_at, comment):\n+        \"\"\"\n+        If reviewer updates their review comment after it has\n+        been meta-reviewed, they will be slightly punished.\n+\n+        :param last_edited_at: Datetime\n+        :param comment: Comment object\n+        \"\"\"\n+        author = comment.author\n+        reactions = comment.reaction_set.all()\n+\n+        need_punishment = False\n+\n+        # get reactions createdTime\n+        for reaction in reactions:\n+            if last_edited_at and last_edited_at > reaction.created_at:\n+                need_punishment = True\n+\n+        if need_punishment:\n+            self.logger.info('%s updates review comment after it has been'\n+                             'meta-reviewed. 0.5 point deducted for punishment.'\n+                             'comment id: %s' % (author.login, comment.id))\n+            author.punishment += 0.5\n+            author.score -= 0.5\n+\n+    def __load_participants_to_memory(self):\n+        \"\"\"\n+        Load participants into memory\n+        a) create Participant objects if not exist in database\n+           fetch history data if exist in database and also in memory\n+        b) fetch history data if exist in database but not in memory yet\n+        \"\"\"\n+        self.logger.info('get or create participants')\n+        created_cnt = 0\n+        existing_cnt = 0\n+        load_cnt = 0\n+        # There are lots of participants and we'd better use bulk_create\n+        # to accelerate deploy process\n+        old_participants = Participant.objects.all()\n+        old_participants_set = set()\n+        for old_participant in old_participants:\n+            old_participants_set.add(old_participant.login)\n+\n+        new_participants = []\n+        for key, participant in self.participants.items():\n+            # if it is an old participant, we skip it\n+            if participant['login'] in old_participants_set:\n+                self.logger.debug('participant %s exists'\n+                                  % participant['login'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('participant %s is new'\n+                                  % participant['login'])\n+                new_participants.append(\n+                    Participant(login=participant['login']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Participant.objects.bulk_create(new_participants)\n+\n+        # load all participants again (old + new)\n+        all_participants = Participant.objects.all()\n+\n+        for p in all_participants:\n+            if self.participants.get(p.login):\n+                # participants recently active\n+                participant = self.participants[p.login]\n+                p.name = participant['name']\n+                # save into memory\n+                self.participants[p.login] = p\n+            else:\n+                # participants recently inactive\n+                # they are not in self.participants, but their ranks need\n+                # update, so we also save them in memory\n+                self.participants[p.login] = p\n+                load_cnt += 1\n+\n+        self.logger.info('number of newly created participants: %d '\n+                         'number of existing active participants: %d '\n+                         'number of existing inactive participants: %d'\n+                         % (created_cnt, existing_cnt, load_cnt))\n+\n+        self.logger.info('load participants into memory done, '\n+                         'total number = %d'\n+                         % (created_cnt + existing_cnt + load_cnt))\n+\n+    def __load_comments_to_memory(self):\n+        \"\"\"\n+        Load reviews into memory\n+        a) create Review objects if not exist in database\n+        b) fetch history data if exist in database\n+        \"\"\"\n+        self.logger.info('get or create reviews')\n+        created_cnt = 0\n+        existing_cnt = 0\n+        # There are lots of comments and we have to use bulk_create\n+        # to accelerate deploy process\n+        old_comments = Comment.objects.all()\n+        old_commments_set = set()\n+        for old_comment in old_comments:\n+            old_commments_set.add(old_comment.id)\n+\n+        new_comments = []\n+        for key, comment in self.comments.items():\n+            # if it is an old comment, we skip it\n+            if comment['id'] in old_commments_set:\n+                self.logger.debug('review comment %s exists'\n+                                  % comment['id'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('review comment %s is new'\n+                                  % comment['id'])\n+                new_comments.append(\n+                    Comment(id=comment['id']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Comment.objects.bulk_create(new_comments)\n+\n+        # load all comments again (old + new)\n+        all_comments = Comment.objects.all()\n+\n+        for c in all_comments:\n+            if not self.comments.get(c.id):\n+                # no need to load history comments\n+                continue\n+            comment = self.comments[c.id]\n+            c.body = comment['bodyText']\n+            c.diff = comment['diffHunk']\n+            c.created_at = comment['createdAt']\n+            c.last_edited_at = comment['lastEditedAt']\n+            login = comment['author']['login']\n+            if login:\n+                c.author = self.participants[login]\n+\n+            # check comment update after meta-review\n+            self.__check_comment_update(c.last_edited_at, c)\n+\n+            # save into memory\n+            self.comments[c.id] = c\n+\n+        self.logger.info('number of newly created comment objects: %d '\n+                         'number of existing comment objects: %d'\n+                         % (created_cnt, existing_cnt))\n+\n+    def __load_reactions_to_memory(self):\n+        \"\"\"\n+        Load reactions into memory\n+        a) create Reaction objects if not exist in database\n+        b) fetch history data if exist in database\n+        \"\"\"\n+        self.logger.info('get or create reactions')\n+        created_cnt = 0\n+        existing_cnt = 0\n+\n+        # There are lots of reactions and we have to use bulk_create\n+        # to accelerate deploy process\n+        old_reactions = Reaction.objects.all()\n+        old_reactions_set = set()\n+        for old_reaction in old_reactions:\n+            old_reactions_set.add(old_reaction.id)\n+\n+        new_reactions = []\n+        for key, reaction in self.reactions.items():\n+            # if it is an old reaction, we skip it\n+            if reaction['id'] in old_reactions_set:\n+                self.logger.debug('reaction %s exists' % reaction['id'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('reaction %s is new' % reaction['id'])\n+                new_reactions.append(\n+                    Reaction(id=reaction['id']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Reaction.objects.bulk_create(new_reactions)\n+\n+        # laod all reactions again (old + new)\n+        all_reactions = Reaction.objects.all()\n+\n+        for r in all_reactions:\n+            if not self.reactions.get(r.id):\n+                # no need to load history reactions\n+                continue\n+            reaction = self.reactions[r.id]\n+            r.created_at = reaction['createdAt']\n+            r.content = reaction['content']\n+            giver_login = reaction['user']['login']\n+            if giver_login:\n+                r.giver = self.participants[giver_login]\n+            receiver_login = reaction['receiver']['login']\n+            if receiver_login:\n+                r.receiver = self.participants[receiver_login]\n+            comment_id = reaction['comment_id']\n+            r.review = self.comments[comment_id]\n+\n+            # save into memory\n+            self.reactions[r.id] = r\n+\n+        self.logger.info('number of newly created reaction objects: %d '\n+                         'number of existing reaction objects: %d'\n+                         % (created_cnt, existing_cnt))\n+\n+    def __update_time(self):\n+        \"\"\"\n+        Update last_active_at attribute of each participant\n+\n+        Note this does not accurately reflect the last time they were\n+        active in the community.\n+\n+        First, it relies on the accuracy of issues.json fetched from\n+        gh-board repo.\n+\n+        Second, this field should instead be interpreted as 'the last\n+        time the participant had impact on the meta-review system'. This\n+        is the last time among three things: the last time they created/edited\n+        a comment, the last time they did a meta-review, the last time\n+        their review received a meta-review.\n+        \"\"\"\n+        self.logger.info('start updating last active time of all participants')\n+        for key, participant in self.participants.items():\n+            old_active_time = participant.last_active_at\n+\n+            # check last time they created/edited a comment\n+            for comment in participant.comment_set.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = comment.created_at\n+                if comment.created_at > participant.last_active_at:\n+                    participant.last_active_at = comment.created_at\n+                if (comment.last_edited_at and\n+                        comment.last_edited_at > participant.last_active_at):\n+                    participant.last_active_at = comment.last_edited_at\n+\n+            # check last time they did a meta-review\n+            for reaction in participant.give.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            # check last time they received a meta-review\n+            for reaction in participant.receive.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            if participant.last_active_at != old_active_time:\n+                self.logger.debug('%s last active time changed from %s to %s'\n+                                  % (participant.login, old_active_time,\n+                                     participant.last_active_at))\n+\n+    def __update_score(self):\n+        \"\"\"\n+        Calculate and update score of each participant using\n+        the following formula:\n+\n+        Define:\n+\n+        P1 = total points (weighted) of THUMBS_UP a person gets for all\n+             reviews he did.\n+        P2 = total number of THUMBS_UP a person gives to other\n+             people for their reviews.\n+        N1 = total points (weighted) of THUMBS_DOWN a person gets for all\n+             reviews he did.\n+        N2 = total number of THUMBS_DOWN a person gives to other people for\n+             their reviews.\n+\n+        Then final score, denote by S, is as follows:\n+\n+        S =  P1 - N1 + c1 * P2 + c2 * N2\n+\n+        where c1 = 0.05, c2 = 0.2. One will get at least 0.1 point for a\n+        positive reaction they received, so we want c1 be smaller than that.\n+        c2 is larger because people are reluctant to give negative reactions.\n+        In all, bonus points (P2 and N2) aim to encourage people to do\n+        meta-reviews, but we don't want them to dominate.\n+\n+        Also update score of each review comment.\n+        \"\"\"\n+        self.logger.info('update scores of all participants')\n+        # coefficients of the formula\n+        c1, c2 = 0.05, 0.2\n+        for key, participant in self.participants.items():\n+            # parameters to be used in the formula\n+            p1, p2, n1, n2 = 0, 0, 0, 0\n+            # number of positive/negative reactions received\n+            pos_cnt, neg_cnt = 0, 0\n+\n+            # get reactions received\n+            reactions_in = participant.receive.all()\n+            for reaction in reactions_in:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, receiver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                # get weight factor of the reaction giver\n+                weight_factor = reaction.giver.weight_factor\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction received is %s, positive'\n+                                      % reaction.content)\n+                    p1 += weight_factor\n+                    pos_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.pos += 1\n+                    reaction.review.weighted_pos += weight_factor\n+                    reaction.review.score += weight_factor\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction received is %s, negative'\n+                                      % reaction.content)\n+                    n1 += weight_factor\n+                    neg_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.neg += 1\n+                    reaction.review.weighted_neg += weight_factor\n+                    reaction.review.score -= weight_factor\n+                else:\n+                    self.logger.debug('reaction received is %s, ignore'\n+                                      % reaction.content)\n+\n+            # get reactions give away\n+            reactions_out = participant.give.all()\n+            for reaction in reactions_out:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, giver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction give away is %s, positive'\n+                                      % reaction.content)\n+                    p2 += 1\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction give away is %s, negative'\n+                                      % reaction.content)\n+                    n2 += 1\n+                else:\n+                    self.logger.debug('reaction give away is %s, ignore'\n+                                      % reaction.content)\n+\n+            # update information\n+            participant.pos_in += pos_cnt\n+            participant.weighted_pos_in += p1\n+            participant.pos_out += p2\n+            participant.neg_in += neg_cnt\n+            participant.weighted_neg_in += n1\n+            participant.neg_out += n2\n+            self.logger.debug('update %s info, pos_in += %d, '\n+                              'weighted_pos_in += %.3f, pos_out += %d, '\n+                              'neg_in += %d, weighted_neg_in += %.3f, '\n+                              'neg_out += %d'\n+                              % (participant.login, pos_cnt, p1, p2,\n+                                 neg_cnt, n1, n2))\n+\n+            # update score\n+            s = p1 - n1 + c1 * p2 + c2 * n2\n+            self.logger.debug('update %s score, before: %.3f, after: %.3f'\n+                              % (participant.login, participant.score,\n+                                 participant.score + s))\n+            participant.score += s\n+\n+    def __update_rankings(self):\n+        \"\"\"\n+        Calculate and update rankings based on scores by making\n+        use of Django built-in sorting method\n+        \"\"\"\n+        self.logger.info('update rankings of all participants')\n+\n+        # save participants data into database first\n+        self.__dump_participants_to_database()\n+\n+        # make use of built-in order_by method to sort participants\n+        participants_all = Participant.objects.order_by('-score', '-pos_in')\n+        rank = 0\n+        last_score = -float('inf')\n+        for participant in participants_all:\n+            if rank == 0 or last_score != participant.score:\n+                rank += 1\n+                last_score = participant.score\n+\n+            # update trend = rank (last time) - rank (this time)\n+            if participant.rank:\n+                if participant.trend:\n+                    self.logger.debug('update %s trend, before: %d, after: %d'\n+                                      % (participant.login, participant.trend,\n+                                         participant.rank - rank))\n+                else:\n+                    # if last time was the first time they get a rank, then\n+                    # they don't have trend last time\n+                    self.logger.debug('update %s trend, before: N/A, after: %d'\n+                                      % (participant.login,\n+                                         participant.rank - rank))\n+                participant.trend = participant.rank - rank\n+            else:\n+                self.logger.debug('%s has no rank before, thus no trend'\n+                                  % participant.login)\n+\n+            # update rank\n+            if participant.rank:\n+                self.logger.debug('update %s rank, before: %d, after: %d'\n+                                  % (participant.login, participant.rank, rank))\n+            else:\n+                self.logger.debug('update %s rank, before: N/A, after: %d'\n+                                  % (participant.login, rank))\n+            participant.rank = rank\n+\n+            # save in memory\n+            self.participants[participant.login] = participant\n+\n+    def __update_weight_factors(self):\n+        \"\"\"\n+        Based on history data and the current iteration, recalculate weight\n+        factors (to be used in the next iteration)\n+\n+        The higher score a person has, the more impacts he has, thus his\n+        meta-reviews are more valuable.\n+\n+        For example, in a previous iteration, Alice got 2 marks, Bob got\n+        0.8 marks and Charlie got 10 marks. The calculation demo would\n+        be as follows:\n+\n+        >>> c = [2, 0.8, 10]\n+        >>> max_score = float(max(c))\n+        >>> result = [i / max_score for i in c]\n+        >>> print(result)\n+        [0.2, 0.08, 1.0]\n+        >>> result_adjust = [i * 0.9 + 0.1 for i in result]  # adjust\n+        >>> result_rounded = [round(i, 3) for i in result_adjust]\n+        >>> print(result_rounded)\n+        [0.28, 0.172, 1.0]\n+\n+        Anyone who gets negative marks from previous run will have weight\n+        factor of 0.\n+\n+        To conclude, the weight factor is a float number ranging from 0 to 1.\n+        \"\"\"\n+        max_score = 1.0\n+        # find max score\n+        for key, participant in self.participants.items():\n+            if participant.score > max_score:\n+                max_score = float(participant.score)\n+\n+        # calculate weight factors\n+        for key, participant in self.participants.items():\n+            if participant.score < 0:\n+                participant.weight_factor = 0\n+            else:\n+                participant.weight_factor = participant.score / max_score\n+                participant.weight_factor *= 0.9\n+                participant.weight_factor += 0.1\n+\n+    def __dump_participants_to_database(self):\n+        \"\"\"\n+        Dump participants data into Django database\n+        \"\"\"\n+        self.logger.info('dump participants data into database')\n+        participants = []\n+        for key, participant in self.participants.items():\n+            participants.append(participant)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all participants\n+            Participant.objects.all().delete()\n+            # bulk create all participants\n+            Participant.objects.bulk_create(participants)\n+        except Exception as ex:\n+            self.logger.error(\n+                '\\n\\nSomething went wrong saving participants: %s' % ex)\n+\n+    def __dump_comments_to_database(self):\n+        \"\"\"\n+        Dump comments data into Django database\n+        \"\"\"\n+        self.logger.info('dump review comments data into database')\n+        comments = []\n+        for key, comment in self.comments.items():\n+            comments.append(comment)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all comments\n+            Comment.objects.all().delete()\n+            # bulk create all comments\n+            Comment.objects.bulk_create(comments)\n+        except Exception as ex:\n+            self.logger.error(\n+                '\\n\\nSomething went wrong saving comments: %s' % ex)\n+\n+    def __dump_reactions_to_database(self):\n+        \"\"\"\n+        Dump reactions data into Django database\n+        \"\"\"\n+        self.logger.info('dump reactions data into database')\n+        reactions = []\n+        for key, reaction in self.reactions.items():\n+            reactions.append(reaction)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all reactions\n+            Reaction.objects.all().delete()\n+            # bulk create all reactions\n+            Reaction.objects.bulk_create(reactions)\n+        except Exception as ex:\n+            self.logger.error(\n+                '\\n\\nSomething went wrong saving reactions: %s' % ex)\n+\n+\n+def handle():\n+    # load data from gh-board repo\n+    org_name = get_org_name()\n+\n+    # URL to grab all issues from\n+    issues_url = 'http://' + org_name + '.github.io/gh-board/issues.json'\n+\n+    logger = logging.getLogger(__name__)\n+\n+    try:\n+        content = requests.get(issues_url, timeout=10)\n+    except ReadTimeout:\n+        logger.warning('Get issues from ' + issues_url +\n+                       ' failed. Try backup url.')\n+        issues_url = 'https://' + org_name + '-gh-board.netlify.com/issues.json'\n+        content = requests.get(issues_url, timeout=10)\n+\n+    try:\n+        parsed_json = content.json()\n+    except json.JSONDecodeError:\n+        logger.error('JSON decode error')\n+\n+    handler = MetaReviewHandler(parsed_json['issues'], timezone.now())\n+    handler.handle()", "created_at": "2018-06-09T06:32:00Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTQzMw==", "fields": {"body": "Rather make a header with \"Usage\", instead of this sentence.\n+\nTypo in Debgger (please be careful with typos, you make them quite often, I don't want to fix typos all the time)", "diff": "@@ -0,0 +1,52 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+Debugging Interface will help user to debug the Bear code and move through\n+it using ``pdb`` Interface\n+\n+There are two way to invoke the coala's Debgger", "created_at": "2018-06-09T12:21:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTU2Mw==", "fields": {"body": "Very important: It will also debug dependency bears!", "diff": "@@ -0,0 +1,52 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+Debugging Interface will help user to debug the Bear code and move through\n+it using ``pdb`` Interface\n+\n+There are two way to invoke the coala's Debgger\n+\n+Command Line Interface\n+----------------------\n+\n+User can specify the bear they want to debug using ``--debug-bears`` i.e.,\n+\n+.. code:: shell\n+\n+    $ coala -b PEP8Bear,MypyBear -f <filename> --debug-bears PEP8Bear\n+\n+If bear name is not specified in ``--debug-bears`` argument then it will by\n+default debug all the bears passed through ``--bears`` or ``-b`` argument\n+**i.e.,**", "created_at": "2018-06-09T12:25:46Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTUxNA==", "fields": {"body": "Actually I would propose you write MyBear, and give a snippet of a small and simple bear. Nobody external wants to debug our bears as they are usually quite complex.", "diff": "@@ -0,0 +1,52 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+Debugging Interface will help user to debug the Bear code and move through\n+it using ``pdb`` Interface\n+\n+There are two way to invoke the coala's Debgger\n+\n+Command Line Interface\n+----------------------\n+\n+User can specify the bear they want to debug using ``--debug-bears`` i.e.,\n+\n+.. code:: shell\n+\n+    $ coala -b PEP8Bear,MypyBear -f <filename> --debug-bears PEP8Bear", "created_at": "2018-06-09T12:23:56Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIzODI2OA==", "fields": {"body": "Consider breaking this down to three files, one for handlers, one for all the update functions and one for all the loader functions ?", "diff": "@@ -0,0 +1,657 @@\n+from dateutil import parser\n+import json\n+import logging\n+\n+from django.utils import timezone\n+import requests\n+\n+from community.git import get_org_name\n+from meta_review.models import Participant, Comment, Reaction\n+\n+\n+def parse_time(time):\n+    \"\"\"\n+    parse string to datetime\n+    :param time: a string represents time, e.g. 2018-05-09T11:19:26Z\n+    :return: an offset-aware datetime object\n+    \"\"\"\n+    if time is None:\n+        return None\n+\n+    return parser.parse(time)\n+\n+\n+class MetaReviewHandler:\n+    \"\"\"\n+    This is the class responsible for scraping provided information (reviews,\n+    reactions), processing them and dumping into Django database\n+    \"\"\"\n+\n+    def __init__(self, content, date):\n+        \"\"\"\n+        Constructs a new ``MetaReviewHandler``\n+\n+        :param content: Parsed JSON data\n+        :param date: The update date\n+        \"\"\"\n+        self.logger = logging.getLogger(__name__)\n+        self.logger.info('this package is alive')\n+\n+        self.date = date\n+\n+        # save comments in memory\n+        self.comments = dict()\n+        for issue in content:\n+            issue = issue['issue']\n+            if not issue.get('pullRequest'):\n+                continue\n+            for comment in issue['pullRequest']['comments']:\n+                # parse time\n+                comment['createdAt'] = parse_time(comment['createdAt'])\n+                comment['lastEditedAt'] = parse_time(comment['lastEditedAt'])\n+                self.comments[comment['id']] = comment\n+\n+        # save reactions in memory\n+        self.reactions = dict()\n+        for key, comment in self.comments.items():\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # record receiver\n+                reaction['receiver'] = {\n+                    'login': comment['author']['login']\n+                }\n+                # record comment id\n+                reaction['comment_id'] = comment['id']\n+                # parse time\n+                reaction['createdAt'] = parse_time(reaction['createdAt'])\n+                self.reactions[reaction['id']] = reaction\n+\n+        # save participants in memory\n+        self.participants = dict()\n+        for key, comment in self.comments.items():\n+            # get author of each comment\n+            author = comment['author']\n+\n+            # skip if user does not exist\n+            # this happens when account is deleted from GitHub\n+            if author['login']:\n+                self.participants[author['login']] = author\n+\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # get user of each reaction\n+                user = reaction['user']\n+\n+                # skip if user does not exist\n+                if author['login']:\n+                    self.participants[user['login']] = user\n+\n+    def handle(self):\n+        \"\"\"\n+        Scrape data, process and store in database\n+        \"\"\"\n+        self.__load_participants_to_memory()\n+        self.__load_comments_to_memory()\n+        self.__load_reactions_to_memory()\n+\n+        self.__dump_participants_to_database()\n+        self.__dump_comments_to_database()\n+        self.__dump_reactions_to_database()\n+\n+        self.__update_score()\n+        self.__update_rankings()\n+        self.__update_weight_factors()\n+        self.__update_time()\n+\n+        self.__dump_participants_to_database()\n+        self.__dump_comments_to_database()\n+        self.__dump_reactions_to_database()\n+\n+        self.logger.info('Meta Review System finishes.')\n+\n+    def __check_comment_update(self, last_edited_at, comment):\n+        \"\"\"\n+        If reviewer updates their review comment after it has\n+        been meta-reviewed, they will be slightly punished.\n+\n+        :param last_edited_at: Datetime\n+        :param comment: Comment object\n+        \"\"\"\n+        author = comment.author\n+        reactions = comment.reaction_set.all()\n+\n+        need_punishment = False\n+\n+        # get reactions createdTime\n+        for reaction in reactions:\n+            if last_edited_at and last_edited_at > reaction.created_at:\n+                need_punishment = True\n+\n+        if need_punishment:\n+            self.logger.info('%s updates review comment after it has been'\n+                             'meta-reviewed. 0.5 point deducted for punishment.'\n+                             'comment id: %s' % (author.login, comment.id))\n+            author.punishment += 0.5\n+            author.score -= 0.5\n+\n+    def __load_participants_to_memory(self):\n+        \"\"\"\n+        Load participants into memory\n+        a) create Participant objects if not exist in database\n+           fetch history data if exist in database and also in memory\n+        b) fetch history data if exist in database but not in memory yet\n+        \"\"\"\n+        self.logger.info('get or create participants')\n+        created_cnt = 0\n+        existing_cnt = 0\n+        load_cnt = 0\n+        # There are lots of participants and we'd better use bulk_create\n+        # to accelerate deploy process\n+        old_participants = Participant.objects.all()\n+        old_participants_set = set()\n+        for old_participant in old_participants:\n+            old_participants_set.add(old_participant.login)\n+\n+        new_participants = []\n+        for key, participant in self.participants.items():\n+            # if it is an old participant, we skip it\n+            if participant['login'] in old_participants_set:\n+                self.logger.debug('participant %s exists'\n+                                  % participant['login'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('participant %s is new'\n+                                  % participant['login'])\n+                new_participants.append(\n+                    Participant(login=participant['login']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Participant.objects.bulk_create(new_participants)\n+\n+        # load all participants again (old + new)\n+        all_participants = Participant.objects.all()\n+\n+        for p in all_participants:\n+            if self.participants.get(p.login):\n+                # participants recently active\n+                participant = self.participants[p.login]\n+                p.name = participant['name']\n+                # save into memory\n+                self.participants[p.login] = p\n+            else:\n+                # participants recently inactive\n+                # they are not in self.participants, but their ranks need\n+                # update, so we also save them in memory\n+                self.participants[p.login] = p\n+                load_cnt += 1\n+\n+        self.logger.info('number of newly created participants: %d '\n+                         'number of existing active participants: %d '\n+                         'number of existing inactive participants: %d'\n+                         % (created_cnt, existing_cnt, load_cnt))\n+\n+        self.logger.info('load participants into memory done, '\n+                         'total number = %d'\n+                         % (created_cnt + existing_cnt + load_cnt))\n+\n+    def __load_comments_to_memory(self):\n+        \"\"\"\n+        Load reviews into memory\n+        a) create Review objects if not exist in database\n+        b) fetch history data if exist in database\n+        \"\"\"\n+        self.logger.info('get or create reviews')\n+        created_cnt = 0\n+        existing_cnt = 0\n+        # There are lots of comments and we have to use bulk_create\n+        # to accelerate deploy process\n+        old_comments = Comment.objects.all()\n+        old_commments_set = set()\n+        for old_comment in old_comments:\n+            old_commments_set.add(old_comment.id)\n+\n+        new_comments = []\n+        for key, comment in self.comments.items():\n+            # if it is an old comment, we skip it\n+            if comment['id'] in old_commments_set:\n+                self.logger.debug('review comment %s exists'\n+                                  % comment['id'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('review comment %s is new'\n+                                  % comment['id'])\n+                new_comments.append(\n+                    Comment(id=comment['id']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Comment.objects.bulk_create(new_comments)\n+\n+        # load all comments again (old + new)\n+        all_comments = Comment.objects.all()\n+\n+        for c in all_comments:\n+            if not self.comments.get(c.id):\n+                # no need to load history comments\n+                continue\n+            comment = self.comments[c.id]\n+            c.body = comment['bodyText']\n+            c.diff = comment['diffHunk']\n+            c.created_at = comment['createdAt']\n+            c.last_edited_at = comment['lastEditedAt']\n+            login = comment['author']['login']\n+            if login:\n+                c.author = self.participants[login]\n+\n+            # check comment update after meta-review\n+            self.__check_comment_update(c.last_edited_at, c)\n+\n+            # save into memory\n+            self.comments[c.id] = c\n+\n+        self.logger.info('number of newly created comment objects: %d '\n+                         'number of existing comment objects: %d'\n+                         % (created_cnt, existing_cnt))\n+\n+    def __load_reactions_to_memory(self):\n+        \"\"\"\n+        Load reactions into memory\n+        a) create Reaction objects if not exist in database\n+        b) fetch history data if exist in database\n+        \"\"\"\n+        self.logger.info('get or create reactions')\n+        created_cnt = 0\n+        existing_cnt = 0\n+\n+        # There are lots of reactions and we have to use bulk_create\n+        # to accelerate deploy process\n+        old_reactions = Reaction.objects.all()\n+        old_reactions_set = set()\n+        for old_reaction in old_reactions:\n+            old_reactions_set.add(old_reaction.id)\n+\n+        new_reactions = []\n+        for key, reaction in self.reactions.items():\n+            # if it is an old reaction, we skip it\n+            if reaction['id'] in old_reactions_set:\n+                self.logger.debug('reaction %s exists' % reaction['id'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('reaction %s is new' % reaction['id'])\n+                new_reactions.append(\n+                    Reaction(id=reaction['id']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Reaction.objects.bulk_create(new_reactions)\n+\n+        # laod all reactions again (old + new)\n+        all_reactions = Reaction.objects.all()\n+\n+        for r in all_reactions:\n+            if not self.reactions.get(r.id):\n+                # no need to load history reactions\n+                continue\n+            reaction = self.reactions[r.id]\n+            r.created_at = reaction['createdAt']\n+            r.content = reaction['content']\n+            giver_login = reaction['user']['login']\n+            if giver_login:\n+                r.giver = self.participants[giver_login]\n+            receiver_login = reaction['receiver']['login']\n+            if receiver_login:\n+                r.receiver = self.participants[receiver_login]\n+            comment_id = reaction['comment_id']\n+            r.review = self.comments[comment_id]\n+\n+            # save into memory\n+            self.reactions[r.id] = r\n+\n+        self.logger.info('number of newly created reaction objects: %d '\n+                         'number of existing reaction objects: %d'\n+                         % (created_cnt, existing_cnt))\n+\n+    def __update_time(self):\n+        \"\"\"\n+        Update last_active_at attribute of each participant\n+\n+        Note this does not accurately reflect the last time they were\n+        active in the community.\n+\n+        First, it relies on the accuracy of issues.json fetched from\n+        gh-board repo.\n+\n+        Second, this field should instead be interpreted as 'the last\n+        time the participant had impact on the meta-review system'. This\n+        is the last time among three things: the last time they created/edited\n+        a comment, the last time they did a meta-review, the last time\n+        their review received a meta-review.\n+        \"\"\"\n+        self.logger.info('start updating last active time of all participants')\n+        for key, participant in self.participants.items():\n+            old_active_time = participant.last_active_at\n+\n+            # check last time they created/edited a comment\n+            for comment in participant.comment_set.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = comment.created_at\n+                if comment.created_at > participant.last_active_at:\n+                    participant.last_active_at = comment.created_at\n+                if (comment.last_edited_at and\n+                        comment.last_edited_at > participant.last_active_at):\n+                    participant.last_active_at = comment.last_edited_at\n+\n+            # check last time they did a meta-review\n+            for reaction in participant.give.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            # check last time they received a meta-review\n+            for reaction in participant.receive.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            if participant.last_active_at != old_active_time:\n+                self.logger.debug('%s last active time changed from %s to %s'\n+                                  % (participant.login, old_active_time,\n+                                     participant.last_active_at))\n+\n+    def __update_score(self):\n+        \"\"\"\n+        Calculate and update score of each participant using\n+        the following formula:\n+\n+        Define:\n+\n+        P1 = total points (weighted) of THUMBS_UP a person gets for all\n+             reviews he did.\n+        P2 = total number of THUMBS_UP a person gives to other\n+             people for their reviews.\n+        N1 = total points (weighted) of THUMBS_DOWN a person gets for all\n+             reviews he did.\n+        N2 = total number of THUMBS_DOWN a person gives to other people for\n+             their reviews.\n+\n+        Then final score, denote by S, is as follows:\n+\n+        S =  P1 - N1 + c1 * P2 + c2 * N2\n+\n+        where c1 = 0.05, c2 = 0.2. One will get at least 0.1 point for a\n+        positive reaction they received, so we want c1 be smaller than that.\n+        c2 is larger because people are reluctant to give negative reactions.\n+        In all, bonus points (P2 and N2) aim to encourage people to do\n+        meta-reviews, but we don't want them to dominate.\n+\n+        Also update score of each review comment.\n+        \"\"\"\n+        self.logger.info('update scores of all participants')\n+        # coefficients of the formula\n+        c1, c2 = 0.05, 0.2\n+        for key, participant in self.participants.items():\n+            # parameters to be used in the formula\n+            p1, p2, n1, n2 = 0, 0, 0, 0\n+            # number of positive/negative reactions received\n+            pos_cnt, neg_cnt = 0, 0\n+\n+            # get reactions received\n+            reactions_in = participant.receive.all()\n+            for reaction in reactions_in:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, receiver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                # get weight factor of the reaction giver\n+                weight_factor = reaction.giver.weight_factor\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction received is %s, positive'\n+                                      % reaction.content)\n+                    p1 += weight_factor\n+                    pos_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.pos += 1\n+                    reaction.review.weighted_pos += weight_factor\n+                    reaction.review.score += weight_factor\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction received is %s, negative'\n+                                      % reaction.content)\n+                    n1 += weight_factor\n+                    neg_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.neg += 1\n+                    reaction.review.weighted_neg += weight_factor\n+                    reaction.review.score -= weight_factor\n+                else:\n+                    self.logger.debug('reaction received is %s, ignore'\n+                                      % reaction.content)\n+\n+            # get reactions give away\n+            reactions_out = participant.give.all()\n+            for reaction in reactions_out:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, giver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction give away is %s, positive'\n+                                      % reaction.content)\n+                    p2 += 1\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction give away is %s, negative'\n+                                      % reaction.content)\n+                    n2 += 1\n+                else:\n+                    self.logger.debug('reaction give away is %s, ignore'\n+                                      % reaction.content)\n+\n+            # update information\n+            participant.pos_in += pos_cnt\n+            participant.weighted_pos_in += p1\n+            participant.pos_out += p2\n+            participant.neg_in += neg_cnt\n+            participant.weighted_neg_in += n1\n+            participant.neg_out += n2\n+            self.logger.debug('update %s info, pos_in += %d, '\n+                              'weighted_pos_in += %.3f, pos_out += %d, '\n+                              'neg_in += %d, weighted_neg_in += %.3f, '\n+                              'neg_out += %d'\n+                              % (participant.login, pos_cnt, p1, p2,\n+                                 neg_cnt, n1, n2))\n+\n+            # update score\n+            s = p1 - n1 + c1 * p2 + c2 * n2\n+            self.logger.debug('update %s score, before: %.3f, after: %.3f'\n+                              % (participant.login, participant.score,\n+                                 participant.score + s))\n+            participant.score += s\n+\n+    def __update_rankings(self):\n+        \"\"\"\n+        Calculate and update rankings based on scores by making\n+        use of Django built-in sorting method\n+        \"\"\"\n+        self.logger.info('update rankings of all participants')\n+\n+        # save participants data into database first\n+        self.__dump_participants_to_database()\n+\n+        # make use of built-in order_by method to sort participants\n+        participants_all = Participant.objects.order_by('-score', '-pos_in')\n+        rank = 0\n+        last_score = -float('inf')\n+        for participant in participants_all:\n+            if rank == 0 or last_score != participant.score:\n+                rank += 1\n+                last_score = participant.score\n+\n+            # update trend = rank (last time) - rank (this time)\n+            if participant.rank:\n+                if participant.trend:\n+                    self.logger.debug('update %s trend, before: %d, after: %d'\n+                                      % (participant.login, participant.trend,\n+                                         participant.rank - rank))\n+                else:\n+                    # if last time was the first time they get a rank, then\n+                    # they don't have trend last time\n+                    self.logger.debug('update %s trend, before: N/A, after: %d'\n+                                      % (participant.login,\n+                                         participant.rank - rank))\n+                participant.trend = participant.rank - rank\n+            else:\n+                self.logger.debug('%s has no rank before, thus no trend'\n+                                  % participant.login)\n+\n+            # update rank\n+            if participant.rank:\n+                self.logger.debug('update %s rank, before: %d, after: %d'\n+                                  % (participant.login, participant.rank, rank))\n+            else:\n+                self.logger.debug('update %s rank, before: N/A, after: %d'\n+                                  % (participant.login, rank))\n+            participant.rank = rank\n+\n+            # save in memory\n+            self.participants[participant.login] = participant\n+\n+    def __update_weight_factors(self):\n+        \"\"\"\n+        Based on history data and the current iteration, recalculate weight\n+        factors (to be used in the next iteration)\n+\n+        The higher score a person has, the more impacts he has, thus his\n+        meta-reviews are more valuable.\n+\n+        For example, in a previous iteration, Alice got 2 marks, Bob got\n+        0.8 marks and Charlie got 10 marks. The calculation demo would\n+        be as follows:\n+\n+        >>> c = [2, 0.8, 10]\n+        >>> max_score = float(max(c))\n+        >>> result = [i / max_score for i in c]\n+        >>> print(result)\n+        [0.2, 0.08, 1.0]\n+        >>> result_adjust = [i * 0.9 + 0.1 for i in result]  # adjust\n+        >>> result_rounded = [round(i, 3) for i in result_adjust]\n+        >>> print(result_rounded)\n+        [0.28, 0.172, 1.0]\n+\n+        Anyone who gets negative marks from previous run will have weight\n+        factor of 0.\n+\n+        To conclude, the weight factor is a float number ranging from 0 to 1.\n+        \"\"\"\n+        max_score = 1.0\n+        # find max score\n+        for key, participant in self.participants.items():\n+            if participant.score > max_score:\n+                max_score = float(participant.score)\n+\n+        # calculate weight factors\n+        for key, participant in self.participants.items():\n+            if participant.score < 0:\n+                participant.weight_factor = 0\n+            else:\n+                participant.weight_factor = participant.score / max_score\n+                participant.weight_factor *= 0.9\n+                participant.weight_factor += 0.1\n+\n+    def __dump_participants_to_database(self):\n+        \"\"\"\n+        Dump participants data into Django database\n+        \"\"\"\n+        self.logger.info('dump participants data into database')\n+        participants = []\n+        for key, participant in self.participants.items():\n+            participants.append(participant)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all participants\n+            Participant.objects.all().delete()\n+            # bulk create all participants\n+            Participant.objects.bulk_create(participants)\n+        except Exception as ex:\n+            self.logger.error(\n+                'Something went wrong saving participants: %s' % ex)\n+\n+    def __dump_comments_to_database(self):\n+        \"\"\"\n+        Dump comments data into Django database\n+        \"\"\"\n+        self.logger.info('dump review comments data into database')\n+        comments = []\n+        for key, comment in self.comments.items():\n+            comments.append(comment)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all comments\n+            Comment.objects.all().delete()\n+            # bulk create all comments\n+            Comment.objects.bulk_create(comments)\n+        except Exception as ex:\n+            self.logger.error(\n+                'Something went wrong saving comments: %s' % ex)\n+\n+    def __dump_reactions_to_database(self):\n+        \"\"\"\n+        Dump reactions data into Django database\n+        \"\"\"\n+        self.logger.info('dump reactions data into database')\n+        reactions = []\n+        for key, reaction in self.reactions.items():\n+            reactions.append(reaction)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all reactions\n+            Reaction.objects.all().delete()\n+            # bulk create all reactions\n+            Reaction.objects.bulk_create(reactions)\n+        except Exception as ex:\n+            self.logger.error(\n+                'Something went wrong saving reactions: %s' % ex)\n+\n+\n+def handle():\n+    # load data from gh-board repo\n+    org_name = get_org_name()\n+\n+    # URL to grab all issues from\n+    issues_url = 'http://' + org_name + '.github.io/gh-board/issues.json'\n+\n+    logger = logging.getLogger(__name__)\n+\n+    try:\n+        content = requests.get(issues_url, timeout=10)\n+        content.raise_for_status()\n+    except Exception as ex:\n+        logger.warning('Get issues from %s failed: %s Try backup url'\n+                       % (issues_url, ex))\n+        issues_url = 'https://' + org_name + '-gh-board.netlify.com/issues.json'\n+        try:\n+            content = requests.get(issues_url, timeout=10)\n+            content.raise_for_status()\n+        except Exception as ex:\n+            logger.error('Get issues from %s failed: %s'\n+                         % (issues_url, ex))\n+\n+    try:\n+        parsed_json = content.json()\n+        handler = MetaReviewHandler(parsed_json['issues'], timezone.now())\n+        handler.handle()\n+    except json.JSONDecodeError as ex:\n+        logger.error('JSON decode error: %s' % ex)", "created_at": "2018-06-09T20:30:17Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTQ0NA==", "fields": {"body": "Use four level indentation, and the closing brace should be in same column as h in headers", "diff": "@@ -0,0 +1,46 @@\n+import requests\n+import json\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Ban(BotPlugin):\n+    \"\"\"\n+    Ban from all rooms at once..\n+    \"\"\"\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        sinner = args[0]\n+\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {", "created_at": "2018-06-12T14:17:23Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTg1Ng==", "fields": {"body": "Use this style please\na = [\n    {...},\n    {...},\n...\n]", "diff": "@@ -0,0 +1,32 @@\n+import os\n+import logging\n+import unittest\n+from unittest.mock import Mock, MagicMock, PropertyMock, patch\n+\n+from errbot.backends.test import TestBot\n+\n+import plugins.ban\n+\n+from tests.helper import plugin_testbot\n+\n+\n+class TestBan(unittest.TestCase):\n+\n+    @patch('plugins.ban.requests')\n+    @patch('plugins.ban.json')\n+    def test_ban_cmd(self, mockjson, mockreq):\n+        ban, testbot = plugin_testbot(plugins.ban.Ban, logging.ERROR)\n+        ban.activate()\n+\n+        ban.bot_config.ROOMS_TO_JOIN = ('coala/coala', 'coala/coala-bears')\n+        ban.bot_config.BOT_IDENTITY['token'] = 'mocked?'\n+\n+        fake_room_data = [{'id': '130', 'uri': 'coala/coala'},", "created_at": "2018-06-12T14:18:27Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMjIwMA==", "fields": {"body": "\"score people\" is a bit off-putting, when simplified like that.\nwe use that information to  ..\n\nimprove our process,\nimprove the quality of reviews being done.\n\netc\nWe are giving a score to their reviews.", "diff": "@@ -0,0 +1,140 @@\n+Meta-Reviewing\n+==============\n+\n+This document is a guide to coala's meta-review process.\n+\n+What is Meta-review?\n+--------------------\n+\n+People respond to review comments on pull requests by giving feedback. Emoji\n+make it much easier to give and receive feedback without a long comment thread.\n+Those emoji are called\n+`reactions <https://developer.github.com/v4/enum/reactioncontent/>`__ on GitHub\n+or `award emoji <https://docs.gitlab.com/ee/user/award_emojis.html>`__ on GitLab.\n+They are used by people to publicly express their feelings about review\n+comments, which provides feedback to comment authors and all other members.\n+\n+There are 6 types of reactions on GitHub:\n+\n+============  =============  =======  =====\n+ Name         Markdown       Unicode  Emoji\n+============  =============  =======  =====\n+ THUMBS_UP    ``:+1:``       U+1F44D  \ud83d\udc4d\n+ THUMBS_DOWN  ``:-1:``       U+1F44E  \ud83d\udc4e\n+ LAUGH        ``:smile:``    U+1F604  \ud83d\ude04\n+ HOORAY       ``:tada:``     U+1F389  \ud83c\udf89\n+ CONFUSED     ``:confused``  U+1F615  \ud83d\ude15\n+ HEART        ``:heart:``    U+FE0F   \u2764\ufe0f\n+============  =============  =======  =====\n+\n+These reactions are reviews to reviews, thus we call them meta-reviews. To\n+encourage people to do meta-reviews, we build a meta-review system, which\n+collects reactions, analyze them, and use that information to score people.", "created_at": "2018-06-12T11:25:51Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMjcwMA==", "fields": {"body": "\"on GitHub\"\nwell we want meta-review to be done on GitLab to.\nPerhaps instead note somewhere that only GitHub is being analysed at the moment.\nThis should also include the very important information about where people should put their PR review comments in order to be meta-reviewable due to limitations on GitHub.  i.e. PR approval comments not being meta-reviewable.  And any other usage best-practise we have found out.\nMaybe some of this should be in the Review guide, and/or links between them.", "diff": "@@ -0,0 +1,140 @@\n+Meta-Reviewing\n+==============\n+\n+This document is a guide to coala's meta-review process.\n+\n+What is Meta-review?\n+--------------------\n+\n+People respond to review comments on pull requests by giving feedback. Emoji\n+make it much easier to give and receive feedback without a long comment thread.\n+Those emoji are called\n+`reactions <https://developer.github.com/v4/enum/reactioncontent/>`__ on GitHub\n+or `award emoji <https://docs.gitlab.com/ee/user/award_emojis.html>`__ on GitLab.\n+They are used by people to publicly express their feelings about review\n+comments, which provides feedback to comment authors and all other members.\n+\n+There are 6 types of reactions on GitHub:\n+\n+============  =============  =======  =====\n+ Name         Markdown       Unicode  Emoji\n+============  =============  =======  =====\n+ THUMBS_UP    ``:+1:``       U+1F44D  \ud83d\udc4d\n+ THUMBS_DOWN  ``:-1:``       U+1F44E  \ud83d\udc4e\n+ LAUGH        ``:smile:``    U+1F604  \ud83d\ude04\n+ HOORAY       ``:tada:``     U+1F389  \ud83c\udf89\n+ CONFUSED     ``:confused``  U+1F615  \ud83d\ude15\n+ HEART        ``:heart:``    U+FE0F   \u2764\ufe0f\n+============  =============  =======  =====\n+\n+These reactions are reviews to reviews, thus we call them meta-reviews. To\n+encourage people to do meta-reviews, we build a meta-review system, which\n+collects reactions, analyze them, and use that information to score people.\n+After scoring, a ranking list is shown on coala community website.\n+\n+At the moment, only THUMBS_UP and THUMBS_DOWN are collected and analyzed,\n+as they are most commonly used and express strong and clear feelings:\n+THUMBS_UP means the review comment is well-written and helpful, while\n+THUMBS_DOWN means the review comment is misleading, or even worse, violates\n+`coala Community Code of Conduct <https://github.com/coala/cEPs/blob/master/cEP-0006.md>`__.\n+\n+Meta-review Process\n+-------------------\n+\n+The meta-review process for coala is as follows:\n+\n+1. Reviewers create their reviews.\n+\n+2. Anyone especially author of the pull request can do meta-review (THUMBS_UP,\n+   THUMBS_DOWN) via reactions on GitHub.", "created_at": "2018-06-12T11:28:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMzA3MQ==", "fields": {"body": "as it will probably change, it is better for this document to not include the score calculation details; links to the .py code and the cEP are much more useful and much more maintainable.\nIf your detailed explanation here is better than in the cEP, update the cEP ;-)", "diff": "@@ -0,0 +1,140 @@\n+Meta-Reviewing\n+==============\n+\n+This document is a guide to coala's meta-review process.\n+\n+What is Meta-review?\n+--------------------\n+\n+People respond to review comments on pull requests by giving feedback. Emoji\n+make it much easier to give and receive feedback without a long comment thread.\n+Those emoji are called\n+`reactions <https://developer.github.com/v4/enum/reactioncontent/>`__ on GitHub\n+or `award emoji <https://docs.gitlab.com/ee/user/award_emojis.html>`__ on GitLab.\n+They are used by people to publicly express their feelings about review\n+comments, which provides feedback to comment authors and all other members.\n+\n+There are 6 types of reactions on GitHub:\n+\n+============  =============  =======  =====\n+ Name         Markdown       Unicode  Emoji\n+============  =============  =======  =====\n+ THUMBS_UP    ``:+1:``       U+1F44D  \ud83d\udc4d\n+ THUMBS_DOWN  ``:-1:``       U+1F44E  \ud83d\udc4e\n+ LAUGH        ``:smile:``    U+1F604  \ud83d\ude04\n+ HOORAY       ``:tada:``     U+1F389  \ud83c\udf89\n+ CONFUSED     ``:confused``  U+1F615  \ud83d\ude15\n+ HEART        ``:heart:``    U+FE0F   \u2764\ufe0f\n+============  =============  =======  =====\n+\n+These reactions are reviews to reviews, thus we call them meta-reviews. To\n+encourage people to do meta-reviews, we build a meta-review system, which\n+collects reactions, analyze them, and use that information to score people.\n+After scoring, a ranking list is shown on coala community website.\n+\n+At the moment, only THUMBS_UP and THUMBS_DOWN are collected and analyzed,\n+as they are most commonly used and express strong and clear feelings:\n+THUMBS_UP means the review comment is well-written and helpful, while\n+THUMBS_DOWN means the review comment is misleading, or even worse, violates\n+`coala Community Code of Conduct <https://github.com/coala/cEPs/blob/master/cEP-0006.md>`__.\n+\n+Meta-review Process\n+-------------------\n+\n+The meta-review process for coala is as follows:\n+\n+1. Reviewers create their reviews.\n+\n+2. Anyone especially author of the pull request can do meta-review (THUMBS_UP,\n+   THUMBS_DOWN) via reactions on GitHub.\n+\n+3. Meta-review information will be collected and analyzed automatically:\n+\n+   * Meta-reviewers will be given bonus points to encourage such behaviour\n+\n+   * Meta-reviewees will be given positive points (on receiving THUMBS_UP) or\n+     negative points (on receiving THUMBS_DOWN). Those points are weighted\n+     according to score of meta-reviewers. Those who have higher score in\n+     the meta-review system will have more impacts on others, so please do\n+     meta-reviews carefully.\n+\n+.. note::\n+\n+    Don't edit or even delete your review after it has been meta-reviewed.\n+    If you do that, you are destroying feedback from the community. This\n+    is considered as an improper behaviour and a negative score will be\n+    given to you.\n+\n+Automated Scoring Process\n+-------------------------\n+\n+A complete ranking list can be found on\n+`Meta-review score ranking list <https://deploy-preview-143--coala-community.netlify.com/meta-review/>`__.\n+Score is based on number of positive (THUMBS_UP) & negative (THUMBS_DOWN)\n+reactions one receives, and number of positive & negative reactions one gives\n+away. Calculation details can be found in\n+`meta_review/handler.py <https://github.com/li-boxuan/community/blob/2143fbcf925beb1ffe5ab1d9dd4d177e827dece2/meta_review/handler.py>`__.\n+\n+Briefly, score is calculated based on formulas as follows:", "created_at": "2018-06-12T11:30:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczMDUyNg==", "fields": {"body": "this should have a space after the comma before the next word on the next line.", "diff": "@@ -391,5 +392,7 @@ class docs:\n         Choosing a preferred quotation and using it everywhere (if possible).\n         \"\"\"\n     preferred_quotation = Taste[str](\n-        'Represents the preferred quotation',\n-        ('\\'', '\"'), default='\\'')\n+        'Represents the preferred quotation marks.'\n+        'It ensures that every string contains the selected style of quotes,'", "created_at": "2018-06-12T13:09:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MTkwMg==", "fields": {"body": "-->\nlist(relative_recursive_glob(self._path, '**'))[1:]\nwhen we are on it, we can again use a tuple ;)", "diff": "@@ -0,0 +1,89 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path', 'timestamp')\n+class Directory:\n+    \"\"\"\n+    The `Directory` class acts as an interface to directories and\n+    provides useful information about them such as:\n+\n+        * The directory path.\n+        * The parent directory path.\n+        * The last modified timestamp of the directory.\n+        * The number of children contained inside a directory.\n+\n+    >>> import os\n+    >>> d = Directory('tests/io/DirectoryTestDir/')\n+\n+    Get the number of files and sub-directories at the top level:\n+\n+    >>> len(d.get_children())\n+    3\n+\n+    Get the number of all the files and sub-directories recursively:\n+    >>> len(d.get_children_recursively())\n+    5\n+\n+    Get the path of the `Directory` object:\n+\n+    >>> os.path.relpath(d.path).endswith('DirectoryTestDir')\n+    True\n+\n+    Get the parent directory:\n+\n+    >>> os.path.relpath(d.parent).endswith('io')\n+    True\n+\n+    Get the last modified timestamp of the directory:\n+\n+    >>> d.timestamp == os.path.getmtime(d.path)\n+    True\n+    \"\"\"\n+\n+    def __init__(self, path):\n+        self._path = os.path.abspath(path)\n+        self._parent = os.path.abspath(os.path.dirname(self._path))\n+        self._timestamp = os.path.getmtime(self._path)\n+\n+    def get_children(self):\n+        \"\"\"\n+        :return:\n+            A list of all the files and sub-directories cotained at the\n+            top level of the directory.\n+        \"\"\"\n+        return os.listdir(self._path)\n+\n+    def get_children_recursively(self):\n+        \"\"\"\n+        :return:\n+            A list of all the files and sub-directories contained\n+            inside a directory.\n+        \"\"\"\n+        return [e for e in relative_recursive_glob(self._path, '**')][1:]", "created_at": "2018-06-12T20:43:01Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MjgwMA==", "fields": {"body": "double backticks, it's RST ;)", "diff": "@@ -0,0 +1,89 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path', 'timestamp')\n+class Directory:\n+    \"\"\"\n+    The `Directory` class acts as an interface to directories and", "created_at": "2018-06-12T20:45:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MzE1MQ==", "fields": {"body": "Not just the number, the children itself ;)\n--> \"The children contained inside a the directory\"", "diff": "@@ -0,0 +1,89 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path', 'timestamp')\n+class Directory:\n+    \"\"\"\n+    The `Directory` class acts as an interface to directories and\n+    provides useful information about them such as:\n+\n+        * The directory path.\n+        * The parent directory path.\n+        * The last modified timestamp of the directory.\n+        * The number of children contained inside a directory.", "created_at": "2018-06-12T20:47:04Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTA0NzExNQ==", "fields": {"body": "Airbnb style actually uses 4.9 as peer dependency. I really want to downgrade to that matching version :( too. Waiting for @blazeu .", "diff": "@@ -3,23 +3,14 @@\n   \"plugins\": [ \"react\" ],\n   \"env\": {\n     \"es6\": true,\n-    \"browser\": true,\n-  },\n-  \"ecmaFeatures\": {\n-    \"templateStrings\": true,\n-    \"arrowFunctions\": true,\n-    \"modules\": true,\n-    \"blockBindings\": true,\n-    \"forOf\": true,\n-    \"jsx\": true\n+    \"browser\": true\n   },\n   \"rules\": {\n     \"no-unused-vars\": 1,\n     \"react/jsx-uses-vars\": 1,\n     \"no-var\": 2,\n     \"new-cap\": 0,\n     \"quotes\": [1, \"single\", \"avoid-escape\"],\n-    \"semi\": 1,\n-    \"indent\": [2, 2]", "created_at": "2018-06-13T11:29:39Z", "last_edited_at": null, "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTAxOTE2MQ==", "fields": {"body": "@NiklasMM , fixtures do work, with a slightly different mechanism for some types of fixtures.\nsee https://github.com/pytest-dev/pytest/blob/master/doc/en/unittest.rst#mixing-pytest-fixtures-into-unittesttestcase-subclasses-using-marks\nand git grep fixture tests in coala-core repo.\nwrt parameterisation, and even fixtures, I didnt see the rationale given in the cEP for how those will be used to improve bear testing.  I would argue that https://github.com/wolever/parameterized is as good a solution which works well for all test frameworks.  We already have a complex set of pytest plugins, and already use testfixtures, so an additional test dependency isnt a new complexity problem.\nAnyway, my intention isnt to re-litigate that.  I am only commenting because of the huge breakage.\nLeaving the existing unittest class as-is, and deprecating it, will reduce the risk substantially.  And then at the end of the project the huge rewrite of bear tests can happen, and it wont matter if there are some bear tests which are not migrated to pytest-only style for reasons not yet predicted.\nIf the immediate goal is only to enforce a common test base class, that can be achieved by changing this class to inherit from both:\nclass LocalBearTestHelper(BaseTestHelper, unittest.TestCase):\n    ...", "diff": "@@ -101,7 +100,7 @@ def get_results(local_bear,\n         return bear_output\n \n \n-class LocalBearTestHelper(unittest.TestCase):\n+class LocalBearTestHelper(BaseTestHelper):", "created_at": "2018-06-13T09:43:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE1NDgzMw==", "fields": {"body": "I vaguely remember doing something like this in the past, but my quick searches couldn't come up with anything. What's the story behind this?", "diff": "@@ -42,5 +67,5 @@ deploy:\n   provider: pages\n   skip_cleanup: true\n   github_token: $GITHUB_TOKEN\n-  on:\n+  \"on\":", "created_at": "2018-06-13T16:36:58Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE4ODAxNA==", "fields": {"body": "assert len(bear_output) != 0", "diff": "@@ -210,7 +187,7 @@ def check_invalidity(self,\n                                   )\n         msg = (\"The local bear '{}' yields no result although it \"\n                'should.'.format(local_bear.__class__.__name__))\n-        self.assertNotEqual(len(bear_output), 0, msg=msg)\n+        assert not len(bear_output) == 0, msg", "created_at": "2018-06-13T18:22:17Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTEwMTE5NA==", "fields": {"body": ".eslintrc?", "diff": "@@ -0,0 +1,27 @@\n+[all]\n+ignore = node_modules/**, dist/**, .git/**\n+\n+[all.SpaceConsistencyBear]\n+files = **.js, **.json, **.yml, **.yaml, **.md\n+bears = SpaceConsistencyBear\n+use_spaces = true\n+ignore += src/gantt-chart.js\n+\n+[all.json]\n+bears = JSONFormatBear\n+files = **.json\n+indent_size = 2\n+\n+[all.js]\n+bears = ESLintBear\n+eslint_config = .eslintrc.json", "created_at": "2018-06-13T14:20:46Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTI0NDk5OA==", "fields": {"body": "you can use os.path.dirname for os.path.split(...)[0]", "diff": "@@ -0,0 +1,31 @@\n+import os\n+import unittest\n+\n+from coalib.io.Directory import Directory\n+\n+\n+class DirectoryTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.test_dir_path = os.path.join(os.path.split(__file__)[0],", "created_at": "2018-06-13T21:40:13Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTMwOTM2OQ==", "fields": {"body": "cant do that or it would fail on windows", "diff": "@@ -0,0 +1,89 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path', 'timestamp')\n+class Directory:\n+    \"\"\"\n+    The ``Directory`` class acts as an interface to directories and\n+    provides useful information about them such as:\n+\n+        * The directory path.\n+        * The parent directory path.\n+        * The last modified timestamp of the directory.\n+        * The children contained inside a directory.\n+\n+    >>> import os\n+    >>> d = Directory('tests/io/DirectoryTestDir/')\n+\n+    Get the number of files and sub-directories at the top level:\n+\n+    >>> len(d.get_children())\n+    3\n+\n+    Get the number of all the files and sub-directories recursively:\n+    >>> len(d.get_children_recursively())\n+    5\n+\n+    Get the path of the ``Directory`` object:\n+\n+    >>> os.path.basename(d.path).endswith('DirectoryTestDir')\n+    True\n+\n+    Get the parent directory:\n+\n+    >>> os.path.basename(d.parent).endswith('io')", "created_at": "2018-06-14T06:00:15Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY5MDIzMg==", "fields": {"body": "it is from the yaml lint bear.\nI used to disabled it in git-task-list. But it is far easier just to quote it.", "diff": "@@ -42,5 +67,5 @@ deploy:\n   provider: pages\n   skip_cleanup: true\n   github_token: $GITHUB_TOKEN\n-  on:\n+  \"on\":", "created_at": "2018-06-15T10:14:28Z", "last_edited_at": null, "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NDg5OQ==", "fields": {"body": "@nvzard , why didnt CI pick this up?  Please create an issue about that.", "diff": "@@ -104,22 +98,15 @@ def test_create_issue_cmd(self):\n             plugins.labhub.LabHub, logging.ERROR, {'BACKEND': 'text'}\n         )\n         labhub.activate()\n-        labhub.REPOS = {'repository': self.mock_repo,\n-                        'repository.github.io': self.mock_repo}\n+        labhub.REPOS = {'repository': self.mock_repo,'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy','Here you go')\n \n-        labhub.REPOS['repository'].create_issue.assert_called_once_with(\n-            'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n-        )\n+        labhub.REPOS['repository'].create_issue.assert_called_once_with('this is the title', 'bo\\ndy\\nOpened by @None at [text]()')\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body', 'Here you go')\n \n-        labhub.REPOS['repository.github.io'].create_issue.assert_called_with(\n-            'another title', 'and body\\nOpened by @None at [text]()'\n-        )\n+        labhub.REPOS['repository.github.io'].create_issue.assert_called_with('another title', 'and body\\nOpened by @None at [text]()')", "created_at": "2018-06-16T05:31:34Z", "last_edited_at": "2018-06-16T05:32:13Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg==", "fields": {"body": "These copy from docs/docs-requirements.txt to docs-requirements.txt.\nPlease re-review @kriti21 .", "diff": "@@ -0,0 +1,24 @@\n+overrides: coala.yaml\n+\n+name: documentation\n+\n+dependencies:\n+  - coala\n+  - '-r docs-requirements.txt'\n+\n+configuration:\n+  template_dir:\n+    - ../coala-mobans/templates/\n+    - ../coala-mobans/assets/\n+  configuration: .moban.yaml\n+  configuration_dir: ../coala-mobans/\n+targets:\n+  - requirements.txt: requirements.txt.jj2\n+copy:\n+  - docs-requirements.txt: docs/docs-requirements.txt", "created_at": "2018-06-16T06:38:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwMzcyNw==", "fields": {"body": "Hmm, I'm not sure, but IMO it's not the best way to fix this problem. Under which circumstance is data a dict? data = get_affiliated_committers_data(json_object), data = get_outside_committers_data(json_object), data = get_outside_projects_data(json_object), or data = get_portfolio_projects_data(json_object)? Maybe fix the problem in the corresponding try catch section. It could be better to fix the problem in function implementation and add docstring to indicate that return type should be a list.", "diff": "@@ -51,5 +51,7 @@ def get_data(for_what):\n             except Exception as ex:\n                 logger.error(ex)\n                 break\n+        if type(data) is not list:\n+            data = [data]", "created_at": "2018-06-16T14:00:58Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwNzU3Nw==", "fields": {"body": "This should go into the above proposed \"Details\" paragraph, as it's not directly related to the invocation of the debugger within a coafile;)", "diff": "@@ -0,0 +1,77 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+The Debugging Interface will help users to debug Bear code and step through\n+it using pdb interface\n+\n+Usage of coala's Debugger\n+=========================\n+\n+Command Line Interface\n+----------------------\n+\n+Users can specify the bear they want to debug using ``--debug-bears``, i.e.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,HelloWorldBear -f <filename> --debug-bears HelloWorldBear\n+\n+Below is the code given for a simple ``HelloWorldBear`` that prints a debug\n+message for each file:\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class HelloWorldBear(LocalBear):\n+        def run(self,\n+                filename,\n+                file):\n+            logging.info('Please follow newcomer guide.')\n+            logging.debug('Hello World! Checking file {}.'.format(filename))\n+\n+After invoking the coala's debugger it will step into the ``run()`` method of a\n+HelloWorldBear and help users to debug Bear code with passed settings.\n+\n+If bear names are not specified for ``--debug-bears`` then it will by\n+default debug all the bears passed through ``--bears`` or ``-b`` argument.\n+\n+.. code:: shell\n+\n+    $ coala --bears HelloWorldBear -files <filename> --debug-bears\n+\n+.. note::\n+\n+    A bear may depend on results from different bears. The debugger will debug\n+    all bears on which a bear is dependent on as well.\n+\n+coafile\n+-------\n+\n+Users can debug bears using ``.coafile``:\n+\n+::\n+\n+    [all]\n+    bears = PEP8Bear,MypyBear\n+    files = <filename>\n+    debug_bears = PEP8Bear\n+\n+or\n+\n+::\n+\n+    [all]\n+    bears = PEP8Bear,MypyBear\n+    files = <filename>\n+    debug_bears = True\n+\n+.. note::\n+\n+    Pdb's quit-command (``q``) has been remapped so coala continues its\n+    normal execution without aborting. So, ``quit`` or `q` will first clear\n+    all the breakspoints then continue ( ``c`` or ``continue`` ) execution.", "created_at": "2018-06-16T17:03:34Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwNzUxNg==", "fields": {"body": "Maybe call the script tests.sh instead?", "diff": "@@ -36,7 +36,7 @@ jobs:\n       - run:\n           name: pytest\n           when: always\n-          command: python -m pytest\n+          command: bash .misc/pytest_run.sh", "created_at": "2018-06-16T17:01:11Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkxOTE5OA==", "fields": {"body": "I think I have already make it as a different commit", "diff": "@@ -291,22 +292,15 @@ def get_file_dict(filename_list, log_printer=None, allow_raw_files=False):\n     return file_dict\n \n \n-def filter_raising_callables(it, exception, *args, debug=False, **kwargs):\n-    \"\"\"\n-    Filters all callable items inside the given iterator that raise the\n-    given exceptions.\n-\n-    :param it:        The iterator to filter.\n-    :param exception: The (tuple of) exception(s) to filter for.\n-    :param args:      Positional arguments to pass to the callable.\n-    :param kwargs:    Keyword arguments to pass to the callable.\n-    \"\"\"\n-    for elem in it:\n-        try:\n-            yield elem(*args, **kwargs)\n-        except exception:\n-            if debug:\n-                raise", "created_at": "2018-06-17T06:12:05Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNDk2Nw==", "fields": {"body": "It must be prose. High level summary. See pep 257. It is hard .. ;)", "diff": "@@ -0,0 +1,8 @@\n+\"\"\"\n+Has Setting, Section class; indexing tools; input checks; loads bears, files.", "created_at": "2018-06-17T10:36:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNTc2MQ==", "fields": {"body": "I have added that also in my code in the case where --debug-bears MyBear then Debugger will also debug the dependency Bear of MyBear. :P so for both the case it will debug :P", "diff": "@@ -0,0 +1,77 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+The Debugging Interface will help users to debug Bear code and step through\n+it using pdb interface\n+\n+Usage of coala's Debugger\n+=========================\n+\n+Command Line Interface\n+----------------------\n+\n+Users can specify the bear they want to debug using ``--debug-bears``, i.e.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,HelloWorldBear -f <filename> --debug-bears HelloWorldBear\n+\n+Below is the code given for a simple ``HelloWorldBear`` that prints a debug\n+message for each file:\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class HelloWorldBear(LocalBear):\n+        def run(self,\n+                filename,\n+                file):\n+            logging.info('Please follow newcomer guide.')\n+            logging.debug('Hello World! Checking file {}.'.format(filename))\n+\n+After invoking the coala's debugger it will step into the ``run()`` method of a\n+HelloWorldBear and help users to debug Bear code with passed settings.\n+\n+If bear names are not specified for ``--debug-bears`` then it will by\n+default debug all the bears passed through ``--bears`` or ``-b`` argument.\n+\n+.. code:: shell\n+\n+    $ coala --bears HelloWorldBear -files <filename> --debug-bears\n+\n+.. note::\n+\n+    A bear may depend on results from different bears. The debugger will debug\n+    all bears on which a bear is dependent on as well.", "created_at": "2018-06-17T11:08:09Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkzMjg5NQ==", "fields": {"body": "committer = AffiliatedCommitter.objects.get(name='John Vandenberg')\nThis looks better to me, and is consistent with what you do in test_import_organization_data.py", "diff": "@@ -0,0 +1,16 @@\n+from django.core.management import call_command\n+from django.test import TestCase\n+\n+from openhub.models import AffiliatedCommitter\n+\n+\n+class ImportAffiliatedCommitterDataTest(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        call_command('import_affiliated_committers_data')\n+\n+    def test_command_import_affiliated_committers_data(self):\n+        a_committers = AffiliatedCommitter.objects.all()", "created_at": "2018-06-17T15:23:38Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkzMjkzMQ==", "fields": {"body": "Could be\nself.assertIsNotNone(org)", "diff": "@@ -0,0 +1,15 @@\n+from django.core.management import call_command\n+from django.test import TestCase\n+\n+from openhub.models import Organization\n+\n+\n+class ImportOrganizationDataTest(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        call_command('import_organization_data')\n+\n+    def test_command_import_organization_data(self):\n+        org = Organization.objects.get(name='coala')\n+        self.assertIn('coala', org.name)", "created_at": "2018-06-17T15:25:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYyNTkxMg==", "fields": {"body": "blanklines != newline token.  They are orthogonal.  They can not be mapped sensibly, and doing it in your test code makes the test logic confusing.\nA newline token at EOL is terminating the last line with a newline token.\nThe meaning of that newline token varies between context and GUI editors, but it is not a blank line.", "diff": "@@ -16,11 +17,20 @@ class RunDecoratedBear(LocalBear):\n         remove_unreachable_code=get_aspect('UnreachableCode'),\n         minimum_clone_tokens=get_aspect('Clone').min_clone_tokens,\n     )\n+    @map_ambiguous_setting_to_aspect(\n+        use_spaces=(get_aspect('Indentation').indent_type,\n+                    [('space', True), ('tab', False)]),\n+        blanklines_at_EOF=(get_aspect('NewlineAtEOF').newline_at_EOF,", "created_at": "2018-06-20T01:30:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYyNjIzNA==", "fields": {"body": "return a dict of these, so that the tests become more self explanatory.", "diff": "@@ -16,11 +17,20 @@ class RunDecoratedBear(LocalBear):\n         remove_unreachable_code=get_aspect('UnreachableCode'),\n         minimum_clone_tokens=get_aspect('Clone').min_clone_tokens,\n     )\n+    @map_ambiguous_setting_to_aspect(\n+        use_spaces=(get_aspect('Indentation').indent_type,\n+                    [('space', True), ('tab', False)]),\n+        blanklines_at_EOF=(get_aspect('NewlineAtEOF').newline_at_EOF,\n+                           [(True, 1), (False, 0)]),\n+    )\n     def run(self,\n             remove_unreachable_code: bool = False,\n             minimum_clone_tokens: int = 10,\n+            use_spaces: bool = True,\n+            blanklines_at_EOF: int = 1,\n             ):\n-        return [remove_unreachable_code, minimum_clone_tokens]\n+        return [remove_unreachable_code, minimum_clone_tokens,", "created_at": "2018-06-20T01:33:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA==", "fields": {"body": "We could use ternary if we really want it short\nconst oldOrgs = oldData ? createOrgHash(oldData) : newOrgs\nbut, maybe, it's clearer if we use explicit conditional.", "diff": "@@ -25,8 +25,11 @@ module.exports = ({\n   feed_items: current,\n   data_updated: dataUpdated,\n }) => {\n-  const oldOrgs = createOrgHash(oldData)\n   const newOrgs = createOrgHash(newData)\n+  let oldOrgs = newOrgs\n+  if (oldData) {\n+    oldOrgs = createOrgHash(oldData)\n+  }", "created_at": "2018-06-20T11:32:42Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ==", "fields": {"body": "Missing newline", "diff": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" version=\"2.0\" xmlns:org=\"https://g.co/gci\" xmlns:property=\"https://g.co/gci\"><channel><title><![CDATA[Google Code-in Leaders]]></title><description><![CDATA[A feed for Google Code-in updates]]></description><link>https://gci-leaders.netlify.com</link><generator>RSS for Node</generator><lastBuildDate>Sun, 24 Dec 2017 03:04:35 GMT</lastBuildDate><atom:link href=\"https://gci-leaders.netlify.com/feed.xml\" rel=\"self\" type=\"application/rss+xml\"/><pubDate>Sun, 24 Dec 2017 03:04:35 GMT</pubDate></channel></rss>", "created_at": "2018-06-20T11:41:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc1NTAyOA==", "fields": {"body": "These lines are not part of your change. Do not modify their style unless you need to improve their functionality as well.\nIt just makes your patch large and 'steals' git blame", "diff": "@@ -35,33 +60,73 @@ def test_mapping(self):\n             get_aspect('Clone')('py', min_clone_tokens=30),\n         ])\n         result = self.bear.execute()\n-        self.assertEqual([True, 30], result)\n+        expected = self.EXPECTED.copy()\n+        expected['minimum_clone_tokens'] = 30\n+        expected['remove_unreachable_code'] = True\n+        self.assertResult(expected, result)\n \n     def test_setting_priority(self):\n         self.section.aspects = AspectList([\n             get_aspect('UnreachableCode')('py'),\n             get_aspect('Clone')('py', min_clone_tokens=30),\n         ])\n-        self.section.append(\n-            Setting('remove_unreachable_code', 'False'))\n-        self.section.append(\n-            Setting('minimum_clone_tokens', 40))\n+        self.section.append(Setting('remove_unreachable_code', 'False'))\n+        self.section.append(Setting('minimum_clone_tokens', 40))", "created_at": "2018-06-20T12:26:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2ODk3MA==", "fields": {"body": "You can import run_git_command() & git_commit() from GitCommitBearTest module and use it here, they're static methods. Code duplication isn't a good idea", "diff": "@@ -0,0 +1,174 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.vcs.VCSCommitBear import VCSCommitBear, CommitResult\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.settings.Section import Section\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class FakeCommitBear(VCSCommitBear):\n+    @classmethod\n+    def check_prerequisites(cls):\n+        return True\n+\n+    def get_head_commit(self):\n+        return ('This is the fake head commit', '')\n+\n+\n+@generate_skip_decorator(VCSCommitBear)\n+class VCSCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure message if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = FakeCommitBear(None, self.section, self.msg_queue)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(GitCommitBear.check_prerequisites(),\n+                             'git is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/git'\n+            self.assertTrue(GitCommitBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    def test_head_commit(self):\n+        self.assertEqual(self.run_uut(), ['HEAD commit information'])\n+\n+\n+@generate_skip_decorator(GitCommitBear)\n+class AnalyzeGitCommitTest(unittest.TestCase):\n+\n+    @staticmethod\n+    def run_git_command(*args, stdin=None):", "created_at": "2018-06-20T13:08:04Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg==", "fields": {"body": "This page is about contacting people.\nThis should be after \"- Give us feedback\", as a new item,\n\n\nReport any Code of Conduct violations to ....", "diff": "@@ -24,3 +24,6 @@ Modularity, clean good code as well as a high usability for both users\n and developers of analyse routines (called bears) stand in the\n foreground of the development. We will not speed up our development if\n it needs sacrificing any aspect of quality.\n+\n+\n+Please follow our Code Of Conduct, you can find it `here <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>`__.", "created_at": "2018-06-20T23:59:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA==", "fields": {"body": "query = db.issues.where('state').equals(states[0]) ?", "diff": "@@ -187,7 +187,11 @@ const database = new class Database {\n       const cards = [];\n       let query;\n       if (states.length === 1) {\n-        query = db.issues.where('state').equals('open');\n+        if (states[0] === 'open') {\n+          query = db.issues.where('state').equals('open');", "created_at": "2018-06-21T15:24:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIwNDA1Nw==", "fields": {"body": "These are all the lovely stuff which work on coala/coala repo, and the template used is being deployed to every other coala repo as well so we can use them there.\npip caching means the extra setup time is negligible.  And the plugins all should do nothing unless enabled in setup.cfg.\nAfter this, you can enable profiling -- see coala/coala#5548 , which also shows time spent in pytest plugins so enabling other features can be 'costed' and rejected if the plugin is too expensive.", "diff": "@@ -1,6 +1,21 @@\n-pytest\n-coverage\n-pytest-cov\n-requests_mock\n-codecov\n+coverage~=4.3.4\n+coverage-env-plugin~=0.1\n+coverage-config-reload-plugin~=0.2\n+codecov~=2.0.5\n+moban~=0.0.9\n+packaging~=16.8\n+pytest~=3.6.1\n+pytest-cov~=2.4\n+pytest-env~=0.6.0\n+pytest-error-for-skips~=1.0\n+pytest-instafail~=0.3.0\n+pytest-mock~=1.1\n+pytest-profiling~=1.3.0\n+pytest-reorder~=0.1.0\n+pytest-reqs~=0.0.6\n+pytest-timeout~=1.3.0\n+pytest-xdist~=1.15\n+requests-mock~=1.2\n+pip!=9.0.2, !=10.0.*\n+wheel~=0.29", "created_at": "2018-06-21T16:49:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIxMzc2OQ==", "fields": {"body": "there is always the option of using unittest.SkipTest it is mentioned in that section.", "diff": "@@ -12,5 +12,7 @@ def setUpTestData(cls):\n \n     def test_command_import_contributors_data(self):\n         contributors = Contributor.objects.all()\n+        if not contributors:\n+            return", "created_at": "2018-06-21T17:21:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDA5OQ==", "fields": {"body": "Just do 'review-blurb' ?", "diff": "@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');\n+  const reviewNumber = splitUrl[splitUrl.length - 1];\n+\n+  const classes = {\n+    'review-blurb': true\n+  };\n+\n+  return (\n+    <span className={classnames(classes)}>", "created_at": "2018-06-24T06:50:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE2NQ==", "fields": {"body": "split then pop returns the last element.", "diff": "@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');", "created_at": "2018-06-24T06:54:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMTU3OQ==", "fields": {"body": "in the future, I would love to see this turns into infinite list (automatically add more on scroll), since it doesn't load from the network anyway.\nAlso in the future, look at scrolling performance problem, it shouldn't happen now, but it might happen because there's thousands of DOM element being rendered (even the element outside the visible browser window).", "diff": "@@ -0,0 +1,79 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+import ColoredIcon from './colored-icon';\n+\n+const MIN_CHILDREN_TO_SHOW = 10;\n+\n+\n+class ReviewList extends Component {\n+  state = {morePressedCount: 0, showCSVModal: false};\n+\n+  showAllReviews = () => {\n+    this.setState({showAllReviews: true});\n+  };\n+\n+  onClickMore = () => {\n+    this.setState({morePressedCount: this.state.morePressedCount + 1});\n+  };\n+\n+  toggleCSVModal = () => {\n+    const {showCSVModal} = this.state;\n+    this.setState({showCSVModal: !showCSVModal});\n+  };\n+\n+  render() {\n+    const {icon, backgroundColor, children} = this.props;\n+    const {isOver} = this.props; // from the collector\n+    const {showAllReviews, morePressedCount} = this.state;\n+    const multiple = 25; // Add 25 results at a time\n+\n+    let className = 'column-title';\n+    if (icon) {\n+      className += ' has-icon';\n+    }\n+\n+    let iconEl;\n+    if (icon) {\n+      iconEl = (\n+        <ColoredIcon className='column-icon' color={backgroundColor}>{icon}</ColoredIcon>\n+      );\n+    }\n+\n+    const header = (\n+      <h2 className={className}>\n+        {iconEl}Meta-reviews in Need ({children.length})\n+      </h2>\n+    );\n+\n+    const classes = {\n+      'issue-list': true,\n+      'is-over': isOver\n+    };\n+\n+    let partialChildren;\n+    let moreButton;\n+    if (!showAllReviews && MIN_CHILDREN_TO_SHOW + (1 + morePressedCount) * multiple < children.length) {\n+      partialChildren = children.slice(0, MIN_CHILDREN_TO_SHOW + morePressedCount * multiple);\n+      moreButton = (\n+        <BS.Button onClick={this.onClickMore} className='list-group-item'>\n+          {children.length - (morePressedCount + 1) * multiple} more...", "created_at": "2018-06-24T08:02:04Z", "last_edited_at": "2018-06-24T08:02:56Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NTgxNQ==", "fields": {"body": "Nevermind, it's inside map, didn't saw that.\nBut this will mutate the prop, it's considered bad practice in React, and IMO a map shouldn't mutate because it's normally for creating a new array. This will not cause problem since we know it's only adding new property that isn't used elsewhere. But, best to stay away from bad practices. Spread syntax (...) is available for cloning objects.", "diff": "@@ -77,6 +99,27 @@ class KanbanRepo extends Component {\n   render() {\n     const {columnData, cards, repoInfos} = this.props;\n \n+    // Get review comments out of cards\n+    const reviews = cards.map((card) => {\n+      if (card.issue.pullRequest && card.issue.pullRequest.comments) {\n+        let comments = card.issue.pullRequest.comments;\n+        comments.forEach(comment => {\n+          comment.repoOwner = card.repoOwner;\n+          comment.repoName = card.repoName;\n+          comment.number = card.number;\n+        });\n+        return comments;", "created_at": "2018-06-25T16:49:25Z", "last_edited_at": "2018-06-25T17:07:25Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjQ2Nw==", "fields": {"body": "trailing comma.", "diff": "@@ -71,6 +71,17 @@ def TEAMS(self):\n     def TEAMS(self, new):\n         self._teams = new\n \n+    def team_mapping(self):\n+        return {\n+            'newcomers': self.TEAMS[self.GH_ORG_NAME + ' newcomers'],\n+            'developers': self.TEAMS[self.GH_ORG_NAME + ' developers'],\n+            'maintainers': self.TEAMS[self.GH_ORG_NAME + ' maintainers']", "created_at": "2018-06-27T11:43:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjY0OQ==", "fields": {"body": "trailing comma", "diff": "@@ -111,6 +111,8 @@ def test_is_room_member(self):\n     def test_hello_world_callback(self):\n         teams = {\n             'coala newcomers': self.mock_team,\n+            'coala developers': self.mock_team,\n+            'coala maintainers': self.mock_team", "created_at": "2018-06-27T11:44:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzUwNw==", "fields": {"body": "keep the function, change what it does.\nthat is less disruptive to existing code, making it easier to read&review the changes", "diff": "@@ -89,40 +100,28 @@ def invite_cmd(self, msg, match):\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n         team = team.lower()\n \n-        is_developer = self.TEAMS[self.GH_ORG_NAME +\n-                                  ' developers'].is_member(inviter)\n-        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n-                                   ' maintainers'].is_member(inviter)\n+        is_developer = self.is_team_member(inviter, 'developers')\n+        is_maintainer = self.is_team_member(inviter, 'maintainers')\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        valid_teams = ['newcomers', 'developers', 'maintainers']\n-        if team not in valid_teams:\n+        if team not in self.team_mapping():\n             return 'Please select from one of the valid teams: ' + ', '.join(\n-                    valid_teams)\n-\n-        def invite(invitee, team):", "created_at": "2018-06-27T11:47:46Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzY0MQ==", "fields": {"body": "valid_teams = elf.team_mapping() will require less changes to existing lines, and be more efficient.", "diff": "@@ -89,40 +100,28 @@ def invite_cmd(self, msg, match):\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n         team = team.lower()\n \n-        is_developer = self.TEAMS[self.GH_ORG_NAME +\n-                                  ' developers'].is_member(inviter)\n-        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n-                                   ' maintainers'].is_member(inviter)\n+        is_developer = self.is_team_member(inviter, 'developers')\n+        is_maintainer = self.is_team_member(inviter, 'maintainers')\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        valid_teams = ['newcomers', 'developers', 'maintainers']", "created_at": "2018-06-27T11:48:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTkyMg==", "fields": {"body": "We need to fix #3 so people don't get confused.", "diff": "@@ -0,0 +1,92 @@\n+.review {", "created_at": "2018-06-27T11:56:43Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc2MDM3Mg==", "fields": {"body": "I think you can remove this (as I saw in other templates).", "diff": "@@ -3,4 +3,10 @@\n \n @Language\n class Ruby:\n-    pass\n+    aliases = 'rb',\n+", "created_at": "2018-06-28T08:53:30Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc4MTI0Mg==", "fields": {"body": "1.4 is a version of one program called \"GNU m4\", and isnt a version of the language.\nSome of the history of the language can be found on Wikipedia and https://www.gnu.org/savannah-checkouts/gnu/m4/manual/m4-1.4.18/html_node/Compatibility.html\nDue to incompatibilities mentioned in the above, we could say there is one version of the language called \"GNU m4 1.4\", and a different one being \"System V m4\", etc.\nHowever unless/until we know about some clear differences for these variations, and notice that users are supplying .m4 files with those differences, I think it is best to avoid defining versions.", "diff": "@@ -0,0 +1,11 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class m4:\n+    versions = 1.4,", "created_at": "2018-06-28T09:47:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc5NTI3NQ==", "fields": {"body": "not quite..\n'#' only works at the beginning of a command, which is conceptually incompatible with the other usages ofcomment_delimiter` which assume a comment delimiter has a high precedence.\nTypically this means in Tcl, ; # is needed to be a comment occurring in the middle of a line.\nThis difference is quite small, and quite achievable to support, but is getting further from your project scope of quotes, so I think discard this from the MR, and please create an issue about supporting Tcl comments.", "diff": "@@ -0,0 +1,12 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class Tcl:\n+    aliases = 'Tcl/Tk',\n+    versions = 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6\n+    extensions = '.tcl',\n+    comment_delimiter = '#'", "created_at": "2018-06-28T10:37:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMjkzMQ==", "fields": {"body": "super()?", "diff": "@@ -46,6 +48,29 @@\n member_accessed\"\"\"))\n \n \n+@generate_repr(('id', hex),\n+               'origin',\n+               'differences',\n+               'count_matrices',\n+               'message')\n+@generate_ordering('origin',\n+                   'differences',\n+                   'count_matrices',\n+                   'message')\n+class ClangFunctionDifferenceResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin,\n+                 differences: list,\n+                 count_matrices: dict):\n+        HiddenResult.__init__(origin,", "created_at": "2018-06-28T11:54:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxOTg0Ng==", "fields": {"body": "Using Ignore bear here, as this line will be modified again soon when you fix the bug, and will then be reformatted.", "diff": "@@ -142,8 +147,9 @@ def test_create_issue_cmd(self):\n         # TODO\n         # Ignoring assertion to prevent build failure for time being\n         # Creating issue in private chat\n-        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-        #                       'You\\'re not allowed')\n+        # testbot_private.assertCommand('!new issue repository this '", "created_at": "2018-06-28T12:24:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMDA1NA==", "fields": {"body": "start the command string on the next line so that it can use the full width, and have line breaks in sensible spots.", "diff": "@@ -153,21 +159,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the '", "created_at": "2018-06-28T12:25:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTE0MA==", "fields": {"body": "start string on next line", "diff": "@@ -153,21 +159,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the '\n+                                     'title\\nbo\\ndy',\n+                                     'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository.github.io '", "created_at": "2018-06-28T12:29:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTQ4Ng==", "fields": {"body": "move strings to next line so you dont need to split a URL.  that makes it quite hard to read and understand the test procedure/intention.", "diff": "@@ -191,20 +200,26 @@ def test_unassign_cmd(self):\n         mock_iss.assignees = (None, )\n         mock_iss.unassign = MagicMock()\n \n-        testbot.assertCommand('!unassign https://github.com/coala/name/issues/23',\n+        # Start ignoring InvalidLinkBear\n+        testbot.assertCommand('!unassign https://github.com/coala/name/'", "created_at": "2018-06-28T12:30:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTkxNw==", "fields": {"body": "drop create_autospec to next line and indent only four from the start of the key.", "diff": "@@ -368,22 +385,28 @@ def test_mark_cmd(self):\n         mock_gitlab_mr.labels = ['process/wip']\n         testbot.assertCommand(cmd_github.format('pending', 'coala', 'a', '23'),\n                               'marked pending review')\n-        testbot.assertCommand(cmd_github.format('pending-review', 'coala', 'a', '23'),\n+        testbot.assertCommand(cmd_github.format('pending-review', 'coala',\n+                                                'a', '23'),\n                               'marked pending review')\n-        testbot.assertCommand(cmd_github.format('pending review', 'coala', 'a', '23'),\n+        testbot.assertCommand(cmd_github.format('pending review',\n+                                                'coala', 'a', '23'),\n                               'marked pending review')\n+        # Stop ignoring\n \n     def test_alive(self):\n         labhub, testbot = plugin_testbot(plugins.labhub.LabHub, logging.ERROR)\n         with patch('plugins.labhub.time.sleep') as mock_sleep:\n             labhub.gh_repos = {\n                 'coala': create_autospec(IGitt.GitHub.GitHub.GitHubRepository),\n-                'coala-bears': create_autospec(IGitt.GitHub.GitHub.GitHubRepository),\n-                'coala-utils': create_autospec(IGitt.GitHub.GitHub.GitHubRepository)\n+                'coala-bears': create_autospec(", "created_at": "2018-06-28T12:31:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDY2OQ==", "fields": {"body": "Maybe check if commentsWithReactions is the same length as rawComments here because if not, you might have an error.", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {", "created_at": "2018-07-01T16:44:07Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTE4NQ==", "fields": {"body": "Also, probably use NODE_ENV === 'development' for debug value instead.", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {", "created_at": "2018-06-30T15:27:54Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcxMA==", "fields": {"body": "node.diffHunk || null", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,", "created_at": "2018-06-30T15:53:12Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTg1Nw==", "fields": {"body": "Why bother setting the properties, if all of it is null?", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,\n+            author: commentAuthor,\n+            reactions,\n+            createdAt: node.createdAt,\n+            lastEditedAt: node.lastEditedAt,\n+            // the native `updatedAt` field of comment is inaccurate\n+            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt\n+          };\n+        });\n+        info.issue.pullRequest = {\n+          htmlUrl: node.url,\n+          comments\n+        };\n+        return info;\n+      }).filter((node) => node));\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for pull request. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchPullRequests);\n+    }\n+  }\n+\n+  _mapNodeToIssue(node) {\n+    let user, assignee, milestone;\n+\n+    if (node.author) {\n+      user = {\n+        login: node.author.login,\n+        avatarUrl: node.author.avatarUrl\n+      };\n+    } else {\n+      user = {\n+        login: null,\n+        avatarUrl: null\n+      };\n+    }\n+\n+    if (node.assignees.nodes && node.assignees.nodes.length) {\n+      assignee = {\n+        login: node.assignees.nodes[0].login,\n+        avatarUrl: node.assignees.nodes[0].avatarUrl\n+      };\n+    } else {\n+      assignee = null;\n+    }\n+\n+    if (node.milestone) {\n+      milestone = {\n+        title: node.milestone.title,\n+        createdAt: node.milestone.createdAt,\n+        dueOn: node.milestone.dueOn,\n+        state: node.milestone.state.toLowerCase(),\n+        htmlUrl: node.milestone.url,\n+        description: node.milestone.description\n+      };\n+    } else {\n+      milestone = {\n+        title: null,\n+        createdAt: null,\n+        dueOn: null,\n+        state: null,\n+        htmlUrl: null,\n+        description: null\n+      };", "created_at": "2018-06-30T15:59:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQwNjAzMg==", "fields": {"body": "REM is another one.\nhttps://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/comments-in-code\nWe need to enhance coalib to allow multiple delimiters.  Create an issue please", "diff": "@@ -0,0 +1,11 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class VisualBasic:\n+    aliases = 'vb',\n+    extensions = '.vb', '.bas'\n+    comment_delimiter = \"'\"", "created_at": "2018-07-02T07:32:30Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0MjI2NA==", "fields": {"body": "use type(self._instance)", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines\n+\n+\n+class Memoize:\n+    \"\"\"\n+    ``Memoize`` serves as a decorator for the properties\n+    of ``FileFactory`` and caches the results of the property\n+    for a particular ``FileFactory`` object.\n+    \"\"\"\n+\n+    def __init__(self, method):\n+        self._method = method\n+\n+    def __call__(self, instance):\n+        self._instance = instance\n+        return self.__get__(self._instance, self._instance.__class__)", "created_at": "2018-07-03T20:33:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0NzI0MA==", "fields": {"body": "I told you to move those parts that show how the debugger itself behaves to the main section above^^ That shouldn't stay inside Usage -> Command Line Interface.", "diff": "@@ -0,0 +1,123 @@\n+Debug Bears\n+===========\n+\n+This document provides a overview of coala's Debugging Interface.\n+The Debugging Interface will help users to debug Bear code and step through\n+it using the pdb interface.\n+\n+After invoking coala's debugger it will step into the ``run()`` method of a\n+bear regardless of using ``yield`` or not and will step out as soon as a bear\n+finish analysis.\n+\n+.. note::\n+\n+    Pdb's quit-command (``q``) has been remapped so coala continues its\n+    normal execution without aborting. So, ``quit`` or ``q`` will first clear\n+    all breakpoints then continue execution.\n+\n+Usage\n+-----\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Users can specify the bear they want to debug using ``--debug-bears``, i.e.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,HelloWorldBear -f <filename> --debug-bears HelloWorldBear\n+\n+Below is the code given for a simple ``HelloWorldBear`` that prints a debug\n+message for each file and display the passed information i.e.,\n+\"A HelloworldBear.\" message.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class HelloWorldBear(LocalBear):\n+        def run(self, filename, file):\n+            logging.debug('Hello World! Checking file {}.'.\n+                          format(filename))\n+\n+            yield self.new_result(message=\"A HelloworldBear.\",\n+                                  file=filename)\n+\n+After invoking debugger will step into ``run()`` method using\n+pdb ``runcall()`` i.e.,\n+\n+::\n+\n+    [DEBUG][15:58:27] Platform Linux -- Python 3.6.5, coalib\n+    0.12.0.dev99999999999999\n+    Executing section cli...\n+    [DEBUG][15:58:27] Files that will be checked:\n+    /home/Voldemort/test/mytest.py\n+    [DEBUG][15:58:27] coala is run only on changed files, bears' log messages\n+    from previous runs may not appear. You may use the `--flush-cache` flag to\n+    see them.\n+    [DEBUG][15:58:27] Running bear HelloWorldBear...\n+    > /home/Voldemort/coala-bears/bears/general/HelloWorldBear.py(8)run()\n+    -> logging.debug('Hello World! Checking file {}.'.\n+    (Pdb) l\n+    3   from coalib.bears.LocalBear import LocalBear\n+    4\n+    5\n+    6   class HelloWorldBear(LocalBear):\n+    7       def run(self, filename, file):\n+    8  ->           logging.debug('Hello World! Checking file {}.'.\n+    9                         format(filename))\n+    10\n+    11              yield self.new_result(message=\"A HelloworldBear.\",\n+    12                                    file=filename)\n+    [EOF]\n+    (Pdb) c\n+    [DEBUG][15:58:30] Hello World! Checking file /home/Voldemort/test/mytest.py.\n+    --Return--\n+    > /home/Voldemort/coala-bears/bears/general/HelloWorldBear.py(8)run()->None\n+    -> logging.debug('Hello World! Checking file {}.'.\n+    (Pdb) c\n+\n+    mytest.py\n+    **** HelloWorldBear [Section: cli | Severity: NORMAL] ****\n+    !    ! A HelloworldBear.\n+    [    ] *0. Do (N)othing\n+    [    ]  1. (O)pen file\n+    [    ]  2. Add (I)gnore comment\n+    [    ] Enter number (Ctrl-D to exit):", "created_at": "2018-07-03T20:55:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTYzNw==", "fields": {"body": "apologies. my comment at #573 (comment) suggested the wrong syntax.\nthe point of using ignore is to NOT modify the line.\nSo, you need to use Ignoring ... and End ignoring or something like that so that this TODO doesnt create style errors until it is fixed.", "diff": "@@ -144,7 +149,7 @@ def test_create_issue_cmd(self):\n         # TODO\n         # Ignoring assertion to prevent build failure for time being\n         # Creating issue in private chat\n-        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',  # Ignore PycodestyleBear, LineLengthBear", "created_at": "2018-07-04T00:58:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTkzNQ==", "fields": {"body": "like the others, dont have \\n in the middle of the line.  It makes it harder for people to read the test and understand its intention.\nAlso these multiple line commands should use textwrap.dedent('''...''') or \"\"\"...\"\"\" so that you dont need to put \\n in the message, and so that the reader doesnt need to check whether the strings on multiple lines are implicit string concats or have a comma, etc.  multiline strings should use Python's multiline strings syntax.\n(would be a possible enhancement to errbot to add a assertMultilineCommand which does the textwrap.dedent for the test writer.)", "diff": "@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',", "created_at": "2018-07-04T01:01:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzU3MQ==", "fields": {"body": "change all of these invalid URLs to contain constant strings which you can ignore using settings in the .coafile, and can be re-used in future so InvalidLinkBear doesnt need to be ignored all the time.\n(and where you are improving the style of tests, also switch to using consistent issue numbers instead of random numbers, which make the reader wonder whether those numbers have some impact on the tests.)\nhttps://github.com/coala/name/issues/23 -> https://github.com/coala/example/issues/999\nhttps://github.com/coala/s/issues/52 -> https://github.com/coala/example2/issues/999\nhttps://gitlab.com/ala/am/issues/532 -> https://gitlab.com/example/test/issues/999", "diff": "@@ -193,20 +201,27 @@ def test_unassign_cmd(self):\n         mock_iss.assignees = (None, )\n         mock_iss.unassign = MagicMock()\n \n-        testbot.assertCommand('!unassign https://github.com/coala/name/issues/23',\n-                              'you are unassigned now', timeout=10000)\n+        # Start ignoring InvalidLinkBear", "created_at": "2018-07-04T01:17:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzcxNw==", "fields": {"body": "please create a newcomer or low issue for this to be changed to https", "diff": "@@ -2,10 +2,13 @@\n \n extra_plugin_dir = 'plugins'\n \n+\n def test_search_cmd(testbot):\n-    testbot.assertCommand('!search api this is search string',\n-                          'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n-    testbot.assertCommand('!search user this is search string',\n-                          'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search api this is search string',\n+        'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search user this is search string',\n+        'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')", "created_at": "2018-07-04T01:19:31Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5MzM3NA==", "fields": {"body": "move this to a different file.\nWe should have one file which is only the gamification configuration, and no other stuff.", "diff": "@@ -0,0 +1,301 @@\n+from gamification.models import (\n+    Level,\n+    Newcomer,\n+    Badge,\n+    BadgeActivity,\n+    )\n+from gamification.newcomers import get_newcomers\n+\n+\n+def create_levels():\n+    \"\"\"\n+    Create levels which will be used in the gamification system.\n+    \"\"\"\n+    level_objects_list = [\n+        Level(number=1, min_score=0, max_score=5, name='newbie'),\n+        Level(number=2, min_score=5, max_score=10, name='beginner'),\n+        Level(number=3, min_score=10, max_score=15, name='learner'),\n+        Level(number=4, min_score=15, max_score=20, name='intermediate'),\n+        Level(number=5, min_score=20, max_score=25, name='cool'),\n+        Level(number=6, min_score=25, max_score=30, name='awesome'),\n+        Level(number=7, min_score=30, max_score=35, name='master'),\n+        Level(number=8, min_score=35, max_score=40, name='legend'),\n+        Level(number=9, min_score=40, max_score=45, name='expert'),\n+    ]\n+    Level.objects.bulk_create(level_objects_list)\n+\n+\n+def create_newcomers():", "created_at": "2018-07-04T02:16:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5MzUzNw==", "fields": {"body": "create a function in a more global place which provides 'https://webservices.' + get_org_name() + '.io'", "diff": "@@ -0,0 +1,90 @@\n+import logging\n+\n+import requests\n+\n+from gamification.models import (\n+    Issue,\n+    Label,\n+    )\n+from gamification.newcomers import get_newcomers\n+from data.models import Contributor\n+from community.git import get_org_name\n+\n+\n+def get_issues(hoster):\n+    \"\"\"\n+    Get issues opened by newcomers\n+\n+    :param hoster: a string representing hoster, e.g. 'github'\n+    :return: a json of issues data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    if hoster == 'github':\n+        IMPORT_URL = ('https://webservices.' + get_org_name() +\n+                      '.io/issues/github/all')", "created_at": "2018-07-04T02:17:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5Mzk3MA==", "fields": {"body": "Git repo data should be in a different app.\nI think you already have a PR for that.", "diff": "@@ -0,0 +1,202 @@\n+from django.db import models\n+\n+from data.models import Contributor\n+\n+\n+class Label(models.Model):\n+    name = models.CharField(max_length=300)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Issue(models.Model):", "created_at": "2018-07-04T02:23:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5NDMwOQ==", "fields": {"body": "dont mention newcomers anywhere except where the component can only be possibly applicable to a newcomer.", "diff": "@@ -0,0 +1,202 @@\n+from django.db import models\n+\n+from data.models import Contributor\n+\n+\n+class Label(models.Model):\n+    name = models.CharField(max_length=300)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Issue(models.Model):\n+    number = models.IntegerField()\n+    title = models.TextField()\n+    author = models.ForeignKey(Contributor,\n+                               on_delete=models.CASCADE,\n+                               related_name='issue_author')\n+    state = models.CharField(max_length=100)\n+    repo = models.CharField(max_length=200)\n+    labels = models.ManyToManyField(Label, blank=True)\n+    assignees = models.ManyToManyField(Contributor,\n+                                       related_name='issue_assignees',\n+                                       blank=True)\n+    hoster = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return str(self.title)\n+\n+\n+class IssueNumber(models.Model):\n+    number = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.number)\n+\n+\n+class MergeRequest(models.Model):\n+    number = models.IntegerField()\n+    title = models.TextField()\n+    repo = models.CharField(max_length=200)\n+    closes_issues = models.ManyToManyField(IssueNumber, blank=True)\n+    state = models.CharField(max_length=100)\n+    author = models.ForeignKey(Contributor,\n+                               on_delete=models.CASCADE,\n+                               related_name='mr_author')\n+    assignees = models.ManyToManyField(Contributor,\n+                                       related_name='mr_assignees',\n+                                       blank=True)\n+    ci_status = models.BooleanField()\n+    labels = models.ManyToManyField(Label, blank=True)\n+    hoster = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class Activity(models.Model):\n+    name = models.TextField()\n+    points = models.IntegerField()\n+\n+    # Number of times this activity has been performed by the\n+    # same newcomer\n+    number_of_times = models.IntegerField(default=1, null=True)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Level(models.Model):\n+    number = models.IntegerField(primary_key=True)\n+    min_score = models.BigIntegerField()\n+    max_score = models.BigIntegerField()\n+    name = models.TextField()\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class BadgeActivity(models.Model):\n+    name = models.TextField()\n+\n+    # Number of times a newcomer have to perform this activity\n+    # to get this badge.\n+    number_of_times = models.IntegerField(default=1, null=True)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Badge(models.Model):\n+    number = models.IntegerField(primary_key=True)\n+    name = models.CharField(max_length=200)\n+    details = models.TextField(null=True)\n+\n+    # Activities a newcomer have to perform to get this badge\n+    b_activities = models.ManyToManyField(BadgeActivity)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Newcomer(models.Model):\n+    username = models.CharField(max_length=100, primary_key=True)\n+\n+    # Total points earned by the newcomer\n+    score = models.IntegerField(default=0, null=True)\n+\n+    # Current level\n+    level = models.ForeignKey(Level, on_delete=models.CASCADE,\n+        default=1, null=True)  # Ignore PycodestyleBear (E128)\n+\n+    # All the activities performed\n+    activities = models.ManyToManyField(Activity)\n+    badges = models.ManyToManyField(Badge)\n+\n+    def __str__(self):\n+        return self.username\n+\n+    class Meta:\n+        ordering = ['-score']\n+\n+    def add_points(self, points, activity_string):\n+        \"\"\"\n+        Update score, level and add activities peformed.\n+\n+        :param points: an integer value representing the\n+                       points earned by the newcomer\n+                       for performing an activity\n+        :param activity_string: represents the activity\n+                                performed by the newcomer\n+        \"\"\"\n+        self.update_score_and_level(points)\n+        self.add_activity(points, activity_string)\n+\n+    def deduct_points(self, points_to_deduct, activity_string):\n+        \"\"\"\n+        Deduct points for performing some specific activities.\n+        \"\"\"\n+        self.add_points(-points_to_deduct, activity_string)\n+\n+    def find_level_for_score(self, score):\n+        \"\"\"\n+        Find suitable level based on the total score earned.\n+        \"\"\"\n+        level = Level.objects.get(min_score__lte=score, max_score__gt=score)\n+        return level\n+\n+    def update_score_and_level(self, points):\n+        \"\"\"\n+        Update score and level based on points.\n+        \"\"\"\n+        if points < 0 and self.score < abs(points):\n+            new_score = self.score = 0\n+        else:\n+            self.score += points\n+            new_score = self.score\n+\n+        new_level = self.find_level_for_score(new_score)\n+        if new_level.number > self.level.number:\n+            self.level = new_level\n+\n+    def add_activity(self, points, activity_string):\n+        \"\"\"\n+        Add activity to the newcomer.\n+\n+        This methof checks if the current activity is\n+        already peformed by the user, if yes, then it\n+        increase the 'number_of_times' field with one.\n+        If not then it adds a new activity to the newcomer.\n+        \"\"\"\n+        activity, created = Activity.objects.get_or_create(\n+            name=activity_string, points=points)\n+        if created:\n+            activity.save()\n+            self.activities.add(activity)\n+        else:\n+            activity.number_of_times += 1\n+            activity.save()\n+\n+    def find_badges_for_activity(self, activities):\n+        \"\"\"\n+        Find the badge based on the activities peformed by the newcomer.\n+\n+        :param activities: a QuerySet dict containing the 'name'\n+                           as key and 'name of the activity' as value\n+        :return: a badge object\n+        \"\"\"\n+        activities = [activity['name'] for activity in activities]\n+        badge = Badge.objects.filter(\n+            b_activities__name__in=activities).distinct()\n+        return badge\n+\n+    def add_badge(self, activities):\n+        \"\"\"\n+        Add badge to newcomer based on the activities performed.", "created_at": "2018-07-04T02:25:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkwMjYwMw==", "fields": {"body": "put them into an array, and then format them at the end when raising the exception", "diff": "@@ -1,45 +1,43 @@\n-from coala_utils.Comparable import Comparable\n+import unittest\n \n+from coala_utils.Comparable import Comparable\n \n-def _assert_comparable_equal(observed_result, expected_result):\n-    \"\"\"\n-    Compares individual fields of the result objects using\n-    `__compare_fields__` of `coala_utils.Comparable` class\n-    and yields messages in case of an attribute mismatch.\n-    \"\"\"\n \n-    if not len(observed_result) == len(expected_result):\n-        assert observed_result == expected_result, '%s != %s' % (\n-            observed_result, expected_result)\n-\n-    messages = ''\n-    for observed, expected in zip(observed_result, expected_result):\n-        if (isinstance(observed, Comparable) and\n-            isinstance(expected, Comparable)) and (type(observed) is\n-                                                   type(expected)):\n-            for attribute in type(observed).__compare_fields__:\n-                try:\n-                    assert getattr(observed, attribute) == getattr(\n-                        expected, attribute), (\n-                        '{} mismatch: {}, {} != {}, {}'.format(\n-                            attribute,\n-                            observed.origin, observed.message,\n-                            expected.origin, expected.message))\n-                except AssertionError as ex:\n-                    messages += (str(ex) + '\\n\\n')\n-        else:\n-            assert observed_result == expected_result, '%s != %s' % (\n-                observed_result, expected_result)\n-\n-    if messages:\n-        raise AssertionError(messages)\n-\n-\n-class BaseTestHelper:\n+class BaseTestHelper(unittest.TestCase):\n     \"\"\"\n     This is a base class for all Bears' tests of coala's testing API.\n     \"\"\"\n \n+    def _assert_comparable_equal(self,\n+                                 observed_result,\n+                                 expected_result):\n+        \"\"\"\n+        Compares individual fields of the result objects using\n+        `__compare_fields__` of `coala_utils.Comparable` class\n+        and yields messages in case of an attribute mismatch.\n+        \"\"\"\n+\n+        if not len(observed_result) == len(expected_result):\n+            self.assertEqual(observed_result, expected_result)\n+\n+        messages = ''", "created_at": "2018-07-03T18:06:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDA2Mg==", "fields": {"body": "We should move that asap to coala-utils ;) Maybe even extend it to something like cached_property:\n@cached_property\ndef myprop(self):\n    ...", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines\n+\n+\n+class Memoize:\n+    \"\"\"\n+    ``Memoize`` serves as a decorator for the properties\n+    of ``FileFactory`` and caches the results of the property\n+    for a particular ``FileFactory`` object.\n+    \"\"\"", "created_at": "2018-07-03T20:02:42Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDY5NA==", "fields": {"body": "Can we add here\nfunctools.update_wrapper(self, func)\n\nthen the signatures look a bit nicer ;)", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines\n+\n+\n+class Memoize:\n+    \"\"\"\n+    ``Memoize`` serves as a decorator for the properties\n+    of ``FileFactory`` and caches the results of the property\n+    for a particular ``FileFactory`` object.\n+    \"\"\"\n+\n+    def __init__(self, method):\n+        self._method = method", "created_at": "2018-07-03T20:05:24Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNzQ3NQ==", "fields": {"body": "do we still need all that?", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines", "created_at": "2018-07-03T20:16:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAxNjQ2MQ==", "fields": {"body": "id=\"search\" class=\"validate\" can you remove those suplimentar spaces there?", "diff": "@@ -1,8 +1,9 @@\n <section>\n <div class=\"main-content container\">\n \n-    <div class=\"col-md-8 col-md-offset-2\">\n-        <input ng-model=\"searchText\" placeholder=\"Search for a bear or a language\" id=\"search\" type=\"text\" class=\"validate\">\n+    <div class=\"col-md-8 col-md-offset-2 input-field\">\n+      <input ng-model=\"searchText\" placeholder=\"Search for a bear or a language\" id=\"search\"   class=\"validate\" type=\"search\" required>", "created_at": "2017-02-08T08:54:21Z", "last_edited_at": null, "author": "impmihai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAyODE4Mg==", "fields": {"body": "@gkrishnan724  I think this will help text centering  to be backwards compatible as its in -moz-placeholder (firefox 18-)", "diff": "@@ -223,19 +227,19 @@ textarea.materialize-textarea {\n }\n :-moz-placeholder {\n   /* Firefox 18- */\n-\n+  text-align: center;", "created_at": "2017-02-08T09:56:30Z", "last_edited_at": "2017-02-08T09:57:35Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0MDkyNA==", "fields": {"body": "Problem is that those tests don't check for the actual result message. If possible write some tests that check whether your regex is working correctly^^", "diff": "@@ -37,10 +38,16 @@ def run(self, filename, file,\n             json_content = json.loads(''.join(file),\n                                       object_pairs_hook=OrderedDict)\n         except JSONDecodeError as err:\n+            err_content = str(err).split(':')", "created_at": "2017-02-08T18:54:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0MzQzMg==", "fields": {"body": "Can we have \"This helps devs whose favourite tools were not supported\"?", "diff": "@@ -1,39 +1,48 @@\n-This project enhances our linter framework and creates a number\n-of third party tool integrations.\n-\n A very easy way to cover a broad spectrum of analysis routines\n is wrapping linters into coala. Currently we have the `@linter` decorator\n which simplifies this integration. Based on this decorator, a large selection\n-of linters can be implemented rapidly. A tutorial on writing linter bears is\n+of linters can be implemented rapidly. \n+\n+This project would widen the range of existing linters coala supports and makes \n+them available for usage in coala. This helps devs that had their favourite tools\n+not supported before. It also enhances the testing API of linter bears, which are", "created_at": "2017-02-08T19:05:26Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NDQ0Ng==", "fields": {"body": "most students dont know what a cEP is. Maybe link to https://coala.io/cep", "diff": "@@ -1,28 +1,57 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. With it, coala runs\n+code analysis only on files that had changed since the last run, giving a\n+huge amortized performance improvement compared to simply running coala on\n+everything regardless. But it is still rather slow and there is still\n+room for improvement.\n \n-Own performance optimization ideas are highly encouraged!\n+For example, we recently discovered that we have been importing all\n+the required modules irrespective of the conditional branch the program\n+takes - some branches do not require some modules. We improved this\n+by lazy-loading only the required modules as and when they are required - and\n+this greatly improved coala's startup speed.\n \n+Performance is key to usability - with faster runtimes, users can get on\n+with their work quicker. And it's fun looking for performance bottlenecks!\n+\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n+\n+The student is also highly encouraged to come up with new solutions that may\n+increase performance even further.\n \n #### Milestones\n \n-##### GSOC 2017 COMMUNITY BONDING\n+##### PREPARATION/BONDING\n+\n+* The applicant has identified at least 3 other performance bottlenecks that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  ", "created_at": "2017-02-08T19:09:55Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NTU4Nw==", "fields": {"body": "they are in the .js file and displayed next to the text", "diff": "@@ -1,28 +1,57 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. With it, coala runs\n+code analysis only on files that had changed since the last run, giving a\n+huge amortized performance improvement compared to simply running coala on\n+everything regardless. But it is still rather slow and there is still\n+room for improvement.\n \n-Own performance optimization ideas are highly encouraged!\n+For example, we recently discovered that we have been importing all\n+the required modules irrespective of the conditional branch the program\n+takes - some branches do not require some modules. We improved this\n+by lazy-loading only the required modules as and when they are required - and\n+this greatly improved coala's startup speed.\n \n+Performance is key to usability - with faster runtimes, users can get on\n+with their work quicker. And it's fun looking for performance bottlenecks!\n+\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.", "created_at": "2017-02-08T19:15:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQ2MjkyNw==", "fields": {"body": "IMO would be better if in the next line.", "diff": "@@ -70,7 +70,9 @@ Creating a new branch\n ---------------------\n \n To start working on an issue, you first need to create a new branch where you\n-will work.\n+will work. Why make a new branch? If you develop on the master branch, you can", "created_at": "2017-02-10T02:51:56Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQ2MzI2Mg==", "fields": {"body": "This line is redundant. Doesn't looks good.", "diff": "@@ -159,6 +175,11 @@ shift + Z twice).\n Pushing the commit\n ------------------\n \n+Once again, make sure you're on the right branch! If you push from the master\n+branch, all you're doing is creating problems for yourself. If you've been\n+following this guide, and this is your first pull request, you should", "created_at": "2017-02-10T02:55:06Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQwMDYyMA==", "fields": {"body": "But we should support that, as often linters do emit messages like\nmy-file.py: L3C9: Error detected\nanother-file.txt: L10C9: Total bad\n\nThat's why we should support for global bears a (?P<filename>.*): L\\d+C\\d+...", "diff": "@@ -316,18 +319,28 @@ def _convert_output_regex_match_to_result(self,\n                 groups['origin'] = '{} ({})'.format(klass.__name__,\n                                                     groups['origin'].strip())\n \n-            # Construct the result.\n-            return Result.from_values(\n-                origin=groups.get('origin', self),\n-                message=(groups.get('message', '').strip()\n-                         if result_message is None else result_message),\n-                file=filename,\n-                severity=groups['severity'],\n-                line=groups['line'],\n-                column=groups['column'],\n-                end_line=groups['end_line'],\n-                end_column=groups['end_column'],\n-                additional_info=groups.get('additional_info', '').strip())\n+            # Construct the result. For LocalBears we use Result.from_values\n+            # and give all the file related info.\n+            # For GlobalBears we consruct a project scope result.", "created_at": "2017-02-09T20:11:29Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQwMzE5Ng==", "fields": {"body": "so what @Makman2 suggested would work... just keep single quotes for the first line and do what he suggested in second line... \ud83d\ude04", "diff": "@@ -405,13 +405,21 @@ def instantiate_processes(section,\n                         'control_queue': control_queue,\n                         'timeout': 0.1}\n \n+    loaded_local_bears_count = len(local_bear_list)\n     local_bear_list[:], global_bear_list[:] = instantiate_bears(\n         section,\n         local_bear_list,\n         global_bear_list,\n         complete_file_dict,\n         message_queue,\n         console_printer=console_printer)\n+    loaded_valid_local_bears_count = len(local_bear_list)\n+\n+    if(loaded_local_bears_count != loaded_valid_local_bears_count):\n+        if cache:\n+            log_printer.debug('The cached files have been reset because one of'\n+                              'the bears didn\\'t meet it\\'s requirements.')", "created_at": "2017-02-09T20:24:00Z", "last_edited_at": null, "author": "dracarys09", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY0ODA2Ng==", "fields": {"body": "Any reason for keeping it?\nAs soon as the docstyle bear is finished (I hope someday...), we switch to this format anyway^^", "diff": "@@ -0,0 +1,501 @@\n+from functools import partial\n+import inspect\n+import logging\n+from os import makedirs\n+from os.path import join, abspath, exists\n+\n+from appdirs import user_data_dir\n+\n+from coala_utils.decorators import (enforce_signature, classproperty,\n+                                    get_public_members)\n+\n+import requests\n+\n+from coalib.results.Result import Result\n+from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.FunctionMetadata import FunctionMetadata\n+from coalib.settings.Section import Section\n+\n+\n+class Bear:\n+    \"\"\"\n+    A bear contains the actual subroutine that is responsible for checking\n+    source code for certain specifications. However, it can actually do\n+    whatever it wants with the files it gets.\n+\n+    This is the base class for every bear. If you want to write a bear, you\n+    will probably want to look at the ``ProjectBear`` and ``FileBear`` classes\n+    that inherit from this class.\n+\n+    To indicate which languages your bear supports, just give it the\n+    ``LANGUAGES`` value which should be a set of string(s):\n+\n+    >>> class SomeBear(Bear):\n+    ...     LANGUAGES = {'C', 'CPP', 'C#', 'D'}\n+\n+    To indicate the requirements of the bear, assign ``REQUIREMENTS`` a set\n+    with instances of ``PackageRequirements``.\n+\n+    >>> from dependency_management.requirements.PackageRequirement import (\n+    ...     PackageRequirement)\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {\n+    ...         PackageRequirement('pip', 'coala_decorators', '0.2.1')}\n+\n+    If your bear uses requirements from a manager we have a subclass from,\n+    you can use the subclass, such as ``PipRequirement``, without specifying\n+    manager:\n+\n+    >>> from dependency_management.requirements.PipRequirement import (\n+    ...     PipRequirement)\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {PipRequirement('coala_decorators', '0.2.1')}\n+\n+    To specify additional attributes to your bear, use the following:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    ...     MAINTAINERS = {'Catelyn Stark'}\n+    ...     MAINTAINERS_EMAILS = {'catelyn_stark@gmail.com'}\n+    ...     LICENSE = 'AGPL-3.0'\n+    ...     ASCIINEMA_URL = 'https://asciinema.org/a/80761'\n+\n+    If the maintainers are the same as the authors, they can be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    >>> SomeBear.maintainers\n+    {'Jon Snow'}\n+    >>> SomeBear.maintainers_emails\n+    {'jon_snow@gmail.com'}\n+\n+    If your bear needs to include local files, then specify it giving strings\n+    containing relative file paths to the INCLUDE_LOCAL_FILES set:\n+\n+    >>> class SomeBear(Bear):\n+    ...     INCLUDE_LOCAL_FILES = {'checkstyle.jar', 'google_checks.xml'}\n+\n+    To keep track easier of what a bear can do, simply tell it to the\n+    ``CAN_FIX`` and the ``CAN_DETECT`` sets. Possible values are:\n+\n+    >>> CAN_DETECT = {'Syntax', 'Formatting', 'Security', 'Complexity',\n+    ... 'Smell', 'Unused Code', 'Redundancy', 'Variable Misuse', 'Spelling',\n+    ... 'Memory Leak', 'Documentation', 'Duplication', 'Commented Code',\n+    ... 'Grammar', 'Missing Import', 'Unreachable Code', 'Undefined Element',\n+    ... 'Code Simplification'}\n+    >>> CAN_FIX = {'Syntax', ...}\n+\n+    Specifying something to ``CAN_FIX`` makes it obvious that it can be\n+    detected too, so it may be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     CAN_DETECT = {'Syntax', 'Security'}\n+    ...     CAN_FIX = {'Redundancy'}\n+    >>> sorted(SomeBear.can_detect)\n+    ['Redundancy', 'Security', 'Syntax']\n+\n+    Every bear has a data directory which is unique to that particular bear:\n+\n+    >>> class SomeBear(Bear): pass\n+    >>> class SomeOtherBear(Bear): pass\n+    >>> SomeBear.data_dir == SomeOtherBear.data_dir\n+    False\n+\n+    A bear can be dependant from other bears. ``BEAR_DEPS`` contains bear\n+    classes that are to be executed before this bear gets executed. The results\n+    of these bears will then be passed inside ``self.dependency_results`` as a\n+    dict. The dict will have the name of the bear as key and a list of its\n+    results as values:\n+\n+    >>> class SomeBear(Bear): pass\n+    >>> class SomeOtherBear(Bear):\n+    ...     BEAR_DEPS = {SomeBear}\n+    >>> SomeOtherBear.BEAR_DEPS\n+    {<class 'coalib.core.Bear.SomeBear'>}\n+    \"\"\"\n+\n+    LANGUAGES = set()\n+    REQUIREMENTS = set()\n+    AUTHORS = set()\n+    AUTHORS_EMAILS = set()\n+    MAINTAINERS = set()\n+    MAINTAINERS_EMAILS = set()\n+    PLATFORMS = {'any'}\n+    LICENSE = ''\n+    INCLUDE_LOCAL_FILES = set()\n+    CAN_DETECT = set()\n+    CAN_FIX = set()\n+    ASCIINEMA_URL = ''\n+    BEAR_DEPS = set()\n+\n+    @classproperty\n+    def name(cls):\n+        \"\"\"\n+        :return:\n+            The name of the bear.", "created_at": "2017-02-10T23:56:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY3NDU5MQ==", "fields": {"body": "makes it easier to test.", "diff": "@@ -6,10 +6,69 @@\n \n \n import sys\n+from os import chdir, getcwd\n from os.path import join, dirname\n+from subprocess import check_output, CalledProcessError\n \n \n-VERSION_FILE = join(dirname(__file__), 'VERSION')\n+COALIB_DIR = dirname(__file__)\n+\n+VERSION_FILE = join(COALIB_DIR, 'VERSION')\n+\n+COMMIT_FILE = join(COALIB_DIR, 'COMMIT')\n+\n+\n+def get_current_commit(git_repo_dir):\n+    \"\"\"\n+    :param git_repo_dir:    string containing the directory to check the\n+                            current commit in.\n+    :return:                string containing the current commit sha if\n+                            `git_repo_dir`is initialized as a git repo\n+                            otherwise an empty string.\n+    \"\"\"\n+    old_dir = getcwd()\n+    cwd_changed = False\n+\n+    if(old_dir != git_repo_dir):\n+        chdir(git_repo_dir)\n+        cwd_changed = True\n+\n+    try:\n+        commit = check_output(['git', 'rev-parse', 'HEAD'])\n+        commit = commit.decode('utf-8').strip()\n+\n+        status = check_output(['git', 'status', '--porcelain'])\n+        status = status.decode('utf-8').strip()\n+        if status:\n+            commit += '*'\n+    except (OSError, CalledProcessError) as e:\n+        commit = ''\n+\n+    if(cwd_changed):\n+        chdir(old_dir)\n+    return commit\n+\n+\n+def get_commit(git_repo_dir, commit_file):", "created_at": "2017-02-11T19:12:32Z", "last_edited_at": null, "author": "arush0311", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY3Njk1Ng==", "fields": {"body": "unnecessary braces", "diff": "@@ -6,10 +6,69 @@\n \n \n import sys\n+from os import chdir, getcwd\n from os.path import join, dirname\n+from subprocess import check_output, CalledProcessError\n \n \n-VERSION_FILE = join(dirname(__file__), 'VERSION')\n+COALIB_DIR = dirname(__file__)\n+\n+VERSION_FILE = join(COALIB_DIR, 'VERSION')\n+\n+COMMIT_FILE = join(COALIB_DIR, 'COMMIT')\n+\n+\n+def get_current_commit(git_repo_dir):\n+    \"\"\"\n+    :param git_repo_dir:    string containing the directory to check the\n+                            current commit in.\n+    :return:                string containing the current commit sha if\n+                            `git_repo_dir`is initialized as a git repo\n+                            otherwise an empty string.\n+    \"\"\"\n+    old_dir = getcwd()\n+    cwd_changed = False\n+\n+    if(old_dir != git_repo_dir):", "created_at": "2017-02-11T21:12:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDg4NTk0MA==", "fields": {"body": "Yes, but the issue seemed to ask for periodic checks if they're on master, should I still remove this?", "diff": "@@ -110,6 +122,15 @@ It will give you an idea about what files are currently modified.\n Adding the files and commiting\n ------------------------------\n \n+First, make sure you're on the correct branch and not developing on master! If\n+you've been following this guide, and this is your first pull request,\n+you should be developing on the \"my-first-good-pull-request\" branch.\n+You can check your branch with:\n+\n+::\n+\n+    $ git status\n+", "created_at": "2017-02-13T20:09:55Z", "last_edited_at": "2017-02-13T20:10:16Z", "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTAyNzU5Ng==", "fields": {"body": "You should leave a new line after the function description", "diff": "@@ -70,6 +71,23 @@ def from_string_arrays(cls, file_array_1, file_array_2, rename=False):\n         return result\n \n     @classmethod\n+    def from_unidiff(cls, diff_array):\n+        \"\"\"\n+        Creates a Diff object from given unified diff.\n+        :param diff_array: list of lines of unified diff.", "created_at": "2017-02-14T12:53:40Z", "last_edited_at": null, "author": "impmihai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTI0NzkyOQ==", "fields": {"body": "No it's required - it's splitting up the original example given in line 11-18 into three parts and explaining each part by requoting it.", "diff": "@@ -115,7 +115,7 @@ Example:\n \n ::\n \n-    Fixes https://github.com/coala/coala/issues/269\n+    Closes https://github.com/coala/coala/issues/269", "created_at": "2017-02-15T10:38:17Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTI2ODkxMw==", "fields": {"body": "@adtac It is installing the packages correctly, curl and 7z must be installed by default I guess", "diff": "@@ -56,6 +56,15 @@ install:\n   - \"npm config set loglevel warn\"\n   - \"npm install\"\n \n+  - curl -fsSL ftp://ftp.zlatkovic.com/libxml/iconv-1.9.2.win32.zip -o iconv.zip", "created_at": "2017-02-15T12:47:51Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTM2NDIyNA==", "fields": {"body": "I'm just concerned about the function signature.", "diff": "@@ -1,21 +1,17 @@\n+import logging\n import os\n \n-from pyprint.ConsolePrinter import ConsolePrinter\n-\n from coalib.output.Logging import configure_logging\n-from coalib.output.printers.LogPrinter import LogPrinter\n from coalib.parsing import Globbing\n+from coalib.parsing.Globbing import glob_escape\n from coalib.settings.ConfigurationGathering import get_config_directory\n from coalib.settings.Section import Section\n-from coalib.parsing.Globbing import glob_escape\n \n \n-def main(log_printer=None, section: Section=None):\n+def main(section: Section=None):", "created_at": "2017-02-15T19:37:56Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTQwMzYyNA==", "fields": {"body": "@SanketDG , there is no change here on this line ... this line was previously install step 3 -- now it is step 4.  Other than that, it is not changed.\npyenv is a Python installer.\npyvenv is part of Python, deprecated in 3.6 and slated for removal in 3.8, replaced in 3.3 with venv\nThis can be changed from pyvenv to venv", "diff": "@@ -13,7 +13,15 @@ Coverage Installation Hints for macOS Users:\n     $ brew install python3\n     $ python3 --version   # To check the installed version\n \n-3. Create Virtual Environments with pyvenv\n+3. Install pyenv with homebrew\n+------------------------------\n+\n+::\n+\n+    $ brew update\n+    $ brew install pyenv\n+\n+4. Create Virtual Environments with pyvenv", "created_at": "2017-02-15T22:49:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTU2NDM1Mw==", "fields": {"body": "good question actually, we could still break the received diff into chunks...\nWe already had the discussion about meaningful diff-distances for the corrected output format, and this is highly non-trivial. Best would be if the program itself emits several patches addressing separate issues, though most tools don't do so (actually I haven't seen a single one).\nFor simplicity I can accept no diff-distance at all for this PR and emitting the whole patch file as a result. But we need an issue to discuss the introduction of diff-distance.", "diff": "@@ -368,6 +379,37 @@ def process_output_corrected(self,\n                              diffs={filename: diff},\n                              severity=diff_severity)\n \n+        def process_output_unidiff(self,\n+                                   output,\n+                                   filename,\n+                                   file,\n+                                   diff_severity=RESULT_SEVERITY.NORMAL,\n+                                   result_message='Inconsistency found.'):", "created_at": "2017-02-16T16:31:56Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTU2NTAxNQ==", "fields": {"body": "Actually it's possible to disable diff-splitting by setting diff-distance to 0 or -1. So yeah let's introduce diff-distance \ud83d\udc4d", "diff": "@@ -368,6 +379,37 @@ def process_output_corrected(self,\n                              diffs={filename: diff},\n                              severity=diff_severity)\n \n+        def process_output_unidiff(self,\n+                                   output,\n+                                   filename,\n+                                   file,\n+                                   diff_severity=RESULT_SEVERITY.NORMAL,\n+                                   result_message='Inconsistency found.'):", "created_at": "2017-02-16T16:34:18Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTUwMjkzMw==", "fields": {"body": "I think we should allow for lines with only a # in them: for example, if you're writing a long comment and want a paragraph break, this will be useful. Example:\n# Line 1\n#\n# Line 2\n\nBut currently, this will be flagged.", "diff": "@@ -78,6 +79,10 @@ def _parse(self, line):\n                      [(section_override, key), ...], value, to_append (True if\n                      append delimiter is found else False), comment\n         \"\"\"\n+        if re.match('[^ ]#', line) is not None or\\\n+           re.match('#[^ ]', line) is not None:", "created_at": "2017-02-16T12:01:30Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTg4NTUxNQ==", "fields": {"body": "PEP8Bear is deprecated use PycodestyleBear but here just run coala locally and it'll show the errors", "diff": "@@ -104,8 +104,19 @@ def run(self, allow_empty_commit_message: bool = False, **kwargs):\n \n         stdout = stdout.rstrip('\\n')\n         pos = stdout.find('\\n')\n+        count = 0\n         shortlog = stdout[:pos] if pos != -1 else stdout\n-        body = stdout[pos+1:] if pos != -1 else ''\n+        pos = pos + 1\n+\n+        while (stdout[pos+1] == '\\n'):\n+            count++\n+\n+        if count == 0:\n+            body = stdout[pos+1:] if pos != -1 else ''\n+        else\n+            yield Result(self,", "created_at": "2017-02-18T05:44:53Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk2NjgzMw==", "fields": {"body": "this shouldn't be given, coala does ignoring and we shouldn't repeat the functionality as a setting", "diff": "@@ -0,0 +1,48 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='licensecheck',\n+        output_format='regex',\n+        output_regex=r'(?P<message>\\S+.*)')\n+class LicenseCheckBear:\n+    \"\"\"\n+    Attempts to determine the license that applies to each file passed to\n+    it, by searching the start of the file for text belonging to various\n+    licenses.\n+    \"\"\"\n+    LANGUAGES = {'ALL'}\n+    REQUIREMENTS = {DistributionRequirement(apt_get='devscripts')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'License', 'Copyright Notice'}\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         licensecheck_lines: int=60,\n+                         licensecheck_ignore: str='',\n+                         licensecheck_check: str='',\n+                         licensecheck_copyright: bool=False):\n+        \"\"\"\n+        :param licensecheck_lines:\n+            Specify how many lines of the file header should be parsed\n+            for license information.\n+        :param licensecheck_ignore:\n+            Specify that files/directories matching the regular expression\n+            should be ignored when checking files.", "created_at": "2017-02-20T08:36:14Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwMTY5Mw==", "fields": {"body": "put system imports before coalib imports", "diff": "@@ -1,10 +1,13 @@\n+from collections import namedtuple\n+\n from coalib.bearlib.languages.LanguageDefinition import LanguageDefinition\n from coalib.bears.LocalBear import LocalBear\n from coalib.results.HiddenResult import HiddenResult\n from coalib.results.Result import Result, RESULT_SEVERITY\n from coalib.results.SourceRange import SourceRange\n from coalib.results.AbsolutePosition import AbsolutePosition\n from coala_utils.string_processing.Core import unescaped_search_for\n+import sys", "created_at": "2017-02-18T20:25:06Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwMjg0Nw==", "fields": {"body": "dependant -> dependent", "diff": "@@ -0,0 +1,502 @@\n+from functools import partial\n+import inspect\n+import logging\n+from os import makedirs\n+from os.path import join, abspath, exists\n+\n+from appdirs import user_data_dir\n+\n+from coala_utils.decorators import (enforce_signature, classproperty,\n+                                    get_public_members)\n+\n+import requests\n+\n+from coalib.results.Result import Result\n+from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.FunctionMetadata import FunctionMetadata\n+from coalib.settings.Section import Section\n+\n+\n+class Bear:\n+    \"\"\"\n+    A bear contains the actual subroutine that is responsible for checking\n+    source code for certain specifications. However, it can actually do\n+    whatever it wants with the files it gets.\n+\n+    This is the base class for every bear. If you want to write a bear, you\n+    will probably want to look at the ``ProjectBear`` and ``FileBear`` classes\n+    that inherit from this class.\n+\n+    To indicate which languages your bear supports, just give it the\n+    ``LANGUAGES`` value which should be a set of string(s):\n+\n+    >>> class SomeBear(Bear):\n+    ...     LANGUAGES = {'C', 'CPP', 'C#', 'D'}\n+\n+    To indicate the requirements of the bear, assign ``REQUIREMENTS`` a set\n+    with instances of ``PackageRequirements``.\n+\n+    >>> from dependency_management.requirements.PackageRequirement import (\n+    ...     PackageRequirement)\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {\n+    ...         PackageRequirement('pip', 'coala_decorators', '0.2.1')}\n+\n+    If your bear uses requirements from a manager we have a subclass from,\n+    you can use the subclass, such as ``PipRequirement``, without specifying\n+    manager:\n+\n+    >>> from dependency_management.requirements.PipRequirement import (\n+    ...     PipRequirement)\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {PipRequirement('coala_decorators', '0.2.1')}\n+\n+    To specify additional attributes to your bear, use the following:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    ...     MAINTAINERS = {'Catelyn Stark'}\n+    ...     MAINTAINERS_EMAILS = {'catelyn_stark@gmail.com'}\n+    ...     LICENSE = 'AGPL-3.0'\n+    ...     ASCIINEMA_URL = 'https://asciinema.org/a/80761'\n+\n+    If the maintainers are the same as the authors, they can be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    >>> SomeBear.maintainers\n+    {'Jon Snow'}\n+    >>> SomeBear.maintainers_emails\n+    {'jon_snow@gmail.com'}\n+\n+    If your bear needs to include local files, then specify it giving strings\n+    containing relative file paths to the INCLUDE_LOCAL_FILES set:\n+\n+    >>> class SomeBear(Bear):\n+    ...     INCLUDE_LOCAL_FILES = {'checkstyle.jar', 'google_checks.xml'}\n+\n+    To keep track easier of what a bear can do, simply tell it to the\n+    ``CAN_FIX`` and the ``CAN_DETECT`` sets. Possible values are:\n+\n+    >>> CAN_DETECT = {'Syntax', 'Formatting', 'Security', 'Complexity',\n+    ... 'Smell', 'Unused Code', 'Redundancy', 'Variable Misuse', 'Spelling',\n+    ... 'Memory Leak', 'Documentation', 'Duplication', 'Commented Code',\n+    ... 'Grammar', 'Missing Import', 'Unreachable Code', 'Undefined Element',\n+    ... 'Code Simplification'}\n+    >>> CAN_FIX = {'Syntax', ...}\n+\n+    Specifying something to ``CAN_FIX`` makes it obvious that it can be\n+    detected too, so it may be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     CAN_DETECT = {'Syntax', 'Security'}\n+    ...     CAN_FIX = {'Redundancy'}\n+    >>> sorted(SomeBear.can_detect)\n+    ['Redundancy', 'Security', 'Syntax']\n+\n+    Every bear has a data directory which is unique to that particular bear:\n+\n+    >>> class SomeBear(Bear): pass\n+    >>> class SomeOtherBear(Bear): pass\n+    >>> SomeBear.data_dir == SomeOtherBear.data_dir\n+    False\n+\n+    A bear can be dependant from other bears. ``BEAR_DEPS`` contains bear", "created_at": "2017-02-18T21:22:39Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwOTQ4NA==", "fields": {"body": "move this one line above and reuse test_file_path", "diff": "@@ -0,0 +1,78 @@\n+from queue import Queue\n+import os.path\n+\n+from bears.general.LicenseCheckBear import LicenseCheckBear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from coalib.results.Result import Result\n+from coalib.settings.Section import Section\n+\n+\n+def get_testfile_path(name):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'licensecheck_test_files',\n+                        name)\n+\n+\n+def load_testfile(name):\n+    with open(get_testfile_path(name)) as fl:\n+        contents = fl.read()\n+\n+    return contents\n+\n+\n+@generate_skip_decorator(LicenseCheckBear)\n+class LicenseCheckBearTest(LocalBearTestHelper):\n+\n+    def setUp(self):\n+        self.uut = LicenseCheckBear(Section('name'), Queue())\n+\n+    def test_license(self):\n+        file_contents = [load_testfile(\n+            get_testfile_path('apache_license_2.py'))]\n+        test_file_path = get_testfile_path('apache_license_2.py')", "created_at": "2017-02-19T05:54:55Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwOTQxNA==", "fields": {"body": "Just give this directly, there's no need for a conditional statement.", "diff": "@@ -0,0 +1,49 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='licensecheck',\n+        output_format='regex',\n+        output_regex=r'(?P<message>\\S+.*)')\n+class LicenseCheckBear:\n+    \"\"\"\n+    Attempts to determine the license that applies to each file passed to\n+    it, by searching the start of the file for text belonging to various\n+    licenses.\n+    \"\"\"\n+    LANGUAGES = {'ALL'}\n+    REQUIREMENTS = {DistributionRequirement(apt_get='devscripts')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'License', 'Copyright Notice'}\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         licensecheck_lines: int = 60,\n+                         licensecheck_ignore: str = '',\n+                         licensecheck_check: str = '',\n+                         licensecheck_copyright: bool=False):\n+        \"\"\"\n+        :param licensecheck_lines:\n+            Specify how many lines of the file header should be parsed\n+            for license information.\n+        :param licensecheck_ignore:\n+            Specify that files/directories matching the regular expression\n+            should be ignored when checking files.\n+        :param licensecheck_check:\n+            Specify a pattern indicating which files should be checked.\n+        :param licensecheck_copyright:\n+            Display the file's copyright\n+        \"\"\"\n+        args = ()\n+        if licensecheck_lines != 60:\n+            args += ('--lines', str(licensecheck_lines))", "created_at": "2017-02-19T05:50:23Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwOTQxNQ==", "fields": {"body": "No spaces around the = (see also the other lines below)", "diff": "@@ -0,0 +1,49 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='licensecheck',\n+        output_format='regex',\n+        output_regex=r'(?P<message>\\S+.*)')\n+class LicenseCheckBear:\n+    \"\"\"\n+    Attempts to determine the license that applies to each file passed to\n+    it, by searching the start of the file for text belonging to various\n+    licenses.\n+    \"\"\"\n+    LANGUAGES = {'ALL'}\n+    REQUIREMENTS = {DistributionRequirement(apt_get='devscripts')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'License', 'Copyright Notice'}\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         licensecheck_lines: int = 60,", "created_at": "2017-02-19T05:50:48Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkyNDkyMA==", "fields": {"body": "@damngamerz These tests always get skipped \ud83d\ude04 Moreover there is no need for tests here.", "diff": "@@ -23,7 +23,8 @@ class RLintBear:\n     AUTHORS = {'The coala developers'}\n     AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n     REQUIREMENTS = {RscriptRequirement(package='lintr', flag='-e',\n-                                       repo='http://cran.rstudio.com')}\n+                                       repo='http://cran.rstudio.com',\n+                                       version='>=3.1.1')}", "created_at": "2017-02-19T18:26:23Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjY0NzE0Nw==", "fields": {"body": "Having multiple asserts here is completely valid. Because we already ensure that a test covers only a single functionality like say this test checks comparison of AbsolutePosition so if the first assert fails, why would I care about the other asserts? The ordering is not working that's it then and I'd modify the code to make the state valid.", "diff": "@@ -73,3 +73,18 @@ def test_instantiation(self):\n         self.assertEqual(uut.position, 5)\n         self.assertEqual(uut.line, None)\n         self.assertEqual(uut.column, None)\n+\n+    def test_ordering(self):\n+        text1 = ('A Lannister always pays his debts',)\n+        text2 = ('Hello from the other side',)\n+        uut1 = AbsolutePosition(text1, 4)\n+        uut2 = AbsolutePosition(text1, 8)\n+        uut3 = AbsolutePosition(text2, 4)\n+        uut4 = AbsolutePosition(text2, 4)\n+\n+        self.assertTrue(uut1 <= uut2)\n+        self.assertTrue(uut1 < uut2)\n+        self.assertTrue(uut1 >= uut3)\n+        self.assertTrue(uut2 > uut1)\n+        self.assertFalse(uut1 == uut2)\n+        self.assertTrue(uut1 == uut4)", "created_at": "2017-02-23T06:31:51Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjk4NjA2MA==", "fields": {"body": "5 will map to whatever's the latest in 5.x\n6 is breaking changes", "diff": "@@ -1,3 +1,12 @@\n+coala-bears 0.10.1\n+==================\n+\n+Bugfixes:\n+\n+- Remark dependency has been pinned back to ~5.4 because version 6 changes", "created_at": "2017-02-24T17:07:24Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3ODM3NA==", "fields": {"body": "Two spaces before extracted to make it inline with the above point, also do the same with the other points", "diff": "@@ -0,0 +1,53 @@\n+[coala-quickstart](https://github.com/coala/coala-quickstart) is a tool that\n+helps users to quickly get started with coala. It generates a `.coafile`\n+(coala's configuration file) that is tailored to the project. Currently,\n+coala-quickstart automatically identifies relevant bears for the project\n+based on the languages used and has a clean and simple command-line interface \n+for taking user\u2019s input when required.\n+\n+However, there\u2019s scope for improvement in the following areas:\n+\n+- Utilizing information from common configuration files: Some projects have\n+  configuration files like `Gruntfile.js`, `Gulpfile.js`, `rakefile`,\n+  `package.json`, etc which may contain useful data that's relevant to\n+  coala-quickstart. For example, if a project's Gulpfile.js specifies which\n+  files are to be linted with csslint, we could use this information to target\n+  CSSLintBear at exactly these files.\n+- Improving the interface: \n+\t- Removing non user-friendly warnings.\n+\t- Increasing automation.\n+\t- Validate user input before writing to the generated coafile.\n+- Continuous Integration: Like other coala repositories, add Appveyor \n+  (Windows) and Travis (OSX) integartions.\n+\n+In addition to the above changes the applicants are encouraged to come up with\n+their own ideas.\n+\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+* The applicant has identified all the kinds configuration files to be worked\n+on in the project.\n+* The applicant has figured out all the useful information that could be\n+extracted from these files.\n+\n+##### CODING PHASE 1\n+\n+* The basic structure of the information extraction and filtering relevant\n+bears system is implemented.\n+* coala-quickstart is able to utilize information from at leaset one of the", "created_at": "2017-02-25T12:56:40Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzMwMDgxNQ==", "fields": {"body": "could you enclose all Nones in double backticks so they get rendered as code? (None is a code keyword, so I think we should render it appropriately \ud83d\ude04  )", "diff": "@@ -497,15 +517,15 @@ def process_output(self, output, filename, file):\n \n         @classmethod\n         @contextmanager\n-        def _create_config(cls, filename, file, **kwargs):\n+        def _create_config(cls, filename=None, file=None, **kwargs):\n             \"\"\"\n             Provides a context-manager that creates the config file if the\n             user provides one and cleans it up when done with linting.\n \n             :param filename:\n-                The filename of the file.\n+                The filename of the file. None for project scope.\n             :param file:\n-                The file contents.\n+                The file contents. None for project scope.", "created_at": "2017-02-27T20:13:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQ5NTM1NA==", "fields": {"body": "@damngamerz You must be having some bugs in your code that are causing this.\nPlease read our Developer's guide thoroughly as most of the things we generally need are mentioned over there, read the documentation of PHPStan to know how exactly their config file works.\nAnd lastly, in case of some error feel free to discuss on the Gitter channel (as I might miss your notifications, others will still be able to help you out) \ud83d\ude09", "diff": "@@ -0,0 +1,21 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+\n+@linter(executable='phpstan',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+)  (?P<message>.*)')\n+class PHPStanBear:\n+    \"\"\"\n+    Checks the code with ``phpstan analyze``.\n+    This can run it on multiple files and folders.\n+    See <https://github.com/phpstan/phpstan> for more information.\n+    \"\"\"\n+    LANGUAGES = {'PHP'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax'}\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file):\n+        return ('analyse', '--no-ansi', filename)", "created_at": "2017-02-28T16:30:56Z", "last_edited_at": "2017-02-28T16:31:59Z", "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQxODI4Mw==", "fields": {"body": "This doesnt need to check all status.  While it is using a real server, it is still a very fake test covering only a basic scenario.  The same basic scenario with different codes is not worth testing.\nPerhaps a useful addition is verifying that the status code 500 does appear in the exception message.  I'll add that.", "diff": "@@ -262,6 +270,35 @@ def test_new_result(self):\n         expected = Result.from_values(bear, 'test message', '/tmp/testy')\n         self.assertEqual(result, expected)\n \n+\n+class BearDownloadTest(BearTestBase):\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.mock_url = 'https://test.com'\n+        self.filename = 'test.html'\n+\n+    def test_connection_timeout_mocked(self):\n+        exc = requests.exceptions.ConnectTimeout\n+        with requests_mock.Mocker() as reqmock:\n+            reqmock.get(self.mock_url, exc=exc)\n+            with pytest.raises(exc):\n+                self.uut.download_cached_file(\n+                    self.mock_url, self.filename)\n+\n+    def test_connection_failure(self):\n+        exc = requests.exceptions.HTTPError\n+        with pytest.raises(exc):\n+            self.uut.download_cached_file(\n+                'http://httpbin.org/status/418', self.filename)\n+\n+    def test_read_failure_httpbin(self):\n+        exc = requests.exceptions.HTTPError\n+        with pytest.raises(exc):\n+            self.uut.download_cached_file(\n+                'http://httpbin.org/drip?duration=5&numbytes=5&code=500',\n+                self.filename)\n+", "created_at": "2017-02-28T10:09:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQyNzA3Nw==", "fields": {"body": "The first one uses the initial status code, raising an exception before opening the file.  Obviously not a problem.\nI added the second one as super defensive programming (almost as a TODO item for me and the reviewer, so I am glad you questioned it).  If there is any chance of a new response during the iter_content, a new response code will occur, and maybe the response code is not the same as the original one.\nOne aspect that may trigger a new request is retries  -- surely a new request is needed to retry the fetch.  I havent thought of any other scenario where the response status code might change during the content fetch phase.\nAnd I can leave this second (and probably useles?) raise_for_status out of this PR, and tackle the retries problem in the separate bug #3804.", "diff": "@@ -423,9 +423,14 @@ def download_cached_file(self, url, filename):\n                   .format(filename=filename, bearname=self.name, url=url))\n \n         response = requests.get(url, stream=True, timeout=20)\n+        response.raise_for_status()\n+\n         with open(filename, 'wb') as file:\n             for chunk in response.iter_content(125):\n                 file.write(chunk)\n+\n+        response.raise_for_status()", "created_at": "2017-02-28T10:52:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU1NTE5Nw==", "fields": {"body": "any reason for having spaces?", "diff": "@@ -62,21 +62,29 @@ def run(self, filename, file, dependency_results,\n         :param preferred_quotation: Your preferred quotation character, e.g.\n                                     ``\"`` or ``'``.\n         \"\"\"\n-        if not isinstance(dependency_results[AnnotationBear.name][0],\n-                          HiddenResult):\n+        if not dependency_results or \\\n+            not isinstance(dependency_results[AnnotationBear.name],\n+                           HiddenResult):\n             return\n-        if isinstance(dependency_results[AnnotationBear.name][0].contents,\n+        if isinstance(dependency_results[AnnotationBear.name].contents,\n                       str):\n-            self.err(dependency_results[AnnotationBear.name][0].contents)\n+            self.err(dependency_results[AnnotationBear.name].contents)\n             return\n \n-        ranges = dependency_results[AnnotationBear.name][0].contents['strings']\n+        dep_contents = dependency_results[AnnotationBear.name].contents\n+        annotation_dict = {}\n+        s_a = 'singleline strings'\n+        s_b = 'multiline strings'", "created_at": "2017-02-28T21:25:39Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU1NjQ2OA==", "fields": {"body": "You shouldn't add versions here.", "diff": "@@ -19,7 +19,7 @@ class RLintBear:\n     \"\"\"\n     Checks the code with ``lintr``.\n     \"\"\"\n-    LANGUAGES = {'R'}\n+    LANGUAGES = {'R >=3.1.1'}", "created_at": "2017-02-28T21:31:46Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU3MTA5NA==", "fields": {"body": "Actually using namedtuple here will create problems with pickling, because we'll have to define them at module level scope and things would look absurd then.\nbtw that was the first approach.\nSo, I switched to dicts after a discussion.", "diff": "@@ -88,66 +95,130 @@ def find_annotation_ranges(self,\n             A dictionary containing the various ways to define multi-line\n             comments in a language.\n         :return:\n-            Two tuples first containing a tuple of strings, the second a tuple\n-            of comments.\n+            Four tuples containing dictionary for singleline strings,\n+            multiline strings, singleline comments and multiline comments\n+            respectively.\n         \"\"\"\n         text = ''.join(file)\n-        strings_range = []\n-        comments_range = []\n+        singleline_string_range = []\n+        multiline_string_range = []\n+        singleline_comment_range = []\n+        multiline_comment_range = []\n         position = 0\n+\n         while position <= len(text):\n \n             def get_new_position():\n-                _range, end_position = self.get_range_end_position(\n-                    file,\n-                    filename,\n-                    text,\n-                    multiline_string_delimiters,\n-                    position,\n-                    self.get_multiline)\n-                if end_position and _range:\n-                    strings_range.append(_range)\n+                end_position, start_delim, end_delim = \\\n+                    self.get_range_end_position(\n+                        file,\n+                        filename,\n+                        text,\n+                        multiline_string_delimiters,\n+                        position,\n+                        self.get_multiline)\n+                if end_position:\n+                    seperate_ranges = get_seperate_ranges(file,\n+                                                          filename,\n+                                                          start_delim,\n+                                                          end_delim,\n+                                                          position,\n+                                                          end_position)\n+                    multiline_string = {}\n+                    multiline_string[\n+                        'start_delimiter_range'] = seperate_ranges[0]\n+                    multiline_string[\n+                        'end_delimiter_range'] = seperate_ranges[1]\n+                    multiline_string['content_range'] = seperate_ranges[2]\n+                    multiline_string['full_range'] = seperate_ranges[3]\n+                    multiline_string_range.append(multiline_string)\n+\n                     return end_position + 1\n \n-                _range, end_position = self.get_range_end_position(\n-                    file,\n-                    filename,\n-                    text,\n-                    string_delimiters,\n-                    position,\n-                    self.get_singleline_strings)\n-                if end_position and _range:\n-                    strings_range.append(_range)\n+                end_position, start_delim, end_delim = \\\n+                    self.get_range_end_position(\n+                        file,\n+                        filename,\n+                        text,\n+                        string_delimiters,\n+                        position,\n+                        self.get_singleline_strings)\n+                if end_position:\n+                    seperate_ranges = get_seperate_ranges(file,\n+                                                          filename,\n+                                                          start_delim,\n+                                                          end_delim,\n+                                                          position,\n+                                                          end_position)\n+                    singleline_string = {}\n+                    singleline_string[\n+                        'start_delimiter_range'] = seperate_ranges[0]\n+                    singleline_string[\n+                        'end_delimiter_range'] = seperate_ranges[1]\n+                    singleline_string['content_range'] = seperate_ranges[2]\n+                    singleline_string['full_range'] = seperate_ranges[3]\n+                    singleline_string_range.append(singleline_string)\n                     return end_position + 1\n \n-                _range, end_position = self.get_range_end_position(\n-                    file,\n-                    filename,\n-                    text,\n-                    multiline_comment_delimiters,\n-                    position,\n-                    self.get_multiline)\n-                if end_position and _range:\n-                    comments_range.append(_range)\n+                end_position, start_delim, end_delim = \\\n+                    self.get_range_end_position(\n+                        file,\n+                        filename,\n+                        text,\n+                        multiline_comment_delimiters,\n+                        position,\n+                        self.get_multiline)\n+                if end_position:\n+                    seperate_ranges = get_seperate_ranges(file,\n+                                                          filename,\n+                                                          start_delim,\n+                                                          end_delim,\n+                                                          position,\n+                                                          end_position)\n+                    multiline_comment = {}\n+                    multiline_comment[\n+                        'start_delimiter_range'] = seperate_ranges[0]\n+                    multiline_comment[\n+                        'end_delimiter_range'] = seperate_ranges[1]\n+                    multiline_comment['content_range'] = seperate_ranges[2]\n+                    multiline_comment['full_range'] = seperate_ranges[3]\n+                    multiline_comment_range.append(multiline_comment)\n                     return end_position + 1\n \n-                _range, end_position = self.get_range_end_position(\n-                    file,\n-                    filename,\n-                    text,\n-                    comment_delimiter,\n-                    position,\n-                    self.get_singleline_comment,\n-                    single_comment=True)\n-                if end_position and _range:\n-                    comments_range.append(_range)\n+                end_position, start_delim, end_delim = \\\n+                    self.get_range_end_position(\n+                        file,\n+                        filename,\n+                        text,\n+                        comment_delimiter,\n+                        position,\n+                        self.get_singleline_comment,\n+                        single_comment=True)\n+                if end_position:\n+                    seperate_ranges = get_seperate_ranges(file,\n+                                                          filename,\n+                                                          start_delim,\n+                                                          end_delim,\n+                                                          position,\n+                                                          end_position)\n+                    singleline_comment = {}\n+                    singleline_comment[\n+                        'start_delimiter_range'] = seperate_ranges[0]\n+                    singleline_comment[\n+                        'end_delimiter_range'] = seperate_ranges[1]\n+                    singleline_comment['content_range'] = seperate_ranges[2]\n+                    singleline_comment['full_range'] = seperate_ranges[3]\n+                    singleline_comment_range.append(singleline_comment)\n                     return end_position + 1\n \n                 return position + 1\n \n             position = get_new_position()\n \n-        return tuple(strings_range), tuple(comments_range)\n+        return (tuple(singleline_string_range),\n+                tuple(multiline_string_range),\n+                tuple(singleline_comment_range),\n+                tuple(multiline_comment_range))", "created_at": "2017-02-28T22:49:15Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY0MTY1MQ==", "fields": {"body": "i think best place will be below this:\nTo install coala only (without any bears), you can do:\n\n::\n\n    $ pip3 install coala", "diff": "@@ -60,6 +60,9 @@ system-wide, use:\n     For this and all future steps, some steps require root access\n     (also known as administrative privileges in Windows).\n \n+    **Ubuntu Users** - Don't use ``apt-get install coala``\n+    for installing coala as that is different software.", "created_at": "2017-03-01T09:30:09Z", "last_edited_at": null, "author": "vaishnavm217", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzc1NTMxOQ==", "fields": {"body": "I feel this should go in the _get_change method the check for length", "diff": "@@ -352,9 +353,12 @@ def delete_line(self, line_nr):\n         \"\"\"\n         Mark the given line nr as deleted. The first line is line number 1.\n         \"\"\"\n-        linediff = self._get_change(line_nr)\n-        linediff.delete = True\n-        self._changes[line_nr] = linediff\n+        if (line_nr <= self._length):", "created_at": "2017-03-01T18:31:25Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzcxODU1MA==", "fields": {"body": "import sort: unrelated change -> separate commit :)", "diff": "@@ -1,21 +1,17 @@\n+import logging\n import os\n \n-from pyprint.ConsolePrinter import ConsolePrinter\n-\n from coalib.output.Logging import configure_logging\n-from coalib.output.printers.LogPrinter import LogPrinter\n from coalib.parsing import Globbing\n+from coalib.parsing.Globbing import glob_escape\n from coalib.settings.ConfigurationGathering import get_config_directory\n from coalib.settings.Section import Section\n-from coalib.parsing.Globbing import glob_escape", "created_at": "2017-03-01T16:00:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzcxOTMzNw==", "fields": {"body": "is the date not also enclosed in square brackets? If so I would improve the example by adding those: [WARNING][...] text text text.\nBut if you blast the line length limit, then nvm ;)", "diff": "@@ -134,9 +136,11 @@ def deprecate_bear(bear):\n     Now let's run the bear:\n \n     >>> import sys\n-    >>> logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n+    >>> from coalib.output.Logging import configure_logging\n+    >>> configure_logging(stdout=True,color=False)\n+    20\n     >>> SomeOldBear().run()\n-    WARNING:root:The bear SomeOldBear is deprecated. Use SomeBear instead!\n+    [WARNING]... The bear SomeOldBear is deprecated. Use SomeBear instead!", "created_at": "2017-03-01T16:03:10Z", "last_edited_at": "2017-03-01T16:03:36Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzkyNzc3OA==", "fields": {"body": "Also should we display proper error message in delete_lines after catching the error from _get_changes.", "diff": "@@ -352,6 +352,7 @@ def delete_line(self, line_nr):\n         \"\"\"\n         Mark the given line nr as deleted. The first line is line number 1.", "created_at": "2017-03-02T13:53:34Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDE5OTU1OA==", "fields": {"body": "I think that the sentence After making the changes, you can test the code, to your forked repository by adding the required CI tools. should be changed to After making the changes, you can test the code on your forked repository by adding the required CI tools.\nThis way it's grammatically correct.", "diff": "@@ -196,6 +196,8 @@ After that, you can run coala by simply typing\n \n into your bash. This will analyze your code and help you fix it.\n \n+After making the changes, you can test the code, to your forked repository by adding the required CI tools. To add CI tools to your forked repository, check out this `Adding CI to you fork <http://api.coala.io/en/latest/Developers/Adding_CI.html>`_", "created_at": "2017-03-03T17:14:05Z", "last_edited_at": "2017-03-03T17:14:57Z", "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM2NTI1OA==", "fields": {"body": "can you avoid (all|excessive|consecutive) blank lines in these sample files; it makes it hard to read, especially if syntax highlighting isnt present.", "diff": "@@ -0,0 +1,63 @@\n+from bears.elm.ElmLintBear import ElmLintBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+good_file_no_unexpected_comma = \"\"\"\n+module UnexpectedComma (..) where\n+", "created_at": "2017-03-06T08:45:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDQ1MTIzMw==", "fields": {"body": "Didn't you guys add all these languages? Never noticed? :P", "diff": "@@ -78,35 +78,35 @@ To see what coala can do for your language, run:\n +----------------------------+----------------------------+----------------------------+\n |                        Languages coala provides algorithms for                       |\n +============================+============================+============================+\n-| C                          | Latex                      | SQL                        |\n+| C                          | Latex                      | sh & bash scripts          |\n +----------------------------+----------------------------+----------------------------+\n-| C++                        | Lua                        | Swift                      |\n+| C++                        | Lua                        | SQL                        |\n +----------------------------+----------------------------+----------------------------+\n-| C#                         | Markdown                   | TypeScript                 |\n+| C#                         | Markdown                   | Swift                      |\n +----------------------------+----------------------------+----------------------------+\n-| CMake                      | Matlab/Octave              | Verilog                    |\n+| CMake                      | Matlab/Octave              | TypeScript                 |\n +----------------------------+----------------------------+----------------------------+\n-| CoffeeScript               | Natural Language (English) | VHDL                       |\n+| CoffeeScript               | Natural Language (English) | Verilog                    |\n +----------------------------+----------------------------+----------------------------+\n-| CSS                        | Perl                       | Vimscript                  |\n+| CSS                        | Perl                       | VHDL                       |\n +----------------------------+----------------------------+----------------------------+\n-| Dart                       | PHP                        | XML                        |\n+| Dart                       | PHP                        | Vimscript                  |\n +----------------------------+----------------------------+----------------------------+\n-| Fortran                    | Python 2                   | YAML                       |\n+| Fortran                    | Python 2                   | XML                        |\n +----------------------------+----------------------------+----------------------------+\n-| Go                         | Python 3                   |                            |\n+| Go                         | Python 3                   | YAML                       |\n +----------------------------+----------------------------+----------------------------+\n | Haskell                    | R                          |                            |\n +----------------------------+----------------------------+----------------------------+\n | HTML                       | reStructured Text          |                            |\n +----------------------------+----------------------------+----------------------------+\n | Java                       | Ruby                       |                            |\n +----------------------------+----------------------------+----------------------------+\n-| JavaScript                 | Scala                      |                            |\n+| JavaScript                 | Rust                       |                            |\n +----------------------------+----------------------------+----------------------------+\n-| JSP                        | SCSS                       |                            |\n+| JSP                        | Scala                      |                            |\n +----------------------------+----------------------------+----------------------------+\n-| Julia                      | sh & bash scripts          |                            |\n+| Julia                      | SCSS                       |                            |", "created_at": "2017-03-06T16:09:10Z", "last_edited_at": null, "author": "rubdos", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDg1MjY1Nw==", "fields": {"body": "I'd prefer we start using curl only, as wget isnt installed on the docker (whereas curl is mandatory in the docker), and it would be good for the docker to be directly using the coala-bears install scripts, rather than having a slightly different set of commands.  see https://github.com/coala/docker-coala-base/blob/master/Dockerfile", "diff": "@@ -175,3 +175,12 @@ fi\n echo '' > dummy\n coala-ci --bears CheckstyleBear --files dummy --no-config --bear-dirs bears || true\n coala-ci --bears ScalaLintBear --files dummy --no-config --bear-dirs bears || true\n+\n+if [ ! -e ~/elm_format/elm-format ]; then\n+  mkdir -p ~/elm_format\n+  export PATH=$PATH:~/elm_format\n+  wget -nc -O elm-format.tgz https://github.com/avh4/elm-format/releases/download/0.5.2-alpha/elm-format-0.17-0.5.2-alpha-linux-x64.tgz", "created_at": "2017-03-08T06:27:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDgzMjkwMA==", "fields": {"body": "using var as a variable name is unnecessary.  If the = doesnt explain that the lhs is a variable name, the reader should give up programming.\nuse either foo / bar / baz , or a / b / c, or some other similar pattern.", "diff": "@@ -0,0 +1,56 @@\n+from bears.elm.ElmLintBear import ElmLintBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+good_file_no_unexpected_comma = \"\"\"\n+module UnexpectedComma (..) where\n+var =", "created_at": "2017-03-08T02:39:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDk0NDMyMQ==", "fields": {"body": "Maybe add those assertions for the previous cases with <= and >= too?", "diff": "@@ -56,3 +56,33 @@ def test_comparison(self):\n         uut2 = TextPosition(4, 8)\n         self.assertTrue(uut1 >= uut2)\n         self.assertTrue(uut2 <= uut1)\n+\n+        uut1 = TextPosition(1, 2)\n+        uut2 = TextPosition(1, 3)\n+        self.assertTrue(uut1 < uut2)\n+        self.assertFalse(uut1 > uut2)", "created_at": "2017-03-08T15:36:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDk0NTIxOA==", "fields": {"body": "ah you implement it. Though the __eq__ overload has to come before this commit \ud83d\udc4d", "diff": "@@ -3,7 +3,6 @@\n \n \n @generate_repr('line', 'column')\n-@generate_ordering('line', 'column')", "created_at": "2017-03-08T15:40:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTQwMzk0OQ==", "fields": {"body": "from coalib.results.SourceRange import SourceRange # Ignore PyUnusedCodeBear would be on line 10 right? thats 77 chars?\nedit: My bad; forgot # Ignore works on the line below like that.", "diff": "@@ -6,9 +6,9 @@\n from coalib.bears.LocalBear import LocalBear\n from coala_utils.decorators import enforce_signature\n from coalib.misc.Shell import run_shell_command\n-from coalib.results.Diff import Diff\n from coalib.results.Result import Result\n from coalib.results.SourceRange import SourceRange\n+# Ignore PyUnusedCodeBear", "created_at": "2017-03-10T14:15:29Z", "last_edited_at": "2017-03-10T14:16:39Z", "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU1ODQxMw==", "fields": {"body": "This should be at the end of the docstring", "diff": "@@ -55,6 +55,14 @@ def __init__(self, description: str='', suggested_values: tuple=(),\n         given `languages`, which must be language identifiers supported by\n         :class:`coalib.bearlib.languages.Language`.\n \n+        :param description:      str     A string describing taste.\n+        :param suggested_values  tuple   A tuple containing the list of\n+                                         possible values for the taste.\n+        :param default           bool    The default value of taste.\n+        :param languages         tuple   A tuple containing list of\n+                                         languages, for which taste is\n+                                         defined.\n+", "created_at": "2017-03-12T14:06:13Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU1ODU1OQ==", "fields": {"body": "Also I don't think the types for each parameter are required. They are already mentioned in the signature", "diff": "@@ -55,6 +55,14 @@ def __init__(self, description: str='', suggested_values: tuple=(),\n         given `languages`, which must be language identifiers supported by\n         :class:`coalib.bearlib.languages.Language`.\n \n+        :param description:      str     A string describing taste.\n+        :param suggested_values  tuple   A tuple containing the list of\n+                                         possible values for the taste.\n+        :param default           bool    The default value of taste.\n+        :param languages         tuple   A tuple containing list of\n+                                         languages, for which taste is\n+                                         defined.\n+", "created_at": "2017-03-12T14:13:57Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU2MDIzMw==", "fields": {"body": "IMO this should be Description of the taste. A string is redundant.", "diff": "@@ -61,6 +61,12 @@ def __init__(self, description: str='', suggested_values: tuple=(),\n         aspectclass definition.\n \n         The value cast type is defined via indexing on class level.\n+        :param description:         A string describing taste.", "created_at": "2017-03-12T15:25:21Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU2MDM1NQ==", "fields": {"body": "the taste", "diff": "@@ -61,6 +61,12 @@ def __init__(self, description: str='', suggested_values: tuple=(),\n         aspectclass definition.\n \n         The value cast type is defined via indexing on class level.\n+        :param description:         A string describing taste.\n+        :param suggested_values     A tuple containing the list of possible\n+                                    values for the taste.\n+        :param default              The default value of taste.", "created_at": "2017-03-12T15:30:25Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU2MDY5MA==", "fields": {"body": "There should be a : after every param name. Also add a new line at L63", "diff": "@@ -61,6 +61,12 @@ def __init__(self, description: str='', suggested_values: tuple=(),\n         aspectclass definition.\n \n         The value cast type is defined via indexing on class level.\n+        :param description:         Description of the taste.\n+        :param suggested_values     A tuple containing the list of possible\n+                                    values for the taste.\n+        :param default              Default value of the taste.\n+        :param languages            A tuple containing list of languages, for\n+                                    which the taste is defined.", "created_at": "2017-03-12T15:44:20Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTk3ODc3Mg==", "fields": {"body": "separately", "diff": "@@ -12,12 +12,22 @@ use_spaces = True\n # will be executed sequentially; also we need the LineLengthBear to double\n # check the line length because PEP8Bear sometimes isn't able to correct the\n # linelength.\n-bears = SpaceConsistencyBear, PyUnusedCodeBear, QuotesBear\n+bears = SpaceConsistencyBear, QuotesBear\n language = Python\n preferred_quotation = '\n \n default_actions = *: ApplyPatchAction\n \n+[python_imports]\n+# PyUnusedCodeBear is run seperately beacause we need to check for unused ", "created_at": "2017-03-14T17:42:44Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjg5NTM2NA==", "fields": {"body": "Newline at L63", "diff": "@@ -61,6 +61,12 @@ def __init__(self, description: str='', suggested_values: tuple=(),\n         aspectclass definition.\n \n         The value cast type is defined via indexing on class level.\n+        :param description:         Description of the taste.", "created_at": "2017-03-20T13:07:07Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjgxMTk5OA==", "fields": {"body": "Add a test in cliParsingTest to test this conflict.", "diff": "@@ -119,4 +119,10 @@ def check_conflicts(sections):\n             ArgumentParser().error(\n                 \"'output' or 'relpath' cannot be used without `--json`.\")\n \n+        if (", "created_at": "2017-03-19T16:54:56Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjkxMjIxOA==", "fields": {"body": "This could be phrased better I think:\n\nNote: This assumes that the remote origin is the original coala repository at https://github.com/coala/coala (or other, like coala/coala-bears, etc) and not your fork. If you're unsure about this, run git remote -v to check which remote points to the original repository and use it instead of origin in the following section.\n\nAlso I'd put this at the very top of the Rebasing section", "diff": "@@ -245,6 +245,12 @@ the desired branch:\n     $ git fetch origin\n     $ git rebase origin/master\n \n+.. note::\n+\n+    ``origin`` is the remote of https://github.com/coala/coala\n+    or https://github.com/coala/coala-bears. It is not the remote\n+    of your fork.", "created_at": "2017-03-20T14:21:55Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjkzOTU2Mg==", "fields": {"body": "I'm moving our discussion out of this review into the main thread for better visibility (this thread would be collapsed with my rebased commit).", "diff": "@@ -245,6 +245,12 @@ the desired branch:\n     $ git fetch origin\n     $ git rebase origin/master\n \n+.. note::\n+\n+    ``origin`` is the remote of https://github.com/coala/coala\n+    or https://github.com/coala/coala-bears. It is not the remote\n+    of your fork.", "created_at": "2017-03-20T15:55:37Z", "last_edited_at": null, "author": "PierceAndy", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzE1MjA1Mg==", "fields": {"body": "and uppercase P for Python", "diff": "@@ -34,6 +34,24 @@ https://github.com/coala/coala-bears\n Installing from Git\n -------------------\n \n+NOTE:\n+In order to configure the environment according to python 3.\n+If you have both python 3 and python 2 installed check this out first.\n+\n+::\n+\n+    $ virtualenv venv -p /usr/bin/python3\n+\n+Enter the path where you have installed python 3.\n+\n+::\n+\n+    $ source venv/bin/activate\n+    (venv)$ python --version\n+\n+Check your python version and make sure it is python 3.", "created_at": "2017-03-21T13:25:35Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzIwNDk4Mg==", "fields": {"body": "shouldn't you be passing a list here for consistency?", "diff": "@@ -17,7 +17,27 @@\n echo $X\n \"\"\"\n \n+valid_with_ignore_rules_file = \"\"\"\n+#!/usr/bin/env sh\n+echo \"Path is $PATH\"\n+cd /home\n+for dir in */\n+do\n+  cd \"$dir\"\n+  convert index.png index.jpg\n+  cd ..\n+done\n+\"\"\"\n+\n+ShellCheckBear1Test = verify_local_bear(\n+    ShellCheckBear,\n+    valid_files=(valid_file,),\n+    invalid_files=(invalid_file, valid_with_ignore_rules_file))\n \n-ShellCheckBearTest = verify_local_bear(ShellCheckBear,\n-                                       valid_files=(valid_file,),\n-                                       invalid_files=(invalid_file,))\n+# Check that ignore_rules option working\n+ShellCheckBear2Test = verify_local_bear(\n+    ShellCheckBear,\n+    valid_files=(valid_with_ignore_rules_file,),\n+    invalid_files=(),\n+    settings={\n+        'ignore_rules': 'SC2103, SC2164'})", "created_at": "2017-03-21T16:31:13Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM3NzYyNw==", "fields": {"body": "@pratyushprakash @adhikasp Thanks :) Good points! I chose the way of consistently using defaultdict: https://github.com/coala/coala/pull/3966/files#diff-7544b01c348d9f3cfa526b33644dc42aR25", "diff": "@@ -0,0 +1,25 @@\n+from collections import defaultdict\n+\n+\n+class bearclass(type):\n+    \"\"\"\n+    Metaclass for :class:`coalib.bears.Bear.Bear` and therefore all bear\n+    classes.\n+\n+    Pushing bears into the future... ;)\n+    \"\"\"\n+\n+    # by default a bear class has no aspects\n+    aspects = defaultdict(lambda: [])", "created_at": "2017-03-22T10:27:31Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzMyMzAwNQ==", "fields": {"body": "Won't Bear.aspects be of different type (defaultdict or dict) depending on weather or not the bear was passed the aspects dict?", "diff": "@@ -0,0 +1,25 @@\n+from collections import defaultdict\n+\n+\n+class bearclass(type):\n+    \"\"\"\n+    Metaclass for :class:`coalib.bears.Bear.Bear` and therefore all bear\n+    classes.\n+\n+    Pushing bears into the future... ;)\n+    \"\"\"\n+\n+    # by default a bear class has no aspects\n+    aspects = defaultdict(lambda: [])", "created_at": "2017-03-22T02:47:52Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzMzMjIxMQ==", "fields": {"body": "From what I understand they are same type of things but defaultdict have... default value. CMIIW, in this case if aspects is not defined in bear declaration then we can safely call SomeAspectsBear.aspects['detect'] without explicitly handling dict key not found error.", "diff": "@@ -0,0 +1,25 @@\n+from collections import defaultdict\n+\n+\n+class bearclass(type):\n+    \"\"\"\n+    Metaclass for :class:`coalib.bears.Bear.Bear` and therefore all bear\n+    classes.\n+\n+    Pushing bears into the future... ;)\n+    \"\"\"\n+\n+    # by default a bear class has no aspects\n+    aspects = defaultdict(lambda: [])", "created_at": "2017-03-22T04:45:43Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzMzMjY2MA==", "fields": {"body": "Yeah I was just thinking of explicitly defining aspects['detect'] = [] to maintain consistency of type(aspects).", "diff": "@@ -0,0 +1,25 @@\n+from collections import defaultdict\n+\n+\n+class bearclass(type):\n+    \"\"\"\n+    Metaclass for :class:`coalib.bears.Bear.Bear` and therefore all bear\n+    classes.\n+\n+    Pushing bears into the future... ;)\n+    \"\"\"\n+\n+    # by default a bear class has no aspects\n+    aspects = defaultdict(lambda: [])", "created_at": "2017-03-22T04:52:44Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzMzNTI4MQ==", "fields": {"body": "Shouldn't do be considered as a indent keyword as well ?", "diff": "@@ -10,6 +10,7 @@ class C:\n     multiline_string_delimiters = {}\n     indent_types = {'{': '}'}\n     encapsulators = {'(': ')', '[': ']'}\n+    indent_keywords = 'if', 'while', 'for'", "created_at": "2017-03-22T05:29:53Z", "last_edited_at": null, "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzQ0Mzc1MQ==", "fields": {"body": "I don't think this is a good idea. Aspects are supposed to be things that the bear can analyze and fix. Root is just the parent of all aspects. We don't expect the user to ever mention Root as the aspect to be analyzed. It makes no sense to put Root in aspects.detect as it is not some physical aspect of the code which the bear analyzes and is hence counter-intuitive.\nWhen bears are called explicitly, we would have to have a different bear collection methodology as when called via aspects so adding Root won't help much anyway.", "diff": "@@ -0,0 +1,25 @@\n+from collections import defaultdict\n+\n+\n+class bearclass(type):\n+    \"\"\"\n+    Metaclass for :class:`coalib.bears.Bear.Bear` and therefore all bear\n+    classes.\n+\n+    Pushing bears into the future... ;)\n+    \"\"\"\n+\n+    # by default a bear class has no aspects", "created_at": "2017-03-22T15:22:07Z", "last_edited_at": "2017-03-22T15:25:21Z", "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzQwNDc4Mg==", "fields": {"body": "The dict will fit on one line, and the settings can have a trailing ,, and the final ) on the final line by itself. i.e.\n    settings={...},\n)\nThen, additional parameters can be added at the end of the function call without your lines being modified.", "diff": "@@ -17,7 +17,27 @@\n echo $X\n \"\"\"\n \n+valid_with_ignore_rules_file = \"\"\"\n+#!/usr/bin/env sh\n+echo \"Path is $PATH\"\n+cd /home\n+for dir in */\n+do\n+  cd \"$dir\"\n+  convert index.png index.jpg\n+  cd ..\n+done\n+\"\"\"\n+\n+ShellCheckBear1Test = verify_local_bear(\n+    ShellCheckBear,\n+    valid_files=(valid_file,),\n+    invalid_files=(invalid_file, valid_with_ignore_rules_file))\n \n-ShellCheckBearTest = verify_local_bear(ShellCheckBear,\n-                                       valid_files=(valid_file,),\n-                                       invalid_files=(invalid_file,))\n+# Check that ignore_rules option working\n+ShellCheckBear2Test = verify_local_bear(\n+    ShellCheckBear,\n+    valid_files=(valid_with_ignore_rules_file,),\n+    invalid_files=(),\n+    settings={\n+        'shellcheck_ignore': ['SC2103', 'SC2164']})", "created_at": "2017-03-22T12:53:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzQwNzYwMg==", "fields": {"body": "This empty line seems a bit strange.... Would it be possible to remove the empty newline?", "diff": "@@ -119,4 +119,10 @@ def check_conflicts(sections):\n             ArgumentParser().error(\n                 \"'output' or 'relpath' cannot be used without `--json`.\")\n \n+        if (\n+                section.get('non_interactive', False) and", "created_at": "2017-03-22T13:08:45Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzU3NTc3Mg==", "fields": {"body": "If the changes should take effect in virtualenv, this should be installed inside a virtualenv right ?\nIn the same file above, I can see you have removed (coala-env) in the line of installing repo based version.", "diff": "@@ -83,25 +83,23 @@ master branch from and all of its dependencies with pip using\n \n ::\n \n+    (coala-venv)$ # For the coala repository:\n     (coala-venv)$ git clone https://github.com/coala/coala\n-    (coala-venv)$ cd coala\n-    (coala-venv)$ pip3 install -e .\n-    (coala-venv)$ cd -\n+    (coala-venv)$ pip3 install -e coala\n+    (coala-venv)$ # For the coala-bears repository:\n     (coala-venv)$ git clone https://github.com/coala/coala-bears\n-    (coala-venv)$ cd coala-bears\n-    (coala-venv)$ pip3 install -e .\n+    (coala-venv)$ pip3 install -e coala-bears\n \n-Then you can install a repository-backed version of the repository you would\n-like to modify using\n+To generally install a repository-backed version you can use\n \n ::\n \n-    (coala-venv)$ pip3 install -e <path/to/clone>\n+   $ pip3 install -e <path/to/clone>\n \n-You will then be able to edit the repository and have the changes take effect\n-in your virtualenv immediately. You will also be able to use pip to manage\n-your installation of the package should you need to install from a different\n-source in the future.\n+This will install the repository in editable mode, meaning you will be able\n+to edit the repository and have the changes take effect in your virtualenv", "created_at": "2017-03-23T02:21:39Z", "last_edited_at": "2017-03-23T02:23:55Z", "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzU3NzU4OA==", "fields": {"body": "I apologise for that. What I should be talking about is passing the aspects not initiating them. This is surely not the right place to toggle this discussion because this is the metaclass and its job is to instantiate the bear by defining its aspects. I realise it will be problematic in these cases.\n>>> SomeAspectsBear.aspects['detect']\n +    [<aspectclass 'Root.Metadata.CommitMessage.Shortlog.ColonExistence'>]\n\nWe do not expect user ever to mention Root as an aspect. I am asking to pass that as aspect of the bear only when user doesn't passes any aspect. My point is we can use same bear collection methodology in both the cases if we pass Root aspect as the default aspect of any bear.", "diff": "@@ -0,0 +1,25 @@\n+from collections import defaultdict\n+\n+\n+class bearclass(type):\n+    \"\"\"\n+    Metaclass for :class:`coalib.bears.Bear.Bear` and therefore all bear\n+    classes.\n+\n+    Pushing bears into the future... ;)\n+    \"\"\"\n+\n+    # by default a bear class has no aspects", "created_at": "2017-03-23T02:41:41Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzY0NjUzOA==", "fields": {"body": "oh yeah it seems it is ....", "diff": "@@ -33,16 +33,16 @@ def check_prerequisites(cls):\n             except ImportError:  # pragma: no cover\n                 return 'Please install the `language-check` pip package.'\n \n-    @deprecate_settings(language='locale')\n+    @deprecate_settings(natural_language=('language', 'locale'))", "created_at": "2017-03-23T11:39:59Z", "last_edited_at": "2017-03-23T11:43:03Z", "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzc1ODY1Mw==", "fields": {"body": "@Techievena The biggest problem with defining Root as default aspect is that a bear must be able to generate a result for every aspect is supports. And as @adhikasp correctly mentioned, Root would mean that the bear supports all aspects. Interpreting Root in any other way would break aspects definition consistency, since it is very beneficial to define a whole aspects sub-tree supported by a bear, like mentioned in #3977", "diff": "@@ -0,0 +1,25 @@\n+from collections import defaultdict\n+\n+\n+class bearclass(type):\n+    \"\"\"\n+    Metaclass for :class:`coalib.bears.Bear.Bear` and therefore all bear\n+    classes.\n+\n+    Pushing bears into the future... ;)\n+    \"\"\"\n+\n+    # by default a bear class has no aspects", "created_at": "2017-03-23T19:10:14Z", "last_edited_at": "2017-03-23T19:10:49Z", "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzg0Njg2Mw==", "fields": {"body": "I'd add one more sentence explaining how easy it is to google for git stuff: \"Git is widely used throughout the world and there are many good tutorials and git related Q&A threads out there.\"", "diff": "@@ -453,3 +453,7 @@ use an interactive rebasing session. This opens an editor where you can enter\n commands (described below) for each commit to be rebased. These commands\n determine how individual commits will be transferred to the new base. You can\n also reorder the commit listing to change the order of the commits themselves.\n+\n+If you would like more information/commands, please use your favourite search", "created_at": "2017-03-24T07:22:33Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzgyMDE2NQ==", "fields": {"body": "Replace this by the. You could also read the git documentation to learn more is better :)", "diff": "@@ -453,3 +453,7 @@ use an interactive rebasing session. This opens an editor where you can enter\n commands (described below) for each commit to be rebased. These commands\n determine how individual commits will be transferred to the new base. You can\n also reorder the commit listing to change the order of the commits themselves.\n+\n+If you would like more information/commands, please use your favourite search\n+engine to look for it. You could also read this", "created_at": "2017-03-24T01:31:26Z", "last_edited_at": "2017-03-24T01:35:32Z", "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzkxNzI3MA==", "fields": {"body": "Why we don't have test if Bear is assigned an aspect correctly?\nassert AspectsBear.aspects['detect'] == [CommitMessage.Shortlog.ColonExistence]", "diff": "@@ -119,6 +140,18 @@ def tearDown(self):\n \n class BearTest(BearTestBase):\n \n+    def test_default_aspects(self):", "created_at": "2017-03-24T14:39:03Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA0MTc2NQ==", "fields": {"body": "@Udayan12167 yes, a copy is there just to make sure the bear does not actually modify/erase it.", "diff": "@@ -6,9 +6,24 @@\n \n class GlobalBearTest(unittest.TestCase):\n \n-    def test_api(self):\n-        test_object = GlobalBear(0, Section('name'), None)\n-        self.assertRaises(NotImplementedError, test_object.run)\n+    def test_file_dict(self):\n+        file_dict_0 = {\n+            'filename1': 'contents1', 'filename2': 'contents2'\n+        }\n \n-    def test_kind(self):\n+        file_dict_1 = file_dict_0.copy()\n+\n+        bear = GlobalBear(file_dict_0, Section(''), None)\n+\n+        self.assertEqual(bear.file_dict, file_dict_0)\n+        self.assertEqual(bear.file_dict, file_dict_1)", "created_at": "2017-03-25T18:12:07Z", "last_edited_at": null, "author": "alisianoi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MTg2OQ==", "fields": {"body": "Change an ->a so it would be a universal DistributionRequirement.", "diff": "@@ -18,30 +18,72 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.", "created_at": "2017-03-26T04:55:04Z", "last_edited_at": null, "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MjcxOA==", "fields": {"body": "\"Find dependencies for each bear in all platforms, and add them to the REQUIREMENTS tuple of that bear.\"", "diff": "@@ -18,30 +18,72 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.\n+\n+How this will work: Each requirement class will have an \"install_command\" and\n+an \"install\" method. We will just call requirement.install() and this will\n+run the command on its' own, not caring which platform you're on. Ideally,\n+requirement.install() will use \"install_command\" to generate the command and\n+run it with \"sarge\". For the DistributionRequirement class, the\n+\"install_command\" method will check on which platform you are, and it will\n+generate the according command.\n+If the package is named differently on each platform, it shall be specified\n+in the constructor. Take a mock example for a random bear:\n+\n+REQUIREMENTS=(DistributionRequirement(\n+  apt-get='csslint', dnf='csslinter', brew='csslt')\n+\n+If you're on Ubuntu, it will run \"apt-get install csslint\". If you're on\n+Fedora, it will run \"dnf install csslinter\", and so on.\n+If your package manager is not on the list, we should just print a warning\n+message so that the user tries to install it manually.\n+\n+So cib should not care what kind of requirement each is, it should just\n+iterate through requirement instances and run \"install_command()\" on each,\n+the requirement class handling the rest.\n+\n+Another special case is made of bears which hold different installations\n+for each distribution. A good example is DartLintBear: it has different\n+installation options for Linux (a wget script), Windows and Mac.\n+https://www.dartlang.org/install\n+\n+A good idea to treat these is Conda: a conda package contains a script\n+for each operating system (a .sh for Mac/Linux and a .bat for Windows).\n+When you try to install the conda package, it will run the according script.\n+\n+The last special case is made out of bears which have bear dependencies.\n+We have quite a few (the Clang bears). For these, we should have a\n+BearRequirement class which handles them.\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n * A cEP that describes cib is merged.\n * https://github.com/coala/coala-bears/issues/845 is solved.\n+* cib should be tested with full coverage.\n \n ##### CODING PHASE 1\n \n * All bears should have dependencies sorted out.\n+* The requirement classes should be rewritten so that most of the work is\n+  done within them, cib only having to run their methods and to gather the\n+  bears.\n * Tests should be written for all the dependencies and the classes.\n * All requirement classes shall be properly documented.\n \n ##### CODING PHASE 2\n \n * Platform dependencies should be working.", "created_at": "2017-03-26T06:13:05Z", "last_edited_at": null, "author": "vijeth-aradhya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1NDczNA==", "fields": {"body": "Isn't that repetetion of what he has explained earlier in the file?", "diff": "@@ -18,30 +18,72 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.\n+\n+How this will work: Each requirement class will have an \"install_command\" and\n+an \"install\" method. We will just call requirement.install() and this will\n+run the command on its' own, not caring which platform you're on. Ideally,\n+requirement.install() will use \"install_command\" to generate the command and\n+run it with \"sarge\". For the DistributionRequirement class, the\n+\"install_command\" method will check on which platform you are, and it will\n+generate the according command.\n+If the package is named differently on each platform, it shall be specified\n+in the constructor. Take a mock example for a random bear:\n+\n+REQUIREMENTS=(DistributionRequirement(\n+  apt-get='csslint', dnf='csslinter', brew='csslt')\n+\n+If you're on Ubuntu, it will run \"apt-get install csslint\". If you're on\n+Fedora, it will run \"dnf install csslinter\", and so on.\n+If your package manager is not on the list, we should just print a warning\n+message so that the user tries to install it manually.\n+\n+So cib should not care what kind of requirement each is, it should just\n+iterate through requirement instances and run \"install_command()\" on each,\n+the requirement class handling the rest.\n+\n+Another special case is made of bears which hold different installations\n+for each distribution. A good example is DartLintBear: it has different\n+installation options for Linux (a wget script), Windows and Mac.\n+https://www.dartlang.org/install\n+\n+A good idea to treat these is Conda: a conda package contains a script\n+for each operating system (a .sh for Mac/Linux and a .bat for Windows).\n+When you try to install the conda package, it will run the according script.\n+\n+The last special case is made out of bears which have bear dependencies.\n+We have quite a few (the Clang bears). For these, we should have a\n+BearRequirement class which handles them.\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n * A cEP that describes cib is merged.\n * https://github.com/coala/coala-bears/issues/845 is solved.\n+* cib should be tested with full coverage.\n \n ##### CODING PHASE 1\n \n * All bears should have dependencies sorted out.\n+* The requirement classes should be rewritten so that most of the work is\n+  done within them, cib only having to run their methods and to gather the\n+  bears.\n * Tests should be written for all the dependencies and the classes.\n * All requirement classes shall be properly documented.\n \n ##### CODING PHASE 2\n \n * Platform dependencies should be working.\n+* Conda packages should be created for all bears which need such deps.", "created_at": "2017-03-26T08:13:33Z", "last_edited_at": null, "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1NTc2OQ==", "fields": {"body": "I'd also vote for leaving the link in as it's a good starting point to get to know git basics and does not eliminate the need to look for things entirely.", "diff": "@@ -453,3 +453,9 @@ use an interactive rebasing session. This opens an editor where you can enter\n commands (described below) for each commit to be rebased. These commands\n determine how individual commits will be transferred to the new base. You can\n also reorder the commit listing to change the order of the commits themselves.\n+\n+If you would like more information/commands, please use your favourite search\n+engine to look for it. You could also read the\n+`git documentation <https://git-scm.com/doc>`_ to learn more. Git is widely used", "created_at": "2017-03-26T09:06:34Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2MTk4NQ==", "fields": {"body": "its' -> its", "diff": "@@ -18,30 +18,73 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.\n+\n+How this will work: Each requirement class will have an \"install_command\" and\n+an \"install\" method. We will just call requirement.install() and this will\n+run the command on its' own, not caring which platform you're on. Ideally,", "created_at": "2017-03-26T14:29:42Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2ODM1OA==", "fields": {"body": "It is safe to assume that in this case the user knows about shellcheck. So lets rename shellcheck_ignore to what it is called in shellcheck: exclude\nhttps://github.com/koalaman/shellcheck/blob/22c86256ace897e2fcd780da46bc173fb1bbd5f5/shellcheck.hs#L77", "diff": "@@ -20,8 +20,14 @@ class ShellCheckBear:\n     CAN_DETECT = {'Syntax', 'Security', 'Undefined Element', 'Unused Code'}\n \n     @staticmethod\n-    def create_arguments(filename, file, config_file, shell: str='sh'):\n+    def create_arguments(filename, file, config_file, shell: str='sh',\n+                         shellcheck_ignore: list=None):\n         \"\"\"\n         :param shell: Target shell being used.\n+        :param shellcheck_ignore: List of linting rules that should be ignored.", "created_at": "2017-03-26T19:12:13Z", "last_edited_at": null, "author": "alisianoi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2ODQzNA==", "fields": {"body": "Let's split this into two smaller test cases. The first one would test SC2164, the second one will test SC2103. The first test file can then be as simple as:\n#!/usr/bin/env sh\ncd\n\nPlease figure out the minimal file for the second error then.\nAlso, you could add cross-test case: exclude one error but feed the other file and check that the other error is still triggered.", "diff": "@@ -17,7 +17,27 @@\n echo $X\n \"\"\"\n \n+valid_with_ignore_rules_file = \"\"\"\n+#!/usr/bin/env sh\n+echo \"Path is $PATH\"\n+cd /home\n+for dir in */\n+do\n+  cd \"$dir\"\n+  convert index.png index.jpg\n+  cd ..\n+done\n+\"\"\"", "created_at": "2017-03-26T19:15:59Z", "last_edited_at": null, "author": "alisianoi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODE1MjMyOQ==", "fields": {"body": ">>> issubaspect(ColonExistence(shortlog_colon=False), CommitMessage)\nTrue\n\nThis case is missing", "diff": "@@ -31,3 +33,8 @@ class docs:\n                 example = 'Example'\n \n         assert not SubAspect.docs.check_consistency()\n+        assert issubaspect(RootAspect, SubAspect)", "created_at": "2017-03-27T12:06:25Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODMyNTIxNw==", "fields": {"body": "I think would be better if :\nwith pytest.raises(TypeError) as log:\n    issubaspect('String', SubAspect)\n    assertEqual(str(log.exception), 'String is not an aspectclass or an instance of an aspectclass')", "diff": "@@ -31,3 +33,10 @@ class docs:\n                 example = 'Example'\n \n         assert not SubAspect.docs.check_consistency()\n+        assert issubaspect(SubAspect, RootAspect)\n+        assert not issubaspect(Root, RootAspect)\n+        assert not issubaspect(RootAspect, RootAspect)\n+        with pytest.raises(TypeError):\n+            issubaspect('String', SubAspect)", "created_at": "2017-03-28T02:55:53Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODUxMjEwMA==", "fields": {"body": "if this change works, it's good imo, one unnecessary import less \ud83d\udc4d", "diff": "@@ -1,5 +1,3 @@\n-from coalib.bearlib.aspects import aspectclass", "created_at": "2017-03-28T19:12:47Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODYyMTcyMw==", "fields": {"body": "Instead just use regular if else statements", "diff": "@@ -32,6 +32,54 @@ def line(self):\n     def column(self):\n         return self._column\n \n+    def __lt__(self, other):\n+        \"\"\"\n+        Test whether ``self`` is behind the other\n+        ``TextPosition``.\n+\n+        If the column in a ``TextPosition`` is ``None``, consider\n+        whole line. If the line in a ``TextPosition`` is ``None``,\n+        consider whole file.\n+\n+        :param other: ``TextPosition`` to compare with.\n+        :return:      Whether this ``TextPosition`` is behind the other\n+                      one.\n+        \"\"\"\n+        if self.line is None or other.line is None:\n+            return False\n+        if self.line == other.line:\n+            return (False", "created_at": "2017-03-29T08:45:51Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcxMzA5Nw==", "fields": {"body": "IMO that logic should be moved to a PackageRequirement.__str__ method so that we can just use str(requirement) here.\n@sils @Adrianzatreanu Where is the dependency_management repo BTW? :)", "diff": "@@ -370,12 +370,21 @@ def check_prerequisites(cls):\n         >>> SomeOtherBear.check_prerequisites()\n         'really_bad_package is not installed. You can install it using ...'\n \n+        >>> class anotherBear(Bear):\n+        ...     REQUIREMENTS = {PipRequirement('bad_package','0.0.1')}\n+\n+        >>> anotherBear.check_prerequisites()\n+        'bad_package 0.0.1 is not installed. You can install it using ...'\n+\n         :return: True if prerequisites are satisfied, else False or a string\n                  that serves a more detailed description of what's missing.\n         \"\"\"\n         for requirement in cls.REQUIREMENTS:\n             if not requirement.is_installed():\n-                return requirement.package + ' is not installed. You can ' + (\n+                package = (\n+                    requirement.package if not requirement.version\n+                    else requirement.package + ' ' + requirement.version)", "created_at": "2017-03-29T15:48:33Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyNTk3NA==", "fields": {"body": "https://gitlab.com/coala/package_manager", "diff": "@@ -370,12 +370,21 @@ def check_prerequisites(cls):\n         >>> SomeOtherBear.check_prerequisites()\n         'really_bad_package is not installed. You can install it using ...'\n \n+        >>> class anotherBear(Bear):\n+        ...     REQUIREMENTS = {PipRequirement('bad_package','0.0.1')}\n+\n+        >>> anotherBear.check_prerequisites()\n+        'bad_package 0.0.1 is not installed. You can install it using ...'\n+\n         :return: True if prerequisites are satisfied, else False or a string\n                  that serves a more detailed description of what's missing.\n         \"\"\"\n         for requirement in cls.REQUIREMENTS:\n             if not requirement.is_installed():\n-                return requirement.package + ' is not installed. You can ' + (\n+                package = (\n+                    requirement.package if not requirement.version\n+                    else requirement.package + ' ' + requirement.version)", "created_at": "2017-03-29T16:39:17Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyODQwOA==", "fields": {"body": "But that could cause problems with all newcomers pinging for reviews.", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.", "created_at": "2017-03-29T16:49:36Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyOTA0Mg==", "fields": {"body": "Gamification could be a problem. Many people pinging for reviews. People complaining that they did not get reviews on time and hence were delayed. People fighting over badges depending on the weight they carry. We had this in the uni system for a while with assignment submissions and the gamification turned into an absolute nightmare. We could have newcomers fighting to get things merged rather than actually focusing on the process of learning. Statistics are okay as a motivator but gamification should be given a rethink.", "diff": "@@ -561,5 +561,26 @@ coala should support generating metrics for your code.\",\n \t  \"tags\" : [\"Information Extraction\", \"CLI\", \"CI\"],\n \t  \"markdown\" : \"enhance_coala_quickstart.md\",\n \t  \"collaborating_projects\" : [\"coala\"]\n+\t},\n+\t{\n+\t\t\"name\" : \"Newcomer metrics and gamification\",", "created_at": "2017-03-29T16:52:16Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI1NzE3MQ==", "fields": {"body": "ooh my, how did this happened \ud83d\ude05", "diff": "@@ -30,4 +32,23 @@ class SubAspect:\n             class docs:\n                 example = 'Example'\n \n+    def test_issubaspect(self, RootAspect):\n+        @RootAspect.subaspect\n+        class SubAspect:\n+            \"\"\"\n+            Description\n+            \"\"\"\n+\n         assert not SubAspect.docs.check_consistency()", "created_at": "2017-03-31T21:52:23Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI2Mzg0Mw==", "fields": {"body": "Yeah!. That could be done", "diff": "@@ -87,7 +87,23 @@ Step 1. Meet the Community!\n \n To get started, the first step is to meet the community. We use gitter to\n communicate, and there the helpful community will guide you.\n-Join us at `coala gitter <https://coala.io/chat>`_.\n+Gitter is instant messaging service used by developers and users of GitHub.", "created_at": "2017-03-31T22:53:57Z", "last_edited_at": null, "author": "khushmeeet", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjE5Ng==", "fields": {"body": "Irrelevant change :)", "diff": "@@ -561,5 +561,26 @@ coala should support generating metrics for your code.\",\n \t  \"tags\" : [\"Information Extraction\", \"CLI\", \"CI\"],\n \t  \"markdown\" : \"enhance_coala_quickstart.md\",\n \t  \"collaborating_projects\" : [\"coala\"]\n+\t},\n+\t{\n+\t\t\"name\" : \"Newcomer metrics and gamification\",\n+\t\t\"desc\" : \"Provide public metrics about newcomers and the newcomer process.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"At least one patch to each of coala-landing and coala-html should \\\n+\t\t\tbe accepted and merged.\",\n+\t\t\t\"The student should be familiar with web design tools & trends.\",\n+\t\t],\n+\t\t\"difficulty\" : \"medium\",\n+\t\t\"issues\" : [\n+\t\t\t\"https://github.com/coala/coala-quickstart/issues/22\",\n+\t\t\t\"https://github.com/coala/coala-quickstart/issues/42\"", "created_at": "2017-04-01T10:04:30Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjI4MQ==", "fields": {"body": "I think \"Number of gitter messages by the newcomer\" should not be considered, because either it will motivate them to spam or prevent them from asking/giving help for even the genuine problems (if large no. messages are penalized)\nimo it should be the quality of their questions/replies on the gitter that should be measured.", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer", "created_at": "2017-04-01T10:10:52Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM0MjQ0OA==", "fields": {"body": "necessary syntax change.", "diff": "@@ -54,13 +54,11 @@ def _extract_doc_comment_continuous(content, line, column, markers):\n \n     The property of the continuous layout is that the each-line-marker and the\n     end-marker do equal. Documentation is extracted until no further marker is\n-    found. Applies e.g. for doxygen style python documentation:\n+    found. Applies e.g. for doxygen style python documentation::", "created_at": "2017-04-03T05:39:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4MjE3Ng==", "fields": {"body": "leaves.  koalas eat leaves ;P", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer\n+\n+All of those can be improved by considering the size (bytes, etc) in addition to the 'number'.", "created_at": "2017-04-03T10:17:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMjcyOA==", "fields": {"body": "\"large no. messages are penalized\" would be penalised, like all the others.  quality cant be measured, easily ;-)\nThe penalty for gitter messages would be lower than penalty for gitmate errors, and PR iterations.  Smart people decide to ask for help rather than screw up a PR. ;-)", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer", "created_at": "2017-04-02T16:14:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMzc2Mw==", "fields": {"body": "I've an idea to measure the quality of messages. We can have the weekly/monthly feed of all the messages of the contributor and have let every maintainer submit a rating (on scale of 10 maybe) of the feed. The quality is the averaged rating given by the maintainers.", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer", "created_at": "2017-04-02T16:55:54Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQwMzMzNA==", "fields": {"body": "coala/coala-bears is consistently used throughout the document. I'm following the existing convention of how to refer to coala/coala-bears\n\nI see, actually to me it seems like \"coala/coala-bears\" refers to https://github.com/coala/coala-bears, but as you've changed repository to repositories then it should refer to both \"coala/coala\" and \"coala/coala-bears\".", "diff": "@@ -44,15 +44,25 @@ To do this, you can use these to clone the coala/coala-bears repositories:\n \n ::\n \n-    $ git clone https://github.com/coala/coala\n+    $ git clone -o upstream https://github.com/coala/coala\n \n or\n \n ::\n \n-    $ git clone https://github.com/coala/coala-bears\n+    $ git clone -o upstream https://github.com/coala/coala-bears\n+\n+.. note::\n+\n+    ``-o upstream`` sets the remote name of the original coala/coala-bears", "created_at": "2017-04-03T12:25:22Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQwNDAxNg==", "fields": {"body": "Yes, I guess you're right, it could be mistaken that way. You could submit an issue on that.", "diff": "@@ -44,15 +44,25 @@ To do this, you can use these to clone the coala/coala-bears repositories:\n \n ::\n \n-    $ git clone https://github.com/coala/coala\n+    $ git clone -o upstream https://github.com/coala/coala\n \n or\n \n ::\n \n-    $ git clone https://github.com/coala/coala-bears\n+    $ git clone -o upstream https://github.com/coala/coala-bears\n+\n+.. note::\n+\n+    ``-o upstream`` sets the remote name of the original coala/coala-bears", "created_at": "2017-04-03T12:29:04Z", "last_edited_at": null, "author": "PierceAndy", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTU3NTUwNA==", "fields": {"body": "I agree with the change, but make sure not to capitalize configuration @arjunsinghy96", "diff": "@@ -160,6 +160,15 @@ Please read our\n `coafile specification <http://docs.coala.io/en/latest/Users/coafile.html>`__\n to learn more.\n \n+Using ``default_coafile``\n+*************************\n+\n+* The content of ``default_coafile`` is similar to that of ``.coafile``,\n+  but it is system wide.", "created_at": "2017-04-04T04:35:36Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTYxOTU4MA==", "fields": {"body": "All lowercase :)", "diff": "@@ -0,0 +1,28 @@\n+from coalib.bearlib.aspects import Root\n+\n+\n+@Root.subaspect\n+class Spelling:\n+    \"\"\"\n+    This aspect describes spelling of your source code.\n+    \"\"\"\n+\n+\n+@Spelling.subaspect\n+class aspectsYEAH:\n+    \"\"\"\n+    This aspect dictates that the term ``aspects`` and ``aspect`` must begin\n+    with lower-case letters.\n+    \"\"\"\n+    class docs:\n+        example = \"\"\"\n+        # Aspects are the mother of all futures of coala\n+        \"\"\"\n+        example_language = 'All'\n+        importance_reason = \"\"\"\n+        aspects are fundamental concepts in coala and therefore have to begin\n+        with lower-case letters.\n+        \"\"\"\n+        fix_suggestions = \"\"\"\n+        ``aspects`` or ``aspect`` are always written with a lower case ``a``.", "created_at": "2017-04-04T09:47:53Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc2ODA5MA==", "fields": {"body": "ok clarified this..i hope", "diff": "@@ -54,13 +54,11 @@ def _extract_doc_comment_continuous(content, line, column, markers):\n \n     The property of the continuous layout is that the each-line-marker and the\n     end-marker do equal. Documentation is extracted until no further marker is\n-    found. Applies e.g. for doxygen style python documentation:\n+    found. Applies e.g. for doxygen style python documentation::", "created_at": "2017-04-04T20:25:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTczMzgwMA==", "fields": {"body": "bad_file3.py.test is exactly doing the same.", "diff": "@@ -0,0 +1,9 @@\n+def myfunc(a, b, x):", "created_at": "2017-04-04T17:55:47Z", "last_edited_at": "2017-04-04T18:04:37Z", "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTg4Mjg4Mg==", "fields": {"body": "Need an ack to proceed..", "diff": "@@ -54,13 +54,11 @@ def _extract_doc_comment_continuous(content, line, column, markers):\n \n     The property of the continuous layout is that the each-line-marker and the\n     end-marker do equal. Documentation is extracted until no further marker is\n-    found. Applies e.g. for doxygen style python documentation:\n+    found. Applies e.g. for doxygen style python documentation::", "created_at": "2017-04-05T10:37:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDAwNzcxMQ==", "fields": {"body": "http://stackoverflow.com/a/10483204/3578554 :)", "diff": "@@ -207,6 +207,9 @@ def check_prerequisites(cls):\n             :return:\n                 True if operational, otherwise a string containing more info.\n             \"\"\"\n+            if not super(LinterBase, cls).check_prerequisites():", "created_at": "2017-04-05T19:32:55Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDAxMTk5Mw==", "fields": {"body": "@userzimmermann @SanketDG  Oh yeah, sorry that should be done :) . I'll add that and one test case for coverage :).", "diff": "@@ -207,6 +207,9 @@ def check_prerequisites(cls):\n             :return:\n                 True if operational, otherwise a string containing more info.\n             \"\"\"\n+            if not super(LinterBase, cls).check_prerequisites():", "created_at": "2017-04-05T19:53:05Z", "last_edited_at": "2017-04-06T09:27:44Z", "author": "Siddhartha1234", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDAxMzgzNA==", "fields": {"body": "These sentences can be worded a bit better and they are also grammatically incorrect.\nSomething more like:\nIf at any stage you are confused, or have an issue, do not close your Pull Request. Instead, contact us on gitter so that we can help you resolve your problem.", "diff": "@@ -369,6 +369,9 @@ Now, to revert the file to that revision, run the command:\n Now, after the file gets reverted back to the required revision, commit the\n changes and (force)push to the remote.\n \n+If at any stage you are confused or have any issue don't close the PR or issue", "created_at": "2017-04-05T20:01:20Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNTQ4MQ==", "fields": {"body": "@adhikasp @Techievena I already prepared some test aspects as pytest.fixtures in https://github.com/coala/coala/blob/master/tests/bearlib/aspects/conftest.py , which are used in most aspects test modules. We should also build further test aspects based on this.", "diff": "@@ -56,3 +57,21 @@ class SubAspect:\n         assert (str(exc.value) == \"<class 'str'> is not an aspectclass or \"\n                 'an instance of an aspectclass')\n         assert issubaspect(SubAspect('Python'), RootAspect)\n+\n+\n+class AspectlistClassTest:\n+\n+    def test__init__(self):\n+        with pytest.raises(TypeError) as exc:\n+            aspectlist(['String'])\n+        assert (str(exc.value) == \"'String' is not an aspectclass or \"\n+                'an instance of an aspectclass')\n+\n+    def test__contains__(self):\n+        list_of_aspect = aspectlist(\n+            [Metadata.CommitMessage.Shortlog, Metadata.CommitMessage.Body])", "created_at": "2017-04-08T10:26:05Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNTQwNQ==", "fields": {"body": "What about coalib/bearlib/aspects/collections.py? :)\n@coala/aspects-developers", "diff": "@@ -76,6 +76,27 @@ def __repr__(cls):\n         return '<%s %s>' % (type(cls).__name__, repr(cls.__qualname__))\n \n \n+class aspectlist(list):", "created_at": "2017-04-08T10:22:23Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNTc4NA==", "fields": {"body": "You can simplify this to not isinstance(item, (aspectclass, aspectbase))", "diff": "@@ -76,6 +76,27 @@ def __repr__(cls):\n         return '<%s %s>' % (type(cls).__name__, repr(cls.__qualname__))\n \n \n+class aspectlist(list):\n+    \"\"\"\n+    List-derived container to hold aspects.\n+    \"\"\"\n+\n+    def __init__(self, seq=()):\n+        for item in seq:\n+            if (not isinstance(item, aspectclass)\n+                    and not isinstance(item, aspectbase)):", "created_at": "2017-04-08T10:43:01Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNjA2MQ==", "fields": {"body": "This is not a good idea, since it modifies the original aspects object given by the user to the class definition, which furthermore doesn't necessarily need to be a dict object. Any mapping accepted by dict.__init__ should be supported there. So better do something like:\ncls.aspects = defaultdict(\n    lambda: aspectlist([]),\n    ((k, aspectlist(v) for k, v in dict(aspects).items()))", "diff": "@@ -22,4 +24,7 @@ def __init__(cls, clsname, bases, clsattrs, *varargs, aspects=None):\n         \"\"\"\n         type.__init__(cls, clsname, bases, clsattrs, *varargs)\n         if aspects is not None:\n-            cls.aspects = defaultdict(lambda: [], aspects)\n+            for k, v in aspects.items():\n+                aspects[k] = aspectlist(v)", "created_at": "2017-04-08T11:00:08Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNjE0OA==", "fields": {"body": "As mentioned in #3894 (comment) , I found out via https://docs.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions that you can simplify the exception message check to:\nwith pytest.raises(TypeError) as exc:\n    aspectlist(['String'])\nexc.match(\"'String' is not an aspectclass or an instance of an aspectclass\")\nI will also simplify my exitsing ones :)", "diff": "@@ -56,3 +57,21 @@ class SubAspect:\n         assert (str(exc.value) == \"<class 'str'> is not an aspectclass or \"\n                 'an instance of an aspectclass')\n         assert issubaspect(SubAspect('Python'), RootAspect)\n+\n+\n+class AspectlistClassTest:\n+\n+    def test__init__(self):\n+        with pytest.raises(TypeError) as exc:\n+            aspectlist(['String'])\n+        assert (str(exc.value) == \"'String' is not an aspectclass or \"\n+                'an instance of an aspectclass')", "created_at": "2017-04-08T11:04:40Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNjE3MQ==", "fields": {"body": "You should also check some non-aspect objects here, expecting a TypeError (from issubaspect in __contains__)", "diff": "@@ -56,3 +57,21 @@ class SubAspect:\n         assert (str(exc.value) == \"<class 'str'> is not an aspectclass or \"\n                 'an instance of an aspectclass')\n         assert issubaspect(SubAspect('Python'), RootAspect)\n+\n+\n+class AspectlistClassTest:\n+\n+    def test__init__(self):\n+        with pytest.raises(TypeError) as exc:\n+            aspectlist(['String'])\n+        assert (str(exc.value) == \"'String' is not an aspectclass or \"\n+                'an instance of an aspectclass')\n+\n+    def test__contains__(self):\n+        list_of_aspect = aspectlist(\n+            [Metadata.CommitMessage.Shortlog, Metadata.CommitMessage.Body])\n+        assert Metadata.CommitMessage.Shortlog in list_of_aspect\n+        assert Metadata.CommitMessage.Shortlog.ColonExistence in list_of_aspect\n+        assert Metadata.CommitMessage.Body in list_of_aspect\n+        assert Metadata not in list_of_aspect\n+        assert Metadata.CommitMessage.Emptiness not in list_of_aspect", "created_at": "2017-04-08T11:06:03Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUyMDcxMQ==", "fields": {"body": "There will eventually be more than one invalid file. Please give this variable a useful name.", "diff": "@@ -0,0 +1,24 @@\n+import requests\n+\n+from bears.yang.YANGBear import YANGBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+\n+VALID = requests.get(\n+    'https://raw.githubusercontent.com/OpenNetworkingFoundation/CENTENNIAL'\n+    '/master/models/yang/core-model.yang'\n+).text\n+\n+\n+# several missing module sub-statements\n+INVALID = \"\"\"", "created_at": "2017-04-08T15:25:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUyMzEyMg==", "fields": {"body": "@jayvdb Or I will create a YANG model for coala itself :D Hmm... Let's see!", "diff": "@@ -0,0 +1,24 @@\n+import requests\n+\n+from bears.yang.YANGBear import YANGBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+\n+VALID = requests.get(", "created_at": "2017-04-08T17:23:14Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUyNDQyNg==", "fields": {"body": "Don't get angry with me please ;) but using a pair generator has better performance than creating another intermediate dict:\n((k, aspectlist(v)) for (k, v) in dict(aspects).items())\n\nBut it looks not so nice :/ Hmm... it's more important that aspects code looks nice! :D", "diff": "@@ -22,4 +24,6 @@ def __init__(cls, clsname, bases, clsattrs, *varargs, aspects=None):\n         \"\"\"\n         type.__init__(cls, clsname, bases, clsattrs, *varargs)\n         if aspects is not None:\n-            cls.aspects = defaultdict(lambda: [], aspects)\n+            cls.aspects = defaultdict(\n+                lambda: aspectlist([]),\n+                {k: aspectlist(v) for (k, v) in dict(aspects).items()})", "created_at": "2017-04-08T18:32:30Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUyNDQzNg==", "fields": {"body": "Better name it aspectlistTest or the aspectsYEAHBear will get angry in the future ;)\nI know... I also have to change that at several points in my existing aspects code :)", "diff": "@@ -35,6 +36,33 @@ class docs:\n         assert not SubAspect.docs.check_consistency()\n \n \n+class AspectlistClassTest:", "created_at": "2017-04-08T18:33:08Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzMjI4NQ==", "fields": {"body": "What are your opinion about changing this manual imports into an automatic function like https://github.com/coala/aspect-docs/blob/master/generate#L192 ?\nI think it's better to make the \"aspect indexing\" become self-update-able if some other aspect module appear. Also coala use something like this to load their bears.", "diff": "@@ -1,111 +1,71 @@\n+import re\n+import sys\n+from inspect import getmembers\n+from types import ModuleType\n+\n from .base import aspectbase\n from .meta import aspectclass\n from .taste import Taste, TasteError\n \n-__all__ = ['Root', 'Taste', 'TasteError', 'aspectclass']\n+from .root import Root\n+from .Metadata import Metadata\n+from .Redundancy import Redundancy\n+from .Spelling import Spelling", "created_at": "2017-04-09T03:43:22Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzMjMxNQ==", "fields": {"body": "Why this file named root.py, not Root.py like other aspect-tree module? IMO it's better to be consistent in here.", "diff": "@@ -0,0 +1,110 @@\n+from .base import aspectbase\n+from .meta import aspectclass\n+\n+\n+class Root(aspectbase, metaclass=aspectclass):", "created_at": "2017-04-09T03:48:16Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzNDEwMQ==", "fields": {"body": "No, that would be wrong. See grep -r :class:, that is syntax for reSful links which are done with single backticks", "diff": "@@ -4,22 +4,28 @@\n \n class GlobalBear(Bear):\n     \"\"\"\n-    A GlobalBear is able to analyze semantic facts across several file.\n+    A GlobalBear analyzes semantic facts across several files.\n \n     The results of a GlobalBear will be presented grouped by the origin Bear.\n-    Therefore Results spanning above multiple files are allowed and will be\n-    handled right.\n+    Therefore Results spanning across multiple files are allowed and will be\n+    handled correctly.\n \n-    If you only look at one file at once anyway a LocalBear is better for your\n-    needs. (And better for performance and usability for both user and\n-    developer.)\n+    If you are inspecting a single file at a time, you should consider\n+    using a LocalBear.\n     \"\"\"\n \n     def __init__(self,\n-                 file_dict,  # filename : file contents\n+                 file_dict,\n                  section,\n                  message_queue,\n                  timeout=0):\n+        \"\"\"\n+        Constructs a new GlobalBear.\n+\n+        :param file_dict: The dictionary of {filename: file contents}.\n+\n+        See :class:`coalib.bears.Bear` for other parameters.", "created_at": "2017-04-09T06:35:38Z", "last_edited_at": null, "author": "alisianoi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzODA4Ng==", "fields": {"body": "Why?", "diff": "@@ -1,6 +1,7 @@\n from coalib.bearlib.aspects import Root\n from coalib.bearlib.aspects import aspectclass\n from coalib.bearlib.aspects.meta import issubaspect\n+from coalib.bearlib.aspects.Metadata import Metadata", "created_at": "2017-04-09T10:40:42Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzODE2MQ==", "fields": {"body": "I think you should add assert CommitMessage.Shortlog.TrailingPeriod.some_subaspect in aspectsFixOnlyTestBear.aspects['fix'] here", "diff": "@@ -142,22 +143,30 @@ class BearTest(BearTestBase):\n \n     def test_default_aspects(self):\n         assert type(Bear.aspects) is defaultdict\n+        assert type(Bear.aspects['detect']) is aspectlist\n+        assert type(Bear.aspects['fix']) is aspectlist\n         assert Bear.aspects['detect'] == Bear.aspects['fix'] == []\n \n     def test_no_fix_aspects(self):\n         assert type(aspectsDetectOnlyTestBear.aspects) is defaultdict\n+        assert type(aspectsDetectOnlyTestBear.aspects['detect']) is aspectlist\n+        assert type(aspectsDetectOnlyTestBear.aspects['fix']) is aspectlist\n         assert aspectsDetectOnlyTestBear.aspects['fix'] == []\n         assert (aspectsDetectOnlyTestBear.aspects['detect'] ==\n                 [CommitMessage.Shortlog.ColonExistence])\n \n     def test_no_detect_aspects(self):\n         assert type(aspectsFixOnlyTestBear.aspects) is defaultdict\n+        assert type(aspectsFixOnlyTestBear.aspects['detect']) is aspectlist\n+        assert type(aspectsFixOnlyTestBear.aspects['fix']) is aspectlist\n         assert aspectsFixOnlyTestBear.aspects['detect'] == []\n         assert (aspectsFixOnlyTestBear.aspects['fix'] ==", "created_at": "2017-04-09T10:46:40Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDYyNjMxMg==", "fields": {"body": "From @SanketDG:\n\nI somehow feel that since this something that is mutated based on operation of other functions, it should be a function.\nproperties are properties, features, attributes of an object.\nalso, a name like are_dependencies_resolved() looks more suitable.\n\n\nimo it describes a state, so properties should be suitable.\nHmm agree, are_dependencies_resolved sounds better \ud83d\udc4d", "diff": "@@ -138,3 +138,25 @@ def check_circular_dependencies(self):\n         traverse_graph(\n             self._dependency_dict.keys(),\n             lambda node: self._dependency_dict.get(node, frozenset()))\n+\n+    @property\n+    def all_dependencies_resolved(self):", "created_at": "2017-04-10T10:55:38Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTA3NTM2MQ==", "fields": {"body": "It's important to explain why that is: @ mentions generate notifications on the various gitter clients the user may be signed into, you might even wake someone on the other side of the world up. Also it discourages other people to answer the question, so you might wait longer for an answer.\nPlease add something like this here.", "diff": "@@ -87,7 +87,23 @@ Step 1. Meet the Community!\n \n To get started, the first step is to meet the community. We use gitter to\n communicate, and there the helpful community will guide you.\n-Join us at `coala gitter <https://coala.io/chat>`_.\n+Gitter is instant messaging service used by developers and users of GitHub.\n+Gitter uses chatrooms, where developers can join in and can talk about particular topic.\n+Coala has several chatrooms. Here are a few of them. \n+\n+* `coala <https://gitter.im/coala/coala>`_\n+* `gsoc <https://gitter.im/coala/coala/gsoc>`_\n+* `cobot-test <https://gitter.im/coala/cobot-test>`_\n+* `coala-bears <https://gitter.im/coala/coala-bears>`_\n+* `workshop <https://gitter.im/coala/coala/workshops>`_\n+* `freelancers <https://gitter.im/coala/freelancers>`_\n+\n+But before joining the community, here are few things that you should keep in mind.\n+\n+* Don't @-mention or private message people, unless its utterly important", "created_at": "2017-04-12T06:50:35Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTE5NTE5Mw==", "fields": {"body": "imo, for completeness, we should also add a test case here in which some of the dependencies are forcefully resolved", "diff": "@@ -53,3 +53,16 @@ def test_resolve(self):\n \n         self.assertEqual(uut.resolve(30), set())\n         self.assertEqual(uut.resolve(40), {20})\n+\n+    def test_all_dependencies_resolved(self):\n+        uut = DependencyTracker()\n+\n+        self.assertTrue(uut.all_dependencies_resolved)\n+\n+        uut.add(0, 1)\n+\n+        self.assertFalse(uut.all_dependencies_resolved)\n+\n+        uut.resolve(0)\n+\n+        self.assertTrue(uut.all_dependencies_resolved)", "created_at": "2017-04-12T16:16:39Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTI1Mjc2Mg==", "fields": {"body": "@Techievena If aspect is an instance of aspectsYEAH then type(aspect) is the same class object as referenced by aspectsYEAH. \"<aspectclass 'Root.Spelling.aspectsYEAH'>\" is the repr(aspectsYEAH). So nothing is wrong with that condition.", "diff": "@@ -0,0 +1,67 @@\n+import re\n+\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Diff import Diff\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.bearlib.aspects.Spelling import aspectsYEAH\n+from coalib.bearlib.languages import Unknown\n+\n+\n+class aspectsYEAHBear(LocalBear, aspects={\n+        'detect': [aspectsYEAH],\n+        'fix': [aspectsYEAH], }):\n+    LANGUAGES = {'All'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Spelling'}\n+\n+    def run(self, filename, file, aspects=[\n+            aspectsYEAH(Unknown),\n+    ]):\n+        \"\"\"\n+        Check for the correct spelling of ``aspect`` and ``aspectsYEAH``\n+        in the file.\n+        \"\"\"\n+\n+        for aspect in aspects:\n+            if type(aspect) is aspectsYEAH:", "created_at": "2017-04-12T20:31:36Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTM4NTUyOQ==", "fields": {"body": "Mentioning it would be a good thing as newcomers which are new to gitter might use it accidentally or unintentionally while exploring it.", "diff": "@@ -87,7 +87,23 @@ Step 1. Meet the Community!\n \n To get started, the first step is to meet the community. We use gitter to\n communicate, and there the helpful community will guide you.\n-Join us at `coala gitter <https://coala.io/chat>`_.\n+Gitter is instant messaging service used by developers and users of GitHub.\n+Gitter uses chatrooms, where developers can join in and can talk about particular topic.\n+Coala has several chatrooms. Here are a few of them. \n+\n+* `coala <https://gitter.im/coala/coala>`_\n+* `gsoc <https://gitter.im/coala/coala/gsoc>`_\n+* `cobot-test <https://gitter.im/coala/cobot-test>`_\n+* `coala-bears <https://gitter.im/coala/coala-bears>`_\n+* `workshop <https://gitter.im/coala/coala/workshops>`_\n+* `freelancers <https://gitter.im/coala/freelancers>`_\n+\n+But before joining the community, here are few things that you should keep in mind.\n+\n+* Don't @-mention or private message people, unless its utterly important", "created_at": "2017-04-13T13:15:10Z", "last_edited_at": null, "author": "Monal5031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTMyNzg1Nw==", "fields": {"body": "@/all is such a disruptive feature, I'm wondering if we're not better off, not mentioning it here. If we do, please add that it should never be done by a newcomer.", "diff": "@@ -87,7 +87,23 @@ Step 1. Meet the Community!\n \n To get started, the first step is to meet the community. We use gitter to\n communicate, and there the helpful community will guide you.\n-Join us at `coala gitter <https://coala.io/chat>`_.\n+Gitter is instant messaging service used by developers and users of GitHub.\n+Gitter uses chatrooms, where developers can join in and can talk about particular topic.\n+Coala has several chatrooms. Here are a few of them. \n+\n+* `coala <https://gitter.im/coala/coala>`_\n+* `gsoc <https://gitter.im/coala/coala/gsoc>`_\n+* `cobot-test <https://gitter.im/coala/cobot-test>`_\n+* `coala-bears <https://gitter.im/coala/coala-bears>`_\n+* `workshop <https://gitter.im/coala/coala/workshops>`_\n+* `freelancers <https://gitter.im/coala/freelancers>`_\n+\n+But before joining the community, here are few things that you should keep in mind.\n+\n+* Don't @-mention or private message people, unless its utterly important", "created_at": "2017-04-13T07:40:19Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTQ2OTE1Ng==", "fields": {"body": "@Monal5031 But only with really strongly emphasizing to not use it :D\n@Khushmeet", "diff": "@@ -87,7 +87,23 @@ Step 1. Meet the Community!\n \n To get started, the first step is to meet the community. We use gitter to\n communicate, and there the helpful community will guide you.\n-Join us at `coala gitter <https://coala.io/chat>`_.\n+Gitter is instant messaging service used by developers and users of GitHub.\n+Gitter uses chatrooms, where developers can join in and can talk about particular topic.\n+Coala has several chatrooms. Here are a few of them. \n+\n+* `coala <https://gitter.im/coala/coala>`_\n+* `gsoc <https://gitter.im/coala/coala/gsoc>`_\n+* `cobot-test <https://gitter.im/coala/cobot-test>`_\n+* `coala-bears <https://gitter.im/coala/coala-bears>`_\n+* `workshop <https://gitter.im/coala/coala/workshops>`_\n+* `freelancers <https://gitter.im/coala/freelancers>`_\n+\n+But before joining the community, here are few things that you should keep in mind.\n+\n+* Don't @-mention or private message people, unless its utterly important", "created_at": "2017-04-13T19:32:47Z", "last_edited_at": "2017-04-13T19:34:04Z", "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTQwNjAzMQ==", "fields": {"body": "The ones who instantiate a DependencyTracker are responsible for resolving dependencies in the right order.\n\nThis should be part of the docstring as it explains the right usage of resolve function  IMO.", "diff": "@@ -0,0 +1,162 @@\n+from coalib.core.Graphs import traverse_graph\n+\n+\n+class DependencyTracker:\n+    \"\"\"\n+    A ``DependencyTracker`` allows to register and manage dependencies between\n+    objects.\n+\n+    This class uses a directed graph to track relations.\n+\n+    Add a dependency relation between two objects:\n+\n+    >>> object1 = object()\n+    >>> object2 = object()\n+    >>> tracker = DependencyTracker()\n+    >>> tracker.add(object2, object1)\n+\n+    This would define that ``object1`` is dependent on ``object2``.\n+\n+    If you define that ``object2`` has its dependency duty fulfilled, you can\n+    resolve it:\n+\n+    >>> resolved = tracker.resolve(object2)\n+    >>> resolved\n+    {<object object at ...>}\n+    >>> resolved_object = resolved.pop()\n+    >>> resolved_object is object1\n+    True\n+\n+    This returns all objects that are now freed, meaning they have no\n+    dependencies any more.\n+\n+    >>> object3 = object()\n+    >>> tracker.add(object2, object1)\n+    >>> tracker.add(object3, object1)\n+    >>> tracker.resolve(object2)\n+    set()\n+    >>> tracker.resolve(object3)\n+    {<object object at ...>}\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._dependency_dict = {}\n+\n+    def add(self, dependency, dependant):\n+        \"\"\"\n+        Add a dependency relation.\n+\n+        This function does not check for circular dependencies.\n+\n+        >>> tracker = DependencyTracker()\n+        >>> tracker.add(0, 1)\n+        >>> tracker.add(0, 2)\n+        >>> tracker.resolve(0)\n+        {1, 2}\n+\n+        :param dependency:\n+            The object that is the dependency.\n+        :param dependant:\n+            The object that is the dependant.\n+        \"\"\"\n+        if dependency not in self._dependency_dict:\n+            self._dependency_dict[dependency] = set()\n+\n+        self._dependency_dict[dependency].add(dependant)\n+\n+    def resolve(self, dependency):\n+        \"\"\"\n+        Resolves all dependency-relations from the given dependency, and frees\n+        and returns dependants with no more dependencies. If the given\n+        dependency is itself a dependant, all those relations are also removed.\n+\n+        >>> tracker = DependencyTracker()\n+        >>> tracker.add(0, 1)\n+        >>> tracker.add(0, 2)\n+        >>> tracker.add(2, 3)\n+        >>> tracker.resolve(0)\n+        {1, 2}\n+        >>> tracker.resolve(2)\n+        {3}\n+        >>> tracker.resolve(2)\n+        set()\n+\n+        :param dependency:\n+            The dependency.\n+        :return:\n+            Returns a set of dependants whose dependencies were all resolved.\n+        \"\"\"\n+        # Check if dependency has itself dependencies which aren't resolved,\n+        # these need to be removed too. The ones who instantiate a", "created_at": "2017-04-13T14:41:38Z", "last_edited_at": null, "author": "Siddhartha1234", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTQwODA1NA==", "fields": {"body": "The problem with defaultdicts that accesses do create new sets and those get placed into the dict. That makes it non-empty any more and bool(dc) would then yield True though there are effectively no dependency relations. I rely on that behaviour \ud83d\udc4d", "diff": "@@ -0,0 +1,162 @@\n+from coalib.core.Graphs import traverse_graph\n+\n+\n+class DependencyTracker:\n+    \"\"\"\n+    A ``DependencyTracker`` allows to register and manage dependencies between\n+    objects.\n+\n+    This class uses a directed graph to track relations.\n+\n+    Add a dependency relation between two objects:\n+\n+    >>> object1 = object()\n+    >>> object2 = object()\n+    >>> tracker = DependencyTracker()\n+    >>> tracker.add(object2, object1)\n+\n+    This would define that ``object1`` is dependent on ``object2``.\n+\n+    If you define that ``object2`` has its dependency duty fulfilled, you can\n+    resolve it:\n+\n+    >>> resolved = tracker.resolve(object2)\n+    >>> resolved\n+    {<object object at ...>}\n+    >>> resolved_object = resolved.pop()\n+    >>> resolved_object is object1\n+    True\n+\n+    This returns all objects that are now freed, meaning they have no\n+    dependencies any more.\n+\n+    >>> object3 = object()\n+    >>> tracker.add(object2, object1)\n+    >>> tracker.add(object3, object1)\n+    >>> tracker.resolve(object2)\n+    set()\n+    >>> tracker.resolve(object3)\n+    {<object object at ...>}\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._dependency_dict = {}\n+\n+    def add(self, dependency, dependant):\n+        \"\"\"\n+        Add a dependency relation.\n+\n+        This function does not check for circular dependencies.\n+\n+        >>> tracker = DependencyTracker()\n+        >>> tracker.add(0, 1)\n+        >>> tracker.add(0, 2)\n+        >>> tracker.resolve(0)\n+        {1, 2}\n+\n+        :param dependency:\n+            The object that is the dependency.\n+        :param dependant:\n+            The object that is the dependant.\n+        \"\"\"\n+        if dependency not in self._dependency_dict:\n+            self._dependency_dict[dependency] = set()", "created_at": "2017-04-13T14:49:53Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTQwODMxMQ==", "fields": {"body": "yes that's the repr of an object created by the built-in function object(). The class name of such an object is object ;)", "diff": "@@ -0,0 +1,162 @@\n+from coalib.core.Graphs import traverse_graph\n+\n+\n+class DependencyTracker:\n+    \"\"\"\n+    A ``DependencyTracker`` allows to register and manage dependencies between\n+    objects.\n+\n+    This class uses a directed graph to track relations.\n+\n+    Add a dependency relation between two objects:\n+\n+    >>> object1 = object()\n+    >>> object2 = object()\n+    >>> tracker = DependencyTracker()\n+    >>> tracker.add(object2, object1)\n+\n+    This would define that ``object1`` is dependent on ``object2``.\n+\n+    If you define that ``object2`` has its dependency duty fulfilled, you can\n+    resolve it:\n+\n+    >>> resolved = tracker.resolve(object2)\n+    >>> resolved\n+    {<object object at ...>}", "created_at": "2017-04-13T14:51:01Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTU0MjU0NQ==", "fields": {"body": "Just return isinstance(item, (aspectclass, aspectbase)) :)", "diff": "@@ -76,21 +77,41 @@ def __repr__(cls):\n         return '<%s %s>' % (type(cls).__name__, repr(cls.__qualname__))\n \n \n+def isaspect(item):\n+    \"\"\"\n+    This function checks whether or not an object is an instance of\n+    ``aspectclass``\n+    \"\"\"\n+    if not isinstance(item, (aspectclass, aspectbase)):\n+        return False\n+\n+    return True", "created_at": "2017-04-14T07:50:31Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTU4MDg1OA==", "fields": {"body": "Hm the argparser docs https://docs.python.org/3/library/argparse.html#nargs seems able to correctly parse something like that as a list. Maybe you must use nargs='*' for it to works.", "diff": "@@ -385,6 +385,20 @@ def gather_configuration(acquire_settings,\n     local_bears, global_bears = fill_settings(sections,\n                                               acquire_settings,\n                                               log_printer)\n+\n+    exclude = False\n+    for x in arg_list:", "created_at": "2017-04-14T14:31:56Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTUwNzkxMA==", "fields": {"body": "@userzimmermann Yeah I agree with you it would need really strong emphasizing. \ud83d\ude03", "diff": "@@ -87,7 +87,23 @@ Step 1. Meet the Community!\n \n To get started, the first step is to meet the community. We use gitter to\n communicate, and there the helpful community will guide you.\n-Join us at `coala gitter <https://coala.io/chat>`_.\n+Gitter is instant messaging service used by developers and users of GitHub.\n+Gitter uses chatrooms, where developers can join in and can talk about particular topic.\n+Coala has several chatrooms. Here are a few of them. \n+\n+* `coala <https://gitter.im/coala/coala>`_\n+* `gsoc <https://gitter.im/coala/coala/gsoc>`_\n+* `cobot-test <https://gitter.im/coala/cobot-test>`_\n+* `coala-bears <https://gitter.im/coala/coala-bears>`_\n+* `workshop <https://gitter.im/coala/coala/workshops>`_\n+* `freelancers <https://gitter.im/coala/freelancers>`_\n+\n+But before joining the community, here are few things that you should keep in mind.\n+\n+* Don't @-mention or private message people, unless its utterly important", "created_at": "2017-04-13T23:38:27Z", "last_edited_at": "2017-04-13T23:38:36Z", "author": "Monal5031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTUxNDAwNw==", "fields": {"body": "I think we should move the message construction part into the aspectTypeError itself. As @userzimmermann says\n\n... aspectTypeError, which only takes the wrong-typed object for instantiation ...\n\nSo it would be aspectTypeError(item)", "diff": "@@ -76,21 +77,41 @@ def __repr__(cls):\n         return '<%s %s>' % (type(cls).__name__, repr(cls.__qualname__))\n \n \n+def isaspect(item):\n+    \"\"\"\n+    This function checks whether or not an object is an instance of\n+    ``aspectclass``\n+    \"\"\"\n+    if not isinstance(item, (aspectclass, aspectbase)):\n+        return False\n+\n+    return True\n+\n+\n+def assert_aspect(item):\n+    \"\"\"\n+    This function raises ``aspectTypeError`` when an object is not an instance\n+    of ``aspectclass``\n+    \"\"\"\n+    class aspectTypeError(TypeError):\n+\n+        def __init__(self, message, severity=RESULT_SEVERITY.MAJOR):\n+            super(aspectTypeError, self).__init__(message)\n+            self.severity = severity\n+\n+    if not isaspect(item):\n+        raise aspectTypeError(\n+            '{} is not an aspectclass or an instance of an '", "created_at": "2017-04-14T00:47:21Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTY2NDA5NA==", "fields": {"body": "It should allow a missing func desc, but not require one.\nIf one is present, that is OK.  If one is missing, that is also OK.", "diff": "@@ -0,0 +1,58 @@\n+from queue import Queue\n+import os.path\n+import unittest\n+\n+from coalib.results.Diff import Diff\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+\n+from bears.documentation.DocumentationStyleBear import DocumentationStyleBear\n+\n+\n+def load_testfile(filename):\n+    filepath = os.path.join(os.path.dirname(__file__), 'test_files',\n+                            'DocumentationStyleBear', filename)\n+    with open(filepath) as fl:\n+        return fl.read()\n+\n+\n+def test(test_file, expected_file):\n+    def test_function(self):\n+        test_file_content = load_testfile(test_file).splitlines(True)\n+\n+        arguments = {'language': 'python', 'docstyle': 'default'}\n+        if test_file == 'bad_file6.py.test':\n+            arguments.update({'allow_missing_func_desc': 'True'})\n+        section = Section('test-section')\n+        for key, value in arguments.items():\n+            section[key] = value\n+\n+        with execute_bear(\n+                DocumentationStyleBear(section, Queue()),\n+                test_file,\n+                test_file_content,\n+                **arguments) as results:\n+\n+            diff = Diff(test_file_content)\n+            for result in results:\n+                # Only the given test file should contain a patch.\n+                self.assertEqual(len(result.diffs), 1)\n+\n+                diff += result.diffs[test_file]\n+\n+        correct_file_content = load_testfile(expected_file).splitlines(True)\n+\n+        self.assertEqual(correct_file_content, diff.modified)\n+\n+    return test_function\n+\n+\n+class DocumentationStyleBearTest(unittest.TestCase):\n+    test_bad1 = test('bad_file.py.test', 'bad_file.py.test.correct')\n+    test_bad2 = test('bad_file2.py.test', 'bad_file2.py.test.correct')\n+    test_bad3 = test('bad_file3.py.test', 'bad_file3.py.test.correct')\n+    test_bad4 = test('bad_file4.py.test', 'bad_file4.py.test.correct')\n+    test_bad5 = test('bad_file5.py.test', 'bad_file5.py.test.correct')\n+    test_bad6 = test('bad_file6.py.test', 'bad_file6.py.test.correct')", "created_at": "2017-04-15T12:13:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTY4MjU4Mw==", "fields": {"body": "we have standard config variable for this.\nWe bend the linter to fit into coala's simpler settings system; we do not bend coala bears to suit the linters config names.", "diff": "@@ -0,0 +1,206 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+)[:]*(?P<column>\\d+)*\\s*'\n+                     r'(?P<severity>error|warning)\\s*(?P<message>.+)')\n+class StylintBear:\n+    \"\"\"\n+    Attempts to catch little mistakes (duplication of rules for instance) and\n+    to enforce a code style guide. This is particularly important with Stylus,\n+    which is unopinionated when it comes to syntax. Like Stylus itself, this\n+    linter opts for flexibility over rigidity.\n+    \"\"\"\n+\n+    LANGUAGES = {'Stylus'}\n+    REQUIREMENTS = {NpmRequirement('stylint', '1.5.9')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/SimenB/stylint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        allow_block_keyword: bool=False,\n+                        allow_brackets: str='never',\n+                        allow_colons: str='always',\n+                        allow_colors: str='always',\n+                        allow_spaces_after_commas: str='always',\n+                        allow_spaces_after_comments: str='always',\n+                        allow_css_literal: str='never',\n+                        max_selector_depth: bool=False,\n+                        check_duplicates: bool=True,\n+                        allow_efficient_properties: str='always',\n+                        set_extend_preference: bool=False,\n+                        check_global_duplicates: bool=False,\n+                        set_indent_preference: bool=False,\n+                        allow_leading_zero: str='never',\n+                        set_max_errors: bool=False,\n+                        set_max_warnings: bool=False,\n+                        mixed_spaces_and_tabs: bool=False,\n+                        set_naming_convention: bool=False,\n+                        set_strict_naming_convention: bool = False,\n+                        allow_none_keyword: str='never',\n+                        check_no_important_keyword: bool=True,\n+                        allow_spaces_inside_parens: bool=False,\n+                        allow_placeholder: str='always',\n+                        prefix_vars_with_dollar: str='always',\n+                        allow_semicolons: str='never',\n+                        sort_order: str='alphabetical',\n+                        allow_stacked_properties: str='never',\n+                        check_valid_property: bool=True,\n+                        allow_zero_units: str='never',\n+                        z_index_normalize: bool=False):\n+        \"\"\"\n+        :param allow_block_keyword:\n+            When ``always`` expect the ``@block`` keyword when defining block\n+            variables. When ``never``, expect no ``@block`` keyword when\n+            defining block variables. When ``false``, do not check either way.\n+        :param allow_brackets:\n+            When ``always``, expect ``{}`` when declaring a selector. When\n+            ``never``, expect no brackets when declaring a selector.\n+        :param allow_colons:\n+            When ``always``, expect ``:`` when declaring a property. When\n+            ``never``, expect no ``:`` when declaring a property.\n+        :param allow_colors:\n+            When ``always``, enforce variables when defining hex values.\n+        :param allow_spaces_after_commas:\n+            Enforce or disallow spaces after commas.\n+        :param allow_spaces_after_comments:\n+            Enforce or disallow spaces after line comments.\n+        :param allow_css_literal:\n+            By default Stylint ignores ``@css`` blocks. If set to true however,\n+            it will throw a warning if ``@css`` is used.\n+        :param max_selector_depth:\n+            Set the max selector depth. If set to 4, max selector depth will\n+            be 4 indents. Pseudo selectors like ``&:first-child`` or\n+            ``&:hover`` won't count towards the limit.\n+        :param check_duplicates:\n+            Checks if selector or property duplicated unnecessarily. By\n+            default, only checks on a file-by-file basis, but if\n+            ``globalDupes: true`` is set, then it will also check for\n+            duplicates globally (for root values only).\n+        :param allow_efficient_properties:\n+            Check for places where properties can be written more efficiently.\n+        :param set_extend_preference:\n+            Pass in either ``@extend`` or ``@extends`` and then enforce that.\n+            Both are valid in Stylus. It doesn't really matter which one\n+            you use.\n+        :param check_global_duplicates:\n+            Works in conjunction with duplicates. Does nothing on its own.\n+            If ``false``, duplicates will check for dupes within individual\n+            files only. If true, duplicates will check for dupes across all\n+            files.\n+        :param set_indent_preference:\n+            This works in conjunction with ``max_selector_depth``. If you\n+            indent with spaces this is the number of spaces you indent with.\n+            If you use hard tabs, set this value to ``false``.\n+        :param allow_leading_zero:\n+            Enforce or disallow unnecessary leading zeroes on decimal points.\n+        :param set_max_errors:\n+            Set 'max' number of Errors.\n+        :param set_max_warnings:\n+            Set 'max' number of Warnings.\n+        :param mixed_spaces_and_tabs:", "created_at": "2017-04-16T11:22:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTY4MzE1Mw==", "fields": {"body": "Or instead of this we could maybe wait for #4109", "diff": "@@ -16,6 +16,13 @@ def __init__(self, seq=()):\n         list.__init__(self, seq)\n \n     def __contains__(self, aspect):\n+        if 'bear' in dir(self) and isinstance(aspect, aspectbase):\n+            compatible = False\n+            for language in self.bear.LANGUAGES:\n+                if str(aspect.language).split()[0] == language:", "created_at": "2017-04-16T12:09:34Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTc4MzQxMg==", "fields": {"body": "IMO it is better to better to define this bear in conftest.py because we may further need this bear and its settings for future tests.", "diff": "@@ -2,6 +2,14 @@\n \n from coalib.bearlib.aspects.collections import aspectlist\n from coalib.bearlib.aspects.Metadata import Metadata\n+from coalib.bears.LocalBear import LocalBear", "created_at": "2017-04-17T17:51:11Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTczMDg1Mw==", "fields": {"body": "this will all be removed due to the above comment, ...\nbut never use # pragma: no cover to avoid writing additional tests.  It should be used only for insanely difficulty chunks of code to reach with a test.", "diff": "@@ -0,0 +1,43 @@\n+from coalib.settings.Setting import typed_list\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import \\\n+    DistributionRequirement\n+\n+\n+@linter(executable='phpmd',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.*):(?P<line>\\d+)(?P<message>.*)')\n+class PHPMessDetectorBear:\n+    \"\"\"\n+    The bear takes a given PHP source code base and looks for several\n+    potential problems within that source. These problems can be things like:\n+\n+    - Possible bugs\n+    - Suboptimal code\n+    - Overcomplicated expressions\n+    - Unused parameters, methods, properties\n+    \"\"\"\n+\n+    LANGUAGES = {'PHP'}\n+    REQUIREMENTS = {DistributionRequirement(apt_get='phpmd')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Complexity', 'Unused Code', 'Redundancy',\n+                  'Variable Misuse'}\n+    SEE_MORE = 'https://phpmd.org/about.html'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         phpmd_ruleset: typed_list(str)=''):\n+        \"\"\"\n+        :param phpmd_ruleset:\n+            A ruleset filename or a comma-separated string of rulesetfilenames.\n+            Available rulesets: cleancode, codesize, controversial, design,\n+            naming, unusedcode.\n+        \"\"\"\n+        if phpmd_ruleset == '':  # pragma: no cover", "created_at": "2017-04-17T11:06:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTgzMTc4MA==", "fields": {"body": "We also have to extend coalib.bears.meta.bearclass for making this work properly. It might somehow work now this way, but aspect.language is a coalib.bearlib.languages.Language.Language instance, and we want to match it with Language instances the bear supports. Old-style bear.LANGUAGES will never hold Language instances. So I propose to add an additional aspects=-accompanying meta keyword-only languages= attribute to bearclass for adding Language instances to a bear and store them as lower-case cls.languages attribute", "diff": "@@ -16,6 +16,13 @@ def __init__(self, seq=()):\n         list.__init__(self, seq)\n \n     def __contains__(self, aspect):\n+        if hasattr(self, 'bear') and isinstance(aspect, aspectbase):\n+            compatible = False\n+            for language in self.bear.LANGUAGES:", "created_at": "2017-04-17T22:00:59Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTkwODc4OA==", "fields": {"body": "Note that as a GlobalBear, this bear is typically only run once per coala invocation, so this variable is going to be especially useful normally, but ... with tests ... it is rather helpful to reduce spamming the logs.", "diff": "@@ -31,6 +31,18 @@ class GitCommitBear(GlobalBear):\n     }\n     CONCATENATION_KEYWORDS = [r',', r'\\sand\\s']\n \n+    _nltk_data_downloaded = False\n+\n+    @classmethod\n+    def setup_dependencies(cls):\n+        if not cls._nltk_data_downloaded:\n+            nltk.download([\n+                'punkt',\n+                'maxent_treebank_pos_tagger',\n+                'averaged_perceptron_tagger',\n+            ])\n+            cls._nltk_data_downloaded = True", "created_at": "2017-04-18T09:30:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjE0MTgxOQ==", "fields": {"body": "shouldn't return bool(self.section.get('shortlog_check_imperative', True)) do the job in one line? (Note: .contents shouldn't be needed and we should optimize for readability rather than an unnoticable performance benefit)\nSecond, the default True might change, maybe put this in a class level constant?", "diff": "@@ -31,6 +31,22 @@ class GitCommitBear(GlobalBear):\n     }\n     CONCATENATION_KEYWORDS = [r',', r'\\sand\\s']\n \n+    _nltk_data_downloaded = False\n+\n+    def _check_imperative_enabled(self):\n+        imperative_check = self.section.contents.get(\n+            'shortlog_check_imperative', True)\n+        return bool(imperative_check)", "created_at": "2017-04-19T08:24:21Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjE0OTI0Ng==", "fields": {"body": "The tests would fail if the default changes.", "diff": "@@ -31,6 +31,22 @@ class GitCommitBear(GlobalBear):\n     }\n     CONCATENATION_KEYWORDS = [r',', r'\\sand\\s']\n \n+    _nltk_data_downloaded = False\n+\n+    def _check_imperative_enabled(self):\n+        imperative_check = self.section.contents.get(\n+            'shortlog_check_imperative', True)\n+        return bool(imperative_check)", "created_at": "2017-04-19T09:00:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjE4NzU2Ng==", "fields": {"body": "Can we have a tuple with the 3 strings and just have the keyword as argument?", "diff": "@@ -193,25 +209,19 @@ def check_imperative(self, paragraph):\n             A list of tuples having 2 elements (invalid word, parts of speech)\n             or an empty list if no invalid words are found.\n         \"\"\"\n-        try:\n-            words = nltk.word_tokenize(nltk.sent_tokenize(paragraph)[0])\n-            # VBZ : Verb, 3rd person singular present, like 'adds', 'writes'\n-            #       etc\n-            # VBD : Verb, Past tense , like 'added', 'wrote' etc\n-            # VBG : Verb, Present participle, like 'adding', 'writing'\n-            word, tag = nltk.pos_tag(['I'] + words)[1:2][0]\n-            if(tag.startswith('VBZ') or\n-               tag.startswith('VBD') or\n-               tag.startswith('VBG') or\n-               word.endswith('ing')):  # Handle special case for VBG\n-                return (word, tag)\n-            else:\n-                return None\n-        except LookupError as error:  # pragma: no cover\n-            self.err('NLTK data missing, install by running following '\n-                     'commands `python3 -m nltk.downloader punkt'\n-                     ' maxent_treebank_pos_tagger averaged_perceptron_tagger`')\n-            return\n+        words = nltk.word_tokenize(nltk.sent_tokenize(paragraph)[0])\n+        # VBZ : Verb, 3rd person singular present, like 'adds', 'writes'\n+        #       etc\n+        # VBD : Verb, Past tense , like 'added', 'wrote' etc\n+        # VBG : Verb, Present participle, like 'adding', 'writing'\n+        word, tag = nltk.pos_tag(['I'] + words)[1:2][0]\n+        if(tag.startswith('VBZ') or\n+           tag.startswith('VBD') or\n+           tag.startswith('VBG') or", "created_at": "2017-04-19T12:28:13Z", "last_edited_at": "2017-04-19T13:55:42Z", "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjM0MDQyMg==", "fields": {"body": "why not using logging from the beginning?", "diff": "@@ -609,6 +609,51 @@ def print_actions(console_printer, section, actions, failed_actions):\n     return get_action_info(section, actions[choice - 1], failed_actions)\n \n \n+def apply_action_to_section(action,\n+                            section,\n+                            action_name,\n+                            result,\n+                            file_dict,\n+                            file_diff_dict,\n+                            console_printer,\n+                            failed_actions):\n+    \"\"\"\n+    Applies the given action.\n+\n+    :param action:          The action to the applied.\n+    :param section:         Currently active section.\n+    :param action_name:     The name of the action.\n+    :param result:          Result corresponding to the actions.\n+    :param file_diff_dict:  If it is an action which applies a patch, this\n+                            contains the diff of the patch to be applied to\n+                            the file with filename as keys.\n+    :param file_dict:       Dictionary with filename as keys and its contents\n+                            as values.\n+    :param console_printer: Object to print messages on the console.", "created_at": "2017-04-19T23:58:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjQ5ODAxOA==", "fields": {"body": "why?  Travis shows only the first line, so ideally the exit is there so the reader can see what is being done.\nWhy hide the if?", "diff": "@@ -62,24 +60,24 @@ before_script:\n \n script:\n   - >\n-    if [[ $TRAVIS_PYTHON_VERSION_MINOR < 4 || $TRAVIS_PYTHON_VERSION_MAJOR == 2 ]]; then\n+    if [[ \"$UNSUPPORTED\" == true ]]; then\n       coverage run setup.py install | grep -q 'coala supports only python 3.4 or later'\n+    fi\n+  - if [[ \"$UNSUPPORTED\" == true ]]; then exit; fi", "created_at": "2017-04-20T16:23:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjQ5OTEwMg==", "fields": {"body": "This is an indentation only change, and should not be changed in this commit.\nYou can read more about it at coala/coala-bears#1037", "diff": "@@ -62,24 +60,24 @@ before_script:\n \n script:\n   - >\n-    if [[ $TRAVIS_PYTHON_VERSION_MINOR < 4 || $TRAVIS_PYTHON_VERSION_MAJOR == 2 ]]; then\n+    if [[ \"$UNSUPPORTED\" == true ]]; then\n       coverage run setup.py install | grep -q 'coala supports only python 3.4 or later'\n+    fi\n+  - if [[ \"$UNSUPPORTED\" == true ]]; then exit; fi\n+  - bash .misc/tests.sh\n+  - python setup.py bdist_wheel\n+  - pip install ./dist/coala-*.whl\n+  - pip install coala-bears[alldeps] --pre -U\n+  # https://github.com/coala/coala-bears/issues/1037", "created_at": "2017-04-20T16:28:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjU1MTk5Ng==", "fields": {"body": "0 was never a dependant here, so it can't be \"freed\". It is in principle already freed. And resolve only returns newly freed dependent objects.\nThe idea is that we would make bear instances dependent on each other (depending what the user has specified inside his bear), and the core resolves a bear once it has finished. The returned \"free\" bears can now be scheduled for execution, as dependencies are resolved.", "diff": "@@ -0,0 +1,166 @@\n+from coalib.core.Graphs import traverse_graph\n+\n+\n+class DependencyTracker:\n+    \"\"\"\n+    A ``DependencyTracker`` allows to register and manage dependencies between\n+    objects.\n+\n+    This class uses a directed graph to track relations.\n+\n+    Add a dependency relation between two objects:\n+\n+    >>> object1 = object()\n+    >>> object2 = object()\n+    >>> tracker = DependencyTracker()\n+    >>> tracker.add(object2, object1)\n+\n+    This would define that ``object1`` is dependent on ``object2``.\n+\n+    If you define that ``object2`` has its dependency duty fulfilled, you can\n+    resolve it:\n+\n+    >>> resolved = tracker.resolve(object2)\n+    >>> resolved\n+    {<object object at ...>}\n+    >>> resolved_object = resolved.pop()\n+    >>> resolved_object is object1\n+    True\n+\n+    This returns all objects that are now freed, meaning they have no\n+    dependencies any more.\n+\n+    >>> object3 = object()\n+    >>> tracker.add(object2, object1)\n+    >>> tracker.add(object3, object1)\n+    >>> tracker.resolve(object2)\n+    set()\n+    >>> tracker.resolve(object3)\n+    {<object object at ...>}\n+\n+    The ones who instantiate a ``DependencyTracker`` are responsible for\n+    resolving dependencies in the right order. Dependencies which are itself\n+    dependent will be forcefully resolved and removed from their according\n+    dependencies too.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._dependency_dict = {}\n+\n+    def add(self, dependency, dependant):\n+        \"\"\"\n+        Add a dependency relation.\n+\n+        This function does not check for circular dependencies.\n+\n+        >>> tracker = DependencyTracker()\n+        >>> tracker.add(0, 1)\n+        >>> tracker.add(0, 2)\n+        >>> tracker.resolve(0)\n+        {1, 2}\n+\n+        :param dependency:\n+            The object that is the dependency.\n+        :param dependant:\n+            The object that is the dependant.\n+        \"\"\"\n+        if dependency not in self._dependency_dict:\n+            self._dependency_dict[dependency] = set()\n+\n+        self._dependency_dict[dependency].add(dependant)\n+\n+    def resolve(self, dependency):\n+        \"\"\"\n+        Resolves all dependency-relations from the given dependency, and frees\n+        and returns dependants with no more dependencies. If the given\n+        dependency is itself a dependant, all those relations are also removed.\n+\n+        >>> tracker = DependencyTracker()\n+        >>> tracker.add(0, 1)\n+        >>> tracker.add(0, 2)\n+        >>> tracker.add(2, 3)\n+        >>> tracker.resolve(0)\n+        {1, 2}", "created_at": "2017-04-20T20:23:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjc3MTU3MQ==", "fields": {"body": "Also, the template file Gemfile.jinja2 needs to be updated if the required key is not used.", "diff": "@@ -126,8 +126,9 @@ def write_gem_requirements(requirements):\n     for requirement in requirements:\n         gem_dependencies.append(\n             {'name': requirement.package,\n-             'version': requirement.version,\n-             'required': requirement.require})", "created_at": "2017-04-21T20:36:44Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE0MzYzNg==", "fields": {"body": "Waiting for #4128", "diff": "@@ -62,24 +60,24 @@ before_script:\n \n script:\n   - >\n-    if [[ $TRAVIS_PYTHON_VERSION_MINOR < 4 || $TRAVIS_PYTHON_VERSION_MAJOR == 2 ]]; then\n+    if [[ \"$UNSUPPORTED\" == true ]]; then\n       coverage run setup.py install | grep -q 'coala supports only python 3.4 or later'\n+    fi\n+  - if [[ \"$UNSUPPORTED\" == true ]]; then exit; fi\n+  - bash .misc/tests.sh\n+  - python setup.py bdist_wheel\n+  - pip install ./dist/coala-*.whl\n+  - pip install coala-bears[alldeps] --pre -U\n+  # https://github.com/coala/coala-bears/issues/1037\n+  - >\n+    if [[ \"$TRAVIS_PULL_REQUEST\" == \"false\" ]]; then\n+      python3 -m nltk.downloader punkt maxent_treebank_pos_tagger averaged_perceptron_tagger", "created_at": "2017-04-25T09:14:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE0OTY2Nw==", "fields": {"body": "I'm still uncertain about this. This flag is recording useful information, just not very useful for our purposes.\nSo i think we keep the flag, in the Requirement.\nI'd like to check if removing it from Gemfile improves performance at all.", "diff": "@@ -126,8 +126,9 @@ def write_gem_requirements(requirements):\n     for requirement in requirements:\n         gem_dependencies.append(\n             {'name': requirement.package,\n-             'version': requirement.version,\n-             'required': requirement.require})", "created_at": "2017-04-25T09:39:50Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM0NTMwNw==", "fields": {"body": "InvalidLinkBear doesnt need PythonImportRequirement\nThe only second party import is requests, which is also a dependency of coala.\nSo this bear doesnt have any extra dependencies.", "diff": "@@ -19,7 +20,7 @@\n class InvalidLinkBear(LocalBear):\n     DEFAULT_TIMEOUT = 15\n     LANGUAGES = {'All'}\n-    REQUIREMENTS = {PipRequirement('requests', '2.12')}\n+    REQUIREMENTS = {PythonImportRequirement('requests', '2.12')}", "created_at": "2017-04-26T00:54:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM0NTc5Nw==", "fields": {"body": "wow, ugly.\nmove PythonImportRequirement( down onto this line", "diff": "@@ -12,7 +13,11 @@\n class YapfBear(LocalBear):\n     LANGUAGES = {'Python', 'Python 2', 'Python 3'}\n     AUTHORS = {'The coala developers'}\n-    REQUIREMENTS = {PipRequirement('yapf', '0.14.0')}\n+    REQUIREMENTS = {PythonImportRequirement(\n+                                        'yapf',", "created_at": "2017-04-26T00:59:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM5MjM0NA==", "fields": {"body": "trailing comma", "diff": "@@ -15,7 +19,13 @@ class RubySyntaxBear:\n     Checks the code with ``ruby -wc`` on each file separately.\n     \"\"\"\n     LANGUAGES = {'Ruby'}\n-    REQUIREMENTS = {DistributionRequirement('ruby')}\n+    REQUIREMENTS = {\n+        AnyOneOfRequirements(\n+            [DistributionRequirement('ruby'),\n+             CondaRequirement('ruby', '2.2.3', 'bioconda'),\n+             ]\n+        )", "created_at": "2017-04-26T08:24:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzQ4ODQ1OA==", "fields": {"body": "See https://github.com/coala/coala/blob/master/coalib/bearlib/abstractions/Linter.py#L746-L747 and remove the args that have been specified as defaults. We can remove use_stdout=True since that is the default setting of the Linter decorator.", "diff": "@@ -4,7 +4,7 @@\n \n \n @linter(executable='pydocstyle',\n-        use_stdout=False,\n+        use_stdout=True,\n         use_stderr=True,", "created_at": "2017-04-26T15:42:13Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzUyODY5MA==", "fields": {"body": "(just do whatever you have time for; the rest can be added after this is merged.)", "diff": "@@ -19,7 +19,9 @@ class PHPMessDetectorBear:\n     \"\"\"\n \n     LANGUAGES = {'PHP'}\n-    REQUIREMENTS = {DistributionRequirement(apt_get='phpmd')}\n+    REQUIREMENTS = {AnyOneOfRequirements([\n+                    DistributionRequirement(apt_get='phpmd'),", "created_at": "2017-04-26T18:29:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzYwMTc5Mw==", "fields": {"body": "because then we need set -x -e , and need to add trailing ;, etc", "diff": "@@ -62,22 +60,22 @@ before_script:\n \n script:\n   - >\n-    if [[ $TRAVIS_PYTHON_VERSION_MINOR < 4 || $TRAVIS_PYTHON_VERSION_MAJOR == 2 ]]; then\n+    if [[ \"$UNSUPPORTED\" == true ]]; then\n       coverage run setup.py install | grep -q 'coala supports only python 3.4 or later'\n-    else\n-      set -e\n-      bash .misc/tests.sh\n-      python setup.py bdist_wheel\n-      pip install ./dist/coala-*.whl\n-      pip install coala-bears[alldeps] --pre -U\n-      # https://github.com/coala/coala-bears/issues/1037\n-      if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-        sed -i.bak '/bears = GitCommitBear/d' .coafile\n-      fi\n-      coala --non-interactive\n-      make -C docs clean\n-      python setup.py docs\n     fi\n+  - if [[ \"$UNSUPPORTED\" == true ]]; then codecov || true; exit; fi", "created_at": "2017-04-27T02:04:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzYwMjk1OA==", "fields": {"body": "Yes, travis does set -e by checking the error status of each entry in the build script.  It needs to be manually added only if there are multiple bash commands in a single entry of the build script, which travis cant 'see'.", "diff": "@@ -62,22 +60,22 @@ before_script:\n \n script:\n   - >\n-    if [[ $TRAVIS_PYTHON_VERSION_MINOR < 4 || $TRAVIS_PYTHON_VERSION_MAJOR == 2 ]]; then\n+    if [[ \"$UNSUPPORTED\" == true ]]; then\n       coverage run setup.py install | grep -q 'coala supports only python 3.4 or later'\n-    else\n-      set -e\n-      bash .misc/tests.sh\n-      python setup.py bdist_wheel\n-      pip install ./dist/coala-*.whl\n-      pip install coala-bears[alldeps] --pre -U\n-      # https://github.com/coala/coala-bears/issues/1037\n-      if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-        sed -i.bak '/bears = GitCommitBear/d' .coafile\n-      fi\n-      coala --non-interactive\n-      make -C docs clean\n-      python setup.py docs\n     fi\n+  - if [[ \"$UNSUPPORTED\" == true ]]; then codecov || true; exit; fi\n+  - bash .misc/tests.sh", "created_at": "2017-04-27T02:18:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzg2NDA4Mw==", "fields": {"body": "Can we have a test for this? Feed the same file a 100,000 times.", "diff": "@@ -102,6 +109,8 @@ def run(self, language: str, minimum_tokens: int=20,\n \n         stdout_output, _ = run_shell_command(arguments)\n \n+        os.remove(tmp_filename)", "created_at": "2017-04-28T07:04:01Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzk3MjAyNQ==", "fields": {"body": "I think he meant to execute CPD once but pass it 100000 files", "diff": "@@ -102,6 +109,8 @@ def run(self, language: str, minimum_tokens: int=20,\n \n         stdout_output, _ = run_shell_command(arguments)\n \n+        os.remove(tmp_filename)", "created_at": "2017-04-28T16:44:05Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDA4NzEwNQ==", "fields": {"body": "I think a link to some details would be good, imo this is not directly understandable ;)", "diff": "@@ -1,3 +1,133 @@\n+coala 0.11 - BrewBear\n+=====================\n+\n+::\n+\n+                                                   /ss.\n+                             -+ooooyhhsoo+++/-...-d+``oy-\n+                         `:sNMMMMMMMMMMMMMMMMMMMMMMMMNMMMs\n+                       .sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd`\n+                     :hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm:\n+                   +mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN.\n+                 /mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNN-\n+               /mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMhd\n+             `yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmNMMMMMMMMMMm\n+            `dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMh  :smMMMMMMMN\n+            sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNh+. ./ohNMmh\n+           -NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmy/.\n+          -mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMds/.\n+          hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd----:oyyyNMMMMMMMyo+-\n+         `MMMMMMMMMMMMMMMMMMMMMMMMMdMMMMMMMo   `+ydMMMMMMMMMMMMMNs-\n+         /MMMMMMMMMMMMMMMMMMMMMdo.``-/sMMMM+.omMMMMMMMMMMMMMMMMMMMMh:\n+         /MMMMMMMMMMMMMMMMMMMs.       oMMMhyMMMMMMMMMMMMMMMMMMMMMMMMMh`\n+          yNMMMMMMMMMMMMMMMMM/        yMMmmMMMMMMMMMmyo///oyNMMMMMMMMMs\n+           +mMMMMMMMMMMMMMMMMy         /dMMMMMMMMMd:  ./+/-  :dMMMMMMMd\n+           `oMMMMMMMMMMMMMMMMd`        .MMMMMMMMMh  .dMMMMMm:  hMMMMMMM:\n+          oNMMMMMMMMMMMMMMMMMM:        :MMMMMMMMM:  hMMMMMMMm  :MMMMMMM/\n+        :NMMMMMMMMMMMMMMMMMMMM/        -MMMMMMMMMo  -NMMMMMN/  oMMMMMMM/\n+        -mMMMMMMdhdMMMMMMMMMMM/`       `dMMMMMMMMM+   :oso/`  oMMMMMMMM:\n+         :NMMMN.   :dMMMMMMMMM+         :MMMMMMMMMMmo:`   .:smMMMMMMMNo\n+          .yNMMh:   .mMMMMMMMMd          hMMMMMMMMMMMMMMMMMMMMMMMMMMd.\n+             ``       .:////++:           oNMMMMMMMMMMMMMMMMMMMMMMd+`\n+                                            -+syhhdmmmNNNNNmdhss/.\n+\n+This release was brought to you by 65 contributors contributing 141\n+commits\n+\n+The name of this release is BrewBear to highlight the improvements made to\n+out dependency management system, including the addition of ``brew`` support\n+for mac users. Mac has been an officially supported platform for a long time\n+and we would like to draw attention to this often overlooked fact.\n+Support has also been added for ``Conda`` and ``cargo`` allowing bears which\n+use linters available from those package managers to manage their dependencies.\n+\n+Initial next generation core code has been merged and will be integrated over\n+the coming releases. Until then, please use the current API.\n+\n+We have added a release candidate system to our release process to allow users\n+to easily test changes in the latest pre-release version of coala.\n+Instructions for obtaining the rc package will be posted for each minor/major\n+release to the coala gitter channel, blog, and twitter. We encourage all users\n+interested in checking out new features or helping to test these pre-releases\n+on their projects. If you do find a regression in a release candidate, please\n+report it to the issue tracker with the word ``Regression`` somewhere in the\n+title.\n+\n+**Breaking Changes**\n+\n+- coala exit codes have changed. If you relied on coala in scripts or\n+  other automated systems please check if it it still works with the new\n+  behavior. You can find the new exit codes\n+  `here <http://docs.coala.io/en/latest/Users/Exit_Codes.html>`__.\n+  `PR #3905 <https://github.com/coala/coala/pull/3905>`_\n+\n+**General**\n+\n+- Section Inheritance had been added to the coafile parsing. With this\n+  change we are deprecating implicit ``default`` section inheritance.\n+  Instead, you can now have definite section inheritance by using the\n+  ``.`` in the section title. Append operators are now supported allowing\n+  addition of values to inherited section. See the ``Mockup`` section of\n+  `cEP-0005 <https://github.com/coala/cEPs/blob/master/cEP-0005.md>`_\n+  for a syntax example and `PR #3178 <https://github.com/coala/coala/pull/3178/>`_\n+  for more information.\n+- The section name ``cli`` is reserved for cli arguments and should not be\n+  used in the coala configuration file (``coafile``). If you are currently\n+  using it in a configuration file, coala will warn you.\n+- coala now outputs absolute files paths when a bear fails. This should\n+  make debugging bear failures easier when using custom bears.\n+\n+**Usability**\n+\n+- A new placeholder, ``source_lines``,  has been added to the coala\n+  ``--format`` option. Use it to output the affected lines in the source file\n+  when a result occurs.\n+- Bears are displayed alphabetically when listed using ``--show-bears``.\n+- coala outputs a warning if a setting is overridden in the same section\n+  since this is probably not what the user intended.\n+- ``--format`` takes precedence over ``--ci`` when both arguments are issued\n+- coala will report the version of the dependency required when the version\n+  check fails to help the user install the correct version.\n+  `Issue #3982 <https://github.com/coala/coala/issues/3982>`_\n+\n+**Developers**\n+\n+- ``@Linter`` decorator works with global bears. See our bear writing\n+  `docs <http://api.coala.io/en/latest/Developers/Writing_Linter_Bears.html#global-bears>`__\n+  for more information on how to write a global bear with the ``@Linter``\n+  decorator.\n+- ``Bear.DownloadCachedFile`` raises exceptions when the download fails.\n+  Please handle this exception if the file download has a good chance\n+  of failing.\n+- Initial Next Generation Bear code has been merged and can be seen in\n+  ``coalib/core``. Please do not write bears for this API yet as it has\n+  not been integrated with the coala interface yet.\n+- The ``deprecate_settings`` decorator now supports multiple deprecations\n+  of the same setting.", "created_at": "2017-04-30T23:28:58Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDA4NzI5OQ==", "fields": {"body": "Arbitrary results? :O\nSounds like this function was a total disaster :D", "diff": "@@ -1,3 +1,133 @@\n+coala 0.11 - BrewBear\n+=====================\n+\n+::\n+\n+                                                   /ss.\n+                             -+ooooyhhsoo+++/-...-d+``oy-\n+                         `:sNMMMMMMMMMMMMMMMMMMMMMMMMNMMMs\n+                       .sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd`\n+                     :hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm:\n+                   +mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN.\n+                 /mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNN-\n+               /mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMhd\n+             `yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmNMMMMMMMMMMm\n+            `dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMh  :smMMMMMMMN\n+            sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNh+. ./ohNMmh\n+           -NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmy/.\n+          -mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMds/.\n+          hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd----:oyyyNMMMMMMMyo+-\n+         `MMMMMMMMMMMMMMMMMMMMMMMMMdMMMMMMMo   `+ydMMMMMMMMMMMMMNs-\n+         /MMMMMMMMMMMMMMMMMMMMMdo.``-/sMMMM+.omMMMMMMMMMMMMMMMMMMMMh:\n+         /MMMMMMMMMMMMMMMMMMMs.       oMMMhyMMMMMMMMMMMMMMMMMMMMMMMMMh`\n+          yNMMMMMMMMMMMMMMMMM/        yMMmmMMMMMMMMMmyo///oyNMMMMMMMMMs\n+           +mMMMMMMMMMMMMMMMMy         /dMMMMMMMMMd:  ./+/-  :dMMMMMMMd\n+           `oMMMMMMMMMMMMMMMMd`        .MMMMMMMMMh  .dMMMMMm:  hMMMMMMM:\n+          oNMMMMMMMMMMMMMMMMMM:        :MMMMMMMMM:  hMMMMMMMm  :MMMMMMM/\n+        :NMMMMMMMMMMMMMMMMMMMM/        -MMMMMMMMMo  -NMMMMMN/  oMMMMMMM/\n+        -mMMMMMMdhdMMMMMMMMMMM/`       `dMMMMMMMMM+   :oso/`  oMMMMMMMM:\n+         :NMMMN.   :dMMMMMMMMM+         :MMMMMMMMMMmo:`   .:smMMMMMMMNo\n+          .yNMMh:   .mMMMMMMMMd          hMMMMMMMMMMMMMMMMMMMMMMMMMMd.\n+             ``       .:////++:           oNMMMMMMMMMMMMMMMMMMMMMMd+`\n+                                            -+syhhdmmmNNNNNmdhss/.\n+\n+This release was brought to you by 65 contributors contributing 141\n+commits\n+\n+The name of this release is BrewBear to highlight the improvements made to\n+out dependency management system, including the addition of ``brew`` support\n+for mac users. Mac has been an officially supported platform for a long time\n+and we would like to draw attention to this often overlooked fact.\n+Support has also been added for ``Conda`` and ``cargo`` allowing bears which\n+use linters available from those package managers to manage their dependencies.\n+\n+Initial next generation core code has been merged and will be integrated over\n+the coming releases. Until then, please use the current API.\n+\n+We have added a release candidate system to our release process to allow users\n+to easily test changes in the latest pre-release version of coala.\n+Instructions for obtaining the rc package will be posted for each minor/major\n+release to the coala gitter channel, blog, and twitter. We encourage all users\n+interested in checking out new features or helping to test these pre-releases\n+on their projects. If you do find a regression in a release candidate, please\n+report it to the issue tracker with the word ``Regression`` somewhere in the\n+title.\n+\n+**Breaking Changes**\n+\n+- coala exit codes have changed. If you relied on coala in scripts or\n+  other automated systems please check if it it still works with the new\n+  behavior. You can find the new exit codes\n+  `here <http://docs.coala.io/en/latest/Users/Exit_Codes.html>`__.\n+  `PR #3905 <https://github.com/coala/coala/pull/3905>`_\n+\n+**General**\n+\n+- Section Inheritance had been added to the coafile parsing. With this\n+  change we are deprecating implicit ``default`` section inheritance.\n+  Instead, you can now have definite section inheritance by using the\n+  ``.`` in the section title. Append operators are now supported allowing\n+  addition of values to inherited section. See the ``Mockup`` section of\n+  `cEP-0005 <https://github.com/coala/cEPs/blob/master/cEP-0005.md>`_\n+  for a syntax example and `PR #3178 <https://github.com/coala/coala/pull/3178/>`_\n+  for more information.\n+- The section name ``cli`` is reserved for cli arguments and should not be\n+  used in the coala configuration file (``coafile``). If you are currently\n+  using it in a configuration file, coala will warn you.\n+- coala now outputs absolute files paths when a bear fails. This should\n+  make debugging bear failures easier when using custom bears.\n+\n+**Usability**\n+\n+- A new placeholder, ``source_lines``,  has been added to the coala\n+  ``--format`` option. Use it to output the affected lines in the source file\n+  when a result occurs.\n+- Bears are displayed alphabetically when listed using ``--show-bears``.\n+- coala outputs a warning if a setting is overridden in the same section\n+  since this is probably not what the user intended.\n+- ``--format`` takes precedence over ``--ci`` when both arguments are issued\n+- coala will report the version of the dependency required when the version\n+  check fails to help the user install the correct version.\n+  `Issue #3982 <https://github.com/coala/coala/issues/3982>`_\n+\n+**Developers**\n+\n+- ``@Linter`` decorator works with global bears. See our bear writing\n+  `docs <http://api.coala.io/en/latest/Developers/Writing_Linter_Bears.html#global-bears>`__\n+  for more information on how to write a global bear with the ``@Linter``\n+  decorator.\n+- ``Bear.DownloadCachedFile`` raises exceptions when the download fails.\n+  Please handle this exception if the file download has a good chance\n+  of failing.\n+- Initial Next Generation Bear code has been merged and can be seen in\n+  ``coalib/core``. Please do not write bears for this API yet as it has\n+  not been integrated with the coala interface yet.\n+- The ``deprecate_settings`` decorator now supports multiple deprecations\n+  of the same setting.\n+- A new ``SEE_MORE`` attribute has been added to the ``Bear`` class. Use it\n+  to attribute (usually by linking the main page)  the original tool in\n+  linter bears.\n+- Unified Diff support has been added to the ``Diff`` result and display\n+  mechanisms.\n+\n+**Bugfixes**\n+\n+- Caching has been moved after bear loading to prevent storing cache for\n+  bears which failed to load. Results are only cached when a bear successfully\n+  runs so a bear which fails in the middle of a run will not have a result\n+  cached anymore. This should make flushing the cache manually mostly\n+  unnecessary for end users.\n+  `PR #3722 <https://github.com/coala/coala/pull/3722>`_\n+- Non-optional settings check settings from dependencies now. Previously,\n+  it would error because the dependency would not have its settings satisfied.\n+  `Issue #3149 <https://github.com/coala/coala/pull/3149>`_\n+- The ``overlaps`` method of the ``Results`` object now behaves properly.\n+  Previously, it would return arbitrary results which would impact bear\n+  authors.", "created_at": "2017-04-30T23:35:36Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTI0NA==", "fields": {"body": "s/contributor/contributors", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101", "created_at": "2017-05-01T19:40:08Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTM3OQ==", "fields": {"body": "Split these to a different commit please", "diff": "@@ -6,14 +67,14 @@ Bugfixes:\n - Remark dependency has been pinned back to ~5.4 because version 6 changes\n   current behavior and breaks tests. This is a hotfix which will be rolled\n   back when the upstream addresses this.\n- \n+\n coala-bears 0.10.0\n ==================\n \n This release, we had 97 commits contributed by 42 contributors.\n \n The coala website has been updated to a new, more modern design. You can now\n-find a quick overview of bears and their settings at \n+find a quick overview of bears and their settings at", "created_at": "2017-05-01T19:40:30Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTc1MQ==", "fields": {"body": "indent is off here", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or\n+      end of files for lines belonging to various licenses.", "created_at": "2017-05-01T19:41:47Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTcxNA==", "fields": {"body": "no indent or bolds here please or any other similar places. (please match previous format)", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**", "created_at": "2017-05-01T19:41:34Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTg3Nw==", "fields": {"body": "s/kebabcase/kebab-case", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or\n+      end of files for lines belonging to various licenses.\n+\t- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+**Enhancements**\n+- ``FilenameBear`` can now recognize kebabcase naming convention.", "created_at": "2017-05-01T19:42:24Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjExNg==", "fields": {"body": "s/cols/columns (generally please don't abbreviate in relnotes, especially non-standard ones)", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or\n+      end of files for lines belonging to various licenses.\n+\t- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+**Enhancements**\n+- ``FilenameBear`` can now recognize kebabcase naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and cols at which the error occured instead", "created_at": "2017-05-01T19:43:36Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjI2Ng==", "fields": {"body": "see LineCountBear comment", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or\n+      end of files for lines belonging to various licenses.\n+\t- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+**Enhancements**\n+- ``FilenameBear`` can now recognize kebabcase naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and cols at which the error occured instead\n+  of showing it in the error message.\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines\n+  in a file. The new setting name is ``exclude_blank_lines`` and it is disabled\n+  by default i.e. ``False``.\n+- ``PyUnusedCodeBear`` can remove unused variables, see setting\n+  ``remove_unused_variable``.\n+- ``ShellCheckBear`` can ignore specific rules by providing those in\n+  the ``ignore_actions`` setting.\n+- ``YAMLLintBear`` can now be configured to check for maximum characters in a", "created_at": "2017-05-01T19:44:21Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjIzMA==", "fields": {"body": "maybe move this to a \"New Settings\" section", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or\n+      end of files for lines belonging to various licenses.\n+\t- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+**Enhancements**\n+- ``FilenameBear`` can now recognize kebabcase naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and cols at which the error occured instead\n+  of showing it in the error message.\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines", "created_at": "2017-05-01T19:44:12Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjQ4NQ==", "fields": {"body": "please move this section to the bottom to be consistent with the previous relnotes", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**", "created_at": "2017-05-01T19:45:31Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjY4NQ==", "fields": {"body": "new setting?", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or\n+      end of files for lines belonging to various licenses.\n+\t- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+**Enhancements**\n+- ``FilenameBear`` can now recognize kebabcase naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and cols at which the error occured instead\n+  of showing it in the error message.\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines\n+  in a file. The new setting name is ``exclude_blank_lines`` and it is disabled\n+  by default i.e. ``False``.\n+- ``PyUnusedCodeBear`` can remove unused variables, see setting", "created_at": "2017-05-01T19:46:32Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4Njc0OA==", "fields": {"body": "new setting or old setting new features?", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or\n+      end of files for lines belonging to various licenses.\n+\t- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+**Enhancements**\n+- ``FilenameBear`` can now recognize kebabcase naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and cols at which the error occured instead\n+  of showing it in the error message.\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines\n+  in a file. The new setting name is ``exclude_blank_lines`` and it is disabled\n+  by default i.e. ``False``.\n+- ``PyUnusedCodeBear`` can remove unused variables, see setting\n+  ``remove_unused_variable``.\n+- ``ShellCheckBear`` can ignore specific rules by providing those in", "created_at": "2017-05-01T19:46:46Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4Njg3NQ==", "fields": {"body": "perhaps change to Default Setting Modifications?", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or\n+      end of files for lines belonging to various licenses.\n+\t- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+**Enhancements**\n+- ``FilenameBear`` can now recognize kebabcase naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and cols at which the error occured instead\n+  of showing it in the error message.\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines\n+  in a file. The new setting name is ``exclude_blank_lines`` and it is disabled\n+  by default i.e. ``False``.\n+- ``PyUnusedCodeBear`` can remove unused variables, see setting\n+  ``remove_unused_variable``.\n+- ``ShellCheckBear`` can ignore specific rules by providing those in\n+  the ``ignore_actions`` setting.\n+- ``YAMLLintBear`` can now be configured to check for maximum characters in a\n+  line, by default it is set to 80.\n+\n+**Bears with changed default settings**", "created_at": "2017-05-01T19:47:21Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NzU4OQ==", "fields": {"body": "period after license, rewrite the beginning of the second line to work as a new sentence please", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or", "created_at": "2017-05-01T19:50:57Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NzYyNg==", "fields": {"body": "see above", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**", "created_at": "2017-05-01T19:51:09Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NzYzOQ==", "fields": {"body": "see above", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**", "created_at": "2017-05-01T19:51:14Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEyOTU3OQ==", "fields": {"body": "alphabetical please", "diff": "@@ -1,3 +1,39 @@\n+coala-bears 0.10.0\n+==================\n+\n+<!-- upto 1096b293af15059ce363c0569d5927de2cefd9c2 -->\n+**Bug Fixes** \n+\n+- `InvalidLinkBear` now extracts links from markdown correctly. [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- `InvalidLinkBear` now extracts all the links in a line. Earlier it used to extract only the first match.\n+- `PyCodeStyleBear` now uses user settings along with default settings. Earlier it used to ignore default settings if user changed one of them.\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- `StyleLintBear` - Lints css files using stylelint\n+\n+\t**Generic**\n+\t- `LicenseCheckBear` - Checks given files for license searching start or end of files for lines belonging to various licenses.\n+\t- `DuplicateFileBear` - Checks for duplicate files.\n+\n+\t**Elm**\n+\t- `ElmLintBear` - Formats source code according to given set of rules.\n+\n+**Enhancements**\n+- `JSONFormatBear` notifies if run on empty files.\n+- `JSONFormatBear` tells the lines and cols at which the error occured instead of showing it in the error message.\n+- `GitCommitBear` can now enforce issue reference in commits.\n+- `GitCommitBear` now recognizes `user/repo#12` type issue references.\n+- `LineCountBear` can now exclude blank lines in counting the number of lines in a file. The new setting name is `exclude_blank_lines` and it is disabled by default i.e. `False`.\n+- `FilenameBear` can now recognize kebabcase naming convention.", "created_at": "2017-05-01T14:15:13Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEyOTY5OQ==", "fields": {"body": "please linebreak at 80 if you can", "diff": "@@ -1,3 +1,39 @@\n+coala-bears 0.10.0\n+==================\n+\n+<!-- upto 1096b293af15059ce363c0569d5927de2cefd9c2 -->\n+**Bug Fixes** \n+\n+- `InvalidLinkBear` now extracts links from markdown correctly. [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- `InvalidLinkBear` now extracts all the links in a line. Earlier it used to extract only the first match.\n+- `PyCodeStyleBear` now uses user settings along with default settings. Earlier it used to ignore default settings if user changed one of them.\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- `StyleLintBear` - Lints css files using stylelint\n+\n+\t**Generic**\n+\t- `LicenseCheckBear` - Checks given files for license searching start or end of files for lines belonging to various licenses.\n+\t- `DuplicateFileBear` - Checks for duplicate files.\n+\n+\t**Elm**\n+\t- `ElmLintBear` - Formats source code according to given set of rules.\n+\n+**Enhancements**\n+- `JSONFormatBear` notifies if run on empty files.\n+- `JSONFormatBear` tells the lines and cols at which the error occured instead of showing it in the error message.", "created_at": "2017-05-01T14:16:07Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDI1NDA2OQ==", "fields": {"body": "PyImpostSortBear -> PyImportSortBear\nConsider making it more clear: \"now correctly supports option 'know_third_party_imports'\"", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.", "created_at": "2017-05-02T06:13:21Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDI1NTU2Mw==", "fields": {"body": "There is no relevant issue for this one, it was created in a PR of a different issue, #1331", "diff": "@@ -1,3 +1,64 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributor contributing over 101\n+commits.\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImpostSortBear`` now recongnizes known third party imports correctly.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)\n+\n+**New Bears**\n+\n+\t**CSS**\n+\t- ``StyleLintBear`` - Lints css files using stylelint\n+\n+\t**Elm**\n+\t- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+\t**Generic**\n+\t- ``LicenseCheckBear`` - Checks given files for license searching start or\n+      end of files for lines belonging to various licenses.\n+\t- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+**Enhancements**\n+- ``FilenameBear`` can now recognize kebabcase naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.", "created_at": "2017-05-02T06:30:41Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDI1NzUzNA==", "fields": {"body": "too many typos, damn! #weNeedABearForTypos", "diff": "@@ -1,3 +1,68 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributors contributing over 101\n+commits.\n+\n+**New Bears**\n+\n+CSS\n+- ``StyleLintBear`` - Lints css files using stylelint\n+\n+Elm\n+- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+Generic\n+- ``LicenseCheckBear`` - Checks given files for license. Searches start or\n+  end of files for lines belonging to various licenses.\n+- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+Enhancements\n+- ``FilenameBear`` can now recognize kebab-case naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and columns at which the error occured instead\n+  of showing it in the error message.\n+\n+**New settings**\n+\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines\n+  in a file. The new setting name is ``exclude_blank_lines`` and it is disabled\n+  by default i.e. ``False``.\n+- ``PyUnusedCodeBear`` can remove unused variables, see setting\n+  ``remove_unused_variable``.\n+- ``ShellCheckBear`` can ignore specific rules by providing those in\n+  the ``ignore_actions`` setting.\n+- ``YAMLLintBear`` can now be configured to check for maximum characters in a\n+  line, by default it is set to 80.\n+\n+**Default Setting Modifications**\n+\n+- ``LanguageToolBear`` - ``language`` setting is changed to\n+  ``natural_language``, please update your settings, it'll be deprecated\n+  completely in next release.\n+- ``MarkdownBear`` - ``max_line_length`` setting is changed to ``None`` instead\n+  of 80.\n+  [Issue 1581](https://github.com/coala/coala-bears/issues/1581)\n+- ``YAMLLintBear`` - ``document_start`` setting is changed to ``None``, not\n+  forbiding the usage of document start marker(---) by default.\n+  [Issue 1417](https://github.com/coala/coala-bears/issues/1417)\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImportSortBear`` now correctly suppors option ``known_third_party_imports``.", "created_at": "2017-05-02T06:52:07Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDUxNDE0Ng==", "fields": {"body": "please do not use # pragma: no cover for OS-specific code.  At least use # pragma (posix|nt): no cover .", "diff": "@@ -52,6 +54,13 @@ def run_interactive_shell_command(command, **kwargs):\n     \"\"\"\n     if not kwargs.get('shell', False) and isinstance(command, str):\n         command = shlex.split(command)\n+    else:\n+        command = list(command)\n+\n+    if platform.system() == 'Windows':  # pragma: no cover", "created_at": "2017-05-03T10:30:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDYzNDU5Mg==", "fields": {"body": "maybe you should change the message to The local bear '{}' yields no result although it should here if results == [], instead of passing a custom msg? That moves the complexity to this function and avoids the msg parameter^^", "diff": "@@ -117,15 +128,18 @@ def check_results(self,\n                               list,\n                               msg='The given results are not a list.')\n \n+        if not msg:\n+            msg = (\"The local bear '{}' doesn't yield the right results.\"\n+                   .format(local_bear.__class__.__name__))\n+            if check_order:\n+                msg += ' Or the order may be wrong.'", "created_at": "2017-05-03T19:39:10Z", "last_edited_at": "2017-05-03T19:39:35Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDc3NzkxOQ==", "fields": {"body": "@pratyushprakash I think we should go with our team leader \ud83d\ude09", "diff": "@@ -76,3 +78,13 @@ class SubAspect:\n         sour = SubAspect_tastes['sour']\n \n     return SubAspect\n+\n+\n+@pytest.fixture\n+def aspectsTestBear():\n+    class testBear(LocalBear, aspects={\n+        'detect': [Metadata.CommitMessage.Shortlog],\n+        'fix': [Metadata.CommitMessage.Shortlog.TrailingPeriod]},\n+                      languages=['Python']):", "created_at": "2017-05-04T13:51:50Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDcyOTMwMQ==", "fields": {"body": "And we should agree on some common syntax style here. Personally, I prefer:\nclass aspectsTestBear(LocalBear, aspects={\n        'detect': [Metadata.CommitMessage.Shortlog],\n        'fix': [Metadata.CommitMessage.Shortlog.TrailingPeriod],\n}, languages=['Python']):\n    ...\nBut all @coala/aspects-developers have to make a common decision about this! :)", "diff": "@@ -76,3 +78,13 @@ class SubAspect:\n         sour = SubAspect_tastes['sour']\n \n     return SubAspect\n+\n+\n+@pytest.fixture\n+def aspectsTestBear():\n+    class testBear(LocalBear, aspects={\n+        'detect': [Metadata.CommitMessage.Shortlog],\n+        'fix': [Metadata.CommitMessage.Shortlog.TrailingPeriod]},\n+                      languages=['Python']):", "created_at": "2017-05-04T09:12:36Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDczNTUzMg==", "fields": {"body": "str(self) basically does unescape(self.value). unescape basically strips away all backslashes. It looks like Lasse added the str(self) thing in the first commit that added Settings.py. I'm not entirely sure why we have that.\nAnyway, I think the solution should be to override the __str__ of StringConvertor here (by adding a def __str__(string):.", "diff": "@@ -163,7 +163,11 @@ def __path__(self, origin=None, glob_escape_origin=False):\n         :raises ValueError:        If no origin is specified in the setting\n                                    nor the given origin parameter.\n         \"\"\"\n-        strrep = str(self).strip()\n+        if hasattr(self, 'value'):\n+            strrep = self.value.strip()", "created_at": "2017-05-04T09:47:29Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDgxMjMxNw==", "fields": {"body": "str objects are used as Section objects? WTF?!\n\nI can replace if hasattr(self, 'value'): with if isinstance(self, Setting):\n\nThat should work yeah. But the fact that we need it is baffling!", "diff": "@@ -163,7 +163,11 @@ def __path__(self, origin=None, glob_escape_origin=False):\n         :raises ValueError:        If no origin is specified in the setting\n                                    nor the given origin parameter.\n         \"\"\"\n-        strrep = str(self).strip()\n+        if hasattr(self, 'value'):\n+            strrep = self.value.strip()", "created_at": "2017-05-04T15:29:37Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDkwNzMxOA==", "fields": {"body": "This is not correct syntax.\nPlease refer https://github.com/coala/coala-bears/blob/master/tests/c_languages/codeclone_detection/ClangASTPrintBearTest.py#L20 and return file.readlines()\nThis is causing breaks in CI builds.", "diff": "@@ -15,7 +15,8 @@ def get_testfile_path(name):\n \n \n def load_testfile(name):\n-    return open(get_testfile_path(name)).readlines()\n+    with open(get_testfile_path(name)).readlines() as lines:", "created_at": "2017-05-04T23:06:49Z", "last_edited_at": "2017-05-04T23:11:37Z", "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NjA1Mw==", "fields": {"body": "just to show it's a dir file", "diff": "@@ -38,8 +38,95 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n-Setting Inheritance\n--------------------\n+Explicit Setting Inheritance\n+----------------------------\n+\n+Every coafile contains one or more sections. Section names are case\n+insensitive. The old implicit section inheritance syntax has been deprecated\n+and has been scheduled for removeal. Instead, define section inheritance\n+explicitly by naming a section in the format ``[basesection.newsection]``.\n+Extra values can be appended to an inherited setting using the ``+=``\n+operator.\n+\n+Consider the following coafile::\n+\n+  [all]\n+  enabled = True\n+  overridable = 2\n+  ignore = ./vendor1", "created_at": "2017-05-05T19:56:09Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NjEzMg==", "fields": {"body": "nope, just to indicate it's being overridden, I just copied the last file :P", "diff": "@@ -38,8 +38,95 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n-Setting Inheritance\n--------------------\n+Explicit Setting Inheritance\n+----------------------------\n+\n+Every coafile contains one or more sections. Section names are case\n+insensitive. The old implicit section inheritance syntax has been deprecated\n+and has been scheduled for removeal. Instead, define section inheritance\n+explicitly by naming a section in the format ``[basesection.newsection]``.\n+Extra values can be appended to an inherited setting using the ``+=``\n+operator.\n+\n+Consider the following coafile::\n+\n+  [all]\n+  enabled = True\n+  overridable = 2", "created_at": "2017-05-05T19:56:34Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NzA3MA==", "fields": {"body": "Seems alright to me without the apostrophe, see the old docs", "diff": "@@ -38,8 +38,95 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n-Setting Inheritance\n--------------------\n+Explicit Setting Inheritance\n+----------------------------\n+\n+Every coafile contains one or more sections. Section names are case", "created_at": "2017-05-05T20:01:57Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NzM0Mw==", "fields": {"body": "then do vendor/ instead looks better IMO", "diff": "@@ -38,8 +38,95 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n-Setting Inheritance\n--------------------\n+Explicit Setting Inheritance\n+----------------------------\n+\n+Every coafile contains one or more sections. Section names are case\n+insensitive. The old implicit section inheritance syntax has been deprecated\n+and has been scheduled for removeal. Instead, define section inheritance\n+explicitly by naming a section in the format ``[basesection.newsection]``.\n+Extra values can be appended to an inherited setting using the ``+=``\n+operator.\n+\n+Consider the following coafile::\n+\n+  [all]\n+  enabled = True\n+  overridable = 2\n+  ignore = ./vendor1", "created_at": "2017-05-05T20:03:25Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NzU2OQ==", "fields": {"body": "so you can't use that notation for multiple inheritance", "diff": "@@ -38,8 +38,95 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n-Setting Inheritance\n--------------------\n+Explicit Setting Inheritance\n+----------------------------\n+\n+Every coafile contains one or more sections. Section names are case\n+insensitive. The old implicit section inheritance syntax has been deprecated\n+and has been scheduled for removeal. Instead, define section inheritance\n+explicitly by naming a section in the format ``[basesection.newsection]``.\n+Extra values can be appended to an inherited setting using the ``+=``\n+operator.\n+\n+Consider the following coafile::\n+\n+  [all]\n+  enabled = True\n+  overridable = 2\n+  ignore = ./vendor1\n+\n+  [all.section1]\n+  overridable = 3\n+  ignore += ./vendor2\n+  other = some_value\n+\n+  [all.section2]\n+  overridable = 4\n+  ignore += ./vendor3\n+  other = some_value\n+\n+This is the same file without section inheritance::\n+\n+  [all]\n+  enabled = True\n+  overridable = 2\n+  ignore = ./vendor1\n+\n+  [section1]\n+  enabled = True\n+  overridable = 3\n+  ignore = ./vendor1, ./vendor2\n+  other = some_value\n+\n+  [section2]\n+  enabled = True\n+  overridable = 4\n+  ignore = ./vender1, ./vendor3\n+  other = some_other_value\n+\n+All settings must be part of a section, so don't do this for implicit\n+inheritance (this is also deprecated behavior)::\n+\n+  # bad!\n+  setting1 = 1\n+\n+  [section1]\n+  # setting1 is inherited\n+  setting2 = 2\n+\n+Instead, make the inheritance explicit::\n+\n+  # better!\n+  [all]\n+  setting1 = 1\n+\n+  [all.section1]\n+  # setting1 is inherited\n+  setting2 = 2\n+\n+Please only define inheritance from one section per child section::\n+\n+  # BAD! Will only inherit from \"all\", not \"child\" leaving \"child.sub\" as the\n+  # new section's name", "created_at": "2017-05-05T20:04:42Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTE1NTk3Nw==", "fields": {"body": "I'm real bad at these things.. :D", "diff": "@@ -27,6 +27,90 @@ def __init__(self,\n     def position(self):\n         return self._position\n \n+    def __le__(self, other):\n+        \"\"\"\n+        Test whether ``self`` is behind or equals the other\n+        ``AbsolutePosition``.\n+\n+        :param other: ``AbsolutePosition`` to compare with.\n+        :return:      Whether this ``AbsolutePosition`` is behind the other\n+                      one or the same.\n+        \"\"\"\n+        if not isinstance(other, self.__class__):\n+            return False\n+\n+        if self._text != other._text:\n+            return False\n+\n+        return self.position <= other.position\n+\n+    def __ge__(self, other):\n+        \"\"\"\n+        Test whether ``self`` is ahead of or equals the", "created_at": "2017-05-07T22:26:25Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTIwNTgyMA==", "fields": {"body": "I assume tpope's commit guide refers to http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html", "diff": "@@ -103,6 +105,9 @@ Example:\n     install it by itself.\n \n -  Maximum of 72 chars excluding newline for *each* line.\n+   The recommendation is to do this at 72 characters,\n+   so that Git has plenty of room to indent text while still\n+   keeping everything under 80 characters overall.", "created_at": "2017-05-08T09:18:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTAxMQ==", "fields": {"body": "You could add use vulture to report dead code for popular Python projects on github to the preparation phase (see jendrikseipp/vulture#38).", "diff": "@@ -42,16 +42,19 @@ References:\n ", "created_at": "2017-05-10T21:47:13Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTUwNw==", "fields": {"body": "Another point: refine default whitelist", "diff": "@@ -42,16 +42,19 @@ References:\n \n - Vulture offers its functionality as a library\n - The VultureBear uses the new vulture library\n-\n-##### CODING PHASE 2\n-\n - Confidence values are implemented for vulture results\n \n-##### CODING PHASE 3\n+##### CODING PHASE 2\n \n+- Configuring vulture so as to subsume a whitelist file by default.", "created_at": "2017-05-10T21:49:46Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTcxMA==", "fields": {"body": "Also: create whitelist files for popular Python frameworks like Django", "diff": "@@ -42,16 +42,19 @@ References:\n \n - Vulture offers its functionality as a library\n - The VultureBear uses the new vulture library\n-\n-##### CODING PHASE 2\n-\n - Confidence values are implemented for vulture results\n \n-##### CODING PHASE 3\n+##### CODING PHASE 2\n \n+- Configuring vulture so as to subsume a whitelist file by default.", "created_at": "2017-05-10T21:50:52Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTkzMDQ1NA==", "fields": {"body": "Yes, I think this is feasible. The default whitelist (like all whitelist files) will always be a work-in-progress, but I think we can lay a solid foundation here.", "diff": "@@ -42,16 +42,19 @@ References:\n \n - Vulture offers its functionality as a library\n - The VultureBear uses the new vulture library\n-\n-##### CODING PHASE 2\n-\n - Confidence values are implemented for vulture results\n \n-##### CODING PHASE 3\n+##### CODING PHASE 2\n \n+- Configuring vulture so as to subsume a whitelist file by default.\n - If a way was found to offer source ranges, the removal of dead code is\n   implemented for the VultureBear using a confidence value as threshold.\n - If no way was found, additional detection cases for vulture are implemented.\n   In this case the last milestone has to be reimplemented during the Bonding and\n   coding phase 1 in cooperation with the coala and vulture mentors.", "created_at": "2017-05-11T08:22:07Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzE0MDU0Ng==", "fields": {"body": "so we could still do one filter one file, can't we? Actually the more you modularize, the better, maintaining multiple files is not a problem, it's even better than maintaining a single file ;)", "diff": "@@ -0,0 +1,7 @@\n+def LanguageFilter(languages, log_printer):", "created_at": "2017-05-18T00:34:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzMxMzE5OQ==", "fields": {"body": "It works fine. Although  need to add -B before --filter-by.\nargparse takes care of that.", "diff": "@@ -187,6 +187,10 @@ def default_arg_parser(formatter_class=None):\n         help='filters `--show-bears` by the given languages')\n \n     outputs_group.add_argument(\n+        '--filter-by', nargs='+',", "created_at": "2017-05-18T17:57:26Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYxNzk2NA==", "fields": {"body": "Already there, #3472.", "diff": "@@ -0,0 +1,19 @@\n+from coalib.parsing.FilterImplementation import *\n+\n+\n+class Filter:\n+    all_filters = {'language': LanguageFilter}\n+\n+    def __init__(self):\n+        pass\n+\n+    def is_valid_filter(filter):\n+        return filter in Filter.all_filters\n+\n+    @staticmethod\n+    def get_filtered_bears(filter, args, log_printer):", "created_at": "2017-05-20T20:55:51Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYyMzQ0OQ==", "fields": {"body": "@Mixih stated to use this to get the rc2 in his blog post and gist, so used this. Anyway I'll change this after 0.11 is released", "diff": "@@ -0,0 +1,19 @@\n+language: python\n+python:\n+ - 3.6\n+\n+addons:\n+  apt:\n+    packages:\n+      - libssl-dev\n+      - python3-dev\n+\n+before_script:\n+  - pip install coala-bears[alldeps]==0.11.rc2 --pre -U", "created_at": "2017-05-21T05:26:04Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYzMjU2Mg==", "fields": {"body": "Probably also something I forgot. Normally, I'm all for blank lines :)", "diff": "@@ -467,7 +467,6 @@ def add_lines(self, line_nr_before, lines):\n         \"\"\"\n         if lines == []:\n             return  # No action\n-", "created_at": "2017-05-21T13:20:50Z", "last_edited_at": null, "author": "mrtes", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYzNTI5Ng==", "fields": {"body": "I guess you are talking about #2006?\nMy solution only solves one part of this, i.e. not displaying the last line of unified_diff in one line.\nIt does not \"highlight\" that the newline at EOF is missing.\nAlso, according to discussion in the thread there it seems there is a solution in pipeline?\nNot sure how I should handle this :)", "diff": "@@ -278,18 +276,37 @@ def modified(self):\n         return result\n \n     @property\n+    def modified(self):\n+        \"\"\"\n+        Calculates the modified file, after applying the Diff to the original.\n+        Also adds linebreaks at the end of each line (except eof)\n+        \"\"\"\n+        eof_linebreak = False\n+\n+        if self._file and self._file[-1].endswith('\\n'):\n+            eof_linebreak = True\n+\n+        file = [line.rstrip('\\n') for line in self._modified()]\n+\n+        if eof_linebreak:\n+            return self._add_linebreaks(file)\n+        return self._generate_linebreaks(file)\n+\n+    @property\n     def unified_diff(self):\n         \"\"\"\n         Generates a unified diff corresponding to this patch.\n \n         Note that the unified diff is not deterministic and thus not suitable\n         for equality comparison.\n         \"\"\"\n-        return ''.join(difflib.unified_diff(\n-                self.original,\n-                self.modified,\n+        list_unified_diff = list(difflib.unified_diff(\n+                self._file,\n+                self._modified(),", "created_at": "2017-05-21T15:15:33Z", "last_edited_at": null, "author": "mrtes", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MjU0Ng==", "fields": {"body": "see previous", "diff": "@@ -1,3 +1,68 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributors contributing over 101\n+commits.\n+\n+**New Bears**\n+\n+CSS\n+- ``StyleLintBear`` - Lints css files using stylelint\n+\n+Elm\n+- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+Generic", "created_at": "2017-05-22T21:42:17Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MjU2Mg==", "fields": {"body": "see previous", "diff": "@@ -1,3 +1,68 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributors contributing over 101\n+commits.\n+\n+**New Bears**\n+\n+CSS\n+- ``StyleLintBear`` - Lints css files using stylelint\n+\n+Elm\n+- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+Generic\n+- ``LicenseCheckBear`` - Checks given files for license. Searches start or\n+  end of files for lines belonging to various licenses.\n+- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+Enhancements", "created_at": "2017-05-22T21:42:25Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MjUxMg==", "fields": {"body": "newline after each heading please, otherwise rst complains. Also, please add a colon after each name.", "diff": "@@ -1,3 +1,68 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributors contributing over 101\n+commits.\n+\n+**New Bears**\n+\n+CSS", "created_at": "2017-05-22T21:42:03Z", "last_edited_at": "2017-05-22T21:53:28Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MjUzMg==", "fields": {"body": "see previous", "diff": "@@ -1,3 +1,68 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributors contributing over 101\n+commits.\n+\n+**New Bears**\n+\n+CSS\n+- ``StyleLintBear`` - Lints css files using stylelint\n+\n+Elm", "created_at": "2017-05-22T21:42:12Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MzQ1Mg==", "fields": {"body": "link syntax is incorrect. please use `text <link>`_", "diff": "@@ -1,3 +1,68 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributors contributing over 101\n+commits.\n+\n+**New Bears**\n+\n+CSS\n+- ``StyleLintBear`` - Lints css files using stylelint\n+\n+Elm\n+- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+Generic\n+- ``LicenseCheckBear`` - Checks given files for license. Searches start or\n+  end of files for lines belonging to various licenses.\n+- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+Enhancements\n+- ``FilenameBear`` can now recognize kebab-case naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and columns at which the error occured instead\n+  of showing it in the error message.\n+\n+**New settings**\n+\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines\n+  in a file. The new setting name is ``exclude_blank_lines`` and it is disabled\n+  by default i.e. ``False``.\n+- ``PyUnusedCodeBear`` can remove unused variables, see setting\n+  ``remove_unused_variable``.\n+- ``ShellCheckBear`` can ignore specific rules by providing those in\n+  the ``ignore_actions`` setting.\n+- ``YAMLLintBear`` can now be configured to check for maximum characters in a\n+  line, by default it is set to 80.\n+\n+**Default Setting Modifications**\n+\n+- ``LanguageToolBear`` - ``language`` setting is changed to\n+  ``natural_language``, please update your settings, it'll be deprecated\n+  completely in next release.\n+- ``MarkdownBear`` - ``max_line_length`` setting is changed to ``None`` instead\n+  of 80.\n+  [Issue 1581](https://github.com/coala/coala-bears/issues/1581)", "created_at": "2017-05-22T21:47:28Z", "last_edited_at": "2017-05-22T21:49:39Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MzQ5OA==", "fields": {"body": "incorrect link syntax", "diff": "@@ -1,3 +1,68 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributors contributing over 101\n+commits.\n+\n+**New Bears**\n+\n+CSS\n+- ``StyleLintBear`` - Lints css files using stylelint\n+\n+Elm\n+- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+Generic\n+- ``LicenseCheckBear`` - Checks given files for license. Searches start or\n+  end of files for lines belonging to various licenses.\n+- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+Enhancements\n+- ``FilenameBear`` can now recognize kebab-case naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and columns at which the error occured instead\n+  of showing it in the error message.\n+\n+**New settings**\n+\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines\n+  in a file. The new setting name is ``exclude_blank_lines`` and it is disabled\n+  by default i.e. ``False``.\n+- ``PyUnusedCodeBear`` can remove unused variables, see setting\n+  ``remove_unused_variable``.\n+- ``ShellCheckBear`` can ignore specific rules by providing those in\n+  the ``ignore_actions`` setting.\n+- ``YAMLLintBear`` can now be configured to check for maximum characters in a\n+  line, by default it is set to 80.\n+\n+**Default Setting Modifications**\n+\n+- ``LanguageToolBear`` - ``language`` setting is changed to\n+  ``natural_language``, please update your settings, it'll be deprecated\n+  completely in next release.\n+- ``MarkdownBear`` - ``max_line_length`` setting is changed to ``None`` instead\n+  of 80.\n+  [Issue 1581](https://github.com/coala/coala-bears/issues/1581)\n+- ``YAMLLintBear`` - ``document_start`` setting is changed to ``None``, not\n+  forbiding the usage of document start marker(---) by default.\n+  [Issue 1417](https://github.com/coala/coala-bears/issues/1417)", "created_at": "2017-05-22T21:47:41Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MzUxMg==", "fields": {"body": "incorrect link syntax", "diff": "@@ -1,3 +1,68 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributors contributing over 101\n+commits.\n+\n+**New Bears**\n+\n+CSS\n+- ``StyleLintBear`` - Lints css files using stylelint\n+\n+Elm\n+- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+Generic\n+- ``LicenseCheckBear`` - Checks given files for license. Searches start or\n+  end of files for lines belonging to various licenses.\n+- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+Enhancements\n+- ``FilenameBear`` can now recognize kebab-case naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and columns at which the error occured instead\n+  of showing it in the error message.\n+\n+**New settings**\n+\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines\n+  in a file. The new setting name is ``exclude_blank_lines`` and it is disabled\n+  by default i.e. ``False``.\n+- ``PyUnusedCodeBear`` can remove unused variables, see setting\n+  ``remove_unused_variable``.\n+- ``ShellCheckBear`` can ignore specific rules by providing those in\n+  the ``ignore_actions`` setting.\n+- ``YAMLLintBear`` can now be configured to check for maximum characters in a\n+  line, by default it is set to 80.\n+\n+**Default Setting Modifications**\n+\n+- ``LanguageToolBear`` - ``language`` setting is changed to\n+  ``natural_language``, please update your settings, it'll be deprecated\n+  completely in next release.\n+- ``MarkdownBear`` - ``max_line_length`` setting is changed to ``None`` instead\n+  of 80.\n+  [Issue 1581](https://github.com/coala/coala-bears/issues/1581)\n+- ``YAMLLintBear`` - ``document_start`` setting is changed to ``None``, not\n+  forbiding the usage of document start marker(---) by default.\n+  [Issue 1417](https://github.com/coala/coala-bears/issues/1417)\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)", "created_at": "2017-05-22T21:47:45Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MzUzMA==", "fields": {"body": "incorrect link syntax", "diff": "@@ -1,3 +1,68 @@\n+coala-bears 0.11.0\n+==================\n+\n+This release has been brought to you by 30 contributors contributing over 101\n+commits.\n+\n+**New Bears**\n+\n+CSS\n+- ``StyleLintBear`` - Lints css files using stylelint\n+\n+Elm\n+- ``ElmLintBear`` - Formats source code according to given set of rules.\n+\n+Generic\n+- ``LicenseCheckBear`` - Checks given files for license. Searches start or\n+  end of files for lines belonging to various licenses.\n+- ``DuplicateFileBear`` - Checks for duplicate files.\n+\n+Enhancements\n+- ``FilenameBear`` can now recognize kebab-case naming convention.\n+- ``FilenameBear`` can predict naming conventions for wide-spread languages like\n+  java, javascript and python. Set the ``file_naming_convention`` to ``auto`` to\n+  use this feature.\n+- ``GitCommitBear`` can now enforce issue reference in commits.\n+- ``GitCommitBear`` now recognizes ``user/repo#12`` type issue references.\n+- ``JSONFormatBear`` notifies if run on empty files.\n+- ``JSONFormatBear`` tells the lines and columns at which the error occured instead\n+  of showing it in the error message.\n+\n+**New settings**\n+\n+- ``LineCountBear`` can now exclude blank lines in counting the number of lines\n+  in a file. The new setting name is ``exclude_blank_lines`` and it is disabled\n+  by default i.e. ``False``.\n+- ``PyUnusedCodeBear`` can remove unused variables, see setting\n+  ``remove_unused_variable``.\n+- ``ShellCheckBear`` can ignore specific rules by providing those in\n+  the ``ignore_actions`` setting.\n+- ``YAMLLintBear`` can now be configured to check for maximum characters in a\n+  line, by default it is set to 80.\n+\n+**Default Setting Modifications**\n+\n+- ``LanguageToolBear`` - ``language`` setting is changed to\n+  ``natural_language``, please update your settings, it'll be deprecated\n+  completely in next release.\n+- ``MarkdownBear`` - ``max_line_length`` setting is changed to ``None`` instead\n+  of 80.\n+  [Issue 1581](https://github.com/coala/coala-bears/issues/1581)\n+- ``YAMLLintBear`` - ``document_start`` setting is changed to ``None``, not\n+  forbiding the usage of document start marker(---) by default.\n+  [Issue 1417](https://github.com/coala/coala-bears/issues/1417)\n+\n+**Bug Fixes**\n+\n+- ``InvalidLinkBear`` now extracts links from markdown correctly.\n+  [Issue 1338](https://github.com/coala/coala-bears/issues/1338)\n+- ``InvalidLinkBear`` now extracts all the links in a line. Earlier it used to\n+  extract only the first match.\n+- ``PyCodeStyleBear`` now uses user settings along with default settings.\n+  Earlier it used to ignore default settings if user changed one of them.\n+- ``PyImportSortBear`` now correctly supports option ``known_third_party_imports``.\n+  [Issue 1510](https://github.com/coala/coala-bears/issues/1510)", "created_at": "2017-05-22T21:47:51Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE2MjcxNA==", "fields": {"body": "We have mocked datetime to 2017-01-01 00:00:00.00 and this will change frozen time +500ms. So we do not need sleep anymore.", "diff": "@@ -396,16 +398,18 @@ def test_download_cached_file(self):\n         filename = self.filename\n         file_location = self.file_location\n \n-        with requests_mock.Mocker() as reqmock:\n+        with freeze_time('2017-01-01 00:00:00.00') as frozen_datetime, \\\n+                requests_mock.Mocker() as reqmock:\n+\n             reqmock.get(mock_url, text=mock_text)\n             self.assertFalse(isfile(file_location))\n             expected_filename = file_location\n             result_filename = self.uut.download_cached_file(mock_url, filename)\n             self.assertTrue(isfile(join(file_location)))\n             self.assertEqual(result_filename, expected_filename)\n             expected_time = getmtime(file_location)\n-            sleep(0.5)\n \n+            frozen_datetime.tick(delta=datetime.timedelta(seconds=0.5))", "created_at": "2017-05-24T05:02:30Z", "last_edited_at": null, "author": "netman92", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0NzQzMw==", "fields": {"body": "I think you should try to not change vulture at all for this part. Try to change VultureBear to use vulture as a library without changing vulture. If we notice that vulture is missing some function, we can implement it later.", "diff": "@@ -1,57 +1,105 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. Strategy here would be to:\n+\n+\t* Parse all files straight away from dict(filename: filecontent)  - This would highly improve the performance of the bear later due to the time we save of memory copying.\n+\t* Return a sorted list of tuples [(item.filename, item.lineno, item.typ, item)...] - which would be easily configurable.", "created_at": "2017-05-24T13:11:15Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0OTExNw==", "fields": {"body": "remove second \"default\"", "diff": "@@ -1,57 +1,105 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. Strategy here would be to:\n+\n+\t* Parse all files straight away from dict(filename: filecontent)  - This would highly improve the performance of the bear later due to the time we save of memory copying.\n+\t* Return a sorted list of tuples [(item.filename, item.lineno, item.typ, item)...] - which would be easily configurable.\n+\t*  This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed) \n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence the API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist default", "created_at": "2017-05-24T13:18:24Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQ2NDcyNA==", "fields": {"body": "you are missing a files statement here.", "diff": "@@ -13,3 +13,13 @@ max_lines_per_file = 200\n bears = FilenameBear\n files = **.yml, **.html, **.md, **.js, **.css\n ignore = vendors/**, data/projects/integrate-pyflakes-AST.md\n+\n+[spacing]\n+bears = SpaceConsistencyBear\n+ignore = vendors/**\n+use_spaces = True", "created_at": "2017-05-25T11:08:06Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQyOTU2OQ==", "fields": {"body": "Sure, I'll check with upstream", "diff": "@@ -0,0 +1,14 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+class Nevermind(BotPlugin):\n+    \"\"\"\n+    Doesn't mind", "created_at": "2017-05-25T06:58:41Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQzMzA4NA==", "fields": {"body": "Could you add a comment explaining so?", "diff": "@@ -0,0 +1,12 @@\n+import os\n+\n+from plugins.nevermind import Nevermind\n+\n+pytest_plugins = ['errbot.backends.test']\n+\n+extra_plugin_dir = '../plugins'", "created_at": "2017-05-25T07:28:10Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODcxMTQ2NQ==", "fields": {"body": "Add a trailing , (and move the closing ) to the next line, so you can add another one later without modifying this line.", "diff": "@@ -180,8 +180,15 @@ def test_extract_documentation_PYTHON3(self):\n                          'short'),\n                         docstyle_PYTHON3_default, '',\n                         docstyle_PYTHON3_default.markers[0],\n-                        TextRange.from_values(40, 1, 42, 9)))\n-\n+                        TextRange.from_values(40, 1, 42, 9)),\n+                    DocumentationComment(\n+                        ('\\n'\n+                         'A bad indented docstring\\n'\n+                         '    Improper indentation.\\n'\n+                         ':param impact: The force of Impact.\\n'),\n+                        docstyle_PYTHON3_default, '',\n+                        docstyle_PYTHON3_default.markers[0],\n+                        TextRange.from_values(45, 5, 49, 8)))", "created_at": "2017-05-26T14:15:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0MTAzOQ==", "fields": {"body": "oh, yes got it. But why not use the stripped_line?", "diff": "@@ -121,6 +125,17 @@ def _parse_documentation_with_symbols(self, param_identifiers,\n                 param_desc = splitted[1]\n                 parsed.append(self.Parameter(name=cur_param, desc=param_desc))\n \n+            elif stripped_line.startswith(excp_identifiers[0]):\n+                parse_mode = self.ExceptionValue\n+                excp_offset = line.find(\n+                    excp_identifiers[0]) + len(excp_identifiers[0])", "created_at": "2017-05-28T13:17:25Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0MTYwMA==", "fields": {"body": "Oh yes! that also has a case, what if there's an indentation in metadata's(params,exceps...) desc.\nlike\n    \"\"\"\n    This is good\n\n    :param xyz:\n        param definition\n            1. no idea if someone will write like this.\n            2. model point\n    \"\"\"\n\nline is use to preserve the indentation instead of stripped_line.", "diff": "@@ -121,6 +125,17 @@ def _parse_documentation_with_symbols(self, param_identifiers,\n                 param_desc = splitted[1]\n                 parsed.append(self.Parameter(name=cur_param, desc=param_desc))\n \n+            elif stripped_line.startswith(excp_identifiers[0]):\n+                parse_mode = self.ExceptionValue\n+                excp_offset = line.find(\n+                    excp_identifiers[0]) + len(excp_identifiers[0])", "created_at": "2017-05-28T13:50:51Z", "last_edited_at": null, "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0NzU4NQ==", "fields": {"body": "remove \"the suitable\"", "diff": "@@ -1,57 +1,128 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed)\n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence the API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist\n+The first step here would be to make the whitelist default. The important thing would be to identify possible cases which might cause vulture to report a false positive. This can be achieved through extensive testing with major projects - trending python projects on github would cater to our need for the purpose. This approach would serve us many benefits:\n+\n+- We can identify instances of what should ideally be in our whitelist file - as we may find any lesser known constructs.\n+- We can test vulture for any unreported bugs.\n+- We can find many projects which use/might want to use vulture - they may further collaborate with us in making the whitelists together. (As proposed by [@jendrikseipp](https://github.com/jendrikseipp))\n+- We can also make whitelists for popular python frameworks like Django, etc.\n+\n+\n+##### 3.) Acquiring source range and implementing auto-removal\n+Analyse and discuss with the community the utilities of ast or enhanced pyflake ast for what would better cater to our problem and would offer simplicity for source-range acquisition and arrive at a concrete conclusion. Also, there was another proposal by [@m0hawk](https://bitbucket.org/m0hawk) to get everything until the next node starts. Dialogue here - [#25](https://github.com/jendrikseipp/vulture/issues/25)\n+\n+Also, if able to fetch the source range successfully, implement the pathway through which  the metadata flows in and out of API, this would not require much work because  we can easily change item.lineno (int) to item.dead_range (tuple of ints) and can parse them over in the VultureBear.\n+\n+##### 4.) Detecting unreachable code\n+We would first need to identify cases where code cannot be reached. Some of the common ones are:\n+\n+- `If False`\n+- `If True; else`\n+- Any code after `return` statement in the block containing return itself.\n+- `raise` statement  in `try` block.\n+\n+Similar constructs would have to be looked onto. The crude form of this would be:\n+\n+- Analyse the ast\u2019s\n+- Look for the if nodes\n+- Check the boolean affiliated to it, tracking previous arguments.\n+\n+\n+##### 5.) Implementing a confidence value for  results\n+We would need to analyse every construct individually on a case by case basis. For example, we already know that import statements can be predicted with 100% surety (except for * imports, where it would be 0%), but functions often have false-positives.\n+\n+The confidence value will be alike the ones given below: (The finer grained distinctions will need further discussion)\n+\n+- `import` -->  `100%`\n+- `from foo import *` --> `0%`\n+- `variable` --> `<100%`\n+- `function` --> `<100%`\n+- `class` --> `<100%`\n+- `if False` --> `100%`\n \n References:\n \n-- [vulture](https://bitbucket.org/jendrikseipp/vulture)\n+- [vulture](https://github.com/jendrikseipp/vulture)\n+- [Project Proposal](https://docs.google.com/document/d/1gzRH-rdJsiAD-TOEB0O4OqtcnTp0zotcNl6agAuXGHw/edit?usp=sharing)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### Pre - Community Bonding Period ( Up Till  May 4)\n+- Initial investigation and discussion on what features to be added to API, and start implementing them on the go.\n+- Continue discussion with the community on ast and enhanced pyflakes ast - What are the underlying differences, and what can be possible implementations for source range acquisition.\n+- Diagnose possible cases which would render the code unreachable.\n+- Inculcate a habit of downloading the trending project of the day, running vulture on it, analyzing the results and adding anything suitable to whitelist file. This would help us in maintaining a rich whitelist file.\n+- Prioritize all the goals and targets\n+\n+##### Community Bonding (May 5 - 30)\n+- Finalize what should be implemented for source range acquisition on the basis of discussions during pre - community bonding period.\n+- Implement API - At this point, we would have a fully functioning API, and we would be ready to incorporate these changes into the VultureBear.\n+- Refactor VultureBear to incorporate API - This would be relatively easy as the API would have had until now respected it\u2019s usage in the VultureBear.\n+\n+##### Week 1 & 2 (May 31 - June 13)\n+- Implement API - At this point, we would have a fully functioning API, and we would be ready to incorporate these changes into the VultureBear.\n+- Refactor VultureBear to incorporate API - This would be relatively easy as the API would have had until now respected it\u2019s usage in the VultureBear.\n+\n+##### Week 3 (June 14 - 20)\n+- Realize VultureBear completely - At this point, it should be able to execute vulture, parse output, produce the patch file for removing the dead code what so ever found.\n+Review the tests written so far and add relevant test cases.\n+- Document Bear\n+- API documentation including, but not limited to possible use cases, example code snippets\n+- See that code is completely documented in place\n+- Buffer time to finish pending work.\n \n-- A concept for the source range acquisition is finalized.\n+##### Week 4 (June 20 - 26)\n+- Develop an analysis report on what all constructs can we detect with complete surety,  partial surety and the ones we cannot detect for the sake of implementing a confidence value with results. (A crude version is here in this thread).\n+- Discuss on the levels of certainty we would need to have (perhaps four for highly accurate (100%), accurate (>80%), medium (70 - 80%) and can\u2019t say)\n \n-##### CODING PHASE 1\n+##### Week 5 (June 27 - July 4)\n+- Create whitelist files for popular Python frameworks like Django\n+- Configure vulture in order to ensure that whitelist is taken into account by default.\n+- Updating docs and writing tests.\n \n-- Vulture offers its functionality as a library\n-- The VultureBear uses the new vulture library\n+##### Week 6 (July 4 - 15)\n+- Adapt to the strategy worked during community bonding period for obtaining source range.\n \n-##### CODING PHASE 2\n+##### Week 7 & 8 (July 15 - 29)\n+- Diagnose the instances of unreachable code, our concern here would be to identify all such cases which would render the code unreachable, like the if False; if True: else; code after return statements, etc. - Adding this to the dead code classes, under a new category: get_unreachable\n \n-- Confidence values are implemented for vulture results\n+##### Week 9 (August 1 - 7)\n+- Integrate these results with the VultureBear, which would primarily consist of:\n+- Transmitting source range, and unreachable code instances through API\n+- Yielding the results of Bear in the new format.\n \n-##### CODING PHASE 3\n+##### Week 11 (August 8 - 17)\n+- Adding the suitable documentation for the new changes incorporated in the API, Bear and vulture itself.", "created_at": "2017-05-28T19:26:59Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg4NzU0Mg==", "fields": {"body": "For better readability I would prefer Description, Parameter, ExceptionValue or ReturnValue (with the `s of course)", "diff": "@@ -85,18 +86,21 @@ def parse(self):\n                 ' has not been implemented yet'.format(self))\n \n     def _parse_documentation_with_symbols(self, param_identifiers,\n+                                          excep_identifiers,\n                                           return_identifiers):\n         \"\"\"\n-        Parses documentation based on parameter and return symbols.\n+        Parses documentation based on parameter, exception and return symbols.\n \n         :param param_identifiers:\n             A tuple of two strings with which a parameter starts and ends.\n+        :param excep_identifiers:\n+            A tuple of two strings with which an exception starts and ends.\n         :param return_identifiers:\n             The string with which a return description starts.\n         :return:\n             The list of all the parsed sections of the documentation. Every\n             section is a namedtuple of either ``Description`` or ``Parameter``\n-            or ``ReturnValue``.\n+            or ``ExceptionValue`` or ``ReturnValue``.", "created_at": "2017-05-29T08:17:40Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUwNg==", "fields": {"body": "trailing blank line.", "diff": "@@ -0,0 +1,12 @@\n+[Core]\n+name = ship_it\n+module = ship_it\n+\n+[Documentation]\n+description = Show motivational ship it squirrel images.\n+\n+[Python]\n+version = 3\n+\n+[Errbot]\n+", "created_at": "2017-05-27T10:41:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUxMw==", "fields": {"body": "trailing blank line.", "diff": "@@ -19,3 +19,7 @@ default_actions = PEP8Bear: ApplyPatchAction\n \n [all.linelength]\n bears = LineLengthBear\n+\n+[all.links]\n+bears = InvalidLinkBear\n+", "created_at": "2017-05-27T10:41:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzMjQzNA==", "fields": {"body": "Why not use checkboxes? I don't know if the website will render it though.", "diff": "@@ -14,27 +14,30 @@ coala. The specific areas and points to focus on are:\n 5. Make the implementation of ApplyPatchAction log the applied patch.\n 6. Reprompt after running actions only if the action says so.\n \n-The end goal of the project is to make coala easier to use, hence the\n-project is going to rely heavily upon mockups and feedback from the\n-community. Also, in addition to the above changes the applicant is encouraged\n-to come up with their own ideas to improve the CLI.\n+The end goal of the project is to:\n+* _Make coala easier to use_\n+* _Adds new functionality so the user could have multiple options when he uses coala_", "created_at": "2017-05-28T03:38:45Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzNTk3Mw==", "fields": {"body": "a -> an", "diff": "@@ -85,12 +86,15 @@ def parse(self):\n                 ' has not been implemented yet'.format(self))\n \n     def _parse_documentation_with_symbols(self, param_identifiers,\n+                                          excp_identifiers,\n                                           return_identifiers):\n         \"\"\"\n         Parses documentation based on parameter and return symbols.\n \n         :param param_identifiers:\n             A tuple of two strings with which a parameter starts and ends.\n+        :param excp_identifiers:\n+            A tuple of two strings with which a exception starts and ends.", "created_at": "2017-05-28T08:35:43Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzNjY2OQ==", "fields": {"body": "The return description needs updating, since ExceptionValue can now also be in the return value.", "diff": "@@ -85,12 +86,15 @@ def parse(self):\n                 ' has not been implemented yet'.format(self))\n \n     def _parse_documentation_with_symbols(self, param_identifiers,\n+                                          excp_identifiers,\n                                           return_identifiers):\n         \"\"\"\n         Parses documentation based on parameter and return symbols.\n \n         :param param_identifiers:\n             A tuple of two strings with which a parameter starts and ends.\n+        :param excp_identifiers:\n+            A tuple of two strings with which a exception starts and ends.\n         :param return_identifiers:\n             The string with which a return description starts.\n         :return:", "created_at": "2017-05-28T09:12:55Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODk2MDIxNw==", "fields": {"body": "Well, technically you could. But it would create nothing but confusion. \ud83d\ude1b", "diff": "@@ -12,6 +12,7 @@ class DocumentationComment:\n     inside source-code, like position etc.\n     \"\"\"\n     Parameter = namedtuple('Parameter', 'name, desc')\n+    ExceptionValue = namedtuple('ExceptionValue', 'name, desc')", "created_at": "2017-05-29T15:59:20Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTA5Njc4NQ==", "fields": {"body": "minor typo prioritization *", "diff": "@@ -38,33 +40,64 @@ The difference between this project and \"Convert Bears to Aspects\" is that the\n other project focuses on defining aspects on *each bears* while this project\n implements how the coala core is handling bears that use aspects.\n \n-References\n+**Implementation**\n+\n+This project could be divided into 3 main step, which is:\n+\n+1. aspect based configuration\n+\n+Define new option and variable that could be used on coafile to define list\n+of aspect and taste that user want to run over the project.\n+\n+2. Bear picking strategy\n+\n+Implement required algorithm to pick list of bear based on required aspect on\n+coafile. This involve collecting all bears metadata to read its capability and\n+prioritizing picking by few criteria like choosing bear that could fix the\n+problem (not only detect), minimizing number of individual bears, and\n+minimizing different runtime environment of external linter bear.\n+\n+3. Documentation, depreciation, and testing\n+\n+Writing or updating documentation on how aspect work and how to write new\n+configuration file. Also I plan to do an integration test that will run coala\n+with new aspect based configuration and the old one over an example project\n+and compare the result.\n+\n+**References**\n \n-* Aspects concept based on\n+* aspects concept based on\n   [cEP-0005](https://github.com/coala/cEPs/blob/master/cEP-0005.md)\n * Proposal on how new bears could be designed\n   [cEP-0002](https://github.com/coala/cEPs/blob/master/cEP-0002.md)\n-* Current aspects prototype\n-  [coala/aspect-docs](https://github.com/coala/aspect-docs)\n+* Current aspects code on\n+  [coala/coala](https://github.com/coala/coala/tree/master/coalib/bearlib/aspects)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### [PREPARATION/BONDING](https://gitlab.com/coala/GSoC-2017/milestones/36)\n \n * A solid plan for the implementation and the exact features exist.\n * Any needed changes to [cEP-0005](https://coala.io/cep5) have been merged.\n \n-##### CODING PHASE 1\n+##### [CODING PHASE 1](https://gitlab.com/coala/GSoC-2017/milestones/37)\n \n * coala understands the new aspect-based configuration file.\n * The new aspect-based configuration file is documented properly.\n+* Fix one issue on autoflake\n \n-##### CODING PHASE 2\n+##### [CODING PHASE 2](https://gitlab.com/coala/GSoC-2017/milestones/38)\n \n-* coala can choose the right bears for an aspect.\n+* coala can pick the right bears to resolve an aspect.\n+* coala use few prioritazion criteria to pick those bear.", "created_at": "2017-05-30T13:22:45Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE1MzM5MA==", "fields": {"body": "Since you are modifying this, you should also modify test data default.java and test case.", "diff": "@@ -2,17 +2,23 @@\n doc-marker = \"\"\", , \"\"\"\n param_start = :param\\ # here's a space\n param_end = :\n+exception_start = :raises\\ # here's a space\n+exception_end = :\n return_sep = :return:\n \n [PYTHON3]\n doc-marker = \"\"\", , \"\"\"\n param_start = :param\\ # here's a space\n param_end = :\n+exception_start = :raises\\ # here's a space\n+exception_end = :\n return_sep = :return:\n \n [JAVA]\n doc-marker1 = /**, \\ *, \\ */\n doc-marker2 = /**, , \\ */\n param_start = @param\\ \\ # here's a space\n param_end = \\ # here's a space\n+exception_start = @raises\\ \\ # here's a space", "created_at": "2017-05-30T16:45:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE1NDMzNQ==", "fields": {"body": "write exception properly instead of excps.\nAnd why have a 'default' with doc like :raises test: test description1 \\n , which has inappropriate whitespace everywhere.\nWhy not :raises test: test description1\\n which is proper whitespace.\nThen add other tests with weird extra whitespace to show how the case behaves when it sees invalid whitespace.", "diff": "@@ -114,6 +117,15 @@ def test_params_default(self):\n                     self.Parameter(name='test', desc='  test description2 \\n')]\n         self.check_docstring(doc, expected)\n \n+    def test_excps_default(self):", "created_at": "2017-05-30T16:49:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE1NTcxNw==", "fields": {"body": "IIRC in Doxygen, \"contains filename.\" here should be \"Contains filename.\" (the blank line above also looks wrong , and the @ should be under the \"This\", but those will require fixes beyond the scope of this patch)", "diff": "@@ -32,3 +32,11 @@ def best_docstring(param1, param2):\n     # @param param2 Parameter 2\n     # @return Nothing\n         return None\n+\n+def docstring_find(filename):\n+    ## This is dummy docstring find function!\n+    #\n+    # @param filename contains filename.", "created_at": "2017-05-30T16:55:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MjQ1Mg==", "fields": {"body": "could you keep the phases section in the document, and put the relevant weeks inside them", "diff": "@@ -1,57 +1,126 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed)\n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence the API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist\n+The first step here would be to make the whitelist default. The important thing would be to identify possible cases which might cause vulture to report a false positive. This can be achieved through extensive testing with major projects - trending python projects on github would cater to our need for the purpose. This approach would serve us many benefits:\n+\n+- We can identify instances of what should ideally be in our whitelist file - as we may find any lesser known constructs.\n+- We can test vulture for any unreported bugs.\n+- We can find many projects which use/might want to use vulture - they may further collaborate with us in making the whitelists together. (As proposed by [@jendrikseipp](https://github.com/jendrikseipp))\n+- We can also make whitelists for popular python frameworks like Django, etc.\n+\n+\n+##### 3.) Acquiring source range and implementing auto-removal\n+Analyse and discuss with the community the utilities of ast or enhanced pyflake ast for what would better cater to our problem and would offer simplicity for source-range acquisition and arrive at a concrete conclusion. Also, there was another proposal by [@m0hawk](https://bitbucket.org/m0hawk) to get everything until the next node starts. Dialogue here - [#25](https://github.com/jendrikseipp/vulture/issues/25)\n+\n+Also, if able to fetch the source range successfully, implement the pathway through which  the metadata flows in and out of API, this would not require much work because  we can easily change item.lineno (int) to item.dead_range (tuple of ints) and can parse them over in the VultureBear.\n+\n+##### 4.) Detecting unreachable code\n+We would first need to identify cases where code cannot be reached. Some of the common ones are:\n+\n+- `If False`\n+- `If True; else`\n+- Any code after `return` statement in the block containing return itself.\n+- `raise` statement  in `try` block.\n+\n+Similar constructs would have to be looked onto. The crude form of this would be:\n+\n+- Analyse the ast\u2019s\n+- Look for the if nodes\n+- Check the boolean affiliated to it, tracking previous arguments.\n+\n+\n+##### 5.) Implementing a confidence value for  results\n+We would need to analyse every construct individually on a case by case basis. For example, we already know that import statements can be predicted with 100% surety (except for * imports, where it would be 0%), but functions often have false-positives.\n+\n+The confidence value will be alike the ones given below: (The finer grained distinctions will need further discussion)\n+\n+- `import` -->  `100%`\n+- `from foo import *` --> `0%`\n+- `variable` --> `<100%`\n+- `function` --> `<100%`\n+- `class` --> `<100%`\n+- `if False` --> `100%`\n \n References:\n \n-- [vulture](https://bitbucket.org/jendrikseipp/vulture)\n+- [vulture](https://github.com/jendrikseipp/vulture)\n+- [Project Proposal](https://docs.google.com/document/d/1gzRH-rdJsiAD-TOEB0O4OqtcnTp0zotcNl6agAuXGHw/edit?usp=sharing)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### Pre - Community Bonding Period ( Up Till  May 4)\n+- Initial investigation and discussion on what features to be added to API, and start implementing them on the go.\n+- Continue discussion with the community on ast and enhanced pyflakes ast - What are the underlying differences, and what can be possible implementations for source range acquisition.\n+- Diagnose possible cases which would render the code unreachable.\n+- Inculcate a habit of downloading the trending project of the day, running vulture on it, analyzing the results and adding anything suitable to whitelist file. This would help us in maintaining a rich whitelist file.\n+- Prioritize all the goals and targets\n+\n+##### Community Bonding (May 5 - 30)\n+- Finalize what should be implemented for source range acquisition on the basis of discussions during pre - community bonding period.\n+\n+##### Week 1 & 2 (May 31 - June 13)\n+- Implement API - At this point, we would have a fully functioning API, and we would be ready to incorporate these changes into the VultureBear.\n+- Refactor VultureBear to incorporate API - This would be relatively easy as the API would have had until now respected it\u2019s usage in the VultureBear.\n+\n+##### Week 3 (June 14 - 20)\n+- Realize VultureBear completely - At this point, it should be able to execute vulture, parse output, produce the patch file for removing the dead code what so ever found.\n+Review the tests written so far and add relevant test cases.\n+- Document Bear\n+- API documentation including, but not limited to possible use cases, example code snippets\n+- See that code is completely documented in place\n+- Buffer time to finish pending work.\n \n-- A concept for the source range acquisition is finalized.\n+##### Week 4 (June 20 - 26)\n+- Develop an analysis report on what all constructs can we detect with complete surety,  partial surety and the ones we cannot detect for the sake of implementing a confidence value with results. (A crude version is here in this thread).\n+- Discuss on the levels of certainty we would need to have (perhaps four for highly accurate (100%), accurate (>80%), medium (70 - 80%) and can\u2019t say)\n \n-##### CODING PHASE 1", "created_at": "2017-05-30T17:22:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mjg1OA==", "fields": {"body": "please reformat/lint your markdown with remark or the MarkdownBear.\nWe will activate this bear soon.", "diff": "@@ -1,57 +1,126 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API", "created_at": "2017-05-30T17:24:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MzY3MA==", "fields": {"body": "trailing blank line.", "diff": "@@ -0,0 +1,113 @@\n+This project is about cobot, the automation chat bot that is used at coala.\n+Currently cobot is used for several things:\n+\n+- Assign issues\n+- Invite people\n+- Create issues\n+- Unassign issues\n+- label PRs\n+\n+etc. And cobot has proved as an extremely useful tool for the community and\n+convenient to the maintainers. But current cobot is based on the [hubot\n+framework](https://hubot.github.com) which requires the developers to write\n+plugins/scripts in coffeescript. coala is a python inclined community and\n+porting cobot to a python based chat bot framework will help cobot to grow. In\n+this project, the current cobot with current functionalities will be ported to\n+[errbot](http://errbot.io).\n+\n+Also the hubot scripts that are currently being used aren't tested. There are no\n+unit tests, no integrity tests which has lead to buggy scripts merged earlier\n+and required more human resources. Another goal of this project is to have all\n+the plugins tested, unit tests for each plugin.\n+\n+Another interesting feature that will be developed during this project is\n+auto-replying cobot when a question is triggered. So, next time, when a newcomer\n+asks \"What is rebase :/ ?\" cobot will automatically answer it after\n+intelligently searching/matching with the user, developer docs and newcomer\n+guide. That is this feature will be fueled by our existing documentation that\n+many people don't seem to respect/ignore knowingly or unknowingly not making it\n+worthwile having good up-to-date docs. We aim at using topic modeling i.e. take\n+help of machine learning and natural language processing(NLP) for this one.\n+\n+Repository: https://github.com/coala/corobo\n+Proposal PDF: https://meetmangukiya.github.io/GSoC_cobot_enhancement.pdf\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/2\n+\n+* The applicant has made a cEP of how the new plugins will be implemented, how\n+  will it be tested, etc.\n+\n+\n+##### CODING PHASE 1\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/23\n+\n+* Port all the plugins to errbot.\n+* Write half of the new features proposed.\n+* Write the test helper and all the merged plugins should have unit tests.\n+\n+##### CODING PHASE 2\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/24\n+\n+* Write the other half of the new features proposed.\n+* Start implementing the topic modeling functions, etc.\n+\n+##### CODING PHASE 3\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/25\n+\n+* Topic modeling should be implemented completely and should also be able to\n+  trace back to the related document in the training data.\n+* Document all the bot commands and the topic modeling process used, for future\n+  references.\n+\n+#### Process\n+\n+##### CODING PHASE 1\n+\n+In week 1 and 2: All the existing scripts in gitlab/coala/cobot should be\n+ported to github/coala/corobo. All the plugins should be tested with 100%\n+coverage.\n+\n+In week 3 and 4: At least two new plugins from\n+https://github.com/coala/corobo/milestone/5 should be written and tested.\n+\n+##### CODING PHASE 2\n+\n+In week 5 and 6:\n+1. Get all the PRs from CODING PHASE 1 merged.\n+2. Write the WSDL file for coala webservices. Generate coala-api-wrapper from\n+   the WSDL file and publish to PyPI.\n+3. Write all the plugins from https://github.com/coala/corobo/milestone/5 and\n+   use coala-api-wrapper instead of making raw API calls.\n+\n+In week 7 and 8:\n+1. Merge all the PRs from week 5 and 6.\n+2. Review all the plugin commands and fix any bugs that were detected during\n+   this period. Do a UX survey from the coala community about the commands.\n+   Do the necessary changes from the insights of the UX survey.\n+3. Lay the foundation of topic-modeling and create sane data sets from coala\n+   documentation.\n+\n+##### CODING PHASE 3\n+\n+In week 9 and 10:\n+1. Have least functionality that does the pre-processing and can retrieve topic\n+   from the given question, i.e. figuring out what is the expected answer.\n+2. Start working on the passage retrieval part to _get_ the answers from the\n+   documentation.\n+3. Working functionality to get answers from the docs and summarize the doc to\n+   answer in concise manner.\n+\n+In week 11 and 12:\n+1. Based on the scores determine if the question can be answered from our docs,\n+   if not just return a google result for the same question.\n+2. Buffer.\n+3. Documentation(particularly about the algorithm used for retrieving the\n+   answers).\n+", "created_at": "2017-05-30T17:27:18Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzc1NA==", "fields": {"body": "space before (", "diff": "@@ -0,0 +1,113 @@\n+This project is about cobot, the automation chat bot that is used at coala.\n+Currently cobot is used for several things:\n+\n+- Assign issues\n+- Invite people\n+- Create issues\n+- Unassign issues\n+- label PRs\n+\n+etc. And cobot has proved as an extremely useful tool for the community and\n+convenient to the maintainers. But current cobot is based on the [hubot\n+framework](https://hubot.github.com) which requires the developers to write\n+plugins/scripts in coffeescript. coala is a python inclined community and\n+porting cobot to a python based chat bot framework will help cobot to grow. In\n+this project, the current cobot with current functionalities will be ported to\n+[errbot](http://errbot.io).\n+\n+Also the hubot scripts that are currently being used aren't tested. There are no\n+unit tests, no integrity tests which has lead to buggy scripts merged earlier\n+and required more human resources. Another goal of this project is to have all\n+the plugins tested, unit tests for each plugin.\n+\n+Another interesting feature that will be developed during this project is\n+auto-replying cobot when a question is triggered. So, next time, when a newcomer\n+asks \"What is rebase :/ ?\" cobot will automatically answer it after\n+intelligently searching/matching with the user, developer docs and newcomer\n+guide. That is this feature will be fueled by our existing documentation that\n+many people don't seem to respect/ignore knowingly or unknowingly not making it\n+worthwile having good up-to-date docs. We aim at using topic modeling i.e. take\n+help of machine learning and natural language processing(NLP) for this one.\n+\n+Repository: https://github.com/coala/corobo\n+Proposal PDF: https://meetmangukiya.github.io/GSoC_cobot_enhancement.pdf\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/2\n+\n+* The applicant has made a cEP of how the new plugins will be implemented, how\n+  will it be tested, etc.\n+\n+\n+##### CODING PHASE 1\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/23\n+\n+* Port all the plugins to errbot.\n+* Write half of the new features proposed.\n+* Write the test helper and all the merged plugins should have unit tests.\n+\n+##### CODING PHASE 2\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/24\n+\n+* Write the other half of the new features proposed.\n+* Start implementing the topic modeling functions, etc.\n+\n+##### CODING PHASE 3\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/25\n+\n+* Topic modeling should be implemented completely and should also be able to\n+  trace back to the related document in the training data.\n+* Document all the bot commands and the topic modeling process used, for future\n+  references.\n+\n+#### Process\n+\n+##### CODING PHASE 1\n+\n+In week 1 and 2: All the existing scripts in gitlab/coala/cobot should be\n+ported to github/coala/corobo. All the plugins should be tested with 100%\n+coverage.\n+\n+In week 3 and 4: At least two new plugins from\n+https://github.com/coala/corobo/milestone/5 should be written and tested.\n+\n+##### CODING PHASE 2\n+\n+In week 5 and 6:\n+1. Get all the PRs from CODING PHASE 1 merged.\n+2. Write the WSDL file for coala webservices. Generate coala-api-wrapper from\n+   the WSDL file and publish to PyPI.\n+3. Write all the plugins from https://github.com/coala/corobo/milestone/5 and\n+   use coala-api-wrapper instead of making raw API calls.\n+\n+In week 7 and 8:\n+1. Merge all the PRs from week 5 and 6.\n+2. Review all the plugin commands and fix any bugs that were detected during\n+   this period. Do a UX survey from the coala community about the commands.\n+   Do the necessary changes from the insights of the UX survey.\n+3. Lay the foundation of topic-modeling and create sane data sets from coala\n+   documentation.\n+\n+##### CODING PHASE 3\n+\n+In week 9 and 10:\n+1. Have least functionality that does the pre-processing and can retrieve topic\n+   from the given question, i.e. figuring out what is the expected answer.\n+2. Start working on the passage retrieval part to _get_ the answers from the\n+   documentation.\n+3. Working functionality to get answers from the docs and summarize the doc to\n+   answer in concise manner.\n+\n+In week 11 and 12:\n+1. Based on the scores determine if the question can be answered from our docs,\n+   if not just return a google result for the same question.\n+2. Buffer.\n+3. Documentation(particularly about the algorithm used for retrieving the", "created_at": "2017-05-30T17:27:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzk4OQ==", "fields": {"body": "I think you need a blank line after this, to be proper markdown syntax.", "diff": "@@ -0,0 +1,113 @@\n+This project is about cobot, the automation chat bot that is used at coala.\n+Currently cobot is used for several things:\n+\n+- Assign issues\n+- Invite people\n+- Create issues\n+- Unassign issues\n+- label PRs\n+\n+etc. And cobot has proved as an extremely useful tool for the community and\n+convenient to the maintainers. But current cobot is based on the [hubot\n+framework](https://hubot.github.com) which requires the developers to write\n+plugins/scripts in coffeescript. coala is a python inclined community and\n+porting cobot to a python based chat bot framework will help cobot to grow. In\n+this project, the current cobot with current functionalities will be ported to\n+[errbot](http://errbot.io).\n+\n+Also the hubot scripts that are currently being used aren't tested. There are no\n+unit tests, no integrity tests which has lead to buggy scripts merged earlier\n+and required more human resources. Another goal of this project is to have all\n+the plugins tested, unit tests for each plugin.\n+\n+Another interesting feature that will be developed during this project is\n+auto-replying cobot when a question is triggered. So, next time, when a newcomer\n+asks \"What is rebase :/ ?\" cobot will automatically answer it after\n+intelligently searching/matching with the user, developer docs and newcomer\n+guide. That is this feature will be fueled by our existing documentation that\n+many people don't seem to respect/ignore knowingly or unknowingly not making it\n+worthwile having good up-to-date docs. We aim at using topic modeling i.e. take\n+help of machine learning and natural language processing(NLP) for this one.\n+\n+Repository: https://github.com/coala/corobo\n+Proposal PDF: https://meetmangukiya.github.io/GSoC_cobot_enhancement.pdf\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/2\n+\n+* The applicant has made a cEP of how the new plugins will be implemented, how\n+  will it be tested, etc.\n+\n+\n+##### CODING PHASE 1\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/23\n+\n+* Port all the plugins to errbot.\n+* Write half of the new features proposed.\n+* Write the test helper and all the merged plugins should have unit tests.\n+\n+##### CODING PHASE 2\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/24\n+\n+* Write the other half of the new features proposed.\n+* Start implementing the topic modeling functions, etc.\n+\n+##### CODING PHASE 3\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/25\n+\n+* Topic modeling should be implemented completely and should also be able to\n+  trace back to the related document in the training data.\n+* Document all the bot commands and the topic modeling process used, for future\n+  references.\n+\n+#### Process\n+\n+##### CODING PHASE 1\n+\n+In week 1 and 2: All the existing scripts in gitlab/coala/cobot should be\n+ported to github/coala/corobo. All the plugins should be tested with 100%\n+coverage.\n+\n+In week 3 and 4: At least two new plugins from\n+https://github.com/coala/corobo/milestone/5 should be written and tested.\n+\n+##### CODING PHASE 2\n+\n+In week 5 and 6:", "created_at": "2017-05-30T17:28:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTI1MDYyMQ==", "fields": {"body": "why do you have a tab here?\nAnd please use a consistent line length\nno more than 120 please.", "diff": "@@ -1,57 +1,148 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: `get_unused_code`. This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed)", "created_at": "2017-05-31T01:00:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxMzY1NA==", "fields": {"body": "why square brackets? you can omit them", "diff": "@@ -0,0 +1,36 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+)[:]*(?P<column>\\d+)*\\s*.*'", "created_at": "2017-05-30T21:01:34Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNDA0OQ==", "fields": {"body": "[:]*\n\nAs many colons as possible? Don't you mean :??", "diff": "@@ -0,0 +1,36 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+)[:]*(?P<column>\\d+)*\\s*.*'", "created_at": "2017-05-30T21:03:28Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNDEyOA==", "fields": {"body": "Also as many columns as possible? Shouldn't it be (?P<column>\\d+)??", "diff": "@@ -0,0 +1,36 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+)[:]*(?P<column>\\d+)*\\s*.*'", "created_at": "2017-05-30T21:03:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNDI1OQ==", "fields": {"body": "Can you turn \\s* into \\s+? I assume that there will always be at least one space^^", "diff": "@@ -0,0 +1,36 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+)[:]*(?P<column>\\d+)*\\s*.*'", "created_at": "2017-05-30T21:04:28Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNTA1MQ==", "fields": {"body": "Actually I don't know Stylus. Maybe you could make a small line explaining what it is? Very shortly, maybe like\nThis is particularly important with Stylus (a common XYZ thing), ...", "diff": "@@ -0,0 +1,36 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+)[:]*(?P<column>\\d+)*\\s*.*'\n+                     r'(?P<severity>error|warning)\\s*(?P<message>.+)')\n+class StylintBear:\n+    \"\"\"\n+    Attempts to catch little mistakes (duplication of rules for instance) and\n+    to enforce a code style guide. This is particularly important with Stylus,", "created_at": "2017-05-30T21:07:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNTMwNA==", "fields": {"body": "please add a test, I won't let you pass with a pragma: no cover here ;)", "diff": "@@ -0,0 +1,36 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+)[:]*(?P<column>\\d+)*\\s*.*'\n+                     r'(?P<severity>error|warning)\\s*(?P<message>.+)')\n+class StylintBear:\n+    \"\"\"\n+    Attempts to catch little mistakes (duplication of rules for instance) and\n+    to enforce a code style guide. This is particularly important with Stylus,\n+    which is unopinionated when it comes to syntax. Like Stylus itself, this\n+    linter opts for flexibility over rigidity.\n+    \"\"\"\n+\n+    LANGUAGES = {'Stylus'}\n+    REQUIREMENTS = {NpmRequirement('stylint', '1.5.9')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/SimenB/stylint'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file, stylint_config: str=''):\n+        \"\"\"\n+        :param stylint_config:\n+            The location of the .stylintrc config file. All the above options\n+            are not used if this option is present, instead the .stylintrc\n+            file is used as the configuration file.\n+        \"\"\"\n+        if stylint_config:  # pragma: no cover", "created_at": "2017-05-30T21:08:35Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTQyNTA5Mw==", "fields": {"body": "I think the second url needs to be urlencoded.", "diff": "@@ -0,0 +1,140 @@\n+import requests\n+\n+from bears.general.InvalidLinkBear import InvalidLinkBear\n+\n+from coalib.settings.Setting import typed_dict\n+from coalib.settings.Setting import typed_list\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+from memento_client import MementoClient\n+\n+from urllib.parse import urlparse\n+\n+\n+class MementoBear(InvalidLinkBear):\n+    DEFAULT_TIMEOUT = 15\n+    LANGUAGES = {'All'}\n+    REQUIREMENTS = {PipRequirement('memento_client', '0.5.3')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Documentation'}\n+    DEFAULT_IGNORE = [\n+        'http://web.archive.org/**',\n+    ]\n+\n+    def analyze_links_in_file(self, file, network_timeout, link_ignore_regex,\n+                              link_ignore_list):\n+        for link, line_number, link_context in self.extract_links_from_file(\n+                file, link_ignore_regex, link_ignore_list):\n+\n+            host = urlparse(link).netloc\n+            code = InvalidLinkBear.get_status_code(\n+                link,\n+                network_timeout.get(host)\n+                if host in network_timeout\n+                else network_timeout.get('*')\n+                if '*' in network_timeout\n+                else self.DEFAULT_TIMEOUT)\n+            if code and 200 <= code < 400:\n+                yield line_number + 1, link, code, link_context\n+\n+    @staticmethod\n+    def check_archive(mc, link):\n+        \"\"\"\n+        Check the link is it archived or not.\n+\n+        :param mc:   A `memento_client.MementoClient` instance.\n+        :param link: The link (str) that will be checked.\n+        :return:     Boolean, `True` means the link has been archived.\n+        \"\"\"\n+        try:\n+            mc.get_memento_info(link)['mementos']\n+        except KeyError:\n+            return False\n+        return True\n+\n+    @staticmethod\n+    def get_redirect_urls(link):\n+        urls = []\n+\n+        resp = requests.head(link, allow_redirects=True)\n+        for redirect in resp.history:\n+            urls.append(redirect.url)\n+\n+        return urls\n+\n+    def run(self, filename, file,\n+            network_timeout: typed_dict(str, int, DEFAULT_TIMEOUT)=dict(),\n+            link_ignore_regex: str='([.\\/]example\\.com|\\{|\\$)',\n+            link_ignore_list: typed_list(str)=DEFAULT_IGNORE,\n+            follow_redirects: bool=True):\n+        \"\"\"\n+        Find links in any text file and check if they are archived.\n+\n+        Link is considered valid if the link has been archived by any services\n+        in memento_client.\n+\n+        This bear can automatically fix redirects.\n+\n+        Warning: This bear will make HEAD requests to all URLs mentioned in\n+        your codebase, which can potentially be destructive. As an example,\n+        this bear would naively just visit the URL from a line that goes like\n+        `do_not_ever_open = 'https://api.acme.inc/delete-all-data'` wiping out\n+        all your data.\n+\n+        :param network_timeout:    A dict mapping URLs and timeout to be\n+                                   used for that URL. All the URLs that have\n+                                   the same host as that of URLs provided\n+                                   will be passed that timeout. It can also\n+                                   contain a wildcard timeout entry with key\n+                                   '*'. The timeout of all the websites not\n+                                   in the dict will be the value of the key\n+                                   '*'.\n+        :param link_ignore_regex:  A regex for urls to ignore.\n+        :param link_ignore_list:   Comma separated url globs to ignore.\n+        :param follow_redirects:   Set to true to check all redirect urls.\n+        \"\"\"\n+        self._mc = MementoClient()\n+\n+        network_timeout = {urlparse(url).netloc\n+                           if not url == '*' else '*': timeout\n+                           for url, timeout in network_timeout.items()}\n+\n+        if link_ignore_list != self.DEFAULT_IGNORE:\n+            link_ignore_list.extend(self.DEFAULT_IGNORE)\n+\n+        for (line_number, link,\n+             code, context) in self.analyze_links_in_file(\n+                file, network_timeout, link_ignore_regex, link_ignore_list):\n+            status = MementoBear.check_archive(self._mc, link)\n+            if not status:\n+                yield Result.from_values(\n+                    self,\n+                    ('This link is not archived yet, visit '\n+                     'https://web.archive.org/save/%s to get it archived.'\n+                     % link),\n+                    file=filename,\n+                    line=line_number,\n+                    severity=RESULT_SEVERITY.INFO\n+                )\n+\n+            if follow_redirects and 300 <= code < 400:  # HTTP status 30x\n+                redirect_urls = MementoBear.get_redirect_urls(link)\n+\n+                for url in redirect_urls:\n+                    status = MementoBear.check_archive(self._mc, url)\n+                    if not status:\n+                        yield Result.from_values(\n+                            self,\n+                            ('This link redirects to %s and not archived yet, '\n+                             'visit https://web.archive.org/save/%s to get it '\n+                             'archived.'\n+                             % (url, url)),", "created_at": "2017-05-31T17:43:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2Njc0Mg==", "fields": {"body": "typo", "diff": "@@ -0,0 +1,12 @@\n+[Core]\n+module = github\n+name = github\n+\n+[Documentation]\n+description = GitHub utilities exposed through errbpt", "created_at": "2017-06-01T09:22:53Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2NjgxOQ==", "fields": {"body": "use internal logging object provided by errbot instead", "diff": "@@ -0,0 +1,111 @@\n+import logging", "created_at": "2017-06-01T09:23:12Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU4NDU0MA==", "fields": {"body": "When I try to precentage-encode the url and send the url to web.archive.org/save/, the server responds 502, but when I try with no precentage-encoded url, the server responds with 200.\n>>> parse.quote('http://csplumod.blogspot.com')\n'http%3A//csplumod.blogspot.com'\n>>> requests.head('https://web.archive.org/save/http%3A//csplumod.blogspot.com')\n<Response [502]>\n>>> requests.head('https://web.archive.org/save/http://csplumod.blogspot.com')\n<Response [200]>\n>>>", "diff": "@@ -0,0 +1,140 @@\n+import requests\n+\n+from bears.general.InvalidLinkBear import InvalidLinkBear\n+\n+from coalib.settings.Setting import typed_dict\n+from coalib.settings.Setting import typed_list\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+from memento_client import MementoClient\n+\n+from urllib.parse import urlparse\n+\n+\n+class MementoBear(InvalidLinkBear):\n+    DEFAULT_TIMEOUT = 15\n+    LANGUAGES = {'All'}\n+    REQUIREMENTS = {PipRequirement('memento_client', '0.5.3')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Documentation'}\n+    DEFAULT_IGNORE = [\n+        'http://web.archive.org/**',\n+    ]\n+\n+    def analyze_links_in_file(self, file, network_timeout, link_ignore_regex,\n+                              link_ignore_list):\n+        for link, line_number, link_context in self.extract_links_from_file(\n+                file, link_ignore_regex, link_ignore_list):\n+\n+            host = urlparse(link).netloc\n+            code = InvalidLinkBear.get_status_code(\n+                link,\n+                network_timeout.get(host)\n+                if host in network_timeout\n+                else network_timeout.get('*')\n+                if '*' in network_timeout\n+                else self.DEFAULT_TIMEOUT)\n+            if code and 200 <= code < 400:\n+                yield line_number + 1, link, code, link_context\n+\n+    @staticmethod\n+    def check_archive(mc, link):\n+        \"\"\"\n+        Check the link is it archived or not.\n+\n+        :param mc:   A `memento_client.MementoClient` instance.\n+        :param link: The link (str) that will be checked.\n+        :return:     Boolean, `True` means the link has been archived.\n+        \"\"\"\n+        try:\n+            mc.get_memento_info(link)['mementos']\n+        except KeyError:\n+            return False\n+        return True\n+\n+    @staticmethod\n+    def get_redirect_urls(link):\n+        urls = []\n+\n+        resp = requests.head(link, allow_redirects=True)\n+        for redirect in resp.history:\n+            urls.append(redirect.url)\n+\n+        return urls\n+\n+    def run(self, filename, file,\n+            network_timeout: typed_dict(str, int, DEFAULT_TIMEOUT)=dict(),\n+            link_ignore_regex: str='([.\\/]example\\.com|\\{|\\$)',\n+            link_ignore_list: typed_list(str)=DEFAULT_IGNORE,\n+            follow_redirects: bool=True):\n+        \"\"\"\n+        Find links in any text file and check if they are archived.\n+\n+        Link is considered valid if the link has been archived by any services\n+        in memento_client.\n+\n+        This bear can automatically fix redirects.\n+\n+        Warning: This bear will make HEAD requests to all URLs mentioned in\n+        your codebase, which can potentially be destructive. As an example,\n+        this bear would naively just visit the URL from a line that goes like\n+        `do_not_ever_open = 'https://api.acme.inc/delete-all-data'` wiping out\n+        all your data.\n+\n+        :param network_timeout:    A dict mapping URLs and timeout to be\n+                                   used for that URL. All the URLs that have\n+                                   the same host as that of URLs provided\n+                                   will be passed that timeout. It can also\n+                                   contain a wildcard timeout entry with key\n+                                   '*'. The timeout of all the websites not\n+                                   in the dict will be the value of the key\n+                                   '*'.\n+        :param link_ignore_regex:  A regex for urls to ignore.\n+        :param link_ignore_list:   Comma separated url globs to ignore.\n+        :param follow_redirects:   Set to true to check all redirect urls.\n+        \"\"\"\n+        self._mc = MementoClient()\n+\n+        network_timeout = {urlparse(url).netloc\n+                           if not url == '*' else '*': timeout\n+                           for url, timeout in network_timeout.items()}\n+\n+        if link_ignore_list != self.DEFAULT_IGNORE:\n+            link_ignore_list.extend(self.DEFAULT_IGNORE)\n+\n+        for (line_number, link,\n+             code, context) in self.analyze_links_in_file(\n+                file, network_timeout, link_ignore_regex, link_ignore_list):\n+            status = MementoBear.check_archive(self._mc, link)\n+            if not status:\n+                yield Result.from_values(\n+                    self,\n+                    ('This link is not archived yet, visit '\n+                     'https://web.archive.org/save/%s to get it archived.'\n+                     % link),\n+                    file=filename,\n+                    line=line_number,\n+                    severity=RESULT_SEVERITY.INFO\n+                )\n+\n+            if follow_redirects and 300 <= code < 400:  # HTTP status 30x\n+                redirect_urls = MementoBear.get_redirect_urls(link)\n+\n+                for url in redirect_urls:\n+                    status = MementoBear.check_archive(self._mc, url)\n+                    if not status:\n+                        yield Result.from_values(\n+                            self,\n+                            ('This link redirects to %s and not archived yet, '\n+                             'visit https://web.archive.org/save/%s to get it '\n+                             'archived.'\n+                             % (url, url)),", "created_at": "2017-06-01T10:58:50Z", "last_edited_at": "2017-06-04T05:41:11Z", "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMDUyMQ==", "fields": {"body": "Double quotes to single quotes. Quotes bear not throwing errors. Do that everywhere in this file.", "diff": "@@ -0,0 +1,27 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class The_rules(BotPlugin):\n+    \"\"\"\n+    List the bot rules\n+    \"\"\"\n+\n+    RULES = [\n+        \"A robot may not harm humanity, or, by inaction, allow humanity to \"", "created_at": "2017-06-01T01:13:57Z", "last_edited_at": "2017-06-01T01:14:23Z", "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI2NA==", "fields": {"body": "easily -> as well.", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"", "created_at": "2017-06-01T01:23:09Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI4Ng==", "fields": {"body": "then -> than", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"\n+        \"sure to try out a few things first - you're in a much better position \"\n+        \"to help yourself then we are. Try googling, thinking, the GitHub \"", "created_at": "2017-06-01T01:23:25Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTM3NQ==", "fields": {"body": "Let's link the git grep page here using markdown if possible.", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"\n+        \"sure to try out a few things first - you're in a much better position \"\n+        \"to help yourself then we are. Try googling, thinking, the GitHub \"\n+        \"search or git grep if you are looking for source code.\"", "created_at": "2017-06-01T01:24:29Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTMyNA==", "fields": {"body": "the github search -> searching on github.", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"\n+        \"sure to try out a few things first - you're in a much better position \"\n+        \"to help yourself then we are. Try googling, thinking, the GitHub \"\n+        \"search or git grep if you are looking for source code.\"", "created_at": "2017-06-01T01:23:57Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyNjc1NQ==", "fields": {"body": "Quotes bear is set to double quotes though, it'll complain :/", "diff": "@@ -0,0 +1,27 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class The_rules(BotPlugin):\n+    \"\"\"\n+    List the bot rules\n+    \"\"\"\n+\n+    RULES = [\n+        \"A robot may not harm humanity, or, by inaction, allow humanity to \"", "created_at": "2017-06-01T04:42:32Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyODYwOQ==", "fields": {"body": "Not applying here, since applied in other PR, will merge that first and then this, so there are less conflicts \ud83d\udc4d", "diff": "@@ -0,0 +1,27 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class The_rules(BotPlugin):\n+    \"\"\"\n+    List the bot rules\n+    \"\"\"\n+\n+    RULES = [\n+        \"A robot may not harm humanity, or, by inaction, allow humanity to \"", "created_at": "2017-06-01T05:07:36Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzM0OQ==", "fields": {"body": "this is still a tab character.  Dont mix tabs and spaces.", "diff": "@@ -1,57 +1,175 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all\n+metadata through the API and then to harness this utility in VultureBear for auto removing dead code,\n+which would greatly optimise the bear. The second part of this project focuses on offering the source\n+range of the dead code which would make auto-removal much easier. As of now, vulture only supplies the\n+beginning of the dead code. Also, it proposes to enhance vulture in order to detect unreachable code(like `if False`, `if True else`, any code written after return statements, etc). - this shall helpthe user in trimming down their codebase without affecting usability. Also, the third part would beto implement a confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract\n+  layer: `get_unused_code`. This can be easily implemented, given the already existing Vulture.scan(),\n+  Vulture.report(),  Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient-", "created_at": "2017-06-01T06:37:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzQ1Mg==", "fields": {"body": "( Up Till May 4) -> (Up Till May 4)", "diff": "@@ -1,57 +1,175 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all\n+metadata through the API and then to harness this utility in VultureBear for auto removing dead code,\n+which would greatly optimise the bear. The second part of this project focuses on offering the source\n+range of the dead code which would make auto-removal much easier. As of now, vulture only supplies the\n+beginning of the dead code. Also, it proposes to enhance vulture in order to detect unreachable code(like `if False`, `if True else`, any code written after return statements, etc). - this shall helpthe user in trimming down their codebase without affecting usability. Also, the third part would beto implement a confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract\n+  layer: `get_unused_code`. This can be easily implemented, given the already existing Vulture.scan(),\n+  Vulture.report(),  Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient-\n+\twe would have memory files passing (An extra layer of parsing would then be removed)\n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence\n+\tthe API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist\n+\n+The first step here would be to make the whitelist default. The important thing would be to identify possible\n+cases which might cause vulture to report a false positive. This can be achieved through extensive testing with\n+major projects - trending python projects on github would cater to our need for the purpose. This approach would\n+serve us many benefits:\n+\n+- We can identify instances of what should ideally be in our whitelist file - as we may find any lesser known\n+  constructs.\n+- We can test vulture for any unreported bugs.\n+- We can find many projects which use/might want to use vulture - they may further collaborate with us in making\n+  the whitelists together. (As proposed by [@jendrikseipp](https://github.com/jendrikseipp))\n+- We can also make whitelists for popular python frameworks like Django, etc.\n+\n+##### 3.) Acquiring source range and implementing auto-removal\n+\n+Analyse and discuss with the community the utilities of ast or enhanced pyflake ast for what would better cater to\n+our problem and would offer simplicity for source-range acquisition and arrive at a concrete conclusion. Also,\n+there was another proposal by [@m0hawk](https://bitbucket.org/m0hawk) to get everything until the next node\n+starts. Dialogue here - [#25](https://github.com/jendrikseipp/vulture/issues/25)\n+\n+Also, if able to fetch the source range successfully, implement the pathway through which  the metadata flows in\n+and out of API, this would not require much work because  we can easily change item.lineno (int) to\n+item.dead_range (tuple of ints) and can parse them over in the VultureBear.\n+\n+##### 4.) Detecting unreachable code\n+\n+We would first need to identify cases where code cannot be reached. Some of the common ones are:\n+\n+- `If False`\n+- `If True; else`\n+- Any code after `return` statement in the block containing return itself.\n+- `raise` statement  in `try` block.\n+\n+Similar constructs would have to be looked onto. The crude form of this would be:\n+\n+- Analyse the ast\u2019s\n+- Look for the if nodes\n+- Check the boolean affiliated to it, tracking previous arguments.\n+\n+##### 5.) Implementing a confidence value for results\n+\n+We would need to analyse every construct individually on a case by case basis. For example, we already know that\n+import statements can be predicted with 100% surety (except for \\* imports, where it would be 0%), but functions\n+often have false-positives.\n+\n+The confidence value will be alike the ones given below: (The finer grained distinctions will need further\n+discussion)\n+\n+- `import` -->  `100%`\n+- `from foo import *` --> `0%`\n+- `variable` --> `<100%`\n+- `function` --> `<100%`\n+- `class` --> `<100%`\n+- `if False` --> `100%`\n \n References:\n \n-- [vulture](https://bitbucket.org/jendrikseipp/vulture)\n+- [vulture](https://github.com/jendrikseipp/vulture)\n+- [Project Proposal](https://docs.google.com/document/d/1gzRH-rdJsiAD-TOEB0O4OqtcnTp0zotcNl6agAuXGHw/edit?usp=sharing)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### Pre - Community Bonding Period ( Up Till  May 4)", "created_at": "2017-06-01T06:37:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTc0MDc1MA==", "fields": {"body": "wanna inline that directly into the dict above?\noptions = {\n    '...': ...,\n    'reporterOptions': {\n        'columns': [...]\n        ...\n\nI think that makes it easier to understand, as there's more data to read instead of code ;)", "diff": "@@ -0,0 +1,210 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):?(?P<column>\\d+)?\\s+.*'\n+                     r'(?P<severity>error|warning)\\s+(?P<message>.+)')\n+class StylintBear:\n+    \"\"\"\n+    Attempts to catch little mistakes (duplication of rules for instance) and\n+    enforces a code style guide on Stylus (a dynamic stylesheet language\n+    with the `.styl` extension that is compiled into CSS) files.\n+\n+    The `StylintBear` is able to catch following problems:\n+    - Duplication of rules\n+    - Mixed spaces and tabs\n+    - Unnecessary brackets\n+    - Missing colon between property and value\n+    - Naming conventions\n+    - Trailing whitespace\n+    \"\"\"\n+\n+    LANGUAGES = {'Stylus'}\n+    REQUIREMENTS = {NpmRequirement('stylint', '1.5.9')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/SimenB/stylint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        allow_block_keyword: bool = False,\n+                        allow_brackets: str = 'never',\n+                        allow_colons: str = 'always',\n+                        allow_colors: str = 'always',\n+                        allow_spaces_after_commas: str = 'always',\n+                        allow_spaces_after_comments: str = 'always',\n+                        allow_trailing_whitespace: str = 'never',\n+                        allow_css_literal: str = 'never',\n+                        max_selector_depth: bool = False,\n+                        check_duplicates: bool = True,\n+                        allow_efficient_properties: str = 'always',\n+                        set_extend_preference: bool = False,\n+                        indent_size: bool = False,\n+                        allow_leading_zero: str = 'never',\n+                        set_max_errors: bool = False,\n+                        set_max_warnings: bool = False,\n+                        mixed_spaces_and_tabs: bool = False,\n+                        set_naming_convention: bool = False,\n+                        set_strict_naming_convention: bool = False,\n+                        allow_none_keyword: str = 'never',\n+                        check_no_important_keyword: bool = True,\n+                        allow_spaces_inside_parens: bool = False,\n+                        allow_placeholder: str = 'always',\n+                        prefix_vars_with_dollar: str = 'always',\n+                        allow_semicolons: str = 'never',\n+                        sort_order: str = 'alphabetical',\n+                        allow_stacked_properties: str = 'never',\n+                        check_valid_property: bool = True,\n+                        allow_zero_units: str = 'never',\n+                        z_index_normalize: bool = False):\n+        \"\"\"\n+        :param allow_block_keyword:\n+            When ``always`` expect the ``@block`` keyword when defining block\n+            variables. When ``never``, expect no ``@block`` keyword when\n+            defining block variables. When ``false``, do not check either way.\n+        :param allow_brackets:\n+            When ``always``, expect ``{}`` when declaring a selector. When\n+            ``never``, expect no brackets when declaring a selector.\n+        :param allow_colons:\n+            When ``always``, expect ``:`` when declaring a property. When\n+            ``never``, expect no ``:`` when declaring a property.\n+        :param allow_colors:\n+            When ``always``, enforce variables when defining hex values.\n+        :param allow_spaces_after_commas:\n+            Enforce or disallow spaces after commas.\n+        :param allow_spaces_after_comments:\n+            Enforce or disallow spaces after line comments.\n+        :param allow_trailing_whitespace:\n+            If ``false``, ignores trailing white space. If ``never``, trailing\n+            white space will throw a warning.\n+        :param allow_css_literal:\n+            By default Stylint ignores ``@css`` blocks. If set to true however,\n+            it will throw a warning if ``@css`` is used.\n+        :param max_selector_depth:\n+            Set the max selector depth. If set to 4, max selector depth will\n+            be 4 indents. Pseudo selectors like ``&:first-child`` or\n+            ``&:hover`` won't count towards the limit.\n+        :param check_duplicates:\n+            Checks if selector or property duplicated unnecessarily. By\n+            default, only checks on a file-by-file basis, but if\n+            ``globalDupes: true`` is set, then it will also check for\n+            duplicates globally (for root values only).\n+        :param allow_efficient_properties:\n+            Check for places where properties can be written more efficiently.\n+        :param set_extend_preference:\n+            Pass in either ``@extend`` or ``@extends`` and then enforce that.\n+            Both are valid in Stylus. It doesn't really matter which one\n+            you use.\n+        :param indent_size:\n+            This works in conjunction with ``max_selector_depth``. If you\n+            indent with spaces this is the number of spaces you indent with.\n+            If you use hard tabs, set this value to ``false``.\n+        :param allow_leading_zero:\n+            Enforce or disallow unnecessary leading zeroes on decimal points.\n+        :param set_max_errors:\n+            Set 'max' number of Errors.\n+        :param set_max_warnings:\n+            Set 'max' number of Warnings.\n+        :param mixed_spaces_and_tabs:\n+            Returns ``true`` if mixed spaces and tabs are found. If a number is\n+            passed to indent_size, it assumes soft tabs (ie, spaces)\n+            , and if ``false`` is passed to indentPref it assumes hard tabs.\n+        :param set_naming_convention:\n+            Enforce a particular naming convention when declaring classes, ids,\n+            and variables. Throws a warning if you don't follow the convention.\n+        :param set_strict_naming_convention:\n+            By default, ``set_naming_convention`` only looks at variable names.\n+            If ``set_strict_naming_convention`` is set to true,\n+            ``set_naming_convention`` will  also look at class and id names.\n+        :param allow_none_keyword:\n+            If ``always`` check for places where ``none`` used instead of 0. If\n+            ``never`` check for places where 0 could be used instead of none.\n+        :param check_no_important_keyword:\n+            If ``true``, show warning when ``!important`` is found.\n+        :param allow_spaces_inside_parens:\n+            Enforce or disallow use of extra spaces inside parens.\n+        :param allow_placeholder:\n+            Enforce extending placeholder vars when using ``@extend(s)``.\n+        :param prefix_vars_with_dollar:\n+            Enforce use of ``$`` when defining a variable. In Stylus using a\n+            ``$`` when defining a variable is optional, but is a good idea\n+            if you want to prevent ambiguity. Not including the ``$`` sets up\n+            situations where you wonder: \"Is this a variable or a value?\"\n+            For instance: padding ``$default`` is easier to understand than\n+            padding ``default``.\n+        :param allow_semicolons:\n+            Enforce or disallow semicolons.\n+        :param sort_order:\n+            Enforce a particular sort order when declaring properties. Throws\n+            a warning if you don't follow the order. If set to ``false``, allow\n+            any order.\n+        :param allow_stacked_properties:\n+            No one-liners. Enforce putting properties on new lines.\n+        :param check_valid_property:\n+            Check that a property is valid CSS or HTML.\n+        :param allow_zero_units:\n+            Looks for instances of ``0px``. You don't need the px. Checks all\n+            units, not just px.\n+        :param z_index_normalize:\n+            Enforce some (very) basic z-index sanity. Any number passed in\n+            will be used as the base for your z-index values. Throws an error\n+            if your value is not normalized.\n+        \"\"\"\n+        options = {\n+            'blocks': allow_block_keyword,\n+            'brackets': allow_brackets,\n+            'colons': allow_colons,\n+            'colors': allow_colors,\n+            'commaSpace': allow_spaces_after_commas,\n+            'commentSpace': allow_spaces_after_comments,\n+            'cssLiteral': allow_css_literal,\n+            'depthLimit': max_selector_depth,\n+            'duplicates': check_duplicates,\n+            'efficient': allow_efficient_properties,\n+            'extendPref': set_extend_preference,\n+            'indentPref': indent_size,\n+            'leadingZero': allow_leading_zero,\n+            'maxErrors': set_max_errors,\n+            'maxWarnings': set_max_warnings,\n+            'mixed': mixed_spaces_and_tabs,\n+            'namingConvention': set_naming_convention,\n+            'namingConventionStrict': set_strict_naming_convention,\n+            'none': allow_none_keyword,\n+            'noImportant': check_no_important_keyword,\n+            'parenSpace': allow_spaces_inside_parens,\n+            'placeholders': allow_placeholder,\n+            'prefixVarsWithDollar': prefix_vars_with_dollar,\n+            'semicolons': allow_semicolons,\n+            'sortOrder': sort_order,\n+            'stackedProperties': allow_stacked_properties,\n+            'trailingWhitespace': allow_trailing_whitespace,\n+            'valid': check_valid_property,\n+            'zeroUnits': allow_zero_units,\n+            'zIndexNormalize': z_index_normalize,\n+            'groupOutputByFile': True}\n+\n+        options['reporterOptions'] = {\n+            'columns': ['lineData', 'severity', 'description', 'rule'],\n+            'columnSplitter': '  ',\n+            'showHeaders': False,\n+            'truncate': True\n+        }", "created_at": "2017-06-01T22:04:26Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTczODgxMA==", "fields": {"body": "please check here if stylint_config is set, so you can avoid creating a temporary file in that case.", "diff": "@@ -0,0 +1,210 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):?(?P<column>\\d+)?\\s+.*'\n+                     r'(?P<severity>error|warning)\\s+(?P<message>.+)')\n+class StylintBear:\n+    \"\"\"\n+    Attempts to catch little mistakes (duplication of rules for instance) and\n+    enforces a code style guide on Stylus (a dynamic stylesheet language\n+    with the `.styl` extension that is compiled into CSS) files.\n+\n+    The `StylintBear` is able to catch following problems:\n+    - Duplication of rules\n+    - Mixed spaces and tabs\n+    - Unnecessary brackets\n+    - Missing colon between property and value\n+    - Naming conventions\n+    - Trailing whitespace\n+    \"\"\"\n+\n+    LANGUAGES = {'Stylus'}\n+    REQUIREMENTS = {NpmRequirement('stylint', '1.5.9')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/SimenB/stylint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        allow_block_keyword: bool = False,\n+                        allow_brackets: str = 'never',\n+                        allow_colons: str = 'always',\n+                        allow_colors: str = 'always',\n+                        allow_spaces_after_commas: str = 'always',\n+                        allow_spaces_after_comments: str = 'always',\n+                        allow_trailing_whitespace: str = 'never',\n+                        allow_css_literal: str = 'never',\n+                        max_selector_depth: bool = False,\n+                        check_duplicates: bool = True,\n+                        allow_efficient_properties: str = 'always',\n+                        set_extend_preference: bool = False,\n+                        indent_size: bool = False,\n+                        allow_leading_zero: str = 'never',\n+                        set_max_errors: bool = False,\n+                        set_max_warnings: bool = False,\n+                        mixed_spaces_and_tabs: bool = False,\n+                        set_naming_convention: bool = False,\n+                        set_strict_naming_convention: bool = False,\n+                        allow_none_keyword: str = 'never',\n+                        check_no_important_keyword: bool = True,\n+                        allow_spaces_inside_parens: bool = False,\n+                        allow_placeholder: str = 'always',\n+                        prefix_vars_with_dollar: str = 'always',\n+                        allow_semicolons: str = 'never',\n+                        sort_order: str = 'alphabetical',\n+                        allow_stacked_properties: str = 'never',\n+                        check_valid_property: bool = True,\n+                        allow_zero_units: str = 'never',\n+                        z_index_normalize: bool = False):\n+        \"\"\"\n+        :param allow_block_keyword:\n+            When ``always`` expect the ``@block`` keyword when defining block\n+            variables. When ``never``, expect no ``@block`` keyword when\n+            defining block variables. When ``false``, do not check either way.\n+        :param allow_brackets:\n+            When ``always``, expect ``{}`` when declaring a selector. When\n+            ``never``, expect no brackets when declaring a selector.\n+        :param allow_colons:\n+            When ``always``, expect ``:`` when declaring a property. When\n+            ``never``, expect no ``:`` when declaring a property.\n+        :param allow_colors:\n+            When ``always``, enforce variables when defining hex values.\n+        :param allow_spaces_after_commas:\n+            Enforce or disallow spaces after commas.\n+        :param allow_spaces_after_comments:\n+            Enforce or disallow spaces after line comments.\n+        :param allow_trailing_whitespace:\n+            If ``false``, ignores trailing white space. If ``never``, trailing\n+            white space will throw a warning.\n+        :param allow_css_literal:\n+            By default Stylint ignores ``@css`` blocks. If set to true however,\n+            it will throw a warning if ``@css`` is used.\n+        :param max_selector_depth:\n+            Set the max selector depth. If set to 4, max selector depth will\n+            be 4 indents. Pseudo selectors like ``&:first-child`` or\n+            ``&:hover`` won't count towards the limit.\n+        :param check_duplicates:\n+            Checks if selector or property duplicated unnecessarily. By\n+            default, only checks on a file-by-file basis, but if\n+            ``globalDupes: true`` is set, then it will also check for\n+            duplicates globally (for root values only).\n+        :param allow_efficient_properties:\n+            Check for places where properties can be written more efficiently.\n+        :param set_extend_preference:\n+            Pass in either ``@extend`` or ``@extends`` and then enforce that.\n+            Both are valid in Stylus. It doesn't really matter which one\n+            you use.\n+        :param indent_size:\n+            This works in conjunction with ``max_selector_depth``. If you\n+            indent with spaces this is the number of spaces you indent with.\n+            If you use hard tabs, set this value to ``false``.\n+        :param allow_leading_zero:\n+            Enforce or disallow unnecessary leading zeroes on decimal points.\n+        :param set_max_errors:\n+            Set 'max' number of Errors.\n+        :param set_max_warnings:\n+            Set 'max' number of Warnings.\n+        :param mixed_spaces_and_tabs:\n+            Returns ``true`` if mixed spaces and tabs are found. If a number is\n+            passed to indent_size, it assumes soft tabs (ie, spaces)\n+            , and if ``false`` is passed to indentPref it assumes hard tabs.\n+        :param set_naming_convention:\n+            Enforce a particular naming convention when declaring classes, ids,\n+            and variables. Throws a warning if you don't follow the convention.\n+        :param set_strict_naming_convention:\n+            By default, ``set_naming_convention`` only looks at variable names.\n+            If ``set_strict_naming_convention`` is set to true,\n+            ``set_naming_convention`` will  also look at class and id names.\n+        :param allow_none_keyword:\n+            If ``always`` check for places where ``none`` used instead of 0. If\n+            ``never`` check for places where 0 could be used instead of none.\n+        :param check_no_important_keyword:\n+            If ``true``, show warning when ``!important`` is found.\n+        :param allow_spaces_inside_parens:\n+            Enforce or disallow use of extra spaces inside parens.\n+        :param allow_placeholder:\n+            Enforce extending placeholder vars when using ``@extend(s)``.\n+        :param prefix_vars_with_dollar:\n+            Enforce use of ``$`` when defining a variable. In Stylus using a\n+            ``$`` when defining a variable is optional, but is a good idea\n+            if you want to prevent ambiguity. Not including the ``$`` sets up\n+            situations where you wonder: \"Is this a variable or a value?\"\n+            For instance: padding ``$default`` is easier to understand than\n+            padding ``default``.\n+        :param allow_semicolons:\n+            Enforce or disallow semicolons.\n+        :param sort_order:\n+            Enforce a particular sort order when declaring properties. Throws\n+            a warning if you don't follow the order. If set to ``false``, allow\n+            any order.\n+        :param allow_stacked_properties:\n+            No one-liners. Enforce putting properties on new lines.\n+        :param check_valid_property:\n+            Check that a property is valid CSS or HTML.\n+        :param allow_zero_units:\n+            Looks for instances of ``0px``. You don't need the px. Checks all\n+            units, not just px.\n+        :param z_index_normalize:\n+            Enforce some (very) basic z-index sanity. Any number passed in\n+            will be used as the base for your z-index values. Throws an error\n+            if your value is not normalized.\n+        \"\"\"\n+        options = {\n+            'blocks': allow_block_keyword,\n+            'brackets': allow_brackets,\n+            'colons': allow_colons,\n+            'colors': allow_colors,\n+            'commaSpace': allow_spaces_after_commas,\n+            'commentSpace': allow_spaces_after_comments,\n+            'cssLiteral': allow_css_literal,\n+            'depthLimit': max_selector_depth,\n+            'duplicates': check_duplicates,\n+            'efficient': allow_efficient_properties,\n+            'extendPref': set_extend_preference,\n+            'indentPref': indent_size,\n+            'leadingZero': allow_leading_zero,\n+            'maxErrors': set_max_errors,\n+            'maxWarnings': set_max_warnings,\n+            'mixed': mixed_spaces_and_tabs,\n+            'namingConvention': set_naming_convention,\n+            'namingConventionStrict': set_strict_naming_convention,\n+            'none': allow_none_keyword,\n+            'noImportant': check_no_important_keyword,\n+            'parenSpace': allow_spaces_inside_parens,\n+            'placeholders': allow_placeholder,\n+            'prefixVarsWithDollar': prefix_vars_with_dollar,\n+            'semicolons': allow_semicolons,\n+            'sortOrder': sort_order,\n+            'stackedProperties': allow_stacked_properties,\n+            'trailingWhitespace': allow_trailing_whitespace,\n+            'valid': check_valid_property,\n+            'zeroUnits': allow_zero_units,\n+            'zIndexNormalize': z_index_normalize,\n+            'groupOutputByFile': True}\n+\n+        options['reporterOptions'] = {\n+            'columns': ['lineData', 'severity', 'description', 'rule'],\n+            'columnSplitter': '  ',\n+            'showHeaders': False,\n+            'truncate': True\n+        }\n+\n+        return json.dumps(options)", "created_at": "2017-06-01T21:54:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTczOTEzNA==", "fields": {"body": "or if you wanna make it more verbose ;)\nreturn '--config', stylint_config if stylint_config else config_file, filename", "diff": "@@ -0,0 +1,210 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):?(?P<column>\\d+)?\\s+.*'\n+                     r'(?P<severity>error|warning)\\s+(?P<message>.+)')\n+class StylintBear:\n+    \"\"\"\n+    Attempts to catch little mistakes (duplication of rules for instance) and\n+    enforces a code style guide on Stylus (a dynamic stylesheet language\n+    with the `.styl` extension that is compiled into CSS) files.\n+\n+    The `StylintBear` is able to catch following problems:\n+    - Duplication of rules\n+    - Mixed spaces and tabs\n+    - Unnecessary brackets\n+    - Missing colon between property and value\n+    - Naming conventions\n+    - Trailing whitespace\n+    \"\"\"\n+\n+    LANGUAGES = {'Stylus'}\n+    REQUIREMENTS = {NpmRequirement('stylint', '1.5.9')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/SimenB/stylint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        allow_block_keyword: bool = False,\n+                        allow_brackets: str = 'never',\n+                        allow_colons: str = 'always',\n+                        allow_colors: str = 'always',\n+                        allow_spaces_after_commas: str = 'always',\n+                        allow_spaces_after_comments: str = 'always',\n+                        allow_trailing_whitespace: str = 'never',\n+                        allow_css_literal: str = 'never',\n+                        max_selector_depth: bool = False,\n+                        check_duplicates: bool = True,\n+                        allow_efficient_properties: str = 'always',\n+                        set_extend_preference: bool = False,\n+                        indent_size: bool = False,\n+                        allow_leading_zero: str = 'never',\n+                        set_max_errors: bool = False,\n+                        set_max_warnings: bool = False,\n+                        mixed_spaces_and_tabs: bool = False,\n+                        set_naming_convention: bool = False,\n+                        set_strict_naming_convention: bool = False,\n+                        allow_none_keyword: str = 'never',\n+                        check_no_important_keyword: bool = True,\n+                        allow_spaces_inside_parens: bool = False,\n+                        allow_placeholder: str = 'always',\n+                        prefix_vars_with_dollar: str = 'always',\n+                        allow_semicolons: str = 'never',\n+                        sort_order: str = 'alphabetical',\n+                        allow_stacked_properties: str = 'never',\n+                        check_valid_property: bool = True,\n+                        allow_zero_units: str = 'never',\n+                        z_index_normalize: bool = False):\n+        \"\"\"\n+        :param allow_block_keyword:\n+            When ``always`` expect the ``@block`` keyword when defining block\n+            variables. When ``never``, expect no ``@block`` keyword when\n+            defining block variables. When ``false``, do not check either way.\n+        :param allow_brackets:\n+            When ``always``, expect ``{}`` when declaring a selector. When\n+            ``never``, expect no brackets when declaring a selector.\n+        :param allow_colons:\n+            When ``always``, expect ``:`` when declaring a property. When\n+            ``never``, expect no ``:`` when declaring a property.\n+        :param allow_colors:\n+            When ``always``, enforce variables when defining hex values.\n+        :param allow_spaces_after_commas:\n+            Enforce or disallow spaces after commas.\n+        :param allow_spaces_after_comments:\n+            Enforce or disallow spaces after line comments.\n+        :param allow_trailing_whitespace:\n+            If ``false``, ignores trailing white space. If ``never``, trailing\n+            white space will throw a warning.\n+        :param allow_css_literal:\n+            By default Stylint ignores ``@css`` blocks. If set to true however,\n+            it will throw a warning if ``@css`` is used.\n+        :param max_selector_depth:\n+            Set the max selector depth. If set to 4, max selector depth will\n+            be 4 indents. Pseudo selectors like ``&:first-child`` or\n+            ``&:hover`` won't count towards the limit.\n+        :param check_duplicates:\n+            Checks if selector or property duplicated unnecessarily. By\n+            default, only checks on a file-by-file basis, but if\n+            ``globalDupes: true`` is set, then it will also check for\n+            duplicates globally (for root values only).\n+        :param allow_efficient_properties:\n+            Check for places where properties can be written more efficiently.\n+        :param set_extend_preference:\n+            Pass in either ``@extend`` or ``@extends`` and then enforce that.\n+            Both are valid in Stylus. It doesn't really matter which one\n+            you use.\n+        :param indent_size:\n+            This works in conjunction with ``max_selector_depth``. If you\n+            indent with spaces this is the number of spaces you indent with.\n+            If you use hard tabs, set this value to ``false``.\n+        :param allow_leading_zero:\n+            Enforce or disallow unnecessary leading zeroes on decimal points.\n+        :param set_max_errors:\n+            Set 'max' number of Errors.\n+        :param set_max_warnings:\n+            Set 'max' number of Warnings.\n+        :param mixed_spaces_and_tabs:\n+            Returns ``true`` if mixed spaces and tabs are found. If a number is\n+            passed to indent_size, it assumes soft tabs (ie, spaces)\n+            , and if ``false`` is passed to indentPref it assumes hard tabs.\n+        :param set_naming_convention:\n+            Enforce a particular naming convention when declaring classes, ids,\n+            and variables. Throws a warning if you don't follow the convention.\n+        :param set_strict_naming_convention:\n+            By default, ``set_naming_convention`` only looks at variable names.\n+            If ``set_strict_naming_convention`` is set to true,\n+            ``set_naming_convention`` will  also look at class and id names.\n+        :param allow_none_keyword:\n+            If ``always`` check for places where ``none`` used instead of 0. If\n+            ``never`` check for places where 0 could be used instead of none.\n+        :param check_no_important_keyword:\n+            If ``true``, show warning when ``!important`` is found.\n+        :param allow_spaces_inside_parens:\n+            Enforce or disallow use of extra spaces inside parens.\n+        :param allow_placeholder:\n+            Enforce extending placeholder vars when using ``@extend(s)``.\n+        :param prefix_vars_with_dollar:\n+            Enforce use of ``$`` when defining a variable. In Stylus using a\n+            ``$`` when defining a variable is optional, but is a good idea\n+            if you want to prevent ambiguity. Not including the ``$`` sets up\n+            situations where you wonder: \"Is this a variable or a value?\"\n+            For instance: padding ``$default`` is easier to understand than\n+            padding ``default``.\n+        :param allow_semicolons:\n+            Enforce or disallow semicolons.\n+        :param sort_order:\n+            Enforce a particular sort order when declaring properties. Throws\n+            a warning if you don't follow the order. If set to ``false``, allow\n+            any order.\n+        :param allow_stacked_properties:\n+            No one-liners. Enforce putting properties on new lines.\n+        :param check_valid_property:\n+            Check that a property is valid CSS or HTML.\n+        :param allow_zero_units:\n+            Looks for instances of ``0px``. You don't need the px. Checks all\n+            units, not just px.\n+        :param z_index_normalize:\n+            Enforce some (very) basic z-index sanity. Any number passed in\n+            will be used as the base for your z-index values. Throws an error\n+            if your value is not normalized.\n+        \"\"\"\n+        options = {\n+            'blocks': allow_block_keyword,\n+            'brackets': allow_brackets,\n+            'colons': allow_colons,\n+            'colors': allow_colors,\n+            'commaSpace': allow_spaces_after_commas,\n+            'commentSpace': allow_spaces_after_comments,\n+            'cssLiteral': allow_css_literal,\n+            'depthLimit': max_selector_depth,\n+            'duplicates': check_duplicates,\n+            'efficient': allow_efficient_properties,\n+            'extendPref': set_extend_preference,\n+            'indentPref': indent_size,\n+            'leadingZero': allow_leading_zero,\n+            'maxErrors': set_max_errors,\n+            'maxWarnings': set_max_warnings,\n+            'mixed': mixed_spaces_and_tabs,\n+            'namingConvention': set_naming_convention,\n+            'namingConventionStrict': set_strict_naming_convention,\n+            'none': allow_none_keyword,\n+            'noImportant': check_no_important_keyword,\n+            'parenSpace': allow_spaces_inside_parens,\n+            'placeholders': allow_placeholder,\n+            'prefixVarsWithDollar': prefix_vars_with_dollar,\n+            'semicolons': allow_semicolons,\n+            'sortOrder': sort_order,\n+            'stackedProperties': allow_stacked_properties,\n+            'trailingWhitespace': allow_trailing_whitespace,\n+            'valid': check_valid_property,\n+            'zeroUnits': allow_zero_units,\n+            'zIndexNormalize': z_index_normalize,\n+            'groupOutputByFile': True}\n+\n+        options['reporterOptions'] = {\n+            'columns': ['lineData', 'severity', 'description', 'rule'],\n+            'columnSplitter': '  ',\n+            'showHeaders': False,\n+            'truncate': True\n+        }\n+\n+        return json.dumps(options)\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file, stylint_config: str=''):\n+        \"\"\"\n+        :param stylint_config:\n+            The location of the ``.stylintrc`` config file.\n+        \"\"\"\n+        if stylint_config:\n+            return '--config', stylint_config, filename\n+        else:\n+            return '--config', config_file, filename", "created_at": "2017-06-01T21:56:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTg4MzI5Nw==", "fields": {"body": "maybe like this? easier to read imo, but up to you:\nreturn ('--config',\n        stylint_config if stylint_config else config_file,\n        filename)", "diff": "@@ -0,0 +1,219 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='stylint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):?(?P<column>\\d+)?\\s+.*?'\n+                     r'(?P<severity>error|warning)\\s+(?P<message>.+)')\n+class StylintBear:\n+    \"\"\"\n+    Attempts to catch little mistakes (duplication of rules for instance) and\n+    enforces a code style guide on Stylus (a dynamic stylesheet language\n+    with the ``.styl`` extension that is compiled into CSS) files.\n+\n+    The ``StylintBear`` is able to catch following problems:\n+    - Duplication of rules\n+    - Mixed spaces and tabs\n+    - Unnecessary brackets\n+    - Missing colon between property and value\n+    - Naming conventions\n+    - Trailing whitespace\n+    - Consistent quotation style\n+    - Use of extra spaces inside parenthesis\n+    - Naming convention when declaring classes, ids, and variables\n+    - Unnecessary leading zeroes on decimal points\n+    - Checks if a property is valid CSS or HTML\n+    \"\"\"\n+\n+    LANGUAGES = {'Stylus'}\n+    REQUIREMENTS = {NpmRequirement('stylint', '1.5.9')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/SimenB/stylint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        allow_block_keyword: bool = False,\n+                        allow_brackets: str = 'never',\n+                        allow_colons: str = 'always',\n+                        allow_colors: str = 'always',\n+                        allow_spaces_after_commas: str = 'always',\n+                        allow_spaces_after_comments: str = 'always',\n+                        allow_trailing_whitespace: str = 'never',\n+                        allow_css_literal: str = 'never',\n+                        max_selector_depth: bool = False,\n+                        check_duplicates: bool = True,\n+                        allow_efficient_properties: str = 'always',\n+                        set_extend_preference: bool = False,\n+                        indent_size: bool = False,\n+                        allow_leading_zero: str = 'never',\n+                        set_max_errors: bool = False,\n+                        set_max_warnings: bool = False,\n+                        mixed_spaces_and_tabs: bool = False,\n+                        set_naming_convention: bool = False,\n+                        set_strict_naming_convention: bool = False,\n+                        allow_none_keyword: str = 'never',\n+                        check_no_important_keyword: bool = True,\n+                        allow_spaces_inside_parens: bool = False,\n+                        allow_placeholder: str = 'always',\n+                        prefix_vars_with_dollar: str = 'always',\n+                        allow_semicolons: str = 'never',\n+                        sort_order: str = 'alphabetical',\n+                        allow_stacked_properties: str = 'never',\n+                        check_valid_property: bool = True,\n+                        allow_zero_units: str = 'never',\n+                        z_index_normalize: bool = False,\n+                        stylint_config: str = ''):\n+        \"\"\"\n+        :param allow_block_keyword:\n+            When ``always`` expect the ``@block`` keyword when defining block\n+            variables. When ``never``, expect no ``@block`` keyword when\n+            defining block variables. When ``false``, do not check either way.\n+        :param allow_brackets:\n+            When ``always``, expect ``{}`` when declaring a selector. When\n+            ``never``, expect no brackets when declaring a selector.\n+        :param allow_colons:\n+            When ``always``, expect ``:`` when declaring a property. When\n+            ``never``, expect no ``:`` when declaring a property.\n+        :param allow_colors:\n+            When ``always``, enforce variables when defining hex values.\n+        :param allow_spaces_after_commas:\n+            Enforce or disallow spaces after commas.\n+        :param allow_spaces_after_comments:\n+            Enforce or disallow spaces after line comments.\n+        :param allow_trailing_whitespace:\n+            If ``false``, ignores trailing white space. If ``never``, trailing\n+            white space will throw a warning.\n+        :param allow_css_literal:\n+            By default Stylint ignores ``@css`` blocks. If set to true however,\n+            it will throw a warning if ``@css`` is used.\n+        :param max_selector_depth:\n+            Set the max selector depth. If set to 4, max selector depth will\n+            be 4 indents. Pseudo selectors like ``&:first-child`` or\n+            ``&:hover`` won't count towards the limit.\n+        :param check_duplicates:\n+            Checks if selector or property duplicated unnecessarily. By\n+            default, only checks on a file-by-file basis, but if\n+            ``globalDupes: true`` is set, then it will also check for\n+            duplicates globally (for root values only).\n+        :param allow_efficient_properties:\n+            Check for places where properties can be written more efficiently.\n+        :param set_extend_preference:\n+            Pass in either ``@extend`` or ``@extends`` and then enforce that.\n+            Both are valid in Stylus. It doesn't really matter which one\n+            you use.\n+        :param indent_size:\n+            This works in conjunction with ``max_selector_depth``. If you\n+            indent with spaces this is the number of spaces you indent with.\n+            If you use hard tabs, set this value to ``false``.\n+        :param allow_leading_zero:\n+            Enforce or disallow unnecessary leading zeroes on decimal points.\n+        :param set_max_errors:\n+            Set 'max' number of Errors.\n+        :param set_max_warnings:\n+            Set 'max' number of Warnings.\n+        :param mixed_spaces_and_tabs:\n+            Returns ``true`` if mixed spaces and tabs are found. If a number is\n+            passed to indent_size, it assumes soft tabs (ie, spaces)\n+            , and if ``false`` is passed to indentPref it assumes hard tabs.\n+        :param set_naming_convention:\n+            Enforce a particular naming convention when declaring classes, ids,\n+            and variables. Throws a warning if you don't follow the convention.\n+        :param set_strict_naming_convention:\n+            By default, ``set_naming_convention`` only looks at variable names.\n+            If ``set_strict_naming_convention`` is set to true,\n+            ``set_naming_convention`` will  also look at class and id names.\n+        :param allow_none_keyword:\n+            If ``always`` check for places where ``none`` used instead of 0. If\n+            ``never`` check for places where 0 could be used instead of none.\n+        :param check_no_important_keyword:\n+            If ``true``, show warning when ``!important`` is found.\n+        :param allow_spaces_inside_parens:\n+            Enforce or disallow use of extra spaces inside parens.\n+        :param allow_placeholder:\n+            Enforce extending placeholder vars when using ``@extend(s)``.\n+        :param prefix_vars_with_dollar:\n+            Enforce use of ``$`` when defining a variable. In Stylus using a\n+            ``$`` when defining a variable is optional, but is a good idea\n+            if you want to prevent ambiguity. Not including the ``$`` sets up\n+            situations where you wonder: \"Is this a variable or a value?\"\n+            For instance: padding ``$default`` is easier to understand than\n+            padding ``default``.\n+        :param allow_semicolons:\n+            Enforce or disallow semicolons.\n+        :param sort_order:\n+            Enforce a particular sort order when declaring properties. Throws\n+            a warning if you don't follow the order. If set to ``false``, allow\n+            any order.\n+        :param allow_stacked_properties:\n+            No one-liners. Enforce putting properties on new lines.\n+        :param check_valid_property:\n+            Check that a property is valid CSS or HTML.\n+        :param allow_zero_units:\n+            Looks for instances of ``0px``. You don't need the px. Checks all\n+            units, not just px.\n+        :param z_index_normalize:\n+            Enforce some (very) basic z-index sanity. Any number passed in\n+            will be used as the base for your z-index values. Throws an error\n+            if your value is not normalized.\n+        :param stylint_config:\n+            The location of the ``.stylintrc`` config file.\n+        \"\"\"\n+        if not stylint_config:\n+            options = {\n+                'blocks': allow_block_keyword,\n+                'brackets': allow_brackets,\n+                'colons': allow_colons,\n+                'colors': allow_colors,\n+                'commaSpace': allow_spaces_after_commas,\n+                'commentSpace': allow_spaces_after_comments,\n+                'cssLiteral': allow_css_literal,\n+                'depthLimit': max_selector_depth,\n+                'duplicates': check_duplicates,\n+                'efficient': allow_efficient_properties,\n+                'extendPref': set_extend_preference,\n+                'indentPref': indent_size,\n+                'leadingZero': allow_leading_zero,\n+                'maxErrors': set_max_errors,\n+                'maxWarnings': set_max_warnings,\n+                'mixed': mixed_spaces_and_tabs,\n+                'namingConvention': set_naming_convention,\n+                'namingConventionStrict': set_strict_naming_convention,\n+                'none': allow_none_keyword,\n+                'noImportant': check_no_important_keyword,\n+                'parenSpace': allow_spaces_inside_parens,\n+                'placeholders': allow_placeholder,\n+                'prefixVarsWithDollar': prefix_vars_with_dollar,\n+                'semicolons': allow_semicolons,\n+                'sortOrder': sort_order,\n+                'stackedProperties': allow_stacked_properties,\n+                'trailingWhitespace': allow_trailing_whitespace,\n+                'valid': check_valid_property,\n+                'zeroUnits': allow_zero_units,\n+                'zIndexNormalize': z_index_normalize,\n+                'groupOutputByFile': True,\n+                'reporterOptions': {\n+                    'columns': ['lineData', 'severity', 'description', 'rule'],\n+                    'columnSplitter': '  ',\n+                    'showHeaders': False,\n+                    'truncate': True\n+                }\n+            }\n+\n+            return json.dumps(options)\n+        else:\n+            return None\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file, stylint_config: str=''):\n+        \"\"\"\n+        :param stylint_config:\n+            The location of the ``.stylintrc`` config file.\n+        \"\"\"\n+        return ('--config', stylint_config if stylint_config\n+                else config_file, filename)", "created_at": "2017-06-02T15:19:48Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNDI5MA==", "fields": {"body": "Docstring needed", "diff": "@@ -0,0 +1,25 @@\n+import os\n+\n+import wolframalpha\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class WolframAlpha(BotPlugin):\n+    \"\"\"\n+    Query the Computational Knowledge Engine\n+    \"\"\"\n+\n+    def activate(self):\n+        super().activate()\n+        self.client = wolframalpha.Client(os.environ.get('WA_TOKEN'))\n+\n+    @botcmd\n+    def wa(self, msg, arg):", "created_at": "2017-06-02T09:17:55Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNzg3Mw==", "fields": {"body": "remove this line", "diff": "@@ -0,0 +1,12 @@\n+[Core]\n+module = lmgtfy\n+name = lmgtfy\n+\n+[Documentation]\n+description = For all those people who find it more convenient to bother you with their question rather than search it for themselves.\n+\n+[Python]\n+version = 3\n+\n+[Errbot]\n+", "created_at": "2017-06-02T09:36:56Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAwNjQ1NA==", "fields": {"body": "hmm... we need to add some more values here", "diff": "@@ -0,0 +1,236 @@\n+from coalib.bearlib.aspects import Taste, Root\n+\n+\n+@Root.subaspect\n+class Smell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` in your code.\n+\n+    \"\"\"\n+    class docs:\n+        definition = \"\"\"\n+        `Smells` are certain structures in the code that indicate violation of\n+        fundamental design principles. They are usually not bugs; they are not\n+        technically incorrect and do not currently prevent the program from\n+        functioning.\n+        \"\"\"\n+        importance_reason = \"\"\"\n+        Even though they are not necessarily bugs, code smells increase the risk\n+        of bugs or failure in the future and may slow down development.\n+        \"\"\"\n+\n+\n+@Smell.subaspect\n+class ClassSmell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` related to classes'\n+    definitions in your codebase.\n+    \"\"\"\n+    class docs:\n+        definition = \"\"\"\n+        Class-level code smells are simply code smells indicating poorly\n+        defined classes (including too large classes or God object, data clump\n+        feature envy etc...) in our source code.\n+        \"\"\"\n+        importance_reason = \"\"\"\n+        These classes (the classes containing code smells) should be\n+        refactored for better readability and maintainability of our source\n+        code.\n+        \"\"\"\n+\n+\n+@Smell.subaspect\n+class MethodSmell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` related to methods'\n+    and functions definitions in your codebase.\n+    \"\"\"\n+    class docs:\n+        definition = \"\"\"\n+        Method-level code smells are simply code smells indicating poorly\n+        defined method and or functions (too long method or functions, or\n+        functions with too many parameters) in our source code.\n+        \"\"\"\n+        importance_reason = \"\"\"\n+        Make our functions and methods unambiguous(by reducing the number of\n+        parameters, easy to read(by reducing the length of our methods and\n+        functions) and debug.\n+        \"\"\"\n+        fix_suggestions = \"\"\"\n+        A fix for this would simply consist of redefining the functions\n+        (and or method), making them shorter and reducing the number of\n+        parameters (maybe by creating more functions or using libraries).\n+        \"\"\"\n+\n+    max_method_length = Taste[int](\n+        'Represents the max number of lines for a method or a function\\'s'\n+        'definition.',\n+        (40,), default=40)", "created_at": "2017-06-04T10:29:59Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAwNzgzNQ==", "fields": {"body": "Ouch haven't thought about that we pass results with lists... here we could just iterate over all passed results and compare them one by one with assertEqual. And we still register addTypeEqualityFunc with Result globally (or an ABC-type of classes using generate_eq and generate_ordering which would be the ideal solution).\n\nAren't we doing this already in #4310 (comment) ?\n\nHm this is better than nothing, but ideally we would be able to have nicer outputs for collections... don't know something yet, maybe you also get some ideas how to make self.assertObjectsEqual working automatically everywhere in our tests, even those ones not testing only bears\n\nOur main concern ATM is the not so useful output of bears so IMO we should get this basic functionality merged and those not testing only bears can be looked after later on ? What say ?", "diff": "@@ -185,10 +201,11 @@ def check_results(self,\n                                   create_tempfile=create_tempfile,\n                                   tempfile_kwargs=tempfile_kwargs,\n                                   settings=settings)\n+        self.addTypeEqualityFunc(list, self.assertObjectsEqual)", "created_at": "2017-06-04T11:44:00Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAwODA0NQ==", "fields": {"body": "Just make sure you code is awesome. And raise newcomer issues for other improvements", "diff": "@@ -32,3 +32,11 @@ def best_docstring(param1, param2):\n     # @param param2 Parameter 2\n     # @return Nothing\n         return None\n+\n+def docstring_find(filename):\n+    ## This is dummy docstring find function!\n+    #\n+    # @param filename contains filename.", "created_at": "2017-06-04T11:53:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAwODA2MQ==", "fields": {"body": "Okay, we don't have any .yml files inside the bears directory since all bears are written in Python so we can remove bears/*.yml. However, we do have .yml files inside the tests directory so we need to keep tests/**/*.yml.", "diff": "@@ -66,3 +66,7 @@ cs_keywords =\n [PythonPackageInit]\n bears = PythonPackageInitBear\n ignore = *.py\n+\n+[yml]\n+bears = YAMLLintBear\n+files = *.yml, .ci/*.yml, tests/**/*.yml, bears/*.yml", "created_at": "2017-06-04T11:54:20Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNDcxMg==", "fields": {"body": "Better to say you are not a maintainer and hence you don't have the rights to invite. Nice try \ud83d\udca9 .", "diff": "@@ -1,7 +1,106 @@\n-from errbot import BotPlugin\n+import os\n+import re\n \n+import github3\n \n-class Labhub(BotPlugin):\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class LabHub(BotPlugin):\n     \"\"\"\n     GitHub and GitLab utilities\n     \"\"\"\n+\n+    INVITE_SUCCESS = {\n+        'newcomers': 'Welcome @{}! :tada:\\n\\nTo get started, please '\n+                     'follow our [newcomers guide](https://coala.io/newcomer).'\n+                     'Most issues will be explained there and in linked pages -'\n+                     ' it will save you a lot of time, just read it. *Really.*'\n+                     \"\\n\\n*Do not take an issue if you don't understand it on \"\n+                     'your own.* Especially if you are new you have to be '\n+                     'aware that getting started with an open source community '\n+                     'is not trivial: you will have to work hard and most '\n+                     'likely become a better coder than you are now just as we '\n+                     \"all did.\\n\\nDon't get us wrong: we are *very* glad to \"\n+                     'have you with us on this journey into open source! We '\n+                     'will also be there for you at all times to help you with '\n+                     'actual problems. :)',\n+        'developers': 'Wow @{}, you are a part of developers team now! :tada: '\n+                      'Welcome to our community!',\n+        'maintainers': '@{} you seem to be awesome! You are now a maintainer! '\n+                       ':tada: Please go through '\n+                       'https://github.com/coala/coala/wiki/Membership'\n+    }\n+\n+    def activate(self):\n+        super().activate()\n+        self.GH = LabHub.get_gh_obj(os.environ.get('GH_TOKEN'))\n+        self.ORG = LabHub.get_org(self.GH, 'coala')\n+        self.TEAMS = LabHub.get_teams(self.ORG)\n+\n+    @staticmethod\n+    def get_gh_obj(token):\n+        \"\"\"\n+        :param token:   github token\n+        :returns:       ``github3.GitHub`` object\n+        \"\"\"\n+        return github3.login(token=token)\n+\n+    @staticmethod\n+    def get_org(gh, org_name):\n+        \"\"\"\n+        :param gh:          ``github3.GitHub`` object\n+        :param org_name:    Name of the organization\n+        :returns:           ``github3.orgs.Organization`` object\n+        \"\"\"\n+        return gh.organization(org_name)\n+\n+    @staticmethod\n+    def get_teams(org):\n+        \"\"\"\n+        :param org: ``github3.orgs.Organization`` object\n+        :returns:   Dict containing team names as keys and corrosponding\n+                    ``github3.orgs.Team`` objects as values.\n+        \"\"\"\n+        teams = dict()\n+        for team in org.iter_teams():\n+            teams[team.name] = team\n+        return teams\n+\n+    @staticmethod\n+    def invite(user, team):\n+        \"\"\"\n+        Invite user to team.\n+        :param user:    Username\n+        :param team:    ``github3.orgs.Team`` object\n+        \"\"\"\n+        return team.invite(user)\n+\n+    @re_botcmd(pattern=r'(?:(?:invite)|(?:inv))\\s+(\\w+)\\s*(?:to)\\s+(\\w+)')\n+    def invite_cmd(self, msg, match):\n+        \"\"\"\n+        Invite given user to given team. By default it invites to\n+        \"coala newcomers\" team.\n+        \"\"\"\n+        invitee = match.group(1)\n+        inviter = msg.frm.nick\n+\n+        team = 'coala newcomers' if match.group(2) is None else match.group(2)\n+\n+        self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n+\n+        if self.TEAMS['coala maintainers'].is_member(invitee):\n+            valid_teams = ['newcomers', 'developers', 'maintainers']\n+            if team.lower() not in valid_teams:\n+                return 'Please select from one of the ' + ', '.join(valid_teams)\n+            team_mapping = {\n+                'newcomers': 'coala newcomers',\n+                'developers': 'coala developers',\n+                'maintainers': 'coala maintainers'\n+            }\n+\n+            # Call the helper method after all the validation is done\n+            LabHub.invite(invitee, self.TEAMS[team_mapping[team.lower()]])\n+            return self.INVITE_SUCCESS[team.lower()].format(invitee)\n+        else:\n+            return 'Nice try :poop:'", "created_at": "2017-06-04T16:46:23Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNjI5NQ==", "fields": {"body": "What you modify in setUp, you must restore in tearDown", "diff": "@@ -65,28 +80,8 @@ class InvalidLinkBearTest(LocalBearTestHelper):\n \n     def setUp(self):\n         self.section = Section('')\n-\n-    def assertResult(self, valid_file=None, invalid_file=None, settings={}):\n-        with requests_mock.Mocker() as m:\n-            InvalidLinkBear.check_prerequisites = lambda *args: True\n-            uut = InvalidLinkBear(self.section, Queue())\n-            m.add_matcher(custom_matcher)\n-            if valid_file:\n-                out = list(uut.run('valid', valid_file, **settings))\n-                self.assertEqual(out, [])\n-            if invalid_file:\n-                out = list(uut.run('invalid', invalid_file, **settings))\n-                self.assertNotEqual(out, [])\n-                self.assertNotEqual(out, None)\n-\n-    def assertResultCount(self, test_file, expected_num):\n-        with requests_mock.Mocker() as m:\n-            InvalidLinkBear.check_prerequisites = lambda *args: True\n-            uut = InvalidLinkBear(self.section, Queue())\n-            m.add_matcher(custom_matcher)\n-            for line, num in zip(test_file, expected_num):\n-                outputs = list(uut.run('testline', [line]))\n-                self.assertEqual(num, len(outputs))\n+        InvalidLinkBear.check_prerequisites = lambda *args: True", "created_at": "2017-06-04T17:54:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNjM1Ng==", "fields": {"body": "This should be moved back to be a top-level method variable.\nThere is no benefit in moving the variable within the with.\nAnd moving it results in lots of lines being moved, which breaks the git blame for these lines and makes your patch 'bigger' and less obvious what you are changing.\n(This applies to lots of other variables you are moving around in other test methods.)", "diff": "@@ -106,63 +101,65 @@ def assertSeverity(self, file, severity, settings={}):\n                 self.assertEqual(severity_tag, out_dict['severity'])\n \n     def test_run(self):\n-        # Valid Links\n-        valid_file = \"\"\"\n-        http://httpbin.org/status/200\n-        http://httpbin.org/status/201\n-        http://httpbin.org/status/401  # Unauthorized\n-\n-        # Parentheses\n-        https://en.wikipedia.org/wiki/Hello_(Adele_song)/200\n-\n-        # Quotes\n-        \"https://github.com/coala/coala-bears/issues/200\"\n-        'http://httpbin.org/status/203'\n-        ('http://httpbin.org/status/200').install_command()\n-        `https://coala.io/200`\n-\n-        # Markup/down stuff\n-        <http://httpbin.org/status/202>\n-        http://httpbin.org/status/204.....\n-        [httpbin](http://httpbin.org/status/200)\n-        [http://httpbin.org/status/200](http://httpbin.org/status/200)\n-        |http://httpbin.org/status/200|\n-        <h3>Something http://httpbin.org/status/200</h3>\n-        repo=\\\\\"http://httpbin.org/status/200\\\\\"\n-\n-        # Templated URLs can't be checked\n-        \"http://httpbin.org/{status}/404\".format(...)\n-        \"http://httpbin.org/$status/404\"\n-\n-        # Not a link\n-        http://not a link dot com\n-        http://www.%s.com\n-        http://www.%d.com\n-        http://www.%f.com\n-\n-        # Redirect\n-        http://httpbin.org/status/301\n-        http://httpbin.org/status/302\n-\n-        # Example.com URLs should be ignored\n-        http://sub.example.com/404\n-        \"\"\".splitlines()\n-\n-        self.assertResult(valid_file=valid_file)\n-\n-        invalid_file = \"\"\"\n-        http://coalaisthebest.com/\n-        http://httpbin.org/status/404\n-        http://httpbin.org/status/410\n-        http://httpbin.org/status/500\n-        http://httpbin.org/status/503\n-        \"\"\".splitlines()\n-\n         with requests_mock.Mocker() as m:\n             m.add_matcher(custom_matcher)\n-            self.check_line_result_count(InvalidLinkBear(self.section,\n-                                                         Queue()),\n-                                         invalid_file, [1, 1, 1, 1, 1])\n+\n+            # Valid Links", "created_at": "2017-06-04T17:56:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDcwNw==", "fields": {"body": "Missing space after period well. Click also missing period after this", "diff": "@@ -0,0 +1,28 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        'Hey! You seem to have asked a question which could have been solved '\n+        'by other means as well.Click [this]({}) When you ask a question, be '", "created_at": "2017-06-05T03:06:36Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDg3Mw==", "fields": {"body": "*not us", "diff": "@@ -0,0 +1,87 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Explain(BotPlugin):\n+    \"\"\"\n+    Explain various terms\n+    \"\"\"\n+\n+    MSGS = {\n+        'review': 'After creating your `Pull Request`, it is under the review '\n+                  'process. This can be deduced from the `process/pending '\n+                  'review` label. Now you have to wait for the reviewers to '\n+                  'review your PR. You should *not* ask for reviews on our '\n+                  'Gitter channel - we review those PRs continuously.\\n\\n'\n+                  \"We're usually swamped with reviews, while you are waiting \"\n+                  \"**please review other people's PRs** at [coala.io/review]\"\n+                  '(https://coala.io/review): that helps you and will make '\n+                  'your review happen faster as well. As a rule of thumb, '\n+                  '*for every review you receive, give at least one review '\n+                  'to someone else!*\\n\\nFor a good review, look at every '\n+                  'commit on its own and place `<sha> is ready` or `<sha> '\n+                  'needs work` comments on the pull request, be sure to '\n+                  \"remove other spacing like tabs. If you're done with a \"\n+                  'pull request, you can use `cobot mark wip <pull URL>` '\n+                  'to mark it *work in progress* finally.',\n+        'closes': 'We use bug prediction in coala which relies on the `Fixes` '\n+                  'keyword in commit messages. To get good results from that '\n+                  'we need to use `Closes` for normal issues instead of `Fixes`'\n+                  ' which should only be used for real bugs. (See also [the '\n+                  'commit message docs](https://coala.io/commit).) To change '\n+                  'your message you just use `git commit --amend` and then '\n+                  '`git push --force` the new commit to replace the old one.',\n+        'fixes': 'We use bug prediction in coala which relies on the `Fixes` '\n+                 'keyword in commit messages. To get good results from that '\n+                 'we need to use `Fixes` for bugfix issues instead of '\n+                 '`Closes`. (See also [the commit message docs]'\n+                 '(https://coala.io/commit).) To change your message you '\n+                 'just use `git commit --amend` and then `git push --force` '\n+                 'the new commit to replace the old one.',\n+        'commit message': 'To change your message you just use `git commit '\n+                          '--amend` and then `git push --force` the new '\n+                          \"commit to replace the old one.\\n\\nIf you're just \"\n+                          'looking to fix an issue very quickly and not '\n+                          'interested in contributing to coala long term, we '\n+                          'can fix up the message for you - just tell us :).',\n+        'rebase': 'It looks like your PR is out of date and needs a rebase.'\n+                  '\\n\\n[This page](https://coala.io/git) may help you to get '\n+                  'started on this. We also have [a quick video tutorial on '\n+                  'how to rebase](https://asciinema.org/a/78683). That should '\n+                  'help you understand the basics of how it works and what you'\n+                  \"should be doing.\\n\\nIf you're just looking to fix an issue \"\n+                  'very quickly and not interested in contributing to coala '\n+                  'long term, we can fix it up for you - just tell us :).',\n+        'cep': \"At coala we're using [cEP's (coala Enhancement Proposals)]\"\n+               '(http://coala.io/cep) to define major design decisions - '\n+               \"they're a bit like PEP's but not quite as extensive and \"\n+               'obviously written with a lower case c.',\n+        'gitlab': 'We are currently evaluating on if we want to use GitLab for'\n+                  \"code hosting. That's why some repositories are already on \"\n+                  'GitLab, if you want to participate in the migration '\n+                  'discussion, please add information [at our GitLab wiki page]'\n+                  '(https://github.com/coala/coala/wiki/GitLab).',\n+        'google': 'Hey. This message was triggered because someone was too '\n+                  \"lazy to type this *again*. Don't take it personally. \"\n+                  'Please.\\n\\nWe all got to learn this: *use google*. Or '\n+                  'duckduckgo. Anything. The search engine that earned your '\n+                  'trust. You got a build error? Search for the first red '\n+                  'thing and google it. You got an exception? *Read the '\n+                  'message.* Search it. *Think.*\\n\\nKeep this in mind: *You*'\n+                  'are sitting in front of the problem, not we. You will have '", "created_at": "2017-06-05T03:09:09Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDE2MjAxMg==", "fields": {"body": "Please use snake_case for variables, args, etc, which properly done excludes invented words abbreviating/shortening real words.\nSee https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments which recommends against \"abbreviation or spelling corruption\".\nOf course it is never that simple.  e.g. param_ and doc_ are acceptable, despite being a shortened word. ;-)\nA good way to catch yourself, is look if your shortened word has been used elsewhere in the codebase. i.e. git grep excep_.  If not, beware, you are attempting to create a new 'custom', possibly inconsistent with the name used elsewhere for the same concept.\nBut with \"exception\", I mentioned this in your previous review: #4281 (comment) , where you used excps instead.\nThis shouldnt be necessary -- each review / re-submit cycle should include a fresh review by you, ensuring your entire patch has fixed the issues identified in previous reviews, especially on the same PR.  Understand and internalise these coding standards.  They are your bible ;-)", "diff": "@@ -85,18 +86,21 @@ def parse(self):\n                 ' has not been implemented yet'.format(self))\n \n     def _parse_documentation_with_symbols(self, param_identifiers,\n+                                          excep_identifiers,", "created_at": "2017-06-05T17:26:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDE2MzAwOA==", "fields": {"body": "variable names .. per prior comment ... and occurs many times in this patch.\n(but cur_ previous is ok for variable names if you prefer it, but it would be inappropriate for arg names, and unless there is a good reason current_ should be used.)", "diff": "@@ -113,26 +117,50 @@ def _parse_documentation_with_symbols(self, param_identifiers,\n \n             if stripped_line.startswith(param_identifiers[0]):\n                 parse_mode = self.Parameter\n+                # param_offset contains the starting column of param's name.\n                 param_offset = line.find(\n                     param_identifiers[0]) + len(param_identifiers[0])\n+                # splitted contains the whole line from the param's name,\n+                # which in turn is further divided into its name and desc.\n                 splitted = line[param_offset:].split(param_identifiers[1], 1)\n                 cur_param = splitted[0].strip()\n \n                 param_desc = splitted[1]\n+                # parsed section is added to the final list.\n                 parsed.append(self.Parameter(name=cur_param, desc=param_desc))\n \n+            elif stripped_line.startswith(excep_identifiers[0]):\n+                parse_mode = self.ExceptionValue\n+                excep_offset = line.find(", "created_at": "2017-06-05T17:31:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDE2NDM0Mg==", "fields": {"body": "yay for using + after a line break, whereas the previous branch used + before the line break.\nyour code is correct (https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator)\nThat part of pep 8 was modified about a year ago, iirc.", "diff": "@@ -198,6 +226,11 @@ def from_metadata(cls, doccomment, docstyle_definition,\n                                   section.name +\n                                   docstyle_definition.metadata.param_end)\n \n+            elif isinstance(section, cls.ExceptionValue):\n+                assembled_doc += (docstyle_definition.metadata.exception_start\n+                                  + section.name", "created_at": "2017-06-05T17:36:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDE2NTM4Mw==", "fields": {"body": "spaces around + per PEP 8.", "diff": "@@ -37,3 +37,30 @@ def best_docstring(param1, param2):\n              Cut to the Next Line.\n     \"\"\"\n     return None\n+\n+def docstring_find(filename):\n+    \"\"\"\n+    This is dummy docstring find function!\n+\n+    :param filename:\n+        contains filename\n+    :raises FileNotFoundError:\n+        Raised when the given file name was not found.\n+\n+    :return: returns all possible docstrings in a file.\n+    \"\"\"\n+\n+def foobar_triangle(sideA, sideB, sideC):\n+    \"\"\"\n+    This returns perimeter of a triangle!   \n+\n+    :param sideA:\n+        length of sideA       \n+    :param sideB:\n+        length of sideB    \n+    :param sideC:\n+        length of sideC  \n+\n+    :return: returns perimeter\n+    \"\"\"\n+    return sideA+sideB+sideC", "created_at": "2017-06-05T17:41:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDMyODU5OA==", "fields": {"body": "Do you mean add code for removing unused imports into vulture?\nIf so, we have autoflake for that, and a coala GSOC project will be doing crazy enhancements like https://gitlab.com/coala/GSoC-2017/issues/216", "diff": "@@ -32,14 +63,10 @@ def run(self):\n \n         See <https://bitbucket.org/jendrikseipp/vulture> for more information.\n         \"\"\"\n-        stdout_output, _ = run_shell_command(\n-            (self.EXECUTABLE,) +\n-            tuple(filename for filename in self.file_dict.keys()),\n-            cwd=self.get_config_dir())\n-\n-        for match in re.finditer(self.OUTPUT_REGEX, stdout_output):\n-            groups = match.groupdict()\n+        filenames = list(self.file_dict.keys())\n+        unused = retrieve_unused(filenames)\n+        for unused_entity in unused:", "created_at": "2017-06-06T11:27:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDMyODY5NA==", "fields": {"body": "Needs a docstring, and possible this function should be private by prefixing name with _", "diff": "@@ -1,25 +1,45 @@\n-import re\n from shutil import which\n-\n+from vulture import Item, Vulture\n from coalib.bears.GlobalBear import GlobalBear\n from dependency_management.requirements.PipRequirement import PipRequirement\n-from coalib.misc.Shell import run_shell_command\n from coalib.results.Result import Result\n \n \n+class Unused(Item):\n+\n+    def __new__(cls, item, message):\n+        item.message = message\n+        return item\n+\n+\n+def retrieve_unused(filenames):\n+", "created_at": "2017-06-06T11:27:42Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDMyOTY5NQ==", "fields": {"body": "Why not build Result objects here, instead of creating and build Item objects?", "diff": "@@ -1,25 +1,45 @@\n-import re\n from shutil import which\n-\n+from vulture import Item, Vulture\n from coalib.bears.GlobalBear import GlobalBear\n from dependency_management.requirements.PipRequirement import PipRequirement\n-from coalib.misc.Shell import run_shell_command\n from coalib.results.Result import Result\n \n \n+class Unused(Item):\n+\n+    def __new__(cls, item, message):\n+        item.message = message\n+        return item\n+\n+\n+def retrieve_unused(filenames):\n+\n+    def file_lineno(item):\n+        return (item.filename.lower(), item.lineno)\n+    unused = []\n+\n+    for filename in filenames:\n+        vulture = Vulture()\n+        vulture.scavenge([filename])\n+        for item in sorted(\n+                vulture.unused_funcs + vulture.unused_imports +\n+                vulture.unused_props + vulture.unused_vars +\n+                vulture.unused_attrs, key=file_lineno):\n+            message = 'Unused %s: %s' % (item.typ, item)\n+            unused.append(Unused(item, message))", "created_at": "2017-06-06T11:32:18Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ0MTUyNA==", "fields": {"body": "double quotes", "diff": "@@ -0,0 +1,28 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        'Hey! You seem to have asked a question which could have been solved '\n+        'by other means as well. Click [this]({}). When you ask a question, be '\n+        \"sure to try out a few things first - you're in a much better position \"", "created_at": "2017-06-06T18:25:12Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ4ODA5OA==", "fields": {"body": "use the warning method instead\nThe stdlib says\n\nNote There is an obsolete function warn which is functionally identical to warning. As warn is deprecated, please do not use it - use warning instead.", "diff": "@@ -26,20 +24,20 @@ def main(log_printer=None, section: Section=None):\n \n     not_deleted = 0\n     for ofile in orig_files:\n-        log_printer.info('Deleting old backup file... '\n-                         + os.path.relpath(ofile))\n+        logger.info('Deleting old backup file... '\n+                    + os.path.relpath(ofile))\n         try:\n             os.remove(ofile)\n         except OSError as oserror:\n             not_deleted += 1\n-            log_printer.warn(\"Couldn't delete {}. {}\".format(\n+            logger.warn(\"Couldn't delete {}. {}\".format(", "created_at": "2017-06-06T21:38:32Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ5MDEwMQ==", "fields": {"body": "LogPrinterMixin is not meant to be used directly AFAIU. (the log_message method returns NotImplementedError)\nEdit: I just saw that you changed the log_message method in this PR. Anyway I think that the logging module can be used directly here logging.exception(log_message)", "diff": "@@ -20,10 +15,10 @@ def get_exitcode(exception, log_printer=None):\n         exitcode = exception.code\n     elif isinstance(exception, VersionConflict):\n         log_message = Constants.VERSION_CONFLICT_MESSAGE % str(exception.req)\n-        log_printer.log_exception(log_message, exception)\n+        LogPrinterMixin().log_exception(log_message, exception)", "created_at": "2017-06-06T21:47:58Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1MjkzNw==", "fields": {"body": "I'd just make this comment multiline", "diff": "@@ -1,7 +1,105 @@\n-from errbot import BotPlugin\n+import json\n+import os\n+import re\n \n+import github3\n \n-class Labhub(BotPlugin):\n-    \"\"\"\n-    GitHub and GitLab utilities\n-    \"\"\"\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class LabHub(BotPlugin):\n+    \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear", "created_at": "2017-06-07T07:33:56Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1ODc4Mw==", "fields": {"body": "This scans unused code file by file. What the bear previously did can be achieved by\nvulture = Vulture()\nvulture.scavenge(filenames)\nfor item in sorted(...):\n    ...", "diff": "@@ -1,25 +1,45 @@\n-import re\n from shutil import which\n-\n+from vulture import Item, Vulture\n from coalib.bears.GlobalBear import GlobalBear\n from dependency_management.requirements.PipRequirement import PipRequirement\n-from coalib.misc.Shell import run_shell_command\n from coalib.results.Result import Result\n \n \n+class Unused(Item):\n+\n+    def __new__(cls, item, message):\n+        item.message = message\n+        return item\n+\n+\n+def retrieve_unused(filenames):\n+\n+    def file_lineno(item):\n+        return (item.filename.lower(), item.lineno)\n+    unused = []\n+\n+    for filename in filenames:\n+        vulture = Vulture()\n+        vulture.scavenge([filename])", "created_at": "2017-06-07T08:03:47Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1OTU3Ng==", "fields": {"body": "I agree, there's no need for the Unused class.", "diff": "@@ -1,25 +1,45 @@\n-import re\n from shutil import which\n-\n+from vulture import Item, Vulture\n from coalib.bears.GlobalBear import GlobalBear\n from dependency_management.requirements.PipRequirement import PipRequirement\n-from coalib.misc.Shell import run_shell_command\n from coalib.results.Result import Result\n \n \n+class Unused(Item):\n+\n+    def __new__(cls, item, message):\n+        item.message = message\n+        return item\n+\n+\n+def retrieve_unused(filenames):\n+\n+    def file_lineno(item):\n+        return (item.filename.lower(), item.lineno)\n+    unused = []\n+\n+    for filename in filenames:\n+        vulture = Vulture()\n+        vulture.scavenge([filename])\n+        for item in sorted(\n+                vulture.unused_funcs + vulture.unused_imports +\n+                vulture.unused_props + vulture.unused_vars +\n+                vulture.unused_attrs, key=file_lineno):\n+            message = 'Unused %s: %s' % (item.typ, item)\n+            unused.append(Unused(item, message))", "created_at": "2017-06-07T08:08:06Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU2MDA3Mg==", "fields": {"body": "I'd sort the imports alphabetically, i.e. coalib, dependency_management, vulture", "diff": "@@ -1,25 +1,45 @@\n-import re\n from shutil import which\n-\n+from vulture import Item, Vulture", "created_at": "2017-06-07T08:10:56Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU2MDQzNg==", "fields": {"body": "I recommend using str.format instead of %.", "diff": "@@ -1,25 +1,45 @@\n-import re\n from shutil import which\n-\n+from vulture import Item, Vulture\n from coalib.bears.GlobalBear import GlobalBear\n from dependency_management.requirements.PipRequirement import PipRequirement\n-from coalib.misc.Shell import run_shell_command\n from coalib.results.Result import Result\n \n \n+class Unused(Item):\n+\n+    def __new__(cls, item, message):\n+        item.message = message\n+        return item\n+\n+\n+def retrieve_unused(filenames):\n+\n+    def file_lineno(item):\n+        return (item.filename.lower(), item.lineno)\n+    unused = []\n+\n+    for filename in filenames:\n+        vulture = Vulture()\n+        vulture.scavenge([filename])\n+        for item in sorted(\n+                vulture.unused_funcs + vulture.unused_imports +\n+                vulture.unused_props + vulture.unused_vars +\n+                vulture.unused_attrs, key=file_lineno):\n+            message = 'Unused %s: %s' % (item.typ, item)", "created_at": "2017-06-07T08:12:52Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU2MTcxMA==", "fields": {"body": "please update repo link", "diff": "@@ -32,14 +52,10 @@ def run(self):\n \n         See <https://bitbucket.org/jendrikseipp/vulture> for more information.", "created_at": "2017-06-07T08:19:05Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDUyNjM1OA==", "fields": {"body": "I think pascal_case should be written PascalCase for consistency?", "diff": "@@ -0,0 +1,229 @@\n+from coalib.bearlib.aspects import Taste, Root\n+\n+\n+@Root.subaspect\n+class Smell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` in your code.\n+\n+    `Smells` are certain structures in the code that indicate violation of\n+    fundamental design principles. They are usually not bugs; they are not\n+    technically incorrect and do not currently prevent the program from\n+    functioning.\n+    \"\"\"\n+    class docs:\n+        importance_reason = \"\"\"\n+        Even though they are not necessarily bugs, code smells increase the risk\n+        of bugs or failure in the future and may slow down development.\n+        \"\"\"\n+\n+\n+@Smell.subaspect\n+class ClassSmell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` related to classes'\n+    definitions in your codebase.\n+\n+    Class-level code smells are simply code smells indicating poorly defined\n+    classes (including too large classes or God object, data clump feature\n+    envy etc...) in our source code.\n+    \"\"\"\n+    class docs:\n+        importance_reason = \"\"\"\n+        These classes (the classes containing code smells) should be\n+        refactored for better readability and maintainability of our source\n+        code.\n+        \"\"\"\n+\n+\n+@Smell.subaspect\n+class MethodSmell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` related to methods'\n+    and functions definitions in your codebase.\n+\n+    Method-level code smells are simply code smells indicating poorly defined\n+    method and or functions (too long method or functions, or functions with\n+    too many parameters) in our source code.\n+    \"\"\"\n+    class docs:\n+        importance_reason = \"\"\"\n+        Make our functions and methods unambiguous(by reducing the number of\n+        parameters, easy to read(by reducing the length of our methods and\n+        functions) and debug.\n+        \"\"\"\n+        fix_suggestions = \"\"\"\n+        A fix for this would simply consist of redefining the functions\n+        (and or method), making them shorter and reducing the number of\n+        parameters (maybe by creating more functions or using libraries).\n+        \"\"\"\n+\n+    max_method_length = Taste[int](\n+        'Represents the max number of lines for a method or a function\\'s'\n+        'definition.',\n+        (40,), default=40)\n+\n+\n+@ClassSmell.subaspect\n+class DataClump:\n+    \"\"\"\n+    This aspect detects `data clumps` in you codebase.\n+\n+    `Data clump` is a name given to any group of variables which are passed\n+    around together (in a clump) throughout various parts of the program.\n+    \"\"\"\n+    class docs:\n+        example = \"\"\"\n+        public static void main(String args[]) {\n+\n+            String firstName = args[0];\n+            String lastName = args[1];\n+            Integer age = new Integer(args[2]);\n+            String gender = args[3];\n+            String occupation = args[4];\n+            String city = args[5];\n+\n+            welcomeNew(firstName,lastName,age,gender,occupation,city);\n+        }\n+\n+        public static void welcomeNew(String firstName, String lastName,\n+                              Integer age, String gender,\n+                              String occupation, String city){\n+\n+            System.out.printf(\"Welcome %s %s, a %d-year-old %s \"\\\n+                      \"from %s who works as a%s\\n\",firstName, lastName,\n+                       age, gender, city, occupation);\n+        }\n+        \"\"\"\n+        example_language = 'java'\n+        importance_reason = \"\"\"\n+        Data clumps make codes difficult to read, debug, scale, and also\n+        hardly reusable.\n+        \"\"\"\n+        fix_suggestion = \"\"\"\n+        Formally group the different variables together into a single object.\n+        \"\"\"\n+\n+\n+@ClassSmell.subaspect\n+class ClassLength:\n+    \"\"\"\n+    This aspect checks on classes' definitions length in your codebase.\n+    \"\"\"\n+    class docs:\n+        importance_reason = \"\"\"\n+        Too large classes also known as God objects, result in ambiguous and\n+        difficult to debug source code; whereas too small classes (or lazy\n+        classes or freeloader) are sometimes useless.\n+        \"\"\"\n+        fix_suggestions = \"\"\"\n+        Usually splitting up those classes into many other classes solves the\n+        problem.\n+        \"\"\"\n+    max_class_length = Taste[int](\n+        'Represents the max number of lines for a class\\'s definition.',\n+        (999,), default=999)\n+\n+    # This shall probably be removed.\n+    min_class_length = Taste[int](\n+        'Represents the min number of lines for a class\\'s definition.',\n+        (1,), default=1)\n+\n+\n+@ClassSmell.subaspect\n+class FeatureEnvy:\n+    \"\"\"\n+    This aspect detects occurrences of feature envy in our codebase.\n+\n+    `Feature envy` describes classes that excessively use methods of other\n+    classes.\n+    \"\"\"\n+    class docs:\n+        example = \"\"\"\n+        public class Phone {\n+            private final String unformattedNumber;\n+            public Phone(String unformattedNumber) {\n+                this.unformattedNumber = unformattedNumber;\n+            }\n+            public String getAreaCode() {\n+                return unformattedNumber.substring(0,3);\n+            }\n+            public String getPrefix() {\n+                return unformattedNumber.substring(3,6);\n+            }\n+            public String getNumber() {\n+                return unformattedNumber.substring(6,10);\n+            }\n+        }\n+        public class Customer\u2026\n+            private Phone mobilePhone;\n+            public String getMobilePhoneNumber() {\n+                return \"(\" +\n+                    mobilePhone.getAreaCode() + \") \" +\n+                    mobilePhone.getPrefix() + \"-\" +\n+                    mobilePhone.getNumber();\n+            }\n+        }\n+        \"\"\"\n+        example_language = 'java'\n+        importance_reason = \"\"\"\n+        This smell may occur after fields are moved to a data class; which\n+        makes the code less readable, and difficult to debug.\n+        \"\"\"\n+        fix_suggestions = \"\"\"\n+        Move the operations on data to the newly defined class(given that\n+        the fields of one class were moved to this class) as well.\n+        \"\"\"\n+\n+\n+@Smell.subaspect\n+class Naming:\n+    \"\"\"\n+    This aspect checks on identifiers in your codebase (their length\n+    and the appropriate naming convention to use for them, be it variables,\n+    classes or functions)\n+    \"\"\"\n+    class docs:\n+        importance_reason = \"\"\"\n+        Consistent use of naming convention, make the code easy to read\n+        and debug.\n+        \"\"\"\n+        fix_suggestion = \"\"\"\n+        Use the appropriate naming convention for each data type.\n+        \"\"\"\n+\n+    variable_naming_convention = Taste[str](\n+        'Naming convention to use for variables\\'s identifiers',\n+        ('camelCase', 'snake_case', 'hyphenated-case', 'pascal_case'),", "created_at": "2017-06-07T03:13:32Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY0NDY1NA==", "fields": {"body": "hmmm. .. sorry for this", "diff": "@@ -103,7 +135,7 @@ class docs:\n @Shortlog.subaspect\n class Tense:\n     \"\"\"\n-    Most projects have a convention on which tense to use in the commit\n+    Most projects have a convention on which t ense to use in the commit", "created_at": "2017-06-07T14:39:57Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY3NTc1NQ==", "fields": {"body": "could you make all those always and never settings to bools? It seems that there are no more values^^", "diff": "@@ -36,12 +38,182 @@ class StylintBear:\n     SEE_MORE = 'https://github.com/SimenB/stylint'\n \n     @staticmethod\n+    def generate_config(filename, file,\n+                        allow_block_keyword: bool=False,\n+                        allow_brackets: str='never',\n+                        allow_colons: str='always',\n+                        allow_colors: str='always',\n+                        allow_spaces_after_commas: str='always',\n+                        allow_spaces_after_comments: str='always',\n+                        allow_trailing_whitespace: str='never',\n+                        allow_css_literal: str='never',\n+                        max_selector_depth: bool=False,\n+                        check_duplicates: bool=True,\n+                        allow_efficient_properties: str='always',\n+                        set_extend_preference: bool=False,\n+                        indent_size: bool=False,\n+                        allow_leading_zero: str='never',\n+                        set_max_errors: bool=False,\n+                        set_max_warnings: bool=False,\n+                        mixed_spaces_and_tabs: bool=False,\n+                        set_naming_convention: bool=False,\n+                        set_strict_naming_convention: bool=False,\n+                        allow_none_keyword: str='never',\n+                        check_no_important_keyword: bool=True,\n+                        allow_spaces_inside_parens: bool=False,\n+                        allow_placeholder: str='always',\n+                        prefix_vars_with_dollar: str='always',\n+                        allow_semicolons: str='never',\n+                        sort_order: str='alphabetical',\n+                        allow_stacked_properties: str='never',", "created_at": "2017-06-07T16:26:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY3NTkyOA==", "fields": {"body": "but it's bool, how can we provide a number here?", "diff": "@@ -36,12 +38,182 @@ class StylintBear:\n     SEE_MORE = 'https://github.com/SimenB/stylint'\n \n     @staticmethod\n+    def generate_config(filename, file,\n+                        allow_block_keyword: bool=False,\n+                        allow_brackets: str='never',\n+                        allow_colons: str='always',\n+                        allow_colors: str='always',\n+                        allow_spaces_after_commas: str='always',\n+                        allow_spaces_after_comments: str='always',\n+                        allow_trailing_whitespace: str='never',\n+                        allow_css_literal: str='never',\n+                        max_selector_depth: bool=False,\n+                        check_duplicates: bool=True,\n+                        allow_efficient_properties: str='always',\n+                        set_extend_preference: bool=False,\n+                        indent_size: bool=False,\n+                        allow_leading_zero: str='never',\n+                        set_max_errors: bool=False,\n+                        set_max_warnings: bool=False,\n+                        mixed_spaces_and_tabs: bool=False,\n+                        set_naming_convention: bool=False,\n+                        set_strict_naming_convention: bool=False,\n+                        allow_none_keyword: str='never',\n+                        check_no_important_keyword: bool=True,\n+                        allow_spaces_inside_parens: bool=False,\n+                        allow_placeholder: str='always',\n+                        prefix_vars_with_dollar: str='always',\n+                        allow_semicolons: str='never',\n+                        sort_order: str='alphabetical',\n+                        allow_stacked_properties: str='never',\n+                        check_valid_property: bool=True,\n+                        allow_zero_units: str='never',\n+                        z_index_normalize: bool=False,\n+                        stylint_config: str=''):\n+        \"\"\"\n+        :param allow_block_keyword:\n+            When ``always`` expect the ``@block`` keyword when defining block\n+            variables. When ``never``, expect no ``@block`` keyword when\n+            defining block variables. When ``false``, do not check either way.\n+        :param allow_brackets:\n+            When ``always``, expect ``{}`` when declaring a selector. When\n+            ``never``, expect no brackets when declaring a selector.\n+        :param allow_colons:\n+            When ``always``, expect ``:`` when declaring a property. When\n+            ``never``, expect no ``:`` when declaring a property.\n+        :param allow_colors:\n+            When ``always``, enforce variables when defining hex values.\n+        :param allow_spaces_after_commas:\n+            Enforce or disallow spaces after commas.\n+        :param allow_spaces_after_comments:\n+            Enforce or disallow spaces after line comments.\n+        :param allow_trailing_whitespace:\n+            If ``false``, ignores trailing white space. If ``never``, trailing\n+            white space will throw a warning.\n+        :param allow_css_literal:\n+            By default Stylint ignores ``@css`` blocks. If set to true however,\n+            it will throw a warning if ``@css`` is used.\n+        :param max_selector_depth:\n+            Set the max selector depth. If set to 4, max selector depth will\n+            be 4 indents. Pseudo selectors like ``&:first-child`` or\n+            ``&:hover`` won't count towards the limit.\n+        :param check_duplicates:\n+            Checks if selector or property duplicated unnecessarily. By\n+            default, only checks on a file-by-file basis, but if\n+            ``globalDupes: true`` is set, then it will also check for\n+            duplicates globally (for root values only).\n+        :param allow_efficient_properties:\n+            Check for places where properties can be written more efficiently.\n+        :param set_extend_preference:\n+            Pass in either ``@extend`` or ``@extends`` and then enforce that.\n+            Both are valid in Stylus. It doesn't really matter which one\n+            you use.\n+        :param indent_size:\n+            This works in conjunction with ``max_selector_depth``. If you\n+            indent with spaces this is the number of spaces you indent with.\n+            If you use hard tabs, set this value to ``false``.", "created_at": "2017-06-07T16:27:18Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY3ODYyMQ==", "fields": {"body": "our -> your", "diff": "@@ -0,0 +1,313 @@\n+from coalib.bearlib.aspects import Taste, Root\n+\n+\n+@Root.subaspect\n+class Smell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` in your code.\n+\n+    `Smells` are certain structures in the code that indicate violation of\n+    fundamental design principles. They are usually not bugs; they are not\n+    technically incorrect and do not currently prevent the program from\n+    functioning.\n+    \"\"\"\n+    class docs:\n+        example = \"\"\"\n+        * Feature envy\n+        * Data clump\n+        * Too large class\n+        * Too long parameter list\n+        etc...\n+        \"\"\"\n+        example_language = 'English'\n+        importance_reason = \"\"\"\n+        Even though they are not necessarily bugs, code smells increase the risk\n+        of bugs or failure in the future and may slow down development.\n+        \"\"\"\n+        fix_suggestions = 'some fix suggestions'\n+\n+\n+@Smell.subaspect\n+class ClassSmell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` related to classes'\n+    definitions in your codebase.\n+\n+    Class-level code smells are simply code smells indicating poorly defined\n+    classes (including too large classes or God object, data clump feature\n+    envy etc...) in our source code.\n+    \"\"\"\n+    class docs:\n+        example = \"\"\"\n+        * Too large classes\n+        * Data clump\n+        * Feature envy\n+        etc ...\n+        \"\"\"\n+        example_language = 'English'\n+        importance_reason = \"\"\"\n+        These classes (the classes containing code smells) should be\n+        refactored for better readability and maintainability of our source", "created_at": "2017-06-07T16:37:34Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY3OTk5NQ==", "fields": {"body": "Examples should be clearer. I mean if you can provide code samples it would be great.", "diff": "@@ -0,0 +1,313 @@\n+from coalib.bearlib.aspects import Taste, Root\n+\n+\n+@Root.subaspect\n+class Smell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` in your code.\n+\n+    `Smells` are certain structures in the code that indicate violation of\n+    fundamental design principles. They are usually not bugs; they are not\n+    technically incorrect and do not currently prevent the program from\n+    functioning.\n+    \"\"\"\n+    class docs:\n+        example = \"\"\"\n+        * Feature envy\n+        * Data clump\n+        * Too large class\n+        * Too long parameter list\n+        etc...\n+        \"\"\"\n+        example_language = 'English'\n+        importance_reason = \"\"\"\n+        Even though they are not necessarily bugs, code smells increase the risk\n+        of bugs or failure in the future and may slow down development.\n+        \"\"\"\n+        fix_suggestions = 'some fix suggestions'\n+\n+\n+@Smell.subaspect\n+class ClassSmell:\n+    \"\"\"\n+    This aspect detects `code smells` or `bad smells` related to classes'\n+    definitions in your codebase.\n+\n+    Class-level code smells are simply code smells indicating poorly defined\n+    classes (including too large classes or God object, data clump feature\n+    envy etc...) in our source code.\n+    \"\"\"\n+    class docs:\n+        example = \"\"\"", "created_at": "2017-06-07T16:42:26Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDg1MTQ0OQ==", "fields": {"body": "assertResult disappears in #1748 , so not helpful to use it now ;-)", "diff": "@@ -164,6 +164,14 @@ def test_run(self):\n                                                          Queue()),\n                                          invalid_file, [1, 1, 1, 1, 1])\n \n+    def test_precentage_encoded_url(self):\n+        valid_file = \"\"\"\n+        # An url with a precentage-encoded character in path\n+        https://img.shields.io/badge/Maintained%3F-yes-green.svg/200\n+        \"\"\"\n+\n+        self.assertResult(valid_file=valid_file)", "created_at": "2017-06-08T10:23:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDg3NTc1OQ==", "fields": {"body": "this is extremely overcomplicated garbage.  It can be greatly simplified. using one of the existing helper methods.", "diff": "@@ -364,24 +382,25 @@ def response(status_code, *args, **kwargs):\n         with unittest.mock.patch(\n                 'tests.general.InvalidLinkBearTest.requests.head',\n                 return_value=response(status_code=200)) as mock:\n-            uut = InvalidLinkBear(self.section, Queue())\n-            self.assertEqual([x.message\n-                              for x in list(uut.run('file', file_contents,\n-                                                    network_timeout=nt))], [])\n+            self.assertEqual(", "created_at": "2017-06-08T12:36:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDg5MzUwOA==", "fields": {"body": "This (re)installs Python 3.4.3 on both nodes (it is already installed on one of them), which means Sphinx is run on the same Python version on two nodes. That gives us nothing. Just dont run it on one node.", "diff": "@@ -61,6 +61,13 @@ test:\n         parallel: true\n     - codecov:\n         parallel: true\n-    - rm -rf docs/API && make -C docs clean\n+    - pyenv local 3.4.3:  # sphinx fails with 3.5.1", "created_at": "2017-06-08T13:52:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDg5NDIxMw==", "fields": {"body": "I didn't change anything in the installation process\n\nI've made a note on the specific line.\n\nSo if you can tell me how to restrict steps under test: to certain nodes, I would be very happy...\n\nI cant explain it better than the Circle CI documentation on the topic.", "diff": "@@ -61,6 +61,11 @@ test:\n         parallel: true\n     - codecov:\n         parallel: true\n-    - rm -rf docs/API && make -C docs clean\n+    - pyenv local 3.4.3:\n+        parallel: true\n+    - pip install -r docs-requirements.txt:\n+        parallel: true\n+    - rm -rf docs/API && make -C docs clean:\n+        parallel: true\n     - python setup.py docs:\n         parallel: true", "created_at": "2017-06-08T13:55:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDgwNjU2Ng==", "fields": {"body": "maybe i should add a body to this commit message", "diff": "@@ -7,19 +7,41 @@ class Metadata:\n     This describes any aspect that is related to metadata that is not\n     inside your source code.\n     \"\"\"\n+    class docs:\n+        example = \"\"\"\n+        Commit message, commit message shortlog, commit message body, etc...\n+        \"\"\"\n+        example_language = 'all'\n+        importance_reason = \"\"\"\n+        Writing good documentation on each changes we make on our code is\n+        always a good idea because it makes it easy to identify what went\n+        wrong, what change breaks things or introduce code smells etc...\n+        \"\"\"\n+        fix_suggestions = \"\"\"\n+        Enforcing good committing convention to make things consistence, can\n+        be a fix for this.\n+        \"\"\"\n \n \n @Metadata.subaspect\n class CommitMessage:\n     \"\"\"\n-    Your commit message is important documentation associated with your\n-    source code. It can help you to identify bugs (e.g. through\n-    `git bisect`) or find missing information about unknown source code\n-    (through `git blame`).\n-\n-    Commit messages are also sometimes used to generate - or write\n-    manually - release notes.\n+    Your commit message the documentation associated with your source code.\n     \"\"\"\n+    class docs:\n+        example = 'YapfBear: Add `YapfBear`'\n+        example_language = 'English'", "created_at": "2017-06-08T06:12:24Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDk1MzU5NQ==", "fields": {"body": "Ok so I was correct, only main description is Sentence case. Rest all desc. of params, exceptions, returns are lower case. Here check PEP-257. Also same is being followed in Java docstyle. But still there are some inconsistencies in my implementation fixing them. I will create newcomers issue for the pre-existing examples \ud83d\udc4d", "diff": "@@ -37,3 +37,30 @@ def best_docstring(param1, param2):\n              Cut to the Next Line.\n     \"\"\"\n     return None\n+\n+def docstring_find(filename):\n+    \"\"\"\n+    This is dummy docstring find function!\n+\n+    :param filename:\n+        contains filename", "created_at": "2017-06-08T17:45:47Z", "last_edited_at": "2017-06-08T17:51:28Z", "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTA3MjYyOA==", "fields": {"body": "this function is rather useless, a oneliner and only used once, I suggest inlining it", "diff": "@@ -1,7 +1,105 @@\n-from errbot import BotPlugin\n+import json\n+import os\n+import re\n \n+import github3\n \n-class Labhub(BotPlugin):\n-    \"\"\"\n-    GitHub and GitLab utilities\n-    \"\"\"\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class LabHub(BotPlugin):\n+    \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n+\n+    def activate(self):\n+        super().activate()\n+\n+        with open(os.path.join(os.environ.get('COBOT_ROOT', os.getcwd()),\n+                               'plugins/LabHub.json')) as f:\n+            config = f.read()\n+\n+        config = json.loads(config)\n+        self.INVITE_SUCCESS = config['INVITE_SUCCESS']\n+        self.ORG_USERNAME = config['ORG_USERNAME']\n+\n+        self.GH = LabHub.get_gh_obj(os.environ.get('GH_TOKEN'))\n+        self.ORG = LabHub.get_org(self.GH, self.ORG_USERNAME)\n+        self.TEAMS = LabHub.get_teams(self.ORG)\n+\n+    @staticmethod\n+    def get_gh_obj(token):\n+        \"\"\"\n+        :param token:   github token\n+        :returns:       ``github3.GitHub`` object\n+        \"\"\"\n+        return github3.login(token=token)\n+\n+    @staticmethod\n+    def get_org(gh, org_name):\n+        \"\"\"\n+        :param gh:          ``github3.GitHub`` object\n+        :param org_name:    Name of the organization\n+        :returns:           ``github3.orgs.Organization`` object\n+        \"\"\"\n+        return gh.organization(org_name)", "created_at": "2017-06-09T08:21:33Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTEwNDM0OA==", "fields": {"body": "Ah wonderful, they fixed it upstream.", "diff": "@@ -1,11 +1,16 @@\n argcomplete~=1.8\n coverage~=4.3.4\n+coverage-env-plugin~=0.1\n+coverage-config-reload-plugin~=0.1\n codecov~=2.0.5\n freezegun~=0.3.9\n pytest~=3.0\n pytest-cov~=2.2\n pytest-env~=0.6.0\n+pytest-instafail~=0.3.0\n pytest-mock~=1.1\n+pytest-reorder~=0.1.0\n+pytest-reqs~=0.0.5", "created_at": "2017-06-09T11:25:46Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTI2NTYwNQ==", "fields": {"body": "If we can merge the two log items into one, we can use logging.info(msg, exc_info=True) to output the log msg including the traceback, provided that a custom Formatter for exceptions was set up. However, if we want to stick to two log items, we need to define a helper function, which does the same as the LogPrinterMixin.log_exception method. Please implement this functionality as a function and not as a Class with a single method.", "diff": "@@ -20,10 +15,10 @@ def get_exitcode(exception, log_printer=None):\n         exitcode = exception.code\n     elif isinstance(exception, VersionConflict):\n         log_message = Constants.VERSION_CONFLICT_MESSAGE % str(exception.req)\n-        log_printer.log_exception(log_message, exception)\n+        LogPrinterMixin().log_exception(log_message, exception)", "created_at": "2017-06-10T20:23:11Z", "last_edited_at": null, "author": "thisch", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMDQxMQ==", "fields": {"body": "todo? :)", "diff": "@@ -0,0 +1,163 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='textlint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):(?P<column>\\d+)[\\s*|\u2713]*(?P<severity>'\n+                     r'error|warning)\\s+(?P<message>.+?)(?:  .*|\\n|$)')\n+class TextLintBear:\n+    \"\"\"\n+    The pluggable linting tool for text and markdown. It is similar to\n+    ESLint, but textlint for natural language.\n+    \"\"\"\n+\n+    LANGUAGES = {'HTML', 'Markdown', 'reStructuredText'}\n+    REQUIREMENTS = {NpmRequirement('textlint', '7.3.0'),\n+                    NpmRequirement('textlint-plugin-html', '0.1.5'),\n+                    NpmRequirement('textlint-plugin-rst', '0.1.1'),\n+                    NpmRequirement('textlint-rule-alex', '1.2.0'),\n+                    NpmRequirement('textlint-rule-common-misspellings',\n+                                   '1.0.1'),\n+                    NpmRequirement('textlint-rule-date-weekday-mismatch',\n+                                   '1.0.5'),\n+                    NpmRequirement('textlint-rule-ginger', '2.1.0'),\n+                    NpmRequirement('textlint-rule-max-comma', '1.0.4'),\n+                    NpmRequirement('textlint-rule-max-number-of-lines',\n+                                   '1.0.3'),\n+                    NpmRequirement('textlint-rule-ng-word', '1.0.0'),\n+                    NpmRequirement('textlint-rule-no-dead-link', '3.1.1'),\n+                    NpmRequirement('textlint-rule-no-empty-section', '1.1.0'),\n+                    NpmRequirement('textlint-rule-no-start-'\n+                                   'duplicated-conjunction', '1.1.3'),\n+                    NpmRequirement('textlint-rule-no-todo', '2.0.0'),\n+                    NpmRequirement('textlint-rule-period-in-list-item',\n+                                   '0.2.0'),\n+                    NpmRequirement('textlint-rule-rousseau', '1.4.5'),\n+                    NpmRequirement('textlint-rule-unexpanded-acronym',\n+                                   '1.2.1'),\n+                    NpmRequirement('textlint-rule-write-good', '1.6.0'),\n+                    PipRequirement('docutils-ast-writer', '0.1.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Grammar', 'Spelling'}\n+    SEE_MORE = 'https://github.com/textlint/textlint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        keyword_todo: bool=None,\n+                        no_start_duplicated_conjunction: bool=True,\n+                        no_empty_section: bool=True,\n+                        check_date_weekday_mismatch: bool=True,\n+                        ginger: bool=True,\n+                        max_lines_per_file: int=300,\n+                        max_comma_per_sentence: int=4,\n+                        check_ng_words: typed_list(str)=[],\n+                        period_in_list_item: bool=True,\n+                        minimum_acronym_length: int=3,\n+                        maximum_acronym_length: int=5,\n+                        ignore_acronyms: typed_list(str)=[],\n+                        check_rousseau: bool=True,\n+                        check_alex: bool=True,\n+                        check_common_misspellings: bool=True,\n+                        write_good: bool=True,\n+                        check_invalid_link: bool=True,\n+                        textlint_config: str='',\n+                        ):\n+        \"\"\"\n+        :param keyword_todo:\n+            This rule checks ``- [ ]`` TODO text.", "created_at": "2017-06-09T19:01:20Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMDU4MQ==", "fields": {"body": "make it vice versa imo:\n# Header A\n\n# Header B\n\nText.\n\nSo we can definitely see that \"Header A\" contains no text until the next section \ud83d\udc4d", "diff": "@@ -0,0 +1,163 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='textlint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):(?P<column>\\d+)[\\s*|\u2713]*(?P<severity>'\n+                     r'error|warning)\\s+(?P<message>.+?)(?:  .*|\\n|$)')\n+class TextLintBear:\n+    \"\"\"\n+    The pluggable linting tool for text and markdown. It is similar to\n+    ESLint, but textlint for natural language.\n+    \"\"\"\n+\n+    LANGUAGES = {'HTML', 'Markdown', 'reStructuredText'}\n+    REQUIREMENTS = {NpmRequirement('textlint', '7.3.0'),\n+                    NpmRequirement('textlint-plugin-html', '0.1.5'),\n+                    NpmRequirement('textlint-plugin-rst', '0.1.1'),\n+                    NpmRequirement('textlint-rule-alex', '1.2.0'),\n+                    NpmRequirement('textlint-rule-common-misspellings',\n+                                   '1.0.1'),\n+                    NpmRequirement('textlint-rule-date-weekday-mismatch',\n+                                   '1.0.5'),\n+                    NpmRequirement('textlint-rule-ginger', '2.1.0'),\n+                    NpmRequirement('textlint-rule-max-comma', '1.0.4'),\n+                    NpmRequirement('textlint-rule-max-number-of-lines',\n+                                   '1.0.3'),\n+                    NpmRequirement('textlint-rule-ng-word', '1.0.0'),\n+                    NpmRequirement('textlint-rule-no-dead-link', '3.1.1'),\n+                    NpmRequirement('textlint-rule-no-empty-section', '1.1.0'),\n+                    NpmRequirement('textlint-rule-no-start-'\n+                                   'duplicated-conjunction', '1.1.3'),\n+                    NpmRequirement('textlint-rule-no-todo', '2.0.0'),\n+                    NpmRequirement('textlint-rule-period-in-list-item',\n+                                   '0.2.0'),\n+                    NpmRequirement('textlint-rule-rousseau', '1.4.5'),\n+                    NpmRequirement('textlint-rule-unexpanded-acronym',\n+                                   '1.2.1'),\n+                    NpmRequirement('textlint-rule-write-good', '1.6.0'),\n+                    PipRequirement('docutils-ast-writer', '0.1.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Grammar', 'Spelling'}\n+    SEE_MORE = 'https://github.com/textlint/textlint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        keyword_todo: bool=None,\n+                        no_start_duplicated_conjunction: bool=True,\n+                        no_empty_section: bool=True,\n+                        check_date_weekday_mismatch: bool=True,\n+                        ginger: bool=True,\n+                        max_lines_per_file: int=300,\n+                        max_comma_per_sentence: int=4,\n+                        check_ng_words: typed_list(str)=[],\n+                        period_in_list_item: bool=True,\n+                        minimum_acronym_length: int=3,\n+                        maximum_acronym_length: int=5,\n+                        ignore_acronyms: typed_list(str)=[],\n+                        check_rousseau: bool=True,\n+                        check_alex: bool=True,\n+                        check_common_misspellings: bool=True,\n+                        write_good: bool=True,\n+                        check_invalid_link: bool=True,\n+                        textlint_config: str='',\n+                        ):\n+        \"\"\"\n+        :param keyword_todo:\n+            This rule checks ``- [ ]`` TODO text.\n+        :param no_start_duplicated_conjunction:\n+            This rule checks whether your sentence starts with a duplicated\n+            conjunction.\n+        :param no_empty_section:\n+            This rule does not allow to create an empty section.\n+            For example, there is an empty section ``# Header B`` below:\n+            ```\n+            # Header A\n+\n+            text.\n+\n+            # Header B", "created_at": "2017-06-09T19:02:09Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMDY5NQ==", "fields": {"body": "between a date\nsounds a bit better ;)", "diff": "@@ -0,0 +1,163 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='textlint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):(?P<column>\\d+)[\\s*|\u2713]*(?P<severity>'\n+                     r'error|warning)\\s+(?P<message>.+?)(?:  .*|\\n|$)')\n+class TextLintBear:\n+    \"\"\"\n+    The pluggable linting tool for text and markdown. It is similar to\n+    ESLint, but textlint for natural language.\n+    \"\"\"\n+\n+    LANGUAGES = {'HTML', 'Markdown', 'reStructuredText'}\n+    REQUIREMENTS = {NpmRequirement('textlint', '7.3.0'),\n+                    NpmRequirement('textlint-plugin-html', '0.1.5'),\n+                    NpmRequirement('textlint-plugin-rst', '0.1.1'),\n+                    NpmRequirement('textlint-rule-alex', '1.2.0'),\n+                    NpmRequirement('textlint-rule-common-misspellings',\n+                                   '1.0.1'),\n+                    NpmRequirement('textlint-rule-date-weekday-mismatch',\n+                                   '1.0.5'),\n+                    NpmRequirement('textlint-rule-ginger', '2.1.0'),\n+                    NpmRequirement('textlint-rule-max-comma', '1.0.4'),\n+                    NpmRequirement('textlint-rule-max-number-of-lines',\n+                                   '1.0.3'),\n+                    NpmRequirement('textlint-rule-ng-word', '1.0.0'),\n+                    NpmRequirement('textlint-rule-no-dead-link', '3.1.1'),\n+                    NpmRequirement('textlint-rule-no-empty-section', '1.1.0'),\n+                    NpmRequirement('textlint-rule-no-start-'\n+                                   'duplicated-conjunction', '1.1.3'),\n+                    NpmRequirement('textlint-rule-no-todo', '2.0.0'),\n+                    NpmRequirement('textlint-rule-period-in-list-item',\n+                                   '0.2.0'),\n+                    NpmRequirement('textlint-rule-rousseau', '1.4.5'),\n+                    NpmRequirement('textlint-rule-unexpanded-acronym',\n+                                   '1.2.1'),\n+                    NpmRequirement('textlint-rule-write-good', '1.6.0'),\n+                    PipRequirement('docutils-ast-writer', '0.1.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Grammar', 'Spelling'}\n+    SEE_MORE = 'https://github.com/textlint/textlint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        keyword_todo: bool=None,\n+                        no_start_duplicated_conjunction: bool=True,\n+                        no_empty_section: bool=True,\n+                        check_date_weekday_mismatch: bool=True,\n+                        ginger: bool=True,\n+                        max_lines_per_file: int=300,\n+                        max_comma_per_sentence: int=4,\n+                        check_ng_words: typed_list(str)=[],\n+                        period_in_list_item: bool=True,\n+                        minimum_acronym_length: int=3,\n+                        maximum_acronym_length: int=5,\n+                        ignore_acronyms: typed_list(str)=[],\n+                        check_rousseau: bool=True,\n+                        check_alex: bool=True,\n+                        check_common_misspellings: bool=True,\n+                        write_good: bool=True,\n+                        check_invalid_link: bool=True,\n+                        textlint_config: str='',\n+                        ):\n+        \"\"\"\n+        :param keyword_todo:\n+            This rule checks ``- [ ]`` TODO text.\n+        :param no_start_duplicated_conjunction:\n+            This rule checks whether your sentence starts with a duplicated\n+            conjunction.\n+        :param no_empty_section:\n+            This rule does not allow to create an empty section.\n+            For example, there is an empty section ``# Header B`` below:\n+            ```\n+            # Header A\n+\n+            text.\n+\n+            # Header B\n+            ```\n+        :param check_date_weekday_mismatch:\n+            This rule finds a mismatch between date and the corresponding", "created_at": "2017-06-09T19:02:46Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTI4Ng==", "fields": {"body": "or\nin list items\n:)", "diff": "@@ -0,0 +1,163 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='textlint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):(?P<column>\\d+)[\\s*|\u2713]*(?P<severity>'\n+                     r'error|warning)\\s+(?P<message>.+?)(?:  .*|\\n|$)')\n+class TextLintBear:\n+    \"\"\"\n+    The pluggable linting tool for text and markdown. It is similar to\n+    ESLint, but textlint for natural language.\n+    \"\"\"\n+\n+    LANGUAGES = {'HTML', 'Markdown', 'reStructuredText'}\n+    REQUIREMENTS = {NpmRequirement('textlint', '7.3.0'),\n+                    NpmRequirement('textlint-plugin-html', '0.1.5'),\n+                    NpmRequirement('textlint-plugin-rst', '0.1.1'),\n+                    NpmRequirement('textlint-rule-alex', '1.2.0'),\n+                    NpmRequirement('textlint-rule-common-misspellings',\n+                                   '1.0.1'),\n+                    NpmRequirement('textlint-rule-date-weekday-mismatch',\n+                                   '1.0.5'),\n+                    NpmRequirement('textlint-rule-ginger', '2.1.0'),\n+                    NpmRequirement('textlint-rule-max-comma', '1.0.4'),\n+                    NpmRequirement('textlint-rule-max-number-of-lines',\n+                                   '1.0.3'),\n+                    NpmRequirement('textlint-rule-ng-word', '1.0.0'),\n+                    NpmRequirement('textlint-rule-no-dead-link', '3.1.1'),\n+                    NpmRequirement('textlint-rule-no-empty-section', '1.1.0'),\n+                    NpmRequirement('textlint-rule-no-start-'\n+                                   'duplicated-conjunction', '1.1.3'),\n+                    NpmRequirement('textlint-rule-no-todo', '2.0.0'),\n+                    NpmRequirement('textlint-rule-period-in-list-item',\n+                                   '0.2.0'),\n+                    NpmRequirement('textlint-rule-rousseau', '1.4.5'),\n+                    NpmRequirement('textlint-rule-unexpanded-acronym',\n+                                   '1.2.1'),\n+                    NpmRequirement('textlint-rule-write-good', '1.6.0'),\n+                    PipRequirement('docutils-ast-writer', '0.1.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Grammar', 'Spelling'}\n+    SEE_MORE = 'https://github.com/textlint/textlint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        keyword_todo: bool=None,\n+                        no_start_duplicated_conjunction: bool=True,\n+                        no_empty_section: bool=True,\n+                        check_date_weekday_mismatch: bool=True,\n+                        ginger: bool=True,\n+                        max_lines_per_file: int=300,\n+                        max_comma_per_sentence: int=4,\n+                        check_ng_words: typed_list(str)=[],\n+                        period_in_list_item: bool=True,\n+                        minimum_acronym_length: int=3,\n+                        maximum_acronym_length: int=5,\n+                        ignore_acronyms: typed_list(str)=[],\n+                        check_rousseau: bool=True,\n+                        check_alex: bool=True,\n+                        check_common_misspellings: bool=True,\n+                        write_good: bool=True,\n+                        check_invalid_link: bool=True,\n+                        textlint_config: str='',\n+                        ):\n+        \"\"\"\n+        :param keyword_todo:\n+            This rule checks ``- [ ]`` TODO text.\n+        :param no_start_duplicated_conjunction:\n+            This rule checks whether your sentence starts with a duplicated\n+            conjunction.\n+        :param no_empty_section:\n+            This rule does not allow to create an empty section.\n+            For example, there is an empty section ``# Header B`` below:\n+            ```\n+            # Header A\n+\n+            text.\n+\n+            # Header B\n+            ```\n+        :param check_date_weekday_mismatch:\n+            This rule finds a mismatch between date and the corresponding\n+            weekday.\n+        :param ginger:\n+            This rule checks your English grammar with Ginger Proofreading.\n+        :param max_lines_per_file:\n+            Number of lines allowed per file.\n+        :param max_comma_per_sentence:\n+            Number of commas allowed per sentence.\n+        :param check_ng_words:\n+            This rule checks NG (No Good) words. You can set these NG words\n+            manually.\n+        :param period_in_list_item:\n+            This rule checks whether there is a period in list item.", "created_at": "2017-06-09T19:05:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTIwOA==", "fields": {"body": "Setting rename:\nng_words or maybe better no_good_words\n+\nRephrase:\nSet of NG (No Good) words to check for.", "diff": "@@ -0,0 +1,163 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='textlint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):(?P<column>\\d+)[\\s*|\u2713]*(?P<severity>'\n+                     r'error|warning)\\s+(?P<message>.+?)(?:  .*|\\n|$)')\n+class TextLintBear:\n+    \"\"\"\n+    The pluggable linting tool for text and markdown. It is similar to\n+    ESLint, but textlint for natural language.\n+    \"\"\"\n+\n+    LANGUAGES = {'HTML', 'Markdown', 'reStructuredText'}\n+    REQUIREMENTS = {NpmRequirement('textlint', '7.3.0'),\n+                    NpmRequirement('textlint-plugin-html', '0.1.5'),\n+                    NpmRequirement('textlint-plugin-rst', '0.1.1'),\n+                    NpmRequirement('textlint-rule-alex', '1.2.0'),\n+                    NpmRequirement('textlint-rule-common-misspellings',\n+                                   '1.0.1'),\n+                    NpmRequirement('textlint-rule-date-weekday-mismatch',\n+                                   '1.0.5'),\n+                    NpmRequirement('textlint-rule-ginger', '2.1.0'),\n+                    NpmRequirement('textlint-rule-max-comma', '1.0.4'),\n+                    NpmRequirement('textlint-rule-max-number-of-lines',\n+                                   '1.0.3'),\n+                    NpmRequirement('textlint-rule-ng-word', '1.0.0'),\n+                    NpmRequirement('textlint-rule-no-dead-link', '3.1.1'),\n+                    NpmRequirement('textlint-rule-no-empty-section', '1.1.0'),\n+                    NpmRequirement('textlint-rule-no-start-'\n+                                   'duplicated-conjunction', '1.1.3'),\n+                    NpmRequirement('textlint-rule-no-todo', '2.0.0'),\n+                    NpmRequirement('textlint-rule-period-in-list-item',\n+                                   '0.2.0'),\n+                    NpmRequirement('textlint-rule-rousseau', '1.4.5'),\n+                    NpmRequirement('textlint-rule-unexpanded-acronym',\n+                                   '1.2.1'),\n+                    NpmRequirement('textlint-rule-write-good', '1.6.0'),\n+                    PipRequirement('docutils-ast-writer', '0.1.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Grammar', 'Spelling'}\n+    SEE_MORE = 'https://github.com/textlint/textlint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        keyword_todo: bool=None,\n+                        no_start_duplicated_conjunction: bool=True,\n+                        no_empty_section: bool=True,\n+                        check_date_weekday_mismatch: bool=True,\n+                        ginger: bool=True,\n+                        max_lines_per_file: int=300,\n+                        max_comma_per_sentence: int=4,\n+                        check_ng_words: typed_list(str)=[],\n+                        period_in_list_item: bool=True,\n+                        minimum_acronym_length: int=3,\n+                        maximum_acronym_length: int=5,\n+                        ignore_acronyms: typed_list(str)=[],\n+                        check_rousseau: bool=True,\n+                        check_alex: bool=True,\n+                        check_common_misspellings: bool=True,\n+                        write_good: bool=True,\n+                        check_invalid_link: bool=True,\n+                        textlint_config: str='',\n+                        ):\n+        \"\"\"\n+        :param keyword_todo:\n+            This rule checks ``- [ ]`` TODO text.\n+        :param no_start_duplicated_conjunction:\n+            This rule checks whether your sentence starts with a duplicated\n+            conjunction.\n+        :param no_empty_section:\n+            This rule does not allow to create an empty section.\n+            For example, there is an empty section ``# Header B`` below:\n+            ```\n+            # Header A\n+\n+            text.\n+\n+            # Header B\n+            ```\n+        :param check_date_weekday_mismatch:\n+            This rule finds a mismatch between date and the corresponding\n+            weekday.\n+        :param ginger:\n+            This rule checks your English grammar with Ginger Proofreading.\n+        :param max_lines_per_file:\n+            Number of lines allowed per file.\n+        :param max_comma_per_sentence:\n+            Number of commas allowed per sentence.\n+        :param check_ng_words:\n+            This rule checks NG (No Good) words. You can set these NG words\n+            manually.", "created_at": "2017-06-09T19:05:31Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTU2Mg==", "fields": {"body": "could you maybe explain a bit more what is checked exactly?", "diff": "@@ -0,0 +1,163 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='textlint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):(?P<column>\\d+)[\\s*|\u2713]*(?P<severity>'\n+                     r'error|warning)\\s+(?P<message>.+?)(?:  .*|\\n|$)')\n+class TextLintBear:\n+    \"\"\"\n+    The pluggable linting tool for text and markdown. It is similar to\n+    ESLint, but textlint for natural language.\n+    \"\"\"\n+\n+    LANGUAGES = {'HTML', 'Markdown', 'reStructuredText'}\n+    REQUIREMENTS = {NpmRequirement('textlint', '7.3.0'),\n+                    NpmRequirement('textlint-plugin-html', '0.1.5'),\n+                    NpmRequirement('textlint-plugin-rst', '0.1.1'),\n+                    NpmRequirement('textlint-rule-alex', '1.2.0'),\n+                    NpmRequirement('textlint-rule-common-misspellings',\n+                                   '1.0.1'),\n+                    NpmRequirement('textlint-rule-date-weekday-mismatch',\n+                                   '1.0.5'),\n+                    NpmRequirement('textlint-rule-ginger', '2.1.0'),\n+                    NpmRequirement('textlint-rule-max-comma', '1.0.4'),\n+                    NpmRequirement('textlint-rule-max-number-of-lines',\n+                                   '1.0.3'),\n+                    NpmRequirement('textlint-rule-ng-word', '1.0.0'),\n+                    NpmRequirement('textlint-rule-no-dead-link', '3.1.1'),\n+                    NpmRequirement('textlint-rule-no-empty-section', '1.1.0'),\n+                    NpmRequirement('textlint-rule-no-start-'\n+                                   'duplicated-conjunction', '1.1.3'),\n+                    NpmRequirement('textlint-rule-no-todo', '2.0.0'),\n+                    NpmRequirement('textlint-rule-period-in-list-item',\n+                                   '0.2.0'),\n+                    NpmRequirement('textlint-rule-rousseau', '1.4.5'),\n+                    NpmRequirement('textlint-rule-unexpanded-acronym',\n+                                   '1.2.1'),\n+                    NpmRequirement('textlint-rule-write-good', '1.6.0'),\n+                    PipRequirement('docutils-ast-writer', '0.1.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Grammar', 'Spelling'}\n+    SEE_MORE = 'https://github.com/textlint/textlint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        keyword_todo: bool=None,\n+                        no_start_duplicated_conjunction: bool=True,\n+                        no_empty_section: bool=True,\n+                        check_date_weekday_mismatch: bool=True,\n+                        ginger: bool=True,\n+                        max_lines_per_file: int=300,\n+                        max_comma_per_sentence: int=4,\n+                        check_ng_words: typed_list(str)=[],\n+                        period_in_list_item: bool=True,\n+                        minimum_acronym_length: int=3,\n+                        maximum_acronym_length: int=5,\n+                        ignore_acronyms: typed_list(str)=[],\n+                        check_rousseau: bool=True,\n+                        check_alex: bool=True,\n+                        check_common_misspellings: bool=True,\n+                        write_good: bool=True,\n+                        check_invalid_link: bool=True,\n+                        textlint_config: str='',\n+                        ):\n+        \"\"\"\n+        :param keyword_todo:\n+            This rule checks ``- [ ]`` TODO text.\n+        :param no_start_duplicated_conjunction:\n+            This rule checks whether your sentence starts with a duplicated\n+            conjunction.\n+        :param no_empty_section:\n+            This rule does not allow to create an empty section.\n+            For example, there is an empty section ``# Header B`` below:\n+            ```\n+            # Header A\n+\n+            text.\n+\n+            # Header B\n+            ```\n+        :param check_date_weekday_mismatch:\n+            This rule finds a mismatch between date and the corresponding\n+            weekday.\n+        :param ginger:\n+            This rule checks your English grammar with Ginger Proofreading.\n+        :param max_lines_per_file:\n+            Number of lines allowed per file.\n+        :param max_comma_per_sentence:\n+            Number of commas allowed per sentence.\n+        :param check_ng_words:\n+            This rule checks NG (No Good) words. You can set these NG words\n+            manually.\n+        :param period_in_list_item:\n+            This rule checks whether there is a period in list item.\n+        :param minimum_acronym_length:\n+            Minimum length for the unexpanded acronym.\n+        :param maximum_acronym_length:\n+            Maximum length for the unexpanded acronym.\n+        :param ignore_acronyms:\n+            A list that contains the acronyms to ignore.\n+        :param check_rousseau:\n+            This rule checks English sentence using rousseau.", "created_at": "2017-06-09T19:07:31Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTYyNw==", "fields": {"body": "Maybe just check_grammar.", "diff": "@@ -0,0 +1,163 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='textlint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):(?P<column>\\d+)[\\s*|\u2713]*(?P<severity>'\n+                     r'error|warning)\\s+(?P<message>.+?)(?:  .*|\\n|$)')\n+class TextLintBear:\n+    \"\"\"\n+    The pluggable linting tool for text and markdown. It is similar to\n+    ESLint, but textlint for natural language.\n+    \"\"\"\n+\n+    LANGUAGES = {'HTML', 'Markdown', 'reStructuredText'}\n+    REQUIREMENTS = {NpmRequirement('textlint', '7.3.0'),\n+                    NpmRequirement('textlint-plugin-html', '0.1.5'),\n+                    NpmRequirement('textlint-plugin-rst', '0.1.1'),\n+                    NpmRequirement('textlint-rule-alex', '1.2.0'),\n+                    NpmRequirement('textlint-rule-common-misspellings',\n+                                   '1.0.1'),\n+                    NpmRequirement('textlint-rule-date-weekday-mismatch',\n+                                   '1.0.5'),\n+                    NpmRequirement('textlint-rule-ginger', '2.1.0'),\n+                    NpmRequirement('textlint-rule-max-comma', '1.0.4'),\n+                    NpmRequirement('textlint-rule-max-number-of-lines',\n+                                   '1.0.3'),\n+                    NpmRequirement('textlint-rule-ng-word', '1.0.0'),\n+                    NpmRequirement('textlint-rule-no-dead-link', '3.1.1'),\n+                    NpmRequirement('textlint-rule-no-empty-section', '1.1.0'),\n+                    NpmRequirement('textlint-rule-no-start-'\n+                                   'duplicated-conjunction', '1.1.3'),\n+                    NpmRequirement('textlint-rule-no-todo', '2.0.0'),\n+                    NpmRequirement('textlint-rule-period-in-list-item',\n+                                   '0.2.0'),\n+                    NpmRequirement('textlint-rule-rousseau', '1.4.5'),\n+                    NpmRequirement('textlint-rule-unexpanded-acronym',\n+                                   '1.2.1'),\n+                    NpmRequirement('textlint-rule-write-good', '1.6.0'),\n+                    PipRequirement('docutils-ast-writer', '0.1.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Grammar', 'Spelling'}\n+    SEE_MORE = 'https://github.com/textlint/textlint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        keyword_todo: bool=None,\n+                        no_start_duplicated_conjunction: bool=True,\n+                        no_empty_section: bool=True,\n+                        check_date_weekday_mismatch: bool=True,\n+                        ginger: bool=True,\n+                        max_lines_per_file: int=300,\n+                        max_comma_per_sentence: int=4,\n+                        check_ng_words: typed_list(str)=[],\n+                        period_in_list_item: bool=True,\n+                        minimum_acronym_length: int=3,\n+                        maximum_acronym_length: int=5,\n+                        ignore_acronyms: typed_list(str)=[],\n+                        check_rousseau: bool=True,\n+                        check_alex: bool=True,\n+                        check_common_misspellings: bool=True,\n+                        write_good: bool=True,\n+                        check_invalid_link: bool=True,\n+                        textlint_config: str='',\n+                        ):\n+        \"\"\"\n+        :param keyword_todo:\n+            This rule checks ``- [ ]`` TODO text.\n+        :param no_start_duplicated_conjunction:\n+            This rule checks whether your sentence starts with a duplicated\n+            conjunction.\n+        :param no_empty_section:\n+            This rule does not allow to create an empty section.\n+            For example, there is an empty section ``# Header B`` below:\n+            ```\n+            # Header A\n+\n+            text.\n+\n+            # Header B\n+            ```\n+        :param check_date_weekday_mismatch:\n+            This rule finds a mismatch between date and the corresponding\n+            weekday.\n+        :param ginger:\n+            This rule checks your English grammar with Ginger Proofreading.", "created_at": "2017-06-09T19:07:55Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTc1OQ==", "fields": {"body": "Hm not sure if possible, but could you find a better setting name? Like check_offensive_expressions or so^^", "diff": "@@ -0,0 +1,163 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='textlint',\n+        output_format='regex',\n+        output_regex=r'(?P<line>\\d+):(?P<column>\\d+)[\\s*|\u2713]*(?P<severity>'\n+                     r'error|warning)\\s+(?P<message>.+?)(?:  .*|\\n|$)')\n+class TextLintBear:\n+    \"\"\"\n+    The pluggable linting tool for text and markdown. It is similar to\n+    ESLint, but textlint for natural language.\n+    \"\"\"\n+\n+    LANGUAGES = {'HTML', 'Markdown', 'reStructuredText'}\n+    REQUIREMENTS = {NpmRequirement('textlint', '7.3.0'),\n+                    NpmRequirement('textlint-plugin-html', '0.1.5'),\n+                    NpmRequirement('textlint-plugin-rst', '0.1.1'),\n+                    NpmRequirement('textlint-rule-alex', '1.2.0'),\n+                    NpmRequirement('textlint-rule-common-misspellings',\n+                                   '1.0.1'),\n+                    NpmRequirement('textlint-rule-date-weekday-mismatch',\n+                                   '1.0.5'),\n+                    NpmRequirement('textlint-rule-ginger', '2.1.0'),\n+                    NpmRequirement('textlint-rule-max-comma', '1.0.4'),\n+                    NpmRequirement('textlint-rule-max-number-of-lines',\n+                                   '1.0.3'),\n+                    NpmRequirement('textlint-rule-ng-word', '1.0.0'),\n+                    NpmRequirement('textlint-rule-no-dead-link', '3.1.1'),\n+                    NpmRequirement('textlint-rule-no-empty-section', '1.1.0'),\n+                    NpmRequirement('textlint-rule-no-start-'\n+                                   'duplicated-conjunction', '1.1.3'),\n+                    NpmRequirement('textlint-rule-no-todo', '2.0.0'),\n+                    NpmRequirement('textlint-rule-period-in-list-item',\n+                                   '0.2.0'),\n+                    NpmRequirement('textlint-rule-rousseau', '1.4.5'),\n+                    NpmRequirement('textlint-rule-unexpanded-acronym',\n+                                   '1.2.1'),\n+                    NpmRequirement('textlint-rule-write-good', '1.6.0'),\n+                    PipRequirement('docutils-ast-writer', '0.1.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Grammar', 'Spelling'}\n+    SEE_MORE = 'https://github.com/textlint/textlint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        keyword_todo: bool=None,\n+                        no_start_duplicated_conjunction: bool=True,\n+                        no_empty_section: bool=True,\n+                        check_date_weekday_mismatch: bool=True,\n+                        ginger: bool=True,\n+                        max_lines_per_file: int=300,\n+                        max_comma_per_sentence: int=4,\n+                        check_ng_words: typed_list(str)=[],\n+                        period_in_list_item: bool=True,\n+                        minimum_acronym_length: int=3,\n+                        maximum_acronym_length: int=5,\n+                        ignore_acronyms: typed_list(str)=[],\n+                        check_rousseau: bool=True,\n+                        check_alex: bool=True,\n+                        check_common_misspellings: bool=True,\n+                        write_good: bool=True,\n+                        check_invalid_link: bool=True,\n+                        textlint_config: str='',\n+                        ):\n+        \"\"\"\n+        :param keyword_todo:\n+            This rule checks ``- [ ]`` TODO text.\n+        :param no_start_duplicated_conjunction:\n+            This rule checks whether your sentence starts with a duplicated\n+            conjunction.\n+        :param no_empty_section:\n+            This rule does not allow to create an empty section.\n+            For example, there is an empty section ``# Header B`` below:\n+            ```\n+            # Header A\n+\n+            text.\n+\n+            # Header B\n+            ```\n+        :param check_date_weekday_mismatch:\n+            This rule finds a mismatch between date and the corresponding\n+            weekday.\n+        :param ginger:\n+            This rule checks your English grammar with Ginger Proofreading.\n+        :param max_lines_per_file:\n+            Number of lines allowed per file.\n+        :param max_comma_per_sentence:\n+            Number of commas allowed per sentence.\n+        :param check_ng_words:\n+            This rule checks NG (No Good) words. You can set these NG words\n+            manually.\n+        :param period_in_list_item:\n+            This rule checks whether there is a period in list item.\n+        :param minimum_acronym_length:\n+            Minimum length for the unexpanded acronym.\n+        :param maximum_acronym_length:\n+            Maximum length for the unexpanded acronym.\n+        :param ignore_acronyms:\n+            A list that contains the acronyms to ignore.\n+        :param check_rousseau:\n+            This rule checks English sentence using rousseau.\n+        :param check_alex:\n+            This rule helps you find gender favouring, polarising, race\n+            related, religion inconsiderate, or other unequal phrasing.", "created_at": "2017-06-09T19:08:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQ1OTczNQ==", "fields": {"body": "Replied at #1826 (comment)", "diff": "@@ -61,6 +61,11 @@ test:\n         parallel: true\n     - codecov:\n         parallel: true\n-    - rm -rf docs/API && make -C docs clean\n-    - python setup.py docs:\n+    # sphinx fails with python 3.5.1 due to an issue in typing package,\n+    # and node 1 has python 3.4.3\n+    - if [ $CIRCLE_NODE_INDEX == 1 ] ; then pip install -r docs-requirements.txt ; fi:\n+        parallel: true\n+    - if [ $CIRCLE_NODE_INDEX == 1 ] ; then rm -rf docs/API && make -C docs clean ; fi:", "created_at": "2017-06-12T16:22:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQyODkyOA==", "fields": {"body": "I'd shorten this to\n:param filenames: List of filenames to check.\n:return: Generator of Result objects.", "diff": "@@ -1,45 +1,52 @@\n-import re\n-from shutil import which\n-\n from coalib.bears.GlobalBear import GlobalBear\n-from dependency_management.requirements.PipRequirement import PipRequirement\n-from coalib.misc.Shell import run_shell_command\n from coalib.results.Result import Result\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from vulture import Vulture\n+\n+\n+def _retrieve_unused(filenames):\n+    \"\"\"\n+    :param filenames: List containing paths to all the files\n+                      which are to be checked by vulture.\n+    :return: List of Result objects containing information about\n+             dead code (filename, lineno, message).\n+    \"\"\"", "created_at": "2017-06-12T14:59:21Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQzMzM0NQ==", "fields": {"body": "_retrieve_unused is missing an object and \"retrieve\" suggests that the analysis has already been done. I'd call the function _find_unused_code instead.", "diff": "@@ -1,45 +1,52 @@\n-import re\n-from shutil import which\n-\n from coalib.bears.GlobalBear import GlobalBear\n-from dependency_management.requirements.PipRequirement import PipRequirement\n-from coalib.misc.Shell import run_shell_command\n from coalib.results.Result import Result\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from vulture import Vulture\n+\n+\n+def _retrieve_unused(filenames):", "created_at": "2017-06-12T15:04:20Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQzNzA0Ng==", "fields": {"body": "We could even just do the following, I guess:\nreturn _find_unused_code(filenames)", "diff": "@@ -1,45 +1,52 @@\n-import re\n-from shutil import which\n-\n from coalib.bears.GlobalBear import GlobalBear\n-from dependency_management.requirements.PipRequirement import PipRequirement\n-from coalib.misc.Shell import run_shell_command\n from coalib.results.Result import Result\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from vulture import Vulture\n+\n+\n+def _retrieve_unused(filenames):\n+    \"\"\"\n+    :param filenames: List containing paths to all the files\n+                      which are to be checked by vulture.\n+    :return: List of Result objects containing information about\n+             dead code (filename, lineno, message).\n+    \"\"\"\n+\n+    def file_lineno(item):\n+        return (item.filename.lower(), item.lineno)\n+    unused = []\n+\n+    vulture = Vulture()\n+    vulture.scavenge(filenames)\n+    for item in sorted(\n+            vulture.unused_funcs + vulture.unused_imports +\n+            vulture.unused_props + vulture.unused_vars +\n+            vulture.unused_attrs, key=file_lineno):\n+        message = 'Unused {0}: {1}'.format(item.typ, item)\n+        unused.append(Result.from_values(origin='VultureBear',\n+                                         message=message,\n+                                         file=item.filename,\n+                                         line=item.lineno))\n+\n+    return unused\n \n \n class VultureBear(GlobalBear):\n     LANGUAGES = {'Python', 'Python 3'}\n-    REQUIREMENTS = {PipRequirement('vulture', '0.10.0')}\n+    REQUIREMENTS = {PipRequirement('vulture', '0.14.0')}\n     AUTHORS = {'The coala developers'}\n     AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n     LICENSE = 'AGPL-3.0'\n     ASCIINEMA_URL = 'https://asciinema.org/a/82256'\n     CAN_DETECT = {'Unused Code'}\n \n-    EXECUTABLE = 'vulture'\n-    OUTPUT_REGEX = re.compile(\n-        r'(?P<filename>.*):(?P<line>.*):\\s*(?P<message>.*)')\n-\n-    @classmethod\n-    def check_prerequisites(cls):\n-        return ('Vulture is missing. Make sure to install it using '\n-                '`pip3 install vulture`.'\n-                if which('vulture') is None else True)\n-\n     def run(self):\n         \"\"\"\n         Check Python code for unused variables and functions using `vulture`.\n \n-        See <https://bitbucket.org/jendrikseipp/vulture> for more information.\n+        See <https://github.com/jendrikseipp/vulture> for more information.\n         \"\"\"\n-        stdout_output, _ = run_shell_command(\n-            (self.EXECUTABLE,) +\n-            tuple(filename for filename in self.file_dict.keys()),\n-            cwd=self.get_config_dir())\n-\n-        for match in re.finditer(self.OUTPUT_REGEX, stdout_output):\n-            groups = match.groupdict()\n-            yield Result.from_values(origin=self,\n-                                     message=groups['message'],\n-                                     file=groups['filename'],\n-                                     line=int(groups['line']))\n+        filenames = list(self.file_dict.keys())\n+        unused = _retrieve_unused(filenames)\n+        for unused_entity in unused:", "created_at": "2017-06-12T15:09:04Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTU2Mzk5NQ==", "fields": {"body": "We could actually use Iterable instead of only list, so we support any kind of iterable \ud83d\udc4d", "diff": "@@ -185,10 +201,11 @@ def check_results(self,\n                                   create_tempfile=create_tempfile,\n                                   tempfile_kwargs=tempfile_kwargs,\n                                   settings=settings)\n+        self.addTypeEqualityFunc(list, self.assertObjectsEqual)", "created_at": "2017-06-13T01:17:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTU2NDAxOQ==", "fields": {"body": "can we delete the msg variable above as we don't seem to use it any more?", "diff": "@@ -185,10 +201,11 @@ def check_results(self,\n                                   create_tempfile=create_tempfile,\n                                   tempfile_kwargs=tempfile_kwargs,\n                                   settings=settings)\n+        self.addTypeEqualityFunc(list, self.assertObjectsEqual)\n         if not check_order:\n-            self.assertEqual(sorted(bear_output), sorted(results), msg=msg)\n+            self.assertEqual(sorted(bear_output), sorted(results))\n         else:\n-            self.assertEqual(bear_output, results, msg=msg)\n+            self.assertEqual(bear_output, results)", "created_at": "2017-06-13T01:18:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTU2NDEwOQ==", "fields": {"body": "Or maybe for this case we should explicitly use assertObjectsEqual instead of registering it for tests. Makes it easier to understand^^", "diff": "@@ -185,10 +201,11 @@ def check_results(self,\n                                   create_tempfile=create_tempfile,\n                                   tempfile_kwargs=tempfile_kwargs,\n                                   settings=settings)\n+        self.addTypeEqualityFunc(list, self.assertObjectsEqual)", "created_at": "2017-06-13T01:19:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg0ODE0OA==", "fields": {"body": "please indent wget by two spaces.\nwget should save the file as get-pip.py and not use |.\nThen on the next line python3 get-pip.py", "diff": "@@ -1,5 +1,9 @@\n install:\n-  - if ! pip3 -V ; then wget -O - https://bootstrap.pypa.io/get-pip.py | python3; fi\n+  - >\n+    if ! pip3 -V ; then\n+    wget -O - https://bootstrap.pypa.io/get-pip.py |", "created_at": "2017-06-14T03:47:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg0ODM4MQ==", "fields": {"body": "This is not the best way to split the line.\ndate --utc +%Y%m%d%H%M%S should be stored in a shell variable with a short name.\n    - DATE=`date --utc +%Y%m%d%H%M%S`\n    - python3 .ci/adjust_version_number.py bears/VERSION -b \"$DATE\"", "diff": "@@ -8,7 +12,9 @@ docker:\n merge:\n   fast-forward: only\n   script:\n-    - python3 .ci/adjust_version_number.py bears/VERSION -b `date --utc +%Y%m%d%H%M%S`\n+    - >\n+      python3 .ci/adjust_version_number.py\n+      bears/VERSION -b `date --utc +%Y%m%d%H%M%S`", "created_at": "2017-06-14T03:50:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg1MjgzMA==", "fields": {"body": "Any reason to use vcr instead of proper html requests?", "diff": "@@ -0,0 +1,12 @@\n+from plugins.wolfram_alpha import WolframAlpha\n+\n+import vcr\n+\n+pytest_plugins = ['errbot.backends.test']\n+extra_plugin_dir = 'plugins'\n+\n+my_vcr = vcr.VCR(match_on=['method', 'scheme', 'host', 'port', 'path'])", "created_at": "2017-06-14T04:41:25Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg5NTk1NA==", "fields": {"body": "#1826 was merged, so this part needs to be revised, but otherwise all is good.", "diff": "@@ -61,6 +61,11 @@ test:\n         parallel: true\n     - codecov:\n         parallel: true\n-    - rm -rf docs/API && make -C docs clean\n-    - python setup.py docs:\n+    # sphinx fails with python 3.5.1 due to an issue in typing package,\n+    # and node 1 has python 3.4.3\n+    - if [ $CIRCLE_NODE_INDEX == 1 ] ; then pip install -r docs-requirements.txt ; fi:\n+        parallel: true\n+    - if [ $CIRCLE_NODE_INDEX == 1 ] ; then rm -rf docs/API && make -C docs clean ; fi:", "created_at": "2017-06-14T09:16:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTgzMzk5OQ==", "fields": {"body": "I would call those settings filename_prefix and filename_suffix (or file_name_prefix / file_name_suffix, what you like better). There are certainly other prefixes and suffixes that mean something different in another context^^", "diff": "@@ -27,7 +27,9 @@ class FilenameBear(LocalBear):\n \n     def run(self, filename, file,\n             file_naming_convention: str=None,\n-            ignore_uppercase_filenames: bool=True):\n+            ignore_uppercase_filenames: bool=True,\n+            prefix: str='',\n+            suffix: str=''):", "created_at": "2017-06-14T01:06:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTgzNDQwMw==", "fields": {"body": "Do you mean that the bear should be able to rename the file such that the file name matches the prefix/suffix?", "diff": "@@ -71,6 +77,18 @@ def run(self, filename, file,\n                      file_naming_convention)\n             return\n \n+        if not filename_without_extension.startswith(prefix):\n+            yield Result.from_values(\n+                origin=self,\n+                message='Filename does not use the {} prefix.'.format(prefix),\n+                file=filename)\n+\n+        if not filename_without_extension.endswith(suffix):\n+            yield Result.from_values(\n+                origin=self,\n+                message='Filename does not use the {} suffix.'.format(suffix),\n+                file=filename)", "created_at": "2017-06-14T01:09:55Z", "last_edited_at": null, "author": "AMR-KELEG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTgzNDYwOQ==", "fields": {"body": "I thought that this is obvious especially for the suffix part.\nAnyway, i will update the description.", "diff": "@@ -43,6 +45,10 @@ def run(self, filename, file,\n         :param ignore_uppercase_filenames:\n             Whether or not to ignore fully uppercase filenames completely,\n             e.g. COPYING, LICENSE etc.\n+        :param prefix:\n+            Check whether the filename uses a certain prefix.\n+        :param suffix:\n+            Check whether the filename uses a certain suffix.", "created_at": "2017-06-14T01:12:13Z", "last_edited_at": null, "author": "AMR-KELEG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTgzNTE4OQ==", "fields": {"body": "See https://github.com/coala/coala/blob/master/coalib/results/Diff.py :) There's a rename field you can use for this purpose ;)", "diff": "@@ -71,6 +77,18 @@ def run(self, filename, file,\n                      file_naming_convention)\n             return\n \n+        if not filename_without_extension.startswith(prefix):\n+            yield Result.from_values(\n+                origin=self,\n+                message='Filename does not use the {} prefix.'.format(prefix),\n+                file=filename)\n+\n+        if not filename_without_extension.endswith(suffix):\n+            yield Result.from_values(\n+                origin=self,\n+                message='Filename does not use the {} suffix.'.format(suffix),\n+                file=filename)", "created_at": "2017-06-14T01:18:33Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTkzMTY3NQ==", "fields": {"body": "this line needs to be either\nsed -i.bak '/^mypy-lang/d' requirements.txt\nor (if the above fails) ..\nsed -i.bak '/^mypy-lang/d' requirements.txt bear-requirements.txt", "diff": "@@ -96,7 +98,8 @@ before_install:\n     if [[ \"$UNSUPPORTED\" == true ]]; then\n       pip install 3to2\n       export PIP_NO_COMPILE=1\n-      sed -E -i.bak '/^(coala|mypy-lang)/d' requirements.txt bear-requirements.txt\n+      sed -i.bak '/^coala/d' requirements.txt\n+      sed -i.bak '/^mypy-lang/d' bear-requirements.txt", "created_at": "2017-06-14T12:28:31Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjEyNTE1Ng==", "fields": {"body": "None of this code needs to be modified.\nYou can add two lines at the beginning:\n        if rubocop_config:\n            return None\n\nThen the rest of the code can work as before.", "diff": "@@ -174,84 +175,87 @@ class members.\n         :param allow_unused_method_keyword_args:\n             Allows unused keyword arguments in a method.\n         \"\"\"\n-        naming_convention = {'camel': 'camelCase', 'snake': 'snake_case'}", "created_at": "2017-06-15T06:00:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjQ5MTkxOQ==", "fields": {"body": "PS- This is important. As if directly implemented will cause an AttributeError: 'NoneType' object has no attribute ...", "diff": "@@ -32,14 +33,20 @@ def __init__(self, documentation, docstyle_definition,\n         :param marker:\n             The three-element tuple with marker strings, that identified this\n             documentation comment.\n-        :param range:\n-            The position range of type ``TextRange``.\n+        :param position:\n+            The starting ``TextPosition`` of the documentation.\n         \"\"\"\n         self.documentation = documentation\n         self.docstyle_definition = docstyle_definition\n         self.indent = indent\n         self.marker = marker\n-        self.range = range\n+        self.position = position\n+        self.assemble = None if position is None else self._assemble()\n+        self.range = None if position is None else TextRange.from_values(", "created_at": "2017-06-16T17:23:13Z", "last_edited_at": "2017-06-16T17:30:57Z", "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU3NDMxNg==", "fields": {"body": "it should be \"does not exist\" right?", "diff": "@@ -59,17 +59,18 @@ def load_config_file(filename, log_printer, silent=False):\n     except FileNotFoundError:\n         if not silent:\n             if os.path.basename(filename) == Constants.default_coafile:\n-                log_printer.warn('The default coafile {0!r} was not found. '\n-                                 'You can generate a configuration file with '\n-                                 'your current options by adding the `--save` '\n-                                 'flag or suppress any use of config '\n-                                 'files with `-I`.'\n+                log_printer.warn('Default coafile not found!\\n'\n+                                 'Here\\'s what you can do:\\n'\n+                                 '* add --save to generate a config file with '\n+                                 'your current options\\n'\n+                                 '* add -I to suppress any use of config files'\n                                  .format(Constants.default_coafile))\n             else:\n-                log_printer.err('The requested coafile {0!r} does not exist. '\n-                                'You can generate it with your current '\n-                                'options by adding the `--save` flag or '\n-                                'suppress any use of config files with `-I`.'\n+                log_printer.err('Default coafile does not exists!\\n'", "created_at": "2017-06-17T18:36:13Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU5MTI3MQ==", "fields": {"body": "I've expanded it a bit using 0-9 as it is one more character and much easier to read for newbies. ;-)", "diff": "@@ -59,3 +59,4 @@ exclude_lines =\n     pragma: no ?cover\n     pragma ${PLATFORM_SYSTEM}: no cover\n     pragma ${OS_NAME}: no cover\n+    pragma Python [^: ]*${PYTHON_VERSION}[^: ]*: no cover", "created_at": "2017-06-18T13:41:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjg1NTM5OA==", "fields": {"body": "Isn't this one None too? would keep the assert then, doesn't harm :)", "diff": "@@ -56,7 +57,7 @@ def test_fields(self):\n         self.assertEqual(uut.indent, '\\t')\n         self.assertEqual(str(uut), 'qwertzuiop')\n         self.assertEqual(uut.marker, ('##', '#', '#'))\n-        self.assertEqual(uut.range, None)", "created_at": "2017-06-20T00:17:48Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjk1NTMxNQ==", "fields": {"body": "Can you find a good Python git library? I really don't like going to shell", "diff": "@@ -0,0 +1,36 @@\n+import os\n+import subprocess\n+\n+from errbot import BotPlugin, botcmd\n+\n+run = lambda x: subprocess.Popen(x.split(),\n+                                 stdout=subprocess.PIPE).stdout.read()\n+\n+\n+class Utils(BotPlugin):\n+    \"\"\"\n+    Some random utilities\n+    \"\"\"\n+\n+    @botcmd\n+    def sync(self, msg, arg):\n+        \"\"\"Sync the repository from github.\"\"\"  # Ignore QuotesBear\n+        os.chdir(os.environ.get('COBOT_ROOT'))\n+        initial_head = run('git log --oneline -1')", "created_at": "2017-06-20T12:03:23Z", "last_edited_at": "2017-06-20T12:03:34Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjk4MDc0MA==", "fields": {"body": "And this saves memory yes!!\n\nSadly not, especially not with None :D. Don't let the cache grow into nowhere with maxsize=None, use a sensible size like 64 or 128. Though as assemble() takes no parameters, lru_cache will only cache a single item, thus we can set maxsize=1 and use assemble.clear_cache when modifications occur^^\n(Though this is error prone, as we might forget to reset the cache properly^^)", "diff": "@@ -32,14 +33,20 @@ def __init__(self, documentation, docstyle_definition,\n         :param marker:\n             The three-element tuple with marker strings, that identified this\n             documentation comment.\n-        :param range:\n-            The position range of type ``TextRange``.\n+        :param position:\n+            The starting ``TextPosition`` of the documentation.\n         \"\"\"\n         self.documentation = documentation\n         self.docstyle_definition = docstyle_definition\n         self.indent = indent\n         self.marker = marker\n-        self.range = range\n+        self.position = position\n+        self.assemble = None if position is None else self._assemble()", "created_at": "2017-06-20T13:49:35Z", "last_edited_at": "2017-06-20T13:50:33Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzI4OTY1Mg==", "fields": {"body": "As you have an lru_cache you can keep self.assemble() like it is without renaming it to self._assemble().\nAlso you don't need the position to assemble a docstring.\nWhat if I change e.g. markers now? Then we need to update self.assemble() again. Or do we consider those fields to be \"immutable\"?", "diff": "@@ -32,14 +33,20 @@ def __init__(self, documentation, docstyle_definition,\n         :param marker:\n             The three-element tuple with marker strings, that identified this\n             documentation comment.\n-        :param range:\n-            The position range of type ``TextRange``.\n+        :param position:\n+            The starting ``TextPosition`` of the documentation.\n         \"\"\"\n         self.documentation = documentation\n         self.docstyle_definition = docstyle_definition\n         self.indent = indent\n         self.marker = marker\n-        self.range = range\n+        self.position = position\n+        self.assemble = None if position is None else self._assemble()", "created_at": "2017-06-21T15:51:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzMyMjU5Nw==", "fields": {"body": "As you have an lru_cache you can keep self.assemble() like it is without renaming it to self._assemble().\n\nYup we can now let me amend it and see.\n\nWhat if I change e.g. markers now? Then we need to update self.assemble() again. Or do we consider those fields to be \"immutable\"?\n\nHmm I don't know. My possible guess is yes we have to updateself.assemble() again. I don't see any reason for being immutable.", "diff": "@@ -32,14 +33,20 @@ def __init__(self, documentation, docstyle_definition,\n         :param marker:\n             The three-element tuple with marker strings, that identified this\n             documentation comment.\n-        :param range:\n-            The position range of type ``TextRange``.\n+        :param position:\n+            The starting ``TextPosition`` of the documentation.\n         \"\"\"\n         self.documentation = documentation\n         self.docstyle_definition = docstyle_definition\n         self.indent = indent\n         self.marker = marker\n-        self.range = range\n+        self.position = position\n+        self.assemble = None if position is None else self._assemble()", "created_at": "2017-06-21T18:01:11Z", "last_edited_at": null, "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzQwNDAwOA==", "fields": {"body": "This is what I meant with\n\n(Though this is error prone, as we might forget to reset the cache properly^^)\n\n:D\nUp to you how you want to treat the fields. They are currently not prefixed with _ identifying them as \"private\" (or \"protected\" or whatsoever), so from outside they look like being settable.", "diff": "@@ -32,14 +33,20 @@ def __init__(self, documentation, docstyle_definition,\n         :param marker:\n             The three-element tuple with marker strings, that identified this\n             documentation comment.\n-        :param range:\n-            The position range of type ``TextRange``.\n+        :param position:\n+            The starting ``TextPosition`` of the documentation.\n         \"\"\"\n         self.documentation = documentation\n         self.docstyle_definition = docstyle_definition\n         self.indent = indent\n         self.marker = marker\n-        self.range = range\n+        self.position = position\n+        self.assemble = None if position is None else self._assemble()", "created_at": "2017-06-22T01:36:42Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxNjE3Mw==", "fields": {"body": "instead of using only the fields from Result, get it from the compared objects below :)", "diff": "@@ -52,6 +54,18 @@ class LocalBearTestHelper(unittest.TestCase):\n     If you miss some methods, get in contact with us, we'll be happy to help!\n     \"\"\"\n \n+    def assertObjectsEqual(self, observed_result, expected_result):\n+        attributes = Result.__compare_fields__", "created_at": "2017-06-22T13:54:35Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxNjM3Mw==", "fields": {"body": "we should also check if the type is the same (or maybe subclasses from each other)? (I think typeA is typeB is easier for now)", "diff": "@@ -52,6 +54,18 @@ class LocalBearTestHelper(unittest.TestCase):\n     If you miss some methods, get in contact with us, we'll be happy to help!\n     \"\"\"\n \n+    def assertObjectsEqual(self, observed_result, expected_result):\n+        attributes = Result.__compare_fields__\n+        for observed, expected in zip(observed_result, expected_result):\n+            if isinstance(observed, Comparable) and isinstance(\n+                    expected, Comparable):", "created_at": "2017-06-22T13:55:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxNjU5MQ==", "fields": {"body": "see above, get the attributes dynamically :)\ntype(observed).__compare_fields__", "diff": "@@ -52,6 +54,18 @@ class LocalBearTestHelper(unittest.TestCase):\n     If you miss some methods, get in contact with us, we'll be happy to help!\n     \"\"\"\n \n+    def assertObjectsEqual(self, observed_result, expected_result):\n+        attributes = Result.__compare_fields__\n+        for observed, expected in zip(observed_result, expected_result):\n+            if isinstance(observed, Comparable) and isinstance(\n+                    expected, Comparable):\n+                for attribute in attributes:", "created_at": "2017-06-22T13:56:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxNzg3Ng==", "fields": {"body": "Would put a period after mismatch^^", "diff": "@@ -52,6 +54,18 @@ class LocalBearTestHelper(unittest.TestCase):\n     If you miss some methods, get in contact with us, we'll be happy to help!\n     \"\"\"\n \n+    def assertObjectsEqual(self, observed_result, expected_result):\n+        attributes = Result.__compare_fields__\n+        for observed, expected in zip(observed_result, expected_result):\n+            if isinstance(observed, Comparable) and isinstance(\n+                    expected, Comparable):\n+                for attribute in attributes:\n+                    self.assertEqual(getattr(observed, attribute),\n+                                     getattr(expected, attribute),\n+                                     msg='{} mismatch'.format(attribute))", "created_at": "2017-06-22T14:00:55Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxODEzOA==", "fields": {"body": "you can use self.assertEqual again, we don't register a TypeEqualityFunc :)", "diff": "@@ -52,6 +54,18 @@ class LocalBearTestHelper(unittest.TestCase):\n     If you miss some methods, get in contact with us, we'll be happy to help!\n     \"\"\"\n \n+    def assertObjectsEqual(self, observed_result, expected_result):\n+        attributes = Result.__compare_fields__\n+        for observed, expected in zip(observed_result, expected_result):\n+            if isinstance(observed, Comparable) and isinstance(\n+                    expected, Comparable):\n+                for attribute in attributes:\n+                    self.assertEqual(getattr(observed, attribute),\n+                                     getattr(expected, attribute),\n+                                     msg='{} mismatch'.format(attribute))\n+            else:\n+                self.assertSequenceEqual(observed_result, expected_result)", "created_at": "2017-06-22T14:01:53Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxODk0MA==", "fields": {"body": "maybe assertComparableObjectsEqual?\nup to you :)", "diff": "@@ -52,6 +54,18 @@ class LocalBearTestHelper(unittest.TestCase):\n     If you miss some methods, get in contact with us, we'll be happy to help!\n     \"\"\"\n \n+    def assertObjectsEqual(self, observed_result, expected_result):", "created_at": "2017-06-22T14:04:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUyMDI1NQ==", "fields": {"body": "you don't use this value any further^^", "diff": "@@ -65,11 +65,29 @@ def run(self):\n               '-b {}'.format(current_version)])\n         VERSION = get_version()\n \n-with open('requirements.txt') as requirements:\n-    required = requirements.read().splitlines()\n+dependency_links = []", "created_at": "2017-06-22T14:09:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzY0MjAwNw==", "fields": {"body": "I still don't like this, why do we need it?", "diff": "@@ -32,14 +34,20 @@ def __init__(self, documentation, docstyle_definition,\n         :param marker:\n             The three-element tuple with marker strings, that identified this\n             documentation comment.\n-        :param range:\n-            The position range of type ``TextRange``.\n+        :param position:\n+            The starting ``TextPosition`` of the documentation.\n         \"\"\"\n         self.documentation = documentation\n         self.docstyle_definition = docstyle_definition\n         self.indent = indent\n         self.marker = marker\n-        self.range = range\n+        self.position = position\n+        self.assemble = None if position is None else self.assemble()", "created_at": "2017-06-22T23:05:14Z", "last_edited_at": "2017-06-22T23:05:23Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzY0Mjc4Ng==", "fields": {"body": "hmm indentation doesn't look so right, but okay :P", "diff": "@@ -52,6 +54,19 @@ class LocalBearTestHelper(unittest.TestCase):\n     If you miss some methods, get in contact with us, we'll be happy to help!\n     \"\"\"\n \n+    def assertComparableObjectsEqual(self, observed_result, expected_result):\n+        for observed, expected in zip_longest(\n+                observed_result, expected_result):\n+            if (isinstance(observed, Comparable)\n+                and isinstance(expected, Comparable)) and (\n+                        type(observed) is type(expected)):", "created_at": "2017-06-22T23:11:15Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzY3ODU0NQ==", "fields": {"body": "chat -> the chatroom\nThe line should read:\nWhen you say \"Hello World\" in the chatroom, cobot (our gitter bot) will invite you", "diff": "@@ -82,29 +82,22 @@ What documentation was missing? What was hard to understand?\n Once you complete this, please take the time and\n `fill this form <https://coala.io/usability>`_ so we can improve this!\n \n-Step 1. Meet the Community!\n----------------------------\n+Step 1. Meet the Community and Get an Invitation to the Organization\n+--------------------------------------------------------------------\n \n To get started, the first step is to meet the community. We use gitter to\n-communicate, and there the helpful community will guide you.\n-Join us at `coala gitter <https://coala.io/chat>`_.\n-The newcomers should ping us \"Hello World\" to let us know they are here\n-because we care!\n-\n-**Congratulations!** You are now part of our community.\n-\n-Step 2. Grab an Invitation to the Organization\n-----------------------------------------------\n+communicate, and there the helpful community will guide you. Join us at\n+`coala gitter <https://coala.io/chat>`_. The newcomers should ping us \"Hello\n+World\" to let us know they are here because we care!\n \n-Let us know on gitter that you are interested in contributing and ask for an\n-invitation to our org. This is your first step towards contributing.\n-A maintainer will command ``cobot`` (our gitter bot) to invite\n-you and be part of the Newcomer team.\n-The invitation will be sent by mail and you will have to accept\n-it to join. If you don't find the invitation, accept it `here <https://github.com/coala>`__.\n+When you say \"Hello World\" in chat ``cobot`` (our gitter bot) will invite you", "created_at": "2017-06-23T06:14:26Z", "last_edited_at": null, "author": "nityeshaga", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg0MDI0NQ==", "fields": {"body": "Also this should be MultipleAspectFoundError.", "diff": "@@ -0,0 +1,47 @@\n+class aspectTypeError(TypeError):\n+    \"\"\"\n+    This error is raised when an object is not an ``aspectclass`` or an\n+    instance of ``aspectclass``\n+    \"\"\"\n+\n+    def __init__(self, item):\n+        self.item = item\n+        message = ('{} is not an aspectclass or an instance of an '\n+                   'aspectclass'.format(repr(self.item)))\n+        super().__init__(message)\n+\n+\n+class aspectLookupError(LookupError):\n+    \"\"\"\n+    Error that raised when trying to search aspect.\n+    \"\"\"\n+\n+    def __init__(self, aspectname, message=None):\n+        self.aspectname = aspectname\n+        if message is None:\n+            message = ('error when trying to search aspect named {}'\n+                       .format(repr(aspectname)))\n+        super().__init__(message)\n+\n+\n+class aspectNotFoundError(aspectLookupError):\n+    \"\"\"\n+    No aspect found.\n+    \"\"\"\n+\n+    def __init__(self, aspectname):\n+        message = ('no aspect named {}'.format(repr(aspectname)))\n+        super().__init__(aspectname, message)\n+\n+\n+class MultipleaspectFoundError(aspectLookupError):", "created_at": "2017-06-23T20:42:22Z", "last_edited_at": null, "author": "Monal5031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3NDIyNA==", "fields": {"body": "Add username as well, of the user that created the issue, so he remains in the loop", "diff": "@@ -136,9 +136,18 @@ def create_issut_cmd(self, msg, match):\n         repo_name = match.group(1)\n         iss_title = match.group(2)\n         iss_description = match.group(3) if match.group(3) is not None else ''\n+\n+        try:  # This is gitter backend specific\n+            link = '\\nOpened via [gitter](https://gitter.im/{}?at={})'.format(", "created_at": "2017-06-24T09:26:02Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3OTQ0NQ==", "fields": {"body": "Should this be changed to\nFalse keeps unused variables.", "diff": "@@ -22,11 +22,12 @@ def run(self, filename, file,\n \n         - Unneeded pass statements.\n         - Unneeded builtin imports.\n+        - Unused variables - might have side effects\n \n         :param remove_all_unused_imports:\n             True removes all unused imports - might have side effects\n         :param remove_unused_variables:\n-            True removes unused variables - might have side effects\n+            False doesn't remove unused variables", "created_at": "2017-06-24T15:36:05Z", "last_edited_at": null, "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg4NjY3NQ==", "fields": {"body": "this comment is not clear and simple.\nAnd None should be described in the docstring.\nAnd add a blank line in the code after this if , like you have done after the raise below.", "diff": "@@ -43,6 +46,53 @@ def append_to_sections(sections,\n         key, str(value), origin, from_cli=from_cli, to_append=to_append))\n \n \n+def extract_aspects_from_section(section):\n+    \"\"\"\n+    Extract aspects and its related setting from a section and create an\n+    aspectlist from it.\n+\n+    :section: Section object.\n+    :return:  aspectlist containing aspectclass instance with user-defined\n+              tastes.\n+    \"\"\"\n+    if not len(section.get('aspects')):\n+        # Off switch for aspect-based configuration", "created_at": "2017-06-24T22:22:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg4NjczNQ==", "fields": {"body": "This would be a breaking change.  Instead, use aspects=None.", "diff": "@@ -167,6 +167,7 @@ def run_local_bear(message_queue,\n                    file_dict,\n                    bear_instance,\n                    filename,\n+                   aspects,", "created_at": "2017-06-24T22:25:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg5MTk4Nw==", "fields": {"body": "full stop missing", "diff": "@@ -101,12 +100,57 @@ def func(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, z):\n         parameters (maybe by creating more functions or using libraries).\n         \"\"\"\n \n+\n+@MethodSmell.subaspect\n+class LongMethod:\n+    \"\"\"\n+    This aspect checks for methods and functions with a large number\n+    of lines.\n+    \"\"\"\n+    class docs:\n+        example = \"\"\"\n+            # Here is a method with one line of code\n+            def func():\n+                print('coala is always written with lowercase `c`)\n+        \"\"\"\n+        example_language = 'python'\n+        importance_reason = \"\"\"\n+        The longer a method or function is, the harder it becomes to\n+        understand and maintain it. Also long methods easily introduce\n+        unwanted duplicate code to our codebase.\n+        \"\"\"\n+        fix_suggestions = \"\"\"\n+        Extracting methods or functions is a fix for this.\n+        \"\"\"\n     max_method_length = Taste[int](\n         'Represents the max number of lines for a method or a function\\'s'\n         'definition.',\n-        (40,), default=40)\n+        (5, 40), default=40)\n+\n+\n+@MethodSmell.subaspect\n+class LongParameterList:\n+    \"\"\"\n+    This aspect checks for methods and functions with a large number of\n+    paramters.\n+    \"\"\"\n+    class docs:\n+        example = \"\"\"\n+        def func(a, b, c, d, e, f, g, h, i, j, k):\n+            pass\n+        \"\"\"\n+        example_language = 'python'\n+        importance_reason = \"\"\"\n+        Refactoring such methods and functions may reveal some duplicated\n+        code, make the code shorter, easy to read and maintain", "created_at": "2017-06-25T07:04:22Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg5MjE1MQ==", "fields": {"body": "as they right?", "diff": "@@ -1,72 +1,65 @@\n-from coalib.bearlib.aspects import Root\n+from coalib.bearlib.aspects import Root, Taste\n \n \n @Root.subaspect\n class Spelling:\n     \"\"\"\n-    This aspect describes spelling of your source code.\n+    This aspect checks for misspelled words in your docs.\n     \"\"\"\n     class docs:\n         example = \"\"\"\n-        `Coala`, `AspectsYEAH`\n+        'Tihs si surly som incoreclt speling.\n+        `Coala` is always written with a lowercase `c`.\n         \"\"\"\n-        example_language = 'All'\n+        example_language = 'English'\n         importance_reason = \"\"\"\n-        They are words we always want to be written the way we want like the\n-        name of our app eg: `coala`...\n+        Words should always be written as the are supposed to be,\n+        standartization facilitates communication.\n         \"\"\"\n         fix_suggestions = \"\"\"\n-        Use coala :) to detect what word is not written as expected, given\n-        that there is a bear for it ;).\n+        Use the correct spelling for the misspelled words.\n         \"\"\"\n \n \n @Spelling.subaspect\n-class aspectsYEAH:\n+class GeneralMisSpelledWord:\n     \"\"\"\n-    This aspect dictates that the term ``aspects`` and ``aspect`` must have\n-    all letters in lower case and the term ``aspectsYEAH`` must match the\n-    exact expression.\n+    This aspect checks for misspelled words in your docs, given a specific\n+    language.\n     \"\"\"\n     class docs:\n         example = \"\"\"\n-        Valid Cases:\n-        # aspects are the mother of all futures of coala\n-        # ``aspectsYEAH`` project is simply awesome\n-        Invalid Cases:\n-        # Aspects are the mother of all futures of coala\n-        # ``aspectsyeah`` project is simply awesome\n+        This is toatly wonrg.\n         \"\"\"\n-        example_language = 'All'\n+        example_language = 'English'\n         importance_reason = \"\"\"\n-        The concepts of aspects in coala are too fundamental to contain any\n-        upper-case letters.\n+        Words should always be written as the are supposed to be.", "created_at": "2017-06-25T07:12:50Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg5NzYzMQ==", "fields": {"body": "i think its standardization too", "diff": "@@ -1,72 +1,65 @@\n-from coalib.bearlib.aspects import Root\n+from coalib.bearlib.aspects import Root, Taste\n \n \n @Root.subaspect\n class Spelling:\n     \"\"\"\n-    This aspect describes spelling of your source code.\n+    This aspect checks for misspelled words in your docs.\n     \"\"\"\n     class docs:\n         example = \"\"\"\n-        `Coala`, `AspectsYEAH`\n+        'Tihs si surly som incoreclt speling.\n+        `Coala` is always written with a lowercase `c`.\n         \"\"\"\n-        example_language = 'All'\n+        example_language = 'English'\n         importance_reason = \"\"\"\n-        They are words we always want to be written the way we want like the\n-        name of our app eg: `coala`...\n+        Words should always be written as the are supposed to be,\n+        standartization facilitates communication.", "created_at": "2017-06-25T12:19:16Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgxODQ5MA==", "fields": {"body": "deduplicate code:\ncoafile_sections = load_config_file(config, log_printer, silent=silent or save)", "diff": "@@ -183,7 +186,11 @@ def load_configuration(arg_list, log_printer, arg_parser=None):\n             # but to a specific file.\n             save = True\n \n-        coafile_sections = load_config_file(config, log_printer, silent=save)\n+        if silent:\n+            coafile_sections = load_config_file(config, log_printer, silent)\n+        else:\n+            coafile_sections = load_config_file(\n+                config, log_printer, silent=save)", "created_at": "2017-06-23T18:40:38Z", "last_edited_at": "2017-06-23T18:40:53Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgzMjkwMw==", "fields": {"body": "can you change the function name and docstring to make it more specific.\nLike the docstring should explain the extra regex", "diff": "@@ -179,23 +179,25 @@ def _compile_multi_match_regex(strings):\n     :param strings: The strings to match.\n     :return:        A regex object.\n     \"\"\"\n-    return re.compile('|'.join(re.escape(s) for s in strings))\n+    return re.compile('^\\s*(?P<marker>' +\n+                      ('|'.join(re.escape(s) for s in strings)) +\n+                      ')')", "created_at": "2017-06-23T19:59:15Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgzODcwMQ==", "fields": {"body": "can you add a comment this is being ignored", "diff": "@@ -64,3 +64,7 @@ def foobar_triangle(side_A, side_B, side_C):\n     :return: returns perimeter\n     \"\"\"\n     return side_A + side_B + side_C\n+\n+    fancy_string_variable = \"\"\"", "created_at": "2017-06-23T20:33:38Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgzOTczNw==", "fields": {"body": "I think the name should be AspectTypeError as to follow python pep8 naming guideines.", "diff": "@@ -0,0 +1,47 @@\n+class aspectTypeError(TypeError):", "created_at": "2017-06-23T20:39:42Z", "last_edited_at": null, "author": "Monal5031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgzOTg3Nw==", "fields": {"body": "Also this should be AspectLookupError.", "diff": "@@ -0,0 +1,47 @@\n+class aspectTypeError(TypeError):\n+    \"\"\"\n+    This error is raised when an object is not an ``aspectclass`` or an\n+    instance of ``aspectclass``\n+    \"\"\"\n+\n+    def __init__(self, item):\n+        self.item = item\n+        message = ('{} is not an aspectclass or an instance of an '\n+                   'aspectclass'.format(repr(self.item)))\n+        super().__init__(message)\n+\n+\n+class aspectLookupError(LookupError):", "created_at": "2017-06-23T20:40:27Z", "last_edited_at": null, "author": "Monal5031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzk0OTU2Mw==", "fields": {"body": "really??", "diff": "@@ -54,6 +54,31 @@ def __init__(self, module):\n                 subaspect = getattr(submod, submodname)\n                 setattr(self, submodname, subaspect)\n \n+    def get(self, aspectname, multi_find=False):\n+        \"\"\"\n+        Wrapper for ``__getitem__`` that doesn't raise exception for searching\n+        non existing aspect.\n+\n+        :param aspectname:\n+            Name of the aspect that should be searched.\n+        :multi_find:\n+            In the case of multiple matches, True value will make function\n+            return those matches as list.\n+        :raises MultipleAspectFoundError:\n+            When finding multiple aspect with same name AND `multi_find` is\n+            True.", "created_at": "2017-06-26T08:10:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzk2NTg4Mw==", "fields": {"body": "Remove that multi_find feature. The method shouldn't return either a single aspect or a sequence of aspects based on the same kind of input. That's confusing and needs a check every time what you actually got. Let's maybe implement some .get_all() for that later...", "diff": "@@ -54,6 +54,31 @@ def __init__(self, module):\n                 subaspect = getattr(submod, submodname)\n                 setattr(self, submodname, subaspect)\n \n+    def get(self, aspectname, multi_find=False):", "created_at": "2017-06-26T09:31:33Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzk4MDMyOA==", "fields": {"body": "I return None", "diff": "@@ -54,6 +54,31 @@ def __init__(self, module):\n                 subaspect = getattr(submod, submodname)\n                 setattr(self, submodname, subaspect)\n \n+    def get(self, aspectname, multi_find=False):", "created_at": "2017-06-26T10:49:38Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzk5Mzg4OA==", "fields": {"body": "You still have the parameter here...?", "diff": "@@ -54,6 +54,31 @@ def __init__(self, module):\n                 subaspect = getattr(submod, submodname)\n                 setattr(self, submodname, subaspect)\n \n+    def get(self, aspectname, multi_find=False):", "created_at": "2017-06-26T12:16:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzkwNTE5MQ==", "fields": {"body": "The exact numbers are debatable, but I'd change them to 70 and 95.", "diff": "@@ -3,6 +3,19 @@\n from dependency_management.requirements.PipRequirement import PipRequirement\n from vulture import Vulture\n \n+CONFIDENCE_MAP = {\n+    'attribute': 50,\n+    'class': 50,\n+    'function': 50,\n+    'import': 100,\n+    'property': 50,\n+    'variable': 50,", "created_at": "2017-06-25T18:09:29Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDA1ODM0Ng==", "fields": {"body": "A comma missing after [\"coala\", \"vulture\"], therefore no projects are visible on #312 (comment)", "diff": "@@ -212,6 +215,7 @@ projects = [\n         \"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n         \"markdown\": \"vulture.md\",\n         \"collaborating_projects\" : [\"coala\", \"vulture\"]", "created_at": "2017-06-26T16:35:47Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDI0MTIwMA==", "fields": {"body": "Here's the screenshot you requested earlier with the developer's involved field modified for a project.", "diff": "@@ -212,6 +215,7 @@ projects = [\n         \"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n         \"markdown\": \"vulture.md\",\n         \"collaborating_projects\" : [\"coala\", \"vulture\"]", "created_at": "2017-06-27T10:53:54Z", "last_edited_at": null, "author": "arrayslayer", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkyODU0OQ==", "fields": {"body": "oh boy, we need to split this file \ud83d\ude1f", "diff": "@@ -680,5 +680,57 @@ coala should support generating metrics for your code.\",\n         \"markdown\": \"cobot_enhancement.md\",\n         \"collaborating_projects\": [\"coala\"],\n         \"in_progress\": true\n+    },\n+    {\n+        \"name\": \"Use coala CI on a popular GitHub repository\",\n+        \"desc\": \"Use coala CI on a popular GitHub project, of your choice, using a Docker image on Travis CI, and report the results to the coala developers.\",\n+        \"requirements\" : [\n+            \"Joined http://coala.io/chat .\",\n+        ],\n+        \"difficulty\": \"beginner\",\n+        \"issues\": [\n+            \"https://github.com/coala/meta/issues/58\",\n+            \"https://github.com/coala/meta/issues/81\"\n+        ],\n+        \"mentors\" : [\n+            \"jayvdb\",\n+            \"sils\"\n+        ],\n+        \"initiatives\": [\"GCI\"],\n+        \"tags\": [\"community\", \"docker\"],\n+        \"markdown\": \"use_coala.md\",\n+        \"collaborating_projects\": [\"docker-coala-base\"]\n+    },\n+    {\n+        \"name\": \"Use coala CI on a popular GitHub repository - Advanced\",\n+        \"desc\": \"Fix a popular GitHub project so that the repository contents conform to linter rules that are verified by coala CI on each commit using Travis CI.\",\n+        \"requirements\" : [\n+            \"Completed task 'use_coala'.\",\n+        ],\n+        \"difficulty\": \"medium\",\n+        \"mentors\" : [\n+            \"jayvdb\",\n+            \"sils\"\n+        ],\n+        \"initiatives\": [\"GCI\"],\n+        \"tags\": [\"community\", \"docker\"],\n+        \"markdown\": \"use_coala_2.md\",\n+        \"collaborating_projects\": [\"docker-coala-base\"]\n+    },\n+    {\n+        \"name\": \"Use coala CI on a popular GitHub repository\",\n+        \"desc\": \"Use coala CI on a popular GitHub project, of your choice, using a Docker image on Travis CI, and report the results to the coala developers.\",\n+        \"requirements\" : [\n+            \"Completed task 'use_coala_2'.\",\n+        ],\n+        \"difficulty\": \"medium\",\n+        \"mentors\" : [\n+            \"jayvdb\",\n+            \"sils\"\n+        ],\n+        \"initiatives\": [\"GCI\"],\n+        \"tags\": [\"community\", \"docker\"],\n+        \"markdown\": \"use_coala_3.md\",\n+        \"collaborating_projects\": [\"docker-coala-base\"]", "created_at": "2017-06-29T22:34:46Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkzODk4OA==", "fields": {"body": "We can remove the headings from individual files as the heading will be already visible in the left side pane.", "diff": "@@ -0,0 +1,463 @@\n+# Use coala CI on a popular GitHub repository", "created_at": "2017-06-29T23:57:01Z", "last_edited_at": "2017-06-30T00:35:13Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA5ODkyMQ==", "fields": {"body": "can you add an asciinema of an example working with th bear?", "diff": "@@ -0,0 +1,37 @@\n+from os.path import dirname\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='pyang',\n+        use_stderr=True,\n+        output_format='regex',\n+        output_regex=r'.*:(?P<line>\\d+):\\s*(?P<message>.*)')\n+class YANGBear:\n+    \"\"\"\n+    Lints `YANG <https://en.wikipedia.org/wiki/YANG>`__ model files using\n+    ``pyang``.\n+\n+    From `RFC 7950 <https://tools.ietf.org/html/rfc7950>`__:\n+\n+    _\"YANG is a data modeling language used to model configuration data,\n+    state data, Remote Procedure Calls, and notifications for network\n+    management protocols.\"_\n+\n+    See <https://pypi.python.org/pypi/pyang> for more information.\n+    \"\"\"\n+    LANGUAGES = {'YANG'}\n+    REQUIREMENTS = {PipRequirement('pyang', '1.7.1')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax'}\n+    SEE_MORE = 'https://pypi.python.org/pypi/pyang'", "created_at": "2017-06-30T18:10:48Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTE1Nzc2Ng==", "fields": {"body": "This should not be necessary here.\nIt should be a method of Bear or FunctionMetadata, if something similar & sensible doesnt already exist.\nAlso this algorithm should be recursive (c.f. #3663)", "diff": "@@ -26,20 +26,45 @@ def execute_bear(bear, *args, **kwargs):\n     return list(bear_output_generator)\n \n \n+def get_local_bear_run_settings_dict(local_bear, settings_dict):", "created_at": "2017-07-01T07:56:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTE2NjQ4Ng==", "fields": {"body": "Eh, why did this grow?  Is this because of your changes in LocalBearTestHelper.py, or caused by your other commit which changes Bear.py?\nI can only see 8 in tests/test_bears/ and the extra ones are in TestBearDep.  but why are they only appearing now, and not before?  Were they hidden intentionally?\nI think it would be good to assert the exact list, as that helps show there are multiple levels of dependencies, and different types (some are hidden in the same file).", "diff": "@@ -71,7 +71,7 @@ def test_show_all_bears(self):\n                 coala.main, 'coala', '--json', '-B', '-I')\n             self.assertEqual(retval, 0)\n             output = json.loads(stdout)\n-            self.assertEqual(len(output['bears']), 8)\n+            self.assertEqual(len(output['bears']), 13)", "created_at": "2017-07-01T18:12:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTE2NjU3NA==", "fields": {"body": "what if the bear-dependency has itself dependencies?", "diff": "@@ -33,12 +33,28 @@ def get_results(local_bear,\n                 create_tempfile=True,\n                 tempfile_kwargs={},\n                 settings={}):\n+    if local_bear.BEAR_DEPS:\n+        # Get results of bear's dependencies first\n+        deps_results = dict()\n+        for bear in local_bear.BEAR_DEPS:", "created_at": "2017-07-01T18:18:10Z", "last_edited_at": "2017-07-01T18:20:58Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTM0MjkwOA==", "fields": {"body": "It was different modules \ud83d\ude05", "diff": "@@ -19,6 +19,7 @@\n from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n from coalib.results.SourceRange import SourceRange\n from coalib.settings.Setting import glob_list\n+from coalib.settings.Section import extract_aspects_from_section", "created_at": "2017-07-03T18:46:13Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDEwMQ==", "fields": {"body": "that's all information travis-lint provides? :/", "diff": "@@ -0,0 +1,29 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GemRequirement import GemRequirement\n+\n+\n+@linter(executable='travis',\n+        output_format='regex',\n+        output_regex=r'\\[x\\]\\s+(?P<message>.+)')", "created_at": "2017-07-03T15:54:41Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDIxNQ==", "fields": {"body": "maybe enclose .travis.yml in double backticks?", "diff": "@@ -0,0 +1,29 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GemRequirement import GemRequirement\n+\n+\n+@linter(executable='travis',\n+        output_format='regex',\n+        output_regex=r'\\[x\\]\\s+(?P<message>.+)')\n+class TravisLintBear:\n+    \"\"\"\n+    A validator for your .travis.yml that attempts to reduce common build", "created_at": "2017-07-03T15:55:14Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDQ4Ng==", "fields": {"body": "another newline plase ;) 2 newlines between imports and code \ud83d\udc4d", "diff": "@@ -0,0 +1,143 @@\n+from queue import Queue\n+\n+from bears.yaml.TravisLintBear import TravisLintBear\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from coala_utils.ContextManagers import prepare_file\n+", "created_at": "2017-07-03T15:56:44Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDU0Mw==", "fields": {"body": "I think a separate file would be good.", "diff": "@@ -0,0 +1,143 @@\n+from queue import Queue\n+\n+from bears.yaml.TravisLintBear import TravisLintBear\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from coala_utils.ContextManagers import prepare_file\n+\n+good_file = \"\"\"\n+language: ruby\n+sudo: false\n+cache: bundler\n+rvm:\n+- 1.9.2\n+- 1.9.3\n+- 2.0.0\n+- 2.1.0\n+- 2.1.3\n+- jruby\n+os:\n+- linux\n+- osx\n+matrix:\n+  exclude:\n+  - rvm: 1.8.7\n+    os: osx\n+  - rvm: 1.9.2\n+    os: osx\n+  - rvm: 2.1.0\n+    os: osx\n+  - rvm: jruby\n+    os: osx\n+deploy:\n+  provider: rubygems\n+  api_key:\n+    secure: abcdef\n+  gem: travis\n+  on:\n+    repo: xyz/abc\n+    ruby: 2.0.0\n+    condition: \"$(uname) = Linux\"\n+\"\"\"", "created_at": "2017-07-03T15:56:55Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDU3MQ==", "fields": {"body": "same here --> separate file", "diff": "@@ -0,0 +1,143 @@\n+from queue import Queue\n+\n+from bears.yaml.TravisLintBear import TravisLintBear\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from coala_utils.ContextManagers import prepare_file\n+\n+good_file = \"\"\"\n+language: ruby\n+sudo: false\n+cache: bundler\n+rvm:\n+- 1.9.2\n+- 1.9.3\n+- 2.0.0\n+- 2.1.0\n+- 2.1.3\n+- jruby\n+os:\n+- linux\n+- osx\n+matrix:\n+  exclude:\n+  - rvm: 1.8.7\n+    os: osx\n+  - rvm: 1.9.2\n+    os: osx\n+  - rvm: 2.1.0\n+    os: osx\n+  - rvm: jruby\n+    os: osx\n+deploy:\n+  provider: rubygems\n+  api_key:\n+    secure: abcdef\n+  gem: travis\n+  on:\n+    repo: xyz/abc\n+    ruby: 2.0.0\n+    condition: \"$(uname) = Linux\"\n+\"\"\"\n+\n+bad_file = \"\"\"\n+language: python\n+sudo: false\n+cache: bundler\n+rvm:\n+- 1.9.2\n+- 1.9.3\n+- 2.0.0\n+- 2.1.0\n+- 2.1.3\n+- jruby\n+os:\n+- linux\n+- osx\n+matrix:\n+  exclude:\n+  - rvm: 1.8.7\n+    os: osx\n+  - rvm: 1.9.2\n+    os: osx\n+  - rvm: 2.1.0\n+    os: osx\n+  - rvm: jruby\n+    os: osx\n+deploy:\n+  provider: rubygems\n+  api_key:\n+    secure: abcdef\n+  gem: travis\n+  on:\n+    repo: xyz/abc\n+    ruby: 2.0.0\n+    condition: \"$(uname) = Linux\"\n+\"\"\"", "created_at": "2017-07-03T15:57:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMzNjEwNg==", "fields": {"body": "etc.", "diff": "@@ -0,0 +1,30 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.GemRequirement import GemRequirement\n+\n+\n+@linter(executable='travis',\n+        output_format='regex',\n+        output_regex=r'\\[x\\]\\s+(?P<message>.+)')\n+class TravisLintBear:\n+    \"\"\"\n+    A validator for your ``.travis.yml`` that attempts to reduce common build\n+    errors such as :\n+\n+    - invalid YAML\n+    - missing language key\n+    - unsupported runtime versions of Ruby, PHP, OTP, etc", "created_at": "2017-07-03T17:52:08Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMzODA1Nw==", "fields": {"body": "own package import ;)\nbelow coalib imports with a newline in between ;)", "diff": "@@ -0,0 +1,72 @@\n+import os\n+from queue import Queue\n+\n+from bears.yaml.TravisLintBear import TravisLintBear", "created_at": "2017-07-03T18:07:13Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQzMDUyOQ==", "fields": {"body": "settings' names usually start with either allow, prohibit or use would you follow that convention ? this is super important as it is part of settings unification", "diff": "@@ -0,0 +1,866 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='astyle',\n+        output_format='corrected',\n+        use_stdin=True)\n+class ArtisticStyleBear:\n+    \"\"\"\n+    Artistic Style is a source code indenter, formatter,\n+    and beautifier for the C, C++, C++/CLI, Objective\u2011C,\n+    C# and Java programming languages.\n+    \"\"\"\n+\n+    LANGUAGES = {'C', 'C++', 'Objective-C', 'C#', 'Java'}\n+    REQUIREMENTS = {DistributionRequirement(apt_get='astyle')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Formatting'}\n+    SEE_MORE = 'http://astyle.sourceforge.net/astyle.html'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         bracket_style: str='',\n+                         use_spaces: bool=None,\n+                         indent_size: int=4,\n+                         attach_braces_to_namespace: bool=True,\n+                         attach_braces_to_class: bool=True,\n+                         attach_braces_to_inline: bool=True,\n+                         attach_braces_to_extern: bool=False,", "created_at": "2017-07-04T09:35:07Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQzMTgyMA==", "fields": {"body": "q -> q; . -> .", "diff": "@@ -0,0 +1,866 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='astyle',\n+        output_format='corrected',\n+        use_stdin=True)\n+class ArtisticStyleBear:\n+    \"\"\"\n+    Artistic Style is a source code indenter, formatter,\n+    and beautifier for the C, C++, C++/CLI, Objective\u2011C,\n+    C# and Java programming languages.\n+    \"\"\"\n+\n+    LANGUAGES = {'C', 'C++', 'Objective-C', 'C#', 'Java'}\n+    REQUIREMENTS = {DistributionRequirement(apt_get='astyle')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Formatting'}\n+    SEE_MORE = 'http://astyle.sourceforge.net/astyle.html'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         bracket_style: str='',\n+                         use_spaces: bool=None,\n+                         indent_size: int=4,\n+                         attach_braces_to_namespace: bool=True,\n+                         attach_braces_to_class: bool=True,\n+                         attach_braces_to_inline: bool=True,\n+                         attach_braces_to_extern: bool=False,\n+                         indent_classes: bool=True,\n+                         indent_modifiers: bool=True,\n+                         indent_switches: bool=True,\n+                         indent_cases: bool=True,\n+                         indent_namespaces: bool=False,\n+                         indent_labels: bool=True,\n+                         indent_preproc_block: bool=True,\n+                         indent_preproc_definition: bool=True,\n+                         indent_preproc_conditionals: bool=True,\n+                         indent_column_one_comments: bool=True,\n+                         pad_header_blocks: bool=True,\n+                         pad_operators: bool=True,\n+                         pad_parenthesis: bool=False,\n+                         pad_parenthesis_out: bool=False,\n+                         pad_parenthesis_in: bool=False,\n+                         delete_empty_lines_in_func: bool=False,\n+                         break_closing_braces: bool=False,\n+                         break_elseifs: bool=False,\n+                         break_one_line_headers: bool=False,\n+                         add_braces_to_one_line_conditionals: bool=False,\n+                         remove_braces_from_one_line_conditionals: bool=False,\n+                         remove_comment_prefix: bool=True):\n+        \"\"\"\n+        :param bracket_style:\n+            Brace Style options define the brace style to use.\n+            For example: Allman style uses braces that are broken from the\n+            previous block. If set to ``allman``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                    {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Java style uses braces that are attached to the end of\n+            the last line of the previous block. If set to ``java``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Kernighan & Ritchie style uses linux braces. Opening\n+            braces are broken from namespaces, classes, and function\n+            definitions. The braces are attached to everything else, including\n+            arrays, structs, enums, and statements within a function.\n+            If set to ``kr``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Stroustrup style uses linux braces with closing\n+            headers broken from closing braces. Opening braces are broken from\n+            function definitions only. The opening braces are attached to\n+            everything else, including namespaces, classes, arrays, structs,\n+            enums, and statements within a function. If set to ``stroustrup``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Whitesmith style uses broken, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with the following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``whitesmith``, prefer::\n+\n+                int Foo(bool isBar)\n+                    {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: VTK (Visualization Toolkit) style uses broken,\n+            indented braces, except for the opening brace. Switch blocks are\n+            indented to prevent a 'hanging indent' with following case\n+            statements. If set to ``vtk``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Banner style uses attached, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``banner``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: GNU style uses broken braces and indented blocks.\n+            Extra indentation is added to blocks within a function only. Other\n+            braces and blocks are broken, but NOT indented. This style\n+            frequently is used with an indent of 2 spaces. If set to ``gnu``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                            bar();\n+                            return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Linux style uses linux braces. Opening braces are\n+            broken from namespace, class, and function definitions. The braces\n+            are attached to everything else, including arrays, structs, enums,\n+            and statements within a function. The minimum conditional indent is\n+            one-half indent. If you want a different minimum conditional\n+            indent, use the K&R style instead. This style works best with a\n+            large indent. It frequently is used with an indent of 8 spaces.\n+            If set to ``linux``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                        if (isFoo) {\n+                                bar();\n+                                return 1;\n+                        } else\n+                                return 0;\n+                }\n+\n+            For example: Horstmann style uses broken braces and run-in\n+            statements. Switches are indented to allow a run-in to the opening\n+            switch block. This style frequently is used with an indent of 3\n+            spaces. If set to ``horstmann``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Google style uses attached braces and indented class\n+            access modifiers. This is not actually a unique brace\n+            style, but is Java style with a non-brace variation. This style\n+            frequently is used with an indent of 2 spaces. If set to\n+            ``google``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Mozilla style uses linux braces. Opening braces are\n+            broken from classes, structs, enums, and function definitions. The\n+            braces are attached to everything else, including namespaces,\n+            arrays, and statements within a function. This style frequently is\n+            used with an indent of 2 spaces. If set to ``mozilla``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Pico style uses broken braces and run-in statements\n+            with attached closing braces. The closing brace is attached to the\n+            last line in the block. Switches are indented to allow a run-in to\n+            the opening switch block. This style frequently is used with an\n+            indent of 2 spaces. If set to ``pico``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1; }\n+                    else\n+                        return 0; }\n+\n+            For example: Lisp style uses attached opening and closing braces.\n+            The closing brace is attached to the last line in the block.\n+            If set to ``lisp``,\n+            prefer::\n+\n+                int Foo(bool isBar) {\n+                if (isBar) {\n+                    bar()\n+                    return 1; }\n+                else\n+                    return 0; }\n+\n+        :param use_spaces:\n+            In the following examples, q space is indicated with a . (dot), a", "created_at": "2017-07-04T09:41:06Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQzMzI1Nw==", "fields": {"body": "Number of spaces per indentation level use the same docs as in the other bears", "diff": "@@ -0,0 +1,866 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='astyle',\n+        output_format='corrected',\n+        use_stdin=True)\n+class ArtisticStyleBear:\n+    \"\"\"\n+    Artistic Style is a source code indenter, formatter,\n+    and beautifier for the C, C++, C++/CLI, Objective\u2011C,\n+    C# and Java programming languages.\n+    \"\"\"\n+\n+    LANGUAGES = {'C', 'C++', 'Objective-C', 'C#', 'Java'}\n+    REQUIREMENTS = {DistributionRequirement(apt_get='astyle')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Formatting'}\n+    SEE_MORE = 'http://astyle.sourceforge.net/astyle.html'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         bracket_style: str='',\n+                         use_spaces: bool=None,\n+                         indent_size: int=4,\n+                         attach_braces_to_namespace: bool=True,\n+                         attach_braces_to_class: bool=True,\n+                         attach_braces_to_inline: bool=True,\n+                         attach_braces_to_extern: bool=False,\n+                         indent_classes: bool=True,\n+                         indent_modifiers: bool=True,\n+                         indent_switches: bool=True,\n+                         indent_cases: bool=True,\n+                         indent_namespaces: bool=False,\n+                         indent_labels: bool=True,\n+                         indent_preproc_block: bool=True,\n+                         indent_preproc_definition: bool=True,\n+                         indent_preproc_conditionals: bool=True,\n+                         indent_column_one_comments: bool=True,\n+                         pad_header_blocks: bool=True,\n+                         pad_operators: bool=True,\n+                         pad_parenthesis: bool=False,\n+                         pad_parenthesis_out: bool=False,\n+                         pad_parenthesis_in: bool=False,\n+                         delete_empty_lines_in_func: bool=False,\n+                         break_closing_braces: bool=False,\n+                         break_elseifs: bool=False,\n+                         break_one_line_headers: bool=False,\n+                         add_braces_to_one_line_conditionals: bool=False,\n+                         remove_braces_from_one_line_conditionals: bool=False,\n+                         remove_comment_prefix: bool=True):\n+        \"\"\"\n+        :param bracket_style:\n+            Brace Style options define the brace style to use.\n+            For example: Allman style uses braces that are broken from the\n+            previous block. If set to ``allman``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                    {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Java style uses braces that are attached to the end of\n+            the last line of the previous block. If set to ``java``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Kernighan & Ritchie style uses linux braces. Opening\n+            braces are broken from namespaces, classes, and function\n+            definitions. The braces are attached to everything else, including\n+            arrays, structs, enums, and statements within a function.\n+            If set to ``kr``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Stroustrup style uses linux braces with closing\n+            headers broken from closing braces. Opening braces are broken from\n+            function definitions only. The opening braces are attached to\n+            everything else, including namespaces, classes, arrays, structs,\n+            enums, and statements within a function. If set to ``stroustrup``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Whitesmith style uses broken, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with the following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``whitesmith``, prefer::\n+\n+                int Foo(bool isBar)\n+                    {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: VTK (Visualization Toolkit) style uses broken,\n+            indented braces, except for the opening brace. Switch blocks are\n+            indented to prevent a 'hanging indent' with following case\n+            statements. If set to ``vtk``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Banner style uses attached, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``banner``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: GNU style uses broken braces and indented blocks.\n+            Extra indentation is added to blocks within a function only. Other\n+            braces and blocks are broken, but NOT indented. This style\n+            frequently is used with an indent of 2 spaces. If set to ``gnu``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                            bar();\n+                            return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Linux style uses linux braces. Opening braces are\n+            broken from namespace, class, and function definitions. The braces\n+            are attached to everything else, including arrays, structs, enums,\n+            and statements within a function. The minimum conditional indent is\n+            one-half indent. If you want a different minimum conditional\n+            indent, use the K&R style instead. This style works best with a\n+            large indent. It frequently is used with an indent of 8 spaces.\n+            If set to ``linux``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                        if (isFoo) {\n+                                bar();\n+                                return 1;\n+                        } else\n+                                return 0;\n+                }\n+\n+            For example: Horstmann style uses broken braces and run-in\n+            statements. Switches are indented to allow a run-in to the opening\n+            switch block. This style frequently is used with an indent of 3\n+            spaces. If set to ``horstmann``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Google style uses attached braces and indented class\n+            access modifiers. This is not actually a unique brace\n+            style, but is Java style with a non-brace variation. This style\n+            frequently is used with an indent of 2 spaces. If set to\n+            ``google``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Mozilla style uses linux braces. Opening braces are\n+            broken from classes, structs, enums, and function definitions. The\n+            braces are attached to everything else, including namespaces,\n+            arrays, and statements within a function. This style frequently is\n+            used with an indent of 2 spaces. If set to ``mozilla``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Pico style uses broken braces and run-in statements\n+            with attached closing braces. The closing brace is attached to the\n+            last line in the block. Switches are indented to allow a run-in to\n+            the opening switch block. This style frequently is used with an\n+            indent of 2 spaces. If set to ``pico``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1; }\n+                    else\n+                        return 0; }\n+\n+            For example: Lisp style uses attached opening and closing braces.\n+            The closing brace is attached to the last line in the block.\n+            If set to ``lisp``,\n+            prefer::\n+\n+                int Foo(bool isBar) {\n+                if (isBar) {\n+                    bar()\n+                    return 1; }\n+                else\n+                    return 0; }\n+\n+        :param use_spaces:\n+            In the following examples, q space is indicated with a . (dot), a\n+            tab is indicated by a > (greater than).\n+            For example: If ``None``, the default option of 4 spaces will be\n+            used as below::\n+\n+                void Foo() {\n+                ....if (isBar1\n+                ............&& isBar2)\n+                ........bar();\n+                }\n+\n+            For example: If set to ``True``, spaces will be used for\n+            indentation.\n+            For example: If set to ``False``, tabs will be used for\n+            indentation, and spaces for continuation line alignment as below::\n+\n+                void Foo() {\n+                >   if (isBar1\n+                >   ........&& isBar2)\n+                >   >   bar();\n+                }\n+\n+        :param indent_size:\n+            Specifies the number of spaces per indent.", "created_at": "2017-07-04T09:49:03Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTU5ODEzNg==", "fields": {"body": "You've changed the indent levels of the code, resulting in lots of lines changing, which makes review harder.\nThis can be avoided here, by using\nif not (code and 200 <= code < 400): continue", "diff": "@@ -86,55 +62,40 @@ def run(self, filename, file,\n         `do_not_ever_open = 'https://api.acme.inc/delete-all-data'` wiping out\n         all your data.\n \n-        :param network_timeout:    A dict mapping URLs and timeout to be\n-                                   used for that URL. All the URLs that have\n-                                   the same host as that of URLs provided\n-                                   will be passed that timeout. It can also\n-                                   contain a wildcard timeout entry with key\n-                                   '*'. The timeout of all the websites not\n-                                   in the dict will be the value of the key\n-                                   '*'.\n-        :param link_ignore_regex:  A regex for urls to ignore.\n-        :param link_ignore_list:   Comma separated url globs to ignore.\n+        :param dependency_results: Results given by URLBear.\n         :param follow_redirects:   Set to true to check all redirect urls.\n         \"\"\"\n         self._mc = MementoClient()\n \n-        network_timeout = {urlparse(url).netloc\n-                           if not url == '*' else '*': timeout\n-                           for url, timeout in network_timeout.items()}\n-\n-        if link_ignore_list != self.DEFAULT_IGNORE:\n-            link_ignore_list.extend(self.DEFAULT_IGNORE)\n-\n-        for (line_number, link,\n-             code, context) in self.analyze_links_in_file(\n-                file, network_timeout, link_ignore_regex, link_ignore_list):\n-            status = MementoBear.check_archive(self._mc, link)\n-            if not status:\n-                yield Result.from_values(\n-                    self,\n-                    ('This link is not archived yet, visit '\n-                     'https://web.archive.org/save/%s to get it archived.'\n-                     % link),\n-                    file=filename,\n-                    line=line_number,\n-                    severity=RESULT_SEVERITY.INFO\n-                )\n-\n-            if follow_redirects and 300 <= code < 400:  # HTTP status 30x\n-                redirect_urls = MementoBear.get_redirect_urls(link)\n-\n-                for url in redirect_urls:\n-                    status = MementoBear.check_archive(self._mc, url)\n-                    if not status:\n-                        yield Result.from_values(\n-                            self,\n-                            ('This link redirects to %s and not archived yet, '\n-                             'visit https://web.archive.org/save/%s to get it '\n-                             'archived.'\n-                             % (url, url)),\n-                            file=filename,\n-                            line=line_number,\n-                            severity=RESULT_SEVERITY.INFO\n-                        )\n+        for result in dependency_results.get(URLBear.name, []):\n+            line_number, link, code, context = result.contents\n+\n+            if code and 200 <= code < 400:", "created_at": "2017-07-05T09:40:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTUwMTQ5OQ==", "fields": {"body": "can we instead have one of those sphinx/docutils directives like a note/warning?\nthe syntax is something like .. warning: but I am not fully sure", "diff": "@@ -1,6 +1,9 @@\n Bear Installation Tool\n ======================\n \n+**PLEASE NOTE: cib is currently broken. Most of the commands listed here will\n+ not work.**", "created_at": "2017-07-04T15:49:45Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTczMDU4Mw==", "fields": {"body": "you should also check good files \ud83d\udc4d", "diff": "@@ -1,57 +1,91 @@\n import os\n+from queue import Queue\n+\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n \n from bears.ruby.RuboCopBear import RuboCopBear\n-from coalib.testing.LocalBearTestHelper import verify_local_bear\n \n-good_file = \"\"\"def good_name\n-  test if something\n-end\n-\"\"\"\n \n-bad_file = \"\"\"def badName\n-  test if something\n-end\n-\"\"\"\n+def get_testfile_path(name):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'test_files',\n+                        name)\n+\n+\n+def load_testfile(name):\n+    with open(get_testfile_path(name)) as f:\n+        return f.readlines()\n \n \n-RuboCopBearTest = verify_local_bear(RuboCopBear,\n-                                    invalid_files=(bad_file,),\n-                                    valid_files=(good_file,))\n+@generate_skip_decorator(RuboCopBear)\n+class RuboCopBearTest(LocalBearTestHelper):\n \n-# Testing Config\n-rubocop_config = os.path.join(os.path.dirname(__file__),\n-                              'test_files',\n-                              'rubocop_config.yaml')\n+    def setUp(self):\n+        self.uut = RuboCopBear(Section('name'), Queue())\n+\n+    def test_good_file(self):\n+        filename = 'good_file.rb'\n+        file_contents = load_testfile(filename)\n+        self.check_results(\n+            self.uut,\n+            file_contents,\n+            [],\n+            filename=get_testfile_path(filename))\n+\n+    def test_bad_file(self):\n+        filename = 'bad_file.rb'\n+        file_contents = load_testfile(filename)\n+        self.check_results(\n+            self.uut,\n+            file_contents,\n+            [Result.from_values('RuboCopBear (Style/MethodName)',\n+                                message='Use snake_case for method names.',\n+                                file=get_testfile_path(filename),\n+                                line=1,\n+                                column=5,\n+                                end_line=1,\n+                                end_column=12,\n+                                severity=RESULT_SEVERITY.INFO)],\n+            filename=get_testfile_path(filename))\n \n \n # bad file becomes good and vice-versa\n-RuboCopBearConfigFileTest = verify_local_bear(\n-                                RuboCopBear,\n-                                valid_files=(bad_file,),\n-                                invalid_files=(good_file,),\n-                                settings={'rubocop_config': rubocop_config})\n-\n-# Testing settings\n-another_good_file = \"\"\"\n-def goodindent\n- # 1 space indent\n-end\n-\"\"\"\n-\n-another_bad_file = \"\"\"\n-def badindent\n-  # 2 spaces indent\n-end\n-\"\"\"\n-\n-RuboCopBearSettingsTest = verify_local_bear(\n-                              RuboCopBear,\n-                              valid_files=(another_good_file,),\n-                              invalid_files=(another_bad_file,),\n-                              settings={'indent_size': 1})\n-\n-RuboCopBearSettingsTest = verify_local_bear(\n-                              RuboCopBear,\n-                              valid_files=(bad_file,),\n-                              invalid_files=(good_file,),\n-                              settings={'method_name_case': 'camel'})\n+    def test_config_file(self):\n+        filename = 'good_file.rb'\n+        file_contents = load_testfile(filename)\n+        self.check_results(\n+            self.uut,\n+            file_contents,\n+            [Result.from_values('RuboCopBear (Style/MethodName)',\n+                                message='Use camelCase for method names.',\n+                                file=get_testfile_path(filename),\n+                                line=1,\n+                                column=5,\n+                                end_line=1,\n+                                end_column=14,\n+                                severity=RESULT_SEVERITY.INFO)],\n+            filename=get_testfile_path(filename),\n+            settings={'rubocop_config': get_testfile_path(\n+                'rubocop_config.yaml')})\n+\n+    def test_indent_size(self):\n+        filename = 'bad_indent_file.rb'\n+        file_contents = load_testfile(filename)\n+        self.check_results(\n+            self.uut,\n+            file_contents,\n+            [Result.from_values('RuboCopBear (Layout/CommentIndentation)',\n+                                message='Incorrect indentation detected '\n+                                        '(column 2 instead of 1).',\n+                                file=get_testfile_path(filename),\n+                                line=2,\n+                                column=3,\n+                                end_line=2,\n+                                end_column=20,\n+                                severity=RESULT_SEVERITY.INFO)],\n+            filename=get_testfile_path(filename),", "created_at": "2017-07-05T19:03:47Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTgyMDY5NQ==", "fields": {"body": "Our motive is to use the latest version of rubocop. We were using 0.47.1 in the earlier case and due to an upstream release i.e. 0.48, our CI broke. As a temporary fix, I had to pin the version to 0.47.1 to make sure that the tree was green again. Now that we have a solution, I think it would be a good option to get rid of the pinning and install the latest version.", "diff": "@@ -19,7 +19,7 @@ class RuboCopBear:\n     \"\"\"\n \n     LANGUAGES = {'Ruby'}\n-    REQUIREMENTS = {GemRequirement('rubocop', '0.47.1'),\n+    REQUIREMENTS = {GemRequirement('rubocop'),", "created_at": "2017-07-06T06:33:56Z", "last_edited_at": "2017-07-06T06:46:51Z", "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk3NTI0Ng==", "fields": {"body": "use excludes= so it is more readable.", "diff": "@@ -10,6 +10,17 @@\n \n class AspectListTest(unittest.TestCase):\n \n+    def setUp(self):\n+        self.aspectlist_excludes = AspectList(\n+            [Metadata.CommitMessage.Shortlog, Metadata.CommitMessage.Body],\n+            [Metadata.CommitMessage.Shortlog.TrailingPeriod,", "created_at": "2017-07-06T18:12:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk3NTI3Mg==", "fields": {"body": "use excludes= so it is more readable.", "diff": "@@ -10,6 +10,17 @@\n \n class AspectListTest(unittest.TestCase):\n \n+    def setUp(self):\n+        self.aspectlist_excludes = AspectList(\n+            [Metadata.CommitMessage.Shortlog, Metadata.CommitMessage.Body],\n+            [Metadata.CommitMessage.Shortlog.TrailingPeriod,\n+             Metadata.CommitMessage.Body.Existence])\n+        self.instancelist_excludes = AspectList(\n+            [Metadata.CommitMessage.Shortlog('py'),\n+             Metadata.CommitMessage.Body('py')],\n+            [Metadata.CommitMessage.Shortlog.TrailingPeriod,", "created_at": "2017-07-06T18:12:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk5NDU2MA==", "fields": {"body": "maybe just call the file indent.rb, as in this context it isn't bad?", "diff": "@@ -1,57 +1,111 @@\n import os\n+from queue import Queue\n+\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n \n from bears.ruby.RuboCopBear import RuboCopBear\n-from coalib.testing.LocalBearTestHelper import verify_local_bear\n \n-good_file = \"\"\"def good_name\n-  test if something\n-end\n-\"\"\"\n \n-bad_file = \"\"\"def badName\n-  test if something\n-end\n-\"\"\"\n+def get_testfile_path(name):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'test_files',\n+                        name)\n+\n+\n+def load_testfile(name):\n+    with open(get_testfile_path(name)) as f:\n+        return f.readlines()\n+\n \n+@generate_skip_decorator(RuboCopBear)\n+class RuboCopBearTest(LocalBearTestHelper):\n \n-RuboCopBearTest = verify_local_bear(RuboCopBear,\n-                                    invalid_files=(bad_file,),\n-                                    valid_files=(good_file,))\n+    def setUp(self):\n+        self.uut = RuboCopBear(Section('name'), Queue())\n \n-# Testing Config\n-rubocop_config = os.path.join(os.path.dirname(__file__),\n-                              'test_files',\n-                              'rubocop_config.yaml')\n+    def test_good_file(self):\n+        filename = 'good_file.rb'\n+        file_contents = load_testfile(filename)\n+        self.check_results(\n+            self.uut,\n+            file_contents,\n+            [],\n+            filename=get_testfile_path(filename))\n+\n+    def test_bad_file(self):\n+        filename = 'bad_file.rb'\n+        file_contents = load_testfile(filename)\n+        self.check_results(\n+            self.uut,\n+            file_contents,\n+            [Result.from_values('RuboCopBear (Style/MethodName)',\n+                                message='Use snake_case for method names.',\n+                                file=get_testfile_path(filename),\n+                                line=1,\n+                                column=5,\n+                                end_line=1,\n+                                end_column=12,\n+                                severity=RESULT_SEVERITY.INFO)],\n+            filename=get_testfile_path(filename))\n \n \n # bad file becomes good and vice-versa\n-RuboCopBearConfigFileTest = verify_local_bear(\n-                                RuboCopBear,\n-                                valid_files=(bad_file,),\n-                                invalid_files=(good_file,),\n-                                settings={'rubocop_config': rubocop_config})\n-\n-# Testing settings\n-another_good_file = \"\"\"\n-def goodindent\n- # 1 space indent\n-end\n-\"\"\"\n-\n-another_bad_file = \"\"\"\n-def badindent\n-  # 2 spaces indent\n-end\n-\"\"\"\n-\n-RuboCopBearSettingsTest = verify_local_bear(\n-                              RuboCopBear,\n-                              valid_files=(another_good_file,),\n-                              invalid_files=(another_bad_file,),\n-                              settings={'indent_size': 1})\n-\n-RuboCopBearSettingsTest = verify_local_bear(\n-                              RuboCopBear,\n-                              valid_files=(bad_file,),\n-                              invalid_files=(good_file,),\n-                              settings={'method_name_case': 'camel'})\n+    def test_bad_config_file(self):\n+        filename = 'good_file.rb'\n+        file_contents = load_testfile(filename)\n+        self.check_results(\n+            self.uut,\n+            file_contents,\n+            [Result.from_values('RuboCopBear (Style/MethodName)',\n+                                message='Use camelCase for method names.',\n+                                file=get_testfile_path(filename),\n+                                line=1,\n+                                column=5,\n+                                end_line=1,\n+                                end_column=14,\n+                                severity=RESULT_SEVERITY.INFO)],\n+            filename=get_testfile_path(filename),\n+            settings={'rubocop_config': get_testfile_path(\n+                'rubocop_config.yaml')})\n+\n+    def test_good_config_file(self):\n+        filename = 'bad_file.rb'\n+        file_contents = load_testfile(filename)\n+        self.check_results(\n+            self.uut,\n+            file_contents,\n+            [],\n+            filename=get_testfile_path(filename),\n+            settings={'rubocop_config': get_testfile_path(\n+                'rubocop_config.yaml')})\n+\n+    def test_bad_indent_size(self):\n+        filename = 'bad_indent_file.rb'\n+        file_contents = load_testfile(filename)\n+        self.check_results(\n+            self.uut,\n+            file_contents,\n+            [Result.from_values('RuboCopBear (Layout/CommentIndentation)',\n+                                message='Incorrect indentation detected '\n+                                        '(column 2 instead of 1).',\n+                                file=get_testfile_path(filename),\n+                                line=2,\n+                                column=3,\n+                                end_line=2,\n+                                end_column=20,\n+                                severity=RESULT_SEVERITY.INFO)],\n+            filename=get_testfile_path(filename),\n+            settings={'indent_size': 1})\n+\n+    def test_good_indent_size(self):\n+        filename = 'bad_indent_file.rb'", "created_at": "2017-07-06T19:30:38Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk5NzE4NQ==", "fields": {"body": "aspect instances make no sense here", "diff": "@@ -21,14 +21,19 @@ def __init__(self, seq=()):\n \n         :param seq: A sequence containing either aspectclass, aspectclass\n                     instance, or string of partial/full qualified aspect name.\n+        :param excludes: A sequence of either aspectclass, aspectclass\n+                         instance, or aspect name that marked as excluded", "created_at": "2017-07-06T19:43:24Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA5MTkxMA==", "fields": {"body": "You can add the link in the SEE_MORE attribute. Something like :\nSEE_MORE = 'https://standardjs.com/rules.html'", "diff": "@@ -0,0 +1,25 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='standard',\n+        output_format='regex',\n+        output_regex=r'  (?P<filename>[^:]+):(?P<line>\\d+):(?P<column>\\d+):'\n+                     r' (?P<message>.+)')\n+class JSStandardBear:\n+    \"\"\"\n+    JavaScript Standard Style\n+\n+    Find out more at <https://standardjs.com/rules.html>.\n+    \"\"\"\n+\n+    LANGUAGES = {'JavaScript', 'JSX'}\n+    REQUIREMENTS = {NpmRequirement('standard', '7')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax'}\n+    CAN_FIX = {'Formatting'}\n+", "created_at": "2017-07-07T08:15:04Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA5MjAzNw==", "fields": {"body": "This line won't be needed once we have the SEE_MORE attribute. See comment above.", "diff": "@@ -0,0 +1,25 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='standard',\n+        output_format='regex',\n+        output_regex=r'  (?P<filename>[^:]+):(?P<line>\\d+):(?P<column>\\d+):'\n+                     r' (?P<message>.+)')\n+class JSStandardBear:\n+    \"\"\"\n+    JavaScript Standard Style\n+\n+    Find out more at <https://standardjs.com/rules.html>.", "created_at": "2017-07-07T08:15:57Z", "last_edited_at": "2017-07-07T10:33:46Z", "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA5Mjg2NQ==", "fields": {"body": "The imports should be like :\nfrom coalib.testing.LocalBearTestHelper import verify_local_bear\n\nfrom bears.js.JSStandardBear import JSStandardBear\n\nI know that many files have imports in the order that you've done but that's incorrect. See PEP8 style of imports \ud83d\ude09", "diff": "@@ -0,0 +1,77 @@\n+from bears.js.JSStandardBear import JSStandardBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear", "created_at": "2017-07-07T08:20:30Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA5MjkwOA==", "fields": {"body": "Note that we leave a line before our bear import.", "diff": "@@ -0,0 +1,77 @@\n+from bears.js.JSStandardBear import JSStandardBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear", "created_at": "2017-07-07T08:20:45Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjAwMDg1Nw==", "fields": {"body": "Change argument defaults to None. Otherwise you always do checks like if excludes .... But there can be sequence that are False but can anyway contain elements. Best is always seq=None, excludes=None and then check if excludes is None .... It's also written in some python docs...", "diff": "@@ -7,7 +7,7 @@ class AspectList(list):\n     List-derived container to hold aspects.\n     \"\"\"\n \n-    def __init__(self, seq=()):\n+    def __init__(self, seq=(), excludes=()):", "created_at": "2017-07-06T20:00:02Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ0MzY5MQ==", "fields": {"body": "I actually don't have something against this longer documentation, but we definitely need some header line that summarizes the possible values and their meanings in a few sentences \ud83d\udc4d", "diff": "@@ -0,0 +1,866 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='astyle',\n+        output_format='corrected',\n+        use_stdin=True)\n+class ArtisticStyleBear:\n+    \"\"\"\n+    Artistic Style is a source code indenter, formatter,\n+    and beautifier for the C, C++, C++/CLI, Objective\u2011C,\n+    C# and Java programming languages.\n+    \"\"\"\n+\n+    LANGUAGES = {'C', 'C++', 'Objective-C', 'C#', 'Java'}\n+    REQUIREMENTS = {DistributionRequirement(apt_get='astyle')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Formatting'}\n+    SEE_MORE = 'http://astyle.sourceforge.net/astyle.html'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         bracket_style: str='',\n+                         use_spaces: bool=None,\n+                         indent_size: int=4,\n+                         attach_braces_to_namespace: bool=True,\n+                         attach_braces_to_class: bool=True,\n+                         attach_braces_to_inline: bool=True,\n+                         attach_braces_to_extern: bool=False,\n+                         indent_classes: bool=True,\n+                         indent_modifiers: bool=True,\n+                         indent_switches: bool=True,\n+                         indent_cases: bool=True,\n+                         indent_namespaces: bool=False,\n+                         indent_labels: bool=True,\n+                         indent_preproc_block: bool=True,\n+                         indent_preproc_definition: bool=True,\n+                         indent_preproc_conditionals: bool=True,\n+                         indent_column_one_comments: bool=True,\n+                         pad_header_blocks: bool=True,\n+                         pad_operators: bool=True,\n+                         pad_parenthesis: bool=False,\n+                         pad_parenthesis_out: bool=False,\n+                         pad_parenthesis_in: bool=False,\n+                         delete_empty_lines_in_func: bool=False,\n+                         break_closing_braces: bool=False,\n+                         break_elseifs: bool=False,\n+                         break_one_line_headers: bool=False,\n+                         add_braces_to_one_line_conditionals: bool=False,\n+                         remove_braces_from_one_line_conditionals: bool=False,\n+                         remove_comment_prefix: bool=True):\n+        \"\"\"\n+        :param bracket_style:\n+            Brace Style options define the brace style to use.\n+            For example: Allman style uses braces that are broken from the\n+            previous block. If set to ``allman``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                    {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Java style uses braces that are attached to the end of\n+            the last line of the previous block. If set to ``java``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Kernighan & Ritchie style uses linux braces. Opening\n+            braces are broken from namespaces, classes, and function\n+            definitions. The braces are attached to everything else, including\n+            arrays, structs, enums, and statements within a function.\n+            If set to ``kr``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Stroustrup style uses linux braces with closing\n+            headers broken from closing braces. Opening braces are broken from\n+            function definitions only. The opening braces are attached to\n+            everything else, including namespaces, classes, arrays, structs,\n+            enums, and statements within a function. If set to ``stroustrup``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Whitesmith style uses broken, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with the following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``whitesmith``, prefer::\n+\n+                int Foo(bool isBar)\n+                    {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: VTK (Visualization Toolkit) style uses broken,\n+            indented braces, except for the opening brace. Switch blocks are\n+            indented to prevent a 'hanging indent' with following case\n+            statements. If set to ``vtk``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Banner style uses attached, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``banner``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: GNU style uses broken braces and indented blocks.\n+            Extra indentation is added to blocks within a function only. Other\n+            braces and blocks are broken, but NOT indented. This style\n+            frequently is used with an indent of 2 spaces. If set to ``gnu``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                            bar();\n+                            return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Linux style uses linux braces. Opening braces are\n+            broken from namespace, class, and function definitions. The braces\n+            are attached to everything else, including arrays, structs, enums,\n+            and statements within a function. The minimum conditional indent is\n+            one-half indent. If you want a different minimum conditional\n+            indent, use the K&R style instead. This style works best with a\n+            large indent. It frequently is used with an indent of 8 spaces.\n+            If set to ``linux``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                        if (isFoo) {\n+                                bar();\n+                                return 1;\n+                        } else\n+                                return 0;\n+                }\n+\n+            For example: Horstmann style uses broken braces and run-in\n+            statements. Switches are indented to allow a run-in to the opening\n+            switch block. This style frequently is used with an indent of 3\n+            spaces. If set to ``horstmann``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Google style uses attached braces and indented class\n+            access modifiers. This is not actually a unique brace\n+            style, but is Java style with a non-brace variation. This style\n+            frequently is used with an indent of 2 spaces. If set to\n+            ``google``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Mozilla style uses linux braces. Opening braces are\n+            broken from classes, structs, enums, and function definitions. The\n+            braces are attached to everything else, including namespaces,\n+            arrays, and statements within a function. This style frequently is\n+            used with an indent of 2 spaces. If set to ``mozilla``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Pico style uses broken braces and run-in statements\n+            with attached closing braces. The closing brace is attached to the\n+            last line in the block. Switches are indented to allow a run-in to\n+            the opening switch block. This style frequently is used with an\n+            indent of 2 spaces. If set to ``pico``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1; }\n+                    else\n+                        return 0; }\n+\n+            For example: Lisp style uses attached opening and closing braces.\n+            The closing brace is attached to the last line in the block.\n+            If set to ``lisp``,\n+            prefer::\n+\n+                int Foo(bool isBar) {\n+                if (isBar) {\n+                    bar()\n+                    return 1; }\n+                else\n+                    return 0; }", "created_at": "2017-07-10T14:49:18Z", "last_edited_at": "2017-07-10T14:49:26Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ1MDQzMQ==", "fields": {"body": "after making astyle you should step out again into the previous working directory to prevent weird errors for coming installations. Or use the -C/--directory flag of make.", "diff": "@@ -55,3 +55,12 @@ if [ ! -e ~/phpmd/phpmd ]; then\n   sudo chmod +x phpmd.phar\n   sudo mv phpmd.phar ~/phpmd/phpmd\n fi\n+\n+# astyle installation\n+if [ ! -e ~/astyle/build/gcc/bin/astyle ]; then\n+  wget \"https://downloads.sourceforge.net/project/astyle/astyle/astyle%203.0.1/astyle_3.0.1_linux.tar.gz?r=&ts=1499017588&use_mirror=excellmedia\" -O ~/astyle.tar.gz\n+  tar -xvzf ~/astyle.tar.gz -C ~/\n+  cd ~/astyle/build/gcc", "created_at": "2017-07-10T15:11:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ1MTc0Nw==", "fields": {"body": "astyle is also available for dnf in Fedora 26 :)", "diff": "@@ -0,0 +1,866 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='astyle',\n+        output_format='corrected',\n+        use_stdin=True)\n+class ArtisticStyleBear:\n+    \"\"\"\n+    Artistic Style is a source code indenter, formatter,\n+    and beautifier for the C, C++, C++/CLI, Objective\u2011C,\n+    C# and Java programming languages.\n+    \"\"\"\n+\n+    LANGUAGES = {'C', 'C++', 'Objective-C', 'C#', 'Java'}\n+    REQUIREMENTS = {DistributionRequirement(apt_get='astyle')}", "created_at": "2017-07-10T15:15:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjY0ODA0MQ==", "fields": {"body": "use a list, that's faster to append to", "diff": "@@ -0,0 +1,867 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='astyle',\n+        output_format='corrected',\n+        use_stdin=True)\n+class ArtisticStyleBear:\n+    \"\"\"\n+    Artistic Style is a source code indenter, formatter,\n+    and beautifier for the C, C++, C++/CLI, Objective-C,\n+    C# and Java programming languages.\n+    \"\"\"\n+\n+    LANGUAGES = {'C', 'C++', 'Objective-C', 'C#', 'Java'}\n+    REQUIREMENTS = {\n+        DistributionRequirement(\n+            apt_get='astyle',\n+            dnf='astyle'\n+        )\n+    }\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Formatting'}\n+    SEE_MORE = 'http://astyle.sourceforge.net/astyle.html'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         bracket_style: str='',\n+                         use_spaces: bool=None,\n+                         indent_size: int=4,\n+                         attach_braces_to_namespace: bool=True,\n+                         attach_braces_to_class: bool=True,\n+                         attach_braces_to_inline: bool=True,\n+                         attach_braces_to_extern: bool=False,\n+                         indent_classes: bool=True,\n+                         indent_modifiers: bool=True,\n+                         indent_switches: bool=True,\n+                         indent_cases: bool=True,\n+                         indent_namespaces: bool=False,\n+                         indent_labels: bool=True,\n+                         indent_preproc_block: bool=True,\n+                         indent_preproc_definition: bool=True,\n+                         indent_preproc_conditionals: bool=True,\n+                         indent_column_one_comments: bool=True,\n+                         pad_header_blocks: bool=True,\n+                         pad_operators: bool=True,\n+                         pad_parenthesis: bool=False,\n+                         pad_parenthesis_out: bool=False,\n+                         pad_parenthesis_in: bool=False,\n+                         delete_empty_lines_in_func: bool=False,\n+                         break_closing_braces: bool=False,\n+                         break_elseifs: bool=False,\n+                         break_one_line_headers: bool=False,\n+                         add_braces_to_one_line_conditionals: bool=False,\n+                         remove_braces_from_one_line_conditionals: bool=False,\n+                         remove_comment_prefix: bool=True):\n+        \"\"\"\n+        :param bracket_style:\n+            Brace Style options define the brace style to use.\n+            For example: Allman style uses braces that are broken from the\n+            previous block. If set to ``allman``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                    {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Java style uses braces that are attached to the end of\n+            the last line of the previous block. If set to ``java``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Kernighan & Ritchie style uses linux braces. Opening\n+            braces are broken from namespaces, classes, and function\n+            definitions. The braces are attached to everything else, including\n+            arrays, structs, enums, and statements within a function.\n+            If set to ``kr``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Stroustrup style uses linux braces with closing\n+            headers broken from closing braces. Opening braces are broken from\n+            function definitions only. The opening braces are attached to\n+            everything else, including namespaces, classes, arrays, structs,\n+            enums, and statements within a function. If set to ``stroustrup``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Whitesmith style uses broken, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with the following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``whitesmith``, prefer::\n+\n+                int Foo(bool isBar)\n+                    {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: VTK (Visualization Toolkit) style uses broken,\n+            indented braces, except for the opening brace. Switch blocks are\n+            indented to prevent a 'hanging indent' with following case\n+            statements. If set to ``vtk``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Banner style uses attached, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``banner``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: GNU style uses broken braces and indented blocks.\n+            Extra indentation is added to blocks within a function only. Other\n+            braces and blocks are broken, but NOT indented. This style\n+            frequently is used with an indent of 2 spaces. If set to ``gnu``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                            bar();\n+                            return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Linux style uses linux braces. Opening braces are\n+            broken from namespace, class, and function definitions. The braces\n+            are attached to everything else, including arrays, structs, enums,\n+            and statements within a function. The minimum conditional indent is\n+            one-half indent. If you want a different minimum conditional\n+            indent, use the K&R style instead. This style works best with a\n+            large indent. It frequently is used with an indent of 8 spaces.\n+            If set to ``linux``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                        if (isFoo) {\n+                                bar();\n+                                return 1;\n+                        } else\n+                                return 0;\n+                }\n+\n+            For example: Horstmann style uses broken braces and run-in\n+            statements. Switches are indented to allow a run-in to the opening\n+            switch block. This style frequently is used with an indent of 3\n+            spaces. If set to ``horstmann``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Google style uses attached braces and indented class\n+            access modifiers. This is not actually a unique brace\n+            style, but is Java style with a non-brace variation. This style\n+            frequently is used with an indent of 2 spaces. If set to\n+            ``google``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Mozilla style uses linux braces. Opening braces are\n+            broken from classes, structs, enums, and function definitions. The\n+            braces are attached to everything else, including namespaces,\n+            arrays, and statements within a function. This style frequently is\n+            used with an indent of 2 spaces. If set to ``mozilla``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Pico style uses broken braces and run-in statements\n+            with attached closing braces. The closing brace is attached to the\n+            last line in the block. Switches are indented to allow a run-in to\n+            the opening switch block. This style frequently is used with an\n+            indent of 2 spaces. If set to ``pico``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1; }\n+                    else\n+                        return 0; }\n+\n+            For example: Lisp style uses attached opening and closing braces.\n+            The closing brace is attached to the last line in the block.\n+            If set to ``lisp``,\n+            prefer::\n+\n+                int Foo(bool isBar) {\n+                if (isBar) {\n+                    bar()\n+                    return 1; }\n+                else\n+                    return 0; }\n+\n+        :param use_spaces:\n+            In the following examples, q space is indicated with a . (dot), a\n+            tab is indicated by a > (greater than).\n+            For example: If ``None``, the default option of 4 spaces will be\n+            used as below::\n+\n+                void Foo() {\n+                ....if (isBar1\n+                ............&& isBar2)\n+                ........bar();\n+                }\n+\n+            For example: If set to ``True``, spaces will be used for\n+            indentation.\n+            For example: If set to ``False``, tabs will be used for\n+            indentation, and spaces for continuation line alignment as below::\n+\n+                void Foo() {\n+                >   if (isBar1\n+                >   ........&& isBar2)\n+                >   >   bar();\n+                }\n+\n+        :param indent_size:\n+            Number of spaces per indentation level.\n+            For example: If ``use_spaces`` is ``True`` and ``indent_size`` is\n+            ``3``, prefer::\n+\n+                void Foo() {\n+                ...if (isBar1\n+                .........&& isBar2)\n+                ......bar();\n+                }\n+\n+        :param attach_braces_to_namespace:\n+            Attach braces to a namespace statement. This is done\n+            regardless of the brace style being used.\n+            For example: If set to ``True``, prefer::\n+\n+                namespace FooName {\n+                ...\n+                }\n+\n+        :param attach_braces_to_class:\n+            Attach braces to a class statement. This is done regardless of the\n+            brace style being used.\n+            For example: If set to ``True``, prefer::\n+\n+                class FooClass {\n+                ...\n+                };\n+\n+        :param attach_braces_to_inline:\n+            Attach braces to class and struct inline function definitions. This\n+            option has precedence for all styles except Horstmann and\n+            Pico (run-in styles). It is effective for C++ files only.\n+            For example: If set to ``True``, prefer::\n+\n+                class FooClass\n+                {\n+                    void Foo() {\n+                    ...\n+                    }\n+                };\n+\n+        :param attach_braces_to_extern:\n+            Attach braces to a braced extern \"C\" statement. This is done\n+            regardless of the brace style being used. This option is effective\n+            for C++ files only.\n+            For example: If set to ``True``, prefer::\n+\n+                #ifdef __cplusplus\n+                extern \"C\" {\n+                #endif\n+\n+        :param indent_classes:\n+            Indent ``class`` and ``struct`` blocks so that the entire block is\n+            indented. The struct blocks are indented only if an access\n+            modifier, ``public:``, ``protected:`` or ``private:``, is declared\n+            somewhere in the struct. This option is effective for C++ files\n+            only. For example: If set to ``True``, prefer this::\n+\n+                class Foo\n+                {\n+                    public:\n+                        Foo();\n+                        virtual ~Foo();\n+                };\n+\n+            over this::\n+\n+                class Foo\n+                {\n+                public:\n+                    Foo();\n+                    virtual ~Foo();\n+                };\n+\n+        :param indent_modifiers:\n+            Indent ``class`` and ``struct`` access modifiers, ``public:``,\n+            ``protected:`` and ``private:``, one half indent. The rest of the\n+            class is not indented. This option is effective for C++ files only.\n+            For example: If set to ``True``, prefer this::\n+\n+                class Foo\n+                {\n+                  public:\n+                    Foo();\n+                    virtual ~Foo();\n+                };\n+\n+            over this::\n+\n+                class Foo\n+                {\n+                public:\n+                    Foo();\n+                    virtual ~Foo();\n+                };\n+\n+        :param indent_switches:\n+            Indent ``switch`` blocks so that the ``case X:`` statements are\n+            indented in the switch block. The entire case block is indented.\n+            For example: If set to ``True``, prefer this::\n+\n+                switch (foo)\n+                {\n+                    case 1:\n+                        a += 1;\n+                        break;\n+\n+                    case 2:\n+                    {\n+                        a += 2;\n+                        break;\n+                    }\n+                }\n+\n+            over this::\n+\n+                switch (foo)\n+                {\n+                case 1:\n+                    a += 1;\n+                    break;\n+\n+                case 2:\n+                {\n+                    a += 2;\n+                    break;\n+                }\n+                }\n+\n+        :param indent_cases:\n+            Indent ``case X:`` blocks from the ``case X:`` headers. Case\n+            statements not enclosed in blocks are NOT indented.\n+            For example: If set to ``True``, prefer this::\n+\n+                switch (foo)\n+                {\n+                    case 1:\n+                        a += 1;\n+                        break;\n+\n+                    case 2:\n+                        {\n+                            a += 2;\n+                            break;\n+                        }\n+                }\n+\n+            over this::\n+\n+                switch (foo)\n+                {\n+                    case 1:\n+                        a += 1;\n+                        break;\n+\n+                    case 2:\n+                    {\n+                        a += 2;\n+                        break;\n+                    }\n+                }\n+\n+        :param indent_namespaces:\n+            Add extra indentation to namespace blocks. This option has no\n+            effect on Java files.\n+            For example: If set to ``True``, prefer this::\n+\n+                namespace foospace\n+                {\n+                    class Foo\n+                    {\n+                        public:\n+                            Foo();\n+                            virtual ~Foo();\n+                    };\n+                }\n+\n+            over this::\n+\n+                namespace foospace\n+                {\n+                class Foo\n+                {\n+                    public:\n+                        Foo();\n+                        virtual ~Foo();\n+                };\n+                }\n+\n+        :param indent_labels:\n+            Add extra indentation to labels so they appear 1 indent less than\n+            the current indentation, rather than being flushed to the\n+            left (the default).\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo() {\n+                    while (isFoo) {\n+                        if (isFoo)\n+                            goto error;\n+                        ...\n+                    error:\n+                        ...\n+                        }\n+                }\n+\n+            over this::\n+\n+                void Foo() {\n+                    while (isFoo) {\n+                        if (isFoo)\n+                            goto error;\n+                        ...\n+                error:\n+                        ...\n+                        }\n+                }\n+\n+        :param indent_preproc_block:\n+            Indent preprocessor blocks at brace level zero and immediately\n+            within a namespace. There are restrictions on what will be\n+            indented. Blocks within methods, classes, arrays, etc., will not\n+            be indented. Blocks containing braces or multi-line define\n+            statements will not be indented. Without this option the\n+            preprocessor block is not indented.\n+            For example: If set to ``True``, prefer this::\n+\n+                #ifdef _WIN32\n+                    #include <windows.h>\n+                    #ifndef NO_EXPORT\n+                        #define EXPORT\n+                    #endif\n+                #endif\n+\n+            over this::\n+\n+                #ifdef _WIN32\n+                #include <windows.h>\n+                #ifndef NO_EXPORT\n+                #define EXPORT\n+                #endif\n+                #endif\n+\n+        :param indent_preproc_definition:\n+            Indent multi-line preprocessor definitions ending with a backslash.\n+            Should be used with ``convert_tabs_to_spaces`` for proper results.\n+            Does a pretty good job, but cannot perform miracles in obfuscated\n+            preprocessor definitions. Without this option the preprocessor\n+            statements remain unchanged.\n+            For example: If set to ``True``, prefer this::\n+\n+                #define Is_Bar(arg,a,b) \\\n+                    (Is_Foo((arg), (a)) \\\n+                     || Is_Foo((arg), (b)))\n+\n+            over this::\n+\n+                #define Is_Bar(arg,a,b) \\\n+                (Is_Foo((arg), (a)) \\\n+                || Is_Foo((arg), (b)))\n+\n+        :param indent_preproc_conditionals:\n+            Indent preprocessor conditional statements to the same level as the\n+            source code.\n+            For example: If set to ``True``, prefer this::\n+\n+                        isFoo = true;\n+                        #ifdef UNICODE\n+                        text = wideBuff;\n+                        #else\n+                        text = buff;\n+                        #endif\n+            over this::\n+\n+                        isFoo = true;\n+                #ifdef UNICODE\n+                        text = wideBuff;\n+                #else\n+                        text = buff;\n+                #endif\n+\n+        :param indent_column_one_comments:\n+            Indent C++ comments beginning in column one. By default C++\n+            comments beginning in column one are assumed to be commented-out\n+            code and not indented. This option will allow the comments to be\n+            indented with the code.\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo()\\n\"\n+                {\n+                    // comment\n+                    if (isFoo)\n+                        bar();\n+                }\n+\n+            over this::\n+\n+                void Foo()\\n\"\n+                {\n+                // comment\n+                    if (isFoo)\n+                        bar();\n+                }\n+\n+        :param pad_header_blocks:\n+            Pad empty lines around header blocks\n+            (e.g. ``if``, ``for``, ``while``...).\n+            For example: If set to ``True``, prefer this::\n+\n+                isFoo = true;\n+\n+                if (isFoo) {\n+                    bar();\n+                } else {\n+                    anotherBar();\n+                }\n+\n+                isBar = false;\n+\n+            over this::\n+\n+                isFoo = true;\n+                if (isFoo) {\n+                    bar();\n+                } else {\n+                    anotherBar();\n+                }\n+                isBar = false;\n+\n+        :param pad_operators:\n+            Insert space padding around operators. This will also pad commas.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (foo == 2)\n+                    a = bar((b - c) * a, d--);\n+\n+            over this::\n+\n+                if (foo==2)\n+                    a=bar((b-c)*a,d--);\n+\n+        :param pad_parenthesis:\n+            Insert space padding around parenthesis on both the outside and the\n+            inside.\n+            For example: If set to ``True``, prefer this::\n+\n+                if ( isFoo ( ( a+2 ), b ) )\n+                    bar ( a, b );\n+\n+            over this::\n+\n+                if (isFoo((a+2), b))\n+                    bar(a, b);\n+\n+        :param pad_parenthesis_out:\n+            Insert space padding around parenthesis on the outside only.\n+            Parenthesis that are empty will not be padded.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (isFoo ( (a+2), b) )\n+                    bar (a, b);\n+\n+            over this::\n+\n+                if (isFoo((a+2), b))\n+                    bar(a, b);\n+\n+        :param pad_parenthesis_in:\n+            Insert space padding around parenthesis on the inside only.\n+            For example: If set to ``True``, prefer this::\n+\n+                if ( isFoo( ( a+2 ), b ) )\n+                    bar( a, b );\n+\n+            over this::\n+\n+                if (isFoo((a+2), b))\n+                    bar(a, b);\n+\n+        :param delete_empty_lines_in_func:\n+            Delete empty lines within a function or method. Empty lines outside\n+            of functions or methods are NOT deleted.\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo()\n+                {\n+                    foo1 = 1;\n+                    foo2 = 2;\n+                }\n+\n+            over this::\n+\n+                void Foo()\n+                {\n+\n+                    foo1 = 1;\n+\n+                    foo2 = 2;\n+\n+                }\n+\n+        :param break_closing_braces:\n+            When used with some specific ``bracket_style``, this breaks closing\n+            headers (e.g. ``else``, ``catch``, ...) from their immediately\n+            preceding closing braces. Closing header braces are always broken\n+            with the other styles.\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo(bool isFoo) {\n+                    if (isFoo) {\n+                        bar();\n+                    }\n+                    else {\n+                        anotherBar();\n+                    }\n+                }\n+\n+            over this::\n+\n+                void Foo(bool isFoo) {\n+                    if (isFoo) {\n+                        bar();\n+                    } else {\n+                        anotherBar();\n+                    }\n+                }\n+\n+        :param break_elseifs:\n+            Break ``else if`` header combinations into separate lines.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (isFoo) {\n+                    bar();\n+                }\n+                else\n+                    if (isFoo1()) {\n+                        bar1();\n+                    }\n+                    else\n+                        if (isFoo2()) {\n+                            bar2();\n+                        }\n+\n+            over this::\n+\n+                if (isFoo) {\n+                    bar();\n+                }\n+                else if (isFoo1()) {\n+                    bar1();\n+                }\n+                else if (isFoo2()) {\n+                    bar2;\n+                }\n+\n+        :param break_one_line_headers:\n+            Break one line headers (e.g. ``if``, ``while``, ``else``, ...) from\n+            a statement residing on the same line. If the statement is enclosed\n+            in braces, the braces will be formatted according to the requested\n+            brace style.\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo(bool isFoo)\n+                {\n+                    if (isFoo1)\n+                        bar1();\n+\n+                    if (isFoo2) {\n+                        bar2();\n+                    }\n+                }\n+\n+            over this::\n+\n+                void Foo(bool isFoo)\n+                {\n+                    if (isFoo1) bar1();\n+\n+                    if (isFoo2) { bar2(); }\n+                }\n+\n+        :param add_braces_to_one_line_conditionals:\n+            Add braces to unbraced one line conditional statements\n+            (e.g. ``if``, ``for``, ``while``...). The statement must be on a\n+            single line. The braces will be added according to the requested\n+            brace style.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (isFoo) {\n+                    isFoo = false;\n+                }\n+\n+            over this::\n+\n+                if (isFoo)\n+                    isFoo = false;\n+\n+        :param remove_braces_from_one_line_conditionals:\n+            Remove braces from conditional statements\n+            (e.g. ``if``, ``for``, ``while``...). The statement must be a\n+            single statement on a single line.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (isFoo)\n+                    isFoo = false;\n+\n+            over this::\n+\n+                if (isFoo)\n+                {\n+                    isFoo = false;\n+                }\n+\n+        :param remove_comment_prefix:\n+            Remove the preceding '*' in a multi-line comment that begins a\n+            line. A trailing '*', if present, is also removed. Text that is\n+            less than one indent is indented to one indent. Text greater than\n+            one indent is not changed. Multi-line comments that begin a line,\n+            but without the preceding '*', are indented to one indent for\n+            consistency. This can slightly modify the indentation of commented\n+            out blocks of code. Lines containing all '*' are left unchanged.\n+            Extra spacing is removed from the comment close '*/'.\n+            For example: If set to ``True``, prefer this::\n+\n+                /*\n+                    comment line 1\n+                    comment line 2\n+                */\n+\n+            over this::\n+\n+                /*\n+                 * comment line 1\n+                 * comment line 2\n+                 */\n+\n+        \"\"\"\n+        rules_map = {\n+            '--attach-namespaces': attach_braces_to_namespace,\n+            '--attach-classes': attach_braces_to_class,\n+            '--attach-inlines': attach_braces_to_inline,\n+            '--attach-extern-c': attach_braces_to_extern,\n+            '--indent-classes': indent_classes,\n+            '--indent-modifiers': indent_modifiers,\n+            '--indent-switches': indent_switches,\n+            '--indent-cases': indent_cases,\n+            '--indent-namespaces': indent_namespaces,\n+            '--indent-labels': indent_labels,\n+            '--indent-preproc-block': indent_preproc_block,\n+            '--indent-preproc-define': indent_preproc_definition,\n+            '--indent-preproc-cond': indent_preproc_conditionals,\n+            '--indent-col1-comments': indent_column_one_comments,\n+            '--break-blocks': pad_header_blocks,\n+            '--pad-oper': pad_operators,\n+            '--pad-paren': pad_parenthesis,\n+            '--pad-paren-out': pad_parenthesis_out,\n+            '--pad-paren-in': pad_parenthesis_in,\n+            '--delete-empty-lines': delete_empty_lines_in_func,\n+            '--break-closing-brackets': break_closing_braces,\n+            '--break-elseifs': break_elseifs,\n+            '--break-one-line-headers': break_one_line_headers,\n+            '--add-brackets': add_braces_to_one_line_conditionals,\n+            '--remove-brackets': remove_braces_from_one_line_conditionals,\n+            '--remove-comment-prefix': remove_comment_prefix\n+        }\n+        args = ('--suffix=none', '--dry-run')", "created_at": "2017-07-11T10:10:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjY0ODI4Nw==", "fields": {"body": "like said before, can be shortened:\nargs += (k for k, v in rules_map.items() if v)", "diff": "@@ -0,0 +1,867 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='astyle',\n+        output_format='corrected',\n+        use_stdin=True)\n+class ArtisticStyleBear:\n+    \"\"\"\n+    Artistic Style is a source code indenter, formatter,\n+    and beautifier for the C, C++, C++/CLI, Objective-C,\n+    C# and Java programming languages.\n+    \"\"\"\n+\n+    LANGUAGES = {'C', 'C++', 'Objective-C', 'C#', 'Java'}\n+    REQUIREMENTS = {\n+        DistributionRequirement(\n+            apt_get='astyle',\n+            dnf='astyle'\n+        )\n+    }\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Formatting'}\n+    SEE_MORE = 'http://astyle.sourceforge.net/astyle.html'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         bracket_style: str='',\n+                         use_spaces: bool=None,\n+                         indent_size: int=4,\n+                         attach_braces_to_namespace: bool=True,\n+                         attach_braces_to_class: bool=True,\n+                         attach_braces_to_inline: bool=True,\n+                         attach_braces_to_extern: bool=False,\n+                         indent_classes: bool=True,\n+                         indent_modifiers: bool=True,\n+                         indent_switches: bool=True,\n+                         indent_cases: bool=True,\n+                         indent_namespaces: bool=False,\n+                         indent_labels: bool=True,\n+                         indent_preproc_block: bool=True,\n+                         indent_preproc_definition: bool=True,\n+                         indent_preproc_conditionals: bool=True,\n+                         indent_column_one_comments: bool=True,\n+                         pad_header_blocks: bool=True,\n+                         pad_operators: bool=True,\n+                         pad_parenthesis: bool=False,\n+                         pad_parenthesis_out: bool=False,\n+                         pad_parenthesis_in: bool=False,\n+                         delete_empty_lines_in_func: bool=False,\n+                         break_closing_braces: bool=False,\n+                         break_elseifs: bool=False,\n+                         break_one_line_headers: bool=False,\n+                         add_braces_to_one_line_conditionals: bool=False,\n+                         remove_braces_from_one_line_conditionals: bool=False,\n+                         remove_comment_prefix: bool=True):\n+        \"\"\"\n+        :param bracket_style:\n+            Brace Style options define the brace style to use.\n+            For example: Allman style uses braces that are broken from the\n+            previous block. If set to ``allman``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                    {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Java style uses braces that are attached to the end of\n+            the last line of the previous block. If set to ``java``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Kernighan & Ritchie style uses linux braces. Opening\n+            braces are broken from namespaces, classes, and function\n+            definitions. The braces are attached to everything else, including\n+            arrays, structs, enums, and statements within a function.\n+            If set to ``kr``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Stroustrup style uses linux braces with closing\n+            headers broken from closing braces. Opening braces are broken from\n+            function definitions only. The opening braces are attached to\n+            everything else, including namespaces, classes, arrays, structs,\n+            enums, and statements within a function. If set to ``stroustrup``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Whitesmith style uses broken, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with the following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``whitesmith``, prefer::\n+\n+                int Foo(bool isBar)\n+                    {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: VTK (Visualization Toolkit) style uses broken,\n+            indented braces, except for the opening brace. Switch blocks are\n+            indented to prevent a 'hanging indent' with following case\n+            statements. If set to ``vtk``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Banner style uses attached, indented braces. Switch\n+            blocks and class blocks are indented to prevent a 'hanging indent'\n+            with following case statements and C++ class modifiers\n+            (public, private, protected). If set to ``banner``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                        }\n+                    else\n+                        return 0;\n+                    }\n+\n+            For example: GNU style uses broken braces and indented blocks.\n+            Extra indentation is added to blocks within a function only. Other\n+            braces and blocks are broken, but NOT indented. This style\n+            frequently is used with an indent of 2 spaces. If set to ``gnu``,\n+            prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar)\n+                        {\n+                            bar();\n+                            return 1;\n+                        }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Linux style uses linux braces. Opening braces are\n+            broken from namespace, class, and function definitions. The braces\n+            are attached to everything else, including arrays, structs, enums,\n+            and statements within a function. The minimum conditional indent is\n+            one-half indent. If you want a different minimum conditional\n+            indent, use the K&R style instead. This style works best with a\n+            large indent. It frequently is used with an indent of 8 spaces.\n+            If set to ``linux``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                        if (isFoo) {\n+                                bar();\n+                                return 1;\n+                        } else\n+                                return 0;\n+                }\n+\n+            For example: Horstmann style uses broken braces and run-in\n+            statements. Switches are indented to allow a run-in to the opening\n+            switch block. This style frequently is used with an indent of 3\n+            spaces. If set to ``horstmann``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1;\n+                    }\n+                    else\n+                        return 0;\n+                }\n+\n+            For example: Google style uses attached braces and indented class\n+            access modifiers. This is not actually a unique brace\n+            style, but is Java style with a non-brace variation. This style\n+            frequently is used with an indent of 2 spaces. If set to\n+            ``google``, prefer::\n+\n+                int Foo(bool isBar) {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Mozilla style uses linux braces. Opening braces are\n+            broken from classes, structs, enums, and function definitions. The\n+            braces are attached to everything else, including namespaces,\n+            arrays, and statements within a function. This style frequently is\n+            used with an indent of 2 spaces. If set to ``mozilla``, prefer::\n+\n+                int Foo(bool isBar)\n+                {\n+                    if (isBar) {\n+                        bar();\n+                        return 1;\n+                    } else\n+                        return 0;\n+                }\n+\n+            For example: Pico style uses broken braces and run-in statements\n+            with attached closing braces. The closing brace is attached to the\n+            last line in the block. Switches are indented to allow a run-in to\n+            the opening switch block. This style frequently is used with an\n+            indent of 2 spaces. If set to ``pico``, prefer::\n+\n+                int Foo(bool isBar)\n+                {   if (isBar)\n+                    {   bar();\n+                        return 1; }\n+                    else\n+                        return 0; }\n+\n+            For example: Lisp style uses attached opening and closing braces.\n+            The closing brace is attached to the last line in the block.\n+            If set to ``lisp``,\n+            prefer::\n+\n+                int Foo(bool isBar) {\n+                if (isBar) {\n+                    bar()\n+                    return 1; }\n+                else\n+                    return 0; }\n+\n+        :param use_spaces:\n+            In the following examples, q space is indicated with a . (dot), a\n+            tab is indicated by a > (greater than).\n+            For example: If ``None``, the default option of 4 spaces will be\n+            used as below::\n+\n+                void Foo() {\n+                ....if (isBar1\n+                ............&& isBar2)\n+                ........bar();\n+                }\n+\n+            For example: If set to ``True``, spaces will be used for\n+            indentation.\n+            For example: If set to ``False``, tabs will be used for\n+            indentation, and spaces for continuation line alignment as below::\n+\n+                void Foo() {\n+                >   if (isBar1\n+                >   ........&& isBar2)\n+                >   >   bar();\n+                }\n+\n+        :param indent_size:\n+            Number of spaces per indentation level.\n+            For example: If ``use_spaces`` is ``True`` and ``indent_size`` is\n+            ``3``, prefer::\n+\n+                void Foo() {\n+                ...if (isBar1\n+                .........&& isBar2)\n+                ......bar();\n+                }\n+\n+        :param attach_braces_to_namespace:\n+            Attach braces to a namespace statement. This is done\n+            regardless of the brace style being used.\n+            For example: If set to ``True``, prefer::\n+\n+                namespace FooName {\n+                ...\n+                }\n+\n+        :param attach_braces_to_class:\n+            Attach braces to a class statement. This is done regardless of the\n+            brace style being used.\n+            For example: If set to ``True``, prefer::\n+\n+                class FooClass {\n+                ...\n+                };\n+\n+        :param attach_braces_to_inline:\n+            Attach braces to class and struct inline function definitions. This\n+            option has precedence for all styles except Horstmann and\n+            Pico (run-in styles). It is effective for C++ files only.\n+            For example: If set to ``True``, prefer::\n+\n+                class FooClass\n+                {\n+                    void Foo() {\n+                    ...\n+                    }\n+                };\n+\n+        :param attach_braces_to_extern:\n+            Attach braces to a braced extern \"C\" statement. This is done\n+            regardless of the brace style being used. This option is effective\n+            for C++ files only.\n+            For example: If set to ``True``, prefer::\n+\n+                #ifdef __cplusplus\n+                extern \"C\" {\n+                #endif\n+\n+        :param indent_classes:\n+            Indent ``class`` and ``struct`` blocks so that the entire block is\n+            indented. The struct blocks are indented only if an access\n+            modifier, ``public:``, ``protected:`` or ``private:``, is declared\n+            somewhere in the struct. This option is effective for C++ files\n+            only. For example: If set to ``True``, prefer this::\n+\n+                class Foo\n+                {\n+                    public:\n+                        Foo();\n+                        virtual ~Foo();\n+                };\n+\n+            over this::\n+\n+                class Foo\n+                {\n+                public:\n+                    Foo();\n+                    virtual ~Foo();\n+                };\n+\n+        :param indent_modifiers:\n+            Indent ``class`` and ``struct`` access modifiers, ``public:``,\n+            ``protected:`` and ``private:``, one half indent. The rest of the\n+            class is not indented. This option is effective for C++ files only.\n+            For example: If set to ``True``, prefer this::\n+\n+                class Foo\n+                {\n+                  public:\n+                    Foo();\n+                    virtual ~Foo();\n+                };\n+\n+            over this::\n+\n+                class Foo\n+                {\n+                public:\n+                    Foo();\n+                    virtual ~Foo();\n+                };\n+\n+        :param indent_switches:\n+            Indent ``switch`` blocks so that the ``case X:`` statements are\n+            indented in the switch block. The entire case block is indented.\n+            For example: If set to ``True``, prefer this::\n+\n+                switch (foo)\n+                {\n+                    case 1:\n+                        a += 1;\n+                        break;\n+\n+                    case 2:\n+                    {\n+                        a += 2;\n+                        break;\n+                    }\n+                }\n+\n+            over this::\n+\n+                switch (foo)\n+                {\n+                case 1:\n+                    a += 1;\n+                    break;\n+\n+                case 2:\n+                {\n+                    a += 2;\n+                    break;\n+                }\n+                }\n+\n+        :param indent_cases:\n+            Indent ``case X:`` blocks from the ``case X:`` headers. Case\n+            statements not enclosed in blocks are NOT indented.\n+            For example: If set to ``True``, prefer this::\n+\n+                switch (foo)\n+                {\n+                    case 1:\n+                        a += 1;\n+                        break;\n+\n+                    case 2:\n+                        {\n+                            a += 2;\n+                            break;\n+                        }\n+                }\n+\n+            over this::\n+\n+                switch (foo)\n+                {\n+                    case 1:\n+                        a += 1;\n+                        break;\n+\n+                    case 2:\n+                    {\n+                        a += 2;\n+                        break;\n+                    }\n+                }\n+\n+        :param indent_namespaces:\n+            Add extra indentation to namespace blocks. This option has no\n+            effect on Java files.\n+            For example: If set to ``True``, prefer this::\n+\n+                namespace foospace\n+                {\n+                    class Foo\n+                    {\n+                        public:\n+                            Foo();\n+                            virtual ~Foo();\n+                    };\n+                }\n+\n+            over this::\n+\n+                namespace foospace\n+                {\n+                class Foo\n+                {\n+                    public:\n+                        Foo();\n+                        virtual ~Foo();\n+                };\n+                }\n+\n+        :param indent_labels:\n+            Add extra indentation to labels so they appear 1 indent less than\n+            the current indentation, rather than being flushed to the\n+            left (the default).\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo() {\n+                    while (isFoo) {\n+                        if (isFoo)\n+                            goto error;\n+                        ...\n+                    error:\n+                        ...\n+                        }\n+                }\n+\n+            over this::\n+\n+                void Foo() {\n+                    while (isFoo) {\n+                        if (isFoo)\n+                            goto error;\n+                        ...\n+                error:\n+                        ...\n+                        }\n+                }\n+\n+        :param indent_preproc_block:\n+            Indent preprocessor blocks at brace level zero and immediately\n+            within a namespace. There are restrictions on what will be\n+            indented. Blocks within methods, classes, arrays, etc., will not\n+            be indented. Blocks containing braces or multi-line define\n+            statements will not be indented. Without this option the\n+            preprocessor block is not indented.\n+            For example: If set to ``True``, prefer this::\n+\n+                #ifdef _WIN32\n+                    #include <windows.h>\n+                    #ifndef NO_EXPORT\n+                        #define EXPORT\n+                    #endif\n+                #endif\n+\n+            over this::\n+\n+                #ifdef _WIN32\n+                #include <windows.h>\n+                #ifndef NO_EXPORT\n+                #define EXPORT\n+                #endif\n+                #endif\n+\n+        :param indent_preproc_definition:\n+            Indent multi-line preprocessor definitions ending with a backslash.\n+            Should be used with ``convert_tabs_to_spaces`` for proper results.\n+            Does a pretty good job, but cannot perform miracles in obfuscated\n+            preprocessor definitions. Without this option the preprocessor\n+            statements remain unchanged.\n+            For example: If set to ``True``, prefer this::\n+\n+                #define Is_Bar(arg,a,b) \\\n+                    (Is_Foo((arg), (a)) \\\n+                     || Is_Foo((arg), (b)))\n+\n+            over this::\n+\n+                #define Is_Bar(arg,a,b) \\\n+                (Is_Foo((arg), (a)) \\\n+                || Is_Foo((arg), (b)))\n+\n+        :param indent_preproc_conditionals:\n+            Indent preprocessor conditional statements to the same level as the\n+            source code.\n+            For example: If set to ``True``, prefer this::\n+\n+                        isFoo = true;\n+                        #ifdef UNICODE\n+                        text = wideBuff;\n+                        #else\n+                        text = buff;\n+                        #endif\n+            over this::\n+\n+                        isFoo = true;\n+                #ifdef UNICODE\n+                        text = wideBuff;\n+                #else\n+                        text = buff;\n+                #endif\n+\n+        :param indent_column_one_comments:\n+            Indent C++ comments beginning in column one. By default C++\n+            comments beginning in column one are assumed to be commented-out\n+            code and not indented. This option will allow the comments to be\n+            indented with the code.\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo()\\n\"\n+                {\n+                    // comment\n+                    if (isFoo)\n+                        bar();\n+                }\n+\n+            over this::\n+\n+                void Foo()\\n\"\n+                {\n+                // comment\n+                    if (isFoo)\n+                        bar();\n+                }\n+\n+        :param pad_header_blocks:\n+            Pad empty lines around header blocks\n+            (e.g. ``if``, ``for``, ``while``...).\n+            For example: If set to ``True``, prefer this::\n+\n+                isFoo = true;\n+\n+                if (isFoo) {\n+                    bar();\n+                } else {\n+                    anotherBar();\n+                }\n+\n+                isBar = false;\n+\n+            over this::\n+\n+                isFoo = true;\n+                if (isFoo) {\n+                    bar();\n+                } else {\n+                    anotherBar();\n+                }\n+                isBar = false;\n+\n+        :param pad_operators:\n+            Insert space padding around operators. This will also pad commas.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (foo == 2)\n+                    a = bar((b - c) * a, d--);\n+\n+            over this::\n+\n+                if (foo==2)\n+                    a=bar((b-c)*a,d--);\n+\n+        :param pad_parenthesis:\n+            Insert space padding around parenthesis on both the outside and the\n+            inside.\n+            For example: If set to ``True``, prefer this::\n+\n+                if ( isFoo ( ( a+2 ), b ) )\n+                    bar ( a, b );\n+\n+            over this::\n+\n+                if (isFoo((a+2), b))\n+                    bar(a, b);\n+\n+        :param pad_parenthesis_out:\n+            Insert space padding around parenthesis on the outside only.\n+            Parenthesis that are empty will not be padded.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (isFoo ( (a+2), b) )\n+                    bar (a, b);\n+\n+            over this::\n+\n+                if (isFoo((a+2), b))\n+                    bar(a, b);\n+\n+        :param pad_parenthesis_in:\n+            Insert space padding around parenthesis on the inside only.\n+            For example: If set to ``True``, prefer this::\n+\n+                if ( isFoo( ( a+2 ), b ) )\n+                    bar( a, b );\n+\n+            over this::\n+\n+                if (isFoo((a+2), b))\n+                    bar(a, b);\n+\n+        :param delete_empty_lines_in_func:\n+            Delete empty lines within a function or method. Empty lines outside\n+            of functions or methods are NOT deleted.\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo()\n+                {\n+                    foo1 = 1;\n+                    foo2 = 2;\n+                }\n+\n+            over this::\n+\n+                void Foo()\n+                {\n+\n+                    foo1 = 1;\n+\n+                    foo2 = 2;\n+\n+                }\n+\n+        :param break_closing_braces:\n+            When used with some specific ``bracket_style``, this breaks closing\n+            headers (e.g. ``else``, ``catch``, ...) from their immediately\n+            preceding closing braces. Closing header braces are always broken\n+            with the other styles.\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo(bool isFoo) {\n+                    if (isFoo) {\n+                        bar();\n+                    }\n+                    else {\n+                        anotherBar();\n+                    }\n+                }\n+\n+            over this::\n+\n+                void Foo(bool isFoo) {\n+                    if (isFoo) {\n+                        bar();\n+                    } else {\n+                        anotherBar();\n+                    }\n+                }\n+\n+        :param break_elseifs:\n+            Break ``else if`` header combinations into separate lines.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (isFoo) {\n+                    bar();\n+                }\n+                else\n+                    if (isFoo1()) {\n+                        bar1();\n+                    }\n+                    else\n+                        if (isFoo2()) {\n+                            bar2();\n+                        }\n+\n+            over this::\n+\n+                if (isFoo) {\n+                    bar();\n+                }\n+                else if (isFoo1()) {\n+                    bar1();\n+                }\n+                else if (isFoo2()) {\n+                    bar2;\n+                }\n+\n+        :param break_one_line_headers:\n+            Break one line headers (e.g. ``if``, ``while``, ``else``, ...) from\n+            a statement residing on the same line. If the statement is enclosed\n+            in braces, the braces will be formatted according to the requested\n+            brace style.\n+            For example: If set to ``True``, prefer this::\n+\n+                void Foo(bool isFoo)\n+                {\n+                    if (isFoo1)\n+                        bar1();\n+\n+                    if (isFoo2) {\n+                        bar2();\n+                    }\n+                }\n+\n+            over this::\n+\n+                void Foo(bool isFoo)\n+                {\n+                    if (isFoo1) bar1();\n+\n+                    if (isFoo2) { bar2(); }\n+                }\n+\n+        :param add_braces_to_one_line_conditionals:\n+            Add braces to unbraced one line conditional statements\n+            (e.g. ``if``, ``for``, ``while``...). The statement must be on a\n+            single line. The braces will be added according to the requested\n+            brace style.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (isFoo) {\n+                    isFoo = false;\n+                }\n+\n+            over this::\n+\n+                if (isFoo)\n+                    isFoo = false;\n+\n+        :param remove_braces_from_one_line_conditionals:\n+            Remove braces from conditional statements\n+            (e.g. ``if``, ``for``, ``while``...). The statement must be a\n+            single statement on a single line.\n+            For example: If set to ``True``, prefer this::\n+\n+                if (isFoo)\n+                    isFoo = false;\n+\n+            over this::\n+\n+                if (isFoo)\n+                {\n+                    isFoo = false;\n+                }\n+\n+        :param remove_comment_prefix:\n+            Remove the preceding '*' in a multi-line comment that begins a\n+            line. A trailing '*', if present, is also removed. Text that is\n+            less than one indent is indented to one indent. Text greater than\n+            one indent is not changed. Multi-line comments that begin a line,\n+            but without the preceding '*', are indented to one indent for\n+            consistency. This can slightly modify the indentation of commented\n+            out blocks of code. Lines containing all '*' are left unchanged.\n+            Extra spacing is removed from the comment close '*/'.\n+            For example: If set to ``True``, prefer this::\n+\n+                /*\n+                    comment line 1\n+                    comment line 2\n+                */\n+\n+            over this::\n+\n+                /*\n+                 * comment line 1\n+                 * comment line 2\n+                 */\n+\n+        \"\"\"\n+        rules_map = {\n+            '--attach-namespaces': attach_braces_to_namespace,\n+            '--attach-classes': attach_braces_to_class,\n+            '--attach-inlines': attach_braces_to_inline,\n+            '--attach-extern-c': attach_braces_to_extern,\n+            '--indent-classes': indent_classes,\n+            '--indent-modifiers': indent_modifiers,\n+            '--indent-switches': indent_switches,\n+            '--indent-cases': indent_cases,\n+            '--indent-namespaces': indent_namespaces,\n+            '--indent-labels': indent_labels,\n+            '--indent-preproc-block': indent_preproc_block,\n+            '--indent-preproc-define': indent_preproc_definition,\n+            '--indent-preproc-cond': indent_preproc_conditionals,\n+            '--indent-col1-comments': indent_column_one_comments,\n+            '--break-blocks': pad_header_blocks,\n+            '--pad-oper': pad_operators,\n+            '--pad-paren': pad_parenthesis,\n+            '--pad-paren-out': pad_parenthesis_out,\n+            '--pad-paren-in': pad_parenthesis_in,\n+            '--delete-empty-lines': delete_empty_lines_in_func,\n+            '--break-closing-brackets': break_closing_braces,\n+            '--break-elseifs': break_elseifs,\n+            '--break-one-line-headers': break_one_line_headers,\n+            '--add-brackets': add_braces_to_one_line_conditionals,\n+            '--remove-brackets': remove_braces_from_one_line_conditionals,\n+            '--remove-comment-prefix': remove_comment_prefix\n+        }\n+        args = ('--suffix=none', '--dry-run')\n+        if bracket_style:\n+            args += (''.join(('--style=', bracket_style)),)\n+        if use_spaces is True:\n+            args += (''.join(('-s', str(indent_size))),)\n+        elif use_spaces is False:\n+            args += (''.join(('-t', str(indent_size))),)\n+        for k, v in rules_map.items():\n+            if v:\n+                args += (k,)", "created_at": "2017-07-11T10:11:11Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4MTEzMQ==", "fields": {"body": "Unnecessary.", "diff": "@@ -124,3 +127,116 @@ def ls(self, msg, match):\n                 yield ''.join(selected_bears) + ' |'\n             else:\n                 yield 'No bears found for {}'.format(lang)\n+\n+    @staticmethod\n+    def construct_settings(settings):\n+        settings = settings.strip().split()\n+\n+        def is_setting(x): return '=' in x  # Ignore PycodestyleBear (E731)\n+        setting_dict = OrderedDict()\n+        for candidate in settings:\n+            if not is_setting(candidate):  # bear\n+                setting_dict[candidate.strip()] = dict()\n+            else:\n+                key, value = candidate.strip().split('=')\n+                setting_dict[list(setting_dict.keys())[-1]][key] = value\n+        return setting_dict\n+\n+    @staticmethod\n+    def position(stl, stc, enl, enc):\n+        if stc is None and enc is None:\n+            if stl != enl:\n+                return 'Between lines {} and {}'.format(stl, enl)\n+            else:\n+                return 'At line {}'.format(stl)\n+        if stc is None and enc is not None:\n+            return 'Between line {} and position {}:{}'.format(stl, enl, enc)\n+        if stc is not None and enc is None:\n+            return 'Between position {}:{} and line {}'.format(stl, stc, enl)\n+        if stl == enl:\n+            if stc == enc:\n+                return \"At {}:{}\".format(stl, stc)\n+            else:\n+                return \"At line {}, between col {} and {}\".format(stl, stc, enc)\n+        else:\n+            return \"Between positions {}:{} and {}:{}\".format(stl, stc,\n+                                                              enl, enc)\n+\n+    # Ignore PycodestyleBear, LineLengthBear\n+    @re_botcmd(pattern=r'run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```')\n+    def run(self, msg, match):\n+        \"\"\"\n+        Run coala over the given code.\n+\n+        Example: `run Bear1 setting1=something setting2=something Bear2\\ncode`\n+        \"\"\"\n+        lang = match.group(1)\n+        bear_settings = type(self).construct_settings(match.group(2))\n+        code = match.group(3)\n+\n+        yield 'coala analysis in progress...'\n+\n+        data = {\n+            \"sections\": {\n+                \"corobo\": {\n+                    \"files\": \"**.gyp\",\n+                    \"bears\": dict(bear_settings),\n+                }\n+            },\n+            \"mode\": \"coala\",\n+            \"language\": lang,\n+            \"file_data\": code,\n+        }\n+\n+        # Ignore InvalidLinkBear, this only accepts post requests\n+        rq = requests.post('https://api.gitmate.io/coala_online/', json=data)\n+        try:\n+            results = rq.json()['response']['results']['corobo']\n+        except json.JSONDecodeError:\n+            went_wrong = '\\n - '.join([\n+                'Is the bear name correct? Note that bear names are '\n+                'case sensitive.'\n+                'Are all required settings provided? If a required setting is '\n+                'not provided, analysis will fail.'\n+            ])\n+            yield 'Something went wrong, things to check for:\\n' + went_wrong\n+            self.log.exception('Something went wrong, please try again')\n+        else:\n+            if not results:\n+                yield 'Your code is flawless :tada:'\n+                return\n+            else:", "created_at": "2017-07-12T15:06:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4NTc1OQ==", "fields": {"body": "^...$ for regex so we dont repeat the invite bugs?", "diff": "@@ -124,3 +127,116 @@ def ls(self, msg, match):\n                 yield ''.join(selected_bears) + ' |'\n             else:\n                 yield 'No bears found for {}'.format(lang)\n+\n+    @staticmethod\n+    def construct_settings(settings):\n+        settings = settings.strip().split()\n+\n+        def is_setting(x): return '=' in x  # Ignore PycodestyleBear (E731)\n+        setting_dict = OrderedDict()\n+        for candidate in settings:\n+            if not is_setting(candidate):  # bear\n+                setting_dict[candidate.strip()] = dict()\n+            else:\n+                key, value = candidate.strip().split('=')\n+                setting_dict[list(setting_dict.keys())[-1]][key] = value\n+        return setting_dict\n+\n+    @staticmethod\n+    def position(stl, stc, enl, enc):\n+        if stc is None and enc is None:\n+            if stl != enl:\n+                return 'Between lines {} and {}'.format(stl, enl)\n+            else:\n+                return 'At line {}'.format(stl)\n+        if stc is None and enc is not None:\n+            return 'Between line {} and position {}:{}'.format(stl, enl, enc)\n+        if stc is not None and enc is None:\n+            return 'Between position {}:{} and line {}'.format(stl, stc, enl)\n+        if stl == enl:\n+            if stc == enc:\n+                return \"At {}:{}\".format(stl, stc)\n+            else:\n+                return \"At line {}, between col {} and {}\".format(stl, stc, enc)\n+        else:\n+            return \"Between positions {}:{} and {}:{}\".format(stl, stc,\n+                                                              enl, enc)\n+\n+    # Ignore PycodestyleBear, LineLengthBear\n+    @re_botcmd(pattern=r'run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```')", "created_at": "2017-07-12T15:21:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzM2NTYzMQ==", "fields": {"body": "Euhm, why not use StringConverter?", "diff": "@@ -152,14 +154,36 @@ def acquire_actions_and_apply(console_printer,\n             metadata_list.append(metadata)\n \n         # User can always choose no action which is guaranteed to succeed\n-        if not ask_for_action_and_apply(console_printer,\n-                                        section,\n-                                        metadata_list,\n-                                        action_dict,\n-                                        failed_actions,\n-                                        result,\n-                                        file_diff_dict,\n-                                        file_dict):\n+        if section.name == 'cli':\n+            if not ask_for_action_and_apply(console_printer,\n+                                            section,\n+                                            metadata_list,\n+                                            action_dict,\n+                                            failed_actions,\n+                                            result,\n+                                            file_diff_dict,\n+                                            file_dict):\n+                break\n+            question = format_lines(\n+                'Reprompt available actions (Y/N)? ', symbol='!')\n+            input_q = input(question)\n+            input_q = str(input_q).lower()\n+            if input_q in Constants.TRUE_STRINGS:", "created_at": "2017-07-14T00:53:08Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjc5NQ==", "fields": {"body": "better written like this:\n$scope.$watch( function () {\n    return Languages.getData();\n}, function () {\n    $scope.setLanguage(Languages.getData());\n}, true);", "diff": "@@ -29,26 +68,69 @@\n         }\n     })\n \n-    app.directive('projects',  ['$http',  '$timeout', '$location', function ($http, $timeout, $location) {\n+    app.directive('projects',  ['$http',  '$timeout', '$location', 'Languages', function ($http, $timeout, $location, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/projects.html',\n-            controller: function ($scope, $location) {\n+            controller: function ($scope, $location, Languages) {\n                 self = this\n-                lang = $location.search().lang || window.localStorage.getItem('lang');\n-                $scope.projectList = projects\n+\n+                $scope.getDefaultProjectsMetadata = function () {\n+                    $http.get('data/projects.json')\n+                    .then(function (res) {\n+                        $scope.projectList = res.data;\n+                    })\n+                }\n+\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultProjectsMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);", "created_at": "2017-07-15T01:21:29Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjk4NQ==", "fields": {"body": "better written like this:\nif (selected_language.code) {\n    return selected_language.code;\n} else {\n    return $location.search().lang || window.localStorage.getItem('lang');\n}", "diff": "@@ -1,6 +1,37 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+        setData: function (val) {\n+            angular.forEach(langs, function(v, k){\n+                if (v.code == val){\n+                    window.localStorage.setItem('lang', val);\n+                    selected_language = v;\n+                }\n+            });\n+        },\n+        getData: function () {\n+            if(selected_language.code)\n+                return selected_language.code;\n+            else return $location.search().lang || window.localStorage.getItem('lang');", "created_at": "2017-07-15T01:28:14Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTA2MQ==", "fields": {"body": "this } should have same indentation level with getAllLanguages:... doesn't it?", "diff": "@@ -1,6 +1,37 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+        setData: function (val) {\n+            angular.forEach(langs, function(v, k){\n+                if (v.code == val){\n+                    window.localStorage.setItem('lang', val);\n+                    selected_language = v;\n+                }\n+            });\n+        },\n+        getData: function () {\n+            if(selected_language.code)\n+                return selected_language.code;\n+            else return $location.search().lang || window.localStorage.getItem('lang');\n+        },\n+        getAllLanguages: function () {\n+            return langs;\n+            }", "created_at": "2017-07-15T14:08:34Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTEzNw==", "fields": {"body": "this should be new indent.\nreturn {\n    setData: function (val) {\n        angular.....\n        ....\n    }\n}", "diff": "@@ -1,6 +1,37 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+        setData: function (val) {", "created_at": "2017-07-15T14:12:32Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTI3OA==", "fields": {"body": "Same here...\nShould be\n$http.get('data/faq.json')\n    .then(function (res) {\n        ....", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {", "created_at": "2017-07-15T14:21:55Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTIxMA==", "fields": {"body": "better like this\n$http.get('data/projects.json')\n    .then(function (res) {\n        $scope.projectList = res.data;\n    });", "diff": "@@ -29,26 +68,69 @@\n         }\n     })\n \n-    app.directive('projects',  ['$http',  '$timeout', '$location', function ($http, $timeout, $location) {\n+    app.directive('projects',  ['$http',  '$timeout', '$location', 'Languages', function ($http, $timeout, $location, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/projects.html',\n-            controller: function ($scope, $location) {\n+            controller: function ($scope, $location, Languages) {\n                 self = this\n-                lang = $location.search().lang || window.localStorage.getItem('lang');\n-                $scope.projectList = projects\n+\n+                $scope.getDefaultProjectsMetadata = function () {\n+                    $http.get('data/projects.json')\n+                    .then(function (res) {\n+                        $scope.projectList = res.data;\n+                    })", "created_at": "2017-07-15T14:18:17Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQ5MQ==", "fields": {"body": "its ok to make it in single line\n$http.get('data/locale/' + $scope.lang + '/faq/' + faq.markdown).then(function (res) {", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {", "created_at": "2017-07-15T14:33:45Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQyNw==", "fields": {"body": "Here \ud83d\ude04\n$scope.$watch( function () {\n    return Languages.getData();\n}, function () {\n    $scope.setLanguage(Languages.getData());\n}, true);", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);", "created_at": "2017-07-15T14:29:19Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU0MA==", "fields": {"body": "this }) should have same indentation level with .then", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {\n+                                $scope.faqs[key].answer = res.data\n+                            }, function (error) {\n+                                $http.get($scope.faqs[key].url)\n+                                    .then(function (res) {\n+                                        $scope.faqs[key].answer = res.data;\n+                                })", "created_at": "2017-07-15T14:36:05Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU3MA==", "fields": {"body": "again \ud83d\ude04\n$http....\n    .then....", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {\n+                                $scope.faqs[key].answer = res.data\n+                            }, function (error) {\n+                                $http.get($scope.faqs[key].url)\n+                                    .then(function (res) {\n+                                        $scope.faqs[key].answer = res.data;\n+                                })\n+                            });\n+                        })\n+                    } else {\n+                        $scope.faqs.forEach(function (f, k) {\n+                            $http.get($scope.faqs[k].url)\n+                            .then(function (res) {\n+                                $scope.faqs[k].answer = res.data\n+                            });", "created_at": "2017-07-15T14:37:15Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU4OA==", "fields": {"body": "same as above ;)", "diff": "@@ -240,27 +343,36 @@\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/mentors.html',\n-            controller: function ($scope) {\n+            controller: function ($scope, $rootScope) {\n                 self = this\n                 self.mentorsList = {}\n                 self.adminsList = {}\n-                angular.forEach(projects, function(value, key){\n-                    angular.forEach(value.mentors, function(value, key){\n-                        self.mentorsList[value] =  {\n+\n+                $http.get('data/projects.json')\n+                .then(function (res) {", "created_at": "2017-07-15T14:38:14Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTUxNw==", "fields": {"body": "this }) should have same indentation level with .then", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {\n+                                $scope.faqs[key].answer = res.data\n+                            }, function (error) {\n+                                $http.get($scope.faqs[key].url)\n+                                    .then(function (res) {\n+                                        $scope.faqs[key].answer = res.data;\n+                                })", "created_at": "2017-07-15T14:35:02Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NjUwMQ==", "fields": {"body": "shouldn't we have an option for this?", "diff": "@@ -127,22 +128,23 @@ def create_arguments(filename, file, config_file,\n             'ruleSpaces': horizontal_rule_spaces,       # Bool\n             'ruleRepetition': horizontal_rule_repeat,   # int\n         }\n-        remark_configs_plugins = {}\n+        remark_lint_configs = {}\n \n         if max_line_length:\n-            remark_configs_plugins['maximumLineLength'] = max_line_length\n+            remark_lint_configs['maximumLineLength'] = max_line_length\n \n         config_json = json.dumps(remark_configs_settings)\n         # Remove { and } as remark adds them on its own\n         settings = config_json[1:-1]\n \n-        args = ['--no-color', '--quiet', '--setting', settings]\n+        args = [filename, '--no-color', '--quiet', '--setting', settings]\n \n-        if remark_configs_plugins:\n-            config_json = json.dumps(remark_configs_plugins)\n-            plugins = 'lint=' + config_json[1:-1]\n-            args += ['--use', plugins]\n+        if remark_lint_configs:\n+            config_json = json.dumps(remark_lint_configs)\n+            lint = 'lint=' + config_json[1:-1]\n+            args += ['--use', lint]\n \n+        args += ['--use', 'validate-links']", "created_at": "2017-07-15T15:27:51Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NjY1NA==", "fields": {"body": "is this maybe a separate commit?", "diff": "@@ -21,15 +21,16 @@ class MarkdownBear:\n \n     LANGUAGES = {'Markdown'}\n     REQUIREMENTS = {NpmRequirement('remark-cli', '2'),\n-                    NpmRequirement('remark-lint', '5')}\n+                    NpmRequirement('remark-lint', '5'),\n+                    NpmRequirement('remark-validate-links', '5')}\n     AUTHORS = {'The coala developers'}\n     AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n     LICENSE = 'AGPL-3.0'\n     CAN_FIX = {'Formatting'}\n \n     _output_regex = re.compile(\n         r'\\s*(?P<line>\\d+):(?P<column>\\d+)'\n-        r'\\s*(?P<severity>warning)\\s*(?P<message>.*)')\n+        r'\\s*(?P<severity>warning)\\s*(?P<message>.+?)(?:  .*|\\n|$)')", "created_at": "2017-07-15T15:37:15Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4ODE5OQ==", "fields": {"body": "the rename should be a separate commit", "diff": "@@ -127,22 +128,23 @@ def create_arguments(filename, file, config_file,\n             'ruleSpaces': horizontal_rule_spaces,       # Bool\n             'ruleRepetition': horizontal_rule_repeat,   # int\n         }\n-        remark_configs_plugins = {}\n+        remark_lint_configs = {}", "created_at": "2017-07-15T16:52:46Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4ODIwNQ==", "fields": {"body": "orientate on our InvalidLinksBear regarding setting names \ud83d\udc4d", "diff": "@@ -127,22 +128,23 @@ def create_arguments(filename, file, config_file,\n             'ruleSpaces': horizontal_rule_spaces,       # Bool\n             'ruleRepetition': horizontal_rule_repeat,   # int\n         }\n-        remark_configs_plugins = {}\n+        remark_lint_configs = {}\n \n         if max_line_length:\n-            remark_configs_plugins['maximumLineLength'] = max_line_length\n+            remark_lint_configs['maximumLineLength'] = max_line_length\n \n         config_json = json.dumps(remark_configs_settings)\n         # Remove { and } as remark adds them on its own\n         settings = config_json[1:-1]\n \n-        args = ['--no-color', '--quiet', '--setting', settings]\n+        args = [filename, '--no-color', '--quiet', '--setting', settings]\n \n-        if remark_configs_plugins:\n-            config_json = json.dumps(remark_configs_plugins)\n-            plugins = 'lint=' + config_json[1:-1]\n-            args += ['--use', plugins]\n+        if remark_lint_configs:\n+            config_json = json.dumps(remark_lint_configs)\n+            lint = 'lint=' + config_json[1:-1]\n+            args += ['--use', lint]\n \n+        args += ['--use', 'validate-links']", "created_at": "2017-07-15T16:53:09Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NTk4Mg==", "fields": {"body": "usually\n} else {", "diff": "@@ -1,6 +1,40 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+            setData: function (val) {\n+                angular.forEach(langs, function(v, k){\n+                    if (v.code == val){\n+                        window.localStorage.setItem('lang', val);\n+                        selected_language = v;\n+                    }\n+                });\n+            },\n+            getData: function () {\n+                if(selected_language.code) {\n+                    return selected_language.code;\n+                }\n+                else {", "created_at": "2017-07-16T00:37:32Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA3MQ==", "fields": {"body": "$scope.setLanguage should have same indentation level with that return ....", "diff": "@@ -29,26 +71,71 @@\n         }\n     })\n \n-    app.directive('projects',  ['$http',  '$timeout', '$location', function ($http, $timeout, $location) {\n+    app.directive('projects',  ['$http',  '$timeout', '$location', 'Languages', function ($http, $timeout, $location, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/projects.html',\n-            controller: function ($scope, $location) {\n+            controller: function ($scope, $location, Languages) {\n                 self = this\n-                lang = $location.search().lang || window.localStorage.getItem('lang');\n-                $scope.projectList = projects\n+\n+                $scope.getDefaultProjectsMetadata = function () {\n+                    $http.get('data/projects.json')\n+                        .then(function (res) {\n+                            $scope.projectList = res.data;\n+                        })\n+                }\n+\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultProjectsMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData();\n+                }, function () {\n+                        $scope.setLanguage(Languages.getData());", "created_at": "2017-07-16T00:46:01Z", "last_edited_at": "2017-07-16T03:16:34Z", "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA4MA==", "fields": {"body": "as above", "diff": "@@ -182,46 +251,83 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                        .then(function (res) {\n+                            $scope.faqs = res.data;\n+                            $scope.generateMarkdown();\n+                        })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData();\n+                }, function () {\n+                        $scope.setLanguage(Languages.getData());", "created_at": "2017-07-16T00:46:48Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwMDk2OA==", "fields": {"body": "Hmm that kinda sounds weird :D", "diff": "@@ -108,6 +110,9 @@ def create_arguments(filename, file, config_file,\n             The number of times the horizontal rule character will be repeated.\n         :param max_line_length:\n             The maximum line length allowed.\n+        :param check_valid_links:\n+            Checks if links to headings and files in markdown point to\n+            existing things.", "created_at": "2017-07-17T13:02:08Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwMTAzMA==", "fields": {"body": "Use False instead of None, we don't need a tri-state for this field.", "diff": "@@ -65,7 +66,8 @@ def create_arguments(filename, file, config_file,\n                          horizontal_rule: str='*',\n                          horizontal_rule_spaces: bool=False,\n                          horizontal_rule_repeat: int=3,\n-                         max_line_length: int=None):\n+                         max_line_length: int=None,\n+                         check_valid_links: bool=None):", "created_at": "2017-07-17T13:02:26Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwMTQ5Ng==", "fields": {"body": "do you really need filename, as the linter has use_stdin?", "diff": "@@ -136,13 +141,16 @@ def create_arguments(filename, file, config_file,\n         # Remove { and } as remark adds them on its own\n         settings = config_json[1:-1]\n \n-        args = ['--no-color', '--quiet', '--setting', settings]\n+        args = [filename, '--no-color', '--quiet', '--setting', settings]", "created_at": "2017-07-17T13:04:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwMTkxNw==", "fields": {"body": "for me it's obvious, anyway put the reason into the commit message :)", "diff": "@@ -50,7 +50,7 @@\n \n \n @generate_skip_decorator(MarkdownBear)\n-class MarkdownBearMaxLineLengthMessageTest(unittest.TestCase):\n+class MarkdownBearTest(unittest.TestCase):", "created_at": "2017-07-17T13:06:36Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwNTIzNw==", "fields": {"body": "Actually I would rephrase the shortlog to something like Improve result message or so, as this is the effective reason :)", "diff": "@@ -30,7 +30,7 @@ class MarkdownBear:\n \n     _output_regex = re.compile(\n         r'\\s*(?P<line>\\d+):(?P<column>\\d+)'\n-        r'\\s*(?P<severity>warning)\\s*(?P<message>.*)')\n+        r'\\s*(?P<severity>warning)\\s*(?P<message>.+?)(?:  .*|\\n|$)')", "created_at": "2017-07-17T13:20:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwNTQxOA==", "fields": {"body": "why you don't use output_format=regex?", "diff": "@@ -0,0 +1,240 @@\n+import json\n+import re\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='pug-lint',\n+        use_stdout=True,\n+        use_stderr=True)\n+class PugLintBear:\n+    \"\"\"\n+    A configurable linter and style checker for Pug (formerly Jade) that is a\n+    clean, whitespace-sensitive template language for writing HTML.\n+    \"\"\"\n+\n+    LANGUAGES = {'Pug'}\n+    REQUIREMENTS = {NpmRequirement('pug-lint', '2.4.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/pugjs/pug-lint'\n+\n+    _output_regex = re.compile(\n+        r'(?P<line>\\d+):?(?P<column>\\d+)? (?P<message>.+)')\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        prohibit_block_expansion: bool=True,\n+                        prohibit_class_attribute_with_static_value: bool=True,\n+                        prohibit_class_literals_before_attributes: bool=True,\n+                        prohibit_class_literals_before_id_literals: bool=True,\n+                        prohibit_class_literals: bool=True,\n+                        prohibit_duplicate_attributes: bool=True,\n+                        prohibit_html_text: bool=True,\n+                        prohibit_id_attribute_with_static_value: bool=True,\n+                        prohibit_id_literals_before_attributes: bool=True,\n+                        prohibit_id_literals: bool=True,\n+                        prohibit_legacy_mixin_call: bool=True,\n+                        prohibit_multiple_line_breaks: bool=None,\n+                        prohibit_spaces_inside_attribute_brackets: bool=True,\n+                        prohibit_string_interpolation: bool=True,\n+                        prohibit_tag_interpolation: bool=True,\n+                        prohibit_specific_attributes: typed_list(str)=None,\n+                        prohibit_specific_tags: typed_list(str)=None,\n+                        require_class_literals_before_attributes: bool=False,\n+                        require_class_literals_before_id_literals: bool=False,\n+                        require_id_literals_before_attributes: bool=False,\n+                        require_lower_case_attributes: bool=True,\n+                        require_lower_case_tags: bool=True,\n+                        require_spaces_inside_attribute_brackets: bool=False,\n+                        require_strict_equality_operators: bool=True,\n+                        validate_div_tags: bool=True,\n+                        validate_extensions: bool=True,\n+                        validate_self_closing_tags: bool=True,\n+                        preferred_quotation: str='\\'',\n+                        max_lines_per_file: int=None,\n+                        puglint_config: str=''):\n+        \"\"\"\n+        :param prohibit_block_expansion:\n+            When ``True``, disallow any block expansion operators.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                p: strong text\n+                table: tr: td text\n+\n+        :param prohibit_class_attribute_with_static_value:\n+            When ``True``, prefer class literals over class attributes with\n+            static values.\n+            For example: If set to ``True``, prefer ``span.foo`` over\n+            ``span(class='foo')``.\n+        :param prohibit_class_literals_before_attributes:\n+            When ``True``, prefer all attribute blocks to be written before\n+            any class literals.\n+            For example: If set to ``True``, prefer\n+            ``input(type='text').class`` over ``input.class(type='text')``.\n+        :param prohibit_class_literals_before_id_literals:\n+            When ``True``, prefer all ID literals to be written before any\n+            class literals.\n+            For example: If set to ``True``, prefer\n+            ``input#id.class(type='text')`` over\n+            ``input.class#id(type='text')``.\n+        :param prohibit_class_literals:\n+            When ``True``, disallow any class literals.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``.class``.\n+        :param prohibit_duplicate_attributes:\n+            When ``True``, attribute blocks should not contain any duplicates.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                div(a='a' a='b')\n+                #id(id='id')\n+\n+        :param prohibit_html_text:\n+            When ``True``, disallow any HTML text.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                <strong>html text</strong>\n+                p this is <strong>html</strong> text\n+\n+        :param prohibit_id_attribute_with_static_value:\n+            When ``True``, prefer ID literals over ``id`` attributes with\n+            static values.\n+            For example: If set to ``True``, prefer ``span#id`` over\n+            ``span(id='foo')``.\n+        :param prohibit_id_literals_before_attributes:\n+            When ``True``, prefer all attribute blocks to be written before\n+            any ID literals.\n+            For example: If set to ``True``, prefer ``input(type='text')#id``\n+            over ``input#id(type='text')``.\n+        :param prohibit_id_literals:\n+            When ``True``, disallow any ID literals.\n+            For example: If set to ``True``, ``#id`` will throw a warning.\n+        :param prohibit_legacy_mixin_call:\n+            When ``True``, disallow any legacy mixin call.\n+            When ``True``, prefer ``+myMixin(arg)`` over\n+            ``mixin myMixin(arg)``.\n+        :param prohibit_multiple_line_breaks:\n+            When ``True``, disallow multiple blank lines in a row.\n+        :param prohibit_spaces_inside_attribute_brackets:\n+            When ``True``, disallow space after opening attribute bracket and\n+            before closing attribute bracket.\n+            For example: If set to ``True``, prefer\n+            ``input(type='text' name='name' value='value')`` over\n+            ``input( type='text' name='name' value='value' )``.\n+        :param prohibit_string_interpolation:\n+            When ``True``, disallow any string interpolation operators.\n+            For example: If set to ``True``, ``h1 #{title} text`` will throw\n+            a warning.\n+        :param prohibit_tag_interpolation:\n+            When ``True``, disallow any tag interpolation operators.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                | #[strong html] text\n+                p #[strong html] text\n+\n+        :param prohibit_specific_attributes:\n+            Disallow any of the attributes specified.\n+        :param prohibit_specific_tags:\n+            Disallow any of the tags specified.\n+        :param require_class_literals_before_attributes:\n+            When ``True``, all class literals must be written before any\n+            attribute blocks.\n+        :param require_class_literals_before_id_literals:\n+            When ``True``, all class literals should be written before any\n+            ID literals.\n+        :param require_id_literals_before_attributes:\n+            When ``True``, all ID literals must be written before any\n+            attribute blocks.\n+        :param require_lower_case_attributes:\n+            When ``True``, all attributes should be written in lower case.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``div(Class='class')``.\n+        :param require_lower_case_tags:\n+            When ``True``, all tags must be written in lower case.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``Div(class='class')``.\n+        :param require_spaces_inside_attribute_brackets:\n+            When ``True``, enforce space after opening attribute bracket and\n+            before closing attribute bracket.\n+        :param require_strict_equality_operators:\n+            When ``True``, enforce the use of ``===`` and ``!==`` instead of\n+            ``==`` and ``!=``.\n+        :param validate_div_tags:\n+            When ``True``, disallow any unnecessary ``div`` tags.\n+        :param validate_extensions:\n+            When ``True``, enforce proper file extensions with inclusion and\n+            inheritance.\n+        :param validate_self_closing_tags:\n+            When ``True``, disallow any unnecessary self closing tags.\n+        :param preferred_quotation:\n+            Your preferred quotation character, e.g.``\"`` or ``'``.\n+        :param max_lines_per_file:\n+            Number of lines allowed per file.\n+        \"\"\"\n+        if puglint_config:\n+            return None\n+        else:\n+            options = {\n+                'disallowBlockExpansion': prohibit_block_expansion,\n+                'disallowClassAttributeWithStaticValue':\n+                    prohibit_class_attribute_with_static_value,\n+                'disallowClassLiteralsBeforeAttributes':\n+                    prohibit_class_literals_before_attributes,\n+                'disallowClassLiteralsBeforeIdLiterals':\n+                    prohibit_class_literals_before_id_literals,\n+                'disallowClassLiterals': prohibit_class_literals,\n+                'disallowDuplicateAttributes': prohibit_duplicate_attributes,\n+                'disallowHtmlText': prohibit_html_text,\n+                'disallowIdAttributeWithStaticValue':\n+                    prohibit_id_attribute_with_static_value,\n+                'disallowIdLiteralsBeforeAttributes':\n+                    prohibit_id_literals_before_attributes,\n+                'disallowIdLiterals': prohibit_id_literals,\n+                'disallowLegacyMixinCall': prohibit_legacy_mixin_call,\n+                'disallowMultipleLineBreaks': prohibit_multiple_line_breaks,\n+                'disallowSpacesInsideAttributeBrackets':\n+                    prohibit_spaces_inside_attribute_brackets,\n+                'disallowStringInterpolation': prohibit_string_interpolation,\n+                'disallowTagInterpolation': prohibit_tag_interpolation,\n+                'disallowSpecificAttributes': prohibit_specific_attributes,\n+                'disallowSpecificTags': prohibit_specific_tags,\n+                'requireClassLiteralsBeforeAttributes':\n+                    require_class_literals_before_attributes,\n+                'requireClassLiteralsBeforeIdLiterals':\n+                    require_class_literals_before_id_literals,\n+                'requireIdLiteralsBeforeAttributes':\n+                    require_id_literals_before_attributes,\n+                'requireLowerCaseAttributes': require_lower_case_attributes,\n+                'requireLowerCaseTags': require_lower_case_tags,\n+                'requireSpacesInsideAttributeBrackets':\n+                    require_spaces_inside_attribute_brackets,\n+                'requireStrictEqualityOperators':\n+                    require_strict_equality_operators,\n+                'validateDivTags': validate_div_tags,\n+                'validateExtensions': validate_extensions,\n+                'validateSelfClosingTags': validate_self_closing_tags,\n+                'validateAttributeQuoteMarks': preferred_quotation,\n+                'maximumNumberOfLines': max_lines_per_file\n+            }\n+\n+            return json.dumps(options)\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file, puglint_config: str=''):\n+        \"\"\"\n+        :param puglint_config:\n+            The location of the ``.pug-lintrc`` config file.\n+        \"\"\"\n+        return ('--config',\n+                puglint_config if puglint_config else config_file,\n+                '--reporter', 'inline', filename)\n+\n+    def process_output(self, output, filename, file):\n+        stdout, stderr = output\n+        yield from self.process_output_regex(stderr, filename, file,\n+                                             self._output_regex)", "created_at": "2017-07-17T13:21:27Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk1NTc1Nw==", "fields": {"body": "We have named the setting as max_lines_per_file in LineCountBear, so I think we should keep max_lines_per_file for consistency of the settings throughout.", "diff": "@@ -0,0 +1,240 @@\n+import json\n+import re\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='pug-lint',\n+        use_stdout=True,\n+        use_stderr=True)\n+class PugLintBear:\n+    \"\"\"\n+    A configurable linter and style checker for Pug (formerly Jade) that is a\n+    clean, whitespace-sensitive template language for writing HTML.\n+    \"\"\"\n+\n+    LANGUAGES = {'Pug'}\n+    REQUIREMENTS = {NpmRequirement('pug-lint', '2.4.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/pugjs/pug-lint'\n+\n+    _output_regex = re.compile(\n+        r'(?P<line>\\d+):?(?P<column>\\d+)? (?P<message>.+)')\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        prohibit_block_expansion: bool=True,\n+                        prohibit_class_attribute_with_static_value: bool=True,\n+                        prohibit_class_literals_before_attributes: bool=True,\n+                        prohibit_class_literals_before_id_literals: bool=True,\n+                        prohibit_class_literals: bool=True,\n+                        prohibit_duplicate_attributes: bool=True,\n+                        prohibit_html_text: bool=True,\n+                        prohibit_id_attribute_with_static_value: bool=True,\n+                        prohibit_id_literals_before_attributes: bool=True,\n+                        prohibit_id_literals: bool=True,\n+                        prohibit_legacy_mixin_call: bool=True,\n+                        prohibit_multiple_line_breaks: bool=None,\n+                        prohibit_spaces_inside_attribute_brackets: bool=True,\n+                        prohibit_string_interpolation: bool=True,\n+                        prohibit_tag_interpolation: bool=True,\n+                        prohibit_specific_attributes: typed_list(str)=None,\n+                        prohibit_specific_tags: typed_list(str)=None,\n+                        require_class_literals_before_attributes: bool=False,\n+                        require_class_literals_before_id_literals: bool=False,\n+                        require_id_literals_before_attributes: bool=False,\n+                        require_lower_case_attributes: bool=True,\n+                        require_lower_case_tags: bool=True,\n+                        require_spaces_inside_attribute_brackets: bool=False,\n+                        require_strict_equality_operators: bool=True,\n+                        validate_div_tags: bool=True,\n+                        validate_extensions: bool=True,\n+                        validate_self_closing_tags: bool=True,\n+                        preferred_quotation: str='\\'',\n+                        max_lines_per_file: int=None,", "created_at": "2017-07-18T12:07:29Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk3MzAwMg==", "fields": {"body": "Yes, use_stdin doesn't work with validate-links \ud83d\ude04 I've removed the use_stdin though \ud83d\udc4d", "diff": "@@ -136,13 +141,16 @@ def create_arguments(filename, file, config_file,\n         # Remove { and } as remark adds them on its own\n         settings = config_json[1:-1]\n \n-        args = ['--no-color', '--quiet', '--setting', settings]\n+        args = [filename, '--no-color', '--quiet', '--setting', settings]", "created_at": "2017-07-18T13:24:23Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk5ODExMQ==", "fields": {"body": "or change the ng-init?", "diff": "@@ -45,19 +44,17 @@\n       </div>\n       <div ng-view=\"\"></div>\n     </div>\n+    <div ng-controller=\"LanguageController as langCtrl\" style=\"position: fixed; left: 60px; bottom: 20px;\">\n+    <select ng-init=\"language=langs[0]\" ng-options=\"l as l.name for l in langs\" ng-model=\"language\" ng-change=\"update()\">", "created_at": "2017-07-18T14:49:46Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkxOTQzMQ==", "fields": {"body": "This doesn't use any class members and can therefore be a static method.", "diff": "@@ -254,31 +256,128 @@ def extract_documentation_with_markers(content, docstyle_definition):\n             yield doc\n \n \n-def extract_documentation(content, language, docstyle):\n+class DocBaseClass:\n     \"\"\"\n-    Extracts all documentation texts inside the given source-code-string using\n-    the coala docstyle definition files.\n-\n-    The documentation texts are sorted by their order appearing in ``content``.\n-\n-    For more information about how documentation comments are identified and\n-    extracted, see DocstyleDefinition.doctypes enumeration.\n-\n-    :param content:            The source-code-string where to extract\n-                               documentation from. Needs to be a list or tuple\n-                               where each string item is a single line\n-                               (including ending whitespaces like ``\\\\n``).\n-    :param language:           The programming language used.\n-    :param docstyle:           The documentation style/tool used\n-                               (e.g. doxygen).\n-    :raises FileNotFoundError: Raised when the docstyle definition file was not\n-                               found.\n-    :raises KeyError:          Raised when the given language is not defined in\n-                               given docstyle.\n-    :raises ValueError:        Raised when a docstyle definition setting has an\n-                               invalid format.\n-    :return:                   An iterator returning each DocumentationComment\n-                               found in the content.\n+    DocBaseClass holds important function which will extract, fix parse data\n+    and generates diffs for documentation.\n     \"\"\"\n-    docstyle_definition = DocstyleDefinition.load(language, docstyle)\n-    return extract_documentation_with_markers(content, docstyle_definition)\n+\n+    def __init__(self, filename, file):\n+        \"\"\"\n+        Instantiates a new DocBaseClass\n+\n+        :param file:\n+            contains file content\n+        :param filename:\n+            contains file name\n+        \"\"\"\n+        self.warning_desc = None\n+        self.affected_code = None\n+        self.diffs = None\n+        self.file = file\n+        self.filename = filename\n+\n+    def extraction(self, content, language, docstyle):", "created_at": "2017-07-18T09:00:59Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkyOTg3Mw==", "fields": {"body": "Nice \ud83d\udc4d\nNow add statements to install haml_lint for your test to be ran (actually the tests are being skipped)....", "diff": "@@ -0,0 +1,30 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GemRequirement import GemRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+\n+@linter(executable='haml-lint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\S+):(?P<line>\\d+) \\[(?P<severity>W|E)\\] '\n+                     r'(?P<message>.*)',\n+        severity_map={'E': RESULT_SEVERITY.MAJOR,\n+                      'W': RESULT_SEVERITY.NORMAL},\n+        use_stdin=True)\n+class HamlLintBear:\n+    \"\"\"\n+    Checks code using ``haml-lint``. To\n+    ensure clean and readable HAML code\n+    \"\"\"\n+    LANGUAGES = {'Haml'}\n+    REQUIREMENTS = {GemRequirement('haml_lint', '0.26.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'https://github.com/brigade/haml-lint'\n+\n+    def create_arguments(self, filename, file, config_file):\n+        args = ('--no-summary', filename)\n+        if config_file:\n+            args += ('-c', config_file)\n+\n+        return args", "created_at": "2017-07-18T09:48:05Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkzMTEzOA==", "fields": {"body": "enforce_lower_case_tags", "diff": "@@ -0,0 +1,240 @@\n+import json\n+import re\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='pug-lint',\n+        use_stdout=True,\n+        use_stderr=True)\n+class PugLintBear:\n+    \"\"\"\n+    A configurable linter and style checker for Pug (formerly Jade) that is a\n+    clean, whitespace-sensitive template language for writing HTML.\n+    \"\"\"\n+\n+    LANGUAGES = {'Pug'}\n+    REQUIREMENTS = {NpmRequirement('pug-lint', '2.4.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/pugjs/pug-lint'\n+\n+    _output_regex = re.compile(\n+        r'(?P<line>\\d+):?(?P<column>\\d+)? (?P<message>.+)')\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        prohibit_block_expansion: bool=True,\n+                        prohibit_class_attribute_with_static_value: bool=True,\n+                        prohibit_class_literals_before_attributes: bool=True,\n+                        prohibit_class_literals_before_id_literals: bool=True,\n+                        prohibit_class_literals: bool=True,\n+                        prohibit_duplicate_attributes: bool=True,\n+                        prohibit_html_text: bool=True,\n+                        prohibit_id_attribute_with_static_value: bool=True,\n+                        prohibit_id_literals_before_attributes: bool=True,\n+                        prohibit_id_literals: bool=True,\n+                        prohibit_legacy_mixin_call: bool=True,\n+                        prohibit_multiple_line_breaks: bool=None,\n+                        prohibit_spaces_inside_attribute_brackets: bool=True,\n+                        prohibit_string_interpolation: bool=True,\n+                        prohibit_tag_interpolation: bool=True,\n+                        prohibit_specific_attributes: typed_list(str)=None,\n+                        prohibit_specific_tags: typed_list(str)=None,\n+                        require_class_literals_before_attributes: bool=False,\n+                        require_class_literals_before_id_literals: bool=False,\n+                        require_id_literals_before_attributes: bool=False,\n+                        require_lower_case_attributes: bool=True,\n+                        require_lower_case_tags: bool=True,\n+                        require_spaces_inside_attribute_brackets: bool=False,\n+                        require_strict_equality_operators: bool=True,\n+                        validate_div_tags: bool=True,\n+                        validate_extensions: bool=True,\n+                        validate_self_closing_tags: bool=True,\n+                        preferred_quotation: str='\\'',\n+                        max_lines_per_file: int=None,\n+                        puglint_config: str=''):\n+        \"\"\"\n+        :param prohibit_block_expansion:\n+            When ``True``, disallow any block expansion operators.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                p: strong text\n+                table: tr: td text\n+\n+        :param prohibit_class_attribute_with_static_value:\n+            When ``True``, prefer class literals over class attributes with\n+            static values.\n+            For example: If set to ``True``, prefer ``span.foo`` over\n+            ``span(class='foo')``.\n+        :param prohibit_class_literals_before_attributes:\n+            When ``True``, prefer all attribute blocks to be written before\n+            any class literals.\n+            For example: If set to ``True``, prefer\n+            ``input(type='text').class`` over ``input.class(type='text')``.\n+        :param prohibit_class_literals_before_id_literals:\n+            When ``True``, prefer all ID literals to be written before any\n+            class literals.\n+            For example: If set to ``True``, prefer\n+            ``input#id.class(type='text')`` over\n+            ``input.class#id(type='text')``.\n+        :param prohibit_class_literals:\n+            When ``True``, disallow any class literals.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``.class``.\n+        :param prohibit_duplicate_attributes:\n+            When ``True``, attribute blocks should not contain any duplicates.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                div(a='a' a='b')\n+                #id(id='id')\n+\n+        :param prohibit_html_text:\n+            When ``True``, disallow any HTML text.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                <strong>html text</strong>\n+                p this is <strong>html</strong> text\n+\n+        :param prohibit_id_attribute_with_static_value:\n+            When ``True``, prefer ID literals over ``id`` attributes with\n+            static values.\n+            For example: If set to ``True``, prefer ``span#id`` over\n+            ``span(id='foo')``.\n+        :param prohibit_id_literals_before_attributes:\n+            When ``True``, prefer all attribute blocks to be written before\n+            any ID literals.\n+            For example: If set to ``True``, prefer ``input(type='text')#id``\n+            over ``input#id(type='text')``.\n+        :param prohibit_id_literals:\n+            When ``True``, disallow any ID literals.\n+            For example: If set to ``True``, ``#id`` will throw a warning.\n+        :param prohibit_legacy_mixin_call:\n+            When ``True``, disallow any legacy mixin call.\n+            When ``True``, prefer ``+myMixin(arg)`` over\n+            ``mixin myMixin(arg)``.\n+        :param prohibit_multiple_line_breaks:\n+            When ``True``, disallow multiple blank lines in a row.\n+        :param prohibit_spaces_inside_attribute_brackets:\n+            When ``True``, disallow space after opening attribute bracket and\n+            before closing attribute bracket.\n+            For example: If set to ``True``, prefer\n+            ``input(type='text' name='name' value='value')`` over\n+            ``input( type='text' name='name' value='value' )``.\n+        :param prohibit_string_interpolation:\n+            When ``True``, disallow any string interpolation operators.\n+            For example: If set to ``True``, ``h1 #{title} text`` will throw\n+            a warning.\n+        :param prohibit_tag_interpolation:\n+            When ``True``, disallow any tag interpolation operators.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                | #[strong html] text\n+                p #[strong html] text\n+\n+        :param prohibit_specific_attributes:\n+            Disallow any of the attributes specified.\n+        :param prohibit_specific_tags:\n+            Disallow any of the tags specified.\n+        :param require_class_literals_before_attributes:\n+            When ``True``, all class literals must be written before any\n+            attribute blocks.\n+        :param require_class_literals_before_id_literals:\n+            When ``True``, all class literals should be written before any\n+            ID literals.\n+        :param require_id_literals_before_attributes:\n+            When ``True``, all ID literals must be written before any\n+            attribute blocks.\n+        :param require_lower_case_attributes:\n+            When ``True``, all attributes should be written in lower case.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``div(Class='class')``.\n+        :param require_lower_case_tags:", "created_at": "2017-07-18T09:53:31Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkzMTI0MQ==", "fields": {"body": "enforce_spaces_inside_attribute_brackets", "diff": "@@ -0,0 +1,240 @@\n+import json\n+import re\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='pug-lint',\n+        use_stdout=True,\n+        use_stderr=True)\n+class PugLintBear:\n+    \"\"\"\n+    A configurable linter and style checker for Pug (formerly Jade) that is a\n+    clean, whitespace-sensitive template language for writing HTML.\n+    \"\"\"\n+\n+    LANGUAGES = {'Pug'}\n+    REQUIREMENTS = {NpmRequirement('pug-lint', '2.4.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/pugjs/pug-lint'\n+\n+    _output_regex = re.compile(\n+        r'(?P<line>\\d+):?(?P<column>\\d+)? (?P<message>.+)')\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        prohibit_block_expansion: bool=True,\n+                        prohibit_class_attribute_with_static_value: bool=True,\n+                        prohibit_class_literals_before_attributes: bool=True,\n+                        prohibit_class_literals_before_id_literals: bool=True,\n+                        prohibit_class_literals: bool=True,\n+                        prohibit_duplicate_attributes: bool=True,\n+                        prohibit_html_text: bool=True,\n+                        prohibit_id_attribute_with_static_value: bool=True,\n+                        prohibit_id_literals_before_attributes: bool=True,\n+                        prohibit_id_literals: bool=True,\n+                        prohibit_legacy_mixin_call: bool=True,\n+                        prohibit_multiple_line_breaks: bool=None,\n+                        prohibit_spaces_inside_attribute_brackets: bool=True,\n+                        prohibit_string_interpolation: bool=True,\n+                        prohibit_tag_interpolation: bool=True,\n+                        prohibit_specific_attributes: typed_list(str)=None,\n+                        prohibit_specific_tags: typed_list(str)=None,\n+                        require_class_literals_before_attributes: bool=False,\n+                        require_class_literals_before_id_literals: bool=False,\n+                        require_id_literals_before_attributes: bool=False,\n+                        require_lower_case_attributes: bool=True,\n+                        require_lower_case_tags: bool=True,\n+                        require_spaces_inside_attribute_brackets: bool=False,\n+                        require_strict_equality_operators: bool=True,\n+                        validate_div_tags: bool=True,\n+                        validate_extensions: bool=True,\n+                        validate_self_closing_tags: bool=True,\n+                        preferred_quotation: str='\\'',\n+                        max_lines_per_file: int=None,\n+                        puglint_config: str=''):\n+        \"\"\"\n+        :param prohibit_block_expansion:\n+            When ``True``, disallow any block expansion operators.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                p: strong text\n+                table: tr: td text\n+\n+        :param prohibit_class_attribute_with_static_value:\n+            When ``True``, prefer class literals over class attributes with\n+            static values.\n+            For example: If set to ``True``, prefer ``span.foo`` over\n+            ``span(class='foo')``.\n+        :param prohibit_class_literals_before_attributes:\n+            When ``True``, prefer all attribute blocks to be written before\n+            any class literals.\n+            For example: If set to ``True``, prefer\n+            ``input(type='text').class`` over ``input.class(type='text')``.\n+        :param prohibit_class_literals_before_id_literals:\n+            When ``True``, prefer all ID literals to be written before any\n+            class literals.\n+            For example: If set to ``True``, prefer\n+            ``input#id.class(type='text')`` over\n+            ``input.class#id(type='text')``.\n+        :param prohibit_class_literals:\n+            When ``True``, disallow any class literals.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``.class``.\n+        :param prohibit_duplicate_attributes:\n+            When ``True``, attribute blocks should not contain any duplicates.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                div(a='a' a='b')\n+                #id(id='id')\n+\n+        :param prohibit_html_text:\n+            When ``True``, disallow any HTML text.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                <strong>html text</strong>\n+                p this is <strong>html</strong> text\n+\n+        :param prohibit_id_attribute_with_static_value:\n+            When ``True``, prefer ID literals over ``id`` attributes with\n+            static values.\n+            For example: If set to ``True``, prefer ``span#id`` over\n+            ``span(id='foo')``.\n+        :param prohibit_id_literals_before_attributes:\n+            When ``True``, prefer all attribute blocks to be written before\n+            any ID literals.\n+            For example: If set to ``True``, prefer ``input(type='text')#id``\n+            over ``input#id(type='text')``.\n+        :param prohibit_id_literals:\n+            When ``True``, disallow any ID literals.\n+            For example: If set to ``True``, ``#id`` will throw a warning.\n+        :param prohibit_legacy_mixin_call:\n+            When ``True``, disallow any legacy mixin call.\n+            When ``True``, prefer ``+myMixin(arg)`` over\n+            ``mixin myMixin(arg)``.\n+        :param prohibit_multiple_line_breaks:\n+            When ``True``, disallow multiple blank lines in a row.\n+        :param prohibit_spaces_inside_attribute_brackets:\n+            When ``True``, disallow space after opening attribute bracket and\n+            before closing attribute bracket.\n+            For example: If set to ``True``, prefer\n+            ``input(type='text' name='name' value='value')`` over\n+            ``input( type='text' name='name' value='value' )``.\n+        :param prohibit_string_interpolation:\n+            When ``True``, disallow any string interpolation operators.\n+            For example: If set to ``True``, ``h1 #{title} text`` will throw\n+            a warning.\n+        :param prohibit_tag_interpolation:\n+            When ``True``, disallow any tag interpolation operators.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                | #[strong html] text\n+                p #[strong html] text\n+\n+        :param prohibit_specific_attributes:\n+            Disallow any of the attributes specified.\n+        :param prohibit_specific_tags:\n+            Disallow any of the tags specified.\n+        :param require_class_literals_before_attributes:\n+            When ``True``, all class literals must be written before any\n+            attribute blocks.\n+        :param require_class_literals_before_id_literals:\n+            When ``True``, all class literals should be written before any\n+            ID literals.\n+        :param require_id_literals_before_attributes:\n+            When ``True``, all ID literals must be written before any\n+            attribute blocks.\n+        :param require_lower_case_attributes:\n+            When ``True``, all attributes should be written in lower case.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``div(Class='class')``.\n+        :param require_lower_case_tags:\n+            When ``True``, all tags must be written in lower case.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``Div(class='class')``.\n+        :param require_spaces_inside_attribute_brackets:", "created_at": "2017-07-18T09:54:00Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkzMTM2Mw==", "fields": {"body": "enforce_...", "diff": "@@ -0,0 +1,240 @@\n+import json\n+import re\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='pug-lint',\n+        use_stdout=True,\n+        use_stderr=True)\n+class PugLintBear:\n+    \"\"\"\n+    A configurable linter and style checker for Pug (formerly Jade) that is a\n+    clean, whitespace-sensitive template language for writing HTML.\n+    \"\"\"\n+\n+    LANGUAGES = {'Pug'}\n+    REQUIREMENTS = {NpmRequirement('pug-lint', '2.4.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/pugjs/pug-lint'\n+\n+    _output_regex = re.compile(\n+        r'(?P<line>\\d+):?(?P<column>\\d+)? (?P<message>.+)')\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        prohibit_block_expansion: bool=True,\n+                        prohibit_class_attribute_with_static_value: bool=True,\n+                        prohibit_class_literals_before_attributes: bool=True,\n+                        prohibit_class_literals_before_id_literals: bool=True,\n+                        prohibit_class_literals: bool=True,\n+                        prohibit_duplicate_attributes: bool=True,\n+                        prohibit_html_text: bool=True,\n+                        prohibit_id_attribute_with_static_value: bool=True,\n+                        prohibit_id_literals_before_attributes: bool=True,\n+                        prohibit_id_literals: bool=True,\n+                        prohibit_legacy_mixin_call: bool=True,\n+                        prohibit_multiple_line_breaks: bool=None,\n+                        prohibit_spaces_inside_attribute_brackets: bool=True,\n+                        prohibit_string_interpolation: bool=True,\n+                        prohibit_tag_interpolation: bool=True,\n+                        prohibit_specific_attributes: typed_list(str)=None,\n+                        prohibit_specific_tags: typed_list(str)=None,\n+                        require_class_literals_before_attributes: bool=False,\n+                        require_class_literals_before_id_literals: bool=False,\n+                        require_id_literals_before_attributes: bool=False,\n+                        require_lower_case_attributes: bool=True,\n+                        require_lower_case_tags: bool=True,\n+                        require_spaces_inside_attribute_brackets: bool=False,\n+                        require_strict_equality_operators: bool=True,\n+                        validate_div_tags: bool=True,\n+                        validate_extensions: bool=True,\n+                        validate_self_closing_tags: bool=True,\n+                        preferred_quotation: str='\\'',\n+                        max_lines_per_file: int=None,\n+                        puglint_config: str=''):\n+        \"\"\"\n+        :param prohibit_block_expansion:\n+            When ``True``, disallow any block expansion operators.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                p: strong text\n+                table: tr: td text\n+\n+        :param prohibit_class_attribute_with_static_value:\n+            When ``True``, prefer class literals over class attributes with\n+            static values.\n+            For example: If set to ``True``, prefer ``span.foo`` over\n+            ``span(class='foo')``.\n+        :param prohibit_class_literals_before_attributes:\n+            When ``True``, prefer all attribute blocks to be written before\n+            any class literals.\n+            For example: If set to ``True``, prefer\n+            ``input(type='text').class`` over ``input.class(type='text')``.\n+        :param prohibit_class_literals_before_id_literals:\n+            When ``True``, prefer all ID literals to be written before any\n+            class literals.\n+            For example: If set to ``True``, prefer\n+            ``input#id.class(type='text')`` over\n+            ``input.class#id(type='text')``.\n+        :param prohibit_class_literals:\n+            When ``True``, disallow any class literals.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``.class``.\n+        :param prohibit_duplicate_attributes:\n+            When ``True``, attribute blocks should not contain any duplicates.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                div(a='a' a='b')\n+                #id(id='id')\n+\n+        :param prohibit_html_text:\n+            When ``True``, disallow any HTML text.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                <strong>html text</strong>\n+                p this is <strong>html</strong> text\n+\n+        :param prohibit_id_attribute_with_static_value:\n+            When ``True``, prefer ID literals over ``id`` attributes with\n+            static values.\n+            For example: If set to ``True``, prefer ``span#id`` over\n+            ``span(id='foo')``.\n+        :param prohibit_id_literals_before_attributes:\n+            When ``True``, prefer all attribute blocks to be written before\n+            any ID literals.\n+            For example: If set to ``True``, prefer ``input(type='text')#id``\n+            over ``input#id(type='text')``.\n+        :param prohibit_id_literals:\n+            When ``True``, disallow any ID literals.\n+            For example: If set to ``True``, ``#id`` will throw a warning.\n+        :param prohibit_legacy_mixin_call:\n+            When ``True``, disallow any legacy mixin call.\n+            When ``True``, prefer ``+myMixin(arg)`` over\n+            ``mixin myMixin(arg)``.\n+        :param prohibit_multiple_line_breaks:\n+            When ``True``, disallow multiple blank lines in a row.\n+        :param prohibit_spaces_inside_attribute_brackets:\n+            When ``True``, disallow space after opening attribute bracket and\n+            before closing attribute bracket.\n+            For example: If set to ``True``, prefer\n+            ``input(type='text' name='name' value='value')`` over\n+            ``input( type='text' name='name' value='value' )``.\n+        :param prohibit_string_interpolation:\n+            When ``True``, disallow any string interpolation operators.\n+            For example: If set to ``True``, ``h1 #{title} text`` will throw\n+            a warning.\n+        :param prohibit_tag_interpolation:\n+            When ``True``, disallow any tag interpolation operators.\n+            For example: If set to ``True``, this will throw a warning::\n+\n+                | #[strong html] text\n+                p #[strong html] text\n+\n+        :param prohibit_specific_attributes:\n+            Disallow any of the attributes specified.\n+        :param prohibit_specific_tags:\n+            Disallow any of the tags specified.\n+        :param require_class_literals_before_attributes:\n+            When ``True``, all class literals must be written before any\n+            attribute blocks.\n+        :param require_class_literals_before_id_literals:\n+            When ``True``, all class literals should be written before any\n+            ID literals.\n+        :param require_id_literals_before_attributes:\n+            When ``True``, all ID literals must be written before any\n+            attribute blocks.\n+        :param require_lower_case_attributes:\n+            When ``True``, all attributes should be written in lower case.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``div(Class='class')``.\n+        :param require_lower_case_tags:\n+            When ``True``, all tags must be written in lower case.\n+            For example: If set to ``True``, prefer ``div(class='class')``\n+            over ``Div(class='class')``.\n+        :param require_spaces_inside_attribute_brackets:\n+            When ``True``, enforce space after opening attribute bracket and\n+            before closing attribute bracket.\n+        :param require_strict_equality_operators:", "created_at": "2017-07-18T09:54:32Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODA4NjY5Nw==", "fields": {"body": "I think we should add some logging with debug mode, if executor is passed but not of subclass _base.Executor that argument is invalid.\n@Makman2 What do you think ?", "diff": "@@ -339,14 +340,15 @@ def run(bears, result_callback):\n \n             def result_callback(result):\n                 pass\n+    :param executor:\n+        Custom executor used to run the bears. Must be subclass of\n+        _base.Executor\n     \"\"\"\n-    # FIXME Allow to pass different executors nicely, for example to execute\n-    # FIXME   coala with less cores, or to schedule jobs on distributed systems\n-    # FIXME   (for example Mesos).\n \n     # Set up event loop and executor.\n     event_loop = asyncio.SelectorEventLoop()\n-    executor = concurrent.futures.ProcessPoolExecutor()\n+    if executor is None or not issubclass(type(executor), _base.Executor):", "created_at": "2017-07-18T20:30:21Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNjAxNA==", "fields": {"body": "max_file_length might refer to the number of chars inside a document, max_lines_per_file is less ambigious^^ So imo max_lines_per_file is better \ud83d\udc4d", "diff": "@@ -0,0 +1,240 @@\n+import json\n+import re\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='pug-lint',\n+        use_stdout=True,\n+        use_stderr=True)\n+class PugLintBear:\n+    \"\"\"\n+    A configurable linter and style checker for Pug (formerly Jade) that is a\n+    clean, whitespace-sensitive template language for writing HTML.\n+    \"\"\"\n+\n+    LANGUAGES = {'Pug'}\n+    REQUIREMENTS = {NpmRequirement('pug-lint', '2.4.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax', 'Redundancy'}\n+    SEE_MORE = 'https://github.com/pugjs/pug-lint'\n+\n+    _output_regex = re.compile(\n+        r'(?P<line>\\d+):?(?P<column>\\d+)? (?P<message>.+)')\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        prohibit_block_expansion: bool=True,\n+                        prohibit_class_attribute_with_static_value: bool=True,\n+                        prohibit_class_literals_before_attributes: bool=True,\n+                        prohibit_class_literals_before_id_literals: bool=True,\n+                        prohibit_class_literals: bool=True,\n+                        prohibit_duplicate_attributes: bool=True,\n+                        prohibit_html_text: bool=True,\n+                        prohibit_id_attribute_with_static_value: bool=True,\n+                        prohibit_id_literals_before_attributes: bool=True,\n+                        prohibit_id_literals: bool=True,\n+                        prohibit_legacy_mixin_call: bool=True,\n+                        prohibit_multiple_line_breaks: bool=None,\n+                        prohibit_spaces_inside_attribute_brackets: bool=True,\n+                        prohibit_string_interpolation: bool=True,\n+                        prohibit_tag_interpolation: bool=True,\n+                        prohibit_specific_attributes: typed_list(str)=None,\n+                        prohibit_specific_tags: typed_list(str)=None,\n+                        require_class_literals_before_attributes: bool=False,\n+                        require_class_literals_before_id_literals: bool=False,\n+                        require_id_literals_before_attributes: bool=False,\n+                        require_lower_case_attributes: bool=True,\n+                        require_lower_case_tags: bool=True,\n+                        require_spaces_inside_attribute_brackets: bool=False,\n+                        require_strict_equality_operators: bool=True,\n+                        validate_div_tags: bool=True,\n+                        validate_extensions: bool=True,\n+                        validate_self_closing_tags: bool=True,\n+                        preferred_quotation: str='\\'',\n+                        max_lines_per_file: int=None,", "created_at": "2017-07-18T15:14:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNzc3OA==", "fields": {"body": "console.log?", "diff": "@@ -16,8 +48,32 @@\n             }).\n             otherwise({\n                 redirectTo: '/projects'\n-                    });\n-        }]);\n+            });\n+    }]);\n+\n+    app.controller('LanguageController', function ($scope, Languages) {\n+        $scope.langs = Languages.getAllLanguages();\n+        $scope.update = function () {\n+            Languages.setData($scope.language.code);\n+        }\n+        $scope.init_language = Languages.getLanguageObject();\n+        console.log('OBJECT')\n+        console.log($scope.init_language)", "created_at": "2017-07-18T15:20:12Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODE4OTIxMA==", "fields": {"body": "Isn't if StringConverter(input_q).__bool__() will give the same result?", "diff": "@@ -152,14 +154,36 @@ def acquire_actions_and_apply(console_printer,\n             metadata_list.append(metadata)\n \n         # User can always choose no action which is guaranteed to succeed\n-        if not ask_for_action_and_apply(console_printer,\n-                                        section,\n-                                        metadata_list,\n-                                        action_dict,\n-                                        failed_actions,\n-                                        result,\n-                                        file_diff_dict,\n-                                        file_dict):\n+        if section.name == 'cli':\n+            if not ask_for_action_and_apply(console_printer,\n+                                            section,\n+                                            metadata_list,\n+                                            action_dict,\n+                                            failed_actions,\n+                                            result,\n+                                            file_diff_dict,\n+                                            file_dict):\n+                break\n+            question = format_lines(\n+                'Reprompt available actions (Y/N)? ', symbol='!')\n+            input_q = input(question)\n+            input_q = str(input_q).lower()\n+            if input_q in Constants.TRUE_STRINGS:", "created_at": "2017-07-19T08:53:16Z", "last_edited_at": "2017-07-19T08:55:03Z", "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNTAwNg==", "fields": {"body": "*nodes", "diff": "@@ -0,0 +1,94 @@\n+\"\"\"\n+Handles the parsing and extraction of information from rST doc files.\n+\"\"\"\n+\n+import os\n+\n+import docutils\n+import docutils.nodes\n+import docutils.parsers.rst\n+\n+# This is the variable in which all of the documentation will be parsed and\n+# stored.\n+# Documentation of section x-y-z is stored in DATA['x-y-z']\n+DATA = {}\n+\n+\n+class IgnoredDirective(docutils.parsers.rst.Directive):\n+\n+    \"\"\"Stub for unknown directives.\"\"\"\n+\n+    has_content = True\n+\n+    def run(self):\n+        \"\"\"Do nothing.\"\"\"\n+        return []\n+\n+docutils.parsers.rst.directives.register_directive('seealso', IgnoredDirective)\n+docutils.parsers.rst.directives.register_directive('argparse', IgnoredDirective)\n+\n+class Extractor(docutils.nodes.SparseNodeVisitor):\n+    \"\"\"\n+    Node visitor to extract information from nodes.\n+    \"\"\"\n+\n+    def __init__(self, document, name=''):\n+        super().__init__(document)\n+        self.name = name\n+\n+    def visit_section(self, node):\n+        non_section_childs = list(filter(\n+            lambda x: type(x) != docutils.nodes.section, node.children\n+        ))\n+        handle_non_section_nodes(node, non_section_childs, self.name)\n+\n+def parse_rst(path):\n+    \"\"\"\n+    :param path: The path of the rst file.\n+    :return: The document object\n+    \"\"\"\n+    rst = open(path)\n+    default_settings = docutils.frontend.OptionParser(\n+        components=(docutils.parsers.rst.Parser, )\n+        ).get_default_values()\n+    document = docutils.utils.new_document(rst.name, default_settings)\n+    parser =  docutils.parsers.rst.Parser()\n+    parser.parse(rst.read(), document)\n+    rst.close()\n+    return document\n+\n+def handle_non_section_nodes(section_node, non_section_child_nodes, doc_name):\n+    \"\"\"\n+    All the ndoes that are not section nodes are parsed here.", "created_at": "2017-07-18T21:47:57Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNjg1Mw==", "fields": {"body": "Definitely documentation needed over here.", "diff": "@@ -0,0 +1,99 @@\n+from collections import OrderedDict, Counter\n+import logging\n+\n+from gensim.parsing.preprocessing import STOPWORDS\n+from gensim.utils import simple_preprocess\n+import networkx\n+import nltk\n+import spacy\n+\n+from answers.extraction import DATA, parse_docs\n+\n+parse_docs()\n+\n+nlp = spacy.load('en_core_web_md')\n+\n+def grapheize(graph, doc, attrs={}):\n+    \"\"\"\n+    Create a graph from given piece of text. Nodes are formed from lemmatized\n+    tokens. Edges are created between a lemmatized token and lemma of head of\n+    the token.\n+    \"\"\"\n+    unallowed_tags = [\n+        'EX', 'HVS', 'MD', 'PDT',\n+        'IN', 'DT', 'TO', 'CD',\n+        'CC', '-LRB-', 'HYPH', ':'\n+    ]\n+    for token in doc:\n+        if (token.tag_ in unallowed_tags) or (token == token.head):\n+            continue\n+        nodes = [token.lemma_, token.head.lemma_]\n+        for node in nodes:\n+            if node not in graph:\n+                graph.add_node(node, token=token)\n+            node = graph.node.get(node)\n+            for key, value in attrs.items():\n+                node.setdefault(key, []).append(value)\n+        graph.add_edge(*nodes)\n+\n+def get_answer(question, graph, final=False):", "created_at": "2017-07-18T21:57:27Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODI0NDU2OA==", "fields": {"body": "Why not just concurrent.futures.Executor itself?", "diff": "@@ -339,14 +340,15 @@ def run(bears, result_callback):\n \n             def result_callback(result):\n                 pass\n+    :param executor:\n+        Custom executor used to run the bears. Must be subclass of\n+        _base.Executor", "created_at": "2017-07-19T13:25:21Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIyNjYyMA==", "fields": {"body": "Imports should be in the following order \ud83d\ude04 (Note that I've left a line):\nfrom coalib.testing.LocalBearTestHelper import verify_local_bear\n\nfrom bears.haml.HamlLintBear import HamlLintBear", "diff": "@@ -0,0 +1,25 @@\n+from bears.haml.HamlLintBear import HamlLintBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear", "created_at": "2017-07-19T12:05:19Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIyNjgzNg==", "fields": {"body": "It would be preferable if we have all coalib imports together \ud83d\ude09", "diff": "@@ -0,0 +1,30 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GemRequirement import GemRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY", "created_at": "2017-07-19T12:06:40Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIyNjk0OA==", "fields": {"body": "Refactor the sentence to Checks code using ``haml-lint`` to ensure clean and readable HAML code.", "diff": "@@ -0,0 +1,30 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GemRequirement import GemRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+\n+@linter(executable='haml-lint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\S+):(?P<line>\\d+) \\[(?P<severity>W|E)\\] '\n+                     r'(?P<message>.*)',\n+        severity_map={'E': RESULT_SEVERITY.MAJOR,\n+                      'W': RESULT_SEVERITY.NORMAL},\n+        use_stdin=True)\n+class HamlLintBear:\n+    \"\"\"\n+    Checks code using ``haml-lint``. To\n+    ensure clean and readable HAML code", "created_at": "2017-07-19T12:07:19Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIyNzA3NQ==", "fields": {"body": "Can you post a sample output. We need to see if the regex is working.", "diff": "@@ -0,0 +1,25 @@\n+from bears.haml.HamlLintBear import HamlLintBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+good_file = \"\"\"\n+#content\n+  .left.column\n+    %h2 Welcome to our site!\n+    %p= print_information\n+  .right.column\n+    = render partial: 'sidebar'\n+ \"\"\"\n+\n+bad_file = \"\"\"\n+ #content\n+  .left.column\n+    %h2 Welcome to our site!\n+    %p= print_information\n+  .right.column\n+    = render :partial =>'sidebar'\n+ \"\"\"\n+\n+\n+HamlLintBearTest = verify_local_bear(HamlLintBear,\n+                                     valid_files=(good_file,),\n+                                     invalid_files=(bad_file,))", "created_at": "2017-07-19T12:08:14Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIzODIwOA==", "fields": {"body": "Space required after the comma.", "diff": "@@ -2,6 +2,7 @@ source 'https://rubygems.org'\n ruby '2.2.2'\n \n gem \"csvlint\"\n+gem \"haml_lint\",\"0.26.0\"", "created_at": "2017-07-19T13:01:37Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIzODM0Ng==", "fields": {"body": "Just the order had to be changed so it looks good now. We don't need to leave a line however. \ud83d\ude09", "diff": "@@ -0,0 +1,30 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+from dependency_management.requirements.GemRequirement import GemRequirement", "created_at": "2017-07-19T13:02:11Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODQ0MzY5NA==", "fields": {"body": "@RJ722  Updated changes.", "diff": "@@ -4,28 +4,28 @@ coala 0.10 - PolarBear\n ::\n ", "created_at": "2017-07-20T07:34:57Z", "last_edited_at": null, "author": "S2606", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODY0NjA5NQ==", "fields": {"body": "Filed an issue to change that: #4493", "diff": "@@ -614,3 +614,15 @@ def test_run_heavy_cpu_load(self):\n         self.assertEqual(len(result_set), len(results))\n         self.assertEqual(result_set, {i for i in range(100)})\n         self.assertEqual(bear.dependency_results, {})\n+\n+    def test_custom_executor(self):\n+        bear = MultiTaskBear(self.section1, self.filedict1, tasks_count=100)\n+\n+        import concurrent.futures\n+        results = self.execute_run(\n+            {bear}, concurrent.futures.ThreadPoolExecutor(max_workers=10))\n+\n+        result_set = set(results)\n+        self.assertEqual(len(result_set), len(results))\n+        self.assertEqual(result_set, {i for i in range(100)})", "created_at": "2017-07-20T22:29:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODY5Njc1Mw==", "fields": {"body": "you don't want #!/usr/bin/env as your shebang without any binary right? That's just a directory", "diff": "@@ -0,0 +1,34 @@\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Diff import Diff\n+from coalib.results.Result import Result\n+\n+\n+class ShebangBear(LocalBear):\n+    LANGUAGES = {'Python', 'Python 2', 'Python 3'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Syntax'}\n+\n+    def run(self, filename, file):\n+        \"\"\"\n+            Ensure that the file begins with the Shebang operator.\n+        \"\"\"\n+        if len(file) == 0 or '#!/usr/bin/env' in file[0]:\n+            return\n+\n+        diff = Diff(file)\n+        mes = ''\n+\n+        if '#!' in file[0]:\n+            diff.modify_line(1, '#!/usr/bin/env')", "created_at": "2017-07-21T07:04:51Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODYwNjI0OQ==", "fields": {"body": "missing CAN_FIX or CAN_DETECT", "diff": "@@ -0,0 +1,29 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from dependency_management.requirements.GemRequirement import GemRequirement\n+\n+\n+@linter(executable='haml-lint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\S+):(?P<line>\\d+) \\[(?P<severity>W|E)\\] '\n+                     r'(?P<message>.*)',\n+        severity_map={'E': RESULT_SEVERITY.MAJOR,\n+                      'W': RESULT_SEVERITY.NORMAL})\n+class HamlLintBear:\n+    \"\"\"\n+    Checks code using ``haml-lint`` to\n+    ensure clean and readable HAML code\n+    \"\"\"\n+    LANGUAGES = {'Haml'}\n+    REQUIREMENTS = {GemRequirement('haml_lint', '0.26.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'", "created_at": "2017-07-20T19:12:03Z", "last_edited_at": null, "author": "AsnelChristian", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODcwNzEwNQ==", "fields": {"body": "Add tests on the generated diff, too. Not just the affected_code object.", "diff": "@@ -254,5 +255,25 @@ def test_extract_documentation_PYTHON3_4(self):\n         # Nothing is yielded as triple quote string literals are being\n         # ignored.\n         self.assertEqual(\n-            list(extract_documentation(data, 'PYTHON3', 'default')),\n+            list(DocBaseClass.extract(data, 'PYTHON3', 'default')),\n             [])\n+\n+    def test_diff_generation(self):\n+        # As diff requires filename\n+        dataname = 'dummy_file.py'\n+\n+        data_old = ['\\n', '\"\"\" documentation in single line  \"\"\"\\n']\n+        for doc_comment in DocBaseClass.extract(\n+                                data_old, 'PYTHON3', 'default'):\n+            old_doc_comment = doc_comment\n+\n+        data_new = ['\\n', '\"\"\"\\n documentation in single line\\n\"\"\"\\n']\n+        for doc_comment in DocBaseClass.extract(\n+                                data_new, 'PYTHON3', 'default'):\n+            new_doc_comment = doc_comment\n+\n+        (affected_code, diffs) = DocBaseClass.generate_diff(", "created_at": "2017-07-21T08:13:42Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODcxOTQ1Ng==", "fields": {"body": "@AMR-KELEG You can just grab the binary name (without the path) and add that at the end of /usr/bin/env.\nex.\n\n#!/usr/bin/python -> #!/usr/bin/env python\n#!/usr/bin/python3 -> #!/usr/bin/env python3\n#!/usr/bin/asuka --intepreter-mode --no-warnings -> #!/usr/bin/env asuka --intepreter-mode --no-warnings", "diff": "@@ -0,0 +1,34 @@\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Diff import Diff\n+from coalib.results.Result import Result\n+\n+\n+class ShebangBear(LocalBear):\n+    LANGUAGES = {'Python', 'Python 2', 'Python 3'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Syntax'}\n+\n+    def run(self, filename, file):\n+        \"\"\"\n+            Ensure that the file begins with the Shebang operator.\n+        \"\"\"\n+        if len(file) == 0 or '#!/usr/bin/env' in file[0]:\n+            return\n+\n+        diff = Diff(file)\n+        mes = ''\n+\n+        if '#!' in file[0]:", "created_at": "2017-07-21T09:20:52Z", "last_edited_at": "2017-07-21T09:21:17Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODcxOTc0Nw==", "fields": {"body": "Also, I think the fitting category is between shell and general (depends on how you look at it ;))", "diff": "@@ -0,0 +1,34 @@\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Diff import Diff\n+from coalib.results.Result import Result\n+\n+\n+class ShebangBear(LocalBear):\n+    LANGUAGES = {'Python', 'Python 2', 'Python 3'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Syntax'}\n+\n+    def run(self, filename, file):\n+        \"\"\"\n+            Ensure that the file begins with the Shebang operator.\n+        \"\"\"\n+        if len(file) == 0 or '#!/usr/bin/env' in file[0]:\n+            return\n+\n+        diff = Diff(file)\n+        mes = ''\n+\n+        if '#!' in file[0]:", "created_at": "2017-07-21T09:22:25Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NDY1Nw==", "fields": {"body": "I assume this is message, use message or msg or something that is more clear as a message", "diff": "@@ -0,0 +1,31 @@\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Diff import Diff\n+from coalib.results.Result import Result\n+\n+\n+class ShebangBear(LocalBear):\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Syntax'}\n+\n+    def run(self, filename, file):\n+        \"\"\"\n+        Ensure that the file uses the generic Shebang operator.\n+        \"\"\"\n+        if len(file) == 0 or '#!/usr/bin/env' in file[0]:\n+            return\n+\n+        diff = Diff(file)\n+        mes = None", "created_at": "2017-07-22T10:47:38Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NDY4MQ==", "fields": {"body": "use 'Use /usr/bin/env {}'.format(binary) instead ?", "diff": "@@ -0,0 +1,31 @@\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Diff import Diff\n+from coalib.results.Result import Result\n+\n+\n+class ShebangBear(LocalBear):\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Syntax'}\n+\n+    def run(self, filename, file):\n+        \"\"\"\n+        Ensure that the file uses the generic Shebang operator.\n+        \"\"\"\n+        if len(file) == 0 or '#!/usr/bin/env' in file[0]:\n+            return\n+\n+        diff = Diff(file)\n+        mes = None\n+\n+        if '#!' in file[0]:\n+            binary = file[0].split('bin/', 1)[1]\n+            diff.modify_line(1, '#!/usr/bin/env {}'.format(binary))\n+            mes = 'Use the /usr/bin/env.'", "created_at": "2017-07-22T10:49:49Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYyMw==", "fields": {"body": "vendore ?", "diff": "@@ -1,27 +1,27 @@\n [global]\n bears = coalaBear\n files = **.yml, **.html, **.md, **.js, **.css, **.json\n-ignore = vendors/**, _site/**\n+ignore = resources/vendors/**, _site/**\n \n [linecount]\n files = **.yml, **.html, **.md, **.js\n bears = LineCountBear\n-ignore = vendors/**, data/projects.js, _site/**\n+ignore = resources/vendors/**, data/projects.js, _site/**\n max_lines_per_file = 500\n \n [filenames]\n bears = FilenameBear\n files = **.yml, **.html, **.md, **.js, **.css\n-ignore = vendors/**, _projects/integrate-pyflakes-AST.md, _site/**\n+ignore = resources/vendors/**, _projects/integrate-pyflakes-AST.md, _site/**\n \n [spacing]\n bears = SpaceConsistencyBear\n files = **.html, **.css, **.js, **.json\n-ignore = vendors/**, _site/**\n+ignore = resources/vendors/**, _site/**\n use_spaces = True\n \n [html]\n bears = HTMLLintBear\n files = **.html\n htmllint_ignore = optional_tag, protocol, indentation,  concerns_separation, capitalization\n-ignore = vendore/**, _site/**\n+ignore = resources/vendore/**, _site/**", "created_at": "2017-07-22T13:08:20Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYzMg==", "fields": {"body": "This change should be in the other commit, right? c579dc9", "diff": "@@ -51,7 +51,7 @@\n   </main>\n   <footer class=\"page-footer footer-light transparent\">\n     <div class=\"row\">\n-      <div class=\"col m6 offset-m3 center\"> <img class=\"footer-logo\" src=\"https://api.coala.io/en/latest/_static/images/coala_logo.svg\"> <span class=\"footer-title\">{{ site.organization }}</span> </div>\n+      <div class=\"col m6 offset-m3 center\"> <img class=\"footer-logo\" src=\"https://api.coala.io/en/latest/_static/images/coala_logo.svg\" alt=\"coala\"> <span class=\"footer-title\">{{ site.organization }}</span> </div>", "created_at": "2017-07-22T13:09:19Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODk2MDY3NQ==", "fields": {"body": "Why does this method return a String this makes no sense! :P just kidding...", "diff": "@@ -11,3 +11,16 @@ public String sayHello(String name) throws IOException {\n         return \"Hello, \" + name;\n     }\n }\n+\n+class AreaSquare {\n+\n+/**\n+* Returns Area of a square.\n+*\n+* @param  side side of square\n+* @return  area of a square\n+*/\n+    public String sayHello(int side) {", "created_at": "2017-07-24T06:56:16Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODk3ODk1OA==", "fields": {"body": "This patch involves printing the stderr and stdout from linter bears when there is some problem or an exception is raised. To test this feature, I will deliberately have to raise an exception and thus make the tests fail so as to see if we're printing the stderr and stdout or not and IIUC once, we raise an exception, the tests hault there itself and we wouldn't be able to proceed further. However, I've tested this manually. \ud83d\ude04", "diff": "@@ -12,16 +13,38 @@\n \n \n @contextmanager\n-def execute_bear(bear, *args, **kwargs):\n+def execute_bear(bear, *args, **kwargs):  # pragma: no cover", "created_at": "2017-07-24T08:39:54Z", "last_edited_at": "2017-07-24T08:40:06Z", "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkwODg2NA==", "fields": {"body": "trailing ,", "diff": "@@ -21,6 +22,11 @@ def setUp(self):\n                  Metadata.CommitMessage.Body('py')],\n             exclude=[Metadata.CommitMessage.Shortlog.TrailingPeriod,\n                      Metadata.CommitMessage.Body.Existence])\n+        self.unused_variable_leaves = AspectList([\n+            Redundancy.UnusedVariable.UnusedGlobalVariable,\n+            Redundancy.UnusedVariable.UnusedLocalVariable,\n+            Redundancy.UnusedVariable.UnusedParameter", "created_at": "2017-07-23T02:45:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkwODk3Nw==", "fields": {"body": "rather than moving everything into an if, you can use the if to exit early, and the rest of the code can remain where it was.", "diff": "@@ -6,22 +6,28 @@ set -e\n # Get environment variables, readily decrypted by rultor\n source ../rultor_secrets.sh\n \n-# Ship it!\n-echo \"Uploading coala to pypi\"\n-pip3 install twine wheel\n-python3 setup.py sdist bdist_wheel\n-# Upload one by one to avoid timeout\n-twine upload dist/* -u \"$PYPIUSER\" -p \"$PYPIPW\" 2>&1 | tee twine_output.txt\n-if [ \"${PIPESTATUS[0]}\" -ne 0 ]; then\n-    SEARCH_STR=\"500 Server Error\"\n-    if grep -q \"$SEARCH_STR\" twine_output.txt; then\n-        echo \"Server error 500\"\n-        exit 1\n+# Make sure the user is a maintainer\n+if curl \"https://api.github.com/teams/1238757/memberships/${author}?access_token=${GITHUB_TOKEN}\" | grep -q \"active\"; then\n+    # Ship it!\n+    echo \"Uploading coala to pypi\"\n+    pip3 install twine wheel\n+    python3 setup.py sdist bdist_wheel\n+    # Upload one by one to avoid timeout\n+    twine upload dist/* -u \"$PYPIUSER\" -p \"$PYPIPW\" 2>&1 | tee twine_output.txt\n+    if [ \"${PIPESTATUS[0]}\" -ne 0 ]; then\n+        SEARCH_STR=\"500 Server Error\"\n+        if grep -q \"$SEARCH_STR\" twine_output.txt; then\n+            echo \"Server error 500\"\n+            exit 1\n+        fi\n     fi\n-fi\n-rm twine_output.txt\n+    rm twine_output.txt\n \n-echo \"Installing coala from pypi\"\n-pip3 install --pre coala==`cat coalib/VERSION` --upgrade\n-echo coala versions: pip=`coala -v` repo=`cat coalib/VERSION`\n-[ `coala -v` = `cat coalib/VERSION` ]\n+    echo \"Installing coala from pypi\"\n+    pip3 install --pre coala==`cat coalib/VERSION` --upgrade\n+    echo coala versions: pip=`coala -v` repo=`cat coalib/VERSION`\n+    [ `coala -v` = `cat coalib/VERSION` ]\n+else\n+    echo \"You are not in the maintainers group.\"\n+    exit 1", "created_at": "2017-07-23T02:55:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkwODkwOA==", "fields": {"body": "why isnt this something prettier like:\n    'detect': AspectList([\n        Redundancy.UnusedVariable.UnusedGlobalVariable,\n        Redundancy.UnusedVariable.UnusedLocalVariable,\n    ])", "diff": "@@ -0,0 +1,25 @@\n+from coalib.bearlib.aspects import get as get_aspect\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+\n+class AspectTestBear(LocalBear, aspects={\n+    'detect': [get_aspect('unusedlocalvariable'),", "created_at": "2017-07-23T02:48:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkxMDA2Ng==", "fields": {"body": "Can you please use os.path.basename instead of this? Since, it causes problems if it's /usr/sbin/, /sbin/, /usr/local/sbin, etc.", "diff": "@@ -0,0 +1,32 @@\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Diff import Diff\n+from coalib.results.Result import Result\n+\n+\n+class ShebangBear(LocalBear):\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Syntax'}\n+\n+    def run(self, filename, file):\n+        \"\"\"\n+        Ensure that the file uses the generic Shebang operator.\n+        \"\"\"\n+        if len(file) == 0 or '#!/usr/bin/env' in file[0]:\n+            return\n+\n+        diff = Diff(file)\n+        message = None\n+\n+        if '#!' in file[0]:\n+            binary = file[0].split('bin/', 1)[1].strip('\\n')", "created_at": "2017-07-23T04:39:42Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTA2Mzg3Mg==", "fields": {"body": "maybe a comment stating\n# For linters provide additional information, such as stdout and stderr.", "diff": "@@ -14,14 +15,36 @@\n @contextmanager\n def execute_bear(bear, *args, **kwargs):\n     try:\n-        bear_output_generator = bear.execute(*args, **kwargs)\n+        console_output = []\n+\n+        with ExitStack() as stack:\n+            if hasattr(bear, 'process_output'):", "created_at": "2017-07-24T15:10:09Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTA2NDQwNA==", "fields": {"body": "unnecessary change\ndid something change in the line with def test_exception(self):? Wondering why the diff removes it above and adds it here again :O", "diff": "@@ -101,8 +104,44 @@ def setUp(self):\n         section.append(Setting('exception', True))\n         self.uut = TestBear(section, Queue())\n \n-    def test_exception(self):\n+    def test_stdout_stderr_on_linter_test_fail(self):\n+        process_output_mock = Mock()\n+\n+        class TestLinter:\n+            @staticmethod\n+            def process_output(output, filename, file):\n+                process_output_mock(output, filename, file)\n+\n+            @staticmethod\n+            def create_arguments(filename, file, config_file):\n+                code = '\\n'.join(['import sys',\n+                                  \"print('hello stdout')\",\n+                                  \"print('hello stderr', file=sys.stderr)\"])\n+                return '-c', code\n+\n+        # Testing with both stdout and stderr enabled\n+        uut = (linter(sys.executable, use_stdout=True, use_stderr=True)\n+               (TestLinter)\n+               (Section('TEST_SECTION'), Queue()))\n+        try:\n+            with execute_bear(uut, 'filename', ['file']) as result:\n+                self.assertNotEqual(result, [])\n+        except AssertionError as ex:\n+            self.assertIn('hello stdout', str(ex))\n+            self.assertIn('hello stderr', str(ex))\n+\n+        # Testing with only stdout enabled\n+        uut = (linter(sys.executable, use_stdout=True)\n+               (TestLinter)\n+               (Section('TEST_SECTION'), Queue()))\n+        try:\n+            with execute_bear(uut, 'filename', ['file']) as result:\n+                self.assertNotEqual(result, [])\n+        except AssertionError as ex:\n+            self.assertIn('hello stdout', str(ex))\n+            self.assertNotIn('hello stderr', str(ex))\n \n+    def test_exception(self):\n         with self.assertRaises(AssertionError), execute_bear(\n-                self.uut,  'Luke', files[0]) as result:\n+                self.uut, 'Luke', files[0]) as result:", "created_at": "2017-07-24T15:12:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTA2NDYyMw==", "fields": {"body": "Could you also check if the string Stdout: is available? (same for Stderr)", "diff": "@@ -101,8 +104,44 @@ def setUp(self):\n         section.append(Setting('exception', True))\n         self.uut = TestBear(section, Queue())\n \n-    def test_exception(self):\n+    def test_stdout_stderr_on_linter_test_fail(self):\n+        process_output_mock = Mock()\n+\n+        class TestLinter:\n+            @staticmethod\n+            def process_output(output, filename, file):\n+                process_output_mock(output, filename, file)\n+\n+            @staticmethod\n+            def create_arguments(filename, file, config_file):\n+                code = '\\n'.join(['import sys',\n+                                  \"print('hello stdout')\",\n+                                  \"print('hello stderr', file=sys.stderr)\"])\n+                return '-c', code\n+\n+        # Testing with both stdout and stderr enabled\n+        uut = (linter(sys.executable, use_stdout=True, use_stderr=True)\n+               (TestLinter)\n+               (Section('TEST_SECTION'), Queue()))\n+        try:\n+            with execute_bear(uut, 'filename', ['file']) as result:\n+                self.assertNotEqual(result, [])\n+        except AssertionError as ex:\n+            self.assertIn('hello stdout', str(ex))\n+            self.assertIn('hello stderr', str(ex))", "created_at": "2017-07-24T15:12:47Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMjE4MA==", "fields": {"body": "tense problem.  it isnt a \"removed item\" because it hasnt been removed.", "diff": "@@ -59,3 +61,38 @@ def get(self, aspect):\n             return next(filter(None, (item.get(aspect) for item in self)))\n         except StopIteration:\n             return None\n+\n+    def _remove(self, item):\n+        \"\"\"\n+        Remove first matching item in list.\n+\n+        :param item:        An aspectclass\n+        :raises ValueError: When removed item is not found in list.", "created_at": "2017-07-24T11:32:46Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMjQ2OA==", "fields": {"body": "use type(self)", "diff": "@@ -59,3 +61,38 @@ def get(self, aspect):\n             return next(filter(None, (item.get(aspect) for item in self)))\n         except StopIteration:\n             return None\n+\n+    def _remove(self, item):\n+        \"\"\"\n+        Remove first matching item in list.\n+\n+        :param item:        An aspectclass\n+        :raises ValueError: When removed item is not found in list.\n+        \"\"\"\n+        for aspect in self:\n+            if aspect is item or isinstance(aspect, item):\n+                return super().remove(aspect)\n+\n+        raise ValueError('AspectList.remove(x): {} not in list.'.format(item))\n+\n+    def get_leaf_aspects(self):\n+        \"\"\"\n+        Breakdown all of item in self into their leaf subaspects.\n+\n+        :return: An AspectList contain ONLY leaf aspects.\n+        \"\"\"\n+        aspects = AspectList()", "created_at": "2017-07-24T11:34:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMjQzNw==", "fields": {"body": "dont use literal AspectList ... it should be derived from the class object", "diff": "@@ -59,3 +61,38 @@ def get(self, aspect):\n             return next(filter(None, (item.get(aspect) for item in self)))\n         except StopIteration:\n             return None\n+\n+    def _remove(self, item):\n+        \"\"\"\n+        Remove first matching item in list.\n+\n+        :param item:        An aspectclass\n+        :raises ValueError: When removed item is not found in list.\n+        \"\"\"\n+        for aspect in self:\n+            if aspect is item or isinstance(aspect, item):\n+                return super().remove(aspect)\n+\n+        raise ValueError('AspectList.remove(x): {} not in list.'.format(item))", "created_at": "2017-07-24T11:33:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMjgwMQ==", "fields": {"body": "also get the global bears into a variable and assert that it is empty.", "diff": "@@ -275,6 +277,16 @@ def test_all_bears_from_sections(self):\n         self.assertEqual(len(local_bears['test_section']), 2)\n         self.assertEqual(len(global_bears['test_section']), 2)\n \n+    def test_aspect_bear(self):\n+        with bear_test_module():\n+            aspects = AspectList([get_aspect('unusedvariable')('py')])\n+            local_bears, _ = collect_bears_by_aspects(", "created_at": "2017-07-24T11:36:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzA2MA==", "fields": {"body": "put the ): on the next line, add a trailing ,, and dont have a blank line between the ): and the first line of code.", "diff": "@@ -0,0 +1,29 @@\n+from coalib.bearlib.aspects import Root\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+\n+class AspectTestBear(\n+        LocalBear,\n+        aspects={\n+            'detect': [\n+                Root.Redundancy.UnusedVariable.UnusedGlobalVariable,\n+                Root.Redundancy.UnusedVariable.UnusedLocalVariable,\n+            ]},\n+        languages=['Python']):", "created_at": "2017-07-24T11:37:31Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzE4Nw==", "fields": {"body": "trailing , and move ) to the next line.", "diff": "@@ -0,0 +1,29 @@\n+from coalib.bearlib.aspects import Root\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+\n+class AspectTestBear(\n+        LocalBear,\n+        aspects={\n+            'detect': [\n+                Root.Redundancy.UnusedVariable.UnusedGlobalVariable,\n+                Root.Redundancy.UnusedVariable.UnusedLocalVariable,\n+            ]},\n+        languages=['Python']):\n+\n+    LANGUAGES = {'Python'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    def run(self, filename, file, config: str=''):\n+        \"\"\"\n+        Bear that have aspect.\n+        :param config: An optional dummy config file.\n+        \"\"\"\n+        yield Result.from_values(\n+            origin=self,\n+            message='This is just a dummy result',\n+            severity=RESULT_SEVERITY.INFO,\n+            file=filename,\n+            aspect=Root.Redundancy.UnusedVariable.UnusedLocalVariable)", "created_at": "2017-07-24T11:38:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzEzMA==", "fields": {"body": "blank line between summary and parameters.", "diff": "@@ -0,0 +1,29 @@\n+from coalib.bearlib.aspects import Root\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+\n+class AspectTestBear(\n+        LocalBear,\n+        aspects={\n+            'detect': [\n+                Root.Redundancy.UnusedVariable.UnusedGlobalVariable,\n+                Root.Redundancy.UnusedVariable.UnusedLocalVariable,\n+            ]},\n+        languages=['Python']):\n+\n+    LANGUAGES = {'Python'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    def run(self, filename, file, config: str=''):\n+        \"\"\"\n+        Bear that have aspect.\n+        :param config: An optional dummy config file.", "created_at": "2017-07-24T11:37:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzU5Ng==", "fields": {"body": "One line summary first. then blank line and more detailed summary. see PEP 257", "diff": "@@ -204,6 +204,31 @@ def filter_section_bears_by_languages(bears, languages):\n     return new_bears\n \n \n+def collect_bears_by_aspects(aspects, kinds):\n+    \"\"\"\n+    Collect list of bears that have capability to analyze all aspects from", "created_at": "2017-07-24T11:40:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzY0OQ==", "fields": {"body": "PEP 257", "diff": "@@ -86,6 +109,18 @@ def __get__(self, obj, owner):\n         return functools.partial(get_subaspect, parent)\n \n \n+class LeafAspectGetter:\n+    \"\"\"\n+    Special \"getter\" class to implement ``get_leaf_aspects()`` method in", "created_at": "2017-07-24T11:40:51Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzc0NQ==", "fields": {"body": "arbitrary here adds no extra meaning.", "diff": "@@ -75,6 +75,29 @@ def get_subaspect(parent, subaspect):\n     return child\n \n \n+def _get_leaf_aspects(aspect):\n+    \"\"\"\n+    Explode an arbitrary aspect into list of its leaf aspects.", "created_at": "2017-07-24T11:41:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQ2MTgwMQ==", "fields": {"body": "I think .startswith('#!/usr/bin/env') is better...", "diff": "@@ -0,0 +1,33 @@\n+import os\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Diff import Diff\n+from coalib.results.Result import Result\n+\n+\n+class ShebangBear(LocalBear):\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_FIX = {'Syntax'}\n+\n+    def run(self, filename, file):\n+        \"\"\"\n+        Ensure that the file uses the generic Shebang operator.\n+        \"\"\"\n+        if len(file) == 0 or '#!/usr/bin/env' in file[0]:", "created_at": "2017-07-26T00:58:40Z", "last_edited_at": "2017-07-26T00:59:04Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQ5MTU2OQ==", "fields": {"body": "I find unindented multi line strings disrupt the flow when reading a function/file. You could use dedent to have the literal be properly indented and still not have the indentation in the actual string.\nHowever then you'll probably run into the line length limit.... Hmm.... maybe make the pitchfork a bit shorter? I did notice that on mobile I just saw the stick:", "diff": "@@ -0,0 +1,35 @@\n+import re\n+import string\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Pitchfork(BotPlugin):\n+    \"\"\"\n+    To pitchfork users down to ...\n+    \"\"\"\n+\n+    @botcmd\n+    def pitchfork(self, msg, arg):\n+        \"\"\"\n+        To pitchfork user down to ...\n+        \"\"\"\n+        match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n+                         arg)\n+        if match:\n+            user = match.group(1)\n+            place = match.group(2) if match.group(2) else 'offtopic'\n+            return (\n+                string.Template(\"\"\"", "created_at": "2017-07-26T06:40:46Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTgxNDE3OA==", "fields": {"body": "You can used NamedTuple to make it easier for them to be used.\nThe reason to keep them as a tuple is so that everywhere they are a pair, from style config to bear.  consistency.", "diff": "@@ -58,6 +60,8 @@ def __init__(self, language: str, docstyle: str, markers: (Iterable, str),\n                                  'actually {}).'.format(length))\n \n         self._metadata = metadata\n+        self._top_padding = None if padding == () else int(padding[0])\n+        self._bottom_padding = None if padding == () else int(padding[1])\n ", "created_at": "2017-07-27T11:14:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTgyNTg2OA==", "fields": {"body": "Separate commit for this one, as this is effectively a rewrite^^", "diff": "@@ -369,13 +373,20 @@ def test_get_filtered_bears(self):\n \n         self.assertEqual(len(local_bears['cli']), TEST_BEARS_COUNT)\n \n+        self.assertEqual(\n+            [str(bear) for bear in local_bears['cli']],\n+            TEST_BEAR_NAMES)\n+\n         with bear_test_module():\n             local_bears, global_bears = get_filtered_bears(\n                 ['Java'], self.log_printer)\n \n-        self.assertEqual(len(local_bears['cli']), 2)\n-        self.assertEqual(str(local_bears['cli'][0]),\n-                         \"<class 'JavaTestBear.JavaTestBear'>\")\n-        self.assertEqual(str(local_bears['cli'][1]),\n-                         \"<class 'LineCountTestBear.LineCountTestBear'>\")\n+        expected = [\n+            \"<class 'JavaTestBear.JavaTestBear'>\",\n+            \"<class 'LineCountTestBear.LineCountTestBear'>\",\n+        ]\n+\n+        self.assertEqual(\n+            [str(bear) for bear in local_bears['cli']],\n+            expected)", "created_at": "2017-07-27T12:19:21Z", "last_edited_at": "2017-07-27T12:19:33Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTgzMDcyNQ==", "fields": {"body": "No change in the number of lines modified (2), as you still need to add the trailing ).\nMy version allows for more complicated sorting to be added later if needed.", "diff": "@@ -126,9 +126,12 @@ def icollect_bears(bear_dir_glob, bear_globs, kinds, log_printer):\n         # pass this later to iglob, we need to escape this.\n         bear_dir = glob_escape(bear_dir)\n         for bear_glob in bear_globs:\n-            for matching_file in iglob(\n-                    os.path.join(bear_dir, bear_glob + '.py')):\n+            matching_files = iglob(\n+                    os.path.join(bear_dir, bear_glob + '.py'))\n \n+            matching_files = sorted(matching_files)", "created_at": "2017-07-27T12:45:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTgzNTM4Mg==", "fields": {"body": "just 4 spaces indentation \ud83d\udc4d", "diff": "@@ -126,9 +126,12 @@ def icollect_bears(bear_dir_glob, bear_globs, kinds, log_printer):\n         # pass this later to iglob, we need to escape this.\n         bear_dir = glob_escape(bear_dir)\n         for bear_glob in bear_globs:\n-            for matching_file in iglob(\n-                    os.path.join(bear_dir, bear_glob + '.py')):\n+            matching_files = iglob(\n+                    os.path.join(bear_dir, bear_glob + '.py'))", "created_at": "2017-07-27T13:07:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDA5NzU1NA==", "fields": {"body": "no newline on purpose?", "diff": "@@ -0,0 +1,4 @@\n+{\n+  \"space-after-opening-brace\": 1,\n+  \"space-before-closing-brace\": 1\n+}", "created_at": "2017-07-28T14:05:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDEyODI2OQ==", "fields": {"body": "nvm", "diff": "@@ -0,0 +1,283 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='csscomb',\n+        output_format='corrected',\n+        use_stdin=True,\n+        result_message='The text does not comply to the set style.')\n+class CSSCombBear:\n+    \"\"\"\n+    CSScomb is a coding style formatter for CSS. You can easily write your own\n+    configuration to make your style sheets beautiful and consistent.\n+    \"\"\"\n+\n+    LANGUAGES = {'CSS'}\n+    REQUIREMENTS = {NpmRequirement('csscomb', '4.2.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    ASCIINEMA_URL = 'https://asciinema.org/a/bxpke7nizyxdf6mlx6ss4h405'\n+    CAN_FIX = {'Formatting'}\n+    SEE_MORE = 'https://github.com/csscomb/csscomb.js'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_semicolon: bool=True,\n+                        use_block_indentation: int=4,\n+                        use_color_case: str='upper',\n+                        allow_color_shorthand: bool=None,\n+                        allow_leading_zero_in_dimensions: bool=True,\n+                        preferred_quotation: str=\"'\",\n+                        prohibit_empty_rulesets: bool=True,\n+                        use_space_after_colon: int=1,\n+                        use_space_before_colon: int=0,\n+                        use_space_after_combinator: int=1,\n+                        use_space_before_combinator: int=1,\n+                        use_space_between_declarations: int=None,\n+                        use_space_after_opening_brace: int=None,\n+                        use_space_before_closing_brace: int=None,\n+                        use_space_after_selector_delimiter: int=1,\n+                        use_space_before_selector_delimiter: int=1,\n+                        prohibit_trailing_whitespace: bool=True,\n+                        prohibit_units_in_zero_valued_dimensions: bool=True,\n+                        vendor_prefix_align: bool=None,\n+                        use_lines_between_rulesets: int=1,\n+                        csscomb_config: str=''):", "created_at": "2017-07-28T16:12:27Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDEyODM2NQ==", "fields": {"body": "test name ;)", "diff": "@@ -0,0 +1,104 @@\n+import os\n+from queue import Queue\n+\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+\n+from bears.css.CSSCombBear import CSSCombBear\n+\n+\n+@generate_skip_decorator(CSSCombBear)\n+class ArtisticStyleBearTest(LocalBearTestHelper):", "created_at": "2017-07-28T16:12:56Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDI1MTU0Mw==", "fields": {"body": "separate commit for using it actually \ud83d\udc4d", "diff": "@@ -20,7 +21,7 @@ def execute_bear(bear, *args, **kwargs):\n         # For linters provide additional information, such as\n         # stdout and stderr.\n         with ExitStack() as stack:\n-            if hasattr(bear, 'process_output'):\n+            if isinstance(bear, LinterParent):", "created_at": "2017-07-30T20:11:58Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDI1MTUwNg==", "fields": {"body": "Could we just call it Linter? That reads just nicer:\nif isinstance(..., Linter):", "diff": "@@ -711,6 +714,8 @@ class GlobalLinterMeta(type(LinterBase), type(GlobalBear)):\n \n     class GlobalLinterBase(LinterBase, GlobalBear, metaclass=GlobalLinterMeta):\n \n+        LinterParent.register(LinterBase)", "created_at": "2017-07-30T20:10:17Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDI1MTUyMw==", "fields": {"body": "Please document that too :)", "diff": "@@ -711,6 +714,8 @@ class GlobalLinterMeta(type(LinterBase), type(GlobalBear)):\n \n     class GlobalLinterBase(LinterBase, GlobalBear, metaclass=GlobalLinterMeta):\n \n+        LinterParent.register(LinterBase)", "created_at": "2017-07-30T20:11:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDI1MTUzNg==", "fields": {"body": "Why not putting this into LinterBase? it seems that every class will inherit it", "diff": "@@ -711,6 +714,8 @@ class GlobalLinterMeta(type(LinterBase), type(GlobalBear)):\n \n     class GlobalLinterBase(LinterBase, GlobalBear, metaclass=GlobalLinterMeta):\n \n+        LinterParent.register(LinterBase)", "created_at": "2017-07-30T20:11:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMTM2Mw==", "fields": {"body": "Hm we need to choose better names after merge for filter_bears and get_filtered_bears (both sound like doing the same).", "diff": "@@ -33,3 +33,20 @@ def get_filtered_bears(cls, filter, args, all_bears=None):\n         if not args or len(args) == 0:\n             return all_bears\n         return cls.available_filters[filter](all_bears, args)\n+\n+    @classmethod\n+    def filter_bears(cls, bears, args):", "created_at": "2017-07-29T14:11:10Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw==", "fields": {"body": "Any reasons for migrating to materializecss? Please mention that in the commit message.", "diff": "@@ -11,15 +11,15 @@\n     <link rel=\"stylesheet\"\n           href=\"https://fonts.googleapis.com/css?family=Roboto:100,200,300,400,500,600,800,900\">\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n-    <link rel=\"stylesheet\"\n           href=\"bower_components/google-code-prettify/src/prettify.css\">\n-    <!-- Bootstrap Material Design -->\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap-material-design/dist/css/bootstrap-material-design.css\">\n+          href=\"bower_components/materialize/dist/css/materialize.min.css\">", "created_at": "2017-07-29T16:25:25Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyODM0OQ==", "fields": {"body": "The move of this :param bears: entry should go into the param-reordering commit \ud83d\udc4d", "diff": "@@ -21,34 +21,35 @@ def is_valid_filter(cls, filter):\n         return filter in cls.available_filters\n \n     @classmethod\n-    def apply_filter(cls, filter, args, all_bears=None):\n-        if all_bears is None:\n+    def apply_filter(cls, filter_name, filter_args, bears=None):\n+        if bears is None:\n             from coalib.settings.ConfigurationGathering import (\n                 get_all_bears)\n-            all_bears = get_all_bears(LogPrinter())\n-        if not cls.is_valid_filter(filter):\n+            bears = get_all_bears(LogPrinter())\n+        if not cls.is_valid_filter(filter_name):\n             raise InvalidFilterException('{!r} is an invalid filter. '\n                                          'Available filters: {}'.format(\n-                                             filter, cls.get_all_filters_str()))\n-        if not args or len(args) == 0:\n-            return all_bears\n-        return cls.available_filters[filter](all_bears, args)\n+                                             filter_name,\n+                                             cls.get_all_filters_str()))\n+        if not filter_args or len(filter_args) == 0:\n+            return bears\n+        return cls.available_filters[filter_name](bears, filter_args)\n \n     @classmethod\n-    def apply_filters(cls, args, bears=None):\n+    def apply_filters(cls, filters, bears=None):\n         \"\"\"\n         Returns bears after filtering based on ``args``. It returns\n         intersection of bears if more than one element is present in ``args``\n         list.\n \n-        :param bears: The bears to filter.\n-        :param args:  List of args based on ``bears`` has to be filtered.\n+        :param filters:  List of args based on ``bears`` has to be filtered.\n                       For example:\n                       ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        :param bears: The bears to filter.", "created_at": "2017-07-29T21:03:14Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDM3MTYxMQ==", "fields": {"body": "or maybe call it LinterClass or so... LinterParent sounds just not right^^", "diff": "@@ -711,6 +714,8 @@ class GlobalLinterMeta(type(LinterBase), type(GlobalBear)):\n \n     class GlobalLinterBase(LinterBase, GlobalBear, metaclass=GlobalLinterMeta):\n \n+        LinterParent.register(LinterBase)", "created_at": "2017-07-31T14:40:25Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDM3Mzc0NQ==", "fields": {"body": "Document that inside the @linter documentation, not here :) LinterBase is not exposed outside.", "diff": "@@ -165,6 +166,10 @@ def __repr__(cls):\n                 cls.__name__, options['executable'])\n \n     class LinterBase(metaclass=LinterMeta):\n+        \"\"\"\n+        The ``LinterBase`` class is also a subclass of the ``LinterParent``\n+        class.\n+        \"\"\"", "created_at": "2017-07-31T14:47:32Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDM3MzgxMw==", "fields": {"body": "I want tests for this feature ;)", "diff": "@@ -0,0 +1,5 @@\n+from abc import ABCMeta\n+\n+\n+class LinterParent(metaclass=ABCMeta):", "created_at": "2017-07-31T14:47:44Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDM3NDA3MQ==", "fields": {"body": "This results in a metaclass conflict, tried that as my first resort.", "diff": "@@ -677,6 +682,8 @@ def __repr__(self):\n             return '<{} linter object (wrapping {!r}) at {}>'.format(\n                 type(self).__name__, self.get_executable(), hex(id(self)))\n \n+    LinterParent.register(LinterBase)", "created_at": "2017-07-31T14:48:39Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDQ0NTI1Ng==", "fields": {"body": "you have to provide this at @linter, not here^^", "diff": "@@ -0,0 +1,38 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='httpolice',\n+        output_format='regex',\n+        output_regex=r'(?P<severity>E|C|D)\\s(?P<message>.*)')\n+class HTTPoliceLintBear:\n+    \"\"\"\n+    HTTPolice is a linter for HTTP requests and responses. It checks them for\n+    conformance to standards and best practices.\n+    \"\"\"\n+    LANGUAGES = {'HAR'}\n+    REQUIREMENTS = {PipRequirement('HTTPolice', '0.5.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax'}\n+    SEE_MORE = 'https://github.com/vfaronov/httpolice'\n+\n+    severity_map = {'E': RESULT_SEVERITY.MAJOR,\n+                    'C': RESULT_SEVERITY.NORMAL,\n+                    'D': RESULT_SEVERITY.INFO}", "created_at": "2017-07-31T19:56:00Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDQ2Njk0Ng==", "fields": {"body": "is there a sensible default list?", "diff": "@@ -0,0 +1,38 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='httpolice',\n+        output_format='regex',\n+        output_regex=r'(?P<severity>E|C|D)\\s(?P<message>.*)')\n+class HTTPoliceLintBear:\n+    \"\"\"\n+    HTTPolice is a linter for HTTP requests and responses. It checks them for\n+    conformance to standards and best practices.\n+    \"\"\"\n+    LANGUAGES = {'HAR'}\n+    REQUIREMENTS = {PipRequirement('HTTPolice', '0.5.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax'}\n+    SEE_MORE = 'https://github.com/vfaronov/httpolice'\n+\n+    severity_map = {'E': RESULT_SEVERITY.MAJOR,\n+                    'C': RESULT_SEVERITY.NORMAL,\n+                    'D': RESULT_SEVERITY.INFO}\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         silent: typed_list(str)=[]):\n+        \"\"\"\n+        :param silent:\n+            Silences the given list of notice IDs.", "created_at": "2017-07-31T21:28:25Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDQ2NjkxNQ==", "fields": {"body": "hmm the name silent is very general, maybe you can make it more precise?", "diff": "@@ -0,0 +1,38 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='httpolice',\n+        output_format='regex',\n+        output_regex=r'(?P<severity>E|C|D)\\s(?P<message>.*)')\n+class HTTPoliceLintBear:\n+    \"\"\"\n+    HTTPolice is a linter for HTTP requests and responses. It checks them for\n+    conformance to standards and best practices.\n+    \"\"\"\n+    LANGUAGES = {'HAR'}\n+    REQUIREMENTS = {PipRequirement('HTTPolice', '0.5.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax'}\n+    SEE_MORE = 'https://github.com/vfaronov/httpolice'\n+\n+    severity_map = {'E': RESULT_SEVERITY.MAJOR,\n+                    'C': RESULT_SEVERITY.NORMAL,\n+                    'D': RESULT_SEVERITY.INFO}\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         silent: typed_list(str)=[]):\n+        \"\"\"\n+        :param silent:", "created_at": "2017-07-31T21:28:15Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDQ2OTU5Ng==", "fields": {"body": "do you maybe have at least one real HAR file?", "diff": "@@ -0,0 +1,37 @@\n+{\n+  \"_warning\": \"This is not a real HAR file! It only contains the keys that are interesting to HTTPolice. Please do not use this as an example of a valid HAR file.\",", "created_at": "2017-07-31T21:39:46Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDUyODg5OQ==", "fields": {"body": "test_valid_file has a real HAR file \ud83d\ude04", "diff": "@@ -0,0 +1,37 @@\n+{\n+  \"_warning\": \"This is not a real HAR file! It only contains the keys that are interesting to HTTPolice. Please do not use this as an example of a valid HAR file.\",", "created_at": "2017-08-01T06:35:19Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDYxNDkxMg==", "fields": {"body": "I actually meant to name the setting to something \"HTTPolice\" related ;)\nThe concept of silencing ids is not uncommon for other linters too, so we should disambiguate :)\nE.g. silence_httpolice_ids (maybe look out for other linters that have also ids you can silence (I think BanditBear has this too), and try to adapt the naming scheme \ud83d\udc4d)", "diff": "@@ -0,0 +1,37 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='httpolice',\n+        output_format='regex',\n+        output_regex=r'(?P<severity>E|C|D)\\s(?P<message>.*)',\n+        severity_map={'E': RESULT_SEVERITY.MAJOR,\n+                      'C': RESULT_SEVERITY.NORMAL,\n+                      'D': RESULT_SEVERITY.INFO})\n+class HTTPoliceLintBear:\n+    \"\"\"\n+    HTTPolice is a linter for HTTP requests and responses. It checks them for\n+    conformance to standards and best practices.\n+    \"\"\"\n+    LANGUAGES = {'HAR'}\n+    REQUIREMENTS = {PipRequirement('HTTPolice', '0.5.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax'}\n+    SEE_MORE = 'https://github.com/vfaronov/httpolice'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         silence_ids: typed_list(str)=[]):\n+        \"\"\"\n+        :param silence_ids:", "created_at": "2017-08-01T14:01:14Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDYxNTA0Mg==", "fields": {"body": "The documentation shall also state that these IDs are defined by HTTPolice, so people know where to lookup those \ud83d\udc4d", "diff": "@@ -0,0 +1,37 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='httpolice',\n+        output_format='regex',\n+        output_regex=r'(?P<severity>E|C|D)\\s(?P<message>.*)',\n+        severity_map={'E': RESULT_SEVERITY.MAJOR,\n+                      'C': RESULT_SEVERITY.NORMAL,\n+                      'D': RESULT_SEVERITY.INFO})\n+class HTTPoliceLintBear:\n+    \"\"\"\n+    HTTPolice is a linter for HTTP requests and responses. It checks them for\n+    conformance to standards and best practices.\n+    \"\"\"\n+    LANGUAGES = {'HAR'}\n+    REQUIREMENTS = {PipRequirement('HTTPolice', '0.5.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax'}\n+    SEE_MORE = 'https://github.com/vfaronov/httpolice'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         silence_ids: typed_list(str)=[]):\n+        \"\"\"\n+        :param silence_ids:\n+            Silences the given list of notice IDs.", "created_at": "2017-08-01T14:01:41Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDg3OTI5Ng==", "fields": {"body": "the docstring is wrong ;)", "diff": "@@ -0,0 +1,8 @@\n+from abc import ABCMeta\n+\n+\n+class LinterClass(metaclass=ABCMeta):\n+    \"\"\"\n+    An abstract base class for linter bears that registers the ``LinterBase``\n+    class.", "created_at": "2017-08-02T13:43:25Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDg3OTk0Nw==", "fields": {"body": "I would maybe put the documentation before the Documentation: ... part. Imo it doesn't fit here very well^^", "diff": "@@ -766,6 +768,11 @@ def linter(executable: str,\n     ...     def create_arguments(filename, file, config_file):\n     ...         return \"--lint\", filename\n \n+    The class is also a subclass of the ``LinterClass`` class.\n+\n+    >>> issubclass(XLintBear, LinterClass)\n+    True\n+", "created_at": "2017-08-02T13:45:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDg4MDA3Mg==", "fields": {"body": "-->\nEvery linter is also a subclass of the LinterClass class.", "diff": "@@ -766,6 +768,11 @@ def linter(executable: str,\n     ...     def create_arguments(filename, file, config_file):\n     ...         return \"--lint\", filename\n \n+    The class is also a subclass of the ``LinterClass`` class.", "created_at": "2017-08-02T13:46:22Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDk2MjYyOA==", "fields": {"body": "I think we should pass the list of all the filters instead of passing it in string format. Makes more sense to format it over here.", "diff": "@@ -1,2 +1,9 @@\n class InvalidFilterException(Exception):\n-    pass\n+    def __init__(self, filter, available_filters):", "created_at": "2017-08-02T18:46:25Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxMTY0MQ==", "fields": {"body": "Why did you remove the @staticmethod decorator? As I see it self is only used to access other methods that can be static.", "diff": "@@ -13,8 +15,7 @@ class DocBaseClass:\n     documentation should inherit from this.\n     \"\"\"\n \n-    @staticmethod\n-    def extract(content, language, docstyle):\n+    def extract(self, content, language, docstyle):", "created_at": "2017-08-02T15:33:10Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxNDIxNQ==", "fields": {"body": "no it works fine :)", "diff": "@@ -0,0 +1,39 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from coalib.settings.Setting import typed_list\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='httpolice',\n+        output_format='regex',\n+        output_regex=r'(?P<severity>E|C|D)\\s(?P<message>.*)',\n+        severity_map={'E': RESULT_SEVERITY.MAJOR,\n+                      'C': RESULT_SEVERITY.NORMAL,\n+                      'D': RESULT_SEVERITY.INFO})\n+class HTTPoliceLintBear:\n+    \"\"\"\n+    HTTPolice is a linter for HTTP requests and responses. It checks them for\n+    conformance to standards and best practices.\n+    \"\"\"\n+    LANGUAGES = {'HAR'}\n+    REQUIREMENTS = {PipRequirement('HTTPolice', '0.5.2')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Syntax'}\n+    SEE_MORE = 'https://github.com/vfaronov/httpolice'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file,\n+                         httpolice_silence_ids: typed_list(str)=[]):\n+        \"\"\"\n+        :param httpolice_silence_ids:\n+            Silences the given list of notice IDs. You can get more information\n+            about the available notices and their IDs at\n+            https://httpolice.readthedocs.io/en/stable/notices.html.", "created_at": "2017-08-02T15:42:25Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxODYxNw==", "fields": {"body": "can't you just call super().__init__(message)? Then you don't need to override __str__.", "diff": "@@ -1,2 +1,9 @@\n class InvalidFilterException(Exception):\n-    pass\n+    def __init__(self, filter, available_filters):\n+        self.filter = filter\n+        self.available_filters = available_filters", "created_at": "2017-08-02T15:57:05Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxOTEzMg==", "fields": {"body": "I don't like the name \"Kind\". It's too generic. Why not go with \"docstring_type\"?", "diff": "@@ -18,10 +18,16 @@ class DocstyleDefinition:\n     Metadata = namedtuple('Metadata', ('param_start', 'param_end',\n                                        'exception_start', 'exception_end',\n                                        'return_sep'))\n+    ClassPadding = namedtuple('ClassPadding',\n+                              ('top_padding', 'bottom_padding'))\n+    FunctionPadding = namedtuple('FunctionPadding',\n+                                 ('top_padding', 'bottom_padding'))\n+    Kind = namedtuple('Kind', ('class_sign', 'function_sign'))", "created_at": "2017-08-02T15:59:00Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxOTM0Nw==", "fields": {"body": "These descriptions can be more specific. \"Information about\" tells me nothing.", "diff": "@@ -39,6 +45,14 @@ def __init__(self, language: str, docstyle: str, markers: (Iterable, str),\n                          e.g. ``param_start`` defining the start symbol of\n                          the parameter fields and ``param_end`` defining the\n                          end.\n+        :param class_padding: A namedtuple consisting of information about\n+                         blank lines before and after the documentation of\n+                         kind class.\n+        :param function_padding: A namedtuple consisting of information about\n+                         blank lines before and after the documentation of\n+                         kind function.\n+        :param kind_signature: A namedtuple consisting of information about\n+                         signatures of class and function of a language.", "created_at": "2017-08-02T15:59:57Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkyMTY2OQ==", "fields": {"body": "These constructs are super hard to read. Would look much nicer as a try/except block", "diff": "@@ -186,13 +227,38 @@ def load(cls, language: str, docstyle: str, coalang_dir=None):\n         metadata = cls.Metadata(*(str(docstyle_settings.get(req_setting, ''))\n                                   for req_setting in metadata_settings))\n \n+        class_padding = (cls.ClassPadding('', '') if\n+                         docstyle_settings.get('class_padding', '').value == ''\n+                         else cls.ClassPadding(\n+                         *(int(padding) for padding in tuple(\n+                             docstyle_settings.get('class_padding', ''))))\n+                         )", "created_at": "2017-08-02T16:08:56Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTIxNTEwOA==", "fields": {"body": "This should be a configuration setting.\nMaybe have it default to the same directory as the filename.\nShould also have a test case for imported modules.", "diff": "@@ -0,0 +1,35 @@\n+from os.path import dirname\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='pyang',\n+        use_stderr=True,\n+        output_format='regex',\n+        output_regex=r'.*:(?P<line>\\d+):\\s*(?P<message>.*)')\n+class YANGBear:\n+    \"\"\"\n+    Lints `YANG <https://en.wikipedia.org/wiki/YANG>`__ model files using\n+    ``pyang``.\n+\n+    From `RFC 7950 <https://tools.ietf.org/html/rfc7950>`__:\n+\n+    _\"YANG is a data modeling language used to model configuration data,\n+    state data, Remote Procedure Calls, and notifications for network\n+    management protocols.\"_\n+    \"\"\"\n+    LANGUAGES = {'YANG'}\n+    REQUIREMENTS = {PipRequirement('pyang', '1.7.1')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Formatting', 'Smell', 'Syntax'}\n+    SEE_MORE = 'https://pypi.python.org/pypi/pyang'\n+\n+    @staticmethod\n+    def create_arguments(filename, file, config_file):\n+        # -p defines the search path for other YANG modules imported by", "created_at": "2017-08-03T17:54:01Z", "last_edited_at": "2017-08-03T17:55:00Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTMxODAwMg==", "fields": {"body": "not sure if \"ignoring them\" now makes sense because we abort anyway", "diff": "@@ -266,8 +266,8 @@ def _cleanup_bear(self, bear):\n             # Check the DependencyTracker additionally for remaining\n             # dependencies.\n             resolved = self.dependency_tracker.are_dependencies_resolved\n-            if not resolved:  # pragma: no cover\n-                logging.warning(\n+            if not resolved:\n+                raise RuntimeError(  # Unreachable code\n                     'Core finished with run, but it seems some dependencies '\n                     'were unresolved: {}. Ignoring them, but this is a bug, '", "created_at": "2017-08-04T06:10:34Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTU0MDA1OQ==", "fields": {"body": "I'd like a little summary of what language tool can fix plus a link to the documentation.", "diff": "@@ -0,0 +1,110 @@\n+import shutil\n+\n+from coalib.bearlib.languages.documentation.DocumentationComment import (\n+    DocumentationComment)\n+from coalib.bearlib.languages.documentation.DocstyleDefinition import (\n+    DocstyleDefinition)\n+from coalib.bearlib.languages.documentation.DocBaseClass import (\n+    DocBaseClass)\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class DocGrammarBear(DocBaseClass, LocalBear):\n+    LANGUAGES = {language for docstyle, language in\n+                 DocstyleDefinition.get_available_definitions()}\n+    REQUIREMENTS = {PipRequirement('language-check', '1.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Documentation', 'Spelling', 'Grammar'}\n+    CAN_FIX = {'Documentation', 'Spelling', 'Grammar'}\n+\n+    @classmethod\n+    def check_prerequisites(cls):\n+        if shutil.which('java') is None:\n+            return 'java is not installed.'\n+        else:\n+            try:\n+                from language_check import LanguageTool, correct\n+                LanguageTool\n+                correct\n+                return True\n+            except ImportError:  # pragma: no cover\n+                return 'Please install the `language-check` pip package.'\n+\n+    def process_documentation(self,\n+                              parsed,\n+                              natural_language,\n+                              languagetool_disable_rules):\n+        \"\"\"\n+        This fixes the parsed documentation comment.\n+\n+        :param parsed:\n+            Contains parsed documentation comment.\n+        :param natural_language:\n+            A locale representing the language you want to have checked.\n+            Default is set to 'en-US'.\n+        :param languagetool_disable_rules:\n+            List of rules to disable checks for.\n+        :return:\n+            A tuple of fixed parsed documentation comment and warning_desc.\n+        \"\"\"\n+        # Defer import so the check_prerequisites can be run without\n+        # language_check being there.\n+        from language_check import LanguageTool, correct\n+\n+        tool = LanguageTool(natural_language)\n+        tool.disabled.update(languagetool_disable_rules)\n+\n+        metadata = iter(parsed)\n+\n+        new_metadata = []\n+        for comment in metadata:\n+            matches = tool.check(comment.desc)\n+            new_desc = correct(comment.desc, matches)\n+            new_metadata.append(comment._replace(desc=new_desc))\n+\n+        return (new_metadata,\n+                'Documentation has invalid Grammar/Spelling')\n+\n+    def run(self, filename, file, language: str,\n+            docstyle: str='default', natural_language: str='en-US',\n+            languagetool_disable_rules: typed_list(str)=()):\n+        \"\"\"\n+        Checks the main description and comments description of documentation\n+        with LanguageTool.", "created_at": "2017-08-06T10:54:21Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTU0MjUwNw==", "fields": {"body": "can we have a cool asciinema?", "diff": "@@ -0,0 +1,110 @@\n+import shutil\n+\n+from coalib.bearlib.languages.documentation.DocumentationComment import (\n+    DocumentationComment)\n+from coalib.bearlib.languages.documentation.DocstyleDefinition import (\n+    DocstyleDefinition)\n+from coalib.bearlib.languages.documentation.DocBaseClass import (\n+    DocBaseClass)\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class DocGrammarBear(DocBaseClass, LocalBear):\n+    LANGUAGES = {language for docstyle, language in\n+                 DocstyleDefinition.get_available_definitions()}\n+    REQUIREMENTS = {PipRequirement('language-check', '1.0')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Documentation', 'Spelling', 'Grammar'}\n+    CAN_FIX = {'Documentation', 'Spelling', 'Grammar'}", "created_at": "2017-08-06T13:03:23Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTU0MjcwNA==", "fields": {"body": "also can you use this decorator instead? http://github.com/coala/coala/blob/master/coalib/testing/BearTestHelper.py#L4", "diff": "@@ -0,0 +1,75 @@\n+from queue import Queue\n+import os.path\n+import unittest\n+import shutil\n+\n+from coalib.results.Diff import Diff\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+\n+from bears.documentation.DocGrammarBear import DocGrammarBear\n+\n+try:\n+    import language_check\n+    language_check", "created_at": "2017-08-06T13:14:55Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTU0MzAwNA==", "fields": {"body": "Can't we use the check of the base class? This message is probably better than the default one, however optimally requirements will take this over^^", "diff": "@@ -25,6 +28,31 @@ class TravisLintBear:\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n \n+    # IP Address of www.google.com\n+    CHECK_CONNECTION_URL = 'http://216.58.218.174'\n+    DEFAULT_TIMEOUT = 15\n+\n+    @classmethod\n+    def check_prerequisites(cls):\n+        code = cls.get_status_code(\n+            cls.CHECK_CONNECTION_URL, cls.DEFAULT_TIMEOUT)\n+        if which('travis') is None:  # pragma: no cover\n+            return ('Please ensure that travis has been installed. Refer to'\n+                    'https://docs.travis-ci.com/user/travis-lint'\n+                    '#Command-line-Validation for more details.')", "created_at": "2017-08-06T13:30:00Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTU0OA==", "fields": {"body": "\"You were a newcomer before, we'd like to know...\"", "diff": "@@ -30,7 +30,9 @@ class LabHub(BotPlugin):\n                      'also be there for you at all times to help you with '\n                      'actual problems. :)',\n         'developers': ' Wow @{}, you are a part of developers team now! :tada: '\n-                      'Welcome to ourcommunity!',\n+                      'Welcome to ourcommunity! You just passed the newcomers '\n+                      'phase, we\\'d like to know what could\\'ve been better, '", "created_at": "2017-08-06T10:27:36Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTUwNA==", "fields": {"body": "if its oftopic, we could make it a markdown link? that links to the offtopic channel", "diff": "@@ -0,0 +1,36 @@\n+import re\n+import string\n+import textwrap\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Pitchfork(BotPlugin):\n+    \"\"\"\n+    To pitchfork users down to ...\n+    \"\"\"\n+\n+    @botcmd\n+    def pitchfork(self, msg, arg):\n+        \"\"\"\n+        To pitchfork user down to ...\n+        \"\"\"\n+        match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n+                         arg)\n+        if match:\n+            user = match.group(1)\n+            place = match.group(2) if match.group(2) else 'offtopic'\n+            return textwrap.dedent((\n+                string.Template(\"\"\"\n+                    @$user, you are being pitchforked down to $place", "created_at": "2017-08-06T10:25:10Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTY1OQ==", "fields": {"body": "capitals?", "diff": "@@ -25,6 +28,31 @@ class TravisLintBear:\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n \n+    # IP Address of www.google.com\n+    check_connection_url = 'http://216.58.218.174'", "created_at": "2017-08-06T10:33:30Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTYzMA==", "fields": {"body": "newline before this for readability", "diff": "@@ -71,3 +73,13 @@ def test_empty_file(self):\n                                 file=get_testfile_path(file_name),\n                                 severity=RESULT_SEVERITY.NORMAL)],\n             filename=get_testfile_path(file_name))\n+\n+    def test_check_prerequisites(self):\n+        with requests_mock.Mocker() as m:\n+            m.head(TravisLintBear.check_connection_url,\n+                   status_code=200)\n+            self.assertTrue(TravisLintBear.check_prerequisites())\n+            m.head(TravisLintBear.check_connection_url,", "created_at": "2017-08-06T10:32:11Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTY1MjMyNQ==", "fields": {"body": "what's the default timeout of requests? Maybe we should just use that", "diff": "@@ -25,6 +28,29 @@ class TravisLintBear:\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n \n+    # IP Address of www.google.com\n+    CHECK_CONNECTION_URL = 'http://216.58.218.174'\n+    DEFAULT_TIMEOUT = 15", "created_at": "2017-08-07T13:21:38Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTY1MjY2OQ==", "fields": {"body": "explicitly return None here", "diff": "@@ -25,6 +28,29 @@ class TravisLintBear:\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n \n+    # IP Address of www.google.com\n+    CHECK_CONNECTION_URL = 'http://216.58.218.174'\n+    DEFAULT_TIMEOUT = 15\n+\n+    @classmethod\n+    def check_prerequisites(cls):\n+        code = cls.get_status_code(\n+            cls.CHECK_CONNECTION_URL, cls.DEFAULT_TIMEOUT)\n+        if which('travis') is None:  # pragma: no cover\n+            return super().check_prerequisites()\n+        else:\n+            return ('You are not connected to the internet.'\n+                    if code is None else True)\n+\n+    @staticmethod\n+    def get_status_code(url, timeout):\n+        try:\n+            code = requests.head(url, allow_redirects=False,\n+                                 timeout=timeout).status_code\n+            return code\n+        except requests.exceptions.RequestException:\n+            pass", "created_at": "2017-08-07T13:23:04Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTY1MjgwMA==", "fields": {"body": "why not just\nreturn requests.head(...).status_code\n\n? :)", "diff": "@@ -25,6 +28,29 @@ class TravisLintBear:\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n \n+    # IP Address of www.google.com\n+    CHECK_CONNECTION_URL = 'http://216.58.218.174'\n+    DEFAULT_TIMEOUT = 15\n+\n+    @classmethod\n+    def check_prerequisites(cls):\n+        code = cls.get_status_code(\n+            cls.CHECK_CONNECTION_URL, cls.DEFAULT_TIMEOUT)\n+        if which('travis') is None:  # pragma: no cover\n+            return super().check_prerequisites()\n+        else:\n+            return ('You are not connected to the internet.'\n+                    if code is None else True)\n+\n+    @staticmethod\n+    def get_status_code(url, timeout):\n+        try:\n+            code = requests.head(url, allow_redirects=False,\n+                                 timeout=timeout).status_code\n+            return code", "created_at": "2017-08-07T13:23:35Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTY1NDE1MQ==", "fields": {"body": "What if you actually receive an error code?", "diff": "@@ -25,6 +28,29 @@ class TravisLintBear:\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n \n+    # IP Address of www.google.com\n+    CHECK_CONNECTION_URL = 'http://216.58.218.174'\n+    DEFAULT_TIMEOUT = 15\n+\n+    @classmethod\n+    def check_prerequisites(cls):\n+        code = cls.get_status_code(\n+            cls.CHECK_CONNECTION_URL, cls.DEFAULT_TIMEOUT)\n+        if which('travis') is None:  # pragma: no cover\n+            return super().check_prerequisites()\n+        else:\n+            return ('You are not connected to the internet.'\n+                    if code is None else True)\n+\n+    @staticmethod\n+    def get_status_code(url, timeout):\n+        try:\n+            code = requests.head(url, allow_redirects=False,\n+                                 timeout=timeout).status_code\n+            return code", "created_at": "2017-08-07T13:29:07Z", "last_edited_at": "2017-08-09T21:36:41Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTk0NzI2NQ==", "fields": {"body": "i think you meant self.language == other.language, right?", "diff": "@@ -37,7 +37,9 @@ def __init__(self, language, **taste_values):\n                 setattr(self, name, taste_values.get(name, taste.default))\n \n     def __eq__(self, other):\n-        return type(self) is type(other) and self.tastes == other.tastes\n+        return (type(self) is type(other) and\n+                self.tastes == other.tastes and\n+                self.language == self.language)", "created_at": "2017-08-08T15:29:54Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjIyNjkyNQ==", "fields": {"body": "Maybe we should leave a line and then do the DocGrammarBear import.", "diff": "@@ -0,0 +1,127 @@\n+from queue import Queue\n+import unittest\n+import shutil\n+\n+from coalib.results.Diff import Diff\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.documentation.DocGrammarBear import DocGrammarBear\n+from string import Template", "created_at": "2017-08-09T15:55:32Z", "last_edited_at": null, "author": "yash-nisar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjM2ODU3NQ==", "fields": {"body": "Please add a comment explainting what the test does.", "diff": "@@ -0,0 +1,127 @@\n+from queue import Queue\n+import unittest\n+import shutil\n+\n+from coalib.results.Diff import Diff\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.documentation.DocGrammarBear import DocGrammarBear\n+from string import Template\n+\n+\n+try:\n+    import language_check\n+    language_check\n+except ImportError as err:\n+    raise SkipTest(str(err))\n+\n+\n+def make_docstring(main_desc: str='',\n+                   param_desc: str='',\n+                   return_desc: str=''):\n+    docstring = Template('\"\"\"\\n' +\n+                         '$main_description' +\n+                         '\\n' +\n+                         ':param xyz: $param_description' +\n+                         ':return: $return_description' +\n+                         '\"\"\"\\n')\n+    return docstring.substitute(main_description=main_desc,\n+                                param_description=param_desc,\n+                                return_description=return_desc\n+                                ).splitlines(True)\n+\n+\n+def test(test_file, expected_file, optional_setting=None):\n+    def test_function(self):\n+        arguments = {'language': 'python', 'docstyle': 'default'}\n+        if optional_setting:\n+            arguments.update(optional_setting)\n+        section = Section('test-section')\n+        for key, value in arguments.items():\n+            section[key] = value\n+\n+        with execute_bear(\n+                DocGrammarBear(section, Queue()),\n+                'dummy_filename',\n+                test_file,\n+                **arguments) as results:\n+\n+            diff = Diff(test_file)\n+            for result in results:\n+                # Only the given test file should contain a patch.\n+                self.assertEqual(len(result.diffs), 1)\n+\n+                diff += result.diffs['dummy_filename']\n+\n+        self.assertEqual(expected_file, diff.modified)\n+\n+    return test_function\n+\n+\n+@generate_skip_decorator(DocGrammarBear)\n+class DocGrammarBearTest(unittest.TestCase):\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(DocGrammarBear.check_prerequisites(),\n+                             'java is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/java'\n+            self.assertTrue(DocGrammarBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    test_spelling = test(\n+        make_docstring(main_desc='Thiss is main descrpton.\\n'),\n+        make_docstring(main_desc='This is main description.\\n'))\n+\n+    test_capitalize_sentence_start = test(\n+        make_docstring(main_desc='this sentence starts with small letter\\n'),\n+        make_docstring(main_desc='This sentence starts with small letter\\n'))\n+\n+    test_extra_whitespace = test(\n+        make_docstring(main_desc='This sentence    has extra  white spaces\\n'),\n+        make_docstring(main_desc='This sentence has extra white spaces\\n'))\n+\n+    test_apostrophe_comma = test(\n+        make_docstring(main_desc='This sentence doesnt have an apostrophe\\n'),\n+        make_docstring(main_desc='This sentence doesn\\'t have an '\n+                                 'apostrophe\\n'))\n+\n+    test_correct_grammar = test(\n+        make_docstring(main_desc='This documentation has correct grammar.\\n',\n+                       param_desc='Dummy description.\\n',\n+                       return_desc='Return Nothing.\\n'),\n+        make_docstring(main_desc='This documentation has correct grammar.\\n',\n+                       param_desc='Dummy description.\\n',\n+                       return_desc='Return Nothing.\\n'))\n+\n+    test_disable_setting_UPPERCASE_SENTENCE_START = test(\n+        make_docstring(main_desc='sentence starting with lowercase.\\n',\n+                       param_desc='dummy description.\\n',\n+                       return_desc='Nothing.\\n'),\n+        make_docstring(main_desc='sentence starting with lowercase.\\n',\n+                       param_desc='dummy description.\\n',\n+                       return_desc='Nothing.\\n'),\n+        {'languagetool_disable_rules': 'UPPERCASE_SENTENCE_START'})\n+\n+    test_explicit = test([", "created_at": "2017-08-10T05:51:01Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjM2ODk3Mg==", "fields": {"body": "Instead of making the same docstring twice, make it once and pass it to the function twice. This make it immediately clear, that nothing changes.", "diff": "@@ -0,0 +1,127 @@\n+from queue import Queue\n+import unittest\n+import shutil\n+\n+from coalib.results.Diff import Diff\n+from coalib.settings.Section import Section\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.documentation.DocGrammarBear import DocGrammarBear\n+from string import Template\n+\n+\n+try:\n+    import language_check\n+    language_check\n+except ImportError as err:\n+    raise SkipTest(str(err))\n+\n+\n+def make_docstring(main_desc: str='',\n+                   param_desc: str='',\n+                   return_desc: str=''):\n+    docstring = Template('\"\"\"\\n' +\n+                         '$main_description' +\n+                         '\\n' +\n+                         ':param xyz: $param_description' +\n+                         ':return: $return_description' +\n+                         '\"\"\"\\n')\n+    return docstring.substitute(main_description=main_desc,\n+                                param_description=param_desc,\n+                                return_description=return_desc\n+                                ).splitlines(True)\n+\n+\n+def test(test_file, expected_file, optional_setting=None):\n+    def test_function(self):\n+        arguments = {'language': 'python', 'docstyle': 'default'}\n+        if optional_setting:\n+            arguments.update(optional_setting)\n+        section = Section('test-section')\n+        for key, value in arguments.items():\n+            section[key] = value\n+\n+        with execute_bear(\n+                DocGrammarBear(section, Queue()),\n+                'dummy_filename',\n+                test_file,\n+                **arguments) as results:\n+\n+            diff = Diff(test_file)\n+            for result in results:\n+                # Only the given test file should contain a patch.\n+                self.assertEqual(len(result.diffs), 1)\n+\n+                diff += result.diffs['dummy_filename']\n+\n+        self.assertEqual(expected_file, diff.modified)\n+\n+    return test_function\n+\n+\n+@generate_skip_decorator(DocGrammarBear)\n+class DocGrammarBearTest(unittest.TestCase):\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(DocGrammarBear.check_prerequisites(),\n+                             'java is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/java'\n+            self.assertTrue(DocGrammarBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    test_spelling = test(\n+        make_docstring(main_desc='Thiss is main descrpton.\\n'),\n+        make_docstring(main_desc='This is main description.\\n'))\n+\n+    test_capitalize_sentence_start = test(\n+        make_docstring(main_desc='this sentence starts with small letter\\n'),\n+        make_docstring(main_desc='This sentence starts with small letter\\n'))\n+\n+    test_extra_whitespace = test(\n+        make_docstring(main_desc='This sentence    has extra  white spaces\\n'),\n+        make_docstring(main_desc='This sentence has extra white spaces\\n'))\n+\n+    test_apostrophe_comma = test(\n+        make_docstring(main_desc='This sentence doesnt have an apostrophe\\n'),\n+        make_docstring(main_desc='This sentence doesn\\'t have an '\n+                                 'apostrophe\\n'))\n+\n+    test_correct_grammar = test(", "created_at": "2017-08-10T05:55:13Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2NzU3Mw==", "fields": {"body": "What's the dot for after <message>?", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')", "created_at": "2017-08-11T19:31:19Z", "last_edited_at": "2017-08-11T19:32:13Z", "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2NzUxOA==", "fields": {"body": "you should add the closing \\] to the regex ;)", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')", "created_at": "2017-08-11T19:30:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2ODI2Ng==", "fields": {"body": "remove spaces around = operator", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,", "created_at": "2017-08-11T19:35:24Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2ODYxNQ==", "fields": {"body": "allow sounds like both are allowed, single and double quotes.", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.", "created_at": "2017-08-11T19:37:15Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2ODcxMw==", "fields": {"body": "use a different attribute name, that's not the same as its value.", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over", "created_at": "2017-08-11T19:37:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2ODgzMQ==", "fields": {"body": "--> Disallow defining the same attribute more than ...", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in", "created_at": "2017-08-11T19:38:32Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTM1MA==", "fields": {"body": "again: You don't allow this case together with other cases, so you need to rename this too require_...", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:\n+            Enforce the ``<!DOCTYPE>`` declaration at the beginning.\n+            For example: If set to ``True``, prefer ``<!DOCTYPE HTML><html>``\n+            over ``<!--comment--><!DOCTYPE HTML><html>``.\n+        :param enforce_tag_pair:\n+            Enforce the tags to be paired.\n+        :param enforce_self_close_empty_tag:\n+            Enforce the empty tag to be closed by self.\n+            For example: If set to ``True``, prefer ``<br />`` over ``<br>``.\n+        :param allow_escaped_special_characters:", "created_at": "2017-08-11T19:41:13Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTQ0MQ==", "fields": {"body": "why not call the setting require_... if you already meantion it inside the description?", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:\n+            Enforce the ``<!DOCTYPE>`` declaration at the beginning.\n+            For example: If set to ``True``, prefer ``<!DOCTYPE HTML><html>``\n+            over ``<!--comment--><!DOCTYPE HTML><html>``.\n+        :param enforce_tag_pair:\n+            Enforce the tags to be paired.\n+        :param enforce_self_close_empty_tag:\n+            Enforce the empty tag to be closed by self.\n+            For example: If set to ``True``, prefer ``<br />`` over ``<br>``.\n+        :param allow_escaped_special_characters:\n+            Require the special characters to be escaped.\n+            For example: If set to ``True``, prefer\n+            ``<span>aaa&gt;bbb&lt;ccc</span>`` over\n+            ``<span>aaa>bbb<ccc</span>``.\n+        :param enforce_unique_attribute_id:\n+            Require the ID attributes to be unique in the document.", "created_at": "2017-08-11T19:41:47Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTQ3MA==", "fields": {"body": "again you can use require", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:", "created_at": "2017-08-11T19:42:01Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTQ5OQ==", "fields": {"body": "--> prohibit...", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:\n+            Enforce the ``<!DOCTYPE>`` declaration at the beginning.\n+            For example: If set to ``True``, prefer ``<!DOCTYPE HTML><html>``\n+            over ``<!--comment--><!DOCTYPE HTML><html>``.\n+        :param enforce_tag_pair:\n+            Enforce the tags to be paired.\n+        :param enforce_self_close_empty_tag:\n+            Enforce the empty tag to be closed by self.\n+            For example: If set to ``True``, prefer ``<br />`` over ``<br>``.\n+        :param allow_escaped_special_characters:\n+            Require the special characters to be escaped.\n+            For example: If set to ``True``, prefer\n+            ``<span>aaa&gt;bbb&lt;ccc</span>`` over\n+            ``<span>aaa>bbb<ccc</span>``.\n+        :param enforce_unique_attribute_id:\n+            Require the ID attributes to be unique in the document.\n+            For example: If set to ``True``, prefer\n+            ``<div id=\"id1\"></div><div id=\"id2\"></div>`` over\n+            ``<div id=\"id1\"></div><div id=\"id1\"></div>``.\n+        :param require_title_tag:\n+            Require the ``<title>`` to be present in the ``<head>`` tag.\n+        :param disallow_script_in_head:", "created_at": "2017-08-11T19:42:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTg0Mg==", "fields": {"body": "missing space before (", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:\n+            Enforce the ``<!DOCTYPE>`` declaration at the beginning.\n+            For example: If set to ``True``, prefer ``<!DOCTYPE HTML><html>``\n+            over ``<!--comment--><!DOCTYPE HTML><html>``.\n+        :param enforce_tag_pair:\n+            Enforce the tags to be paired.\n+        :param enforce_self_close_empty_tag:\n+            Enforce the empty tag to be closed by self.\n+            For example: If set to ``True``, prefer ``<br />`` over ``<br>``.\n+        :param allow_escaped_special_characters:\n+            Require the special characters to be escaped.\n+            For example: If set to ``True``, prefer\n+            ``<span>aaa&gt;bbb&lt;ccc</span>`` over\n+            ``<span>aaa>bbb<ccc</span>``.\n+        :param enforce_unique_attribute_id:\n+            Require the ID attributes to be unique in the document.\n+            For example: If set to ``True``, prefer\n+            ``<div id=\"id1\"></div><div id=\"id2\"></div>`` over\n+            ``<div id=\"id1\"></div><div id=\"id1\"></div>``.\n+        :param require_title_tag:\n+            Require the ``<title>`` to be present in the ``<head>`` tag.\n+        :param disallow_script_in_head:\n+            Prohibit the use of the ``<script>`` tag in the ``<head>`` tag.\n+        :param require_alt_attribute:\n+            Require alt attribute when using images(``img`` tag) and links", "created_at": "2017-08-11T19:44:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTkxMQ==", "fields": {"body": "you should enclose alt in double quotes", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:\n+            Enforce the ``<!DOCTYPE>`` declaration at the beginning.\n+            For example: If set to ``True``, prefer ``<!DOCTYPE HTML><html>``\n+            over ``<!--comment--><!DOCTYPE HTML><html>``.\n+        :param enforce_tag_pair:\n+            Enforce the tags to be paired.\n+        :param enforce_self_close_empty_tag:\n+            Enforce the empty tag to be closed by self.\n+            For example: If set to ``True``, prefer ``<br />`` over ``<br>``.\n+        :param allow_escaped_special_characters:\n+            Require the special characters to be escaped.\n+            For example: If set to ``True``, prefer\n+            ``<span>aaa&gt;bbb&lt;ccc</span>`` over\n+            ``<span>aaa>bbb<ccc</span>``.\n+        :param enforce_unique_attribute_id:\n+            Require the ID attributes to be unique in the document.\n+            For example: If set to ``True``, prefer\n+            ``<div id=\"id1\"></div><div id=\"id2\"></div>`` over\n+            ``<div id=\"id1\"></div><div id=\"id1\"></div>``.\n+        :param require_title_tag:\n+            Require the ``<title>`` to be present in the ``<head>`` tag.\n+        :param disallow_script_in_head:\n+            Prohibit the use of the ``<script>`` tag in the ``<head>`` tag.\n+        :param require_alt_attribute:\n+            Require alt attribute when using images(``img`` tag) and links", "created_at": "2017-08-11T19:44:42Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MDEwMg==", "fields": {"body": "Don't mention false, not using the setting should disable it.", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:\n+            Enforce the ``<!DOCTYPE>`` declaration at the beginning.\n+            For example: If set to ``True``, prefer ``<!DOCTYPE HTML><html>``\n+            over ``<!--comment--><!DOCTYPE HTML><html>``.\n+        :param enforce_tag_pair:\n+            Enforce the tags to be paired.\n+        :param enforce_self_close_empty_tag:\n+            Enforce the empty tag to be closed by self.\n+            For example: If set to ``True``, prefer ``<br />`` over ``<br>``.\n+        :param allow_escaped_special_characters:\n+            Require the special characters to be escaped.\n+            For example: If set to ``True``, prefer\n+            ``<span>aaa&gt;bbb&lt;ccc</span>`` over\n+            ``<span>aaa>bbb<ccc</span>``.\n+        :param enforce_unique_attribute_id:\n+            Require the ID attributes to be unique in the document.\n+            For example: If set to ``True``, prefer\n+            ``<div id=\"id1\"></div><div id=\"id2\"></div>`` over\n+            ``<div id=\"id1\"></div><div id=\"id1\"></div>``.\n+        :param require_title_tag:\n+            Require the ``<title>`` to be present in the ``<head>`` tag.\n+        :param disallow_script_in_head:\n+            Prohibit the use of the ``<script>`` tag in the ``<head>`` tag.\n+        :param require_alt_attribute:\n+            Require alt attribute when using images(``img`` tag) and links\n+            (``href`` tag).\n+            For example: If set to ``True``, prefer this::\n+\n+                <img src=\"test.png\" alt=\"test\">\n+                <input type=\"image\" alt=\"test\">\n+\n+            over this::\n+\n+                <img src=\"test.png\">\n+                <input type=\"image\">\n+\n+        :param enforce_id_class_naming_convention:\n+            Possible values are ``underline``, ``dash``, ``hump`` and ``false``\n+            to disable the rule.", "created_at": "2017-08-11T19:45:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MjE1Mw==", "fields": {"body": "--> prohibit", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:\n+            Enforce the ``<!DOCTYPE>`` declaration at the beginning.\n+            For example: If set to ``True``, prefer ``<!DOCTYPE HTML><html>``\n+            over ``<!--comment--><!DOCTYPE HTML><html>``.\n+        :param enforce_tag_pair:\n+            Enforce the tags to be paired.\n+        :param enforce_self_close_empty_tag:\n+            Enforce the empty tag to be closed by self.\n+            For example: If set to ``True``, prefer ``<br />`` over ``<br>``.\n+        :param allow_escaped_special_characters:\n+            Require the special characters to be escaped.\n+            For example: If set to ``True``, prefer\n+            ``<span>aaa&gt;bbb&lt;ccc</span>`` over\n+            ``<span>aaa>bbb<ccc</span>``.\n+        :param enforce_unique_attribute_id:\n+            Require the ID attributes to be unique in the document.\n+            For example: If set to ``True``, prefer\n+            ``<div id=\"id1\"></div><div id=\"id2\"></div>`` over\n+            ``<div id=\"id1\"></div><div id=\"id1\"></div>``.\n+        :param require_title_tag:\n+            Require the ``<title>`` to be present in the ``<head>`` tag.\n+        :param disallow_script_in_head:\n+            Prohibit the use of the ``<script>`` tag in the ``<head>`` tag.\n+        :param require_alt_attribute:\n+            Require alt attribute when using images(``img`` tag) and links\n+            (``href`` tag).\n+            For example: If set to ``True``, prefer this::\n+\n+                <img src=\"test.png\" alt=\"test\">\n+                <input type=\"image\" alt=\"test\">\n+\n+            over this::\n+\n+                <img src=\"test.png\">\n+                <input type=\"image\">\n+\n+        :param enforce_id_class_naming_convention:\n+            Possible values are ``underline``, ``dash``, ``hump`` and ``false``\n+            to disable the rule.\n+            Require the ``id`` and ``class`` values to be set according to\n+            the given rules.\n+            For example: If set to ``underline``, prefer\n+            ``<div id=\"aaa_bbb\">``.\n+            For example: If set to ``dash``, prefer ``<div id=\"aaa-bbb\">``.\n+        :param disallow_inline_style:", "created_at": "2017-08-11T19:58:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MjIxMQ==", "fields": {"body": "--> require", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:\n+            Enforce the ``<!DOCTYPE>`` declaration at the beginning.\n+            For example: If set to ``True``, prefer ``<!DOCTYPE HTML><html>``\n+            over ``<!--comment--><!DOCTYPE HTML><html>``.\n+        :param enforce_tag_pair:\n+            Enforce the tags to be paired.\n+        :param enforce_self_close_empty_tag:\n+            Enforce the empty tag to be closed by self.\n+            For example: If set to ``True``, prefer ``<br />`` over ``<br>``.\n+        :param allow_escaped_special_characters:\n+            Require the special characters to be escaped.\n+            For example: If set to ``True``, prefer\n+            ``<span>aaa&gt;bbb&lt;ccc</span>`` over\n+            ``<span>aaa>bbb<ccc</span>``.\n+        :param enforce_unique_attribute_id:\n+            Require the ID attributes to be unique in the document.\n+            For example: If set to ``True``, prefer\n+            ``<div id=\"id1\"></div><div id=\"id2\"></div>`` over\n+            ``<div id=\"id1\"></div><div id=\"id1\"></div>``.\n+        :param require_title_tag:\n+            Require the ``<title>`` to be present in the ``<head>`` tag.\n+        :param disallow_script_in_head:\n+            Prohibit the use of the ``<script>`` tag in the ``<head>`` tag.\n+        :param require_alt_attribute:\n+            Require alt attribute when using images(``img`` tag) and links\n+            (``href`` tag).\n+            For example: If set to ``True``, prefer this::\n+\n+                <img src=\"test.png\" alt=\"test\">\n+                <input type=\"image\" alt=\"test\">\n+\n+            over this::\n+\n+                <img src=\"test.png\">\n+                <input type=\"image\">\n+\n+        :param enforce_id_class_naming_convention:\n+            Possible values are ``underline``, ``dash``, ``hump`` and ``false``\n+            to disable the rule.\n+            Require the ``id`` and ``class`` values to be set according to\n+            the given rules.\n+            For example: If set to ``underline``, prefer\n+            ``<div id=\"aaa_bbb\">``.\n+            For example: If set to ``dash``, prefer ``<div id=\"aaa-bbb\">``.\n+        :param disallow_inline_style:\n+            Disallow the use of inline ``style`` attribute.\n+            For example: If set to ``True``, ``<div style=\"color:red\"></div>``\n+            will raise a warning.\n+        :param enforce_relative_links_in_href:\n+            If ``True``, enforce relative links in the ``href`` attribute and\n+            if ``False``, enforce absolute links.", "created_at": "2017-08-11T19:58:31Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MjM2OQ==", "fields": {"body": "--> prohibit", "diff": "@@ -0,0 +1,180 @@\n+import json\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+\n+from dependency_management.requirements.NpmRequirement import NpmRequirement\n+\n+\n+@linter(executable='htmlhint',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>.+):(?P<line>\\d+):(?P<column>\\d+):\\s*'\n+                     r'(?P<message>.+). \\[(?P<severity>error|warning)')\n+class HTMLHintBear:\n+    \"\"\"\n+    Checks HTML code with ``htmlhint`` for possible problems. Attempts to catch\n+    little mistakes and enforces a code style guide on HTML files.\n+    \"\"\"\n+    LANGUAGES = {'HTML'}\n+    REQUIREMENTS = {NpmRequirement('htmlhint', '0.9.13')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    CAN_DETECT = {'Syntax', 'Formatting', 'Duplication', 'Code Simplification'}\n+    SEE_MORE = 'https://github.com/yaniswang/HTMLHint'\n+\n+    @staticmethod\n+    def generate_config(filename, file,\n+                        enforce_lowercase_tagname: bool=True,\n+                        enforce_lowercase_attribute: bool=True,\n+                        allow_attribute_value_in_double_quotes: bool=False,\n+                        prohibit_empty_attribute: bool=False,\n+                        prohibit_attribute_duplication: bool=True,\n+                        use_doctype_at_beginning: bool=True,\n+                        enforce_tag_pair: bool=True,\n+                        enforce_self_close_empty_tag: bool=True,\n+                        allow_escaped_special_characters: bool=False,\n+                        enforce_unique_attribute_id: bool=True,\n+                        require_title_tag: bool=True,\n+                        disallow_script_in_head: bool=False,\n+                        require_alt_attribute: bool=True,\n+                        enforce_id_class_naming_convention: str='false',\n+                        disallow_inline_style: bool=True,\n+                        enforce_relative_links_in_href: bool=None,\n+                        prohibit_unsafe_characters: bool=True,\n+                        disallow_inline_script: bool = False,\n+                        prohibit_style_tag: bool=False,\n+                        htmlhint_config: str=''):\n+        \"\"\"\n+        :param enforce_lowercase_tagname:\n+            Enforce the tagnames to be written in lowercase.\n+            For example: If set to ``True``, prefer ``<span><div>`` over\n+            ``<SPAN><BR>``.\n+        :param enforce_lowercase_attribute:\n+            Enforce the attribute names to be written in lowercase.\n+            For example: If set to ``True``, prefer\n+            ``<img src=\"test.png\" alt=\"test\">`` over\n+            ``<img SRC=\"test.png\" ALT=\"test\">``.\n+        :param allow_attribute_value_in_double_quotes:\n+            Allow attribute values to be enclosed in double quotes.\n+            For example: If set to ``True``, prefer ``<a href=\"\" title=\"abc\">``\n+            over ``<a href='' title=abc>``.\n+        :param prohibit_empty_attribute:\n+            Disallow empty values for attributes.\n+            For example: If set to ``True``, prefer\n+            ``<input type=\"button\" disabled=\"disabled\">`` over\n+            ``<input type=\"button\" disabled>``.\n+        :param prohibit_attribute_duplication:\n+            Disallow the defining of the same attribute more than once in\n+            a tag. For example: If set to ``True``, prefer\n+            ``<img src=\"a.png\" />`` over ``<img src=\"a.png\" src=\"b.png\" />``.\n+        :param use_doctype_at_beginning:\n+            Enforce the ``<!DOCTYPE>`` declaration at the beginning.\n+            For example: If set to ``True``, prefer ``<!DOCTYPE HTML><html>``\n+            over ``<!--comment--><!DOCTYPE HTML><html>``.\n+        :param enforce_tag_pair:\n+            Enforce the tags to be paired.\n+        :param enforce_self_close_empty_tag:\n+            Enforce the empty tag to be closed by self.\n+            For example: If set to ``True``, prefer ``<br />`` over ``<br>``.\n+        :param allow_escaped_special_characters:\n+            Require the special characters to be escaped.\n+            For example: If set to ``True``, prefer\n+            ``<span>aaa&gt;bbb&lt;ccc</span>`` over\n+            ``<span>aaa>bbb<ccc</span>``.\n+        :param enforce_unique_attribute_id:\n+            Require the ID attributes to be unique in the document.\n+            For example: If set to ``True``, prefer\n+            ``<div id=\"id1\"></div><div id=\"id2\"></div>`` over\n+            ``<div id=\"id1\"></div><div id=\"id1\"></div>``.\n+        :param require_title_tag:\n+            Require the ``<title>`` to be present in the ``<head>`` tag.\n+        :param disallow_script_in_head:\n+            Prohibit the use of the ``<script>`` tag in the ``<head>`` tag.\n+        :param require_alt_attribute:\n+            Require alt attribute when using images(``img`` tag) and links\n+            (``href`` tag).\n+            For example: If set to ``True``, prefer this::\n+\n+                <img src=\"test.png\" alt=\"test\">\n+                <input type=\"image\" alt=\"test\">\n+\n+            over this::\n+\n+                <img src=\"test.png\">\n+                <input type=\"image\">\n+\n+        :param enforce_id_class_naming_convention:\n+            Possible values are ``underline``, ``dash``, ``hump`` and ``false``\n+            to disable the rule.\n+            Require the ``id`` and ``class`` values to be set according to\n+            the given rules.\n+            For example: If set to ``underline``, prefer\n+            ``<div id=\"aaa_bbb\">``.\n+            For example: If set to ``dash``, prefer ``<div id=\"aaa-bbb\">``.\n+        :param disallow_inline_style:\n+            Disallow the use of inline ``style`` attribute.\n+            For example: If set to ``True``, ``<div style=\"color:red\"></div>``\n+            will raise a warning.\n+        :param enforce_relative_links_in_href:\n+            If ``True``, enforce relative links in the ``href`` attribute and\n+            if ``False``, enforce absolute links.\n+        :param prohibit_unsafe_characters:\n+            Prohibit the use of unsafe characters in attribute values.\n+            For example: If set to ``True``,\n+            ``<li><a href=\"https://vimeo.com//56931059\u200e\\u0009\u200e\">2012</a></li>``\n+            will raise a warning.\n+        :param disallow_inline_script:", "created_at": "2017-08-11T19:59:24Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzA1Mw==", "fields": {"body": "why pragma: no cover? Imo you should test this :O", "diff": "@@ -24,6 +26,29 @@ class TravisLintBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n+    CHECK_CONNECTION_URL = 'https://travis-ci.org/'\n+\n+    @classmethod\n+    def check_prerequisites(cls):  # pragma: no cover", "created_at": "2017-08-11T20:03:29Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzE0OA==", "fields": {"body": "would insert a newline here for readability ;)", "diff": "@@ -24,6 +26,29 @@ class TravisLintBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n+    CHECK_CONNECTION_URL = 'https://travis-ci.org/'\n+\n+    @classmethod\n+    def check_prerequisites(cls):  # pragma: no cover\n+        url_status = cls.get_status_of_url(cls.CHECK_CONNECTION_URL)\n+        base_check = super().check_prerequisites()\n+        if base_check is not True:\n+            return base_check", "created_at": "2017-08-11T20:04:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzIxNQ==", "fields": {"body": "do this after the base check! if the base check now fails, you've made an unnecessary query!", "diff": "@@ -24,6 +26,29 @@ class TravisLintBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n+    CHECK_CONNECTION_URL = 'https://travis-ci.org/'\n+\n+    @classmethod\n+    def check_prerequisites(cls):  # pragma: no cover\n+        url_status = cls.get_status_of_url(cls.CHECK_CONNECTION_URL)", "created_at": "2017-08-11T20:04:26Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzM5OQ==", "fields": {"body": "maybe just get_url_status?", "diff": "@@ -24,6 +26,29 @@ class TravisLintBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n+    CHECK_CONNECTION_URL = 'https://travis-ci.org/'\n+\n+    @classmethod\n+    def check_prerequisites(cls):  # pragma: no cover\n+        url_status = cls.get_status_of_url(cls.CHECK_CONNECTION_URL)\n+        base_check = super().check_prerequisites()\n+        if base_check is not True:\n+            return base_check\n+        try:\n+            if url_status is None:\n+                return 'You are not connected to the internet.'\n+            else:\n+                url_status.raise_for_status()\n+                return True\n+        except requests.exceptions.HTTPError:\n+            return 'Failed to establish a connection to the server.'\n+\n+    @staticmethod\n+    def get_status_of_url(url):", "created_at": "2017-08-11T20:05:30Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzMxNQ==", "fields": {"body": "what's raise_for_status?", "diff": "@@ -24,6 +26,29 @@ class TravisLintBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting', 'Syntax'}\n     SEE_MORE = 'https://docs.travis-ci.com/user/travis-lint'\n+    CHECK_CONNECTION_URL = 'https://travis-ci.org/'\n+\n+    @classmethod\n+    def check_prerequisites(cls):  # pragma: no cover\n+        url_status = cls.get_status_of_url(cls.CHECK_CONNECTION_URL)\n+        base_check = super().check_prerequisites()\n+        if base_check is not True:\n+            return base_check\n+        try:\n+            if url_status is None:\n+                return 'You are not connected to the internet.'\n+            else:\n+                url_status.raise_for_status()", "created_at": "2017-08-11T20:04:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgyNDU4OA==", "fields": {"body": "Isn't it better to do it this way\nfiltered_bears = FilterHelper.get_filtered_bears(\n           'language', [language], None)[0]['cli']", "diff": "@@ -0,0 +1,72 @@\n+import os\n+from pygments.lexers import guess_lexer_for_filename\n+from coalib.results.result_actions.ResultAction import ResultAction\n+from coalib.results.result_actions.ShowPatchAction import ShowPatchAction\n+from coalib.collecting.Collectors import (\n+    collect_bears, collect_bears_by_aspects)\n+from coalib.output.printers.LogPrinter import LogPrinter\n+from coalib.parsing.FilterHelper import FilterHelper\n+from coalib.parsing.DefaultArgParser import default_arg_parser\n+from pyprint.ConsolePrinter import ConsolePrinter\n+from coalib.coala_modes import (\n+    mode_format, mode_json, mode_non_interactive, mode_normal)\n+\n+POSSIBLE_BEARS = {'SpaceConsistencyBear': 'Whitespaces', 'PEP8Bear': 'PEP'}\n+\n+\n+def show_possibilities(console_printer, i, action):\n+    console_printer.print('[{:>5}]  {}. Apply patch (\\'{}\\')'.format('', i,\n+                                                                     action))\n+\n+\n+class GeneratePatchesAction(ResultAction):\n+    SUCCESS_MESSAGE = 'Patch applied successfully.'\n+\n+    is_applicable = staticmethod(ShowPatchAction.is_applicable)\n+\n+    def apply(self,\n+              result,\n+              original_file_dict,\n+              file_diff_dict):\n+        \"\"\"\n+        (G)enerate patches\n+        \"\"\"\n+        console_printer = ConsolePrinter()\n+        bears_class = []\n+        possible_options = {}\n+        args = default_arg_parser().parse_args()\n+        args.files = []\n+        log_printer = LogPrinter()\n+        to_filename = None\n+\n+        for filename, this_diff in sorted(result.diffs.items()):\n+            to_filename = this_diff.rename if this_diff.rename else filename\n+            to_filename = '/dev/null' if this_diff.delete else to_filename\n+            original_file_dict[filename]\n+        language = guess_lexer_for_filename(to_filename, 'Hello').name\n+        path = to_filename\n+        path = path.rstrip(os.sep)\n+        os.path.basename(path)\n+\n+        args.no_config = True\n+        filtered_bears = FilterHelper.get_filtered_bears(\n+            'language', [language], None)\n+        filtered_bears = filtered_bears[0]", "created_at": "2017-08-12T19:00:13Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY2OA==", "fields": {"body": "just helloworld? If we support \"Hello World\", better to mention that", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.", "created_at": "2017-08-13T10:43:37Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY5Mw==", "fields": {"body": "You may want to mention the user part explicitly", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.\n+2. Want to work on an issue, first assign yourself:\n+   ``corobo assign <issue-link>``\n+3. Assigned issue is time-consuming, no longer interesting? Wanna discontinue:\n+   ``corobo unassign <issue-link>``\n+4. Wanna file a new issue, but don't want to leave gitter?:\n+   ``corobo new issue <repo> <title>\\n[description\\n]+``\n+5. PR is up, waiting for a review. Consider reviewing other PRs while you wait\n+   for review of your PR. If the PR needs more work, mark it\n+   work-in-progress(wip):\n+   ``corobo mark wip <pr-link>``\n+6. Your PR was marked WIP, you did the changes and want it be reviewed again?\n+   Add ``pending_review`` label:\n+   ``corobo mark pending <pr-link>``\n+\n+coala utilities\n+---------------\n+\n+1. Wanna know stats regarding coala?:\n+\n+   a. Get user contribution stats using:\n+      ``corobo contrib stats meetmangukiya``", "created_at": "2017-08-13T10:44:41Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcwOA==", "fields": {"body": "This whole paragraph could be confusing for newcomers. Just mention about marking a PR as wip", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.\n+2. Want to work on an issue, first assign yourself:\n+   ``corobo assign <issue-link>``\n+3. Assigned issue is time-consuming, no longer interesting? Wanna discontinue:\n+   ``corobo unassign <issue-link>``\n+4. Wanna file a new issue, but don't want to leave gitter?:\n+   ``corobo new issue <repo> <title>\\n[description\\n]+``\n+5. PR is up, waiting for a review. Consider reviewing other PRs while you wait\n+   for review of your PR. If the PR needs more work, mark it\n+   work-in-progress(wip):", "created_at": "2017-08-13T10:45:47Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcyOQ==", "fields": {"body": "knowledge engine?", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.\n+2. Want to work on an issue, first assign yourself:\n+   ``corobo assign <issue-link>``\n+3. Assigned issue is time-consuming, no longer interesting? Wanna discontinue:\n+   ``corobo unassign <issue-link>``\n+4. Wanna file a new issue, but don't want to leave gitter?:\n+   ``corobo new issue <repo> <title>\\n[description\\n]+``\n+5. PR is up, waiting for a review. Consider reviewing other PRs while you wait\n+   for review of your PR. If the PR needs more work, mark it\n+   work-in-progress(wip):\n+   ``corobo mark wip <pr-link>``\n+6. Your PR was marked WIP, you did the changes and want it be reviewed again?\n+   Add ``pending_review`` label:\n+   ``corobo mark pending <pr-link>``\n+\n+coala utilities\n+---------------\n+\n+1. Wanna know stats regarding coala?:\n+\n+   a. Get user contribution stats using:\n+      ``corobo contrib stats meetmangukiya``\n+   b. Bear stats(all languages):\n+      ``corobo bear stats``\n+   c. Bear stats(particular languages):\n+      ``corobo bear stats python ruby go``\n+   d. Language stats:\n+      ``corobo lang stats``\n+   e. stats(both bear and lang stats(for summary stats)):\n+      ``corobo stats``\n+2. List bears of particular languages:\n+   ``corobo ls bears python python3 ...``\n+3. Run coala from chat itself!\n+   .. codeblock::\n+      corobo run Bear1 setting1=1 setting2=2 Bear2\n+      ```\n+      import this\n+      this = 3\n+      some = 'code'\n+      ```\n+\n+Answer\n+------\n+\n+You have got a question, no one's available to answer. Let bot try to answer it\n+for you:\n+``corobo answer your question string goes here``\n+\n+Misc.\n+-----\n+\n+1. Someone is asking a googlable question? Respond with a lmgtfy:\n+   ``corobo lmgtfy this is the search string``\n+2. Get bot to apologize:\n+   ``corobo nm``\n+3. Explain pre-defined terms:\n+   ``corobo explain rebase``\n+4. Is your PR ready to merge, go shipit!\n+   ``corobo ship it``\n+5. Ask a question to knowledge engine:", "created_at": "2017-08-13T10:46:48Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjk0ODUyNA==", "fields": {"body": "use @patch on the test method. You can patch the which you imported from shutil, so the patch-module-string gets bears.elm.ElmLintBear.which. Then you don't need to change the import inside ElmLintBear, you just have to remove the pragma.", "diff": "@@ -143,3 +144,18 @@ def test_good_function(self):\n                 [],\n                 filename=fname,\n                 create_tempfile=False)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None", "created_at": "2017-08-14T13:22:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ1MjAyOA==", "fields": {"body": "Can we use 0.25? It should make integration even easier.", "diff": "@@ -34,6 +34,6 @@ rstcheck~=3.1\n safety~=0.5.1\n scspell3k~=2.0\n vim-vint~=0.3.12\n-vulture~=0.14.0\n+vulture==0.24.0", "created_at": "2017-08-16T13:40:43Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ1MzY1Mw==", "fields": {"body": "typo", "diff": "@@ -42,85 +42,116 @@ def prep_file():\n \n             return list(self.uut.run())\n \n+    def verify_results(self, test_case, expected):\n+        detected = dict((item.message, (item.affected_code[0].start.line,\n+                                        item.affected_code[0].end.line,\n+                                        item.confidence))\n+                        for item in self.get_results(test_case))\n+        self.assertEqual(detected, expected)\n+\n     def test_used_variable(self):\n-        good_file = \"\"\"\n-        x = 2\n-        print(x)\n+        good_file = \"\"\"\\\n+x = 2\n+print(x)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(good_file)), 0)\n+        self.verify_results(good_file, {})\n \n     def test_unused_variable(self):\n-        bad_file = \"\"\"\n-        b = 10\n-        a = 12\n-        print(a)\n+        bad_file = \"\"\"\\\n+b = 10\n+a = 12\n+print(a)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n-\n-    def test_unused_parameter(self):\n-        bad_file = \"\"\"\n-        def test(a):\n-            return 1\n+        self.verify_results(bad_file, {\"unused variable 'b'\": (1, 1, 60)})\n \n-        test(1)\n-        \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n+    def test_unused_arg(self):\n+        bad_file = \"\"\"\\\n+def test(a):\n+    return 1\n \n-    def test_unused_function(self):\n-        bad_file = \"\"\"\n-        def test(a):\n-            return a\n+test(1)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n+        self.verify_results(bad_file, {\"unused variable 'a'\": (1, 1, 100)})\n \n-    def test_import_confidence(self):\n-        bad_file = \"\"\"\n-        from os import *\n-        import subprocess\n+    def test_import(self):\n+        bad_file = \"\"\"\\\n+from os import *\n+import subprocess\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 1)\n-        self.assertEqual(result[0].confidence, 95)\n+        self.verify_results(bad_file, {\n+            \"unused import 'subprocess'\": (2, 2, 90)\n+        })\n \n-    def test_class_confidence(self):\n-        bad_file = \"\"\"\n-        class Name:\n+    def test_class(self):\n+        bad_file = \"\"\"\\\n+class Name:\n \n-            def __init__(self, name):\n-                self.name = name\n-                self.sur_name = 'Something'\n-\n-        \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 2)\n-        self.assertEqual(result[0].confidence, 70)\n-\n-    def test_func_confidence(self):\n-        bad_file = \"\"\"\n-        def hello(name):\n-            print('Hello World')\n+    def __init__(self, name):\n+        self.name = name\n+        self.sur_name = 'Something'\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 2)\n-        self.assertEqual(result[0].confidence, 70)\n-\n-    def test_prop_confidence(self):\n-        bad_file = \"\"\"\n-        class Bar(object):\n-            @property\n-            def prop(self):\n-                pass\n-\n-        c = Bar()\n+        self.verify_results(bad_file, {\n+            \"unused class 'Name'\": (1, 5, 60),\n+            \"unused attribute 'name'\": (4, 4, 60),\n+            \"unused attribute 'sur_name'\": (5, 5, 60)\n+        })\n+\n+    def test_function(self):\n+        bad_file = \"\"\"\\\n+def hello(name):\n+    print('Hello World')\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 2)\n-        self.assertEqual(result[0].confidence, 70)\n-\n-    def test_var_confidence(self):\n-        bad_file = \"\"\"\n-        name = 'Foo Bar'\n+        self.verify_results(bad_file, {\n+            \"unused variable 'name'\": (1, 1, 100),\n+            \"unused function 'hello'\": (1, 2, 60)\n+        })\n+\n+    def test_property(self):\n+        bad_file = \"\"\"\\\n+class Bar(object):\n+    @property\n+    def prop(self):\n+        pass\n+\n+Bar()\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 1)\n-        self.assertEqual(result[0].confidence, 70)\n+        self.verify_results(bad_file, {\n+            \"unused property 'prop'\": (2, 4, 60)\n+        })\n+\n+    def test_unsatisfiable_while(self):\n+        bad_file = \"\"\"\\\n+while True:\n+    print(\"I am reachable.\")\n+    break\n+\n+while 0:\n+    print(\"I am unreachable.\")\n+    print(\"I can be detected.\")\n+\"\"\"\n+        self.verify_results(bad_file, {\n+            \"unsatisfiable 'while' condition\": (5, 7, 100)\n+        })\n+\n+    def test_unsatisfiable_if(self):\n+        bad_file = \"\"\"\\\n+with pre() as _, file:\n+    if False:\n+        print(\"Unreachable\")\n+\"\"\"\n+        self.verify_results(bad_file, {\n+            \"unsatisfiable 'if' condition\": (2, 3, 100)\n+        })\n+\n+    def test_unreachable_else(self):\n+        bad_file = \"\"\"\\\n+if True:\n+    print(\"Reachanle\")", "created_at": "2017-08-16T13:46:25Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ1Mzk3MQ==", "fields": {"body": "instead of good_file and bad_file, can we just use code?", "diff": "@@ -42,85 +42,116 @@ def prep_file():\n \n             return list(self.uut.run())\n \n+    def verify_results(self, test_case, expected):\n+        detected = dict((item.message, (item.affected_code[0].start.line,\n+                                        item.affected_code[0].end.line,\n+                                        item.confidence))\n+                        for item in self.get_results(test_case))\n+        self.assertEqual(detected, expected)\n+\n     def test_used_variable(self):\n-        good_file = \"\"\"\n-        x = 2\n-        print(x)\n+        good_file = \"\"\"\\", "created_at": "2017-08-16T13:47:18Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY3ODIzNA==", "fields": {"body": "sur_name -> surname", "diff": "@@ -42,85 +42,116 @@ def prep_file():\n \n             return list(self.uut.run())\n \n+    def verify_results(self, test_case, expected):\n+        detected = dict((item.message, (item.affected_code[0].start.line,\n+                                        item.affected_code[0].end.line,\n+                                        item.confidence))\n+                        for item in self.get_results(test_case))\n+        self.assertEqual(detected, expected)\n+\n     def test_used_variable(self):\n-        good_file = \"\"\"\n-        x = 2\n-        print(x)\n+        code = \"\"\"\\\n+x = 2\n+print(x)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(good_file)), 0)\n+        self.verify_results(code, {})\n \n     def test_unused_variable(self):\n-        bad_file = \"\"\"\n-        b = 10\n-        a = 12\n-        print(a)\n+        code = \"\"\"\\\n+b = 10\n+a = 12\n+print(a)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n-\n-    def test_unused_parameter(self):\n-        bad_file = \"\"\"\n-        def test(a):\n-            return 1\n+        self.verify_results(code, {\"unused variable 'b'\": (1, 1, 60)})\n \n-        test(1)\n-        \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n+    def test_unused_arg(self):\n+        code = \"\"\"\\\n+def test(a):\n+    return 1\n \n-    def test_unused_function(self):\n-        bad_file = \"\"\"\n-        def test(a):\n-            return a\n+test(1)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n+        self.verify_results(code, {\"unused variable 'a'\": (1, 1, 100)})\n \n-    def test_import_confidence(self):\n-        bad_file = \"\"\"\n-        from os import *\n-        import subprocess\n+    def test_import(self):\n+        code = \"\"\"\\\n+from os import *\n+import subprocess\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 1)\n-        self.assertEqual(result[0].confidence, 95)\n+        self.verify_results(code, {\n+            \"unused import 'subprocess'\": (2, 2, 90)\n+        })\n \n-    def test_class_confidence(self):\n-        bad_file = \"\"\"\n-        class Name:\n+    def test_class(self):\n+        code = \"\"\"\\\n+class Name:\n \n-            def __init__(self, name):\n-                self.name = name\n-                self.sur_name = 'Something'\n-\n-        \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 2)\n-        self.assertEqual(result[0].confidence, 70)\n-\n-    def test_func_confidence(self):\n-        bad_file = \"\"\"\n-        def hello(name):\n-            print('Hello World')\n+    def __init__(self, name):\n+        self.name = name\n+        self.sur_name = 'Something'", "created_at": "2017-08-17T10:37:11Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY3ODMwMg==", "fields": {"body": "typo", "diff": "@@ -42,85 +42,116 @@ def prep_file():\n \n             return list(self.uut.run())\n \n+    def verify_results(self, test_case, expected):\n+        detected = dict((item.message, (item.affected_code[0].start.line,\n+                                        item.affected_code[0].end.line,\n+                                        item.confidence))\n+                        for item in self.get_results(test_case))\n+        self.assertEqual(detected, expected)\n+\n     def test_used_variable(self):\n-        good_file = \"\"\"\n-        x = 2\n-        print(x)\n+        code = \"\"\"\\\n+x = 2\n+print(x)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(good_file)), 0)\n+        self.verify_results(code, {})\n \n     def test_unused_variable(self):\n-        bad_file = \"\"\"\n-        b = 10\n-        a = 12\n-        print(a)\n+        code = \"\"\"\\\n+b = 10\n+a = 12\n+print(a)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n-\n-    def test_unused_parameter(self):\n-        bad_file = \"\"\"\n-        def test(a):\n-            return 1\n+        self.verify_results(code, {\"unused variable 'b'\": (1, 1, 60)})\n \n-        test(1)\n-        \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n+    def test_unused_arg(self):\n+        code = \"\"\"\\\n+def test(a):\n+    return 1\n \n-    def test_unused_function(self):\n-        bad_file = \"\"\"\n-        def test(a):\n-            return a\n+test(1)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n+        self.verify_results(code, {\"unused variable 'a'\": (1, 1, 100)})\n \n-    def test_import_confidence(self):\n-        bad_file = \"\"\"\n-        from os import *\n-        import subprocess\n+    def test_import(self):\n+        code = \"\"\"\\\n+from os import *\n+import subprocess\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 1)\n-        self.assertEqual(result[0].confidence, 95)\n+        self.verify_results(code, {\n+            \"unused import 'subprocess'\": (2, 2, 90)\n+        })\n \n-    def test_class_confidence(self):\n-        bad_file = \"\"\"\n-        class Name:\n+    def test_class(self):\n+        code = \"\"\"\\\n+class Name:\n \n-            def __init__(self, name):\n-                self.name = name\n-                self.sur_name = 'Something'\n-\n-        \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 2)\n-        self.assertEqual(result[0].confidence, 70)\n-\n-    def test_func_confidence(self):\n-        bad_file = \"\"\"\n-        def hello(name):\n-            print('Hello World')\n+    def __init__(self, name):\n+        self.name = name\n+        self.sur_name = 'Something'\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 2)\n-        self.assertEqual(result[0].confidence, 70)\n-\n-    def test_prop_confidence(self):\n-        bad_file = \"\"\"\n-        class Bar(object):\n-            @property\n-            def prop(self):\n-                pass\n-\n-        c = Bar()\n+        self.verify_results(code, {\n+            \"unused class 'Name'\": (1, 5, 60),\n+            \"unused attribute 'name'\": (4, 4, 60),\n+            \"unused attribute 'sur_name'\": (5, 5, 60)\n+        })\n+\n+    def test_function(self):\n+        code = \"\"\"\\\n+def hello(name):\n+    print('Hello World')\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 2)\n-        self.assertEqual(result[0].confidence, 70)\n-\n-    def test_var_confidence(self):\n-        bad_file = \"\"\"\n-        name = 'Foo Bar'\n+        self.verify_results(code, {\n+            \"unused variable 'name'\": (1, 1, 100),\n+            \"unused function 'hello'\": (1, 2, 60)\n+        })\n+\n+    def test_property(self):\n+        code = \"\"\"\\\n+class Bar(object):\n+    @property\n+    def prop(self):\n+        pass\n+\n+Bar()\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 1)\n-        self.assertEqual(result[0].confidence, 70)\n+        self.verify_results(code, {\n+            \"unused property 'prop'\": (2, 4, 60)\n+        })\n+\n+    def test_unsatisfiable_while(self):\n+        code = \"\"\"\\\n+while True:\n+    print(\"I am reachable.\")\n+    break\n+\n+while 0:\n+    print(\"I am unreachable.\")\n+    print(\"I can be detected.\")\n+\"\"\"\n+        self.verify_results(code, {\n+            \"unsatisfiable 'while' condition\": (5, 7, 100)\n+        })\n+\n+    def test_unsatisfiable_if(self):\n+        code = \"\"\"\\\n+with pre() as _, file:\n+    if False:\n+        print(\"Unreachable\")\n+\"\"\"\n+        self.verify_results(code, {\n+            \"unsatisfiable 'if' condition\": (2, 3, 100)\n+        })\n+\n+    def test_unreachable_else(self):\n+        code = \"\"\"\\\n+if True:\n+    print(\"Reachanle\")", "created_at": "2017-08-17T10:37:33Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY3ODk3Mw==", "fields": {"body": "Can you please remove this empty line?", "diff": "@@ -42,85 +42,116 @@ def prep_file():\n \n             return list(self.uut.run())\n \n+    def verify_results(self, test_case, expected):\n+        detected = dict((item.message, (item.affected_code[0].start.line,\n+                                        item.affected_code[0].end.line,\n+                                        item.confidence))\n+                        for item in self.get_results(test_case))\n+        self.assertEqual(detected, expected)\n+\n     def test_used_variable(self):\n-        good_file = \"\"\"\n-        x = 2\n-        print(x)\n+        code = \"\"\"\\\n+x = 2\n+print(x)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(good_file)), 0)\n+        self.verify_results(code, {})\n \n     def test_unused_variable(self):\n-        bad_file = \"\"\"\n-        b = 10\n-        a = 12\n-        print(a)\n+        code = \"\"\"\\\n+b = 10\n+a = 12\n+print(a)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n-\n-    def test_unused_parameter(self):\n-        bad_file = \"\"\"\n-        def test(a):\n-            return 1\n+        self.verify_results(code, {\"unused variable 'b'\": (1, 1, 60)})\n \n-        test(1)\n-        \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n+    def test_unused_arg(self):\n+        code = \"\"\"\\\n+def test(a):\n+    return 1\n \n-    def test_unused_function(self):\n-        bad_file = \"\"\"\n-        def test(a):\n-            return a\n+test(1)\n         \"\"\"\n-        self.assertEqual(len(self.get_results(bad_file)), 1)\n+        self.verify_results(code, {\"unused variable 'a'\": (1, 1, 100)})\n \n-    def test_import_confidence(self):\n-        bad_file = \"\"\"\n-        from os import *\n-        import subprocess\n+    def test_import(self):\n+        code = \"\"\"\\\n+from os import *\n+import subprocess\n         \"\"\"\n-        result = self.get_results(bad_file)\n-        self.assertEqual(len(result), 1)\n-        self.assertEqual(result[0].confidence, 95)\n+        self.verify_results(code, {\n+            \"unused import 'subprocess'\": (2, 2, 90)\n+        })\n \n-    def test_class_confidence(self):\n-        bad_file = \"\"\"\n-        class Name:\n+    def test_class(self):\n+        code = \"\"\"\\\n+class Name:\n ", "created_at": "2017-08-17T10:41:31Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY3OTQ0Nw==", "fields": {"body": "I don't think we should be verbose.", "diff": "@@ -3,42 +3,26 @@\n from dependency_management.requirements.PipRequirement import PipRequirement\n from vulture import Vulture\n \n-CONFIDENCE_MAP = {\n-    'attribute': 70,\n-    'class': 70,\n-    'function': 70,\n-    'import': 95,\n-    'property': 70,\n-    'variable': 70,\n-}\n-\n \n def _find_unused_code(filenames):\n     \"\"\"\n     :param filenames: List of filenames to check.\n     :return: Generator of Result objects.\n     \"\"\"\n-\n-    def file_lineno(item):\n-        return (item.filename.lower(), item.lineno)\n-\n-    vulture = Vulture()\n+    vulture = Vulture(verbose=True)", "created_at": "2017-08-17T10:44:21Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY4NzY5Nw==", "fields": {"body": "The docstring of this function contains that, which is also appended to this", "diff": "@@ -163,7 +165,9 @@ def position(stl, stc, enl, enc):\n                                                               enl, enc)\n \n     # Ignore PycodestyleBear, LineLengthBear\n-    @re_botcmd(pattern=r'^run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```$')\n+    @re_botcmd(pattern=r'^run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```$',\n+               re_cmd_name_help='run <Bear [[setting=value]+]>+\\n'\n+                                '```\\n<code>+\\n```')", "created_at": "2017-08-17T11:32:53Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDA2OTkxNQ==", "fields": {"body": "looks like there are specific things you use now from the newer vulture version (like item.first_lineno or item.confidence). Could you list them in the commit message?", "diff": "@@ -3,42 +3,26 @@\n from dependency_management.requirements.PipRequirement import PipRequirement\n from vulture import Vulture\n \n-CONFIDENCE_MAP = {\n-    'attribute': 70,\n-    'class': 70,\n-    'function': 70,\n-    'import': 95,\n-    'property': 70,\n-    'variable': 70,\n-}\n-\n \n def _find_unused_code(filenames):\n     \"\"\"\n     :param filenames: List of filenames to check.\n     :return: Generator of Result objects.\n     \"\"\"\n-\n-    def file_lineno(item):\n-        return (item.filename.lower(), item.lineno)\n-\n     vulture = Vulture()\n     vulture.scavenge(filenames)\n-    for item in sorted(\n-            vulture.unused_funcs + vulture.unused_imports +\n-            vulture.unused_props + vulture.unused_vars +\n-            vulture.unused_attrs, key=file_lineno):\n-        message = 'Unused {0}: {1}'.format(item.typ, item)\n+    for item in vulture.get_unused_code():\n         yield Result.from_values(origin='VultureBear',\n-                                 message=message,\n+                                 message=item.message,\n                                  file=item.filename,\n-                                 line=item.lineno,\n-                                 confidence=CONFIDENCE_MAP[item.typ])\n+                                 line=item.first_lineno,\n+                                 end_line=item.last_lineno,", "created_at": "2017-08-18T22:53:33Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDA4MzA2MQ==", "fields": {"body": "official -> default, coalang -> coalang file", "diff": "@@ -92,7 +93,36 @@ def process_documentation(self,\n             new_desc = new_desc.rstrip() + '\\n'\n \n             new_metadata.append(m._replace(desc=new_desc.lstrip(' ')))\n-        return (new_metadata, warning_desc)\n+\n+        new_comment = DocumentationComment.from_metadata(\n+            new_metadata, doc_comment.docstyle_definition,\n+            doc_comment.marker, doc_comment.indent, doc_comment.position)\n+\n+        # Instantiate official padding\n+        class_padding = doc_comment.docstyle_definition.class_padding\n+        function_padding = doc_comment.docstyle_definition.function_padding\n+        # Check if official padding exist in the coalang", "created_at": "2017-08-19T04:55:25Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDA5MTI4OA==", "fields": {"body": "These string literals looks ugly....breaks line of flow\nUse this https://docs.python.org/2/library/textwrap.html#textwrap.dedent\nThis is not a compulsory change..It's just a suggestion \ud83d\ude09\nRest LGTM :)", "diff": "@@ -0,0 +1,45 @@\n+from bears.yang.YANGBear import YANGBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+\n+COALA_MODEL = \"\"\"\n+module coala-model {\n+\n+  namespace \"http://coala.io/yang/coala-model\";\n+  prefix coala;", "created_at": "2017-08-19T12:59:47Z", "last_edited_at": null, "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDIyODg0Nw==", "fields": {"body": "I think it would be nice to add an explanation for it on the code/comment", "diff": "@@ -0,0 +1,96 @@\n+import os\n+\n+from pygments.lexers import guess_lexer_for_filename\n+from pyprint.ConsolePrinter import ConsolePrinter\n+from pathlib import Path\n+\n+from coalib.results.result_actions.ResultAction import ResultAction\n+from coalib.results.result_actions.ShowPatchAction import ShowPatchAction\n+from coalib.output.printers.LogPrinter import LogPrinter\n+from coalib.parsing.FilterHelper import FilterHelper\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from coalib.coala_modes import mode_normal\n+from coalib.parsing.DefaultArgParser import default_arg_parser\n+\n+\n+def show_possibilities(console_printer, i, action):\n+    console_printer.print('[{:>4}]  {}. Apply patch (\\'{}\\')'.format('', i,\n+                                                                     action))\n+\n+\n+class GBear():\n+    def __init__(self, bear: str):\n+        self.bear = bear\n+        self.name = bear\n+\n+\n+class GeneratePatchesAction(ResultAction):\n+    SUCCESS_MESSAGE = 'Patch applied successfully.'\n+\n+    is_applicable = staticmethod(ShowPatchAction.is_applicable)\n+\n+    def apply(self,\n+              result,\n+              original_file_dict,\n+              file_diff_dict):\n+        \"\"\"\n+        (G)enerate patches\n+        \"\"\"\n+\n+        section = Section('cli')\n+        section.add_or_create_setting(Setting('default_actions',\n+                                              '*: ApplyPatchAction'))\n+        section.add_or_create_setting(Setting('no_config', True))\n+\n+        console_printer = ConsolePrinter()\n+        possible_options = []\n+        log_printer = LogPrinter()\n+        bears_app = []\n+        args = default_arg_parser().parse_args()\n+        args.files = []\n+        to_filename = None\n+        to_filename = sorted(result.diffs.items())[0][0]\n+        language = guess_lexer_for_filename(to_filename, 'Hello').name\n+        section.add_or_create_setting(Setting('files', to_filename))\n+        path_dir = Path(to_filename)\n+        path_dir = path_dir.parts[len(path_dir.parts) - 2]\n+        path = to_filename\n+        path = path.rstrip(os.sep)\n+\n+        filtered_bears = FilterHelper.apply_filters(\n+            [['language', language]], None)[0]['cli']\n+\n+        filtered_bears2 = FilterHelper.apply_filters([['language', 'Python']])\n+        print(filtered_bears2)\n+\n+        b = GBear('SpaceConsistencyBear')\n+\n+        filtered_bears = list(filtered_bears)\n+        filtered_bears.insert(0, b)\n+        for b in filtered_bears:\n+            possible_options.append(b.name)\n+\n+        console_printer.print('[{:>4}] *0. Do Nothing'.format(''))\n+        for i, action in enumerate(possible_options, 1):\n+            show_possibilities(console_printer, i, action)\n+\n+        choose_action = str(input('[{:>4}]  Enter a number: '.format('')))\n+        if choose_action is '' or choose_action is '0':\n+            return False\n+\n+        choose_action = int(choose_action)\n+        list_of_bears = possible_options\n+\n+        try:\n+            chosed_bear = list_of_bears[choose_action - 1]\n+        except IndexError:  # pragma: no cover", "created_at": "2017-08-21T13:16:11Z", "last_edited_at": "2017-08-21T13:16:19Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDU5NDY4Mw==", "fields": {"body": "I hope you know that this is just giving an alias to possible_options named list_of_bears and not actually copying whole list to different memory location.\nI don't see a point of doing that as its just used once on line #83, that too only for read purpose and not updating the list.", "diff": "@@ -0,0 +1,97 @@\n+import os\n+\n+from pygments.lexers import guess_lexer_for_filename\n+from pyprint.ConsolePrinter import ConsolePrinter\n+from pathlib import Path\n+\n+from coalib.results.result_actions.ResultAction import ResultAction\n+from coalib.results.result_actions.ShowPatchAction import ShowPatchAction\n+from coalib.output.printers.LogPrinter import LogPrinter\n+from coalib.parsing.FilterHelper import FilterHelper\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from coalib.coala_modes import mode_normal\n+from coalib.parsing.DefaultArgParser import default_arg_parser\n+\n+\n+def show_possibilities(console_printer, i, action):\n+    console_printer.print('[{:>4}]  {}. Apply patch (\\'{}\\')'.format('', i,\n+                                                                     action))\n+\n+\n+class GBear():\n+    def __init__(self, bear: str):\n+        self.bear = bear\n+        self.name = bear\n+\n+\n+class GeneratePatchesAction(ResultAction):\n+    SUCCESS_MESSAGE = 'Patch generated successfully.'\n+\n+    is_applicable = staticmethod(ShowPatchAction.is_applicable)\n+\n+    def apply(self,\n+              result,\n+              original_file_dict,\n+              file_diff_dict):\n+        \"\"\"\n+        (G)enerate patches\n+        \"\"\"\n+\n+        section = Section('cli')\n+        section.add_or_create_setting(Setting('default_actions',\n+                                              '*: ApplyPatchAction'))\n+        section.add_or_create_setting(Setting('no_config', True))\n+\n+        console_printer = ConsolePrinter()\n+        possible_options = []\n+        log_printer = LogPrinter()\n+        bears_app = []\n+        args = default_arg_parser().parse_args()\n+        args.files = []\n+        to_filename = None\n+        to_filename = sorted(result.diffs.items())[0][0]\n+        language = guess_lexer_for_filename(to_filename, 'Hello').name\n+        section.add_or_create_setting(Setting('files', to_filename))\n+        path_dir = Path(to_filename)\n+        path_dir = path_dir.parts[len(path_dir.parts) - 2]\n+        path = to_filename\n+        path = path.rstrip(os.sep)\n+\n+        filtered_bears = FilterHelper.apply_filters(\n+            [['language', language]], None)[0]['cli']\n+\n+        b = GBear('SpaceConsistencyBear')\n+\n+        filtered_bears = list(filtered_bears)\n+        filtered_bears.insert(0, b)\n+        for b in filtered_bears:\n+            possible_options.append(b.name)\n+\n+        console_printer.print('[{:>4}] *0. Do Nothing'.format(''))\n+        for i, action in enumerate(possible_options, 1):\n+            show_possibilities(console_printer, i, action)\n+\n+        choose_action = str(input('[{:>4}]  Enter a number: '.format('')))\n+        if choose_action is '' or choose_action is '0':\n+            return False\n+\n+        choose_action = int(choose_action)\n+        list_of_bears = possible_options", "created_at": "2017-08-22T20:36:35Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDc0NTcwOQ==", "fields": {"body": "Use for..else", "diff": "@@ -220,16 +221,24 @@ def collect_bears_by_aspects(aspects, kinds):\n     \"\"\"\n     all_bears = get_all_bears()\n     bears_found = tuple([] for i in range(len(kinds)))\n+    unfulfilled_aspects = []\n     for aspect in aspects.get_leaf_aspects():\n+        found = False\n         for bear in all_bears:\n             if (aspect in bear.aspects['detect'] or\n                     aspect in bear.aspects['fix']):\n+                found = True\n                 index = kinds.index(_get_kind(bear))\n                 # Avoid duplicate\n                 if bear not in bears_found[index]:\n                     bears_found[index].append(bear)\n                 break\n+        if not found:\n+            unfulfilled_aspects.append(type(aspect).__qualname__)", "created_at": "2017-08-23T13:08:07Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDc0NjQ5MA==", "fields": {"body": "AssertEqual to empty list. Avoid len below also.", "diff": "@@ -288,6 +292,25 @@ def test_aspect_bear(self):\n         self.assertEqual(len(local_bears), 1)\n         self.assertIs(local_bears[0].name, 'AspectTestBear')\n \n+    def test_collect_bears_by_aspects_unfulfilled_aspect(self):\n+        aspects = AspectList([\n+            get_aspect('unusedvariable')('py'),\n+        ])\n+\n+        logger = logging.getLogger()\n+        with bear_test_module(), self.assertLogs(logger, 'WARNING') as log:\n+            local_bears, global_bears = collect_bears_by_aspects(\n+                aspects,\n+                [BEAR_KIND.LOCAL, BEAR_KIND.GLOBAL])\n+        self.assertRegex(log.output[0],\n+                         'coala cannot find bear that could analyze the '\n+                         'following aspects: \\['\n+                         \"'Root\\.Redundancy\\.UnusedVariable\\.UnusedParameter'\"\n+                         '\\]')\n+\n+        self.assertEqual(len(global_bears), 0)", "created_at": "2017-08-23T13:11:22Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDc0NjcyNQ==", "fields": {"body": "'By-apects' is redundant", "diff": "@@ -288,6 +292,25 @@ def test_aspect_bear(self):\n         self.assertEqual(len(local_bears), 1)\n         self.assertIs(local_bears[0].name, 'AspectTestBear')\n \n+    def test_collect_bears_by_aspects_unfulfilled_aspect(self):", "created_at": "2017-08-23T13:12:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDk3MDUxMA==", "fields": {"body": "make documented smaller functions and its going to be better at reviewing", "diff": "@@ -0,0 +1,89 @@\n+import os\n+\n+from pygments.lexers import guess_lexer_for_filename\n+from pyprint.ConsolePrinter import ConsolePrinter\n+from pathlib import Path\n+\n+from coalib.results.result_actions.ResultAction import ResultAction\n+from coalib.results.result_actions.ShowPatchAction import ShowPatchAction\n+from coalib.output.printers.LogPrinter import LogPrinter\n+from coalib.parsing.FilterHelper import FilterHelper\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from coalib.coala_modes import mode_normal\n+from coalib.parsing.DefaultArgParser import default_arg_parser\n+\n+\n+def show_possibilities(console_printer, i, action):\n+    console_printer.print('[{:>4}]  {}. Apply patch (\\'{}\\')'.format('', i,\n+                                                                     action))\n+\n+\n+class GBear():\n+    def __init__(self, bear: str):\n+        self.bear = bear\n+        self.name = bear\n+\n+\n+class GeneratePatchesAction(ResultAction):\n+    SUCCESS_MESSAGE = 'Patch generated successfully.'\n+\n+    is_applicable = staticmethod(ShowPatchAction.is_applicable)\n+\n+    def apply(self,\n+              result,\n+              original_file_dict,\n+              file_diff_dict):\n+        \"\"\"\n+        (G)enerate patches\n+        \"\"\"\n+\n+        section = Section('cli')\n+        section.add_or_create_setting(Setting('default_actions',\n+                                              '*: ApplyPatchAction'))\n+        section.add_or_create_setting(Setting('no_config', True))\n+\n+        console_printer = ConsolePrinter()\n+        possible_options = []\n+        log_printer = LogPrinter()\n+        bears_app = []\n+        args = default_arg_parser().parse_args()\n+        args.files = []\n+        to_filename = sorted(result.diffs.items())[0][0]\n+        language = guess_lexer_for_filename(to_filename, 'Error, no file '\n+                                                         'found').name\n+\n+        section.add_or_create_setting(Setting('files', to_filename))\n+        path_dir = Path(to_filename)\n+        path_dir = path_dir.parts[len(path_dir.parts) - 2]\n+        path = to_filename\n+        path = path.rstrip(os.sep)\n+\n+        filtered_bears = FilterHelper.apply_filters(\n+            [['language', language]], None)[0]['cli']\n+\n+        filtered_bears = list(filtered_bears)\n+        filtered_bears.insert(0, GBear('SpaceConsistencyBear'))\n+        for b in filtered_bears:\n+            possible_options.append(b.name)\n+\n+        console_printer.print('[{:>4}] *0. Do Nothing'.format(''))\n+        for i, action in enumerate(possible_options, 1):\n+            show_possibilities(console_printer, i, action)\n+\n+        choose_action = str(input('[{:>4}]  Enter a number: '.format('')))\n+        if choose_action is '' or choose_action is '0':\n+            return False\n+\n+        choose_action = int(choose_action)\n+        chosed_bear = possible_options[choose_action - 1]\n+\n+        args.default_actions = '*: ApplyPatchAction'\n+\n+        bears_app.append(chosed_bear)\n+        args.files.append(os.path.basename(path))\n+        args.bears = bears_app\n+\n+        mode_normal(console_printer, log_printer, args, debug=False)", "created_at": "2017-08-24T09:38:06Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDkyNTcwNQ==", "fields": {"body": "A star import that can be expanded is by very definition  'used' , and doesnt belong in this aspect.", "diff": "@@ -97,6 +97,16 @@ class docs:\n         Usually, unused imports can simply be removed.\n         \"\"\"\n \n+    remove_non_standard_import = Taste[bool](\n+        \"Remove ALL unused import, include those not from language's \"\n+        'standard library.',\n+        (True, False), default=True)\n+\n+    expand_wildcard_imports = Taste[bool](", "created_at": "2017-08-24T04:44:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTA2ODM5NQ==", "fields": {"body": "Suggestion: decorator can*  might be better", "diff": "@@ -0,0 +1,33 @@\n+from .taste import Taste\n+from .meta import aspectclass\n+\n+\n+def map_setting_to_aspect(**aspectable_setting):\n+    \"\"\"\n+    Override function arguments value with coala's aspect and taste.\n+\n+    This decorators could be used by ``Bear.run()`` to automatically map and", "created_at": "2017-08-24T16:42:01Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTEzMTI1MA==", "fields": {"body": "@nkprince007\nExactly. That's what I'm trying to achieve. We want to remove the usage of LogPrinter objects (log_printer in most cases), but we can't remove it from the function parameter. Removing it from function parameters will lead to break in public API.\nThis PR is only trying deprecate it, and not remove it totally. After this, it will be easier remove it totally as it won't be used anywhere essentially. That PR will be done after this and be merged only when there's a major release of coala as it will be breaking many public APIs.", "diff": "@@ -102,7 +104,7 @@ def autoapply_actions(results,\n                       file_dict,\n                       file_diff_dict,\n                       section,\n-                      log_printer):\n+                      log_printer=None):", "created_at": "2017-08-24T21:08:05Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzc4MQ==", "fields": {"body": "Same, see above comment", "diff": "@@ -0,0 +1,228 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/ProjectReport/HemangKumar\n+student: Hemang Kumar\n+organisation: coala\n+organisation_link : https://coala.io", "created_at": "2017-08-26T12:05:35Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzk4Mg==", "fields": {"body": "Yeah I think its better to have it configurable. Making it a default will require adding it in markup in _layout/reports.md file as I understand. But it'll be good to have just one configuration file (that is this file) and only file governing the layout  (_layouts/report.md , which just has the design and no config defaults)", "diff": "@@ -0,0 +1,228 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/ProjectReport/HemangKumar\n+student: Hemang Kumar\n+organisation: coala", "created_at": "2017-08-26T12:23:41Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4NzkyOA==", "fields": {"body": "Yeah thats the reason, no filter by author in GitLab", "diff": "@@ -0,0 +1,228 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/ProjectReport/HemangKumar\n+student: Hemang Kumar\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve coala Website & Supporting Tools\n+project_link: https://summerofcode.withgoogle.com/projects/#6012382913495040\n+tarball: https://github.com/hemangsk/GSoCReport/raw/master/hemangsk_coala.tar\n+mentors: >\n+ [Lasse Schuirmann](https://github.com/sils) & [Fabian Neuschmidt](https://github.com/fneu)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC-2017/milestones/3\n+ - Phase 1 : https://gitlab.com/coala/GSoC-2017/milestones/7\n+ - Phase 2 : https://gitlab.com/coala/GSoC-2017/milestones/8\n+ - Phase 3 : https://gitlab.com/coala/GSoC-2017/milestones/9\n+bio: >\n+ I'm a final year student of Computer Science & Engineering at University School of Information,\n+ Communication & Technology, GGS IP University. I participated in GSoC and worked with [coala](https://coala.io) to facilitate users to use coala online and functionality for one click Git Repository linting. I also worked on a bot to generate coafile, worked on improving UI of coala-html and configurability of coala-projects. I also worked on adding Notification and Thread support in the IGitt library.  \n+social:\n+ - GitHub:\n+   - username: hemangsk\n+   - link: https://github.com/hemangsk\n+ - GitLab:\n+   - username: hemangsk\n+   - link: https://gitlab.com/hemangsk\n+ - Gitter:\n+   - username: hemangsk\n+   - link: https://gitter.im/hemangsk\n+ - HackerRank:\n+   - username: hemangsk\n+   - link: https://hackerrank/hemang\n+email: hemangsk@gmail.com\n+blog: http://hemangsk.github.io/stories.html\n+activity:\n+ - 0:\n+   - repo: coala-quickstart \n+   - link: https://github.com/coala/coala-quickstart/commits/master?author=hemangsk\n+   - details: > \n+      Add --allow-incomplete-sections mode and bump coala version.\n+ - 1:\n+   - repo: coalaCSS\n+   - link: https://github.com/coala/coalaCSS/commits/master?author=hemangsk\n+   - details: >\n+      Create a CSS library to have consistency throughout coala web projects.\n+ - 2:\n+   - repo: coala Projects\n+   - link: https://github.com/coala/projects/commits/master?author=hemangsk\n+   - details: > \n+       Commits **f26ae52** through **6497def** were part of GSoC.\n+ - 3:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/718603aa2294a55206cfaa8806aa624791757ec4\n+   - details: Add put method\n+ - 4:\n+   - repo: IGitt", "created_at": "2017-08-26T12:19:31Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM5MTc4OA==", "fields": {"body": "redundant space after comma \ud83d\udc4d", "diff": "@@ -32,16 +33,30 @@ class RSTcheckBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n-                         code_block_language_ignore: list=()):\n+                         code_block_language_ignore: list=(),\n+                         directive_ignore: typed_list(str)=(),\n+                         role_ignore: typed_list(str)=()):\n         \"\"\"\n         :param code_block_language_ignore:\n             Comma seperated list for languages of which code blocks\n             should be ignored. Code block of following languages\n             can be detected: ``bash``, ``c``, ``cpp``, ``json``,\n             ``python``, ``rst``.\n+        :param directive_ignore:\n+             Comma separated list of directives to be ignored. Can be\n+             used to ignore custom directives.\n+        :param role_ignore:\n+             Comma separated list of roles to be ignored. Can be used\n+             to ignore custom roles.\n         \"\"\"\n         args = ()\n         if code_block_language_ignore:\n             args = ('--ignore-language=' +\n                     ','.join(code_block_language_ignore),)\n-        return args + (filename,)\n+        if directive_ignore:\n+            directives = ','.join(part.strip() for part in directive_ignore)\n+            args += ('--ignore-directives=' + directives,)\n+        if role_ignore:\n+            roles = ','.join(part.strip() for part in role_ignore)\n+            args += ('--ignore-roles=' + roles,)\n+        return args + (filename, )", "created_at": "2017-08-26T16:01:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQ0Nw==", "fields": {"body": "Same here as Add action: is interpreted as a key by jekyll.", "diff": "@@ -0,0 +1,135 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/StatusReport/AlexMaxim\n+student: Alexandru-Sorin Maxim\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve the coala CLI\n+project_link: https://summerofcode.withgoogle.com/projects/#4940869170888704\n+tarball:\n+mentors: >\n+ [Adrian Zatreanu](https://github.com/Adrianzatreanu) & [Muhammad Kaisar Arkhan](https://github.com/yukiisbored)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC-2017/milestones/16\n+ - Phase 1 : https://gitlab.com/coala/GSoC-2017/milestones/17\n+ - Phase 2 : https://gitlab.com/coala/GSoC-2017/milestones/18\n+ - Phase 3 : https://gitlab.com/coala/GSoC-2017/milestones/19\n+bio: >\n+ I'm a 3rd year student of Computer Science & Engineering at Politehnica University of Bucharest. I participated in GSoC and worked with [coala](https://coala.io) to improve coala CLI experience. Most of the people who use a CLI program do not read the whole output, only a small part of it. Also, a large output from a command could tire them and could make them stop using our application. Remove the redundant information, keeping only the necessary information.  \n+social:\n+ - GitHub:\n+   - username: Nosferatul\n+   - link: https://github.com/Nosferatul\n+ - GitLab:\n+   - username: Nosferatul\n+   - link: https://gitlab.com/Nosferatul\n+ - Gitter:\n+   - username: Nosferatul\n+   - link: https://gitter.im/Nosferatul\n+email: alexandrus.maxim@gmail.com\n+blog: https://gsocsite.wordpress.com/category/gsoc/\n+activity:\n+ - 0:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4369/commits/d75d10ab7bb9be4abe7d14f201afc748fb1b96d6\n+   - details: >\n+      Change output for user.\n+ - 1:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4370/commits/3e590f5e34f019103f98f0ea9b32c94d01e05472\n+   - details: >\n+      Change the coafile warning/output.\n+ - 2:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/2f0f3116aea7e2933322d4cc2a44a9fef61981a4\n+   - details: >\n+       Change the actions name.\n+ - 3:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/8a25983187966a60a810756c200ece1d9bb59607\n+   - details: Change the input: Numbers to letters\n+ - 4:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4420/commits/0eb0be9e7bf4765dd829d0aeb5a6918fb00d05e1\n+   - details: Fix the ouput\n+ - 5:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4429/commits/45a7369dfcc7af78c0844f0203a1deb1a17a3c75\n+   - details: Add Chain Action\n+ - 6:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4462/commits/65feb308706c77ca5aac10123f757600cc639c1a\n+   - details: Add apply-single-action\n+ - 7:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4481/commits/149d59d28318954d4035c7e8f639cc344af061c0\n+   - details: Add Show Applied Action\n+ - 8:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4603/commits/0911078532a49c42afb06effec750be24a7b4139\n+   - details: Make Chain Action default\n+ - 9:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4626/commits/360a6245d88260631c8a9019de026e835e43df3d\n+   - details: Add line number for the diff ouput\n+ - 10:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4626/commits/2bd16a5d44d93edc211da3faf4cb17e93296cd70\n+   - details: Change Severity line from the ouput\n+ - 11:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4627/commits/377585d14cac6522546c9dc0a94f2890304eb7a5\n+   - details: Add line number inside \u201c[ ]\u201d in diffs\n+ - 12:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4627/commits/d03303c00d5e6afa543cb173288b3908a8945428\n+   - details: Fix color from the ouput\n+ - 13:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4629/commits/a6c376f054da150e2d29a90997a03ddd3ec7dba0\n+   - details: Add Do (N)othing action\n+ - 14:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4638/commits/f43bd5e7cb908c5d3a7b384924bc5f282a2e625a\n+   - details: Fix --no-color flag\n+ - 15:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4634/commits/25e019cdd944532f969d5cf1079afd7d62f41e19\n+   - details: Add Action: Generate Patches", "created_at": "2017-08-27T20:25:20Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQyOQ==", "fields": {"body": "Minor change, this throws an error because it interprets \"Change the input\" as a key because of the \":\" after it.\n\ndetails : Change the input numbers to letters\nor\ndetails: Change the input from numbers to letters will work perfect", "diff": "@@ -0,0 +1,135 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/StatusReport/AlexMaxim\n+student: Alexandru-Sorin Maxim\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve the coala CLI\n+project_link: https://summerofcode.withgoogle.com/projects/#4940869170888704\n+tarball:\n+mentors: >\n+ [Adrian Zatreanu](https://github.com/Adrianzatreanu) & [Muhammad Kaisar Arkhan](https://github.com/yukiisbored)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC-2017/milestones/16\n+ - Phase 1 : https://gitlab.com/coala/GSoC-2017/milestones/17\n+ - Phase 2 : https://gitlab.com/coala/GSoC-2017/milestones/18\n+ - Phase 3 : https://gitlab.com/coala/GSoC-2017/milestones/19\n+bio: >\n+ I'm a 3rd year student of Computer Science & Engineering at Politehnica University of Bucharest. I participated in GSoC and worked with [coala](https://coala.io) to improve coala CLI experience. Most of the people who use a CLI program do not read the whole output, only a small part of it. Also, a large output from a command could tire them and could make them stop using our application. Remove the redundant information, keeping only the necessary information.  \n+social:\n+ - GitHub:\n+   - username: Nosferatul\n+   - link: https://github.com/Nosferatul\n+ - GitLab:\n+   - username: Nosferatul\n+   - link: https://gitlab.com/Nosferatul\n+ - Gitter:\n+   - username: Nosferatul\n+   - link: https://gitter.im/Nosferatul\n+email: alexandrus.maxim@gmail.com\n+blog: https://gsocsite.wordpress.com/category/gsoc/\n+activity:\n+ - 0:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4369/commits/d75d10ab7bb9be4abe7d14f201afc748fb1b96d6\n+   - details: >\n+      Change output for user.\n+ - 1:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4370/commits/3e590f5e34f019103f98f0ea9b32c94d01e05472\n+   - details: >\n+      Change the coafile warning/output.\n+ - 2:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/2f0f3116aea7e2933322d4cc2a44a9fef61981a4\n+   - details: >\n+       Change the actions name.\n+ - 3:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/8a25983187966a60a810756c200ece1d9bb59607\n+   - details: Change the input: Numbers to letters", "created_at": "2017-08-27T20:24:53Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTYxNzY1MA==", "fields": {"body": "capital C :(", "diff": "@@ -0,0 +1,45 @@\n+from bears.yang.YANGBear import YANGBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+\n+COALA_MODEL = \"\"\"", "created_at": "2017-08-28T19:56:21Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTYzNzQyNQ==", "fields": {"body": "Rather list them all \ud83d\udc4d", "diff": "@@ -261,6 +261,8 @@ The Setting does support some very basic types:\n -  List of strings (``list``, values will be split by comma)\n -  Dict of strings (``dict``, values will be split by comma and colon)\n \n+You can use shortcuts for basic types, for example, ``str_list`` for String.", "created_at": "2017-08-28T21:16:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTYzNzk1Mw==", "fields": {"body": "you should move each subtests for your specialized types into an own test function. E.g. test_str_list, test_int_list etc.\nUsing separate test functions makes test design more modular \ud83d\udc4d", "diff": "@@ -100,6 +100,43 @@ def test_typed_list(self):\n \n         self.assertEqual(repr(typed_list(int)), 'typed_list(int)')\n \n+    def test_typed_list_shortcuts(self):\n+        # int\n+        self.uut = Setting('key', '1, 2, 3')\n+        self.assertEqual(int_list(self.uut), [1, 2, 3])\n+\n+        with self.assertRaises(ValueError):\n+            self.uut = Setting('key', '1, a, 3')\n+            int_list(self.uut)\n+\n+        self.assertEqual(repr(int_list), 'typed_list(int)')\n+\n+        # str\n+        self.uut = Setting('key', 'a, b, c')\n+        self.assertEqual(str_list(self.uut), ['a', 'b', 'c'])\n+\n+        self.assertEqual(repr(str_list), 'typed_list(str)')\n+\n+        # float\n+        self.uut = Setting('key', '0.8, 1.3, 5.87')\n+        self.assertEqual(float_list(self.uut), [0.8, 1.3, 5.87])\n+\n+        with self.assertRaises(ValueError):\n+            self.uut = Setting('key', '1.987, a, 3')\n+            float_list(self.uut)\n+\n+        self.assertEqual(repr(float_list), 'typed_list(float)')\n+\n+        # bool\n+        self.uut = Setting('key', 'true, nope, yeah')\n+        self.assertEqual(bool_list(self.uut), [True, False, True])\n+\n+        with self.assertRaises(ValueError):\n+            self.uut = Setting('key', 'true, false, 78, 89.0')\n+            bool_list(self.uut)\n+\n+        self.assertEqual(repr(bool_list), 'typed_list(bool)')", "created_at": "2017-08-28T21:18:58Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTYzODcxOQ==", "fields": {"body": "maybe you should keep the old code-style for imports, so leaving the closing ) on a new line and having a trailing comma:\n    language,\n    float_list, bool_list, int_list, str_list,\n)", "diff": "@@ -8,7 +8,7 @@\n     Setting, path, path_list, url, typed_dict, typed_list, typed_ordered_dict,\n     glob, glob_list,\n     language,\n-)\n+    float_list, bool_list, int_list, str_list)", "created_at": "2017-08-28T21:22:16Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTkyMjYzMA==", "fields": {"body": "you probably meant test_bool_list ;)", "diff": "@@ -100,6 +101,41 @@ def test_typed_list(self):\n \n         self.assertEqual(repr(typed_list(int)), 'typed_list(int)')\n \n+    def test_int_list(self):\n+        self.uut = Setting('key', '1, 2, 3')\n+        self.assertEqual(int_list(self.uut), [1, 2, 3])\n+\n+        with self.assertRaises(ValueError):\n+            self.uut = Setting('key', '1, a, 3')\n+            int_list(self.uut)\n+\n+        self.assertEqual(repr(int_list), 'typed_list(int)')\n+\n+    def test_str_list(self):\n+        self.uut = Setting('key', 'a, b, c')\n+        self.assertEqual(str_list(self.uut), ['a', 'b', 'c'])\n+        self.assertEqual(repr(str_list), 'typed_list(str)')\n+\n+    def test_float_list(self):\n+        self.uut = Setting('key', '0.8, 1.3, 5.87')\n+        self.assertEqual(float_list(self.uut), [0.8, 1.3, 5.87])\n+\n+        with self.assertRaises(ValueError):\n+            self.uut = Setting('key', '1.987, a, 3')\n+            float_list(self.uut)\n+\n+        self.assertEqual(repr(float_list), 'typed_list(float)')\n+\n+    def test_float_list(self):", "created_at": "2017-08-29T21:55:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTkyMzE2NQ==", "fields": {"body": "also refer to the python types using backticks, so:\nYou can use shortcuts for basic types, ``str_list`` for ``str`` ,\n``int_list`` for ``int``, ``float_list`` for ``float`` and ``bool_list`` for ``bool``.\n\nOr write them out if you don't want to refer to the python types:\nYou can use shortcuts for basic types, ``str_list`` for strings,\n``int_list`` for integers, ``float_list`` for floats and ``bool_list`` for boolean values.", "diff": "@@ -261,6 +261,9 @@ The Setting does support some very basic types:\n -  List of strings (``list``, values will be split by comma)\n -  Dict of strings (``dict``, values will be split by comma and colon)\n \n+You can use shortcuts for basic types, ``str_list`` for String,\n+``int_list`` for Int, ``float_list`` for Float and ``bool_list`` for Boolean.", "created_at": "2017-08-29T21:57:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjIxNzYyNA==", "fields": {"body": "newline after this according to pep257 \ud83d\ude04", "diff": "@@ -1,3 +1,10 @@\n+\"\"\"\n+Language and docstyle independent extraction of documenation comments.\n+\n+Each of the functions is built upon one another, and at the last,\n+exposes a single function :func:`extract_documentation_with_markers`\n+which is used by :class:`.DocBaseClass`, to extract documentation.\n+\"\"\"", "created_at": "2017-08-30T23:51:34Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQwODcyMw==", "fields": {"body": "um you can put {{ }} to escape them, but this is fine, I guess", "diff": "@@ -0,0 +1,39 @@\n+import re\n+import string\n+import textwrap\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Pitchfork(BotPlugin):\n+    \"\"\"\n+    To pitchfork users down to ...\n+    \"\"\"\n+\n+    @botcmd\n+    def pitchfork(self, msg, arg):\n+        \"\"\"\n+        To pitchfork user down to ...\n+        \"\"\"\n+        match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n+                         arg)\n+        if match:\n+            user = match.group(1)\n+            place = match.group(2) if match.group(2) else 'offtopic'\n+            return textwrap.dedent((\n+                string.Template(\"\"\"\n+                    @$user, you are being pitchforked down to $place", "created_at": "2017-08-31T18:11:12Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjk3NDExNA==", "fields": {"body": "@damngamerz It is compulsory! Believe me ;)", "diff": "@@ -0,0 +1,45 @@\n+from bears.yang.YANGBear import YANGBear\n+from coalib.testing.LocalBearTestHelper import verify_local_bear\n+\n+\n+COALA_MODEL = \"\"\"\n+module coala-model {\n+\n+  namespace \"http://coala.io/yang/coala-model\";\n+  prefix coala;", "created_at": "2017-09-05T12:30:53Z", "last_edited_at": null, "author": "userzimmermann", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzY0OTcwNg==", "fields": {"body": "Not really. In coala.py file, I've shifted the condition if args.json below if args.show_bears which was above that earlier. And if.show_bears condition always returns either 0 or some exit code. So, if --show-bears and --json are specified together, mode_json function won't be called. So, essentially this line won't be executed if show_bears option is specified.", "diff": "@@ -46,34 +46,17 @@ def mode_json(args, debug=False):\n     import json\n \n     from coalib.coala_main import run_coala\n-    from coalib.misc.DictUtilities import inverse_dicts\n-    from coalib.misc.Exceptions import get_exitcode\n     from coalib.output.Logging import configure_json_logging\n     from coalib.output.JSONEncoder import create_json_encoder\n \n     if args.log_json:\n         log_stream = configure_json_logging()\n \n     JSONEncoder = create_json_encoder(use_relpath=args.relpath)\n-    results = []\n-\n-    if args.show_bears:\n-        try:\n-            from coalib.parsing.FilterHelper import apply_filter\n-\n-            local_bears, global_bears = apply_filter(\n-                'language', args.filter_by_language)\n-            bears = inverse_dicts(local_bears, global_bears)\n-            for bear, _ in sorted(bears.items(),\n-                                  key=lambda bear_tuple:\n-                                  bear_tuple[0].name):\n-                results.append(bear)\n-        except BaseException as exception:  # pylint: disable=broad-except\n-            return get_exitcode(exception)\n-    else:\n-        results, exitcode, _ = run_coala(args=args, debug=debug)\n \n-    retval = {'bears': results} if args.show_bears else {'results': results}\n+    results, exitcode, _ = run_coala(args=args, debug=debug)", "created_at": "2017-09-07T20:39:37Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODE5OTQ4Mw==", "fields": {"body": "Unnecessary change", "diff": "@@ -291,14 +291,15 @@ def check_issue_reference(self, body,\n             Whether to enforce presence of issue reference in the body of\n             commit message.\n         \"\"\"\n+", "created_at": "2017-09-11T21:41:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODIwMDMzMA==", "fields": {"body": "We have to do it differently. Now if the body is empty, but we require a reference in the message, this isn't reported any more.\nWe need a test case for this so this won't happen again", "diff": "@@ -291,14 +291,15 @@ def check_issue_reference(self, body,\n             Whether to enforce presence of issue reference in the body of\n             commit message.\n         \"\"\"\n+\n         if not body_close_issue:\n             return\n \n         host = self.get_host_from_remotes()\n         if host not in self.SUPPORTED_HOST_KEYWORD_REGEX:\n             return\n \n-        if body_close_issue_on_last_line:\n+        if body_close_issue_on_last_line and body:", "created_at": "2017-09-11T21:45:00Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODExMg==", "fields": {"body": "platforms since it's in plural context", "diff": "@@ -4,6 +4,31 @@\n [![Codecov branch](https://img.shields.io/codecov/c/github/coala/corobo/master.svg)](https://codecov.io/gh/coala/corobo)\n [![Semaphore branch](https://semaphoreci.com/api/v1/coala/corobo/branches/master/badge.svg)](https://semaphoreci.com/coala/corobo)\n [![Gitter Room](https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg)](https://gitter.im/coala/corobo)\n+\n+## About\n+\n+`corobo` is a Python based chatbot that could be connected to many messaging\n+platform including Slack, HipChat, Telegram, IRC, XMPP, Tox, Campfire, Gitter,", "created_at": "2017-09-16T14:44:30Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODIyNQ==", "fields": {"body": "...These command routines", "diff": "@@ -4,6 +4,31 @@\n [![Codecov branch](https://img.shields.io/codecov/c/github/coala/corobo/master.svg)](https://codecov.io/gh/coala/corobo)\n [![Semaphore branch](https://semaphoreci.com/api/v1/coala/corobo/branches/master/badge.svg)](https://semaphoreci.com/coala/corobo)\n [![Gitter Room](https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg)](https://gitter.im/coala/corobo)\n+\n+## About\n+\n+`corobo` is a Python based chatbot that could be connected to many messaging\n+platform including Slack, HipChat, Telegram, IRC, XMPP, Tox, Campfire, Gitter,\n+Skype. Check all the backends available\n+[here](http://errbot.io/en/latest/features.html#multiple-server-backends)\n+\n+This repository is mainly a collection of plugins that are written for\n+[errbot](http://errbot.io). Errbot is a Python based chatbot framework.\n+\n+As described on Errbot website:\n+> Errbot is a chatbot, a daemon that connects to your favorite chat service\n+  and brings your tools into the conversation.\n+\n+It handles sending messages to correct rooms/person, receiving messages,\n+calling your command routines on matching commands, etc. This command routines", "created_at": "2017-09-16T14:51:05Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDAyMzk4Mg==", "fields": {"body": "Actually I just need to add a linebreak (\\n) to each elements, since LocalBearTestHelper.get_results uses prepare_file to add the linebreaks to the lines before inputting it to bear.execute.\nIf I just use short_url_redirect directly as an argument for instancing Diff(), it will raise AssertionError, since the bear is actually processing the lines with the linebreaks added", "diff": "@@ -253,6 +255,11 @@ def test_redirect_threshold(self):\n             self.check_validity(self.uut, long_url_redirect,\n                                 settings={'follow_redirects': 'true'})\n \n+            with prepare_file(short_url_redirect, None) as (lines, _):", "created_at": "2018-07-04T06:57:09Z", "last_edited_at": "2018-07-04T07:19:24Z", "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI3MDUzMQ==", "fields": {"body": "There's Promise.resolve()\nBut returning whatever directly also wraps it  into promise because it's inside an async function.", "diff": "@@ -199,7 +199,30 @@ const issueStore = new class IssueStore extends EventEmitter {\n     }\n     let fetchPromise;\n     if (Client.canCacheLots()) {\n-      fetchPromise = Client.getOcto().repos(repoOwner, repoName).issues.fetchAll(opts);\n+      if (Client.useGraphQL()) {\n+        const [issues, pullRequests] = await Promise.all([\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .issues({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 100}),\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .pullRequests({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 30})\n+        ]);\n+        let result = [];\n+        if (issues) {\n+          result = result.concat(issues);\n+        }\n+        if (pullRequests) {\n+          result = result.concat(pullRequests);\n+        }\n+        fetchPromise = new Promise(resolve => resolve(", "created_at": "2018-07-05T08:30:36Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDM5NTk0MA==", "fields": {"body": "Use your width wisely.\nPut message on next line & indent only four spaces.", "diff": "@@ -162,8 +163,21 @@ class SubLanguageMeta(type(cls)):\n \n                 def __getattr__(self, item):\n                     try:\n+                        if item is 'comment_delimiter':\n+                            # Providing backward compatibility for\n+                            # `comment_delimiter`\n+                            logging.warning('The property `comment_delimiter` '\n+                                            'of Language module is deprecated '", "created_at": "2018-07-05T15:30:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTE3NA==", "fields": {"body": "possibly deferred to a separate followup issue after this is merged ...\nWhat about adding a query parameter to force either GraphQL or standard API ?\nAnd (if still feasible) possibly add a env var which does the same for the pre-fetch and/or developer's local server?", "diff": "@@ -191,6 +193,17 @@ class Client extends EventEmitter {\n     let {token, password} = this.getCredentials();\n     return !!token || !!password;\n   }\n+  useGraphQL() {\n+    // use GraphQL when applicable, provided `hasCredentials()` is true\n+    // developers need to change the behaviour here in case they", "created_at": "2018-07-06T05:54:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTkwOQ==", "fields": {"body": "trailing comma ?\nI'll stop with the trailing comma here, in case you or @blazeu believe they are not appropriate in these contexts.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'", "created_at": "2018-07-06T05:59:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjI4Ng==", "fields": {"body": "ideally this coala specific config is not in this library, but is provided by separate configuration.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';", "created_at": "2018-07-06T06:02:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjQ0Ng==", "fields": {"body": "this is my python brain kicking in ....\nthe || .. here should be indented more so that it doesnt align with the console.log(..) on the next line.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {", "created_at": "2018-07-06T06:03:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDY2OTI2Nw==", "fields": {"body": "omg .. of course that is ugly.  The purpose of dedent is to .. dedent ... it allows the string to be indented so that it follows python indentation style.\nfwiw, repr would be completely wrong, replacing the desired newline with literal \\ and n.\ntestbot_public.assertCommand(\n    textwrap.dedent('''\\\n        !new issue repository this is the title\n        first line of body\n        second line of body'\n    '''),\n    'Here you go')\nThe use of the \\ can be removed by creating wrapper as requested, such as assertMultilineCommand, because then the wrapper can do the following to remove the leading blank line\n'\\n'.join(textwrap.dedent(command).splitlines()[1:])\nAnd that can be improved to only remove the first line if it is blank.", "diff": "@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',", "created_at": "2018-07-06T14:24:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTg3NQ==", "fields": {"body": "dont use trailing \\.  especially when they are unnecessary.\nand move the !new .. string to the next line so it follows python indentation style, and split the string across multiple lines whenever there is a \\n.", "diff": "@@ -171,6 +188,14 @@ def test_create_issue_cmd(self):\n \n         testbot_public.assertCommand('!new issue coala title', 'repository that does not exist')\n \n+        # not a member of org\n+        self.mock_team.is_member.return_value = False\n+        labhub.REPOS = {'repository': self.mock_repo,\n+                        'repository.github.io': self.mock_repo}\n+        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+                                     'You need to be a member of this organization ' \\", "created_at": "2018-07-07T02:15:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkxMQ==", "fields": {"body": "never remove test logic without doing a git blame\nbfb1f9b\nIf this functionality needs to be removed to make progress, it needs to be done as a separate commit, with a separate issue, explaining the justification for the intentional regression.", "diff": "@@ -280,12 +321,6 @@ def test_assign_cmd(self):\n                               'not eligible to be assigned to this issue')\n         testbot.pop_message()\n \n-        # no assignee, newcomer, difficulty medium\n-        labhub.GH_ORG_NAME = 'not-coala'", "created_at": "2018-07-07T02:17:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkzMg==", "fields": {"body": "put this in setUp and then re-use it for each test method", "diff": "@@ -132,6 +141,12 @@ def test_create_issue_cmd(self):\n         plugins.labhub.GitHubToken = create_autospec(IGitt.GitHub.GitHubToken)\n         plugins.labhub.GitLabPrivateToken = create_autospec(IGitt.GitLab.GitLabPrivateToken)\n \n+        teams = {", "created_at": "2018-07-07T02:19:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MTU3NQ==", "fields": {"body": "accessing the same property multiple times for a FileFactory objects.", "diff": "@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files\n+  anymore.\n+- High Performance: ``FileFactory``'s properties are cached to reduce\n+  unnecessary load caused by accessing the same property for a\n+  ``FileFactory`` objects.", "created_at": "2018-07-08T14:00:27Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0NDM1Mg==", "fields": {"body": "I changed the heading to various formats and the raw mode parts is kept the same to avoid confusion.", "diff": "@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files", "created_at": "2018-07-08T15:34:10Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDAyNg==", "fields": {"body": "yes, to forcefully include it despite other rules which ignore it.", "diff": "@@ -7,5 +7,6 @@\n *.patch\n *.orig\n *.diff\n+!*/src/lib/columns.js", "created_at": "2018-07-07T11:35:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3NzE3NQ==", "fields": {"body": "No. It installs the pre-release in pypi, from January 2018.\nWe still are not ready to do pre-releases yet, with coala-utils and dependency-management still needing more work and need to be released first.", "diff": "@@ -109,12 +110,8 @@ script:\n   - py.test\n   - python setup.py bdist_wheel\n   - pip install ./dist/coala-*.whl\n-  - pip install coala-bears[alldeps] --pre -U\n-  # https://github.com/coala/coala-bears/issues/1037\n-  - >\n-    if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-      sed -i.bak '/bears = GitCommitBear/d' .coafile\n-    fi\n+  - curl -fsSL -o coala-bears.zip $BEARS_ZIP_URL/master\n+  - pip install coala-bears.zip[alldeps] --pre -U", "created_at": "2018-07-09T17:02:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA==", "fields": {"body": "Why not just 'coala' like: a bear is a set of rules used by coala or a bear is a routine used by coala to check ...", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:34:38Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw==", "fields": {"body": "@sangamcse would 'libraries' be a better replacement for 'packages' ?", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:09:08Z", "last_edited_at": null, "author": "sarthakchakerverty", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM4OTIxOQ==", "fields": {"body": "https://gitter.im/coala/coala-bears?at=5b44c27a3c5abf52b64b54b8 will solve this problem", "diff": "@@ -1,20 +1,35 @@\n-services: docker\n+dist: \"trusty\"\n+sudo: required\n+\n+matrix:\n+  include:\n+    - language: python", "created_at": "2018-07-10T15:30:17Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM5MjgzNQ==", "fields": {"body": "gitmate went nuts on #593 , so we may need to wait a bit.", "diff": "@@ -1,20 +1,35 @@\n-services: docker\n+dist: \"trusty\"\n+sudo: required\n+\n+matrix:\n+  include:\n+    - language: python", "created_at": "2018-07-10T15:40:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2ODEyNg==", "fields": {"body": "why not just declaring an optional argument bear=None? Then you don't need to pop it off from kwargs", "diff": "@@ -26,6 +26,11 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, **kwargs):\n+        self.bear = kwargs.get('bear', None)\n+        kwargs.pop('bear', None)", "created_at": "2018-07-10T19:36:33Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3MDU3MA==", "fields": {"body": "that should be\nself.message('%s = %r' % (param, section_params_dict[param] if param in section_params_dict else md.optional_params[param][2]))", "diff": "@@ -34,6 +39,19 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        md = self.bear.get_metadata()\n+        section_params_dict = md.create_params_from_section(self.bear.section)\n+        for param in md.non_optional_params:\n+            self.message('%s = %r' % (param, section_params_dict[param]))\n+        for param in md.optional_params:\n+            if param in section_params_dict:\n+                self.message('%s = %r' % (param, section_params_dict[param]))\n+            else:\n+                self.message('%s = %r' % (param,\n+                                          md.optional_params[param][2]))", "created_at": "2018-07-10T19:45:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ==", "fields": {"body": "line_length is not used\nThis example doesn't round up so nicely, SpaceConsistencyBear is similar, and what's especially weird is that you lint on message, not on file ;) Please provide a better example \ud83d\udc4d", "diff": "@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the\n+passed message contains character more than 79.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class CharCheckBear(LocalBear):\n+        def run(self, filename, file, message: str, line_length: int = 79):\n+            \"\"\"\n+            Detect if a passed string contain characters more than 79.\n+\n+            :param message:\n+                enter the message.\n+            \"\"\"\n+            if len(message)<=79:\n+                yield self.new_result(message=message, file=filename)\n+            else:\n+                yield self.new_result(message='message contains character '\n+                                              'more than 79', file=filename)", "created_at": "2018-07-10T20:04:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ==", "fields": {"body": "for your code sounds redundant, but I think it is acceptable.", "diff": "@@ -55,6 +55,16 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by coala to check your code\n+for lint issues. A group of these routines(bears) is used for defining\n+certain quality requirements in various languages. A bear can analyse code\n+for potential problems, calculate metrics and even provide corrections for\n+your code. While many of these bears for various languages are shipped along", "created_at": "2018-07-11T20:21:42Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjAzNjY4Mw==", "fields": {"body": "padding: 0", "diff": "@@ -0,0 +1,92 @@\n+.review {\n+  cursor: default;\n+  padding-top: 0;\n+  padding-right: 0;\n+  padding-bottom: 0;\n+  padding-left: 0;", "created_at": "2018-07-12T13:37:29Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5MjIyMg==", "fields": {"body": "@kriti21 , it would be helpful to indicate what features of IGitt would be useful for the VCS bears .\nOne helpful enhancement is https://gitlab.com/gitmate/open-source/IGitt/issues/111 , or similar, to convert a VCS remote string (e.g. git@github.com/...) to an object which includes identifying the hoster from the domain name in the VCS.", "diff": "@@ -0,0 +1,58 @@\n+---\n+name: \"IGitt SCM support\"\n+desc: \"Add support for git hosters in IGitt and convert coala VCS bears to\n+       use IGitt\"\n+requirements:\n+  - \"An enhancement to the coala VCS bears\"\n+  - \"An enhancement to IGitt\"\n+initiatives:\n+  - GSoC\n+collaborating_projects:\n+  - \"coala\"\n+  - \"IGitt\"\n+---\n+\n+[IGitt](https://gitlab.com/gitmate/open-source/IGitt) is a simple library\n+that allows you to access various git hosting services like GitHub, GitLab\n+and so on via one unified python interface.\n+\n+The coala bears project provides support for git and mercurial VCS but it\n+does not use IGitt. With this project, VCS in coala-bears should be\n+simplified using IGitt.\n+\n+However, there are some git hosters that are not yet supported by IGitt.\n+One such hoster is BitBucket. So it is necessary to add BitBucket support to\n+IGitt before using it to convert the VCS bears in coala-bears.\n+\n+Other git hosters like Gerrit and Phabricator are important for IGitt adoption \n+into large OSS organizations. So are some other non-git SCM, such as Fossil\n+and Launchpad. \n+\n+Support for all these git hosters should be added to IGitt.\n+\n+A recommended preparation task in addition to already mentioned requirements\n+for this project is to make an enhancement to https://github.com/guyzmo/git-repo\n+\n+#### Milestones\n+\n+##### GSOC 2018 COMMUNITY/BONDING\n+\n+* Create a cEP describing the details of how support for additional git\n+  hosters will be added to IGitt.\n+* Understand how bears for VCS are implemented in coala bears and describe\n+  details of how IGitt will be used to improve them.\n+* The participant has a merged enhancement to IGitt.\n+* The participant has completed the newcomer process.\n+\n+##### CODING PHASE 1\n+\n+* Add BitBucket (git & mecurial) support to IGitt.", "created_at": "2018-07-16T19:13:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5OTQzNQ==", "fields": {"body": "useless trailing comma.", "diff": "@@ -0,0 +1,41 @@\n+from errbot.backends.test import FullStackTest\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n+\n+import logging\n+\n+\n+class CoroboTestCase(FullStackTest):\n+\n+    def setUp(self,\n+              extra_plugin_dir=None,\n+              extra_test_file=None,\n+              loglevel=logging.DEBUG,\n+              extra_config=None,\n+              plug_filename=None,):", "created_at": "2018-07-16T19:38:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg4ODk5Mg==", "fields": {"body": "Can't changed to debug_run(self.run, *args, Debugger(bear=self), **kwargs) for python3.4 during running pytest it will throw SyntaxError SyntaxError: only named arguments may follow *expression", "diff": "@@ -319,7 +338,7 @@ def run_bear_from_section(self, args, kwargs):\n                 self.name), str(err))\n             return\n         if self.debugger:\n-            return debug_run(self.run, Debugger(), *args, **kwargs)\n+            return debug_run(self.run, Debugger(bear=self), *args, **kwargs)", "created_at": "2018-07-17T04:06:21Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgwMTI0OQ==", "fields": {"body": "I think you can remove all these args.\nThey are not being used, and unittest and pytest do not use them.", "diff": "@@ -0,0 +1,41 @@\n+from errbot.backends.test import FullStackTest\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n+\n+import logging\n+\n+\n+class CoroboTestCase(FullStackTest):\n+\n+    def setUp(self,\n+              extra_plugin_dir=None,", "created_at": "2018-07-16T19:45:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjY3NQ==", "fields": {"body": "an approach you might like to try (test on a different fork; no PR necessary) is adding a bear setting for language : Language = Unknown , which you can pass to the Formatting aspect to make it happy.\nLocalBearTestHelper is in a different repo, so it needs to be a separate PR.", "diff": "@@ -49,4 +67,6 @@ def run(self,\n                     line=line_number + 1,\n                     column=max_line_length + 1,\n                     end_line=line_number + 1,\n-                    end_column=len(line))\n+                    end_column=len(line),\n+                    aspect=Formatting('py'),", "created_at": "2018-07-17T11:31:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzE0ODE3Mg==", "fields": {"body": "@Man-Jain  don't make changes to answers/* and push your commit again. I am not sure, but this might work.", "diff": "@@ -60,9 +59,7 @@ def get_answer(question, graph, final=False):\n \n     grapheize(q_graph, q_doc, attrs={'q_type': q_type})\n     scores = Counter()\n-    found_common = False\n     for start, end in q_graph.edges():\n-        found_common = True", "created_at": "2018-07-17T19:22:02Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MDYxMQ==", "fields": {"body": "It is better to make a new AspectsTestBear instead of changing the TestBear IMO.", "diff": "@@ -1,8 +1,20 @@\n from coalib.bears.LocalBear import LocalBear\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import TrailingSpace\n \n \n-class TestBear(LocalBear):\n+class TestBear(", "created_at": "2018-07-18T12:35:13Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTI2Mw==", "fields": {"body": "why do you introduce documentation about the debugger in the commit for the profiler?", "diff": "@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.", "created_at": "2018-07-18T18:01:36Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTU0Nw==", "fields": {"body": "function name doesn't resemble what it's doing", "diff": "@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):", "created_at": "2018-07-18T18:15:13Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTczNw==", "fields": {"body": "Function name should be preceded with an underscore, I guess nobody should directly call that^^", "diff": "@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):", "created_at": "2018-07-18T18:15:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MjgzOQ==", "fields": {"body": "just checking .. these are commented because they dont work?", "diff": "@@ -0,0 +1,18 @@\n+from django.core.management.base import BaseCommand\n+\n+from data.issues import fetch_issues, import_issue\n+\n+\n+class Command(BaseCommand):\n+    help = 'Import issues opened by newcomers'\n+\n+    COLLECTIONS = staticmethod(fetch_issues)\n+    IMPORT_DATA = staticmethod(import_issue)\n+\n+    def handle(self, *args, **options):\n+        # for data in self.COLLECTIONS('github'):", "created_at": "2018-07-19T15:04:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MzI3NQ==", "fields": {"body": "this is not \"web\".  it is \"webservices\"\nand refer to the get_upstream_remote_url discussion on li-boxuan 's patch", "diff": "@@ -0,0 +1,6 @@\n+from community.git import get_org_name\n+\n+\n+def web_url():", "created_at": "2018-07-19T15:06:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2Nzc2OA==", "fields": {"body": "Up to you: Maybe we shouldn't document that, people will understand what the naming scheme means once they see a profile dump.", "diff": "@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'\n+        ' to dump the profile files, supply the path or the directory name, all'\n+        ' the bear (even implicit dependency bears) in a section will get'\n+        ' profile and there profile data will save in the specified directory'\n+        ' or the path with name format {section.name}_{bear.name}.prof.')", "created_at": "2018-07-19T20:53:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTM0NQ==", "fields": {"body": "It uses the argcomplete import at the top of the file which ensures that the test module fails loudly with a suitable error message if it is not installed, instead of the import rather silently failing and the test method being a bit confusing in how it fails.", "diff": "@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete\n+\n+    def test_argcomplete_bear_names(self):\n+        self.assertEqual(_argcomplete_bears_names(), get_all_bears_names())\n+\n+    def test_missing_argcomplete(self):\n+        if coalib.parsing.DefaultArgParser.argcomplete is not None:\n+            coalib.parsing.DefaultArgParser.argcomplete = None\n+        fake_importer = Mock(side_effect=ImportError('import missing'))\n+        with patch('builtins.__import__', new=fake_importer):\n+            default_arg_parser()\n+        self.assertFalse(coalib.parsing.DefaultArgParser.argcomplete)\n+        # Dummy usage\n+        coalib.parsing.DefaultArgParser.argcomplete = argcomplete", "created_at": "2018-07-21T00:34:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTc2OQ==", "fields": {"body": "this doesnt belong in the checked in version", "diff": "@@ -24,6 +24,7 @@ class PySafetyBearTest(LocalBearTestHelper):\n \n     def setUp(self):\n         self.uut = PySafetyBear(Section('name'), Queue())\n+        self.maxDiff = None", "created_at": "2018-07-21T00:42:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyMjc1Mw==", "fields": {"body": "If not passing a bear is an erroneous state, raise an exception while instantiating the debugger. This is easiest and will always require you to initialize the debugger properly.", "diff": "@@ -34,6 +38,21 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        if self.bear is not None:\n+            md = self.bear.get_metadata()\n+            section_params_dict = md.create_params_from_section(\n+                                  self.bear.section)\n+            for param in md.non_optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param]))\n+            for param in md.optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param] if\n+                                          param in section_params_dict else\n+                                          md.optional_params[param][2]))\n+            return 1\n+        else:\n+            self.error(\"Name 'settings' is not defined.\")", "created_at": "2018-07-20T17:53:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw==", "fields": {"body": "split on . and use the first three", "diff": "@@ -0,0 +1,18 @@\n+Name: {{ name }}\n+{# cabal cannot parse .dev version syntax #}\n+Version: {{ version[:-4] }}", "created_at": "2018-07-20T18:17:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI3ODc0OA==", "fields": {"body": "Yes, I would have to add an if condition for it to work on the empty data.\nOtherwise, we would get the error:\nTypeError: 'NoneType' object is not iterable", "diff": "@@ -0,0 +1,18 @@\n+from django.core.management.base import BaseCommand\n+\n+from data.mrs import fetch_mrs, import_mr\n+\n+\n+class Command(BaseCommand):\n+    help = 'Import mrs opened by newcomers'\n+\n+    COLLECTIONS = staticmethod(fetch_mrs)\n+    IMPORT_DATA = staticmethod(import_mr)\n+\n+    def handle(self, *args, **options):\n+        # for data in self.COLLECTIONS('github'):", "created_at": "2018-07-23T04:18:26Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI4MDAyMg==", "fields": {"body": "But I think it would be good to left it commented because the data at https://webservices.coala.io/mrs/gitlab/all is not empty, when we go to that url, it just keeps loading, which lead to our import command hanging for a while.\nI will un-comment these when we get some data from the webservices.", "diff": "@@ -0,0 +1,18 @@\n+from django.core.management.base import BaseCommand\n+\n+from data.mrs import fetch_mrs, import_mr\n+\n+\n+class Command(BaseCommand):\n+    help = 'Import mrs opened by newcomers'\n+\n+    COLLECTIONS = staticmethod(fetch_mrs)\n+    IMPORT_DATA = staticmethod(import_mr)\n+\n+    def handle(self, *args, **options):\n+        # for data in self.COLLECTIONS('github'):", "created_at": "2018-07-23T04:34:09Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ==", "fields": {"body": "You have all your code wrapped in an if statement, though, so none of the code will be run if REPOSITORIES is undefined, right?", "diff": "@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {", "created_at": "2018-07-23T06:43:09Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjYzNQ==", "fields": {"body": "No , advisory is additional detail", "diff": "@@ -39,9 +40,9 @@ def test_with_cve_vulnerability(self):\n             self.uut,\n             file_contents,\n             [Result.from_values('PySafetyBear',\n-                                'bottle<0.12.10 is vulnerable '\n-                                'to CVE-2016-9964 and your project '", "created_at": "2018-07-21T09:09:10Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTgzNQ==", "fields": {"body": "Keep it as it was, uncommented. Sorry if i was confusing.\nUse pragma nocover for now.", "diff": "@@ -11,21 +12,34 @@\n from coalib.settings.Setting import typed_list\n \n \n-def cve_key_checker(vulnerability):\n-    if 'cve' in vulnerability.data:\n-        if vulnerability.data['cve'] is None:\n-            return None\n-        else:\n-            return True\n-    else:\n-        return None\n+# It was for old versions of safety and those versions will be allow in future.\n+# def cve_key_checker(vulnerability):", "created_at": "2018-07-21T14:12:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTk4Mw==", "fields": {"body": "See other bears (inc CheckstyleBear ) for the type to use for paths", "diff": "@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,", "created_at": "2018-07-21T14:19:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTAyOA==", "fields": {"body": "Reorder class definition as SpammingAlert(DefaultConfigMixin, BotPlugin) and you can eliminate the get_configuration_template overriding completely.", "diff": "@@ -3,32 +3,28 @@\n from errbot import BotPlugin\n from errbot.templating import tenv\n \n-from plugins import constants\n+from utils.mixin import DefaultConfigMixin\n \n \n-class SpammingAlert(BotPlugin):\n+class SpammingAlert(BotPlugin, DefaultConfigMixin):\n     \"\"\"\n     A plugin which alerts the user that they might be spamming.\n     \"\"\"\n \n-    CONFIG_TEMPLATE = {\n-        'MAX_MSG_LEN': constants.MAX_MSG_LEN,\n-        'MAX_LINES': constants.MAX_LINES\n-    }\n-\n     def get_configuration_template(self):", "created_at": "2018-07-21T19:10:45Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTQwNg==", "fields": {"body": "create a configure method that does something like:\ndef configure(self, config):\n  new = self.bot_config.DEFAULT_CONFIG[self.name]\n  for key, value in config:\n    new[key] = value\n  self.config = new", "diff": "@@ -0,0 +1,18 @@\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):\n+            return self.bot_config.DEFAULT_CONFIG[self.name]\n+\n+    def __init__(self, bot, name=None):\n+        super().__init__(bot, name=name)\n+        default_config = self._default_config\n+        if default_config and not self.config:\n+            super().configure(default_config)\n+\n+    def get_configuration_template(self):\n+        default_config = self._default_config\n+        if default_config:\n+            return default_config", "created_at": "2018-07-21T19:27:01Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2Mw==", "fields": {"body": "josn", "diff": "@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'", "created_at": "2018-07-22T04:06:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzQwOA==", "fields": {"body": "put these in module level global _private variables so that people can access them easily if they need to.", "diff": "@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'", "created_at": "2018-07-22T04:09:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTgyNA==", "fields": {"body": "You don't need to change this to let since you still could do push. Also, uppercase words in a variable name must be use const.", "diff": "@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [", "created_at": "2018-07-22T10:51:25Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTk3Ng==", "fields": {"body": "Give a single whitespace after warning:.", "diff": "@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {\n+    const repoOwner = repos.split(':')[0];\n+    const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+    SAMPLE_REPOS.push({\n+      repoOwner, repoNames\n+    });\n+  };\n+} catch (error) {\n+  console.log('warning:', error);", "created_at": "2018-07-22T10:56:10Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDM5MQ==", "fields": {"body": "a count comparson sounds good.", "diff": "@@ -422,3 +424,38 @@ def test_get_all_bears_names(self):\n                  'TestDepBearAA',\n                  'AspectTestBear',\n                  'TestDepBearDependsAAndAA'})\n+\n+    def test_get_all_languages(self):\n+        with bear_test_module():\n+            languages = get_all_languages()\n+            assert isinstance(languages, tuple)\n+            self.assertSetEqual(\n+                {str(language) for language in languages},\n+                {'C',\n+                 'C#',\n+                 'CPP',\n+                 'CSS',\n+                 'Fortran',\n+                 'Golang',\n+                 'Hypertext Markup Language 2.0, 3.2, 4.0, 4.1, 5, 5.1',\n+                 'Java',\n+                 'JavaScript',\n+                 'JavaServer Pages',\n+                 'Jinja2',\n+                 'Markdown',\n+                 'Matlab',\n+                 'ObjectiveC',\n+                 'PHP',\n+                 'PLSQL',\n+                 'PowerShell',\n+                 'Python 2.7, 3.3, 3.4, 3.5, 3.6',\n+                 'Ruby',\n+                 'Scala',\n+                 'Shell',\n+                 'Swift',\n+                 'Tcl',\n+                 'TypeScript',\n+                 'Unknown',\n+                 'Vala',\n+                 'VisualBasic',\n+                 'm4'})", "created_at": "2018-07-23T09:55:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1MDg2OQ==", "fields": {"body": "This would be the correct sorted order\nTEST_BEAR_NAME_REPRS = [\n    \"<class 'AspectTestBear.AspectTestBear'>\",\n    \"<class 'DependentBear.DependentBear'>\",\n    \"<EchoBear linter class (wrapping 'echo')>\",\n    \"<ErrorTestBear linter class (wrapping 'I_do_not_exist')>\",\n    \"<class 'JavaTestBear.JavaTestBear'>\",\n    \"<class 'LineCountTestBear.LineCountTestBear'>\",\n    \"<class 'RaiseTestBear.RaiseTestBear'>\",\n    \"<class 'SpaceConsistencyTestBear.SpaceConsistencyTestBear'>\",\n    \"<class 'TestBear.TestBear'>\",\n    \"<class 'TestBearDep.TestDepBearA'>\",\n    \"<class 'TestBearDep.TestDepBearAA'>\",\n    \"<class 'TestBearDep.TestDepBearBDependsA'>\",\n    \"<class 'TestBearDep.TestDepBearCDependsB'>\",\n    \"<class 'TestBearDep.TestDepBearDependsAAndAA'>\"\n]", "diff": "@@ -5,16 +5,35 @@\n \n from coala_utils.ContextManagers import retrieve_stdout, retrieve_stderr\n \n-TEST_BEARS_COUNT = 14\n+# This list is sorted alphabetically\n+TEST_BEAR_NAMES = (\n+    'AspectTestBear',\n+    'DependentBear',\n+    'EchoBear',\n+    'ErrorTestBear',\n+    'JavaTestBear',\n+    'LineCountTestBear',\n+    'RaiseTestBear',\n+    'SpaceConsistencyTestBear',\n+    'TestBear',\n+    'TestDepBearA',\n+    'TestDepBearAA',\n+    'TestDepBearBDependsA',\n+    'TestDepBearCDependsB',\n+    'TestDepBearDependsAAndAA',\n+)\n+\n+TEST_BEARS_COUNT = len(TEST_BEAR_NAMES)\n \n # This list is sorted by filename of the bears, then name within the modules\n-TEST_BEAR_NAMES = [\n+TEST_BEAR_NAME_REPRS = [", "created_at": "2018-07-23T10:20:16Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw==", "fields": {"body": "Check for the type instead, typeof REPOSITORIES !== 'undefined'", "diff": "@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {", "created_at": "2018-07-23T12:09:47Z", "last_edited_at": "2018-07-23T12:10:31Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMDQyMg==", "fields": {"body": "I see, I'll keep it here for now else the tests won't pass. Would rebase as soon as you get the issue solved \ud83d\udc4d", "diff": "@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={", "created_at": "2018-07-23T09:07:09Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTIwNw==", "fields": {"body": "It is ready", "diff": "@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={", "created_at": "2018-07-23T17:45:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDk2NDUyMw==", "fields": {"body": "So, if we get a list, we assert it has more than one member", "diff": "@@ -51,5 +51,7 @@ def get_data(for_what):\n             except Exception as ex:\n                 logger.error(ex)\n                 break\n+        if type(data) is not list:\n+            data = [data]", "created_at": "2018-07-25T02:18:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjE1Ng==", "fields": {"body": "shouldn't be there another newline here? Not sure if RST requires that", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to\n+optimize its performance.\n+\n+The profiler will start by profiling the run() method of bears because it\n+consumes most of the bears time. So, this is part where bear writer will spend\n+time, as rest of the part like loading the files, collecting the settings,\n+etc. are done by coala itself.\n+\n+.. note::", "created_at": "2018-07-26T09:05:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM5OTAwOA==", "fields": {"body": "Why not assert the instances of all three bears.", "diff": "@@ -470,9 +470,9 @@ def test_get_filtered_bears(self):\n         local_bears['cli'] = _sort_bears(local_bears['cli'])\n         global_bears['cli'] = _sort_bears(global_bears['cli'])\n \n-        self.assertEqual(len(local_bears['cli']), 2)\n-        self.assertEqual(str(local_bears['cli'][0]),\n-                         \"<class 'JavaTestBear.JavaTestBear'>\")\n+        self.assertEqual(len(local_bears['cli']), 3)\n         self.assertEqual(str(local_bears['cli'][1]),", "created_at": "2018-07-26T09:59:01Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMyNjIxNA==", "fields": {"body": "This needs a comment, and you need to add an assert to verify the contents of the dict is what you expect: a single record.", "diff": "@@ -5,8 +5,14 @@\n \n \n def get_affiliated_committers_data(json_object):\n+    \"\"\"\n+    :param json_object: json data of affiliated committers\n+    :return: a list of affiliated committers dict\n+    \"\"\"\n     data = json_object['response']['result'\n                                    ]['affiliated_committers']['affiliator']\n+    if isinstance(data, dict):", "created_at": "2018-07-26T04:06:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMyNzAxOQ==", "fields": {"body": "Dump these files into a github repo which looks like the webservices API , and use rawgit as discussed in meeting.", "diff": "@@ -0,0 +1,89 @@\n+import logging\n+\n+import requests\n+\n+from data.models import (\n+    Issue,\n+    Label,\n+    )\n+from data.newcomers import get_newcomers\n+from data.models import Contributor\n+from data.webservices import webservices_url\n+# from community.git import get_org_name\n+\n+\n+def fetch_issues(hoster):\n+    \"\"\"\n+    Get issues opened by newcomers\n+\n+    :param hoster: a string representing hoster, e.g. 'github'\n+    :return: a json of issues data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    hoster = hoster.lower()\n+    if hoster == 'github':\n+        IMPORT_URL = webservices_url() + 'issues/github/all'\n+    elif hoster == 'gitlab':\n+        IMPORT_URL = webservices_url() + 'issues/gitlab/all'\n+\n+    # Only a test hoster for testing, it will be removed when we\n+    # will get data from the other hosters\n+    elif hoster == 'test':\n+        IMPORT_URL = 'https://pastebin.com/raw/GDMvzGjc'", "created_at": "2018-07-26T04:12:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2ODEzNA==", "fields": {"body": "Usage of the--devoption is deprecated. Use--only=devinstead.\nc.f. https://travis-ci.org/coala/gh-board/jobs/408440200#L458", "diff": "@@ -26,6 +26,12 @@ before_script:\n   - sh -e /etc/init.d/xvfb start\n   - sleep 3 # give xvfb some time to start\n \n+before_install:\n+  - npm install --no-save --no-optional --dev npm@5.8.0", "created_at": "2018-07-26T14:00:59Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczMjE2Nw==", "fields": {"body": "Just noting that when I run eslint with airbnb on the new files of this PR (not issue-store.js)...\nnpx install-peerdeps --dev eslint-config-airbnb\n..\n./node_modules/.bin/eslint script/queries/export.js script/queries/github_issue_info.js script/queries/github_label_info.js script/queries/github_pr_info.js script/queries/github_reaction_info.js src/github-client.js src/github-graphql.js\n\n\u2716 119 problems (114 errors, 5 warnings)\n  88 errors, 0 warnings potentially fixable with the `--fix` option.\n\ne.g.\nsrc/github-graphql.js:\n   2:1   error  Dependency cycle detected  import/no-cycle\n  15:26  error  Missing trailing comma     comma-dangle\n  22:5   error  Unary operator '++' used   no-plusplus", "diff": "@@ -0,0 +1,26 @@\n+import GraphQLClientBase from './github-graphql-base';\n+import Client from './github-client';\n+\n+// global event id\n+let EVENT_ID = 0;\n+\n+class GraphQLClient extends GraphQLClientBase {\n+  _updateRateLimit(rateLimit) {\n+    this.remaining = rateLimit.remaining;\n+    this.limit = rateLimit.limit;\n+    this.resetAt = rateLimit.resetAt;\n+    const emitterRate = {\n+      remaining: this.remaining,\n+      limit: this.limit,\n+      reset: this.resetAt\n+    };\n+    // to match Restful API style\n+    const responseStatus = 200;\n+    // config = {method, path, data, options}\n+    const config = null;\n+    Client.emit('end', EVENT_ID, config, responseStatus, emitterRate);\n+    EVENT_ID++;", "created_at": "2018-07-27T10:28:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NDM5NA==", "fields": {"body": "Sounds like a good idea,.\nhttps://gitlab.com/coala/mobans/issues/74", "diff": "@@ -1,5 +1,10 @@\n-from pytest_reqs import check_requirements\n+# Allow import to fail to avoid annoying developers\n+try:\n+    from pytest_reqs import check_requirements\n+except ImportError:", "created_at": "2018-07-28T14:08:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDc2MA==", "fields": {"body": "the helper would take an argument obviously for the setting name.\nIf necessary, create two helpers.\nAt the moment these are gibberish logic which I am assuming is similar because it isnt python code which is readable and intuitive.", "diff": "@@ -301,7 +302,12 @@ def __init__(self,\n         self.section = section\n         self.message_queue = message_queue\n         self.timeout = timeout\n-        self.debugger = debugger\n+        self.debugger = (False if 'debug_bears' not in section or (", "created_at": "2018-07-29T04:57:06Z", "last_edited_at": "2018-07-29T04:57:24Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIzOQ==", "fields": {"body": "Extract this fom webpack conf\n\n  \n    \n      gh-board/webpack.config.js\n    \n    \n        Lines 29 to 38\n      in\n      3c8b0e5\n    \n    \n    \n    \n\n        \n          \n           options: { \n        \n\n        \n          \n             presets: [ \n        \n\n        \n          \n               'react', \n        \n\n        \n          \n               'env' \n        \n\n        \n          \n             ], \n        \n\n        \n          \n             plugins: [ \n        \n\n        \n          \n               'react-require', \n        \n\n        \n          \n               'transform-object-rest-spread', \n        \n\n        \n          \n               'transform-class-properties' \n        \n\n        \n          \n             ], \n        \n    \n  \n\n\nbabel-loader will also read from .babelrc if it exists.", "diff": "@@ -0,0 +1,3 @@\n+{\n+  \"presets\": [\"es2015\", \"react\"]", "created_at": "2018-07-29T05:26:58Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTM3NA==", "fields": {"body": "get_contrib_data() is called and does some work ... then you delete it by not storing it in a variable!!", "diff": "@@ -10,5 +10,6 @@ class Command(BaseCommand):\n     IMPORT_DATA = staticmethod(import_data)\n \n     def handle(self, *args, **options):\n-        for contributor in self.CONTRIBUTORS():\n-            self.IMPORT_DATA(contributor)\n+        if get_contrib_data():", "created_at": "2018-07-28T03:39:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTQzNQ==", "fields": {"body": "The point was you are calling self.CONTRIBUTORS() twice.\nIt does work.\nDont waste precious computation time by doing it twice.", "diff": "@@ -10,5 +10,6 @@ class Command(BaseCommand):\n     IMPORT_DATA = staticmethod(import_data)\n \n     def handle(self, *args, **options):\n-        for contributor in self.CONTRIBUTORS():\n-            self.IMPORT_DATA(contributor)\n+        if self.CONTRIBUTORS():", "created_at": "2018-07-28T03:41:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NTE1MDE2", "fields": {"body": "\"for setting up an environment\" -> \"to learn how to setup an environment\"\n(suggestion)", "diff": "@@ -62,7 +62,9 @@ Step 0. Run coala\n As a preparation of joining the community you should find out what this project\n is about - if you didn't do this already. We highly recommend you\n `install coala <https://coala.io/install>`_ and use it on at least one of your\n-projects.\n+projects. Also, we recommend that you read\n+`Development Setup Notes <https://api.coala.io/en/latest/Developers/Development_Setup.html>`\n+for setting up an environment to work on coala.", "created_at": "2017-01-04T00:56:44Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NTMyMzk5", "fields": {"body": "@nemaniarjun if I do that I mean if I use \"\" everywhere then Gitmate will mark it as wrong... I did that before but changed it after gitmate's warning...\nsee #1236 (review)\nCC @sils", "diff": "@@ -185,3 +185,32 @@ def test_keyword_between_code(self):\n                              '+/*\\n'\n                              ' test\\n'\n                              ' */\\n')\n+\n+    def test_keyword_regex(self):\n+        text = ['# add two given values and result the result\\n',\n+                'def add(a, b):',\n+                '    return a+b\\n',\n+                '               \\n',\n+                'print(add(2, 3))\\n']\n+\n+        regex_keyword = 'r.s.l.'\n+\n+        with execute_bear(self.uut, filename='F', file=text,\n+                          regex_keyword=regex_keyword,\n+                          dependency_results=self.dep_results) as result:\n+            self.assertEqual(result[0].message, 'The line contains the keyword'\n+                                                \" 'result' which resulted in a\"", "created_at": "2017-01-04T05:50:35Z", "last_edited_at": "2017-01-04T05:54:32Z", "author": "dracarys09", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NzI1ODMy", "fields": {"body": "we should write this editor! :)", "diff": "@@ -216,6 +217,22 @@ def test_open_files_at_position_no_position(self):\n                 stdout=subprocess.PIPE\n             )\n \n+    def test_unknown_editor_warning(self):\n+        logger = logging.getLogger()\n+        uut = OpenEditorAction()\n+        result_mock = Result.from_values(\n+            'test', '', self.fa, line=None, column=None,\n+        )\n+        with unittest.mock.patch('subprocess.call'):\n+            with self.assertLogs(logger, 'WARNING') as log:\n+                uut.apply(result_mock, {self.fa: ''}, {}, editor='gouda-edit')\n+\n+                self.assertEqual(1, len(log.output))\n+                self.assertIn(\n+                    'The editor \"gouda-edit\" is unknown to coala.',", "created_at": "2017-01-05T07:59:36Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0ODIzNDA5", "fields": {"body": "not only the argument, also the whole function is deprecated so you don't need the if and the message needs changing", "diff": "@@ -438,9 +439,16 @@ def change_line(self, line_nr, original_line, replacement):\n                                                replacement)\n             replacement = ''.join((orig_diff + new_diff).modified)\n \n-        linediff.change = (original_line, replacement)\n+        linediff.change = (self._file[line_nr-1], replacement)\n         self._changes[line_nr] = linediff\n \n+    def change_line(self, line_nr, original_line, replacement):\n+        # Use of original_line arg is deprecated\n+        if original_line:\n+            logging.warning('Use of orginal_line argument is deprecated. '\n+                            'It is not required to provide that argument')", "created_at": "2017-01-05T18:29:36Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDg0NDY4", "fields": {"body": "IMO Yes, it will make it much clearer.", "diff": "@@ -54,14 +54,15 @@ There are two kinds of bears:\n - LocalBears, which only perform analysis on each file itself\n - GlobalBears, which are project wide, like the GitCommitBear\n \n-Let's find out what bears are available for C:\n+Let's find out what bears are available for C and Python:\n \n ::\n \n-    coala --show-bears --filter-by-language C\n+    coala --show-bears --filter-by-language C Python\n \n-coala now lists all bears that can operate on C code. You can specify the\n-kind of analysis with the ``--bears`` argument:\n+coala now lists all bears that can operate on C or Python code.\n+Note that here you can give space separated language names as muliple\n+arguments. You can specify the kind of analysis with the ``--bears`` argument:", "created_at": "2017-01-08T17:36:38Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MjI0MzY4", "fields": {"body": "No, its not.", "diff": "@@ -0,0 +1,84 @@\n+def configure_logging():\n+    \"\"\"\n+    Configures the logging with hard coded dictionary.\n+    \"\"\"\n+    import sys\n+    import logging.config\n+\n+    logging.config.dictConfig({\n+        'version': 1,\n+        'handlers': {\n+            'colored': {\n+                'class': 'logging.StreamHandler',\n+                'formatter': 'colored',\n+                'stream': sys.stderr\n+            }\n+        },\n+        'root': {\n+            'level': 'DEBUG',\n+            'handlers': ['colored']\n+        },\n+        'formatters': {\n+            'colored': {\n+                '()': 'colorlog.ColoredFormatter',\n+                'format': '%(log_color)s[%(levelname)s]%(reset)s[%(asctime)s]'\n+                          ' %(message)s',\n+                'datefmt': '%X',\n+                'log_colors': {\n+                    'ERROR': 'red',\n+                    'WARNING': 'yellow',\n+                    'INFO': 'blue',\n+                    'DEBUG': 'green'\n+                }\n+            }\n+        }\n+    })\n+\n+\n+def configure_json_logging():\n+    \"\"\"\n+    Configures logging as a JSON objects.\n+    Returns a StringIO() that captures the logs as json.\n+    \"\"\"\n+    import logging.config\n+    import io\n+\n+    stream = io.StringIO()\n+\n+    logging.config.dictConfig({\n+        'version': 1,\n+        'handlers': {\n+            'json': {\n+                'class': 'logging.StreamHandler',\n+                'formatter': 'json',\n+                'stream': stream\n+            }\n+        },\n+        'root': {\n+            'level': 'DEBUG',\n+            'handlers': ['json']\n+        },\n+        'formatters': {\n+            'json': {\n+                '()': 'logging.Formatter',\n+                'format': '{ \"message\": \"%(message)s\",'\n+                          ' \"level\": \"%(levelname)s\",'\n+                          ' \"time\": \"%(asctime)s\" }|',\n+                'datefmt': '%X',\n+            }\n+        }\n+    })\n+    return stream\n+\n+\n+def parse_json_log(stream):\n+    \"\"\"\n+    Parses A Stream of JSON Handler\n+    Returns a list of JSON object for logs\n+    \"\"\"\n+    import json\n+\n+    logs = list(map(str.strip, stream.getvalue().split('|')))\n+    logs = [json.loads(log, strict=False) for log in logs if log]\n+\n+    return logs", "created_at": "2017-01-09T19:11:06Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDU4OTg2", "fields": {"body": "Please use the width property, so that if in the future we want to update the width again, we don't have to upload another image.\nThanks.", "diff": "@@ -179,7 +179,7 @@ You can find a quick demo of coala here:\n \n |asciicast|\n \n-.. |asciicast| image:: https://asciinema.org/a/42968.png\n+.. |asciicast| image:: http://i.imgur.com/rLasBoQ.png\n    :target: https://asciinema.org/a/42968?autoplay=1\n    :width: 100%", "created_at": "2017-01-10T21:17:30Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NTA1Nzk5", "fields": {"body": "ok, I have submitted a PR for that https://gitlab.com/coala/package_manager/merge_requests/10", "diff": "@@ -0,0 +1,53 @@\n+import os\n+import yaml\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from dependency_management.requirements.GemRequirement import GemRequirement\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from sarge import run, Capture\n+\n+\n+class ImageDimensionBear(GlobalBear):\n+    \"\"\"\n+    Checks the dimension of an image.\n+\n+    More information is available at <github.com/Abhi2424shek/img_checker>\n+    \"\"\"\n+\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    REQUIREMENTS = {GemRequirement(' img_checker'),", "created_at": "2017-01-11T03:18:34Z", "last_edited_at": null, "author": "rhemon", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NjgwNzQ1", "fields": {"body": "better to say get immediate dependants.", "diff": "@@ -0,0 +1,330 @@\n+from itertools import chain\n+\n+from coalib.core.Graphs import traverse_graph\n+\n+\n+class DependencyTracker:\n+    \"\"\"\n+    A ``DependencyTracker`` allows to register and manage dependencies between\n+    objects.\n+\n+    This class uses a directed graph to track relations.\n+\n+    Add a dependency relation between two objects:\n+\n+    >>> object1 = object()\n+    >>> object2 = object()\n+    >>> tracker = DependencyTracker()\n+    >>> tracker.add(object2, object1)\n+\n+    This would define that ``object1`` is dependent from ``object2``.\n+\n+    If you define that ``object2`` has its dependency duty fulfilled, you can\n+    resolve it:\n+\n+    >>> resolved = tracker.resolve(object2)\n+    >>> resolved  # +ELLIPSIS\n+    {<object object at ...>}\n+    >>> resolved_object = resolved.pop()\n+    >>> resolved_object is object1\n+    True\n+\n+    This returns all objects that are now freed, meaning they have no\n+    dependencies any more.\n+\n+    >>> object3 = object()\n+    >>> tracker.add(object2, object1)\n+    >>> tracker.add(object3, object1)\n+    >>> tracker.resolve(object2)\n+    set()\n+    >>> tracker.resolve(object3)\n+    {<object object at ...>}\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._dependency_dict = {}\n+\n+    def get_dependants(self, dependency):\n+        \"\"\"\n+        Returns all dependants for the given dependency.", "created_at": "2017-01-11T21:54:18Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1Njk5MzQ1", "fields": {"body": "works, good catch :D \ud83d\udcaf", "diff": "@@ -0,0 +1,67 @@\n+from coalib.core.CircularDependencyError import CircularDependencyError\n+\n+\n+def traverse_graph(start_nodes, get_successive_nodes,\n+                   run_on_edge=lambda prev, nxt: None):\n+    \"\"\"\n+    Traverses all edges of a directed acyclic graph once. Detects cyclic graphs\n+    by raising a ``CircularDependencyError``.\n+\n+    >>> graph = {1: [2], 2: [3, 4], 5: [3], 3: [6]}\n+    >>> def get_successive_nodes(node):\n+    ...     return graph.get(node, [])\n+    >>> edges = set()\n+    >>> def append_to_edges(prev, nxt):\n+    ...     edges.add((prev, nxt))\n+    >>> traverse_graph([1, 5], get_successive_nodes, append_to_edges)\n+    >>> sorted(edges)\n+    [(1, 2), (2, 3), (2, 4), (3, 6), (5, 3)]\n+\n+    You can also use this function to detect cyclic graphs:\n+\n+    >>> graph = {1: [2], 2: [3], 3: [1]}\n+    >>> traverse_graph([1], get_successive_nodes)\n+    Traceback (most recent call last):\n+     ...\n+    coalib.core.CircularDependencyError.CircularDependencyError: ...\n+\n+    :param start_nodes:\n+        The nodes where to start traversing the graph.\n+    :param get_successive_nodes:\n+        A callable that takes in a node and returns an iterable of nodes to\n+        traverse next.\n+    :param run_on_edge:\n+        A callable that is run on each edge during traversing. Takes in two\n+        parameters, the previous- and next-node which form an edge. The default\n+        is an empty function.\n+    :raises CircularDependencyError:\n+        Raised when the graph is cyclic.\n+    \"\"\"\n+    path = set()\n+    visited_nodes = set()\n+\n+    def visit(node):", "created_at": "2017-01-11T23:50:15Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NzY5Nzk4", "fields": {"body": "Wouldn't it be better to have all requirements checked at once rather than breaking out at every uninstalled requirement.", "diff": "@@ -0,0 +1,469 @@\n+from functools import partial\n+import logging\n+from os import makedirs\n+from os.path import join, abspath, exists\n+from shutil import copyfileobj\n+from urllib.request import urlopen\n+\n+from appdirs import user_data_dir\n+\n+from coala_utils.decorators import (enforce_signature, classproperty,\n+                                    get_public_members)\n+\n+from dependency_management.requirements.PackageRequirement import (\n+    PackageRequirement)\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+from coalib.results.Result import Result\n+from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.FunctionMetadata import FunctionMetadata\n+from coalib.settings.Section import Section\n+\n+\n+class Bear:\n+    \"\"\"\n+    A bear contains the actual subroutine that is responsible for checking\n+    source code for certain specifications. However, it can actually do\n+    whatever it wants with the files it gets.\n+\n+    This is the base class for every bear. If you want to write a bear, you\n+    will probably want to look at the ``ProjectBear`` and ``FileBear`` classes\n+    that inherit from this class.\n+\n+    To indicate which languages your bear supports, just give it the\n+    ``LANGUAGES`` value which should be a set of string(s):\n+\n+    >>> class SomeBear(Bear):\n+    ...     LANGUAGES = {'C', 'CPP', 'C#', 'D'}\n+\n+    To indicate the requirements of the bear, assign ``REQUIREMENTS`` a set\n+    with instances of ``PackageRequirements``.\n+\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {\n+    ...         PackageRequirement('pip', 'coala_decorators', '0.2.1')}\n+\n+    If your bear uses requirements from a manager we have a subclass from,\n+    you can use the subclass, such as ``PipRequirement``, without specifying\n+    manager:\n+\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {PipRequirement('coala_decorators', '0.2.1')}\n+\n+    To specify additional attributes to your bear, use the following:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    ...     MAINTAINERS = {'Catelyn Stark'}\n+    ...     MAINTAINERS_EMAILS = {'catelyn_stark@gmail.com'}\n+    ...     LICENSE = 'AGPL-3.0'\n+    ...     ASCIINEMA_URL = 'https://asciinema.org/a/80761'\n+\n+    If the maintainers are the same as the authors, they can be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    >>> SomeBear.maintainers\n+    {'Jon Snow'}\n+    >>> SomeBear.maintainers_emails\n+    {'jon_snow@gmail.com'}\n+\n+    If your bear needs to include local files, then specify it giving strings\n+    containing relative file paths to the INCLUDE_LOCAL_FILES set:\n+\n+    >>> class SomeBear(Bear):\n+    ...     INCLUDE_LOCAL_FILES = {'checkstyle.jar', 'google_checks.xml'}\n+\n+    To keep track easier of what a bear can do, simply tell it to the\n+    ``CAN_FIX`` and the ``CAN_DETECT`` sets. Possible values are:\n+\n+    >>> CAN_DETECT = {'Syntax', 'Formatting', 'Security', 'Complexity',\n+    ... 'Smell', 'Unused Code', 'Redundancy', 'Variable Misuse', 'Spelling',\n+    ... 'Memory Leak', 'Documentation', 'Duplication', 'Commented Code',\n+    ... 'Grammar', 'Missing Import', 'Unreachable Code', 'Undefined Element',\n+    ... 'Code Simplification'}\n+    >>> CAN_FIX = {'Syntax', ...}\n+\n+    Specifying something to ``CAN_FIX`` makes it obvious that it can be\n+    detected too, so it may be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     CAN_DETECT = {'Syntax', 'Security'}\n+    ...     CAN_FIX = {'Redundancy'}\n+    >>> list(sorted(SomeBear.can_detect))\n+    ['Redundancy', 'Security', 'Syntax']\n+\n+    Every bear has a data directory which is unique to that particular bear:\n+\n+    >>> class SomeBear(Bear): pass\n+    >>> class SomeOtherBear(Bear): pass\n+    >>> SomeBear.data_dir == SomeOtherBear.data_dir\n+    False\n+\n+    A bear can be dependant from other bears. ``BEAR_DEPS`` contains bear\n+    classes that are to be executed before this bear gets executed. The results\n+    of these bears will then be passed inside ``self.dependency_results`` as a\n+    dict. The dict will have the name of the bear as key and a list of its\n+    results as values:\n+\n+    >>> class SomeBear(Bear): pass\n+    >>> class SomeOtherBear(Bear):\n+    ...     BEAR_DEPS = {SomeBear}\n+    >>> SomeOtherBear.BEAR_DEPS\n+    {<class 'coalib.core.Bear.SomeBear'>}\n+    \"\"\"\n+\n+    LANGUAGES = set()\n+    REQUIREMENTS = set()\n+    AUTHORS = set()\n+    AUTHORS_EMAILS = set()\n+    MAINTAINERS = set()\n+    MAINTAINERS_EMAILS = set()\n+    PLATFORMS = {'any'}\n+    LICENSE = ''\n+    INCLUDE_LOCAL_FILES = set()\n+    CAN_DETECT = set()\n+    CAN_FIX = set()\n+    ASCIINEMA_URL = ''\n+    BEAR_DEPS = set()\n+\n+    @classproperty\n+    def name(cls):\n+        \"\"\"\n+        :return:\n+            The name of the bear.\n+        \"\"\"\n+        return cls.__name__\n+\n+    @classproperty\n+    def can_detect(cls):\n+        \"\"\"\n+        :return:\n+            A set that contains everything a bear can detect, including\n+            information from what it can fix too.\n+        \"\"\"\n+        return cls.CAN_DETECT | cls.CAN_FIX\n+\n+    @classproperty\n+    def maintainers(cls):\n+        \"\"\"\n+        :return:\n+            A set containing ``MAINTAINERS`` if specified, else takes\n+            ``AUTHORS`` by default.\n+        \"\"\"\n+        return cls.AUTHORS if cls.MAINTAINERS == set() else cls.MAINTAINERS\n+\n+    @classproperty\n+    def maintainers_emails(cls):\n+        \"\"\"\n+        :return:\n+            A set containing ``MAINTAINERS_EMAILS`` if specified, else takes\n+            ``AUTHORS_EMAILS`` by default.\n+        \"\"\"\n+        return (cls.AUTHORS_EMAILS if cls.MAINTAINERS_EMAILS == set()\n+                else cls.MAINTAINERS)\n+\n+    @enforce_signature\n+    def __init__(self, section: Section, file_dict: dict):\n+        \"\"\"\n+        Constructs a new bear.\n+\n+        :param section:\n+            The section object where bear settings are contained.\n+        :param file_dict:\n+            The file-dictionary containing a mapping of filenames to the\n+            according file contents.\n+        :raises RuntimeError:\n+            Raised when bear requirements are not fulfilled.\n+        \"\"\"\n+        self.section = section\n+        self.file_dict = file_dict\n+\n+        self._dependency_results = {}\n+\n+        self.setup_dependencies()\n+        cp = type(self).check_prerequisites()\n+        if cp is not True:\n+            error_string = ('The bear ' + self.name +\n+                            ' does not fulfill all requirements.')\n+            if cp is not False:\n+                error_string += ' ' + cp\n+\n+            raise RuntimeError(error_string)\n+\n+    def reset_dependency_results(self):\n+        \"\"\"\n+        Resets all dependency results for this bear.\n+\n+        >>> section = Section('my-section')\n+        >>> file_dict = {'file1.txt': ['']}\n+        >>> bear = Bear(section, file_dict)\n+        >>> dependency_bear = Bear(section, file_dict)\n+        >>> bear.add_dependency_results(dependency_bear, [1, 2, 3])\n+        >>> bear.dependency_results\n+        {<class 'coalib.core.Bear.Bear'>: [1, 2, 3]}\n+        >>> bear.reset_dependency_results()\n+        >>> bear.dependency_results\n+        {}\n+        \"\"\"\n+        self._dependency_results = {}\n+\n+    def add_dependency_results(self, bear, dependency_results):\n+        \"\"\"\n+        Adds dependency results to this instance.\n+\n+        This function is used by the core to add dependency results as they\n+        are ready.\n+\n+        >>> section = Section('my-section')\n+        >>> file_dict = {'file1.txt': ['']}\n+        >>> bear = Bear(section, file_dict)\n+        >>> bear.dependency_results\n+        {}\n+        >>> dependency_bear = Bear(section, file_dict)\n+        >>> bear.add_dependency_results(dependency_bear, [1, 2, 3])\n+        >>> bear.dependency_results\n+        {<class 'coalib.core.Bear.Bear'>: [1, 2, 3]}\n+\n+        :param bear:\n+            The bear instance to add results for.\n+        :param dependency_results:\n+            The results to add.\n+        \"\"\"\n+        bear_type = type(bear)\n+\n+        if bear_type not in self._dependency_results:\n+            current_results = []\n+            self._dependency_results[bear_type] = current_results\n+        else:\n+            current_results = self._dependency_results[bear_type]\n+\n+        current_results += dependency_results\n+\n+    @property\n+    def dependency_results(self):\n+        \"\"\"\n+        Contains all dependency results.\n+\n+        This variable gets set during bear execution from the core and can be\n+        used from ``analyze``.\n+\n+        Modifications to the returned dictionary lead to undefined behaviour.\n+\n+        >>> section = Section('my-section')\n+        >>> file_dict = {'file1.txt': ['']}\n+        >>> bear = Bear(section, file_dict)\n+        >>> bear.dependency_results\n+        {}\n+        >>> dependency_bear = Bear(section, file_dict)\n+        >>> bear.add_dependency_results(dependency_bear, [1, 2, 3])\n+        >>> bear.dependency_results\n+        {<class 'coalib.core.Bear.Bear'>: [1, 2, 3]}\n+\n+        :return:\n+            A dictionary with bear-types as keys and their results received.\n+        \"\"\"\n+        return self._dependency_results\n+\n+    @classmethod\n+    def get_metadata(cls):\n+        \"\"\"\n+        :return:\n+            Metadata for the ``analyze`` function extracted from its signature.\n+            Excludes parameter ``self``.\n+        \"\"\"\n+        return FunctionMetadata.from_function(\n+            cls.analyze,\n+            omit={'self'})\n+\n+    # FIXME Make this a @classproperty.\n+    @classmethod\n+    def get_non_optional_settings(cls):\n+        \"\"\"\n+        This method has to determine which settings are needed by this bear.\n+        The user will be prompted for needed settings that are not available\n+        in the settings file so don't include settings where a default value\n+        would do.\n+\n+        :return: A dictionary of needed settings as keys and a tuple of help\n+                 text and annotation as values\n+        \"\"\"\n+        return cls.get_metadata().non_optional_params\n+\n+    @classmethod\n+    def __json__(cls):\n+        \"\"\"\n+        Override JSON export of ``Bear`` class.\n+        \"\"\"\n+        # Those members get duplicated if they aren't excluded because they\n+        # exist also as fields.\n+        excluded_members = {'can_detect', 'maintainers', 'maintainers_emails'}\n+\n+        # json cannot serialize properties, so drop them\n+        data = {\n+            key: value\n+            for key, value in get_public_members(cls).items()\n+            if not isinstance(value, property) and key not in excluded_members}\n+\n+        metadata = cls.get_metadata()\n+        non_optional_params = metadata.non_optional_params\n+        optional_params = metadata.optional_params\n+        data['metadata'] = {\n+            'desc': metadata.desc,\n+            'non_optional_params': {param: non_optional_params[param][0]\n+                                    for param in non_optional_params},\n+            'optional_params': {param: optional_params[param][0]\n+                                for param in optional_params}}\n+\n+        return data\n+\n+    @staticmethod\n+    def setup_dependencies():\n+        \"\"\"\n+        This is a user defined function that can download and set up\n+        dependencies (via download_cached_file or arbitrary other means) in an\n+        OS independent way.\n+        \"\"\"\n+\n+    @classmethod\n+    def check_prerequisites(cls):\n+        \"\"\"\n+        Checks whether needed runtime prerequisites of the bear are satisfied.\n+\n+        This function gets executed at construction.\n+\n+        Section value requirements shall be checked inside the ``run`` method.\n+\n+        >>> class SomeBear(Bear):\n+        ...     REQUIREMENTS = {PipRequirement('pip')}\n+\n+        >>> SomeBear.check_prerequisites()\n+        True\n+\n+        >>> class SomeOtherBear(Bear):\n+        ...     REQUIREMENTS = {PipRequirement('really_bad_package')}\n+\n+        >>> SomeOtherBear.check_prerequisites()\n+        'really_bad_package is not installed. You can install it using ...'\n+\n+        :return: True if prerequisites are satisfied, else False or a string\n+                 that serves a more detailed description of what's missing.\n+        \"\"\"\n+        for requirement in cls.REQUIREMENTS:\n+            if not requirement.is_installed():\n+                return requirement.package + ' is not installed. You can ' + (", "created_at": "2017-01-12T11:12:00Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NzcyNjc1", "fields": {"body": "Add doc of when this error is needed?", "diff": "@@ -0,0 +1,16 @@\n+class CircularDependencyError(Exception):", "created_at": "2017-01-12T11:30:40Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1Nzg2OTAw", "fields": {"body": "Typo - dependencing -> depending", "diff": "@@ -0,0 +1,600 @@\n+import logging\n+import unittest\n+import unittest.mock\n+\n+from coalib.settings.Section import Section\n+from coalib.core.Bear import Bear\n+from coalib.core.Core import initialize_dependencies, run\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+# Classes are hashed by instance, so they can be placed inside a set, compared\n+# to normal tuples which hash their contents. This allows to pass the file-dict\n+# into results.\n+@generate_eq('bear', 'section_name', 'file_dict')\n+class TestResult:\n+\n+    def __init__(self, bear, section_name, file_dict):\n+        self.bear = bear\n+        self.section_name = section_name\n+        self.file_dict = file_dict\n+\n+\n+class TestBearBase(Bear):\n+    BEAR_DEPS = set()\n+\n+    def analyze(self, bear, section_name, file_dict):\n+        # The bear can in fact return everything (so it's not bound to actual\n+        # `Result`s), but it must be at least an iterable.\n+        return [TestResult(bear, section_name, file_dict)]\n+\n+    def generate_tasks(self):\n+        # Choose single task parallelization for simplicity. Also use the\n+        # section name as a parameter instead of the section itself, as compare\n+        # operations on tests do not succeed on them due to the pickling of\n+        # multiprocessing to transfer objects to the other process, which\n+        # instantiates a new section on each transfer.\n+        return ((self, self.section.name, self.file_dict), {}),\n+\n+\n+class MultiTaskBear(Bear):\n+    BEAR_DEPS = set()\n+\n+    def __init__(self, section, file_dict, tasks_count=1):\n+        Bear.__init__(self, section, file_dict)\n+        self.tasks_count = tasks_count\n+\n+    def analyze(self, run_id):\n+        return [run_id]\n+\n+    def generate_tasks(self):\n+        # Choose single task parallelization for simplicity. Also use the\n+        # section name as a parameter instead of the section itself, as compare\n+        # operations on tests do not succeed on them due to the pickling of\n+        # multiprocessing to transfer objects to the other process, which\n+        # instantiates a new section on each transfer.\n+        return (((i,), {}) for i in range(self.tasks_count))\n+\n+\n+class BearA(TestBearBase):\n+    pass\n+\n+\n+class BearB(TestBearBase):\n+    pass\n+\n+\n+class BearC_NeedsB(TestBearBase):\n+    BEAR_DEPS = {BearB}\n+\n+\n+class BearD_NeedsC(TestBearBase):\n+    BEAR_DEPS = {BearC_NeedsB}\n+\n+\n+class BearE_NeedsAD(TestBearBase):\n+    BEAR_DEPS = {BearA, BearD_NeedsC}\n+\n+\n+class FailingBear(TestBearBase):\n+\n+    def analyze(self, bear, section_name, file_dict):\n+        raise ValueError\n+\n+\n+class BearF_NeedsFailingBear(TestBearBase):\n+    BEAR_DEPS = {FailingBear}\n+\n+\n+class BearG_NeedsF(TestBearBase):\n+    BEAR_DEPS = {BearF_NeedsFailingBear}\n+\n+\n+class BearH_NeedsG(TestBearBase):\n+    BEAR_DEPS = {BearG_NeedsF}\n+\n+\n+class MultiResultBear(TestBearBase):\n+\n+    def analyze(self, bear, section_name, file_dict):\n+        yield 1\n+        yield 2\n+\n+\n+# This bear runs a certain number of tasks dependencing on the number of", "created_at": "2017-01-12T13:09:34Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODA0MDEz", "fields": {"body": "omg was that me? :O", "diff": "@@ -0,0 +1,600 @@\n+import logging\n+import unittest\n+import unittest.mock\n+\n+from coalib.settings.Section import Section\n+from coalib.core.Bear import Bear\n+from coalib.core.Core import initialize_dependencies, run\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+# Classes are hashed by instance, so they can be placed inside a set, compared\n+# to normal tuples which hash their contents. This allows to pass the file-dict\n+# into results.\n+@generate_eq('bear', 'section_name', 'file_dict')\n+class TestResult:\n+\n+    def __init__(self, bear, section_name, file_dict):\n+        self.bear = bear\n+        self.section_name = section_name\n+        self.file_dict = file_dict\n+\n+\n+class TestBearBase(Bear):\n+    BEAR_DEPS = set()\n+\n+    def analyze(self, bear, section_name, file_dict):\n+        # The bear can in fact return everything (so it's not bound to actual\n+        # `Result`s), but it must be at least an iterable.\n+        return [TestResult(bear, section_name, file_dict)]\n+\n+    def generate_tasks(self):\n+        # Choose single task parallelization for simplicity. Also use the\n+        # section name as a parameter instead of the section itself, as compare\n+        # operations on tests do not succeed on them due to the pickling of\n+        # multiprocessing to transfer objects to the other process, which\n+        # instantiates a new section on each transfer.\n+        return ((self, self.section.name, self.file_dict), {}),\n+\n+\n+class MultiTaskBear(Bear):\n+    BEAR_DEPS = set()\n+\n+    def __init__(self, section, file_dict, tasks_count=1):\n+        Bear.__init__(self, section, file_dict)\n+        self.tasks_count = tasks_count\n+\n+    def analyze(self, run_id):\n+        return [run_id]\n+\n+    def generate_tasks(self):\n+        # Choose single task parallelization for simplicity. Also use the\n+        # section name as a parameter instead of the section itself, as compare\n+        # operations on tests do not succeed on them due to the pickling of\n+        # multiprocessing to transfer objects to the other process, which\n+        # instantiates a new section on each transfer.\n+        return (((i,), {}) for i in range(self.tasks_count))\n+\n+\n+class BearA(TestBearBase):\n+    pass\n+\n+\n+class BearB(TestBearBase):\n+    pass\n+\n+\n+class BearC_NeedsB(TestBearBase):\n+    BEAR_DEPS = {BearB}\n+\n+\n+class BearD_NeedsC(TestBearBase):\n+    BEAR_DEPS = {BearC_NeedsB}\n+\n+\n+class BearE_NeedsAD(TestBearBase):\n+    BEAR_DEPS = {BearA, BearD_NeedsC}\n+\n+\n+class FailingBear(TestBearBase):\n+\n+    def analyze(self, bear, section_name, file_dict):\n+        raise ValueError\n+\n+\n+class BearF_NeedsFailingBear(TestBearBase):\n+    BEAR_DEPS = {FailingBear}\n+\n+\n+class BearG_NeedsF(TestBearBase):\n+    BEAR_DEPS = {BearF_NeedsFailingBear}\n+\n+\n+class BearH_NeedsG(TestBearBase):\n+    BEAR_DEPS = {BearG_NeedsF}\n+\n+\n+class MultiResultBear(TestBearBase):\n+\n+    def analyze(self, bear, section_name, file_dict):\n+        yield 1\n+        yield 2\n+\n+\n+# This bear runs a certain number of tasks dependencing on the number of", "created_at": "2017-01-12T14:39:46Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODI1NjIx", "fields": {"body": "why not list(_get_comments(dependency_results)) ?", "diff": "@@ -95,6 +95,7 @@ def run(self,\n             A regular expression to search for matching keywords in a file.\n         '''\n         comments = _get_comments(dependency_results)\n+        comments = list(comments)", "created_at": "2017-01-12T16:12:44Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1OTQzNTE3", "fields": {"body": "If there is an issue in output, it will at least one line ^ ( IMHO it can't be None) - I checked with a file with no lint errors.", "diff": "@@ -38,11 +38,15 @@ def process_output(self, output, filename, file):\n         output = json.loads(output)\n \n         for issue in output:\n-            assert issue['startLine'] == issue['endLine']\n             diff = Diff(file)\n+            from_lines = issue['from'].splitlines()\n+            to_lines = issue['to'].splitlines()", "created_at": "2017-01-13T06:25:19Z", "last_edited_at": null, "author": "vijeth-aradhya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1OTQzODk1", "fields": {"body": "If ONLY all the other lines in the error message are equal (which is the case most of the times, I haven't come across a case where it is NOT equal till now, but it is better to keep the assert just in case), then we can output the change which is just the first line ^^\nThen, we can apply the patch and change only the first line \ud83d\ude04\nOtherwise, if the other lines lines are different, then we CANNOT apply the patch", "diff": "@@ -38,11 +38,15 @@ def process_output(self, output, filename, file):\n         output = json.loads(output)\n \n         for issue in output:\n-            assert issue['startLine'] == issue['endLine']\n             diff = Diff(file)\n+            from_lines = issue['from'].splitlines()\n+            to_lines = issue['to'].splitlines()\n+            assert len(from_lines) == len(to_lines)\n+            for other_lines in range(1, len(from_lines)):\n+                assert from_lines[other_lines] == to_lines[other_lines]", "created_at": "2017-01-13T06:30:38Z", "last_edited_at": null, "author": "vijeth-aradhya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDU0NDQy", "fields": {"body": "IMO there should be a check for the severity", "diff": "@@ -128,7 +128,11 @@ def test_run(self):\n         http://httpbin.org/status/503\n         http://www.notexample.com/404\n         http://exampe.com/404\n-        http://example.co.in/404\"\"\"\n+        http://example.co.in/404\n+        <ruleset name=\"test\" xmlns=\"http://this.isa.namespace/ruleset/7.0.0\"\n+        xmlns:xsi=\"http://this.is.another/kindof/namespace\"\n+        xsi:schemaLocation=\"http://this.namespace.dosent/exists/7.0.0\"", "created_at": "2017-01-13T19:14:23Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDU2Mjc0", "fields": {"body": "It should be fairly simple. I don't think there is a need to create an issue", "diff": "@@ -128,7 +128,11 @@ def test_run(self):\n         http://httpbin.org/status/503\n         http://www.notexample.com/404\n         http://exampe.com/404\n-        http://example.co.in/404\"\"\"\n+        http://example.co.in/404\n+        <ruleset name=\"test\" xmlns=\"http://this.isa.namespace/ruleset/7.0.0\"\n+        xmlns:xsi=\"http://this.is.another/kindof/namespace\"\n+        xsi:schemaLocation=\"http://this.namespace.dosent/exists/7.0.0\"", "created_at": "2017-01-13T19:23:44Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM0MzY2", "fields": {"body": "Imports should be in alphabetical order", "diff": "@@ -1,4 +1,5 @@\n import traceback\n+import inspect", "created_at": "2017-01-15T10:15:39Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM0Mzk0", "fields": {"body": "I think it should be The file path where the bear was fetched from", "diff": "@@ -155,6 +156,13 @@ def can_detect(cls):\n         return cls.CAN_DETECT | cls.CAN_FIX\n \n     @classproperty\n+    def file_path(cls):\n+        \"\"\"\n+        :return: The file where the bear was fetched from.", "created_at": "2017-01-15T10:17:25Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM1MzEw", "fields": {"body": "object1 is dependent on object2 is more clear IMO?", "diff": "@@ -0,0 +1,129 @@\n+class DependencyTracker:\n+    \"\"\"\n+    A ``DependencyTracker`` allows to register and manage dependencies between\n+    objects.\n+\n+    This class uses a directed graph to track relations.\n+\n+    Add a dependency relation between two objects:\n+\n+    >>> object1 = object()\n+    >>> object2 = object()\n+    >>> tracker = DependencyTracker()\n+    >>> tracker.add(object2, object1)\n+\n+    This would define that ``object1`` is dependent from ``object2``.", "created_at": "2017-01-15T11:15:16Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM2OTcw", "fields": {"body": "list not needed, sorted gives a list", "diff": "@@ -0,0 +1,469 @@\n+from functools import partial\n+import logging\n+from os import makedirs\n+from os.path import join, abspath, exists\n+from shutil import copyfileobj\n+from urllib.request import urlopen\n+\n+from appdirs import user_data_dir\n+\n+from coala_utils.decorators import (enforce_signature, classproperty,\n+                                    get_public_members)\n+\n+from dependency_management.requirements.PackageRequirement import (\n+    PackageRequirement)\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+from coalib.results.Result import Result\n+from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.FunctionMetadata import FunctionMetadata\n+from coalib.settings.Section import Section\n+\n+\n+class Bear:\n+    \"\"\"\n+    A bear contains the actual subroutine that is responsible for checking\n+    source code for certain specifications. However, it can actually do\n+    whatever it wants with the files it gets.\n+\n+    This is the base class for every bear. If you want to write a bear, you\n+    will probably want to look at the ``ProjectBear`` and ``FileBear`` classes\n+    that inherit from this class.\n+\n+    To indicate which languages your bear supports, just give it the\n+    ``LANGUAGES`` value which should be a set of string(s):\n+\n+    >>> class SomeBear(Bear):\n+    ...     LANGUAGES = {'C', 'CPP', 'C#', 'D'}\n+\n+    To indicate the requirements of the bear, assign ``REQUIREMENTS`` a set\n+    with instances of ``PackageRequirements``.\n+\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {\n+    ...         PackageRequirement('pip', 'coala_decorators', '0.2.1')}\n+\n+    If your bear uses requirements from a manager we have a subclass from,\n+    you can use the subclass, such as ``PipRequirement``, without specifying\n+    manager:\n+\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {PipRequirement('coala_decorators', '0.2.1')}\n+\n+    To specify additional attributes to your bear, use the following:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    ...     MAINTAINERS = {'Catelyn Stark'}\n+    ...     MAINTAINERS_EMAILS = {'catelyn_stark@gmail.com'}\n+    ...     LICENSE = 'AGPL-3.0'\n+    ...     ASCIINEMA_URL = 'https://asciinema.org/a/80761'\n+\n+    If the maintainers are the same as the authors, they can be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    >>> SomeBear.maintainers\n+    {'Jon Snow'}\n+    >>> SomeBear.maintainers_emails\n+    {'jon_snow@gmail.com'}\n+\n+    If your bear needs to include local files, then specify it giving strings\n+    containing relative file paths to the INCLUDE_LOCAL_FILES set:\n+\n+    >>> class SomeBear(Bear):\n+    ...     INCLUDE_LOCAL_FILES = {'checkstyle.jar', 'google_checks.xml'}\n+\n+    To keep track easier of what a bear can do, simply tell it to the\n+    ``CAN_FIX`` and the ``CAN_DETECT`` sets. Possible values are:\n+\n+    >>> CAN_DETECT = {'Syntax', 'Formatting', 'Security', 'Complexity',\n+    ... 'Smell', 'Unused Code', 'Redundancy', 'Variable Misuse', 'Spelling',\n+    ... 'Memory Leak', 'Documentation', 'Duplication', 'Commented Code',\n+    ... 'Grammar', 'Missing Import', 'Unreachable Code', 'Undefined Element',\n+    ... 'Code Simplification'}\n+    >>> CAN_FIX = {'Syntax', ...}\n+\n+    Specifying something to ``CAN_FIX`` makes it obvious that it can be\n+    detected too, so it may be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     CAN_DETECT = {'Syntax', 'Security'}\n+    ...     CAN_FIX = {'Redundancy'}\n+    >>> list(sorted(SomeBear.can_detect))", "created_at": "2017-01-15T12:45:51Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM3MDQ4", "fields": {"body": "not ok we need to get the non optonal params of the dependency here too!", "diff": "@@ -0,0 +1,469 @@\n+from functools import partial\n+import logging\n+from os import makedirs\n+from os.path import join, abspath, exists\n+from shutil import copyfileobj\n+from urllib.request import urlopen\n+\n+from appdirs import user_data_dir\n+\n+from coala_utils.decorators import (enforce_signature, classproperty,\n+                                    get_public_members)\n+\n+from dependency_management.requirements.PackageRequirement import (\n+    PackageRequirement)\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+from coalib.results.Result import Result\n+from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.FunctionMetadata import FunctionMetadata\n+from coalib.settings.Section import Section\n+\n+\n+class Bear:\n+    \"\"\"\n+    A bear contains the actual subroutine that is responsible for checking\n+    source code for certain specifications. However, it can actually do\n+    whatever it wants with the files it gets.\n+\n+    This is the base class for every bear. If you want to write a bear, you\n+    will probably want to look at the ``ProjectBear`` and ``FileBear`` classes\n+    that inherit from this class.\n+\n+    To indicate which languages your bear supports, just give it the\n+    ``LANGUAGES`` value which should be a set of string(s):\n+\n+    >>> class SomeBear(Bear):\n+    ...     LANGUAGES = {'C', 'CPP', 'C#', 'D'}\n+\n+    To indicate the requirements of the bear, assign ``REQUIREMENTS`` a set\n+    with instances of ``PackageRequirements``.\n+\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {\n+    ...         PackageRequirement('pip', 'coala_decorators', '0.2.1')}\n+\n+    If your bear uses requirements from a manager we have a subclass from,\n+    you can use the subclass, such as ``PipRequirement``, without specifying\n+    manager:\n+\n+    >>> class SomeBear(Bear):\n+    ...     REQUIREMENTS = {PipRequirement('coala_decorators', '0.2.1')}\n+\n+    To specify additional attributes to your bear, use the following:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    ...     MAINTAINERS = {'Catelyn Stark'}\n+    ...     MAINTAINERS_EMAILS = {'catelyn_stark@gmail.com'}\n+    ...     LICENSE = 'AGPL-3.0'\n+    ...     ASCIINEMA_URL = 'https://asciinema.org/a/80761'\n+\n+    If the maintainers are the same as the authors, they can be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     AUTHORS = {'Jon Snow'}\n+    ...     AUTHORS_EMAILS = {'jon_snow@gmail.com'}\n+    >>> SomeBear.maintainers\n+    {'Jon Snow'}\n+    >>> SomeBear.maintainers_emails\n+    {'jon_snow@gmail.com'}\n+\n+    If your bear needs to include local files, then specify it giving strings\n+    containing relative file paths to the INCLUDE_LOCAL_FILES set:\n+\n+    >>> class SomeBear(Bear):\n+    ...     INCLUDE_LOCAL_FILES = {'checkstyle.jar', 'google_checks.xml'}\n+\n+    To keep track easier of what a bear can do, simply tell it to the\n+    ``CAN_FIX`` and the ``CAN_DETECT`` sets. Possible values are:\n+\n+    >>> CAN_DETECT = {'Syntax', 'Formatting', 'Security', 'Complexity',\n+    ... 'Smell', 'Unused Code', 'Redundancy', 'Variable Misuse', 'Spelling',\n+    ... 'Memory Leak', 'Documentation', 'Duplication', 'Commented Code',\n+    ... 'Grammar', 'Missing Import', 'Unreachable Code', 'Undefined Element',\n+    ... 'Code Simplification'}\n+    >>> CAN_FIX = {'Syntax', ...}\n+\n+    Specifying something to ``CAN_FIX`` makes it obvious that it can be\n+    detected too, so it may be omitted:\n+\n+    >>> class SomeBear(Bear):\n+    ...     CAN_DETECT = {'Syntax', 'Security'}\n+    ...     CAN_FIX = {'Redundancy'}\n+    >>> list(sorted(SomeBear.can_detect))\n+    ['Redundancy', 'Security', 'Syntax']\n+\n+    Every bear has a data directory which is unique to that particular bear:\n+\n+    >>> class SomeBear(Bear): pass\n+    >>> class SomeOtherBear(Bear): pass\n+    >>> SomeBear.data_dir == SomeOtherBear.data_dir\n+    False\n+\n+    A bear can be dependant from other bears. ``BEAR_DEPS`` contains bear\n+    classes that are to be executed before this bear gets executed. The results\n+    of these bears will then be passed inside ``self.dependency_results`` as a\n+    dict. The dict will have the name of the bear as key and a list of its\n+    results as values:\n+\n+    >>> class SomeBear(Bear): pass\n+    >>> class SomeOtherBear(Bear):\n+    ...     BEAR_DEPS = {SomeBear}\n+    >>> SomeOtherBear.BEAR_DEPS\n+    {<class 'coalib.core.Bear.SomeBear'>}\n+    \"\"\"\n+\n+    LANGUAGES = set()\n+    REQUIREMENTS = set()\n+    AUTHORS = set()\n+    AUTHORS_EMAILS = set()\n+    MAINTAINERS = set()\n+    MAINTAINERS_EMAILS = set()\n+    PLATFORMS = {'any'}\n+    LICENSE = ''\n+    INCLUDE_LOCAL_FILES = set()\n+    CAN_DETECT = set()\n+    CAN_FIX = set()\n+    ASCIINEMA_URL = ''\n+    BEAR_DEPS = set()\n+\n+    @classproperty\n+    def name(cls):\n+        \"\"\"\n+        :return:\n+            The name of the bear.\n+        \"\"\"\n+        return cls.__name__\n+\n+    @classproperty\n+    def can_detect(cls):\n+        \"\"\"\n+        :return:\n+            A set that contains everything a bear can detect, including\n+            information from what it can fix too.\n+        \"\"\"\n+        return cls.CAN_DETECT | cls.CAN_FIX\n+\n+    @classproperty\n+    def maintainers(cls):\n+        \"\"\"\n+        :return:\n+            A set containing ``MAINTAINERS`` if specified, else takes\n+            ``AUTHORS`` by default.\n+        \"\"\"\n+        return cls.AUTHORS if cls.MAINTAINERS == set() else cls.MAINTAINERS\n+\n+    @classproperty\n+    def maintainers_emails(cls):\n+        \"\"\"\n+        :return:\n+            A set containing ``MAINTAINERS_EMAILS`` if specified, else takes\n+            ``AUTHORS_EMAILS`` by default.\n+        \"\"\"\n+        return (cls.AUTHORS_EMAILS if cls.MAINTAINERS_EMAILS == set()\n+                else cls.MAINTAINERS)\n+\n+    @enforce_signature\n+    def __init__(self, section: Section, file_dict: dict):\n+        \"\"\"\n+        Constructs a new bear.\n+\n+        :param section:\n+            The section object where bear settings are contained.\n+        :param file_dict:\n+            The file-dictionary containing a mapping of filenames to the\n+            according file contents.\n+        :raises RuntimeError:\n+            Raised when bear requirements are not fulfilled.\n+        \"\"\"\n+        self.section = section\n+        self.file_dict = file_dict\n+\n+        self._dependency_results = {}\n+\n+        self.setup_dependencies()\n+        cp = type(self).check_prerequisites()\n+        if cp is not True:\n+            error_string = ('The bear ' + self.name +\n+                            ' does not fulfill all requirements.')\n+            if cp is not False:\n+                error_string += ' ' + cp\n+\n+            raise RuntimeError(error_string)\n+\n+    def reset_dependency_results(self):\n+        \"\"\"\n+        Resets all dependency results for this bear.\n+\n+        >>> section = Section('my-section')\n+        >>> file_dict = {'file1.txt': ['']}\n+        >>> bear = Bear(section, file_dict)\n+        >>> dependency_bear = Bear(section, file_dict)\n+        >>> bear.add_dependency_results(dependency_bear, [1, 2, 3])\n+        >>> bear.dependency_results\n+        {<class 'coalib.core.Bear.Bear'>: [1, 2, 3]}\n+        >>> bear.reset_dependency_results()\n+        >>> bear.dependency_results\n+        {}\n+        \"\"\"\n+        self._dependency_results = {}\n+\n+    def add_dependency_results(self, bear, dependency_results):\n+        \"\"\"\n+        Adds dependency results to this instance.\n+\n+        This function is used by the core to add dependency results as they\n+        are ready.\n+\n+        >>> section = Section('my-section')\n+        >>> file_dict = {'file1.txt': ['']}\n+        >>> bear = Bear(section, file_dict)\n+        >>> bear.dependency_results\n+        {}\n+        >>> dependency_bear = Bear(section, file_dict)\n+        >>> bear.add_dependency_results(dependency_bear, [1, 2, 3])\n+        >>> bear.dependency_results\n+        {<class 'coalib.core.Bear.Bear'>: [1, 2, 3]}\n+\n+        :param bear:\n+            The bear instance to add results for.\n+        :param dependency_results:\n+            The results to add.\n+        \"\"\"\n+        bear_type = type(bear)\n+\n+        if bear_type not in self._dependency_results:\n+            current_results = []\n+            self._dependency_results[bear_type] = current_results\n+        else:\n+            current_results = self._dependency_results[bear_type]\n+\n+        current_results += dependency_results\n+\n+    @property\n+    def dependency_results(self):\n+        \"\"\"\n+        Contains all dependency results.\n+\n+        This variable gets set during bear execution from the core and can be\n+        used from ``analyze``.\n+\n+        Modifications to the returned dictionary lead to undefined behaviour.\n+\n+        >>> section = Section('my-section')\n+        >>> file_dict = {'file1.txt': ['']}\n+        >>> bear = Bear(section, file_dict)\n+        >>> bear.dependency_results\n+        {}\n+        >>> dependency_bear = Bear(section, file_dict)\n+        >>> bear.add_dependency_results(dependency_bear, [1, 2, 3])\n+        >>> bear.dependency_results\n+        {<class 'coalib.core.Bear.Bear'>: [1, 2, 3]}\n+\n+        :return:\n+            A dictionary with bear-types as keys and their results received.\n+        \"\"\"\n+        return self._dependency_results\n+\n+    @classmethod\n+    def get_metadata(cls):\n+        \"\"\"\n+        :return:\n+            Metadata for the ``analyze`` function extracted from its signature.\n+            Excludes parameter ``self``.\n+        \"\"\"\n+        return FunctionMetadata.from_function(\n+            cls.analyze,\n+            omit={'self'})\n+\n+    # FIXME Make this a @classproperty.\n+    @classmethod\n+    def get_non_optional_settings(cls):\n+        \"\"\"\n+        This method has to determine which settings are needed by this bear.\n+        The user will be prompted for needed settings that are not available\n+        in the settings file so don't include settings where a default value\n+        would do.\n+\n+        :return: A dictionary of needed settings as keys and a tuple of help\n+                 text and annotation as values\n+        \"\"\"\n+        return cls.get_metadata().non_optional_params", "created_at": "2017-01-15T12:49:44Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM4NTc2", "fields": {"body": "not self._dependency_dict", "diff": "@@ -149,3 +149,25 @@ def check_circular_dependencies(self):\n         traverse_graph(\n             self._dependency_dict.keys(),\n             lambda node: self._dependency_dict.get(node, frozenset()))\n+\n+    @property\n+    def all_dependencies_resolved(self):\n+        \"\"\"\n+        Checks whether all dependencies in this ``DependencyTracker`` instance\n+        are resolved.\n+\n+        >>> tracker = DependencyTracker()\n+        >>> tracker.all_dependencies_resolved\n+        True\n+        >>> tracker.add(0, 1)\n+        >>> tracker.all_dependencies_resolved\n+        False\n+        >>> tracker.resolve(0)\n+        {1}\n+        >>> tracker.all_dependencies_resolved\n+        True\n+\n+        :return:\n+            ``True`` when all dependencies resolved, ``False`` if not.\n+        \"\"\"\n+        return len(self._dependency_dict) == 0", "created_at": "2017-01-15T14:05:10Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM4NTk1", "fields": {"body": "This method shows up in a later commit.", "diff": "@@ -0,0 +1,129 @@\n+class DependencyTracker:\n+    \"\"\"\n+    A ``DependencyTracker`` allows to register and manage dependencies between\n+    objects.\n+\n+    This class uses a directed graph to track relations.\n+\n+    Add a dependency relation between two objects:\n+\n+    >>> object1 = object()\n+    >>> object2 = object()\n+    >>> tracker = DependencyTracker()\n+    >>> tracker.add(object2, object1)\n+\n+    This would define that ``object1`` is dependent from ``object2``.\n+\n+    If you define that ``object2`` has its dependency duty fulfilled, you can\n+    resolve it:\n+\n+    >>> resolved = tracker.resolve(object2)\n+    >>> resolved  # +ELLIPSIS\n+    {<object object at ...>}\n+    >>> resolved_object = resolved.pop()\n+    >>> resolved_object is object1\n+    True\n+\n+    This returns all objects that are now freed, meaning they have no\n+    dependencies any more.\n+\n+    >>> object3 = object()\n+    >>> tracker.add(object2, object1)\n+    >>> tracker.add(object3, object1)\n+    >>> tracker.resolve(object2)\n+    set()\n+    >>> tracker.resolve(object3)\n+    {<object object at ...>}\n+    \"\"\"\n+\n+    def __init__(self):\n+        self._dependency_dict = {}\n+\n+    def add(self, dependency, dependant):\n+        \"\"\"\n+        Add a bear-dependency to another bear manually.\n+\n+        This function does not check for circular dependencies.\n+\n+        >>> tracker = DependencyTracker()\n+        >>> tracker.add(0, 1)\n+        >>> tracker.add(0, 2)\n+        >>> tracker.get_dependants(0)\n+        {1, 2}\n+        >>> tracker.get_dependencies(1)\n+        {0}\n+        >>> tracker.get_dependencies(2)\n+        {0}\n+        >>> tracker.get_dependencies(3)\n+        set()\n+\n+        :param dependency:\n+            The bear that is the dependency.\n+        :param dependant:\n+            The bear that is dependent.\n+        :raises CircularDependencyError:\n+            Raised when circular dependencies occur.\n+        \"\"\"\n+        if dependency not in self._dependency_dict:\n+            self._dependency_dict[dependency] = set()\n+\n+        self._dependency_dict[dependency].add(dependant)\n+\n+    def resolve(self, dependency):\n+        \"\"\"\n+        When a bear completes this method is called with the instance of that\n+        bear. The method deletes this bear from the list of dependencies of\n+        each bear in the dependency dictionary. It returns the bears which\n+        have all of its dependencies resolved.\n+\n+        >>> tracker = DependencyTracker()\n+        >>> tracker.add(0, 1)\n+        >>> tracker.add(0, 2)\n+        >>> tracker.add(2, 3)\n+        >>> tracker.resolve(0)\n+        {1, 2}\n+        >>> tracker.get_dependants(0)", "created_at": "2017-01-15T14:06:08Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTYyNTE1", "fields": {"body": "Imo testing on this bear is a bit screwy and needs to be improved. This would be separate issue. Ideally we test most of these options, but not possible right now. However since we are trying to improve tests, it would be nice if you verified that the bear was outputting the correct error.", "diff": "@@ -27,3 +27,10 @@\n     invalid_files=(test_file,),\n     settings={'htmllint_ignore': 'quotation'},\n     tempfile_kwargs={'suffix': '.html'})\n+\n+HTMLLintBearDisableCheckerTest = verify_local_bear(\n+    HTMLLintBear,\n+    valid_files=(test_file,),\n+    invalid_files=(),", "created_at": "2017-01-16T04:10:01Z", "last_edited_at": "2017-01-16T04:11:12Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTk4ODEw", "fields": {"body": "Why has bear_a's file dict been checked again.", "diff": "@@ -57,12 +57,278 @@ def generate_tasks(self):\n         return (((i,), {}) for i in range(self.tasks_count))\n \n \n+class BearA(TestBearBase):\n+    pass\n+\n+\n+class BearB(TestBearBase):\n+    pass\n+\n+\n+class BearC_NeedsB(TestBearBase):\n+    BEAR_DEPS = {BearB}\n+\n+\n+class BearD_NeedsC(TestBearBase):\n+    BEAR_DEPS = {BearC_NeedsB}\n+\n+\n+class BearE_NeedsAD(TestBearBase):\n+    BEAR_DEPS = {BearA, BearD_NeedsC}\n+\n+\n class FailingBear(TestBearBase):\n \n     def analyze(self, bear, section_name, file_dict):\n         raise ValueError\n \n \n+def get_next_instance(typ, iterable):\n+    \"\"\"\n+    Reads all elements in the iterable and returns the first occurrence\n+    that is an instance of given type.\n+\n+    :param typ:\n+        The type an object shall have.\n+    :param iterable:\n+        The iterable to search in.\n+    :return:\n+        The instance having ``typ`` or ``None`` if not found in\n+        ``iterable``.\n+    \"\"\"\n+    try:\n+        return next(obj for obj in iterable if isinstance(obj, typ))\n+    except StopIteration:\n+        return None\n+\n+\n+class InitializeDependenciesTest(unittest.TestCase):\n+\n+    def test_multi_dependencies(self):\n+        # General test which makes use of the full dependency chain from the\n+        # defined classes above.\n+        section = Section('test-section')\n+        filedict = {}\n+\n+        bear_e = BearE_NeedsAD(section, filedict)\n+        dependency_tracker, bears_to_schedule = initialize_dependencies(\n+            {bear_e})\n+\n+        self.assertEqual(len(dependency_tracker.get_dependencies(bear_e)), 2)\n+        self.assertTrue(any(isinstance(bear, BearA) for bear in\n+                            dependency_tracker.get_dependencies(bear_e)))\n+        self.assertTrue(any(isinstance(bear, BearD_NeedsC) for bear in\n+                            dependency_tracker.get_dependencies(bear_e)))\n+\n+        # Test path BearE -> BearA.\n+        bear_a = get_next_instance(\n+            BearA, dependency_tracker.get_dependencies(bear_e))\n+\n+        self.assertIsNotNone(bear_a)\n+        self.assertIs(bear_a.section, section)\n+        self.assertIs(bear_a.file_dict, filedict)\n+        self.assertEqual(dependency_tracker.get_dependencies(bear_a), set())\n+\n+        # Test path BearE -> BearD.\n+        bear_d = get_next_instance(\n+            BearD_NeedsC, dependency_tracker.get_dependencies(bear_e))\n+\n+        self.assertIsNotNone(bear_d)\n+        self.assertIs(bear_d.section, section)\n+        self.assertIs(bear_a.file_dict, filedict)", "created_at": "2017-01-16T10:25:41Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MjA3MzY4", "fields": {"body": "Should this or can this happen? Otherwise also ask to report the bug.", "diff": "@@ -42,14 +47,32 @@ def cleanup_bear(bear,\n         The executor tasks are executed on.\n     \"\"\"\n     if not running_tasks[bear]:\n+        resolved_bears = dependency_tracker.resolve(bear)\n+\n+        if resolved_bears:\n+            schedule_bears(resolved_bears, result_callback,\n+                           dependency_tracker, event_loop, running_tasks,\n+                           executor)\n+\n         del running_tasks[bear]\n \n     if not running_tasks:\n+        # Check the DependencyTracker additionally for remaining\n+        # dependencies.\n+        resolved = dependency_tracker.all_dependencies_resolved\n+        if not resolved:  # pragma: no cover\n+            logging.warning(\n+                'Core finished with run, but it seems some dependencies '", "created_at": "2017-01-16T11:12:39Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MjY2NjYx", "fields": {"body": "it would have been too much work than...making more commits and than squashing tham in to one\n\nYou wouldn't be squashing the commits into one, the two commits would be kept separate.\n\nmy commit passes all test ..do u really want to make seperate commit for tht\n\nI know it seems a bit tedious, but it'll make work easier if particular changes are referenced for future contributors; not in this particular case since it's documentation - but for code in general, you should make changes specific to what the commit says it does :)", "diff": "@@ -338,14 +338,15 @@ go for `a low issue <https://coala.io/low>`__ - they are really rewarding!\n \n     **Do not only fix a newcomer issue!** It is highly recommended that you\n     fix one newcomer issue to get familiar with the workflow at coala and\n-    then proceed to a difficulty/low issues.\n+    then proceed to a ``difficulty/low`` issue.\n \n     However those who are familiar with opensource can start with\n-    \"difficulty/low\" issues.\n+    ``difficulty/low`` issues.\n \n-    We highly encourage you to start reviewing other's \"difficulty/low\" or\n-    newcomer issues after you complete your newcomer issue as reviewing helps,\n-    you to learn more about coala and python.\n+    We highly encourage you to start `reviewing <https://coala.io/review>`__", "created_at": "2017-01-16T16:39:35Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2Mjk4ODk3", "fields": {"body": "in the rst to link the file double underscore and single underscore both were used at different places...so i chose double underscore", "diff": "@@ -343,9 +343,10 @@ go for `a low issue <https://coala.io/low>`__ - they are really rewarding!\n     However those who are familiar with opensource can start with\n     ``difficulty/low`` issues.\n \n-    We highly encourage you to start reviewing other's ``difficulty/low`` or\n-    ``difficulty/newcomer`` issues after you complete your newcomer issue, as\n-    reviewing helps you to learn more about coala and python.\n+    We highly encourage you to start `reviewing <https://coala.io/review>`__", "created_at": "2017-01-16T20:16:30Z", "last_edited_at": "2017-01-16T20:24:13Z", "author": "harshit890", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MzEwOTQ0", "fields": {"body": "can we add that you help others too?", "diff": "@@ -343,9 +343,10 @@ go for `a low issue <https://coala.io/low>`__ - they are really rewarding!\n     However those who are familiar with opensource can start with\n     ``difficulty/low`` issues.\n \n-    We highly encourage you to start reviewing other's ``difficulty/low`` or\n-    ``difficulty/newcomer`` issues after you complete your newcomer issue, as\n-    reviewing helps you to learn more about coala and python.\n+    We highly encourage you to start `reviewing <https://coala.io/review>`__\n+    other's ``difficulty/low`` or ``difficulty/newcomer`` issues after you\n+    complete your newcomer issue, as reviewing helps you to learn more about", "created_at": "2017-01-16T21:55:48Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NjAwNjIx", "fields": {"body": "They are, except the  scss_lint was added to the template file because of require: false part \ud83d\ude05", "diff": "@@ -1,9 +1,11 @@\n source 'https://rubygems.org'\n ruby '2.2.2'\n \n+gem 'scss_lint', require: false # require flag is necessary https://github.com/brigade/scss-lint#installation\n+gem \"csvlint\"\n+gem \"puppet-lint\"\n+gem \"reek\"\n gem \"rubocop\"\n+gem \"ruby\"", "created_at": "2017-01-18T10:07:52Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTQzMzg4", "fields": {"body": "sounds good. atm I have no idea how to edit the js file with rebase edit as it creates conflicts\nwill do later :)", "diff": "@@ -147,5 +147,133 @@ coala should support generating metrics for your code.\",\n \t\t\"initiatives\" : [\"GSoC\"],\n \t\t\"tags\" : [\"Web\", \"Blog\"],\n \t\t\"markdown\": \"coala_web.md\"\n+\t},\n+\t{\n+\t\t\"name\" : \"Optimize Caching\",\n+\t\t\"desc\" : \"Improve coala's performance by implementing caching strategies.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"At least one patch to the coala core should be accepted and merged.\",\n+\t\t\t\"The student should be familiar with ongoing technical cEPs.\",\n+\t\t\t\"The proposal needs to show some familiarity with coala's caching \\\n+\t\t\timplementation.\",\n+\t\t\t\"The student should have understanding of the current caching mechanism\"\n+\t\t],\n+\t\t\"difficulty\" : \"medium\",\n+\t\t\"issues\" : [\n+\t\t\t\"https://github.com/coala/coala/issues/2541\",\n+\t\t\t\"https://github.com/coala/coala/issues/2699\",\n+\t\t\t\"https://github.com/coala/coala/issues/2912\"\n+\t\t],\n+\t\t\"mentors\" : [\n+\t\t\t\"adtac\",\n+\t\t\t\"sils\"\n+\t\t],\n+\t\t\"initiatives\" : [\"GSoC\"],\n+\t\t\"tags\" : [\"Core\", \"Bears\"],\n+\t\t\"markdown\": \"optimize_caching.md\"\n+\t},\n+\t{\n+\t\t\"name\" : \"Cohesive Editor Support\",\n+\t\t\"desc\" : \"\",", "created_at": "2017-01-19T19:53:25Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTcyNjI5", "fields": {"body": "Travis python 2.7 complains if we use print(get_current_commit, file=cf) as print is not a function", "diff": "@@ -62,6 +63,9 @@ def run(self):\n               '-b {}'.format(current_version)])\n         VERSION = get_version()\n \n+with open(COMMIT_FILE, 'w') as cf:\n+    cf.write(get_current_commit() + '\\n')\n+", "created_at": "2017-01-19T22:23:08Z", "last_edited_at": "2017-01-19T22:33:12Z", "author": "arush0311", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTg0NTk2", "fields": {"body": "this needs to be run in the coalib directory, otherwise it will be wrong.\nIt is more versatile if the caller specifies the directory that it should be run in, as an argument to this function.", "diff": "@@ -7,10 +7,46 @@\n \n import sys\n from os.path import join, dirname\n+from subprocess import check_output, CalledProcessError\n \n \n VERSION_FILE = join(dirname(__file__), 'VERSION')\n \n+COMMIT_FILE = join(dirname(__file__), 'COMMIT')\n+\n+\n+def get_current_commit():", "created_at": "2017-01-19T23:38:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MTg2OTE2", "fields": {"body": "One commit for renaming both handler and formatter seems fair", "diff": "@@ -15,18 +15,24 @@ def configure_logging():\n     logging.config.dictConfig({\n         'version': 1,\n         'handlers': {\n-            'colored': {\n+            'console-logger': {\n                 'class': 'logging.StreamHandler',\n-                'formatter': 'colored',\n+                'formatter': 'color',", "created_at": "2017-01-21T01:51:48Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MjAyNzQ3", "fields": {"body": "well while we are at it, might as well add a test for the star syntax too.", "diff": "@@ -255,10 +255,19 @@ def response(status_code, *args, **kwargs):\n             self.assertEqual([x.message\n                               for x in list(uut.run('file', file_contents,\n                                                     network_timeout=nt))], [])\n+            self.assertEqual([x.message\n+                              for x in list(uut.run('file', file_contents,\n+                                                    timeout=20))], [])", "created_at": "2017-01-21T17:43:11Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MjI1MDk2", "fields": {"body": "The same problem occurs when another setting is left blank. The issue is applicable to any bear.", "diff": "@@ -529,7 +529,8 @@ def acquire_settings(log_printer, settings_names_dict, section):\n     for setting_name, arr in sorted(settings_names_dict.items(),\n                                     key=lambda x: (join_names(x[1][1:]), x[0])):\n         value = require_setting(setting_name, arr, section)\n-        result.update({setting_name: value} if value is not None else {})\n+        result.update({setting_name: value} if value is not None else\n+                      True if setting_name == 'use_spaces' else {})", "created_at": "2017-01-22T15:12:31Z", "last_edited_at": null, "author": "pratyushprakash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NDMyNjIy", "fields": {"body": "So, by implementing the above stuff, we could leave these changes as is?", "diff": "@@ -31,6 +31,9 @@ bears = SpaceConsistencyBear\n bears = GitCommitBear\n shortlog_trailing_period = False\n shortlog_regex = ([^:]*|[^:]+: [A-Z0-9*].*)\n+body_close_issue = True\n+body_close_issue_full_url = True\n+body_close_issue_last_line = True", "created_at": "2017-01-23T22:31:39Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NTI4OTUx", "fields": {"body": "Can we have asciinema too?", "diff": "@@ -0,0 +1,41 @@\n+import os\n+import shlex\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='planemo',\n+        output_format='regex',\n+        output_regex=r'..\\s(?P<severity>\\w*:)(?P<message>.*)',\n+        severity_map={'WARNING:': RESULT_SEVERITY.MAJOR,\n+                      'CHECK:': RESULT_SEVERITY.NORMAL,\n+                      'INFO:': RESULT_SEVERITY.INFO})\n+class PlanemoLintBear:\n+    \"\"\"\n+    Checks the code with pylint. This will run pylint over each file\n+    separately.\n+    \"\"\"\n+    LANGUAGES = {'xml'}", "created_at": "2017-01-24T11:46:20Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NTU4MTQ0", "fields": {"body": "actually we may not be able to use external dependencies in setup.py, and this function is directly being called by setup.py", "diff": "@@ -6,10 +6,61 @@\n \n \n import sys\n+\n+from os import chdir, getcwd\n from os.path import join, dirname\n+from subprocess import check_output, CalledProcessError\n+\n+\n+COALIB_DIR = join(dirname(__file__))\n+\n+VERSION_FILE = join(COALIB_DIR, 'VERSION')\n+\n+COMMIT_FILE = join(COALIB_DIR, 'COMMIT')\n+\n \n+def get_current_commit(git_dir):\n+    '''\n+    :param git_dir:     string containing the directory to check the\n+                        current commit in.\n+    :return:            string containing the current commit sha if `git_dir`\n+                        is initialized as a git repo otherwise an empty string.\n+    '''\n+    old_dir = getcwd()\n+    chdir(git_dir)\n \n-VERSION_FILE = join(dirname(__file__), 'VERSION')\n+    try:\n+        commit = check_output(['git', 'rev-parse', 'HEAD'])\n+        commit = commit.decode('utf-8').strip()\n+\n+        status = check_output(['git', 'status', '--porcelain'])\n+        status = status.decode('utf-8').strip()\n+        if status != '':\n+            commit += '*'\n+    except (OSError, CalledProcessError) as e:\n+        commit = ''\n+\n+    chdir(old_dir)\n+    return commit", "created_at": "2017-01-24T14:33:34Z", "last_edited_at": "2017-01-24T14:34:28Z", "author": "arush0311", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3Njc3MDEw", "fields": {"body": "I've actually discovered a serious flaw: groupby does not work as expected:\n\nThe operation of groupby() is similar to the uniq filter in Unix. It generates a break or new group every time the value of the key function changes (which is why it is usually necessary to have sorted the data using the same key function). That behavior differs from SQL\u2019s GROUP BY which aggregates common elements regardless of their input order.\n\nMeans we need to sort the bears before using the section and file-dicts as sort-keys.\n+ I need to add a test-case where 3 bears are added, 2 of them using section1, one of them using section2. And they are added out-of-order: section1Bear1, section2Bear, section1Bear2.\nThe functionality could be also moved into an own little function^^", "diff": "@@ -145,6 +149,91 @@ def finish_task(bear,\n                     exc_info=ex)\n \n \n+def initialize_dependencies(bears):\n+    \"\"\"\n+    Initializes and returns a ``DependencyTracker`` instance together with a\n+    set of bears ready for scheduling.\n+\n+    This function acquires, processes and registers bear dependencies\n+    accordingly using a consumer-based system, where each dependency bear has\n+    only a single instance per section and file-dictionary.\n+\n+    The bears set returned accounts for bears that have dependencies and\n+    excludes them accordingly. Dependency bears that have themselves no further\n+    dependencies are included so the dependency chain can be processed\n+    correctly.\n+\n+    :param bears:\n+        The set of bears to run that serve as an entry-point.\n+    :return:\n+        A tuple with ``(dependency_tracker, bears_to_schedule)``.\n+    \"\"\"\n+    # Pre-collect bears in a set as we use them more than once. Especially\n+    # remove duplicate instances.\n+    bears = set(bears)\n+\n+    dependency_tracker = DependencyTracker()\n+\n+    # For a consumer-based system, we have a situation which can be visualized\n+    # with a graph:\n+    #\n+    # (section1, file_dict1) (section1, file_dict2) (section2, file_dict2)\n+    #       |       |                  |                      |\n+    #       V       V                  V                      V\n+    #     bear1   bear2              bear3                  bear4\n+    #       |       |                  |                      |\n+    #       V       V                  |                      |\n+    #  BearType1  BearType2            -----------------------|\n+    #       |       |                                         |\n+    #       |       |                                         V\n+    #       ---------------------------------------------> BearType3\n+    #\n+    # We need to traverse this graph and instantiate dependency bears\n+    # accordingly, one per section.\n+\n+    # Group bears by sections and file-dictionaries. These will serve as\n+    # entry-points for the dependency-instantiation-graph.\n+    grouping = groupby(bears, key=lambda bear: (bear.section, bear.file_dict))\n+    for (section, file_dict), bears_per_section in grouping:", "created_at": "2017-01-24T23:25:08Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3ODgzNjAw", "fields": {"body": "please add a space after the equals, here and below", "diff": "@@ -88,66 +96,111 @@ def find_annotation_ranges(self,\n             A dictionary containing the various ways to define multi-line\n             comments in a language.\n         :return:\n-            Two tuples first containing a tuple of strings, the second a tuple\n-            of comments.\n+            Four tuples containing namedtuples for singleline strings,\n+            multiline strings, singleline comments and multiline comments\n+            respectively.\n         \"\"\"\n         text = ''.join(file)\n-        strings_range = []\n-        comments_range = []\n+        singleline_string_range = []\n+        multiline_string_range = []\n+        singleline_comment_range = []\n+        multiline_comment_range = []\n+        fields = ('start_delimiter_range end_delimiter_range'\n+                  ' content_range full_range')\n+        singleline_string = namedtuple('singleline_string', fields)\n+        multiline_string = namedtuple('multiline_string', fields)\n+        singleline_comment = namedtuple('singleline_string', fields)\n+        multiline_comment = namedtuple('multiline_string', fields)\n         position = 0\n         while position <= len(text):\n \n             def get_new_position():\n-                _range, end_position = self.get_range_end_position(\n-                    file,\n-                    filename,\n-                    text,\n-                    multiline_string_delimiters,\n-                    position,\n-                    self.get_multiline)\n-                if end_position and _range:\n-                    strings_range.append(_range)\n+                end_position, start_delim, end_delim =\\\n+                    self.get_range_end_position(\n+                        file,\n+                        filename,\n+                        text,\n+                        multiline_string_delimiters,\n+                        position,\n+                        self.get_multiline)\n+                if end_position:\n+                    seperate_ranges = get_seperate_ranges(file,\n+                                                          filename,\n+                                                          start_delim,\n+                                                          end_delim,\n+                                                          position,\n+                                                          end_position)\n+                    multiline_string_range.append(\n+                        multiline_string(*seperate_ranges))\n+\n                     return end_position + 1\n \n-                _range, end_position = self.get_range_end_position(\n-                    file,\n-                    filename,\n-                    text,\n-                    string_delimiters,\n-                    position,\n-                    self.get_singleline_strings)\n-                if end_position and _range:\n-                    strings_range.append(_range)\n+                end_position, start_delim, end_delim =\\", "created_at": "2017-01-25T21:35:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3OTM5NjQ2", "fields": {"body": "I'm against this addition, getting stuff merged is mandantory. Period. If there's a problem with the goals that can be adjusted but this is not negotiable.", "diff": "@@ -4,6 +4,12 @@ We expect you to:\n * Blog at least once per week (this will be aggregated on\n [blog.coala.io](https://blog.coala.io)).\n * Participate in weekly meetings with your mentor.\n-* Get stuff merged, before the deadlines!\n-* Get in contact with your mentors or the admins if any even remotely\n-potential problems arise.\n+* Get stuff merged, before the deadlines! If this, for whatever reason, looks\n+to be problematic, talk to your mentor or an admin!", "created_at": "2017-01-26T07:10:20Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3", "fields": {"body": "@hemang \ud83d\udc4d  This solves the page refresh problem", "diff": "@@ -12,16 +32,17 @@\n \t\t})\n \t})\n \n-\tapp.controller('TabController', function () {\n-\t\tthis.tab = 1\n-\t\tthis.setTab = function (stab) {\n-\t\t\tthis.tab = stab\n-\t\t\t$(\".button-collapse\").sideNav('hide');\n-\t\t}\n-\t\tthis.isSet = function (stab) {\n-\t\t\treturn this.tab == stab\n-\t\t}\n-\t})\n+    app.controller('TabController', function ($location) {\n+        this.tab = \"/home\";", "created_at": "2017-01-27T09:48:19Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MzM0Mzcw", "fields": {"body": "I'd say \"Half of the choosen issues\" or so", "diff": "@@ -0,0 +1,28 @@\n+The Project is about fixing issues with Generic Bears.\n+\n+Generic Bears have the potential to be awesome, and they have started to get\n+their, but still require a some issues to be fixed. For eg: QuotesBear is not\n+reliable, AnnotationBear needs to give a better more detailed API, \n+IndentationBear looks cool but is not usable yet. These bears can be found \n+[here](https://github.com/coala/coala-bears/tree/master/bears/general).\n+\n+The task is to fix as many issues with these bears and make them as usable\n+as possible.\n+\n+### Milestones\n+\n+##### GSoC 2017 Coding Starts\n+\n+ * All issues are disccused, and a general idea behind the algorithm of\n+ most generic bears is developed.\n+ * New changes to these algorithms(if required) are proposed.\n+\n+##### GSoC 2017 Midterm\n+\n+ * A given set of issues defined in the proposal are resolved.", "created_at": "2017-01-28T16:42:48Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MzY1MDM5", "fields": {"body": "This defeats the purpose of separating stdout and stderr.\nThe objective is to be properly testing both streams.", "diff": "@@ -19,38 +19,44 @@ def tearDown(self):\n         sys.argv = self.old_argv\n \n     def test_log(self):\n-        retval, output = execute_coala(\n+        retval, stdout, stderr = execute_coala(\n             coala_ci.main, 'coala-ci', '--help')\n+        output = stdout + '\\n' + stderr", "created_at": "2017-01-29T22:17:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4NDEzODUy", "fields": {"body": "why not just apply the center-block class? Should be avail by default in bootstrap", "diff": "@@ -47,7 +47,7 @@\n             <div  ng-repeat=\"member in gic.adminsList\" class=\"card card-main showcase-card-gi\">\n                 <div class=\"empty\"></div>\n                 <div class=\"card-action profile-data\" >\n-                  <center><img class=\"profile-img\" height=\"100\" ng-src=\"{{ member.github_avatar_url }}\"></center>\n+                  <img class=\"profile-img\" height=\"100\" ng-src=\"{{ member.github_avatar_url }}\">", "created_at": "2017-01-30T10:36:12Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDI2MzI5", "fields": {"body": "wooow this was missing? Can we have an own commit for this?", "diff": "@@ -158,6 +158,10 @@ def __str__(self):\n \n         return format_str.format(self)\n \n+    def overlaps(self, other):\n+        return (super().overlaps(other) and\n+                self.start.file == other.start.file)\n+", "created_at": "2017-02-01T23:55:17Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDc4MTc2", "fields": {"body": "I think that should go into a comment at least", "diff": "@@ -89,7 +89,31 @@ def end(self):\n         return self._end\n \n     def overlaps(self, other):\n-        return self.start <= other.end and self.end >= other.start\n+        first = False\n+        second = False", "created_at": "2017-02-02T09:22:50Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MTI3MzU2", "fields": {"body": "I think you should place a comment above this stmt explaining why we do this\n+\nBetter use if platform.system() == 'Windows' \ud83d\udc4d", "diff": "@@ -52,6 +54,11 @@ def run_interactive_shell_command(command, **kwargs):\n     \"\"\"\n     if not kwargs.get('shell', False) and isinstance(command, str):\n         command = shlex.split(command)\n+    else:\n+        command = list(command)\n+\n+    if sys.platform.startswith('win'):  # pragma: no cover", "created_at": "2017-02-02T14:16:33Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MzM4NDU3", "fields": {"body": "This should still be bold", "diff": "@@ -3,74 +3,83 @@\n Welcome to the Newcomers Guide!\n ===============================\n \n-**DO NOT WORK ON ANY ISSUE WITHOUT ASSIGNMENT!** If you do, someone else might\n-work on it as well and we might have no choice but reject one of your Pull\n-Requests - we hate it if anyone wastes their time. For your own sake, please\n-follow this guide. We put a lot of work into this for you!\n-\n-Everyone in the coala community is expected to follow our\n-`Code of Conduct <http://coala.io/coc>`_.\n-\n-To become part of the coala developers team, there's a few steps you need\n-to complete. The newcomer process is as it follows:\n-\n-You will start as a newcomer, which is kind of a trial. If you complete the\n-following tasks, you will become a developer at coala:\n-\n-  - run coala on a project of yours\n-  - merge a ``difficulty/newcomer`` Pull Request\n-  - review at least a ``difficulty/newcomer`` Pull Request\n-  - merge a ``difficulty/low`` Pull Request\n-  - review at least a ``difficulty/low`` or higher Pull Request\n-\n-When you ran coala on a project, please fill our\n-`usability survey <http://coala.io/usability>`_. Once you got your first Pull\n-Request merged successfully, fill in our\n-`survey form <http://coala.io/newform>`_. With that you can help us making your\n-experience better!\n-\n-Once you have achieved all these, just ask for being promoted on the chat and\n-provide links to your reviews and merged Pull Requests. Then, you will be able\n-to name yourself a coala developer!\n+This is a step by step guide that teaches you the workflow used at coala and\n+how to use the tools involved with it.\n+Although we did our best to provide as much help as possible, we are always\n+there to help at http://coala.io/chat if you feel lost.\n+**But please do read the guide before asking us as most questions we get are\n+covered in here.**\n+\n+Before you can start working there are a few things you need to know about\n+coala:\n+\n+  - Everyone in the coala community is expected to follow our\n+    `Code of Conduct <http://coala.io/coc>`_.\n+  - Do not work on any issue without assignment. Someone else might be working", "created_at": "2017-02-03T13:42:43Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MzczMzU4", "fields": {"body": "maybe add pyflakes?", "diff": "@@ -419,5 +419,24 @@ coala should support generating metrics for your code.\",\n \t\t\"tags\" : [\"Jetbrains IDEs\", \"Plugins\"],\n \t\t\"markdown\": \"jetbrains-ide-plugin.md\",\n \t\t\"collaborating_projects\" : [\"coala\", \"jetbrains\"]\n+\t},\n+\t{\n+\t\t\"name\" : \"Integrate pyflakes-enhanced AST into coala \",\n+\t\t\"desc\" : \"Integrate pyflakes-enhanced AST into coala \\\n+\t\tso that bears can access it.\",\n+\t\t\"requirements\" : [\n+                                \"Integrate pyflakes-enhanced AST into coala by creating \\\n+                                a meta-bear i.e PyflakesASTBear\",\n+\t\t\t\t\"Create two bears that wrap the flake8 AST plugins \\\n+\t\t\t\t'flake8-future-import' and 'flake8-string-format' \\\n+                                using the PyflakesASTBear.\"\n+\t\t],\n+\t\t\"difficulty\" : \"medium\",\n+\t\t\"issues\" : [],\n+\t\t\"mentors\" : [\"jayvdb\", \"srisankethu\"],\n+\t\t\"initiatives\" : [\"GSoC\", \"RGSoC\"],\n+\t\t\"tags\" : [\"Bears\"],", "created_at": "2017-02-03T16:37:36Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx", "fields": {"body": "space before justify", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align:justify;", "created_at": "2017-02-03T19:23:58Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0", "fields": {"body": "space after .description and before {", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{", "created_at": "2017-02-03T19:24:25Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MjEw", "fields": {"body": "space before {", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align:justify;\n+  font-weight: 300;    \n+}\n+.container .gi-container-title{\n+  font-size: 5em;\n+  font-weight: 300;\n+}\n+.description a:hover{", "created_at": "2017-02-03T19:25:13Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDY3MjMx", "fields": {"body": "It is easier to see what is happening if\n\nthe first is\n\nexecute_coala(*args)\n\nthe second is\n\nexecute_coala(*(args + ('-o', 'file.json')))", "diff": "@@ -87,42 +96,45 @@ def test_show_bears_attributes(self):\n                              )\n             self.assertTrue(bear['metadata']['optional_params'])\n             self.assertFalse(bear['metadata']['non_optional_params'])\n+            self.assertFalse(stderr)\n \n     @unittest.mock.patch('coalib.parsing.DefaultArgParser.get_all_bears_names')\n     @unittest.mock.patch('coalib.collecting.Collectors.icollect_bears')\n     def test_version_conflict_in_collecting_bears(self, import_fn, _):\n         with bear_test_module():\n             import_fn.side_effect = VersionConflict('msg1', 'msg2')\n-            retval, _ = execute_coala(coala.main, 'coala', '--json', '-B')\n+            retval, stdout, stderr = execute_coala(\n+                coala.main, 'coala', '--json', '-B')\n             self.assertEqual(retval, 13)\n \n     def test_text_logs(self):\n-        retval, output = execute_coala(\n+        retval, stdout, stderr = execute_coala(\n             coala.main, 'coala', '--json', '-c', 'nonex')\n+        test_text = '{\\n  \"results\": {}\\n}\\n'\n         self.assertRegex(\n-            output,\n+            stderr,\n             \".*\\\\[ERROR\\\\].*The requested coafile '.*' does not exist. .+\\n\")\n+        self.assertEqual(stdout, test_text)\n \n     def test_output_file(self):\n         with prepare_file(['#todo this is todo'], None) as (lines, filename):\n-            retval, output = execute_coala(coala.main, 'coala', '--json',\n-                                           '-c', os.devnull,\n-                                           '-b', 'LineCountTestBear',\n-                                           '-f', re.escape(filename),\n-                                           '--log-json',\n-                                           stdout_only=True)\n+            retval, stdout, stderr = execute_coala(coala.main, 'coala',\n+                                                   '--json', '-c', os.devnull,\n+                                                   '-b', 'LineCountTestBear',\n+                                                   '-f', re.escape(filename),\n+                                                   '--log-json')\n             execute_coala(coala.main, 'coala', '--json', '-c', os.devnull,", "created_at": "2017-02-04T14:05:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMTkw", "fields": {"body": "@Shruti9520 There is extra whitespace on Line 55 after font-weight:300, so you'll have to remove that extra whitespace. And a new PR shouldn't be created after every review iteration, you can follow the newcomer guide to see how to amend your commit and to push the changes in this PR itself \ud83d\ude03", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description {\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align: justify;\n+  font-weight: 300;    ", "created_at": "2017-02-04T07:59:51Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMjk3", "fields": {"body": "\ud83d\udc4d I'll work on it", "diff": "@@ -4,18 +4,19 @@\n \tapp.config(['$routeProvider',\n \t\tfunction($routeProvider) {\n \t\t\t$routeProvider.\n-\t\t\twhen('/', {\n-\t\t\t\tredirectTo: '/projects'\n-\t\t\t}).\n \t\t\twhen('/projects', {\n-\t\t\t\ttemplate: '<projects></projects>'\n+\t\t\t\ttemplate: '<projects></projects>',\n+\t\t\t\treloadOnSearch: false\n \t\t\t}).\n \t\t\twhen('/mentors', {\n \t\t\t\ttemplate: '<mentors></mentors>'\n \t\t\t}).\n \t\t\twhen('/faq', {\n \t\t\t\ttemplate: '<faq></faq>'\n-\t\t\t})\n+\t\t\t}).\n+\t\t\totherwise({\n+                redirectTo: '/projects'", "created_at": "2017-02-04T08:09:16Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzMjAx", "fields": {"body": "\"package=\" is not necessary.\nSee my comment from 3 hrs ago:\n#1404 (comment)", "diff": "@@ -0,0 +1,23 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+\n+\n+@linter(executable='gotoml',\n+        use_stdin=True,\n+        output_format='corrected')\n+class GoTOMLBear:\n+    \"\"\"\n+    It is used to the know the type of every key used in a file.\n+    \"\"\"\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {\n+               GoRequirement(package='github.com/BurntSushi/toml/cmd/tomlv',", "created_at": "2017-02-04T09:23:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzY0", "fields": {"body": "hey, your shortlog isnt according to our standards. It should be \"Improve\" instead of \"Improved\"..see the imperative form :) ?\nalso, enclose \"Get Involved\" in double backticks: ``", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;", "created_at": "2017-02-04T09:58:42Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzcz", "fields": {"body": "you can also run \"coala\" and it fixes everything for you automatically, if you have it installed :)", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description {\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align: justify;\n+  font-weight: 300;    ", "created_at": "2017-02-04T09:59:12Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzODIx", "fields": {"body": "These are tests for sourcerange shouldn't they be in the other commit?", "diff": "@@ -103,6 +103,32 @@ def test_contains(self):\n         b = SourceRange.from_values('test_file', 1, 1, 50, 20)\n         self.assertNotIn(a, b)\n \n+    def test_overlaps(self):", "created_at": "2017-02-04T10:03:56Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDg1NTg2", "fields": {"body": "not sure \"We\" is the correct pronoun. Shouldnt it be instead something like: \"coala website has been updated to..\" in release notes?", "diff": "@@ -1,3 +1,77 @@\n+coala-bears 0.10.0\n+==================\n+\n+This release, we had 97 commits contributed by 42 contributors\n+\n+We have updated the coala website to provide a quick overview of bears and", "created_at": "2017-02-05T09:57:59Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDg1NjEy", "fields": {"body": "nooooo, this is american english, damn it, stop getting rid of \"u\"!!! :D behavioUr!!!", "diff": "@@ -1,3 +1,77 @@\n+coala-bears 0.10.0\n+==================\n+\n+This release, we had 97 commits contributed by 42 contributors\n+\n+We have updated the coala website to provide a quick overview of bears and\n+their settings. To access this, visit http://coala.io/#!/languages. We also\n+have sample bear output on the front page for some common languages.\n+\n+We have started separating the bear dependencies from this package. To keep\n+current installation behavior in the future, please use the pip package index", "created_at": "2017-02-05T09:58:52Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDgyNjk4", "fields": {"body": "Hmm.. maybe we should update coala.io/languages so that it will redirect to this http://coala.io/#!/languages.\nThen this note should just refer to coala.io/languages.\nThoughts?", "diff": "@@ -1,3 +1,88 @@\n+coala-bears 0.10.0\n+==================\n+\n+This release, we had 97 commits contributed by 42 contributors\n+\n+We have updated the coala website to provide a quick overview of bears and\n+their settings. To access this, visit http://coala.io/#!/languages. We also", "created_at": "2017-02-05T06:56:21Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDgyODI2", "fields": {"body": "missing newline", "diff": "@@ -1,3 +1,14 @@\n+coala-bears 0.9.2\n+=================", "created_at": "2017-02-05T07:06:00Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDkzMDg3", "fields": {"body": "TOML is a \"minimal configuration file format\", so I think this GoTOMLBear is more appropriate located in bears/configfiles rather than in go folder.", "diff": "@@ -0,0 +1,22 @@\n+from coalib.bearlib.abstractions.Linter import linter", "created_at": "2017-02-05T16:31:04Z", "last_edited_at": "2017-02-05T16:36:47Z", "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NTE0MDc2", "fields": {"body": "I think it's purely written in Go. The tomlv is an Go executable program that run the main TOML validator library.", "diff": "@@ -0,0 +1,22 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+\n+\n+@linter(executable='gotoml',\n+        use_stdin=True,\n+        output_format='corrected')\n+class GoTOMLBear:\n+    \"\"\"\n+    It is used to the know the type of every key used in a file.\n+    \"\"\"\n+    LANGUAGES = {'Go'}", "created_at": "2017-02-06T03:50:12Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NTg4OTk0", "fields": {"body": "Can you link these frameworks?", "diff": "@@ -13,6 +13,28 @@ plugins. For some editors like sublime and gedit, running tests is not easy and\n there is no api to do it. In such cases we  would want to use dogtail\n (a GUI tester) or a similar tool to do this.\n \n+Other details (for testing): \n+\n+For sublime, we'll be using the unittest plugin which is a plugin by itself. ", "created_at": "2017-02-06T13:58:32Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzY3NjYz", "fields": {"body": "It was right (using None). The original issue of this PR is making FormatRBear ignore those option. Meaning they dont enforce using arrow (True) neither never user arrow (False).", "diff": "@@ -31,10 +31,10 @@ class FormatRBear:\n     @staticmethod\n     @deprecate_settings(indent_size='tab_width')\n     def create_arguments(filename, file, config_file,\n-                         r_keep_comments: bool=True,\n-                         r_keep_blank_lines: bool=True,\n-                         r_braces_on_next_line: bool=False,\n-                         r_use_arrows: bool=False,\n+                         r_keep_comments: bool=None,\n+                         r_keep_blank_lines: bool=None,\n+                         r_braces_on_next_line: bool=None,\n+                         r_use_arrows: bool=None,", "created_at": "2017-02-07T08:34:24Z", "last_edited_at": null, "author": "adhikasp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcwNTY4", "fields": {"body": "\"rely heavily upon\" sounds better imo", "diff": "@@ -1,24 +1,53 @@\n-[cEP-0004](https://github.com/coala/cEPs/pull/29/files) was meant to improve\n-the usability of coala. It is a very important proposal that never got the time\n-and love it deserved.\n+coala has come a long way from it's early days in terms of it's usability. But\n+all the changes that have been made are improvisations. A proper and planned\n+overhaul of the user interface would help coala become much more user\n+friendly and intuitive. At it's core any software is as good as it's\n+interface with the user and this project aims to improve that.\n+\n+In this project we are going to focus on the command line interface(CLI) of\n+coala. The specific areas and points to focus on are:\n+\n+1. Remove most of the text from the action selection screen.\n+2. Use letters instead of numbers for selecting actions.\n+3. Allow chaining actions in a single input.\n+4. Add a 'select action for all results' operator.\n+5. Make ApplyPatchAction log the applied patch.\n+6. Reprompt after running actions only if the action says so.\n+7. Set 'Do nothing' as the default action.\n+\n+The end goal of the project is to make coala easier to use and hence the\n+project is going to be heavy on mockups and feedback from the community.", "created_at": "2017-02-07T08:51:39Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNTQ2", "fields": {"body": "I think the second sentence is general to all projects of coala, and can be removed.", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.", "created_at": "2017-02-07T09:02:55Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNzM3", "fields": {"body": "\"Priliminary\" -> \"Preliminary\"", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Priliminary tests have been performed to validate the proposed changes'  ", "created_at": "2017-02-07T09:04:01Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyOTA5", "fields": {"body": "\"implmented\" -> \"implemented\"\n\"Section based\" -> \"Section-based\"", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Priliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL\n+\n+* Section based caching has been implmented.", "created_at": "2017-02-07T09:04:51Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzczNjQ4", "fields": {"body": "Thats why it's marked wip, things are not ready, I'm just testing things ATM.", "diff": "@@ -21,14 +21,23 @@ class PyDocStyleBear:\n \n     def create_arguments(self, filename, file, config_file,\n                          pydocstyle_select: typed_list(str)=(),\n-                         pydocstyle_ignore: typed_list(str)=()):\n+                         pydocstyle_ignore: typed_list(str)=(),\n+                         pydocstyle_add_ignore: typed_list(str)=(),\n+                         pydocstyle_add_select: typed_list(str)=()):\n         \"\"\"\n         :param pydocstyle_select:\n             List of checked errors by specifying which errors to check for.\n-            Can't be used together with ``pydocstyle_ignore``.\n+            Can't be used together with ``pydocstyle_ignore``. It overrides\n+            default list of to-ignore error codes.\n         :param pydocstyle_ignore:", "created_at": "2017-02-07T09:09:04Z", "last_edited_at": null, "author": "aptrishu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1NzMz", "fields": {"body": "PREPARATION/BONDING", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING", "created_at": "2017-02-07T10:09:52Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODAz", "fields": {"body": "CODING PHASE 3", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL\n+\n+* Section-based caching has been implemented.\n+* The corresponding code has been thoroughly tested, documented, reviewed, and  \n+  merged.\n \n ##### GSOC 2017 FINAL", "created_at": "2017-02-07T10:10:13Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODQx", "fields": {"body": "CODING PHASE 1", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM", "created_at": "2017-02-07T10:10:27Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1OTM4", "fields": {"body": "This and midterm are CODING PHASE 2\nMilestones probably have to me moved around a little bit", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL", "created_at": "2017-02-07T10:10:57Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg2NjEy", "fields": {"body": "one other -> an additional", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL\n+\n+* Section-based caching has been implemented.\n+* The corresponding code has been thoroughly tested, documented, reviewed, and  \n+  merged.\n \n ##### GSOC 2017 FINAL\n \n-* At least two more cases have been 'solved' in a similar fashion.\n-* The respective code has been properly tested, documented and merged.\n+* At least one other proposed performance hotspot improvement has been  ", "created_at": "2017-02-07T10:13:27Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMjM5", "fields": {"body": "this sentence sounds not right to me...\nmaybe \"With it, coala only runs on files that changes since the last run, potentially giving huge performance improvements compared to simply running coala on everything regardless.\"", "diff": "@@ -1,28 +1,46 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files", "created_at": "2017-02-07T10:42:43Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMzU0", "fields": {"body": "this is especially important for large projects. Add some story to this maybe.", "diff": "@@ -1,28 +1,46 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run. But coala is still rather slow and could be\n+much faster.", "created_at": "2017-02-07T10:43:25Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5ODU1NjAx", "fields": {"body": "actually I would rephrase the condition a bit:\nif self.kind() == BEAR_KIND.LOCAL:\n    # print file path\nelse:\n    # normal message\n\nconceptually you want to print filenames only on local bears, regardless what other types exist^^", "diff": "@@ -249,8 +250,19 @@ def execute(self, *args, **kwargs):\n             result = self.run_bear_from_section(args, kwargs)\n             return [] if result is None else list(result)\n         except (Exception, SystemExit):\n-            self.warn('Bear {} failed to run. Take a look at debug messages'\n-                      ' (`-V`) for further information.'.format(name))\n+            try:\n+                if self.kind() == BEAR_KIND.GLOBAL:\n+                    self.warn('Bear {} failed to run. Take a look '\n+                              'at debug messages (`-V`) for further '\n+                              'information.'.format(name))\n+                else:\n+                    self.warn('Bear {} failed to run on file {}. Take a look '\n+                              'at debug messages (`-V`) for further '\n+                              'information.'.format(name, args[0]))", "created_at": "2017-02-07T15:59:10Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MTYy", "fields": {"body": "an -> a", "diff": "@@ -441,5 +441,24 @@ coala should support generating metrics for your code.\",\n \t\t\"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n \t\t\"markdown\": \"vulture.md\",\n \t\t\"collaborating_projects\" : [\"coala\", \"vulture\"]\n+    },\n+    {\n+\t\t\"name\" : \"Documentation Extraction and Parsing\",\n+\t\t\"desc\" : \"The Project is about writing language independent \\\n+\t\t\t\t  documentation extraction and parsing algorithms.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"The participant should have one bugfix patch to any bear accepted.\",\n+\t\t\t\"The participant should have an basic understanding of the algorithms \\", "created_at": "2017-02-07T22:31:05Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MzEx", "fields": {"body": "This is true for all proposals and can be removed", "diff": "@@ -441,5 +441,24 @@ coala should support generating metrics for your code.\",\n \t\t\"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n \t\t\"markdown\": \"vulture.md\",\n \t\t\"collaborating_projects\" : [\"coala\", \"vulture\"]\n+    },\n+    {\n+\t\t\"name\" : \"Documentation Extraction and Parsing\",\n+\t\t\"desc\" : \"The Project is about writing language independent \\\n+\t\t\t\t  documentation extraction and parsing algorithms.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"The participant should have one bugfix patch to any bear accepted.\",\n+\t\t\t\"The participant should have an basic understanding of the algorithms \\\n+\t\t\tbehind existing documentation extraction routines.\",\n+\t\t\t\"The proposal timeline should contain issues which are planned to be \\", "created_at": "2017-02-07T22:31:55Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NTE3", "fields": {"body": "This needs a little story as motivation. What Problem are we trying to fix? How would coala and its users benefit from the project?", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.", "created_at": "2017-02-07T22:33:06Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3Njc1", "fields": {"body": "rename to PREPARATION/BONDING", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING", "created_at": "2017-02-07T22:33:52Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzMx", "fields": {"body": "rename to CODING PHASE 1", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM", "created_at": "2017-02-07T22:34:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzU3", "fields": {"body": "rename to CODING PHASE 3", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.\n+* Create a base class that does the extraction and parsing for us. \n+  [#2659](https://github.com/coala/coala/issues/2659)\n+* Fix [#2143](https://github.com/coala/coala/issues/2143)\n+\n+##### GSOC 2017 FINAL", "created_at": "2017-02-07T22:34:19Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MDU5", "fields": {"body": "Does this need a cEP? or just a concept?\nThe first two milestones are not realy measurable. So maybe just have \"A concept for the design of an efficient parsing system exists\", which implies the first two points", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.", "created_at": "2017-02-07T22:35:45Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MzM3", "fields": {"body": "atleast -> at least", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.", "created_at": "2017-02-07T22:37:13Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4NjIw", "fields": {"body": "Milestones should describe a state that is/has to be reached.\nSo this could be:!A base class, that does the extraction and parsing, is implemented. Fixing \nand the one below could be:\" is fixed. with context what it is about.", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.\n+* Create a base class that does the extraction and parsing for us. ", "created_at": "2017-02-07T22:38:49Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4Njg5", "fields": {"body": "Again make these states not orders.", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.\n+* Create a base class that does the extraction and parsing for us. \n+  [#2659](https://github.com/coala/coala/issues/2659)\n+* Fix [#2143](https://github.com/coala/coala/issues/2143)\n+\n+##### GSOC 2017 FINAL\n+\n+* Implement a DocumentationGrammarBear that fixes grammar inside documentation.", "created_at": "2017-02-07T22:39:08Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyOTQwNDE3", "fields": {"body": "This is just an example so just shorten the line. It is just for showing noqa so the line can be <80", "diff": "@@ -323,6 +323,23 @@ If you put an ``all`` instead of the bear names directly after the\n ``ignore``/``ignoring`` keyword, the results of all bears affecting\n those lines will be ignored.\n \n+If you've used another linter in the past, you don't have to change your\n+pre-existing code with the 'noqa' keywords to 'ignore' as the examples below\n+work as well. If no bears are specified, noqa will be applicable to work for \n+all bears. \n+\n+::\n+    # noqa \n+        long_line = \"This is a long line, long enough to trigger LineLengthBear\"       ", "created_at": "2016-12-18T12:31:16Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzODMzMjA1", "fields": {"body": "you could also use dir or vars, they are maybe better as these are built-ins^^", "diff": "@@ -304,25 +305,28 @@ def print_results_formatted(log_printer,\n \n     for result in result_list:\n         severity_str = RESULT_SEVERITY.__str__(result.severity)\n+        args = result.__dict__", "created_at": "2016-12-25T19:57:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241MzQ5NjUw", "fields": {"created_at": "2016-11-30T20:13:12Z", "content": "THUMBS_UP", "giver": "sils", "receiver": "marian-ald", "review": "MDEyOklzc3VlQ29tbWVudDI2Mzk3ODM5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241NDI4NjE2", "fields": {"created_at": "2016-12-04T17:59:51Z", "content": "THUMBS_UP", "giver": "marian-ald", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDI2NDcxNzMzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241NzY2NDEz", "fields": {"created_at": "2016-12-18T12:36:11Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyOTQwNDE3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTExMzg5", "fields": {"created_at": "2016-12-25T19:58:59Z", "content": "THUMBS_UP", "giver": "vijeth-aradhya", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzODMzMjA1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTM4NjE1", "fields": {"created_at": "2016-12-27T22:36:14Z", "content": "THUMBS_UP", "giver": "vijeth-aradhya", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI2OTM5MDIwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTY4MTIz", "fields": {"created_at": "2016-12-29T16:20:49Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI2OTY1MzMwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTY4MTMz", "fields": {"created_at": "2016-12-29T16:21:32Z", "content": "THUMBS_UP", "giver": "nemaniarjun", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI2OTY1MzMwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTY4NDU1", "fields": {"created_at": "2016-12-29T16:41:37Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI2OTY1MzMwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTc2MDU5", "fields": {"created_at": "2016-12-30T03:24:33Z", "content": "LAUGH", "giver": "Makman2", "receiver": "vijeth-aradhya", "review": "MDEyOklzc3VlQ29tbWVudDI2OTcxNTAyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTc2MDYw", "fields": {"created_at": "2016-12-30T03:24:34Z", "content": "HOORAY", "giver": "Makman2", "receiver": "vijeth-aradhya", "review": "MDEyOklzc3VlQ29tbWVudDI2OTcxNTAyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTg4MTU3", "fields": {"created_at": "2016-12-30T23:31:09Z", "content": "LAUGH", "giver": "vijeth-aradhya", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI2OTgzNDY1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTkwNzQx", "fields": {"created_at": "2016-12-31T09:00:18Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI2OTg0MTM0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb241OTkwOTkz", "fields": {"created_at": "2016-12-31T09:57:53Z", "content": "LAUGH", "giver": "Elgayar", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI2OTgzNDY1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MDA2MDQy", "fields": {"created_at": "2017-01-02T12:59:41Z", "content": "LAUGH", "giver": "NiklasMM", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI2OTk2OTQwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MDQ0Njcy", "fields": {"created_at": "2017-01-04T07:32:18Z", "content": "THUMBS_UP", "giver": "sils", "receiver": "dracarys09", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NTMyMzk5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MDQyNzQ1", "fields": {"created_at": "2017-01-04T04:32:57Z", "content": "THUMBS_UP", "giver": "Mariatta", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NTE1MDE2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MDc0OTMy", "fields": {"created_at": "2017-01-05T08:01:53Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NzI1ODMy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MDkxMTQ1", "fields": {"created_at": "2017-01-05T18:36:58Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0ODIzNDA5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MTI0ODM5", "fields": {"created_at": "2017-01-06T22:07:31Z", "content": "THUMBS_UP", "giver": "dhishan", "receiver": "satwikkansal", "review": "MDEyOklzc3VlQ29tbWVudDI3MTAxMzUzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MTI0ODU2", "fields": {"created_at": "2017-01-06T22:08:18Z", "content": "THUMBS_UP", "giver": "dhishan", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI3MDA2NTcwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MTM2MDYx", "fields": {"created_at": "2017-01-07T22:10:28Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDI3MTEwNTIxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MTQ5NDg1", "fields": {"created_at": "2017-01-09T07:19:45Z", "content": "THUMBS_UP", "giver": "shrutishrm512", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3MTIyMjI2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MTQzMDU2", "fields": {"created_at": "2017-01-08T17:54:05Z", "content": "THUMBS_UP", "giver": "shrutishrm512", "receiver": "nemaniarjun", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDg0NDY4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MTU3Nzk3", "fields": {"created_at": "2017-01-09T14:10:19Z", "content": "HOORAY", "giver": "gaocegege", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3MTIyMTM4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MTUxOTAy", "fields": {"created_at": "2017-01-09T09:46:39Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3MTE4Nzk1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MTY3MjUw", "fields": {"created_at": "2017-01-09T19:23:08Z", "content": "LAUGH", "giver": "Makman2", "receiver": "nemaniarjun", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MjI0MzY4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MTY3MjUz", "fields": {"created_at": "2017-01-09T19:23:10Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "nemaniarjun", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MjI0MzY4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjAzNjQz", "fields": {"created_at": "2017-01-10T21:23:12Z", "content": "THUMBS_UP", "giver": "HitRam", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDU4OTg2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjE0NTcw", "fields": {"created_at": "2017-01-11T07:50:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "rhemon", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NTA1Nzk5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjI3Nzg1", "fields": {"created_at": "2017-01-11T15:58:20Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI3MTkwNzI3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjI4NTY5", "fields": {"created_at": "2017-01-11T16:19:13Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI3MTkwNzA1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjM5Nzkw", "fields": {"created_at": "2017-01-11T22:23:57Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NjgwNzQ1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjQyMDk2", "fields": {"created_at": "2017-01-12T00:15:43Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1Njk5MzQ1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjU4NjY3", "fields": {"created_at": "2017-01-12T14:39:53Z", "content": "HOORAY", "giver": "Makman2", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1Nzg2OTAw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjU5NjYy", "fields": {"created_at": "2017-01-12T15:07:46Z", "content": "LAUGH", "giver": "aptrishu", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODA0MDEz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjUyNjcz", "fields": {"created_at": "2017-01-12T10:41:59Z", "content": "THUMBS_UP", "giver": "robbyoconnor", "receiver": "rhemon", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NTA1Nzk5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MjYzMDA0", "fields": {"created_at": "2017-01-12T16:38:15Z", "content": "LAUGH", "giver": "aptrishu", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODI1NjIx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzA2MDA2", "fields": {"created_at": "2017-01-14T00:14:05Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "vijeth-aradhya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1OTQzNTE3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzA2MDE3", "fields": {"created_at": "2017-01-14T00:14:32Z", "content": "LAUGH", "giver": "Makman2", "receiver": "vijeth-aradhya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1OTQzODk1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzA2MDE4", "fields": {"created_at": "2017-01-14T00:14:33Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "vijeth-aradhya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1OTQzODk1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzA4MTcy", "fields": {"created_at": "2017-01-14T05:20:37Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "namanyadav12", "review": "MDEyOklzc3VlQ29tbWVudDI3MjU0MDYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzA5MDg1", "fields": {"created_at": "2017-01-14T08:18:24Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI2OTY1MzMwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzAxNDMw", "fields": {"created_at": "2017-01-13T20:33:03Z", "content": "THUMBS_UP", "giver": "namanyadav12", "receiver": "pratyushprakash", "review": "MDEyOklzc3VlQ29tbWVudDI3MjUzODc1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzEwMjY4", "fields": {"created_at": "2017-01-14T11:32:24Z", "content": "HEART", "giver": "Techievena", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3MjYxNzI0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzI0MjYy", "fields": {"created_at": "2017-01-15T11:10:40Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3MjY4ODMwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzI2ODQy", "fields": {"created_at": "2017-01-15T16:19:31Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM2OTcw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzI2ODUw", "fields": {"created_at": "2017-01-15T16:20:41Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM3MDQ4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzI3NDc0", "fields": {"created_at": "2017-01-15T17:36:17Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM3MDQ4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzI3Nzkw", "fields": {"created_at": "2017-01-15T18:18:49Z", "content": "THUMBS_UP", "giver": "LeafyLi", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI2OTY1MzMwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzIzNTY0", "fields": {"created_at": "2017-01-15T10:25:12Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM0MzY2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzIzNjAy", "fields": {"created_at": "2017-01-15T10:27:44Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM0Mzk0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzM4OTE4", "fields": {"created_at": "2017-01-16T07:49:06Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTYyNTE1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzU0NDM4", "fields": {"created_at": "2017-01-16T17:45:30Z", "content": "THUMBS_UP", "giver": "namanyadav12", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MjY2NjYx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzU3NjIw", "fields": {"created_at": "2017-01-16T19:56:15Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MjY2NjYx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzU4NDI4", "fields": {"created_at": "2017-01-16T20:38:31Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "harshit890", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2Mjk4ODk3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242MzYwNDA1", "fields": {"created_at": "2017-01-16T22:10:26Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Nosferatul", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MzEwOTQ0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242Mzc3MzI5", "fields": {"created_at": "2017-01-17T13:56:45Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI3MzE2NTYzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDA2MTg5", "fields": {"created_at": "2017-01-18T09:28:58Z", "content": "THUMBS_UP", "giver": "shrutishrm512", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDI3MzQyNTYzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDEwMzUx", "fields": {"created_at": "2017-01-18T11:55:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NjAwNjIx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDI3NDM0", "fields": {"created_at": "2017-01-18T20:41:00Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3MzU5MzQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDIzNjY5", "fields": {"created_at": "2017-01-18T18:45:10Z", "content": "THUMBS_UP", "giver": "shrutishrm512", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDI3MzUxMDMwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDQwNDM4", "fields": {"created_at": "2017-01-19T08:38:26Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3MzcxMjU2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDU1OTQ0", "fields": {"created_at": "2017-01-19T17:20:14Z", "content": "HEART", "giver": "Makman2", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3MzgzNTUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDY1OTYz", "fields": {"created_at": "2017-01-19T22:43:59Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "arush0311", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTcyNjI5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDYxNDQx", "fields": {"created_at": "2017-01-19T20:10:44Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTQzMzg4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDc5NDY0", "fields": {"created_at": "2017-01-20T11:23:44Z", "content": "THUMBS_UP", "giver": "arush0311", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTg0NTk2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDg3MDg2", "fields": {"created_at": "2017-01-20T16:09:58Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NDEwODM3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDg5Mzkw", "fields": {"created_at": "2017-01-20T17:28:09Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI3NDA1MzQyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDgyNTcz", "fields": {"created_at": "2017-01-20T13:41:23Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NDA2ODMxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTA0NDE1", "fields": {"created_at": "2017-01-21T14:38:09Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NDI2NTM1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTA0NjAz", "fields": {"created_at": "2017-01-21T15:04:56Z", "content": "THUMBS_UP", "giver": "incorrectusername", "receiver": "Udayan12167", "review": "MDEyOklzc3VlQ29tbWVudDI3NDI2NjY4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTA1ODM2", "fields": {"created_at": "2017-01-21T17:43:44Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MjAyNzQ3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTA2NzY3", "fields": {"created_at": "2017-01-21T19:30:57Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NDI4MjI0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTA5MjAw", "fields": {"created_at": "2017-01-22T00:46:12Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "nemaniarjun", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MTg2OTE2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTAyNzA0", "fields": {"created_at": "2017-01-21T10:38:46Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NDEyNzc0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTE1MzA5", "fields": {"created_at": "2017-01-22T17:03:34Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MjI1MDk2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTEzNDEx", "fields": {"created_at": "2017-01-22T12:51:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "SiddharthKumar02", "review": "MDEyOklzc3VlQ29tbWVudDI3NDMyODkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTIxOTMy", "fields": {"created_at": "2017-01-23T04:39:44Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Udayan12167", "review": "MDEyOklzc3VlQ29tbWVudDI3NDMzODkyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTQ5Njkx", "fields": {"created_at": "2017-01-23T22:38:16Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NDMyNjIy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTQxMDE2", "fields": {"created_at": "2017-01-23T17:54:34Z", "content": "THUMBS_UP", "giver": "HitRam", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3NDU2Mjg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjE0Mzgw", "fields": {"created_at": "2017-01-25T18:49:24Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDI3NTEwNDgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjE3ODIz", "fields": {"created_at": "2017-01-25T20:29:44Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Nosferatul", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NTI4OTUx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjE4MTk3", "fields": {"created_at": "2017-01-25T20:41:19Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDU0NDQy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjI0NjU4", "fields": {"created_at": "2017-01-26T00:50:56Z", "content": "HOORAY", "giver": "gaocegege", "receiver": "traff", "review": "MDEyOklzc3VlQ29tbWVudDI3NTI1NjQ1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjI1MTky", "fields": {"created_at": "2017-01-26T01:21:54Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NTIzNDI1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjI5NTEz", "fields": {"created_at": "2017-01-26T07:27:21Z", "content": "THUMBS_UP", "giver": "sils", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDI3NTI5MjU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjIyMDk4", "fields": {"created_at": "2017-01-25T22:50:37Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3Njc3MDEw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjU4MzI0", "fields": {"created_at": "2017-01-27T00:37:49Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI3NTU0ODc5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjU4ODM1", "fields": {"created_at": "2017-01-27T01:02:22Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1Njk5MzQ1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjUzMjAy", "fields": {"created_at": "2017-01-26T21:10:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3OTM5NjQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY0MDgw", "fields": {"created_at": "2017-01-27T08:08:41Z", "content": "HOORAY", "giver": "gaocegege", "receiver": "nitinkgp23", "review": "MDEyOklzc3VlQ29tbWVudDI3NTYwNzUxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY0NDI0", "fields": {"created_at": "2017-01-27T08:30:50Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3OTM5NjQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY2MTk0", "fields": {"created_at": "2017-01-27T09:51:40Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY2MjEz", "fields": {"created_at": "2017-01-27T09:52:33Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242Njg3MzI1", "fields": {"created_at": "2017-01-27T23:11:07Z", "content": "LAUGH", "giver": "Makman2", "receiver": "nitinkgp23", "review": "MDEyOklzc3VlQ29tbWVudDI3NTc0NDIxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242Njg3MzI2", "fields": {"created_at": "2017-01-27T23:11:09Z", "content": "HOORAY", "giver": "Makman2", "receiver": "nitinkgp23", "review": "MDEyOklzc3VlQ29tbWVudDI3NTc0NDIxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242Njg4MDM0", "fields": {"created_at": "2017-01-27T23:54:52Z", "content": "LAUGH", "giver": "gaocegege", "receiver": "nitinkgp23", "review": "MDEyOklzc3VlQ29tbWVudDI3NTc0NDIxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242Njg4MDMy", "fields": {"created_at": "2017-01-27T23:54:51Z", "content": "HOORAY", "giver": "gaocegege", "receiver": "nitinkgp23", "review": "MDEyOklzc3VlQ29tbWVudDI3NTc0NDIxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242Njk5ODg3", "fields": {"created_at": "2017-01-29T01:41:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "arush0311", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NTU4MTQ0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzA4OTMz", "fields": {"created_at": "2017-01-29T23:30:47Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MzY1MDM5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzA5MTUw", "fields": {"created_at": "2017-01-29T23:54:56Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3ODgzNjAw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzAxMjEy", "fields": {"created_at": "2017-01-29T06:17:33Z", "content": "THUMBS_UP", "giver": "abhsag24", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MzM0Mzcw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzE3NjQz", "fields": {"created_at": "2017-01-30T10:40:17Z", "content": "LAUGH", "giver": "NiklasMM", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NjAyNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzE5MzI0", "fields": {"created_at": "2017-01-30T11:52:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4NDEzODUy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzExNDk2", "fields": {"created_at": "2017-01-30T04:05:18Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "rhemon", "review": "MDEyOklzc3VlQ29tbWVudDI3NTk3NjAzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzIwNzI4", "fields": {"created_at": "2017-01-30T12:58:58Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4NDEzODUy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODAzMjAy", "fields": {"created_at": "2017-02-01T17:51:34Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3NjcyOTE0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODE1MjM2", "fields": {"created_at": "2017-02-02T00:12:19Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDI2MzI5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODE5Mzk3", "fields": {"created_at": "2017-02-02T04:02:45Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODIzMzMx", "fields": {"created_at": "2017-02-02T08:17:23Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODM0MTU2", "fields": {"created_at": "2017-02-02T14:17:43Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MTI3MzU2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODM0NDg4", "fields": {"created_at": "2017-02-02T14:26:00Z", "content": "THUMBS_UP", "giver": "etotientz", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3Njk3MDY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODM0OTc3", "fields": {"created_at": "2017-02-02T14:39:56Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI3Njk3NDg5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODM1MjYy", "fields": {"created_at": "2017-02-02T14:48:01Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDc4MTc2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY1NjYx", "fields": {"created_at": "2017-02-03T10:02:00Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY4NDQ0", "fields": {"created_at": "2017-02-03T11:45:27Z", "content": "CONFUSED", "giver": "sils", "receiver": "underyx", "review": "MDEyOklzc3VlQ29tbWVudDI3NzE4MzY1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY4NzI4", "fields": {"created_at": "2017-02-03T11:56:59Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY4NzMx", "fields": {"created_at": "2017-02-03T11:57:05Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc1Mjc0", "fields": {"created_at": "2017-02-03T15:43:33Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI4MTA4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc3NTkz", "fields": {"created_at": "2017-02-03T16:46:11Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI3NTQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc4MTQy", "fields": {"created_at": "2017-02-03T17:02:34Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NzcyNjc1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc4MTUx", "fields": {"created_at": "2017-02-03T17:02:59Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MjA3MzY4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc4NDY5", "fields": {"created_at": "2017-02-03T17:13:03Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM1MzEw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc4NTgw", "fields": {"created_at": "2017-02-03T17:15:38Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM4NTk1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc4NTk2", "fields": {"created_at": "2017-02-03T17:16:03Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTM4NTc2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODczMTI5", "fields": {"created_at": "2017-02-03T14:45:35Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI2MzkwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODg0MjAw", "fields": {"created_at": "2017-02-03T20:10:00Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Shruti9520", "review": "MDEyOklzc3VlQ29tbWVudDI3NzM0MTE0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODM3", "fields": {"created_at": "2017-02-03T19:26:53Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODQx", "fields": {"created_at": "2017-02-03T19:26:57Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODU0", "fields": {"created_at": "2017-02-03T19:27:13Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODU4", "fields": {"created_at": "2017-02-03T19:27:17Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyOTg2", "fields": {"created_at": "2017-02-03T19:30:46Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MjEw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgzMTM4", "fields": {"created_at": "2017-02-03T19:35:54Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDEyOklzc3VlQ29tbWVudDI3NzMzOTEyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2NzQ2", "fields": {"created_at": "2017-02-04T15:11:22Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDY3MjMx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTQ0", "fields": {"created_at": "2017-02-04T15:34:32Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMTkw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTQx", "fields": {"created_at": "2017-02-04T15:34:26Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzcz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTUx", "fields": {"created_at": "2017-02-04T15:35:35Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzY0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk3MzYx", "fields": {"created_at": "2017-02-04T16:17:48Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NzY5Nzk4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk4MzI5", "fields": {"created_at": "2017-02-04T17:54:13Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTk4ODEw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk5Mzgz", "fields": {"created_at": "2017-02-04T19:40:23Z", "content": "THUMBS_UP", "giver": "aalind0", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzQ2OTcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODkxMzUy", "fields": {"created_at": "2017-02-04T02:48:51Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MzczMzU4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODkzMzgx", "fields": {"created_at": "2017-02-04T08:14:28Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMjk3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTA0MjE3", "fields": {"created_at": "2017-02-05T06:59:16Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDgyNjk4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTA1MzE4", "fields": {"created_at": "2017-02-05T09:55:33Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDgyODI2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTA1MzQ4", "fields": {"created_at": "2017-02-05T10:00:24Z", "content": "LAUGH", "giver": "meetmangukiya", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDg1NjEy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTA4NTE5", "fields": {"created_at": "2017-02-05T16:25:42Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDg1NTg2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTA4NTIw", "fields": {"created_at": "2017-02-05T16:25:47Z", "content": "LAUGH", "giver": "Mixih", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDg1NjEy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTAzODc3", "fields": {"created_at": "2017-02-05T05:47:36Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzMjAx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTE5MTA4", "fields": {"created_at": "2017-02-06T08:28:49Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NzU5NTgxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTEwNTU5", "fields": {"created_at": "2017-02-05T19:51:42Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzU0MTkzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTI1NDMx", "fields": {"created_at": "2017-02-06T12:39:17Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NTE0MDc2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTI3NTEy", "fields": {"created_at": "2017-02-06T14:00:53Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NTg4OTk0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTM1MjMy", "fields": {"created_at": "2017-02-06T17:41:04Z", "content": "THUMBS_UP", "giver": "Udayan12167", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDkzMDg3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTMyNDc1", "fields": {"created_at": "2017-02-06T16:22:14Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "Mariatta", "review": "MDEyOklzc3VlQ29tbWVudDI3NzU1NDUzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTQ2Mzk3", "fields": {"created_at": "2017-02-06T23:49:51Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3Nzg0ODc1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTQ4Mjg5", "fields": {"created_at": "2017-02-07T01:24:13Z", "content": "THUMBS_UP", "giver": "yukiisbored", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDkzMDg3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTQ5ODUz", "fields": {"created_at": "2017-02-07T02:51:57Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDU2Mjc0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTQwMjE1", "fields": {"created_at": "2017-02-06T20:17:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "adrienverge", "review": "MDEyOklzc3VlQ29tbWVudDI3NzgwMDQwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU0NzA4", "fields": {"created_at": "2017-02-07T08:12:25Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MzM4NDU3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2MjAx", "fields": {"created_at": "2017-02-07T09:11:18Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcwNTY4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2Mzkw", "fields": {"created_at": "2017-02-07T09:18:19Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzczNjQ4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2NTQ0", "fields": {"created_at": "2017-02-07T09:23:13Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNzM3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2NTY5", "fields": {"created_at": "2017-02-07T09:23:53Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyOTA5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2NTcx", "fields": {"created_at": "2017-02-07T09:23:55Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNTQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTM1", "fields": {"created_at": "2017-02-07T10:25:38Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1NzMz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTM4", "fields": {"created_at": "2017-02-07T10:25:41Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODQx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTQ3", "fields": {"created_at": "2017-02-07T10:25:51Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODAz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTQz", "fields": {"created_at": "2017-02-07T10:25:47Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1OTM4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTU1", "fields": {"created_at": "2017-02-07T10:26:04Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg2NjEy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4ODQx", "fields": {"created_at": "2017-02-07T10:36:03Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNTQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU5Mjkx", "fields": {"created_at": "2017-02-07T10:51:28Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMjM5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTUzMDYw", "fields": {"created_at": "2017-02-07T06:50:20Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI3NzQzMTA0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTY2NzI3", "fields": {"created_at": "2017-02-07T14:56:53Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "rahulkrishnan98", "review": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTYzNjI3", "fields": {"created_at": "2017-02-07T13:28:41Z", "content": "THUMBS_UP", "giver": "incorrectusername", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzY3NjYz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTc0MTA5", "fields": {"created_at": "2017-02-07T18:07:30Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5ODU1NjAx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTc0NDI0", "fields": {"created_at": "2017-02-07T18:14:31Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODA4NTg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTc0OTgx", "fields": {"created_at": "2017-02-07T18:27:41Z", "content": "THUMBS_UP", "giver": "maweki", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODA4MDE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0Nzk2", "fields": {"created_at": "2017-02-07T23:03:01Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MTYy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0Nzk3", "fields": {"created_at": "2017-02-07T23:03:04Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MzEx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODA5", "fields": {"created_at": "2017-02-07T23:03:24Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NTE3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODE2", "fields": {"created_at": "2017-02-07T23:03:34Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzMx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODE4", "fields": {"created_at": "2017-02-07T23:03:37Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MzM3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODE5", "fields": {"created_at": "2017-02-07T23:03:40Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4NjIw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODEx", "fields": {"created_at": "2017-02-07T23:03:28Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3Njc1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODEz", "fields": {"created_at": "2017-02-07T23:03:31Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MDU5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODIx", "fields": {"created_at": "2017-02-07T23:03:43Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzU3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODIy", "fields": {"created_at": "2017-02-07T23:03:47Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4Njg5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg4Nzky", "fields": {"created_at": "2017-02-08T02:19:41Z", "content": "THUMBS_UP", "giver": "rahulkrishnan98", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzYzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTk2MzI5", "fields": {"created_at": "2017-02-08T08:59:04Z", "content": "THUMBS_UP", "giver": "rahulkrishnan98", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3ODIyMzgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTk4OTQy", "fields": {"created_at": "2017-02-08T10:22:43Z", "content": "THUMBS_UP", "giver": "rahulkrishnan98", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAyODE4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTkxODM0", "fields": {"created_at": "2017-02-08T05:29:08Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "rahulkrishnan98", "review": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDA0NjUw", "fields": {"created_at": "2017-02-08T13:37:04Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODA4NTg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE2Nzk0", "fields": {"created_at": "2017-02-08T18:58:39Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMzU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE2ODA2", "fields": {"created_at": "2017-02-08T18:59:11Z", "content": "THUMBS_UP", "giver": "Sanny26", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0MDkyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE2ODM0", "fields": {"created_at": "2017-02-08T18:59:42Z", "content": "THUMBS_UP", "giver": "Sanny26", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI3ODQyNTI0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3Mjc4", "fields": {"created_at": "2017-02-08T19:11:51Z", "content": "THUMBS_UP", "giver": "sims1253", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0MzQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3NDQ1", "fields": {"created_at": "2017-02-08T19:17:00Z", "content": "THUMBS_UP", "giver": "sims1253", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NDQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3NTMy", "fields": {"created_at": "2017-02-08T19:19:33Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NTU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3NzYz", "fields": {"created_at": "2017-02-08T19:25:25Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NDQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE4NjU3", "fields": {"created_at": "2017-02-08T19:49:51Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0MDkyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE4Njkz", "fields": {"created_at": "2017-02-08T19:50:40Z", "content": "LAUGH", "giver": "meetmangukiya", "receiver": "aptrishu", "review": "MDEyOklzc3VlQ29tbWVudDI3ODQ0MDU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDExNzQz", "fields": {"created_at": "2017-02-08T16:38:40Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4MDIyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEyNjE5", "fields": {"created_at": "2017-02-08T17:01:22Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEyNzQ3", "fields": {"created_at": "2017-02-08T17:04:10Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTI5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEyNzU3", "fields": {"created_at": "2017-02-08T17:04:22Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEzODU4", "fields": {"created_at": "2017-02-08T17:34:24Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM5MTI4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDIwMjk2", "fields": {"created_at": "2017-02-08T20:36:57Z", "content": "THUMBS_UP", "giver": "raj-maurya", "receiver": "dracarys09", "review": "MDEyOklzc3VlQ29tbWVudDI3ODQ0MDQ1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDIwNTEz", "fields": {"created_at": "2017-02-08T20:43:42Z", "content": "THUMBS_UP", "giver": "raj-maurya", "receiver": "arnab1896", "review": "MDEyOklzc3VlQ29tbWVudDI3ODQxOTcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDU5OTYz", "fields": {"created_at": "2017-02-09T20:25:07Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "dracarys09", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQwMzE5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDYwMTQ1", "fields": {"created_at": "2017-02-09T20:31:07Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQwMDYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDg4MDMw", "fields": {"created_at": "2017-02-10T15:59:44Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQ2MjkyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDg4Mjgx", "fields": {"created_at": "2017-02-10T16:06:46Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQ2MzI2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDg5MDE1", "fields": {"created_at": "2017-02-10T16:27:28Z", "content": "LAUGH", "giver": "Makman2", "receiver": "Sanny26", "review": "MDEyOklzc3VlQ29tbWVudDI3ODk2NzY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDg5MDEz", "fields": {"created_at": "2017-02-10T16:27:26Z", "content": "HOORAY", "giver": "Makman2", "receiver": "Sanny26", "review": "MDEyOklzc3VlQ29tbWVudDI3ODk2NzY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTA0NDMw", "fields": {"created_at": "2017-02-11T05:24:30Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDI3ODk5NTU1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTA4OTIw", "fields": {"created_at": "2017-02-11T15:25:46Z", "content": "HOORAY", "giver": "RohanVB", "receiver": "srikanth100", "review": "MDEyOklzc3VlQ29tbWVudDI3OTE0MzkyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTE2MTI4", "fields": {"created_at": "2017-02-12T05:51:00Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Techievena", "review": "MDEyOklzc3VlQ29tbWVudDI3OTE5ODA5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTE4NjUy", "fields": {"created_at": "2017-02-12T12:31:53Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "Techievena", "review": "MDEyOklzc3VlQ29tbWVudDI3OTE5ODA5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTEwNjcz", "fields": {"created_at": "2017-02-11T18:17:14Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDI3ODk5NTU1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTEyNjAx", "fields": {"created_at": "2017-02-11T21:35:27Z", "content": "THUMBS_UP", "giver": "arush0311", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY3Njk1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTEyNzQ5", "fields": {"created_at": "2017-02-11T21:52:05Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI3OTE3NzM0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTIyNTc1", "fields": {"created_at": "2017-02-12T19:30:47Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "arush0311", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY3NDU5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTIyNTc2", "fields": {"created_at": "2017-02-12T19:30:48Z", "content": "LAUGH", "giver": "SanketDG", "receiver": "arush0311", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY3NDU5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTM5NTc4", "fields": {"created_at": "2017-02-13T12:59:14Z", "content": "HOORAY", "giver": "srikanth100", "receiver": "impmihai", "review": "MDEyOklzc3VlQ29tbWVudDI3OTM4NDY2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTQzNDY5", "fields": {"created_at": "2017-02-13T15:02:02Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY0ODA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MTcwNzYw", "fields": {"created_at": "2017-02-14T09:05:13Z", "content": "THUMBS_UP", "giver": "zenara", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDI3OTYyOTMwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjAyNzA3", "fields": {"created_at": "2017-02-15T03:42:58Z", "content": "CONFUSED", "giver": "jayvdb", "receiver": "Warewolf96", "review": "MDEyOklzc3VlQ29tbWVudDI3NzU4NDM1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjEwOTQ3", "fields": {"created_at": "2017-02-15T10:40:45Z", "content": "THUMBS_UP", "giver": "dracarys09", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTI0NzkyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjI3NzQ0", "fields": {"created_at": "2017-02-15T18:09:18Z", "content": "THUMBS_UP", "giver": "incorrectusername", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI4MDA0ODE4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjM4NDEx", "fields": {"created_at": "2017-02-15T23:24:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTI2ODkxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjU1Mjg3", "fields": {"created_at": "2017-02-16T12:35:33Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTUwMjkzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjU1Mzc2", "fields": {"created_at": "2017-02-16T12:38:36Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTQwMzYyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjY0MTQ3", "fields": {"created_at": "2017-02-16T16:48:40Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTU2NDM1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjY0MzI1", "fields": {"created_at": "2017-02-16T16:53:22Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTM2NDIyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjY3MTcz", "fields": {"created_at": "2017-02-16T18:11:39Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI4MDM5MjQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MjY3ODQx", "fields": {"created_at": "2017-02-16T18:30:45Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTU2NTAxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Mjk0NDcw", "fields": {"created_at": "2017-02-17T13:42:25Z", "content": "THUMBS_UP", "giver": "yukiisbored", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDI4MDI2Njk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Mjk2ODQ1", "fields": {"created_at": "2017-02-17T14:46:14Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDI3OTk0NDQ3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzE2NzQx", "fields": {"created_at": "2017-02-18T04:46:28Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Shade5", "review": "MDEyOklzc3VlQ29tbWVudDI4MDgxNzQ4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzE3MjAw", "fields": {"created_at": "2017-02-18T06:01:44Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTg4NTUxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzE3MzAx", "fields": {"created_at": "2017-02-18T06:22:05Z", "content": "THUMBS_UP", "giver": "Harshish", "receiver": "Shade5", "review": "MDEyOklzc3VlQ29tbWVudDI4MDgxNzQ4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzI0MTUw", "fields": {"created_at": "2017-02-18T20:30:35Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwMTY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzI3NjQx", "fields": {"created_at": "2017-02-19T05:15:12Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI4MDg3NjcwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzI4MDE1", "fields": {"created_at": "2017-02-19T06:19:56Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwOTQxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzI4MDE2", "fields": {"created_at": "2017-02-19T06:20:02Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwOTQxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzI4MDIx", "fields": {"created_at": "2017-02-19T06:20:52Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwOTQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzI5Mzk1", "fields": {"created_at": "2017-02-19T10:19:44Z", "content": "THUMBS_UP", "giver": "Harshish", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI4MDg0OTM4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzM0OTY5", "fields": {"created_at": "2017-02-19T20:38:44Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkwMjg0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzM5MzAy", "fields": {"created_at": "2017-02-20T03:35:34Z", "content": "THUMBS_UP", "giver": "Harshish", "receiver": "sgsh123", "review": "MDEyOklzc3VlQ29tbWVudDI4MDkxMzkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzM5NDY4", "fields": {"created_at": "2017-02-20T03:48:21Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkyNDkyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzMwMTUz", "fields": {"created_at": "2017-02-19T11:59:14Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "rhemon", "review": "MDEyOklzc3VlQ29tbWVudDI4MDg5MjU3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzMwODM3", "fields": {"created_at": "2017-02-19T13:20:18Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "rhemon", "review": "MDEyOklzc3VlQ29tbWVudDI4MDg5MjU3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzMzNzM0", "fields": {"created_at": "2017-02-19T18:29:37Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTkyNDkyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MzczMDQ2", "fields": {"created_at": "2017-02-21T05:54:20Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Harshish", "review": "MDEyOklzc3VlQ29tbWVudDI4MTIzMTgzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Mzk4MTUz", "fields": {"created_at": "2017-02-21T19:25:21Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "satwikkansal", "review": "MDEyOklzc3VlQ29tbWVudDI4MTI0NjE5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NDU0OTc4", "fields": {"created_at": "2017-02-23T07:52:40Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDI4MTczODgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NDUzNTE2", "fields": {"created_at": "2017-02-23T06:33:54Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjY0NzE0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NDc3MDEy", "fields": {"created_at": "2017-02-23T18:49:05Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk2NjgzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NDcxMTQ4", "fields": {"created_at": "2017-02-23T16:14:30Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "Techievena", "review": "MDEyOklzc3VlQ29tbWVudDI4MTg0NjQ4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NDcyMDQx", "fields": {"created_at": "2017-02-23T16:35:44Z", "content": "THUMBS_UP", "giver": "incorrectusername", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI4MjAzODUyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NDk4MDI0", "fields": {"created_at": "2017-02-24T10:21:12Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "arnab1896", "review": "MDEyOklzc3VlQ29tbWVudDI4MjI1NDE0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NDkyNTU1", "fields": {"created_at": "2017-02-24T06:18:00Z", "content": "THUMBS_UP", "giver": "ayushin78", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDI4MjA3NTE2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NTEwNjYx", "fields": {"created_at": "2017-02-24T17:31:10Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjk4NjA2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NTI2MTQ5", "fields": {"created_at": "2017-02-25T11:14:49Z", "content": "THUMBS_UP", "giver": "alisianoi", "receiver": "tabias", "review": "MDEyOklzc3VlQ29tbWVudDI4MjQ3NzM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NTI3MDE1", "fields": {"created_at": "2017-02-25T13:14:06Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3ODM3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NTUyMzk2", "fields": {"created_at": "2017-02-27T08:18:04Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "sahilarora535", "review": "MDEyOklzc3VlQ29tbWVudDI4MjY1NDY2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NTk3MjEz", "fields": {"created_at": "2017-02-28T13:08:41Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQxODI4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NTk3NDc5", "fields": {"created_at": "2017-02-28T13:18:37Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQyNzA3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NTkyNjE1", "fields": {"created_at": "2017-02-28T10:07:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDEyOklzc3VlQ29tbWVudDI4Mjk2NTI1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjA1NDQ4", "fields": {"created_at": "2017-02-28T16:55:27Z", "content": "THUMBS_UP", "giver": "Harshish", "receiver": "Siddhartha1234", "review": "MDEyOklzc3VlQ29tbWVudDI4MjY1ODc4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjA1NDYx", "fields": {"created_at": "2017-02-28T16:55:42Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQ5NTM1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjI4NDY3", "fields": {"created_at": "2017-03-01T09:37:00Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "vaishnavm217", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY0MTY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjIyNDQx", "fields": {"created_at": "2017-03-01T04:20:32Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU3MTA5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjMyNTE3", "fields": {"created_at": "2017-03-01T11:58:41Z", "content": "THUMBS_UP", "giver": "vaishnavm217", "receiver": "satwikkansal", "review": "MDEyOklzc3VlQ29tbWVudDI4MzMwMzYzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjQ4NjIx", "fields": {"created_at": "2017-03-01T19:46:36Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzc1NTMxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjQwMTY0", "fields": {"created_at": "2017-03-01T15:55:31Z", "content": "HEART", "giver": "Makman2", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4MzM2ODk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjUwODA3", "fields": {"created_at": "2017-03-01T20:54:09Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzMwMDgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjY0NDY0", "fields": {"created_at": "2017-03-02T07:57:36Z", "content": "THUMBS_UP", "giver": "tabias", "receiver": "myint", "review": "MDEyOklzc3VlQ29tbWVudDI4MzU0NjY0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjY3Mzg4", "fields": {"created_at": "2017-03-02T09:39:13Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI4MzYwNDM1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjYxODYy", "fields": {"created_at": "2017-03-02T05:24:59Z", "content": "THUMBS_UP", "giver": "incorrectusername", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4MzM2ODk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjcxODIy", "fields": {"created_at": "2017-03-02T12:08:38Z", "content": "THUMBS_UP", "giver": "yashLadha", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI4MzYyOTE0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Njg3Mjg0", "fields": {"created_at": "2017-03-02T19:22:40Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzkyNzc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjgyODg5", "fields": {"created_at": "2017-03-02T17:11:36Z", "content": "THUMBS_UP", "giver": "nemaniarjun", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzcxOTMzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NjgyODgz", "fields": {"created_at": "2017-03-02T17:11:31Z", "content": "THUMBS_UP", "giver": "nemaniarjun", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzcxODU1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Njk5NjQx", "fields": {"created_at": "2017-03-03T03:36:19Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4MzM2ODk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Njk5Nzc4", "fields": {"created_at": "2017-03-03T03:46:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDEyOklzc3VlQ29tbWVudDI4MzI0ODAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Njk5Nzgz", "fields": {"created_at": "2017-03-03T03:46:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU1NjQ2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NzM0NjIw", "fields": {"created_at": "2017-03-04T09:08:53Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI4Mzk2MTMxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NzM3MzAx", "fields": {"created_at": "2017-03-04T15:18:24Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI4Mzg2NDc4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NzM4NTQy", "fields": {"created_at": "2017-03-04T17:26:05Z", "content": "THUMBS_UP", "giver": "Yashwanthv21", "receiver": "Techievena", "review": "MDEyOklzc3VlQ29tbWVudDI4NDE1NzUyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NzM5ODc2", "fields": {"created_at": "2017-03-04T19:55:15Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzODIx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NzQ3Nzc2", "fields": {"created_at": "2017-03-05T13:59:43Z", "content": "LAUGH", "giver": "SanketDG", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDY0ODA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NzQ4MTQ4", "fields": {"created_at": "2017-03-05T14:42:22Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "aptrishu", "review": "MDEyOklzc3VlQ29tbWVudDI4NDIxMzI0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NzU2MzE5", "fields": {"created_at": "2017-03-06T04:21:39Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "supergr35", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDE5OTU1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Nzc2NTU5", "fields": {"created_at": "2017-03-06T17:02:41Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM2NTI1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Nzg1MTE5", "fields": {"created_at": "2017-03-06T21:04:04Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDI4NDUyMTEwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Nzk0MDYz", "fields": {"created_at": "2017-03-07T03:13:46Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "rubdos", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDQ1MTIzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243ODE1NTUy", "fields": {"created_at": "2017-03-07T16:46:23Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Udayan12167", "review": "MDEyOklzc3VlQ29tbWVudDI4NDY3MzU1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243ODE5NDk5", "fields": {"created_at": "2017-03-07T18:28:22Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI4NDgxMTE1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243ODIyNjQ5", "fields": {"created_at": "2017-03-07T19:53:20Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI4NDgxMTE1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243ODM3NzU0", "fields": {"created_at": "2017-03-08T05:10:48Z", "content": "LAUGH", "giver": "yash-nisar", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDgzMjkwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243ODQwMzE5", "fields": {"created_at": "2017-03-08T06:53:11Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDg1MjY1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243ODU3ODY2", "fields": {"created_at": "2017-03-08T16:17:45Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDk0NTIxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243ODU3ODcx", "fields": {"created_at": "2017-03-08T16:17:52Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDk0NDMyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTE4OTM1", "fields": {"created_at": "2017-03-10T05:10:06Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "arjunsinghy96", "review": "MDEyOklzc3VlQ29tbWVudDI4NTQ2ODU0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTI2Nzkx", "fields": {"created_at": "2017-03-10T11:07:31Z", "content": "THUMBS_UP", "giver": "d3db0t", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI4NTYzNzQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTI5MjQ3", "fields": {"created_at": "2017-03-10T12:59:16Z", "content": "THUMBS_UP", "giver": "d3db0t", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI4NTY1ODM4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTM2MTM4", "fields": {"created_at": "2017-03-10T16:31:29Z", "content": "THUMBS_UP", "giver": "arjunsinghy96", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTQwMzk0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTMyMTY1", "fields": {"created_at": "2017-03-10T14:42:33Z", "content": "THUMBS_UP", "giver": "lshobith", "receiver": "arjunsinghy96", "review": "MDEyOklzc3VlQ29tbWVudDI4NTYzNjIzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTU2ODky", "fields": {"created_at": "2017-03-11T17:33:10Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI4NTg3ODk2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTU3NzA0", "fields": {"created_at": "2017-03-11T18:57:32Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI4NTg3OTc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTU3NzAy", "fields": {"created_at": "2017-03-11T18:57:27Z", "content": "LAUGH", "giver": "RJ722", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI4NTg3OTc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTU5MzA3", "fields": {"created_at": "2017-03-11T21:58:12Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI4NTg5MjUxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTY0OTAz", "fields": {"created_at": "2017-03-12T12:07:54Z", "content": "THUMBS_UP", "giver": "arjunsinghy96", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI4NTkzODYyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTY1OTc0", "fields": {"created_at": "2017-03-12T14:16:45Z", "content": "THUMBS_UP", "giver": "proishan11", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU1ODQxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTY1OTcy", "fields": {"created_at": "2017-03-12T14:16:39Z", "content": "THUMBS_UP", "giver": "proishan11", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU1ODU1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTY2NjI0", "fields": {"created_at": "2017-03-12T15:29:52Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "proishan11", "review": "MDEyOklzc3VlQ29tbWVudDI4NTk0Nzg3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTY2NjY4", "fields": {"created_at": "2017-03-12T15:35:40Z", "content": "THUMBS_UP", "giver": "proishan11", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU2MDIzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTY2Njcx", "fields": {"created_at": "2017-03-12T15:35:47Z", "content": "THUMBS_UP", "giver": "proishan11", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU2MDM1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTY2Nzk5", "fields": {"created_at": "2017-03-12T15:49:26Z", "content": "THUMBS_UP", "giver": "proishan11", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTU2MDY5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243OTYzNjA5", "fields": {"created_at": "2017-03-12T09:28:26Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Udayan12167", "review": "MDEyOklzc3VlQ29tbWVudDI4MTgyOTE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDA4OTQ0", "fields": {"created_at": "2017-03-14T02:06:29Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4NjI4MTM1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDA4OTQ1", "fields": {"created_at": "2017-03-14T02:06:31Z", "content": "LAUGH", "giver": "Makman2", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4NjI4MTM1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDE0OTUw", "fields": {"created_at": "2017-03-14T08:25:37Z", "content": "THUMBS_UP", "giver": "nikita1412", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4NjMxOTAwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDExMTM4", "fields": {"created_at": "2017-03-14T04:35:52Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "Techievena", "review": "MDEyOklzc3VlQ29tbWVudDI4NjA1ODE1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDExNDA0", "fields": {"created_at": "2017-03-14T04:55:10Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDI4NjIzMTI3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDExNDA1", "fields": {"created_at": "2017-03-14T04:55:14Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4NjMxOTAwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDMxNTQ3", "fields": {"created_at": "2017-03-14T16:27:41Z", "content": "THUMBS_UP", "giver": "d3db0t", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4NjMyMDE1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDMxNTUy", "fields": {"created_at": "2017-03-14T16:27:46Z", "content": "THUMBS_UP", "giver": "d3db0t", "receiver": "Techievena", "review": "MDEyOklzc3VlQ29tbWVudDI4NjA1ODE1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDQ0NzYy", "fields": {"created_at": "2017-03-14T22:39:50Z", "content": "THUMBS_UP", "giver": "d3db0t", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4NjU3MjY3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDQ1NDMz", "fields": {"created_at": "2017-03-14T23:09:13Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "d3db0t", "review": "MDEyOklzc3VlQ29tbWVudDI4NjU4NDA3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDQzMzA2", "fields": {"created_at": "2017-03-14T21:46:13Z", "content": "THUMBS_UP", "giver": "d3db0t", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4NjU3MDA3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDg2Mzc5", "fields": {"created_at": "2017-03-15T23:44:47Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDI4Njc0NDA3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDkzNTI1", "fields": {"created_at": "2017-03-16T07:11:48Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI4Njk3MjY0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTA4NzYw", "fields": {"created_at": "2017-03-16T15:19:43Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDI4NzA4Nzg1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTMyMDk3", "fields": {"created_at": "2017-03-17T06:35:58Z", "content": "THUMBS_UP", "giver": "arjunsinghy96", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTk3ODc3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTMzMDA2", "fields": {"created_at": "2017-03-17T07:27:27Z", "content": "THUMBS_UP", "giver": "d3db0t", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI4NzE3NDM0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTc2NTQ5", "fields": {"created_at": "2017-03-19T14:16:27Z", "content": "LAUGH", "giver": "meetmangukiya", "receiver": "madhukar01", "review": "MDEyOklzc3VlQ29tbWVudDI4NzYwMjIwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTc2NTkz", "fields": {"created_at": "2017-03-19T14:21:56Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4NjU4Mzc4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTc4MDQ5", "fields": {"created_at": "2017-03-19T16:49:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sahilarora535", "review": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTc4MzQ5", "fields": {"created_at": "2017-03-19T17:18:51Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjgxMTk5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTk3OTYw", "fields": {"created_at": "2017-03-20T14:35:47Z", "content": "THUMBS_UP", "giver": "PierceAndy", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjkxMjIxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTk4NDU0", "fields": {"created_at": "2017-03-20T14:45:54Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "twinone", "review": "MDEyOklzc3VlQ29tbWVudDI4Nzc4MDA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTkyMzk1", "fields": {"created_at": "2017-03-20T11:46:02Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDI4NzYxNTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjAyMDg1", "fields": {"created_at": "2017-03-20T16:07:16Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "PierceAndy", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjkzOTU2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjE1OTQ1", "fields": {"created_at": "2017-03-20T22:49:16Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI4NzkyMTEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjI2NDMw", "fields": {"created_at": "2017-03-21T08:39:21Z", "content": "THUMBS_UP", "giver": "proishan11", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjg5NTM2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjI2NTM4", "fields": {"created_at": "2017-03-21T08:42:39Z", "content": "THUMBS_UP", "giver": "proishan11", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDI4NzkwMTQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjIxMzc0", "fields": {"created_at": "2017-03-21T03:35:14Z", "content": "THUMBS_UP", "giver": "PierceAndy", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4Nzg3MTkyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjM1MDI0", "fields": {"created_at": "2017-03-21T13:26:27Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzE1MjA1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjQ1NjI5", "fields": {"created_at": "2017-03-21T17:29:16Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI4NzY0MDUxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjUxMzkw", "fields": {"created_at": "2017-03-21T20:01:47Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU1NTE5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjY5MDUw", "fields": {"created_at": "2017-03-22T09:33:00Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "kaustubhhiware", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzMzNTI4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjYwOTI0", "fields": {"created_at": "2017-03-22T02:18:09Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI4ODE5OTgwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjYzNDIy", "fields": {"created_at": "2017-03-22T04:55:57Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzMzMjY2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Mjc1NTg5", "fields": {"created_at": "2017-03-22T13:21:06Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzQwNDc4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Mjc2MDEw", "fields": {"created_at": "2017-03-22T13:31:09Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzQwNzYwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjcwNzM2", "fields": {"created_at": "2017-03-22T10:25:24Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzMzMjIxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjcwNzMz", "fields": {"created_at": "2017-03-22T10:25:20Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzMyMzAwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjcxMjUy", "fields": {"created_at": "2017-03-22T10:44:24Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI4ODM1ODQ5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjczNTQ3", "fields": {"created_at": "2017-03-22T12:09:38Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzIwNDk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Mjg3MjYz", "fields": {"created_at": "2017-03-22T17:44:19Z", "content": "THUMBS_UP", "giver": "proishan11", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4ODQ1NjI4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjgxMDU3", "fields": {"created_at": "2017-03-22T15:24:31Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM3NzYyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MjgxMjc1", "fields": {"created_at": "2017-03-22T15:29:23Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "madhukar01", "review": "MDEyOklzc3VlQ29tbWVudDI4ODI5OTYwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzAxNzQ5", "fields": {"created_at": "2017-03-23T02:47:57Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzQ0Mzc1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzAzMDQ0", "fields": {"created_at": "2017-03-23T04:06:07Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzU3NzU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzAzMTE2", "fields": {"created_at": "2017-03-23T04:11:59Z", "content": "THUMBS_UP", "giver": "jack17529", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI4ODUyODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzAzMTE3", "fields": {"created_at": "2017-03-23T04:12:02Z", "content": "THUMBS_UP", "giver": "jack17529", "receiver": "Adrianzatreanu", "review": "MDEyOklzc3VlQ29tbWVudDI4ODU1MjYwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzE3ODgw", "fields": {"created_at": "2017-03-23T13:59:08Z", "content": "THUMBS_UP", "giver": "jack17529", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI4ODY0Njc3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzEyNjIy", "fields": {"created_at": "2017-03-23T11:18:34Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "AsnelChristian", "review": "MDEyOklzc3VlQ29tbWVudDI4ODY4NzkxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzEzMzAz", "fields": {"created_at": "2017-03-23T11:44:46Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzY0NjUzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzQ1NDA1", "fields": {"created_at": "2017-03-24T04:39:50Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "madhukar01", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzgyMDE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzQ5MTYw", "fields": {"created_at": "2017-03-24T08:19:54Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzg0Njg2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzU1MzI2", "fields": {"created_at": "2017-03-24T11:54:16Z", "content": "HOORAY", "giver": "proishan11", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI4ODcyOTA1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzUzNjUw", "fields": {"created_at": "2017-03-24T10:51:31Z", "content": "THUMBS_UP", "giver": "jack17529", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI4ODk0OTUzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzYwNDQ4", "fields": {"created_at": "2017-03-24T14:31:51Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzg0Njg2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzYzOTM1", "fields": {"created_at": "2017-03-24T15:56:38Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzc1ODY1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzcxNjI4", "fields": {"created_at": "2017-03-24T19:32:52Z", "content": "THUMBS_UP", "giver": "jack17529", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4OTExNjc0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Mzg0OTgy", "fields": {"created_at": "2017-03-25T17:05:36Z", "content": "LAUGH", "giver": "Makman2", "receiver": "Shade5", "review": "MDEyOklzc3VlQ29tbWVudDI4OTE5MjI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Mzg3Nzc0", "fields": {"created_at": "2017-03-25T22:19:19Z", "content": "THUMBS_UP", "giver": "jack17529", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI4OTI0MzI4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Mzg5NzQz", "fields": {"created_at": "2017-03-26T03:39:30Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "alisianoi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA0MTc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzgwMDY1", "fields": {"created_at": "2017-03-25T05:21:30Z", "content": "THUMBS_UP", "giver": "jack17529", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDI4OTA3NTQxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzgwODU2", "fields": {"created_at": "2017-03-25T07:48:09Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzg0Njg2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzgyNDEz", "fields": {"created_at": "2017-03-25T11:58:13Z", "content": "THUMBS_UP", "giver": "alisianoi", "receiver": "myint", "review": "MDEyOklzc3VlQ29tbWVudDI4MzU0NjY0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzgzMDIx", "fields": {"created_at": "2017-03-25T13:19:18Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "alisianoi", "review": "MDEyOklzc3VlQ29tbWVudDI4OTIwODMwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Mzk1OTE2", "fields": {"created_at": "2017-03-26T17:53:57Z", "content": "HOORAY", "giver": "jack17529", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI4OTI5NTc4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzkxNTk5", "fields": {"created_at": "2017-03-26T09:03:14Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI4OTIzOTU3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzkzMDA0", "fields": {"created_at": "2017-03-26T12:33:50Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "madhukar01", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1NDczNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzkzMDE4", "fields": {"created_at": "2017-03-26T12:34:47Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "vijeth-aradhya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MjcxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDA1ODAz", "fields": {"created_at": "2017-03-27T06:20:09Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "alisianoi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2ODM1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDA1ODEy", "fields": {"created_at": "2017-03-27T06:20:30Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "alisianoi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2ODQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDA1OTkz", "fields": {"created_at": "2017-03-27T06:30:09Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "alisianoi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2ODQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDI2MzI2", "fields": {"created_at": "2017-03-27T17:23:01Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODE1MjMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDI3NzA3", "fields": {"created_at": "2017-03-27T17:57:23Z", "content": "LAUGH", "giver": "RJ722", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI4OTM3MjY3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDQ0MDc0", "fields": {"created_at": "2017-03-28T05:57:00Z", "content": "HOORAY", "giver": "RJ722", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI4OTY3MDk2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDQ4NDM5", "fields": {"created_at": "2017-03-28T08:50:11Z", "content": "THUMBS_UP", "giver": "shrutishrm512", "receiver": "rohanraju97", "review": "MDEyOklzc3VlQ29tbWVudDI4OTcwMDY1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDQ4NDk1", "fields": {"created_at": "2017-03-28T08:51:53Z", "content": "LAUGH", "giver": "NiklasMM", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDI4OTcwNTA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDQyNDQz", "fields": {"created_at": "2017-03-28T04:02:06Z", "content": "HOORAY", "giver": "RJ722", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4OTU2MDk3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDQzNTU0", "fields": {"created_at": "2017-03-28T05:19:31Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Techievena", "review": "MDEyOklzc3VlQ29tbWVudDI4OTY2NDMzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDU1MjQx", "fields": {"created_at": "2017-03-28T12:41:10Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI4OTYwMjUwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDUwNjA3", "fields": {"created_at": "2017-03-28T09:49:21Z", "content": "LAUGH", "giver": "RohanVB", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDI4OTcwNTA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDUwOTA1", "fields": {"created_at": "2017-03-28T09:59:39Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1NTc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDY1NDcx", "fields": {"created_at": "2017-03-28T16:55:43Z", "content": "THUMBS_UP", "giver": "rohanraju97", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4OTgzNDM1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDY1NTYx", "fields": {"created_at": "2017-03-28T16:58:10Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODMyNTIxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDcwOTAx", "fields": {"created_at": "2017-03-28T19:19:24Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "arjunsinghy96", "review": "MDEyOklzc3VlQ29tbWVudDI4OTg3MTk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDcxMDA4", "fields": {"created_at": "2017-03-28T19:23:24Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzkxNzI3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDk4NzE1", "fields": {"created_at": "2017-03-29T13:47:08Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODYyMTcyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NDk5NTQz", "fields": {"created_at": "2017-03-29T14:06:28Z", "content": "LAUGH", "giver": "RJ722", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDI4OTcwNTA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTA2MTcy", "fields": {"created_at": "2017-03-29T16:39:40Z", "content": "THUMBS_UP", "giver": "Udayan12167", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcxMzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTA2MzY5", "fields": {"created_at": "2017-03-29T16:44:37Z", "content": "HOORAY", "giver": "RJ722", "receiver": "Udayan12167", "review": "MDEyOklzc3VlQ29tbWVudDI5MDE0Nzc4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTA2OTEz", "fields": {"created_at": "2017-03-29T17:00:21Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDEyOklzc3VlQ29tbWVudDI5MDEwOTkxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTI0NDI4", "fields": {"created_at": "2017-03-30T04:11:34Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODUxMjEwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTM3NjU2", "fields": {"created_at": "2017-03-30T12:51:27Z", "content": "THUMBS_UP", "giver": "HyungKun", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI5MDM5NjYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTM5NDQy", "fields": {"created_at": "2017-03-30T13:40:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyOTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTM5NTYw", "fields": {"created_at": "2017-03-30T13:43:08Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyODQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTQ4NTIz", "fields": {"created_at": "2017-03-30T17:25:54Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDI5MDQwNjYwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTc2NDEw", "fields": {"created_at": "2017-03-31T12:39:04Z", "content": "THUMBS_UP", "giver": "HyungKun", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI5MDY5OTA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTkzMjM5", "fields": {"created_at": "2017-03-31T21:34:33Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyNTk3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTkzNzcw", "fields": {"created_at": "2017-03-31T21:55:29Z", "content": "LAUGH", "giver": "userzimmermann", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI1NzE3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjAwNTgy", "fields": {"created_at": "2017-04-01T10:14:21Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "arjunsinghy96", "review": "MDEyOklzc3VlQ29tbWVudDI5MDkxMDcwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE0MTQ5", "fields": {"created_at": "2017-04-02T15:35:08Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjE5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE0MjE1", "fields": {"created_at": "2017-04-02T15:41:04Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI5MDk5MzE2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE0ODgz", "fields": {"created_at": "2017-04-02T16:51:38Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMjcyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzM4", "fields": {"created_at": "2017-04-02T19:19:07Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjI4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzMw", "fields": {"created_at": "2017-04-02T19:18:39Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMjcyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzQ0", "fields": {"created_at": "2017-04-02T19:19:30Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMzc2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzQw", "fields": {"created_at": "2017-04-02T19:19:09Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "AsnelChristian", "review": "MDEyOklzc3VlQ29tbWVudDI5MTAwODA1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjI5MDEw", "fields": {"created_at": "2017-04-03T10:16:30Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMzc2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjIxMDk4", "fields": {"created_at": "2017-04-03T03:39:57Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1NTc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjMwNjQ0", "fields": {"created_at": "2017-04-03T11:20:37Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4MjE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjMxODc3", "fields": {"created_at": "2017-04-03T12:09:45Z", "content": "LAUGH", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4MjE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjMyMzQz", "fields": {"created_at": "2017-04-03T12:27:26Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM0MjQ0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjMyMzc4", "fields": {"created_at": "2017-04-03T12:29:11Z", "content": "THUMBS_UP", "giver": "PierceAndy", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQwMzMzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjU3OTQx", "fields": {"created_at": "2017-04-04T04:11:31Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "PierceAndy", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQwNDAxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjU4OTEw", "fields": {"created_at": "2017-04-04T05:24:15Z", "content": "THUMBS_UP", "giver": "arjunsinghy96", "receiver": "supergr35", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTU3NTUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjY1OTg3", "fields": {"created_at": "2017-04-04T10:05:08Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTYxOTU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjYwODgz", "fields": {"created_at": "2017-04-04T07:08:48Z", "content": "THUMBS_UP", "giver": "Siddhartha1234", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI5MTM5MTIxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjYyNDI3", "fields": {"created_at": "2017-04-04T08:08:52Z", "content": "THUMBS_UP", "giver": "arjunsinghy96", "receiver": "Siddhartha1234", "review": "MDEyOklzc3VlQ29tbWVudDI5MTQxMzM1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Njc0MDg0", "fields": {"created_at": "2017-04-04T14:22:40Z", "content": "HEART", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI5MTUxMzg3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjcwNzY5", "fields": {"created_at": "2017-04-04T12:57:28Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "arjunsinghy96", "review": "MDEyOklzc3VlQ29tbWVudDI5MDcwODAzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjczMTAx", "fields": {"created_at": "2017-04-04T13:59:08Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDI4ODcwNDg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Njg3NjYx", "fields": {"created_at": "2017-04-04T20:13:42Z", "content": "THUMBS_UP", "giver": "Siddhartha1234", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI5MTQ4NjU0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Njg5MDg0", "fields": {"created_at": "2017-04-04T20:54:13Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc2ODA5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzA4MTE2", "fields": {"created_at": "2017-04-05T10:39:16Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTg4Mjg4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzAxNjM3", "fields": {"created_at": "2017-04-05T07:05:13Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5MTA5NDA5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzE3NjQ1", "fields": {"created_at": "2017-04-05T15:06:44Z", "content": "LAUGH", "giver": "Monal5031", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI5MTg4MDAzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzM5Njcx", "fields": {"created_at": "2017-04-06T04:09:44Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "supergr35", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDAxMzgzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzUxMjY1", "fields": {"created_at": "2017-04-06T11:47:32Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "Siddhartha1234", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDAxMTk5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzUxMjYx", "fields": {"created_at": "2017-04-06T11:47:27Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDAwNzcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzUxMzg0", "fields": {"created_at": "2017-04-06T11:51:37Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDI5MTk1ODgzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzUyMTk5", "fields": {"created_at": "2017-04-06T12:20:42Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5MTA5NDA5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzYzOTcw", "fields": {"created_at": "2017-04-06T17:17:01Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI5MjI0MTUzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NzcwOTc0", "fields": {"created_at": "2017-04-06T20:29:20Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "Monal5031", "review": "MDEyOklzc3VlQ29tbWVudDI5MjI4MTU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Nzg3MjAx", "fields": {"created_at": "2017-04-07T09:32:05Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5MjQ4ODA4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244Nzg4MjI1", "fields": {"created_at": "2017-04-07T10:07:14Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "MariosPanag", "review": "MDEyOklzc3VlQ29tbWVudDI5MjQ5NjI3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODAwODY2", "fields": {"created_at": "2017-04-07T16:53:52Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI5MTAwMzM3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODE2MzI0", "fields": {"created_at": "2017-04-08T10:38:12Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNTQ4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODE2Nzgy", "fields": {"created_at": "2017-04-08T11:39:21Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNTc4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODE2OTA5", "fields": {"created_at": "2017-04-08T11:54:06Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNjA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODE2OTEw", "fields": {"created_at": "2017-04-08T11:54:10Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNjE3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODE2OTEx", "fields": {"created_at": "2017-04-08T11:54:12Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNjE0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODE3NjY0", "fields": {"created_at": "2017-04-08T13:27:43Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI5MjcxNTgwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODE5Mjc2", "fields": {"created_at": "2017-04-08T16:33:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "damngamerz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTczMzgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODE5NzUw", "fields": {"created_at": "2017-04-08T17:23:23Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUyMDcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI0MTE1", "fields": {"created_at": "2017-04-09T03:45:26Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUyMzEyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI0MTE3", "fields": {"created_at": "2017-04-09T03:45:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUyMzEyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI0MTIx", "fields": {"created_at": "2017-04-09T03:45:52Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI5MjczMjgwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI0MzUy", "fields": {"created_at": "2017-04-09T04:38:51Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUxNTQwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI0NTQy", "fields": {"created_at": "2017-04-09T05:20:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "supergr35", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDg4NTk0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI0OTkx", "fields": {"created_at": "2017-04-09T06:48:53Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "impmihai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTAyNzU5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI1MDAy", "fields": {"created_at": "2017-04-09T06:50:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "impmihai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAxNjQ2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI1MzQ0", "fields": {"created_at": "2017-04-09T07:47:35Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUyNDQzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI1MzQw", "fields": {"created_at": "2017-04-09T07:47:31Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUyNDQyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI1NDM5", "fields": {"created_at": "2017-04-09T08:02:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "CleanCut", "review": "MDEyOklzc3VlQ29tbWVudDI5Mjc1MDc2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI2MjY5", "fields": {"created_at": "2017-04-09T10:01:53Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI4OTI0NjgyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI2Mjkx", "fields": {"created_at": "2017-04-09T10:05:02Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzMjMxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI2NjAw", "fields": {"created_at": "2017-04-09T10:49:20Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzODA4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI2NjAx", "fields": {"created_at": "2017-04-09T10:49:22Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzODE2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODIyNTk4", "fields": {"created_at": "2017-04-08T22:51:20Z", "content": "LAUGH", "giver": "userzimmermann", "receiver": "CleanCut", "review": "MDEyOklzc3VlQ29tbWVudDI5Mjc1MTE3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODMxNjY3", "fields": {"created_at": "2017-04-09T20:28:10Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDI5MjgwOTc4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODQ1MTA0", "fields": {"created_at": "2017-04-10T10:40:35Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI5MjkxMDc2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODQ1ODAz", "fields": {"created_at": "2017-04-10T11:04:54Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI5MjkxMzYxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODQyMjA4", "fields": {"created_at": "2017-04-10T09:03:50Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI5Mjg2MTQ1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODQyMjc3", "fields": {"created_at": "2017-04-10T09:06:00Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzMjI4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODU0NzM3", "fields": {"created_at": "2017-04-10T15:27:30Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI4ODM0NzEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODU2MTI2", "fields": {"created_at": "2017-04-10T16:03:03Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "madhukar01", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzgyMDE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODU2MjM3", "fields": {"created_at": "2017-04-10T16:05:56Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "madhukar01", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzU3NTc3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODU2NDQ5", "fields": {"created_at": "2017-04-10T16:11:45Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2MTk4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODU2NDU3", "fields": {"created_at": "2017-04-10T16:11:59Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "madhukar01", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MTg2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODg1ODY3", "fields": {"created_at": "2017-04-11T11:46:13Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5MzE4MjA3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODk0NDc5", "fields": {"created_at": "2017-04-11T15:27:19Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI5MzI4OTI5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODk5NzU2", "fields": {"created_at": "2017-04-11T17:43:03Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDYyNjMxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODkxNTUx", "fields": {"created_at": "2017-04-11T14:22:07Z", "content": "CONFUSED", "giver": "userzimmermann", "receiver": "pratyushprakash", "review": "MDEyOklzc3VlQ29tbWVudDI5MzIzNzQ2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTA5Njk4", "fields": {"created_at": "2017-04-11T22:55:52Z", "content": "THUMBS_UP", "giver": "djokester", "receiver": "ashwini0529", "review": "MDEyOklzc3VlQ29tbWVudDI4ODE4NDgzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTAzOTk2", "fields": {"created_at": "2017-04-11T19:39:51Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI5Mjg3MzcyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTE1ODI4", "fields": {"created_at": "2017-04-12T05:22:42Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDI5MzQ3NjQ3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTE3NzM3", "fields": {"created_at": "2017-04-12T07:02:41Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "khushmeeet", "review": "MDEyOklzc3VlQ29tbWVudDI5MzQ5MDQwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTE4ODM0", "fields": {"created_at": "2017-04-12T07:40:36Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "khushmeeet", "review": "MDEyOklzc3VlQ29tbWVudDI5MzQ5MDQwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTE4ODMy", "fields": {"created_at": "2017-04-12T07:40:27Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTA3NTM2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTE4ODQ3", "fields": {"created_at": "2017-04-12T07:41:07Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "khushmeeet", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI2Mzg0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTE5NzI4", "fields": {"created_at": "2017-04-12T08:10:27Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "alisianoi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDUzNDEwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTQ3MzQ5", "fields": {"created_at": "2017-04-12T20:52:09Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTI1Mjc2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTY4OTI1", "fields": {"created_at": "2017-04-13T12:56:22Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTE5NTE5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTY5NTI0", "fields": {"created_at": "2017-04-13T13:14:13Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTMyNzg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTc0NTk0", "fields": {"created_at": "2017-04-13T15:21:34Z", "content": "THUMBS_UP", "giver": "Siddhartha1234", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTQwODA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTczMzcw", "fields": {"created_at": "2017-04-13T14:50:03Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Siddhartha1234", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTQwNjAzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTczNDUx", "fields": {"created_at": "2017-04-13T14:52:20Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTQwODMxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTg5NjYy", "fields": {"created_at": "2017-04-13T23:37:25Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTQ2OTE1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTgzMjM2", "fields": {"created_at": "2017-04-13T19:32:10Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Monal5031", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTM4NTUyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTk1Mjg2", "fields": {"created_at": "2017-04-14T06:57:13Z", "content": "LAUGH", "giver": "userzimmermann", "receiver": "Monal5031", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTUwNzkxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTk1MzI2", "fields": {"created_at": "2017-04-14T07:00:14Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDI5NDA3OTcxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTk1ODg0", "fields": {"created_at": "2017-04-14T07:32:05Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTUxNDAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244OTkzODM1", "fields": {"created_at": "2017-04-14T05:05:47Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI5NDAwMTcyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDA0ODky", "fields": {"created_at": "2017-04-14T15:16:18Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTU4MDg1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDAwNDI3", "fields": {"created_at": "2017-04-14T11:49:31Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTU0MjU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDI0ODU2", "fields": {"created_at": "2017-04-15T19:40:21Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDI5NDE1MTc3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDI1MTUx", "fields": {"created_at": "2017-04-15T20:08:54Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTY2NDA5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDMwNDQ2", "fields": {"created_at": "2017-04-16T11:46:14Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTY4MjU4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDMxNjQ0", "fields": {"created_at": "2017-04-16T14:17:45Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "pratyushprakash", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTY4MzE1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDMyNTQy", "fields": {"created_at": "2017-04-16T16:17:26Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI5NDM2MDAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDY5MTk5", "fields": {"created_at": "2017-04-18T06:05:22Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTczMDg1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDYxMzI0", "fields": {"created_at": "2017-04-17T22:09:19Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTc4MzQxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDYxNDQx", "fields": {"created_at": "2017-04-17T22:14:58Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI5NDM2MDAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDc3MDI0", "fields": {"created_at": "2017-04-18T10:40:19Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDI5NDMxNDI1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDgyNzQ2", "fields": {"created_at": "2017-04-18T13:51:14Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI5NDg0NjYzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MDk3MDUx", "fields": {"created_at": "2017-04-18T19:55:24Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTkwODc4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MTA5NTk4", "fields": {"created_at": "2017-04-19T06:10:30Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NTEwNzEyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MTE1MTgx", "fields": {"created_at": "2017-04-19T09:18:08Z", "content": "THUMBS_UP", "giver": "sils", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjE0OTI0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MTMxNjQx", "fields": {"created_at": "2017-04-19T16:55:54Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjE4NzU2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MTMzMjgz", "fields": {"created_at": "2017-04-19T17:39:06Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjE0MTgxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MTY0MzY2", "fields": {"created_at": "2017-04-20T13:40:24Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjM0MDQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MTczOTIz", "fields": {"created_at": "2017-04-20T17:14:07Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NTgwNjcxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MTk5NDc2", "fields": {"created_at": "2017-04-21T10:43:42Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjQ5OTEwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MTk5ODA2", "fields": {"created_at": "2017-04-21T11:00:42Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjQ5ODAxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjA4NzYz", "fields": {"created_at": "2017-04-21T15:40:40Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjU1MTk5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjI2Mzk0", "fields": {"created_at": "2017-04-22T12:00:52Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Adrianzatreanu", "review": "MDEyOklzc3VlQ29tbWVudDI5NjM2MjIwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjI2NzY0", "fields": {"created_at": "2017-04-22T12:49:13Z", "content": "HOORAY", "giver": "Makman2", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDI5NjIyNzY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjMxMTg2", "fields": {"created_at": "2017-04-22T20:51:21Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjQyNTIx", "fields": {"created_at": "2017-04-23T21:31:33Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Adrianzatreanu", "review": "MDEyOklzc3VlQ29tbWVudDI5NjM2MzM1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjY1Mzky", "fields": {"created_at": "2017-04-24T15:53:29Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjczMDI0", "fields": {"created_at": "2017-04-24T19:26:51Z", "content": "THUMBS_UP", "giver": "pratyushprakash", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTgzMTc4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Mjk0MjI4", "fields": {"created_at": "2017-04-25T10:57:21Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE0OTY2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjkxMjgz", "fields": {"created_at": "2017-04-25T09:19:56Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE0MzYzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjkxODM3", "fields": {"created_at": "2017-04-25T09:35:39Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjc3MTU3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzAyODU3", "fields": {"created_at": "2017-04-25T14:56:02Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NjkwMDY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzEzNjAy", "fields": {"created_at": "2017-04-25T19:29:13Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI5NTkyOTc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzI2MjI3", "fields": {"created_at": "2017-04-26T04:30:51Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzI3NDA3", "fields": {"created_at": "2017-04-26T05:45:28Z", "content": "THUMBS_UP", "giver": "arjunsinghy96", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM0NTc5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzI3NDEw", "fields": {"created_at": "2017-04-26T05:45:36Z", "content": "THUMBS_UP", "giver": "arjunsinghy96", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM0NTMwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzIzMzIw", "fields": {"created_at": "2017-04-26T01:33:57Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NzIxMjE0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzIzMzQy", "fields": {"created_at": "2017-04-26T01:35:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "arjunsinghy96", "review": "MDEyOklzc3VlQ29tbWVudDI5NDQ5OTE3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzIzMzUw", "fields": {"created_at": "2017-04-26T01:35:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI5Mjc4OTk0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzIzOTA4", "fields": {"created_at": "2017-04-26T02:07:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzIzOTk0", "fields": {"created_at": "2017-04-26T02:12:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI5NDg0NjYzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzMyMDQ3", "fields": {"created_at": "2017-04-26T08:39:35Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM5MjM0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzQ3Njkz", "fields": {"created_at": "2017-04-26T15:48:03Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzQ4ODQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzU0MjU5", "fields": {"created_at": "2017-04-26T18:36:40Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzUyODY5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzU3NjE1", "fields": {"created_at": "2017-04-26T20:10:44Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzQ4ODQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzY1ODU5", "fields": {"created_at": "2017-04-27T02:18:32Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzYwMjk1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzY1ODYz", "fields": {"created_at": "2017-04-27T02:18:39Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzYwMTc5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Mzc4ODQ4", "fields": {"created_at": "2017-04-27T11:58:00Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDI5NzYwMTU5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzcyNDMy", "fields": {"created_at": "2017-04-27T08:17:19Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzQ4ODQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzgxODMw", "fields": {"created_at": "2017-04-27T13:31:54Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI5NzY3MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzkxMzY4", "fields": {"created_at": "2017-04-27T17:27:21Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDI5NzU5NTU1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDA5MjY0", "fields": {"created_at": "2017-04-28T06:55:34Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "arjunsinghy96", "review": "MDEyOklzc3VlQ29tbWVudDI5Mjk4Nzg0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDE1Mjg3", "fields": {"created_at": "2017-04-28T10:51:24Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NzkyMDkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDE1Mjg5", "fields": {"created_at": "2017-04-28T10:51:28Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI5Nzk2Nzk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDExNDE3", "fields": {"created_at": "2017-04-28T08:27:38Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI5NzY3MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDI1NjEx", "fields": {"created_at": "2017-04-28T16:22:19Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NzkyMDkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDQ0MDg0", "fields": {"created_at": "2017-04-29T16:23:00Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzk3MjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDQ2Nzk2", "fields": {"created_at": "2017-04-29T21:12:36Z", "content": "HOORAY", "giver": "impmihai", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDI5ODE3NTUzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDQ3Mjg0", "fields": {"created_at": "2017-04-29T22:19:25Z", "content": "CONFUSED", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDI5ODE5NzkyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDU3NTE1", "fields": {"created_at": "2017-04-30T23:46:22Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDA4NzEwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDU3NTI4", "fields": {"created_at": "2017-04-30T23:47:45Z", "content": "LAUGH", "giver": "aptrishu", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDA4NzI5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDcwMzg1", "fields": {"created_at": "2017-05-01T16:28:16Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEyOTY5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDcwNDU4", "fields": {"created_at": "2017-05-01T16:30:59Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEyOTU3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg2OTUx", "fields": {"created_at": "2017-05-02T05:54:03Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDI5ODQ2NzgzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MDQ5", "fields": {"created_at": "2017-05-02T06:00:40Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjQ4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MDQw", "fields": {"created_at": "2017-05-02T06:00:02Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTI0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MDc1", "fields": {"created_at": "2017-05-02T06:01:52Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NzYzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MDcx", "fields": {"created_at": "2017-05-02T06:01:42Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MDcz", "fields": {"created_at": "2017-05-02T06:01:48Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NzYyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MDg5", "fields": {"created_at": "2017-05-02T06:03:13Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NzU4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MDk3", "fields": {"created_at": "2017-05-02T06:03:30Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTc1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MTA0", "fields": {"created_at": "2017-05-02T06:03:59Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTg3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MTI1", "fields": {"created_at": "2017-05-02T06:04:58Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjExNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MTM0", "fields": {"created_at": "2017-05-02T06:05:52Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MTUy", "fields": {"created_at": "2017-05-02T06:06:36Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjY4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MjA2", "fields": {"created_at": "2017-05-02T06:10:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NjI2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MjEx", "fields": {"created_at": "2017-05-02T06:10:34Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4Njc0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3MjIz", "fields": {"created_at": "2017-05-02T06:11:33Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4Njg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3Mzg1", "fields": {"created_at": "2017-05-02T06:20:52Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDI1NDA2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg3NDI4", "fields": {"created_at": "2017-05-02T06:23:29Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTM3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDg4MDIw", "fields": {"created_at": "2017-05-02T06:56:18Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDI1NzUzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTM3MTg0", "fields": {"created_at": "2017-05-03T13:50:56Z", "content": "LAUGH", "giver": "SanketDG", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI5ODg3MDE4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTM3MTgz", "fields": {"created_at": "2017-05-03T13:50:55Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI5ODg3MDE4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTQ3MDIz", "fields": {"created_at": "2017-05-03T17:41:30Z", "content": "THUMBS_UP", "giver": "girishramnani", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDI5ODk0NTI4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTQ5MDMx", "fields": {"created_at": "2017-05-03T18:35:34Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE4NTM3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTU4MzIw", "fields": {"created_at": "2017-05-04T00:07:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDYzNDU5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTc0MzAy", "fields": {"created_at": "2017-05-04T13:12:28Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDUxNDE0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTcxNDM1", "fields": {"created_at": "2017-05-04T11:32:42Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDczNTUzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTk2NDA4", "fields": {"created_at": "2017-05-04T23:57:35Z", "content": "THUMBS_UP", "giver": "yukiisbored", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDkwNzMxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTk3Nzky", "fields": {"created_at": "2017-05-05T01:38:14Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDgxMjMxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NTk5MDIx", "fields": {"created_at": "2017-05-05T03:23:59Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDcyOTMwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjI1MTE2", "fields": {"created_at": "2017-05-05T19:57:39Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NjA1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjI1MTEz", "fields": {"created_at": "2017-05-05T19:57:34Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NjEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjI1MzA5", "fields": {"created_at": "2017-05-05T20:05:03Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NzM0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjI1MzE0", "fields": {"created_at": "2017-05-05T20:05:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NzA3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjI1MzQ0", "fields": {"created_at": "2017-05-05T20:06:08Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA3NzU2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjM0ODAz", "fields": {"created_at": "2017-05-06T10:59:46Z", "content": "HEART", "giver": "userzimmermann", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDc3NzkxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjM3MDA5", "fields": {"created_at": "2017-05-06T15:17:13Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDI5OTY0NDUyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjUxMjY4", "fields": {"created_at": "2017-05-07T21:48:37Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "MariosPanag", "review": "MDEyOklzc3VlQ29tbWVudDI5OTY2NTUyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjYyNDM0", "fields": {"created_at": "2017-05-08T10:09:37Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "aptrishu", "review": "MDEyOklzc3VlQ29tbWVudDI5OTczOTcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjYyNDQ3", "fields": {"created_at": "2017-05-08T10:09:58Z", "content": "LAUGH", "giver": "userzimmermann", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTE1NTk3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjYyNzUz", "fields": {"created_at": "2017-05-08T10:21:25Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTIwNTgyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NjgwNjc4", "fields": {"created_at": "2017-05-08T19:17:17Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "JohnS-01", "review": "MDEyOklzc3VlQ29tbWVudDI5OTk0NTQyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Nzc5MDU1", "fields": {"created_at": "2017-05-11T06:45:21Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTAxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Nzc5MDc4", "fields": {"created_at": "2017-05-11T06:46:13Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTUwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Nzc5ODQ3", "fields": {"created_at": "2017-05-11T07:17:07Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTcxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NzgzNDEx", "fields": {"created_at": "2017-05-11T09:05:52Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTkzMDQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245ODM0MTI4", "fields": {"created_at": "2017-05-12T14:09:04Z", "content": "HEART", "giver": "NiklasMM", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMwMTA4NDU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245ODYwMjk5", "fields": {"created_at": "2017-05-13T18:58:32Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "thisch", "review": "MDEyOklzc3VlQ29tbWVudDMwMTI2MjA0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245OTQ4MzIw", "fields": {"created_at": "2017-05-16T21:03:19Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDMwMTkxNDQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245OTQ5NjYw", "fields": {"created_at": "2017-05-16T21:50:13Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDMwMTkxNDQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDA0MzM0OA==", "fields": {"created_at": "2017-05-19T08:03:20Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMwMjI0NzEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDA0MzM0OQ==", "fields": {"created_at": "2017-05-19T08:03:20Z", "content": "LAUGH", "giver": "SanketDG", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMwMjI0NzEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDA2ODgwNw==", "fields": {"created_at": "2017-05-19T21:18:05Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzE0MDU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDA4MjI5OQ==", "fields": {"created_at": "2017-05-20T22:40:54Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYxNzk2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDA4NTQ0Mg==", "fields": {"created_at": "2017-05-21T08:08:04Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYyMzQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDA4ODU5NQ==", "fields": {"created_at": "2017-05-21T14:35:05Z", "content": "LAUGH", "giver": "Makman2", "receiver": "mrtes", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYzMjU2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDA4ODU5Ng==", "fields": {"created_at": "2017-05-21T14:35:07Z", "content": "HOORAY", "giver": "Makman2", "receiver": "mrtes", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYzMjU2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDAyNjQyNw==", "fields": {"created_at": "2017-05-18T18:45:48Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzMxMzE5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE0NDI2Mg==", "fields": {"created_at": "2017-05-23T09:19:10Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MzQ1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE0NDI2Ng==", "fields": {"created_at": "2017-05-23T09:19:14Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MzQ5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE0NDI3MA==", "fields": {"created_at": "2017-05-23T09:19:16Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MzUxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE0NDI3NQ==", "fields": {"created_at": "2017-05-23T09:19:20Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MzUzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE0NDM2NA==", "fields": {"created_at": "2017-05-23T09:21:55Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MjUxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE0NDM3MA==", "fields": {"created_at": "2017-05-23T09:21:58Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MjUzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE0NDM3Mw==", "fields": {"created_at": "2017-05-23T09:22:01Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MjU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE0NDM3Ng==", "fields": {"created_at": "2017-05-23T09:22:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzg1MjU2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE3OTQ5Mw==", "fields": {"created_at": "2017-05-24T01:19:08Z", "content": "CONFUSED", "giver": "netman92", "receiver": "underyx", "review": "MDEyOklzc3VlQ29tbWVudDMwMzU2OTY0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE4NDM0OQ==", "fields": {"created_at": "2017-05-24T05:55:07Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "netman92", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE2MjcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE5ODMyOQ==", "fields": {"created_at": "2017-05-24T13:15:51Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0NzQzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDExOTk3Nw==", "fields": {"created_at": "2017-05-22T16:53:22Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "mrtes", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYzNTI5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDEyNTQ3Nw==", "fields": {"created_at": "2017-05-22T19:38:53Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDI1NTU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDEzMjc4NQ==", "fields": {"created_at": "2017-05-23T00:45:42Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "mrtes", "review": "MDEyOklzc3VlQ29tbWVudDMwMzIxMTUwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI0MDUxOA==", "fields": {"created_at": "2017-05-25T14:29:40Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQzMzA4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI3NzI3MQ==", "fields": {"created_at": "2017-05-26T14:28:09Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODcxMTQ2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI4MTY3OQ==", "fields": {"created_at": "2017-05-26T16:35:44Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "adtac", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzg2NDA4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI4NTM5MQ==", "fields": {"created_at": "2017-05-26T18:34:47Z", "content": "HEART", "giver": "userzimmermann", "receiver": "thisch", "review": "MDEyOklzc3VlQ29tbWVudDMwMzk3NzQ2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI5NzUyNQ==", "fields": {"created_at": "2017-05-27T10:57:10Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI5NzUyNg==", "fields": {"created_at": "2017-05-27T10:57:16Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIwODY3Mw==", "fields": {"created_at": "2017-05-24T17:18:50Z", "content": "THUMBS_UP", "giver": "MikeTheReader", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDMwMzc4MDA2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIxMTAzNg==", "fields": {"created_at": "2017-05-24T18:19:50Z", "content": "LAUGH", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0OTExNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIyOTUyMw==", "fields": {"created_at": "2017-05-25T07:28:17Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQyOTU2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIzNTIzMw==", "fields": {"created_at": "2017-05-25T11:15:08Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQ2NDcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM2MzI5MQ==", "fields": {"created_at": "2017-05-30T14:41:01Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTA5Njc4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM2NzcyNw==", "fields": {"created_at": "2017-05-30T16:15:04Z", "content": "HOORAY", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDEyOklzc3VlQ29tbWVudDMwNDkyOTI5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM3MjA0OA==", "fields": {"created_at": "2017-05-30T18:00:17Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MjQ1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM3MjA0OQ==", "fields": {"created_at": "2017-05-30T18:00:22Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mjg1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4MTM3OQ==", "fields": {"created_at": "2017-05-30T22:29:36Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMwNTAyNjkzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4MTg1Mw==", "fields": {"created_at": "2017-05-30T22:48:16Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMwNTAyODAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4NzM1OQ==", "fields": {"created_at": "2017-05-31T03:21:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzk4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4NzM2MQ==", "fields": {"created_at": "2017-05-31T03:21:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzc1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4NzM2Mg==", "fields": {"created_at": "2017-05-31T03:21:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MzY3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwNDQzMw==", "fields": {"created_at": "2017-05-28T03:21:13Z", "content": "THUMBS_UP", "giver": "netman92", "receiver": "underyx", "review": "MDEyOklzc3VlQ29tbWVudDMwMzkxNjk2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwNTU5Mg==", "fields": {"created_at": "2017-05-28T06:55:13Z", "content": "HEART", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzMjQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwNTU5Mw==", "fields": {"created_at": "2017-05-28T06:55:15Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzMjQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwNzExMg==", "fields": {"created_at": "2017-05-28T10:40:08Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzNjY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwNzExNA==", "fields": {"created_at": "2017-05-28T10:40:12Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzNTk3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwODcxMA==", "fields": {"created_at": "2017-05-28T13:51:20Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0MTAzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMyMTQ5Ng==", "fields": {"created_at": "2017-05-29T08:39:39Z", "content": "THUMBS_UP", "giver": "netman92", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwNDYwNDU5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMyNTMyNw==", "fields": {"created_at": "2017-05-29T10:52:41Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "damngamerz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0MTYwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMyNjMyOQ==", "fields": {"created_at": "2017-05-29T11:35:31Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg4NzU0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMzNDMyNQ==", "fields": {"created_at": "2017-05-29T16:21:49Z", "content": "LAUGH", "giver": "SanketDG", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODk2MDIxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMzNDczMg==", "fields": {"created_at": "2017-05-29T16:43:01Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0NzU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMzNTUwMA==", "fields": {"created_at": "2017-05-29T17:20:44Z", "content": "LAUGH", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODk2MDIxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDA1MQ==", "fields": {"created_at": "2017-06-02T09:21:07Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMwNTM5MDU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDAxMQ==", "fields": {"created_at": "2017-06-02T09:20:01Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNDI5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDEyNQ==", "fields": {"created_at": "2017-06-02T09:22:45Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE1NDMzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDQ4OA==", "fields": {"created_at": "2017-06-02T09:33:37Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyNjc1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDQ5Mg==", "fields": {"created_at": "2017-06-02T09:33:43Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyODYwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDQyMA==", "fields": {"created_at": "2017-06-02T09:31:08Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE1NTcxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDQyNA==", "fields": {"created_at": "2017-06-02T09:31:18Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE1MzM5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDYyMQ==", "fields": {"created_at": "2017-06-02T09:37:56Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNzg3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDYzMg==", "fields": {"created_at": "2017-06-02T09:38:18Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMDUyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4Mjg0Nw==", "fields": {"created_at": "2017-06-02T10:54:48Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Adrianzatreanu", "review": "MDEyOklzc3VlQ29tbWVudDMwNTc0MTc0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4NTcwNg==", "fields": {"created_at": "2017-06-02T12:48:25Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTczODgxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4NTg1Mw==", "fields": {"created_at": "2017-06-02T12:53:26Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTc0MDc1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4NTgwMg==", "fields": {"created_at": "2017-06-02T12:51:49Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTczOTEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4OTA1Ng==", "fields": {"created_at": "2017-06-02T14:22:46Z", "content": "LAUGH", "giver": "userzimmermann", "receiver": "thisch", "review": "MDEyOklzc3VlQ29tbWVudDMwNTU5NjY4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4OTA2NQ==", "fields": {"created_at": "2017-06-02T14:23:00Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "thisch", "review": "MDEyOklzc3VlQ29tbWVudDMwNTU5ODY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4OTA5OA==", "fields": {"created_at": "2017-06-02T14:24:00Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "thisch", "review": "MDEyOklzc3VlQ29tbWVudDMwNTU5NzY3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ5MTgxMw==", "fields": {"created_at": "2017-06-02T15:30:00Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTg4MzI5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ5ODkyOA==", "fields": {"created_at": "2017-06-02T19:02:44Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE1NTcxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQwNzc1Mg==", "fields": {"created_at": "2017-05-31T15:05:55Z", "content": "LAUGH", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNTMwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQwODc2MA==", "fields": {"created_at": "2017-05-31T15:26:34Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTI1MDYyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQxMDU1Nw==", "fields": {"created_at": "2017-05-31T16:04:05Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNTA1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQxMDcwNA==", "fields": {"created_at": "2017-05-31T16:07:24Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNDI1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQxMDg2Mw==", "fields": {"created_at": "2017-05-31T16:11:06Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNDA0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQxMDg3MQ==", "fields": {"created_at": "2017-05-31T16:11:19Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxNDEyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQxMTAyMQ==", "fields": {"created_at": "2017-05-31T16:14:41Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIxMzY1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDg0Nw==", "fields": {"created_at": "2017-06-01T04:50:48Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDgxNQ==", "fields": {"created_at": "2017-06-01T04:48:52Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDgyMA==", "fields": {"created_at": "2017-06-01T04:49:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDgyOQ==", "fields": {"created_at": "2017-06-01T04:49:39Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTMyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzNTEwMQ==", "fields": {"created_at": "2017-06-01T08:01:57Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzM0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzNTEwNw==", "fields": {"created_at": "2017-06-01T08:02:04Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzQ1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzODI1OQ==", "fields": {"created_at": "2017-06-01T09:29:29Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2NjgxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzODIyMA==", "fields": {"created_at": "2017-06-01T09:28:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2Njc0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU0MTY0Mw==", "fields": {"created_at": "2017-06-05T13:17:05Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNjI5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU0MTY0NA==", "fields": {"created_at": "2017-06-05T13:17:10Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNjM1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU3NzI1NA==", "fields": {"created_at": "2017-06-06T11:37:50Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDMyOTY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU3NzIyNw==", "fields": {"created_at": "2017-06-06T11:36:26Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDMyODY5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU3NzgxMA==", "fields": {"created_at": "2017-06-06T11:58:06Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "thisch", "review": "MDEyOklzc3VlQ29tbWVudDMwNjQ1MTk1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU3OTAxNA==", "fields": {"created_at": "2017-06-06T12:37:10Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAwNjQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU4NjQ3Ng==", "fields": {"created_at": "2017-06-06T15:38:15Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDMwNjUwNTg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU5MzQ0NA==", "fields": {"created_at": "2017-06-06T18:27:30Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ0MTUyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU5NTgwMQ==", "fields": {"created_at": "2017-06-06T19:32:42Z", "content": "LAUGH", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDMyODU5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU5NTgwNA==", "fields": {"created_at": "2017-06-06T19:32:45Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDMyODU5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU5OTM3Nw==", "fields": {"created_at": "2017-06-06T21:15:34Z", "content": "LAUGH", "giver": "Makman2", "receiver": "thisch", "review": "MDEyOklzc3VlQ29tbWVudDMwNjYxOTM4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUyMTUzOQ==", "fields": {"created_at": "2017-06-04T12:17:01Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAwODA0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUyMjE1MA==", "fields": {"created_at": "2017-06-04T13:33:47Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAwODA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUyNDg2OA==", "fields": {"created_at": "2017-06-04T18:29:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU4NDU0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUyNDg2OQ==", "fields": {"created_at": "2017-06-04T18:29:49Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTQyNTA5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUyNDk1MA==", "fields": {"created_at": "2017-06-04T18:40:13Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNDcxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUzMjMzNg==", "fields": {"created_at": "2017-06-05T06:13:46Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDg3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUzMjU5Ng==", "fields": {"created_at": "2017-06-05T06:32:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDcwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY0MDA3MA==", "fields": {"created_at": "2017-06-07T20:04:50Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDUyNjM1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY0MDA4OA==", "fields": {"created_at": "2017-06-07T20:05:37Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY3OTk5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY0MDAyNg==", "fields": {"created_at": "2017-06-07T20:03:35Z", "content": "LAUGH", "giver": "userzimmermann", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY0NDY1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY1Mjg3OQ==", "fields": {"created_at": "2017-06-08T06:15:21Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDMwNjkwNjUyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY1NzU2MA==", "fields": {"created_at": "2017-06-08T08:50:18Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDMwNjkwMDYwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY2NDQ4NA==", "fields": {"created_at": "2017-06-08T12:32:31Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDg1MTQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY2NDcyMg==", "fields": {"created_at": "2017-06-08T12:39:37Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDg3NTc1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY2OTQ3MQ==", "fields": {"created_at": "2017-06-08T14:35:30Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDg5NDIxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY2OTQ4Mw==", "fields": {"created_at": "2017-06-08T14:35:40Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDg5MzUwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY3NDkwNQ==", "fields": {"created_at": "2017-06-08T16:48:20Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY3NTc1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY3Njg3MA==", "fields": {"created_at": "2017-06-08T17:41:21Z", "content": "LAUGH", "giver": "userzimmermann", "receiver": "LappleApple", "review": "MDEyOklzc3VlQ29tbWVudDMwNzA0ODk2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY3Njk4NA==", "fields": {"created_at": "2017-06-08T17:44:30Z", "content": "LAUGH", "giver": "LappleApple", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDMwNzE3NjEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY3NzI2OQ==", "fields": {"created_at": "2017-06-08T17:51:49Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY3NTkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY5ODU2Nw==", "fields": {"created_at": "2017-06-09T08:53:58Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1MjkzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYwOTQ1Mg==", "fields": {"created_at": "2017-06-07T05:51:40Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDI5Mjc4OTk0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxMTk2OQ==", "fields": {"created_at": "2017-06-07T07:36:46Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwNjcwNzg0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxODY1NA==", "fields": {"created_at": "2017-06-07T10:51:30Z", "content": "HOORAY", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDE2NDM0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxODc3NQ==", "fields": {"created_at": "2017-06-07T10:54:51Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDE2MjAxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxODgwMg==", "fields": {"created_at": "2017-06-07T10:55:30Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDE2MzAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxODgxNA==", "fields": {"created_at": "2017-06-07T10:55:54Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDE2NTM4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxOTUxMA==", "fields": {"created_at": "2017-06-07T11:20:11Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU2MDQzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxOTY1MQ==", "fields": {"created_at": "2017-06-07T11:24:25Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1ODc4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxOTY1NQ==", "fields": {"created_at": "2017-06-07T11:24:58Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU2MDA3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxOTYzMQ==", "fields": {"created_at": "2017-06-07T11:23:37Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU2MTcxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYxOTcxNg==", "fields": {"created_at": "2017-06-07T11:27:27Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1OTU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYyMDU4Mg==", "fields": {"created_at": "2017-06-07T11:59:18Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwNjc2MzczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYzMDE4NQ==", "fields": {"created_at": "2017-06-07T15:52:55Z", "content": "HOORAY", "giver": "RJ722", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwNjgxOTg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDYzOTk3Ng==", "fields": {"created_at": "2017-06-07T20:02:23Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY3ODYyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc0MDE1NQ==", "fields": {"created_at": "2017-06-11T13:34:58Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMDU4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc0MDE2NA==", "fields": {"created_at": "2017-06-11T13:35:31Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMDY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc0MDE3Ng==", "fields": {"created_at": "2017-06-11T13:37:26Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTc1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc0MDI1MQ==", "fields": {"created_at": "2017-06-11T13:46:30Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTIwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc0MDI1Mg==", "fields": {"created_at": "2017-06-11T13:46:35Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc0MDI2Mg==", "fields": {"created_at": "2017-06-11T13:47:24Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTYyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc0MDIwNQ==", "fields": {"created_at": "2017-06-11T13:40:42Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMTU2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc1MjA1NQ==", "fields": {"created_at": "2017-06-12T07:59:26Z", "content": "THUMBS_UP", "giver": "cRAN-cg", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMwNzcxNjM4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc1NDIxMw==", "fields": {"created_at": "2017-06-12T09:12:13Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDMwNzYyODQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc2NzY1Mw==", "fields": {"created_at": "2017-06-12T15:44:52Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDEyOklzc3VlQ29tbWVudDMwNzgxOTY2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc2NzY2Mg==", "fields": {"created_at": "2017-06-12T15:45:10Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQzMzM0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc2NzY2Nw==", "fields": {"created_at": "2017-06-12T15:45:16Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQyODkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc2ODA4OA==", "fields": {"created_at": "2017-06-12T15:55:21Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQzNzA0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc3OTg5MA==", "fields": {"created_at": "2017-06-12T21:20:26Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "thisch", "review": "MDEyOklzc3VlQ29tbWVudDMwNzg5NjY1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc3OTkxMg==", "fields": {"created_at": "2017-06-12T21:21:05Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "thisch", "review": "MDEyOklzc3VlQ29tbWVudDMwNzg4ODA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc4NTA1OQ==", "fields": {"created_at": "2017-06-13T01:16:46Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAwNzgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc4NTI4Mg==", "fields": {"created_at": "2017-06-13T01:29:14Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTU2NDEwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDc4NTI4NQ==", "fields": {"created_at": "2017-06-13T01:29:19Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTU2NDAxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDcwMDI4MA==", "fields": {"created_at": "2017-06-09T09:48:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "damngamerz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDk1MzU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDcwMjg2OQ==", "fields": {"created_at": "2017-06-09T11:29:16Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTEwNDM0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDcxODU4NA==", "fields": {"created_at": "2017-06-09T19:13:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTA3MjYyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDcxOTg3Mg==", "fields": {"created_at": "2017-06-09T19:59:36Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "thisch", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ4ODA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDcyMjk2MA==", "fields": {"created_at": "2017-06-09T21:58:21Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDgwNjU2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDcyODQ3Ng==", "fields": {"created_at": "2017-06-10T09:42:58Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "thisch", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ5MDEwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDczNDY2Ng==", "fields": {"created_at": "2017-06-10T22:06:28Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "thisch", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTI2NTYwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDczOTk4OA==", "fields": {"created_at": "2017-06-11T13:14:59Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIwMDQxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDg0MDUxNw==", "fields": {"created_at": "2017-06-14T08:39:51Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg0ODE0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDg0MDUyMQ==", "fields": {"created_at": "2017-06-14T08:39:55Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg0ODM4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDg0NTUyOA==", "fields": {"created_at": "2017-06-14T11:01:59Z", "content": "THUMBS_DOWN", "giver": "sadovnychyi", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg1MjgzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDg0ODA3MQ==", "fields": {"created_at": "2017-06-14T12:29:46Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTkzMTY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDg2MDMwNg==", "fields": {"created_at": "2017-06-14T17:12:29Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMwODEyNDYxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDg4MDA1OQ==", "fields": {"created_at": "2017-06-15T06:36:27Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjEyNTE1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDgzMTAxMA==", "fields": {"created_at": "2017-06-14T01:10:20Z", "content": "THUMBS_UP", "giver": "AMR-KELEG", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTgzMzk5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDgzMTExMg==", "fields": {"created_at": "2017-06-14T01:16:13Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "AMR-KELEG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTgzNDQwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDgzMTExNQ==", "fields": {"created_at": "2017-06-14T01:16:28Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "AMR-KELEG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTgzNDYwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDgzMTI5OQ==", "fields": {"created_at": "2017-06-14T01:26:12Z", "content": "THUMBS_UP", "giver": "AMR-KELEG", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTgzNTE4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk0NzIxNw==", "fields": {"created_at": "2017-06-16T21:15:36Z", "content": "HEART", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwODAzNDY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk0NzIyMA==", "fields": {"created_at": "2017-06-16T21:15:41Z", "content": "HEART", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwODA0MDQxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk1ODg4OA==", "fields": {"created_at": "2017-06-17T18:51:06Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "rhemon", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU3NDMxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk2MDIwNg==", "fields": {"created_at": "2017-06-17T21:25:54Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "rhemon", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU3NDMxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk2NTk2OQ==", "fields": {"created_at": "2017-06-18T13:18:58Z", "content": "CONFUSED", "giver": "userzimmermann", "receiver": "lucas03", "review": "MDEyOklzc3VlQ29tbWVudDMwODgxNTkxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk2NTkyNA==", "fields": {"created_at": "2017-06-18T13:12:04Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMwODg5MTYxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk2NTkyNQ==", "fields": {"created_at": "2017-06-18T13:12:09Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMwODgyOTM1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk2NzA5OQ==", "fields": {"created_at": "2017-06-18T15:25:10Z", "content": "THUMBS_UP", "giver": "lucas03", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMwODgyOTM1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk2NzM5Mw==", "fields": {"created_at": "2017-06-18T16:03:07Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwOTI3OTA1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk2ODI2Mw==", "fields": {"created_at": "2017-06-18T17:54:30Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwOTI3OTA1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDk3MTAxNA==", "fields": {"created_at": "2017-06-18T23:40:33Z", "content": "LAUGH", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU5MTI3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkwNDM2NQ==", "fields": {"created_at": "2017-06-15T18:27:36Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "lucas03", "review": "MDEyOklzc3VlQ29tbWVudDMwODgxNTkxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkxMzIzNQ==", "fields": {"created_at": "2017-06-15T23:23:43Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMwODg5MTYxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkyODM5NQ==", "fields": {"created_at": "2017-06-16T11:35:38Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMwODg5MTYxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkzMjM4Ng==", "fields": {"created_at": "2017-06-16T13:48:53Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTU2Mzk5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkzNDE3Nw==", "fields": {"created_at": "2017-06-16T14:37:10Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwNzg0MDc0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkzNDIxOQ==", "fields": {"created_at": "2017-06-16T14:38:06Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQ1OTczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkzNDIyNQ==", "fields": {"created_at": "2017-06-16T14:38:12Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg5NTk1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkzNTI1Mg==", "fields": {"created_at": "2017-06-16T15:03:35Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDMwODcyMDU3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkzNTI4Ng==", "fields": {"created_at": "2017-06-16T15:04:34Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDMwOTA0OTQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkzNTgwNg==", "fields": {"created_at": "2017-06-16T15:18:36Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwNzk1MDQxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDkzODg1NQ==", "fields": {"created_at": "2017-06-16T16:43:41Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMwODg5MTYxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTA0OTEyMg==", "fields": {"created_at": "2017-06-20T20:25:02Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Monal5031", "review": "MDEyOklzc3VlQ29tbWVudDMwOTMwNDAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTA0OTkxNA==", "fields": {"created_at": "2017-06-20T20:45:43Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDMwOTQxMjkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTA3Mjc5NA==", "fields": {"created_at": "2017-06-21T12:11:03Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "prachi1210", "review": "MDEyOklzc3VlQ29tbWVudDMxMDA1NTM4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTA4NzM2MQ==", "fields": {"created_at": "2017-06-21T18:01:25Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzI4OTY1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAxMTU2NA==", "fields": {"created_at": "2017-06-20T00:14:38Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "damngamerz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjQ5MTkxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAxMTY1MA==", "fields": {"created_at": "2017-06-20T00:19:56Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMwOTI3OTA1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAxMTY1NQ==", "fields": {"created_at": "2017-06-20T00:20:03Z", "content": "HOORAY", "giver": "Makman2", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMwOTQwODE4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAyMDE1NA==", "fields": {"created_at": "2017-06-20T07:47:01Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjg1NTM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAyOTg2Mw==", "fields": {"created_at": "2017-06-20T12:41:43Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjk1NTMxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAzMzc4NQ==", "fields": {"created_at": "2017-06-20T14:15:35Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjk4MDc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAzOTc0MA==", "fields": {"created_at": "2017-06-20T16:21:56Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMwOTgxMDM2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE0NzY3NA==", "fields": {"created_at": "2017-06-23T07:17:55Z", "content": "LAUGH", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDMxMDU4MDU2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE0ODA5Ng==", "fields": {"created_at": "2017-06-23T07:33:40Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDMxMDU5MjgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE0ODg1NA==", "fields": {"created_at": "2017-06-23T07:59:52Z", "content": "CONFUSED", "giver": "damngamerz", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzY0MjAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE1MzE5NA==", "fields": {"created_at": "2017-06-23T10:18:28Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "nityeshaga", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzY3ODU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE1NTc2MA==", "fields": {"created_at": "2017-06-23T12:09:12Z", "content": "LAUGH", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzY0Mjc4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE1NjE1OQ==", "fields": {"created_at": "2017-06-23T12:25:29Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMxMDUyNjg3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE3NTU4MA==", "fields": {"created_at": "2017-06-23T22:43:27Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMxMDY4NTM2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE3ODcyNQ==", "fields": {"created_at": "2017-06-24T05:17:00Z", "content": "THUMBS_UP", "giver": "incorrectusername", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgxODQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE3OTY4OQ==", "fields": {"created_at": "2017-06-24T07:53:08Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgzMjkwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE3OTY5Mg==", "fields": {"created_at": "2017-06-24T07:53:16Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgzODcwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE3OTY5NA==", "fields": {"created_at": "2017-06-24T07:53:23Z", "content": "HEART", "giver": "damngamerz", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDMxMDc2Nzg5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4MDQ2Mw==", "fields": {"created_at": "2017-06-24T09:53:19Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3NDIyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4MTE0Nw==", "fields": {"created_at": "2017-06-24T11:35:16Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMxMDgzMzQwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4MTcwMw==", "fields": {"created_at": "2017-06-24T12:54:18Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3NDIyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4MzA0Mg==", "fields": {"created_at": "2017-06-24T15:41:42Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "mridubhatnagar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3OTQ0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4MzA3NQ==", "fields": {"created_at": "2017-06-24T15:46:00Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "mridubhatnagar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3OTQ0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4NjM4MQ==", "fields": {"created_at": "2017-06-24T22:28:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Monal5031", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgzOTczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4NjM4Mw==", "fields": {"created_at": "2017-06-24T22:28:31Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Monal5031", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzgzOTg3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4NjQwOQ==", "fields": {"created_at": "2017-06-24T22:31:37Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Monal5031", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg0MDI0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4OTc0Nw==", "fields": {"created_at": "2017-06-25T09:12:33Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "rhemon", "review": "MDEyOklzc3VlQ29tbWVudDMxMDg4NTkxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4OTc1Mw==", "fields": {"created_at": "2017-06-25T09:13:11Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "rhemon", "review": "MDEyOklzc3VlQ29tbWVudDMxMDg4NTU0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE5MTA1MA==", "fields": {"created_at": "2017-06-25T12:24:07Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "rhemon", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg5MTk4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE5MTAxOQ==", "fields": {"created_at": "2017-06-25T12:19:36Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "rhemon", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg5MjE1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEwMDAzNQ==", "fields": {"created_at": "2017-06-22T01:28:22Z", "content": "LAUGH", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDMxMDIwNjg5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEwMDAzNw==", "fields": {"created_at": "2017-06-22T01:28:24Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDMxMDIwNjg5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEwMDEzOQ==", "fields": {"created_at": "2017-06-22T01:34:31Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "damngamerz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzMyMjU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEwMzkzMQ==", "fields": {"created_at": "2017-06-22T05:34:49Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzQwNDAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEyMDA0Mw==", "fields": {"created_at": "2017-06-22T13:59:46Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxNjE3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEyMDA0NQ==", "fields": {"created_at": "2017-06-22T13:59:49Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxNjM3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEyMDA5Nw==", "fields": {"created_at": "2017-06-22T14:00:51Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxNjU5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEyMDE1NA==", "fields": {"created_at": "2017-06-22T14:02:11Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxODEzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEyMDExNA==", "fields": {"created_at": "2017-06-22T14:01:09Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxNzg3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEyMDk1Ng==", "fields": {"created_at": "2017-06-22T14:19:48Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUxODk0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEyMTEyOQ==", "fields": {"created_at": "2017-06-22T14:23:26Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzUyMDI1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTEzMjc3Mg==", "fields": {"created_at": "2017-06-22T19:12:11Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDMwOTI4NzQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI0OTAzNQ==", "fields": {"created_at": "2017-06-27T10:51:22Z", "content": "THUMBS_UP", "giver": "arrayslayer", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDA1ODM0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI0OTQyOA==", "fields": {"created_at": "2017-06-27T11:07:04Z", "content": "HEART", "giver": "hemangsk", "receiver": "arrayslayer", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDI0MTIwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI1MDk1Mg==", "fields": {"created_at": "2017-06-27T12:01:15Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "S2606", "review": "MDEyOklzc3VlQ29tbWVudDMxMTMzMDk1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI3MDI3MA==", "fields": {"created_at": "2017-06-27T19:56:15Z", "content": "LAUGH", "giver": "Makman2", "receiver": "AMR-KELEG", "review": "MDEyOklzc3VlQ29tbWVudDMxMTQ2NjkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI3MDI3Mw==", "fields": {"created_at": "2017-06-27T19:56:17Z", "content": "HOORAY", "giver": "Makman2", "receiver": "AMR-KELEG", "review": "MDEyOklzc3VlQ29tbWVudDMxMTQ2NjkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI3ODY5OA==", "fields": {"created_at": "2017-06-28T01:12:53Z", "content": "LAUGH", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDMxMTQ4NTk0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI4Nzg2Mw==", "fields": {"created_at": "2017-06-28T08:43:53Z", "content": "LAUGH", "giver": "nityeshaga", "receiver": "JohnMoutafis", "review": "MDEyOklzc3VlQ29tbWVudDMxMTU4NDA3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI5NTUyNA==", "fields": {"created_at": "2017-06-28T12:37:37Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "rhemon", "review": "MDEyOklzc3VlQ29tbWVudDMxMDg4NTkxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIwMTM5Ng==", "fields": {"created_at": "2017-06-26T06:29:23Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzkwNTE5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIwNDY0Mw==", "fields": {"created_at": "2017-06-26T08:31:13Z", "content": "CONFUSED", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzk0OTU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIwODE1Mw==", "fields": {"created_at": "2017-06-26T10:23:36Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzk2NTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIwOTUxMg==", "fields": {"created_at": "2017-06-26T11:15:01Z", "content": "THUMBS_DOWN", "giver": "userzimmermann", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzk4MDMyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxMDMxMA==", "fields": {"created_at": "2017-06-26T11:49:30Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMxMTAzMjc0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxMTEwNA==", "fields": {"created_at": "2017-06-26T12:18:03Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzk5Mzg4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxMTM3NA==", "fields": {"created_at": "2017-06-26T12:27:53Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzk5Mzg4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIyMTE0OQ==", "fields": {"created_at": "2017-06-26T16:36:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "arrayslayer", "review": "MDEyOklzc3VlQ29tbWVudDMxMDk2MTQ1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTM2MTYwOA==", "fields": {"created_at": "2017-06-29T22:45:48Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkyODU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTM2MTYwOQ==", "fields": {"created_at": "2017-06-29T22:45:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkyODU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTM4Mjk2Mg==", "fields": {"created_at": "2017-06-30T14:08:50Z", "content": "THUMBS_UP", "giver": "JohnMoutafis", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMxMjI3NjQ2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTM4NjAzMQ==", "fields": {"created_at": "2017-06-30T15:22:43Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMxMjI3NjQ2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTMzMzA1NA==", "fields": {"created_at": "2017-06-29T09:20:59Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxMDYzNjk5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ0Mjc5Mw==", "fields": {"created_at": "2017-07-03T16:24:55Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDIxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ0MjgxNA==", "fields": {"created_at": "2017-07-03T16:25:37Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ0MjgyMQ==", "fields": {"created_at": "2017-07-03T16:25:44Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDEwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ0MzQ4Mw==", "fields": {"created_at": "2017-07-03T16:52:03Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg4NjczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ0MzQyMA==", "fields": {"created_at": "2017-07-03T16:49:15Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDU3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ0MzQyMQ==", "fields": {"created_at": "2017-07-03T16:49:17Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMyMDU0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ0Mzg0Nw==", "fields": {"created_at": "2017-07-03T17:06:10Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg4NjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ0NjQ2MA==", "fields": {"created_at": "2017-07-03T18:55:38Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTM0MjkwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ2MDU0MQ==", "fields": {"created_at": "2017-07-04T08:09:15Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMzNjEwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ2MDU2Mg==", "fields": {"created_at": "2017-07-04T08:09:57Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTMzODA1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ3Nzg3MA==", "fields": {"created_at": "2017-07-04T17:44:06Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTUwMTQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ3ODYwMw==", "fields": {"created_at": "2017-07-04T18:22:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTUwMTQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQ5NjQ0Mw==", "fields": {"created_at": "2017-07-05T10:14:03Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTU5ODEzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQwNDUzMQ==", "fields": {"created_at": "2017-07-01T12:23:31Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTE1Nzc2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQwNzY0MQ==", "fields": {"created_at": "2017-07-01T18:21:21Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTE2NjQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQwNzYxNg==", "fields": {"created_at": "2017-07-01T18:18:42Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTE2NjU3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQwODI4Nw==", "fields": {"created_at": "2017-07-01T19:19:52Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMxMjQ0NDU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTQxMTEyOA==", "fields": {"created_at": "2017-07-02T01:53:25Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMxMjQ0OTA5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU0MTI4NQ==", "fields": {"created_at": "2017-07-06T11:13:32Z", "content": "THUMBS_UP", "giver": "JohnMoutafis", "receiver": "ihsavru", "review": "MDEyOklzc3VlQ29tbWVudDMxMzE3MTc1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU2MDgzMg==", "fields": {"created_at": "2017-07-06T19:25:10Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTgyMDY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU2MTIyMg==", "fields": {"created_at": "2017-07-06T19:34:43Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk5NDU2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU2MjEyNA==", "fields": {"created_at": "2017-07-06T20:00:37Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk3NTI0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU2MjEyNg==", "fields": {"created_at": "2017-07-06T20:00:41Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk3NTI3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU2Mjk5Nw==", "fields": {"created_at": "2017-07-06T20:26:14Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk3NTI3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU2MzAwMQ==", "fields": {"created_at": "2017-07-06T20:26:16Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk3NTI0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU2ODI4NA==", "fields": {"created_at": "2017-07-06T23:30:12Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTk5NzE4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU2ODMxNA==", "fields": {"created_at": "2017-07-06T23:31:43Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjAwMDg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU4MjQ2OQ==", "fields": {"created_at": "2017-07-07T10:29:43Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA5MTkxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU4MjQ3NQ==", "fields": {"created_at": "2017-07-07T10:30:03Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA5MjAzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU4MjQ4MA==", "fields": {"created_at": "2017-07-07T10:30:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA5MjkwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU4MjQ4Mw==", "fields": {"created_at": "2017-07-07T10:30:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA5Mjg2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU4MzEwNQ==", "fields": {"created_at": "2017-07-07T10:56:56Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkzODk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjQ5Nw==", "fields": {"created_at": "2017-07-05T13:22:42Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjUwMw==", "fields": {"created_at": "2017-07-05T13:22:50Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwOTE4NQ==", "fields": {"created_at": "2017-07-05T15:51:33Z", "content": "HOORAY", "giver": "IpshitaC", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUxMzI5Mg==", "fields": {"created_at": "2017-07-05T17:33:37Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "ihsavru", "review": "MDEyOklzc3VlQ29tbWVudDMxMzE3MTc1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUzMjMzMg==", "fields": {"created_at": "2017-07-06T06:29:10Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMxMzE5Njc1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUzMjY2NQ==", "fields": {"created_at": "2017-07-06T06:45:18Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTczMDU4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUzMjg4Ng==", "fields": {"created_at": "2017-07-06T06:53:58Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQzMzI1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUzMjg5MQ==", "fields": {"created_at": "2017-07-06T06:54:10Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQzMTgyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUzMjkwMQ==", "fields": {"created_at": "2017-07-06T06:54:25Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQzMDUyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUzODUwOA==", "fields": {"created_at": "2017-07-06T09:43:37Z", "content": "THUMBS_UP", "giver": "JohnMoutafis", "receiver": "IpshitaC", "review": "MDEyOklzc3VlQ29tbWVudDMxMzM0NjQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTY0MDI2NQ==", "fields": {"created_at": "2017-07-10T09:59:03Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "sidharthskumar", "review": "MDEyOklzc3VlQ29tbWVudDMxNDA0MTcwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTY4MDMxNQ==", "fields": {"created_at": "2017-07-11T08:30:03Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ1MTc0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTY4MjQ2Nw==", "fields": {"created_at": "2017-07-11T09:28:01Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ1MDQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTY4NDQzNQ==", "fields": {"created_at": "2017-07-11T10:28:23Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjY0ODI4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTY4NDUxOA==", "fields": {"created_at": "2017-07-11T10:32:02Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjY0ODA0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTY5NzYwMQ==", "fields": {"created_at": "2017-07-11T16:12:08Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjY0ODI4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTYyMDc2Nw==", "fields": {"created_at": "2017-07-09T07:34:30Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMxMzg0Njc0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTc0MDcyOA==", "fields": {"created_at": "2017-07-12T15:31:58Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4NTc1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTcyNjAyNg==", "fields": {"created_at": "2017-07-12T09:18:08Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMxNDY2NDgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTczOTY1Nw==", "fields": {"created_at": "2017-07-12T15:10:21Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4MTEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NDc4NQ==", "fields": {"created_at": "2017-07-15T13:20:27Z", "content": "HEART", "giver": "userzimmermann", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMxMjM1OTgxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NDc4OQ==", "fields": {"created_at": "2017-07-15T13:20:51Z", "content": "HEART", "giver": "userzimmermann", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMxMjM1ODUzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4Mw==", "fields": {"created_at": "2017-07-15T15:00:26Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4NQ==", "fields": {"created_at": "2017-07-15T15:00:29Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4Nw==", "fields": {"created_at": "2017-07-15T15:00:36Z", "content": "HEART", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxNTUzODQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4OQ==", "fields": {"created_at": "2017-07-15T15:00:38Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxNTUzODQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5MA==", "fields": {"created_at": "2017-07-15T15:00:43Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5Mg==", "fields": {"created_at": "2017-07-15T15:00:46Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTUxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5NQ==", "fields": {"created_at": "2017-07-15T15:00:49Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5OA==", "fields": {"created_at": "2017-07-15T15:00:52Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwMg==", "fields": {"created_at": "2017-07-15T15:00:55Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTI3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwMw==", "fields": {"created_at": "2017-07-15T15:00:59Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwNQ==", "fields": {"created_at": "2017-07-15T15:01:02Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTIxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwNg==", "fields": {"created_at": "2017-07-15T15:01:06Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwNw==", "fields": {"created_at": "2017-07-15T15:01:09Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjk4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcxMA==", "fields": {"created_at": "2017-07-15T15:01:16Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTEzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0Njc4NA==", "fields": {"created_at": "2017-07-15T16:52:50Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NjUwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1MjQwMw==", "fields": {"created_at": "2017-07-16T05:59:03Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NjUwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1MzcyOQ==", "fields": {"created_at": "2017-07-16T09:15:28Z", "content": "THUMBS_UP", "giver": "sils", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMxMjQ0NDU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDA1MQ==", "fields": {"created_at": "2017-07-16T09:55:59Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDMxNTU5NTQwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDA5Ng==", "fields": {"created_at": "2017-07-16T10:00:30Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4ODIwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDE2NA==", "fields": {"created_at": "2017-07-16T10:06:59Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NjY1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDM1Nw==", "fields": {"created_at": "2017-07-16T10:31:41Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NTk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDM1OQ==", "fields": {"created_at": "2017-07-16T10:31:45Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDM2MA==", "fields": {"created_at": "2017-07-16T10:31:47Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDU1NA==", "fields": {"created_at": "2017-07-16T11:00:19Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTU5OTk2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg2NDI5NA==", "fields": {"created_at": "2017-07-17T04:19:34Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4ODE5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg3NDI4MA==", "fields": {"created_at": "2017-07-17T12:05:46Z", "content": "LAUGH", "giver": "meetmangukiya", "receiver": "JohnMoutafis", "review": "MDEyOklzc3VlQ29tbWVudDMxNTY4NjExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg4NzExMg==", "fields": {"created_at": "2017-07-17T17:32:11Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTYwNjU4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg4NzM1NA==", "fields": {"created_at": "2017-07-17T17:37:51Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg4NzM1Ng==", "fields": {"created_at": "2017-07-17T17:37:53Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk1MTI3Nw==", "fields": {"created_at": "2017-07-19T05:33:35Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkyOTg3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk1NjA0OQ==", "fields": {"created_at": "2017-07-19T08:21:25Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODA4NjY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk1NzE5Ng==", "fields": {"created_at": "2017-07-19T08:49:51Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMxNjI5ODA2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk1ODc0OA==", "fields": {"created_at": "2017-07-19T09:26:50Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzM2NTYzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk1ODc1Mg==", "fields": {"created_at": "2017-07-19T09:26:53Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODE4OTIxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk2NDU0NA==", "fields": {"created_at": "2017-07-19T12:22:36Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIyNjYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk2NDY3MQ==", "fields": {"created_at": "2017-07-19T12:25:53Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIyNjgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk2NDc0MA==", "fields": {"created_at": "2017-07-19T12:27:48Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIyNjk0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk4MTk2Nw==", "fields": {"created_at": "2017-07-19T18:54:54Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNTAwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk4MjQ4MQ==", "fields": {"created_at": "2017-07-19T19:08:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNjg1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2NQ==", "fields": {"created_at": "2017-07-18T06:06:07Z", "content": "HOORAY", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2Ng==", "fields": {"created_at": "2017-07-18T06:06:07Z", "content": "THUMBS_UP", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2Nw==", "fields": {"created_at": "2017-07-18T06:06:08Z", "content": "LAUGH", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2OQ==", "fields": {"created_at": "2017-07-18T06:06:13Z", "content": "HEART", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxMjM0MA==", "fields": {"created_at": "2017-07-18T09:06:30Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ0MzY5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxNDIzNQ==", "fields": {"created_at": "2017-07-18T09:59:21Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwMDk2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxNDcxNw==", "fields": {"created_at": "2017-07-18T10:13:56Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxNTE4NA==", "fields": {"created_at": "2017-07-18T10:29:56Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkxOTQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxODA3MA==", "fields": {"created_at": "2017-07-18T12:04:44Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwNTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxODE5NA==", "fields": {"created_at": "2017-07-18T12:07:54Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkzMTEzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxODE5Ng==", "fields": {"created_at": "2017-07-18T12:07:56Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkzMTI0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxODE5Nw==", "fields": {"created_at": "2017-07-18T12:07:59Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzkzMTM2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyMDg5NQ==", "fields": {"created_at": "2017-07-18T13:21:51Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk1NTc1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyMDk3Mw==", "fields": {"created_at": "2017-07-18T13:23:27Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwMTAzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyMTAwNA==", "fields": {"created_at": "2017-07-18T13:24:25Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwMTQ5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyMTEzOQ==", "fields": {"created_at": "2017-07-18T13:26:56Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwMTkxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyMTQ3Nw==", "fields": {"created_at": "2017-07-18T13:34:20Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzcwNTIzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNTc4OA==", "fields": {"created_at": "2017-07-18T15:03:48Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk5ODExMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNzAzMQ==", "fields": {"created_at": "2017-07-18T15:28:04Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk3MzAwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNzEwNQ==", "fields": {"created_at": "2017-07-18T15:29:42Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNzc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNzEwOA==", "fields": {"created_at": "2017-07-18T15:29:45Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNzc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNzcwOA==", "fields": {"created_at": "2017-07-18T15:43:02Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNjAxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyODg2Mw==", "fields": {"created_at": "2017-07-18T16:10:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxNjExNDE4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyODg2NA==", "fields": {"created_at": "2017-07-18T16:10:12Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxNjExNDE4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA0MzIxNA==", "fields": {"created_at": "2017-07-21T06:52:13Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "AsnelChristian", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODYwNjI0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA0NTg3OA==", "fields": {"created_at": "2017-07-21T08:26:37Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODcwNzEwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA1NzE3NQ==", "fields": {"created_at": "2017-07-21T14:23:42Z", "content": "THUMBS_UP", "giver": "AMR-KELEG", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODY5Njc1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA1ODM0Mw==", "fields": {"created_at": "2017-07-21T14:50:21Z", "content": "THUMBS_UP", "giver": "AMR-KELEG", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODcxOTc0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA2MDY4Mg==", "fields": {"created_at": "2017-07-21T15:49:40Z", "content": "THUMBS_UP", "giver": "AMR-KELEG", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODcxOTQ1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA2NjI5NA==", "fields": {"created_at": "2017-07-21T18:31:49Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODY0NjA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA2NjI5Nw==", "fields": {"created_at": "2017-07-21T18:31:54Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMxNzA0NTU1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA3ODcwMg==", "fields": {"created_at": "2017-07-22T10:58:34Z", "content": "THUMBS_UP", "giver": "AMR-KELEG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NDY1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA3ODg4Mw==", "fields": {"created_at": "2017-07-22T11:24:52Z", "content": "THUMBS_UP", "giver": "AMR-KELEG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NDY4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA3OTg0OQ==", "fields": {"created_at": "2017-07-22T13:22:07Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA3OTg3NQ==", "fields": {"created_at": "2017-07-22T13:25:50Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA4NTkzNQ==", "fields": {"created_at": "2017-07-23T03:06:12Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkwODk3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA4NjIwMA==", "fields": {"created_at": "2017-07-23T03:58:32Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkwODkwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA4NjIwOA==", "fields": {"created_at": "2017-07-23T03:59:20Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkwODg2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA5MTkwMQ==", "fields": {"created_at": "2017-07-23T16:50:07Z", "content": "THUMBS_UP", "giver": "AMR-KELEG", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkxMDA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA5MjI1Mw==", "fields": {"created_at": "2017-07-23T17:27:24Z", "content": "THUMBS_UP", "giver": "ihsavru", "receiver": "snakevenom04", "review": "MDEyOklzc3VlQ29tbWVudDMxNzI2ODQ3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjAwMDc3NA==", "fields": {"created_at": "2017-07-20T07:39:17Z", "content": "THUMBS_UP", "giver": "S2606", "receiver": "S2606", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODQ0MzY5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjAwMDczMA==", "fields": {"created_at": "2017-07-20T07:37:34Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "S2606", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODQ0MzY5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjAwOTQ5MA==", "fields": {"created_at": "2017-07-20T11:52:08Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIzODIwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjAwOTU5Mw==", "fields": {"created_at": "2017-07-20T11:55:58Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIzODM0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjAyMTI0NA==", "fields": {"created_at": "2017-07-20T16:33:21Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg5NzYzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjAyNzIxNA==", "fields": {"created_at": "2017-07-20T19:04:11Z", "content": "THUMBS_UP", "giver": "AsnelChristian", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODIyNzA3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjAzMTYzOQ==", "fields": {"created_at": "2017-07-20T21:07:14Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODI0NDU2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjE1NzMzOQ==", "fields": {"created_at": "2017-07-25T11:29:59Z", "content": "THUMBS_UP", "giver": "snakevenom04", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMxNzQ0Nzk5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjE1OTAxNQ==", "fields": {"created_at": "2017-07-25T12:25:22Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "ashwini0529", "review": "MDEyOklzc3VlQ29tbWVudDMxNzU3MjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjE1OTAxNg==", "fields": {"created_at": "2017-07-25T12:25:22Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "ashwini0529", "review": "MDEyOklzc3VlQ29tbWVudDMxNzU3MjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjE2ODQ0Mg==", "fields": {"created_at": "2017-07-25T15:48:04Z", "content": "LAUGH", "giver": "Makman2", "receiver": "snakevenom04", "review": "MDEyOklzc3VlQ29tbWVudDMxNzcwOTU5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjEwMTg3Nw==", "fields": {"created_at": "2017-07-24T07:13:22Z", "content": "HEART", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODk2MDY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjEwNDYyNQ==", "fields": {"created_at": "2017-07-24T08:43:41Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODk3ODk1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjEwNTIwMQ==", "fields": {"created_at": "2017-07-24T09:00:09Z", "content": "HOORAY", "giver": "damngamerz", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMxNzM1OTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjEwNzU5MA==", "fields": {"created_at": "2017-07-24T10:05:17Z", "content": "HOORAY", "giver": "SanketDG", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMxNzM1OTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMTA2OA==", "fields": {"created_at": "2017-07-24T11:57:56Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzEzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMTA3MA==", "fields": {"created_at": "2017-07-24T11:57:58Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzA2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMTA3Ng==", "fields": {"created_at": "2017-07-24T11:58:05Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMTIyMg==", "fields": {"created_at": "2017-07-24T12:02:18Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMjQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMTIyNA==", "fields": {"created_at": "2017-07-24T12:02:21Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMjQ2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMTIyNg==", "fields": {"created_at": "2017-07-24T12:02:24Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMTcwMg==", "fields": {"created_at": "2017-07-24T12:16:14Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMTcwNw==", "fields": {"created_at": "2017-07-24T12:16:19Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzY0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMjE4OQ==", "fields": {"created_at": "2017-07-24T12:29:06Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMzU5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExMjEzNw==", "fields": {"created_at": "2017-07-24T12:27:59Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTAxMjgwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExNTk3NQ==", "fields": {"created_at": "2017-07-24T13:53:45Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMxNzQyOTI1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjExNTkxMw==", "fields": {"created_at": "2017-07-24T13:52:30Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Adrianzatreanu", "review": "MDEyOklzc3VlQ29tbWVudDMxNzQxMjAyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjEyMDEyOA==", "fields": {"created_at": "2017-07-24T15:13:40Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTA2Mzg3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjEyMDI4Ng==", "fields": {"created_at": "2017-07-24T15:16:57Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTA2NDYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjEyMDY2OA==", "fields": {"created_at": "2017-07-24T15:23:22Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTA2NDQwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjI1MzIzNQ==", "fields": {"created_at": "2017-07-27T12:47:30Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTgyNTg2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjI1Mzk4OQ==", "fields": {"created_at": "2017-07-27T13:06:55Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTgzMDcyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjI1NDA0OQ==", "fields": {"created_at": "2017-07-27T13:08:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTgzNTM4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjIwOTMwNA==", "fields": {"created_at": "2017-07-26T13:55:39Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQ5MTU2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM0NDczMg==", "fields": {"created_at": "2017-07-31T07:03:34Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDI1MTUzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM0NTc0Mg==", "fields": {"created_at": "2017-07-31T07:42:31Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDI1MTU0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM0NTc1MQ==", "fields": {"created_at": "2017-07-31T07:42:56Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDI1MTUwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM0NTc1Nw==", "fields": {"created_at": "2017-07-31T07:43:05Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDI1MTUyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM1OTY0Mg==", "fields": {"created_at": "2017-07-31T14:43:06Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDM3MTYxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2MDA1NA==", "fields": {"created_at": "2017-07-31T14:50:54Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMxOTA5MDM5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2MDQ2NQ==", "fields": {"created_at": "2017-07-31T14:59:45Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDM3NDA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2MjI1MA==", "fields": {"created_at": "2017-07-31T15:38:49Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMxOTEwNzcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2MjIwNQ==", "fields": {"created_at": "2017-07-31T15:37:49Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxOTA1Njg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2NDYwNw==", "fields": {"created_at": "2017-07-31T16:44:05Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDMxOTEyNjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM4NDc1MA==", "fields": {"created_at": "2017-08-01T06:03:03Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMxOTA5MDA0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM4NDc1NQ==", "fields": {"created_at": "2017-08-01T06:03:07Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDM3MzgxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM4NDc1Nw==", "fields": {"created_at": "2017-08-01T06:03:12Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDM3Mzc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM4NTA4Nw==", "fields": {"created_at": "2017-08-01T06:20:49Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDQ2NjkxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM4NTA4OA==", "fields": {"created_at": "2017-08-01T06:20:51Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDQ0NTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM4NTEwOQ==", "fields": {"created_at": "2017-08-01T06:21:42Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDQ2Njk0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM4NTEzMg==", "fields": {"created_at": "2017-08-01T06:22:51Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDQ2OTU5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM5MjczMg==", "fields": {"created_at": "2017-08-01T10:28:01Z", "content": "LAUGH", "giver": "Nosferatul", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMxOTMwNjUxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM5OTc3MA==", "fields": {"created_at": "2017-08-01T13:59:03Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDUyODg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyMDIzMA==", "fields": {"created_at": "2017-07-29T07:14:39Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDA5NzU1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyMDIzMg==", "fields": {"created_at": "2017-07-29T07:14:45Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDEyODI2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyMDIzNA==", "fields": {"created_at": "2017-07-29T07:15:12Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDEyODM2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyMDk2Ng==", "fields": {"created_at": "2017-07-29T08:51:33Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDMxODYwMDk5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyMzUxMg==", "fields": {"created_at": "2017-07-29T14:13:34Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMTM2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNTE2MQ==", "fields": {"created_at": "2017-07-29T17:10:49Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNTcyOA==", "fields": {"created_at": "2017-07-29T18:14:47Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMxODgyOTA0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNjczNA==", "fields": {"created_at": "2017-07-29T20:07:49Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTgxNDE3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNzI1NA==", "fields": {"created_at": "2017-07-29T21:08:19Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyODM0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNzg3OA==", "fields": {"created_at": "2017-07-29T22:26:53Z", "content": "HOORAY", "giver": "Makman2", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDMxODg2MTk3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNzg3OQ==", "fields": {"created_at": "2017-07-29T22:26:55Z", "content": "LAUGH", "giver": "Makman2", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDMxODg2MTk3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyOTgwMw==", "fields": {"created_at": "2017-07-30T04:24:42Z", "content": "THUMBS_UP", "giver": "ayush1999", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMxODg2MTM2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMzMDE4Nw==", "fields": {"created_at": "2017-07-30T05:44:19Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMxODg2MTI0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ0OTYxMQ==", "fields": {"created_at": "2017-08-02T14:47:30Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDg3OTk0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ0OTg0OQ==", "fields": {"created_at": "2017-08-02T14:51:18Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDg3OTI5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ0OTg3MA==", "fields": {"created_at": "2017-08-02T14:51:43Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDg4MDA3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ1MjU1NQ==", "fields": {"created_at": "2017-08-02T15:42:48Z", "content": "HOORAY", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxNDIxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ2MTU2OQ==", "fields": {"created_at": "2017-08-02T18:44:50Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxODYxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ2Mzc5Nw==", "fields": {"created_at": "2017-08-02T19:46:59Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMxOTU0MTc1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ2MzgxOA==", "fields": {"created_at": "2017-08-02T19:47:34Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA5ODkyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ3MDUwNg==", "fields": {"created_at": "2017-08-02T23:05:55Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDk2MjYyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ4NjIzNg==", "fields": {"created_at": "2017-08-03T10:15:45Z", "content": "THUMBS_UP", "giver": "ayush1999", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxODYxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ5OTI5NQ==", "fields": {"created_at": "2017-08-03T15:52:06Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkyMTY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ5OTI5Ng==", "fields": {"created_at": "2017-08-03T15:52:09Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxOTM0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQ5OTMwNQ==", "fields": {"created_at": "2017-08-03T15:52:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxOTEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQzOTg2Nw==", "fields": {"created_at": "2017-08-02T10:54:27Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDYxNDkxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjQzOTg4Ng==", "fields": {"created_at": "2017-08-02T10:54:56Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDYxNTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU1MDE3MQ==", "fields": {"created_at": "2017-08-04T20:09:51Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTIxNTEwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU2MTAzNg==", "fields": {"created_at": "2017-08-05T13:13:26Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMyMDI3NzQwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU2MTAzOQ==", "fields": {"created_at": "2017-08-05T13:13:39Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDMyMDI4MzkyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU2MTM0MQ==", "fields": {"created_at": "2017-08-05T13:48:01Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyMDQ0MzQ4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU2MjU3Nw==", "fields": {"created_at": "2017-08-05T15:54:43Z", "content": "THUMBS_UP", "giver": "incorrectusername", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDMyMDE3Mzk1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MDM1MQ==", "fields": {"created_at": "2017-08-06T11:04:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MDMwNg==", "fields": {"created_at": "2017-08-06T10:56:39Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTU0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MDQ5Mg==", "fields": {"created_at": "2017-08-06T11:22:23Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTU0MDA1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MDY1Ng==", "fields": {"created_at": "2017-08-06T11:39:52Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTYzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MDY2Mw==", "fields": {"created_at": "2017-08-06T11:41:29Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTY1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MTcwMw==", "fields": {"created_at": "2017-08-06T13:59:13Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTU0MzAwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU4MjgyMw==", "fields": {"created_at": "2017-08-07T06:32:40Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDMyMDUyODE3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU5NzU0MQ==", "fields": {"created_at": "2017-08-07T14:31:26Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMyMDQ2MzYxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU5ODYyMQ==", "fields": {"created_at": "2017-08-07T14:56:27Z", "content": "THUMBS_UP", "giver": "AMR-KELEG", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQ2MTgwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjUyMzU1Ng==", "fields": {"created_at": "2017-08-04T06:56:48Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxMTY0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjUyNDcxMw==", "fields": {"created_at": "2017-08-04T07:37:16Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxOTEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjUyNDcyMw==", "fields": {"created_at": "2017-08-04T07:37:34Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxOTM0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjUyNDczMw==", "fields": {"created_at": "2017-08-04T07:37:55Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkyMTY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjUzMjAwNQ==", "fields": {"created_at": "2017-08-04T11:38:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTMxODAwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY4NDg1NA==", "fields": {"created_at": "2017-08-09T14:09:21Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTE4NjYxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY4Njc5MQ==", "fields": {"created_at": "2017-08-09T14:47:45Z", "content": "HOORAY", "giver": "Adrianzatreanu", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMyMDYwMjgyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY4Njk2NQ==", "fields": {"created_at": "2017-08-09T14:52:05Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMDQzODc0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY4NzY4Mw==", "fields": {"created_at": "2017-08-09T15:07:14Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTU0MjUwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY4Nzc4Nw==", "fields": {"created_at": "2017-08-09T15:09:32Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTU0MjcwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY4OTc0MQ==", "fields": {"created_at": "2017-08-09T15:51:27Z", "content": "HEART", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyMTEwMjEwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY5MDE3Mg==", "fields": {"created_at": "2017-08-09T16:00:39Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTY1MjY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY5MDE3NQ==", "fields": {"created_at": "2017-08-09T16:00:43Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTY1MjMyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY5MDQ5MA==", "fields": {"created_at": "2017-08-09T16:08:59Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "yash-nisar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjIyNjkyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjY5MTIxOA==", "fields": {"created_at": "2017-08-09T16:24:59Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTY1MjgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc3ODY4MA==", "fields": {"created_at": "2017-08-11T16:05:01Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjM2ODk3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc3ODY4Mg==", "fields": {"created_at": "2017-08-11T16:05:07Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjM2ODU3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc4MDk4NA==", "fields": {"created_at": "2017-08-11T17:07:17Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "Stropek", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQxNDk2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTU3Mw==", "fields": {"created_at": "2017-08-12T14:42:02Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzE0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTU3Ng==", "fields": {"created_at": "2017-08-12T14:42:13Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzIxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTU5NA==", "fields": {"created_at": "2017-08-12T14:44:33Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzMxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTYxMA==", "fields": {"created_at": "2017-08-12T14:46:17Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzM5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTYxMw==", "fields": {"created_at": "2017-08-12T14:46:25Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MzA1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTg2Ng==", "fields": {"created_at": "2017-08-12T15:14:16Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2ODgzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTg3Mw==", "fields": {"created_at": "2017-08-12T15:15:25Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2ODYxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTg5Ng==", "fields": {"created_at": "2017-08-12T15:17:48Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2ODcxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTgyNg==", "fields": {"created_at": "2017-08-12T15:11:54Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2NzUxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTgyNw==", "fields": {"created_at": "2017-08-12T15:11:57Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2NzU3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTgzNg==", "fields": {"created_at": "2017-08-12T15:12:35Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2ODI2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTk0MQ==", "fields": {"created_at": "2017-08-12T15:21:16Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTk0NA==", "fields": {"created_at": "2017-08-12T15:21:29Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTg0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTk0Ng==", "fields": {"created_at": "2017-08-12T15:21:39Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTkxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTk0Nw==", "fields": {"created_at": "2017-08-12T15:21:52Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MDEwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTk1OA==", "fields": {"created_at": "2017-08-12T15:22:55Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MjE1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTk2Mg==", "fields": {"created_at": "2017-08-12T15:23:17Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MjIxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTkxNg==", "fields": {"created_at": "2017-08-12T15:19:01Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTM1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTkyNg==", "fields": {"created_at": "2017-08-12T15:19:57Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTQ0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjc5OTkzNA==", "fields": {"created_at": "2017-08-12T15:20:50Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc2OTQ3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjcxMjM0Ng==", "fields": {"created_at": "2017-08-10T04:50:39Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTY1NDE1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDI1NQ==", "fields": {"created_at": "2017-08-10T15:40:20Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDU1MA==", "fields": {"created_at": "2017-08-10T15:46:20Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNjc1OA==", "fields": {"created_at": "2017-08-10T16:34:26Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjg2MDExNQ==", "fields": {"created_at": "2017-08-15T07:21:47Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDMyMTk1NTkwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjg2NDI0NA==", "fields": {"created_at": "2017-08-15T09:44:24Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDMyMjM5MTkwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjg2OTEyNg==", "fields": {"created_at": "2017-08-15T12:51:58Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyMjQ1MTgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwMDA1Mw==", "fields": {"created_at": "2017-08-12T15:31:57Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc3MjM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwMDE3Nw==", "fields": {"created_at": "2017-08-12T15:45:34Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwMTk5OQ==", "fields": {"created_at": "2017-08-12T19:03:18Z", "content": "HEART", "giver": "Nosferatul", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgyNDU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNDc5OA==", "fields": {"created_at": "2017-08-13T02:03:39Z", "content": "THUMBS_UP", "giver": "incorrectusername", "receiver": "satwikkansal", "review": "MDEyOklzc3VlQ29tbWVudDMyMTk5ODQ4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2Mw==", "fields": {"created_at": "2017-08-13T11:05:41Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2NQ==", "fields": {"created_at": "2017-08-13T11:05:45Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2Ng==", "fields": {"created_at": "2017-08-13T11:05:48Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2Nw==", "fields": {"created_at": "2017-08-13T11:05:51Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgzMjA5NA==", "fields": {"created_at": "2017-08-14T14:03:53Z", "content": "THUMBS_UP", "giver": "yash-nisar", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjk0ODUyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk2NjIyNw==", "fields": {"created_at": "2017-08-17T16:06:29Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY4NzY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk5NjkyNQ==", "fields": {"created_at": "2017-08-18T10:32:38Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyMzMxODIwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk5OTI4MQ==", "fields": {"created_at": "2017-08-18T12:03:55Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY3ODMwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk5OTIwOA==", "fields": {"created_at": "2017-08-18T12:01:43Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY3ODk3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk5OTIxMQ==", "fields": {"created_at": "2017-08-18T12:01:46Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY3ODIzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk5OTcwMQ==", "fields": {"created_at": "2017-08-18T12:18:38Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY3OTQ0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjkxNzczMA==", "fields": {"created_at": "2017-08-16T14:55:33Z", "content": "THUMBS_UP", "giver": "IpshitaC", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMyMjUzMTQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjkxNzczNA==", "fields": {"created_at": "2017-08-16T14:55:36Z", "content": "HOORAY", "giver": "IpshitaC", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMyMjUzMTQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjkyMDU1OA==", "fields": {"created_at": "2017-08-16T15:53:51Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ1MzY1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjkyMDYwOQ==", "fields": {"created_at": "2017-08-16T15:55:06Z", "content": "LAUGH", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDEyOklzc3VlQ29tbWVudDMyMjc3NjczMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjkyMDYxNA==", "fields": {"created_at": "2017-08-16T15:55:14Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ1Mzk3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjkyMTIwOA==", "fields": {"created_at": "2017-08-16T16:08:52Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ1MjAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjkyMTMwMw==", "fields": {"created_at": "2017-08-16T16:10:36Z", "content": "HEART", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ1MjAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzA3MTI5NQ==", "fields": {"created_at": "2017-08-21T17:16:11Z", "content": "HOORAY", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDEyOklzc3VlQ29tbWVudDMyMzYxMjM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzA3NTU3Ng==", "fields": {"created_at": "2017-08-21T19:33:49Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDIyODg0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzA5NzA5Mg==", "fields": {"created_at": "2017-08-22T09:51:23Z", "content": "THUMBS_UP", "giver": "snakevenom04", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDMyMzgzMDQ1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzAyNDQwNQ==", "fields": {"created_at": "2017-08-19T06:07:16Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDA4MzA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzAzNzc0Mw==", "fields": {"created_at": "2017-08-20T12:00:48Z", "content": "HOORAY", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDEyOklzc3VlQ29tbWVudDMyMzQxNjA2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzAzNzc1MA==", "fields": {"created_at": "2017-08-20T12:01:16Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDA2OTkxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzE1MDg0MA==", "fields": {"created_at": "2017-08-23T13:39:46Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDc0NjQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzE1MDg0Mw==", "fields": {"created_at": "2017-08-23T13:39:48Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDc0NjcyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzE1MDgzOQ==", "fields": {"created_at": "2017-08-23T13:39:46Z", "content": "HEART", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDc0NTcwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzE2MTYxMw==", "fields": {"created_at": "2017-08-23T17:27:55Z", "content": "THUMBS_UP", "giver": "gurpreetsingh00885", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDQwMzI4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzE2MTYyNg==", "fields": {"created_at": "2017-08-23T17:28:09Z", "content": "THUMBS_UP", "giver": "gurpreetsingh00885", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDQwMzA2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzE2NTI3OQ==", "fields": {"created_at": "2017-08-23T19:01:28Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDQwNDgwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzE4MTY1MQ==", "fields": {"created_at": "2017-08-24T05:22:24Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDkyNTcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzE5OTYxNw==", "fields": {"created_at": "2017-08-24T14:10:44Z", "content": "THUMBS_UP", "giver": "yukiisbored", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDk3MDUxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzEyNDI1MA==", "fields": {"created_at": "2017-08-22T21:18:55Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDU5NDY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI1Mzc5OA==", "fields": {"created_at": "2017-08-25T18:43:16Z", "content": "THUMBS_UP", "giver": "gurpreetsingh00885", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDk5MzEwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI1NDczMw==", "fields": {"created_at": "2017-08-25T19:13:52Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDk5NjQ2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI1OTY5Mg==", "fields": {"created_at": "2017-08-25T22:13:59Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTEzMTI1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2MTY3MQ==", "fields": {"created_at": "2017-08-26T00:12:58Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "umeshksingla", "review": "MDEyOklzc3VlQ29tbWVudDMyNTA1NzQ1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Mzk2Ng==", "fields": {"created_at": "2017-08-26T05:44:34Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTA0MzgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2NDcyNQ==", "fields": {"created_at": "2017-08-26T07:50:52Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTA2ODM5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njc4OA==", "fields": {"created_at": "2017-08-26T12:34:40Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njc5MA==", "fields": {"created_at": "2017-08-26T12:34:58Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzc4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njc5Mw==", "fields": {"created_at": "2017-08-26T12:35:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4NzkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njg3Ng==", "fields": {"created_at": "2017-08-26T12:47:39Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDMyNTExOTA4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njg3Nw==", "fields": {"created_at": "2017-08-26T12:47:42Z", "content": "LAUGH", "giver": "Makman2", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDMyNTExOTA4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2NzM1Nw==", "fields": {"created_at": "2017-08-26T13:51:36Z", "content": "THUMBS_UP", "giver": "umeshksingla", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTEyODI4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2NzY0Mw==", "fields": {"created_at": "2017-08-26T14:19:46Z", "content": "THUMBS_UP", "giver": "umeshksingla", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDMyNTEzMTAzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI3MTQ3Nw==", "fields": {"created_at": "2017-08-26T21:06:04Z", "content": "THUMBS_UP", "giver": "umeshksingla", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM5MTc4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI4MDA2OA==", "fields": {"created_at": "2017-08-27T17:35:59Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTEzOTY4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI4MDA2OQ==", "fields": {"created_at": "2017-08-27T17:36:01Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTEzOTc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI4MjA0Mg==", "fields": {"created_at": "2017-08-27T20:56:42Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI4MjA0Mw==", "fields": {"created_at": "2017-08-27T20:56:45Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQ0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI5MDI1MQ==", "fields": {"created_at": "2017-08-28T07:37:29Z", "content": "HOORAY", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDEyOklzc3VlQ29tbWVudDMyNTI4MjQxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI5MDQ3Nw==", "fields": {"created_at": "2017-08-28T07:45:46Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDEyOklzc3VlQ29tbWVudDMyNTI4Mjg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI5MzA3MQ==", "fields": {"created_at": "2017-08-28T09:06:51Z", "content": "HEART", "giver": "hemangsk", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMyNTMwMDc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzIxNDEzNw==", "fields": {"created_at": "2017-08-24T19:30:38Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMyNDYxODY2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzIxODAyMw==", "fields": {"created_at": "2017-08-24T21:14:17Z", "content": "LAUGH", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDM5Nzk3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzIyODg4Ng==", "fields": {"created_at": "2017-08-25T06:01:37Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDcyNzg2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzIyOTIzMQ==", "fields": {"created_at": "2017-08-25T06:19:49Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDc0MDQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzIyOTIzMg==", "fields": {"created_at": "2017-08-25T06:20:03Z", "content": "LAUGH", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDc0MDU2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzIyOTIzNQ==", "fields": {"created_at": "2017-08-25T06:20:08Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNDc0MDU4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzIzMDg4OQ==", "fields": {"created_at": "2017-08-25T07:26:44Z", "content": "THUMBS_UP", "giver": "snakevenom04", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDMyNDE0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzM0MTA2Mw==", "fields": {"created_at": "2017-08-29T11:08:23Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMyNTUzODU5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzM1MDg2Ng==", "fields": {"created_at": "2017-08-29T15:09:01Z", "content": "THUMBS_UP", "giver": "mani87", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTY3MTM5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzM3NTMwOA==", "fields": {"created_at": "2017-08-30T03:25:19Z", "content": "THUMBS_UP", "giver": "mani87", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTgxNTE1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzM5MTQ0MQ==", "fields": {"created_at": "2017-08-30T12:46:32Z", "content": "HOORAY", "giver": "RJ722", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyNTk2ODc3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMxMTE4MQ==", "fields": {"created_at": "2017-08-28T17:39:36Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTM2NDMwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMxMTE4NQ==", "fields": {"created_at": "2017-08-28T17:39:40Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTM2NDU1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMxNTgxNw==", "fields": {"created_at": "2017-08-28T19:37:32Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyNTQ0NTUzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMyMjI5Mg==", "fields": {"created_at": "2017-08-28T22:41:50Z", "content": "LAUGH", "giver": "Makman2", "receiver": "Stropek", "review": "MDEyOklzc3VlQ29tbWVudDMyNTUwMzYwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMyMjI5NA==", "fields": {"created_at": "2017-08-28T22:41:52Z", "content": "HOORAY", "giver": "Makman2", "receiver": "Stropek", "review": "MDEyOklzc3VlQ29tbWVudDMyNTUwMzYwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMyMjMyMg==", "fields": {"created_at": "2017-08-28T22:43:13Z", "content": "THUMBS_UP", "giver": "Stropek", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTUwMjkyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMzMDY0MA==", "fields": {"created_at": "2017-08-29T05:59:02Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTYzODcxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMzMDY0Mw==", "fields": {"created_at": "2017-08-29T05:59:12Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTQ4NzAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMzMDYzMg==", "fields": {"created_at": "2017-08-29T05:58:35Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTYzNzQyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMzMDYzNA==", "fields": {"created_at": "2017-08-29T05:58:41Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTYzNzk1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzMzNjg5MQ==", "fields": {"created_at": "2017-08-29T09:11:32Z", "content": "CONFUSED", "giver": "mani87", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTQxNTExMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQ0MjMwNA==", "fields": {"created_at": "2017-08-31T14:22:14Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDEyOklzc3VlQ29tbWVudDMyNjE0ODYwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQ1MjUzMg==", "fields": {"created_at": "2017-08-31T18:19:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQwODcyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQwMTE5NQ==", "fields": {"created_at": "2017-08-30T16:11:14Z", "content": "HOORAY", "giver": "RJ722", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTY3MzE3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQwMTQyOA==", "fields": {"created_at": "2017-08-30T16:17:15Z", "content": "LAUGH", "giver": "RJ722", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNTY3MzE3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQwMzEwNQ==", "fields": {"created_at": "2017-08-30T16:55:57Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMyNjA0MjM5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQwNjM1OA==", "fields": {"created_at": "2017-08-30T18:09:21Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "adhikasp", "review": "MDEyOklzc3VlQ29tbWVudDMyNTc1MDkyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQwNzY3OA==", "fields": {"created_at": "2017-08-30T18:37:55Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTkyMjYzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQwNzY4Mw==", "fields": {"created_at": "2017-08-30T18:38:02Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTkyMzE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzU0NzQ4NQ==", "fields": {"created_at": "2017-09-04T17:38:53Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "umeshksingla", "review": "MDEyOklzc3VlQ29tbWVudDMyNzAwNjg5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzU0ODU4Mg==", "fields": {"created_at": "2017-09-04T18:45:58Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMyNjk5NDg1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzU3MTAwNQ==", "fields": {"created_at": "2017-09-05T12:13:36Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "Stropek", "review": "MDEyOklzc3VlQ29tbWVudDMyNTUwMzYwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzU3MTM2Ng==", "fields": {"created_at": "2017-09-05T12:25:25Z", "content": "CONFUSED", "giver": "userzimmermann", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTYxNzY1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzU3MTQ2MA==", "fields": {"created_at": "2017-09-05T12:27:50Z", "content": "HEART", "giver": "userzimmermann", "receiver": "damngamerz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDA5MTI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzU3MzYxNA==", "fields": {"created_at": "2017-09-05T13:23:56Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjk3NDExNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzUwOTc0Mw==", "fields": {"created_at": "2017-09-02T18:12:11Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Raman1121", "review": "MDEyOklzc3VlQ29tbWVudDMyNjc2MDI0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzUxNzE1OA==", "fields": {"created_at": "2017-09-03T12:50:43Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "yash-nisar", "review": "MDEyOklzc3VlQ29tbWVudDMyNjc4Mjk5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzUyNzQ3MA==", "fields": {"created_at": "2017-09-04T05:44:27Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjIxNzYyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzYxMjU2OQ==", "fields": {"created_at": "2017-09-06T10:32:18Z", "content": "LAUGH", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMyNzI3NDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzcwNjk4OA==", "fields": {"created_at": "2017-09-08T13:25:43Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzY0OTcwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzgwMjcwMA==", "fields": {"created_at": "2017-09-12T07:02:05Z", "content": "THUMBS_UP", "giver": "atultherajput", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDMyODY3Njc1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzgzMTM1NQ==", "fields": {"created_at": "2017-09-12T19:19:23Z", "content": "THUMBS_UP", "giver": "gurpreetsingh00885", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODE5OTQ4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzgzMTM2Mg==", "fields": {"created_at": "2017-09-12T19:19:29Z", "content": "CONFUSED", "giver": "gurpreetsingh00885", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODIwMDMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzk5MTEzMg==", "fields": {"created_at": "2017-09-17T10:03:43Z", "content": "CONFUSED", "giver": "Logan1x", "receiver": "IamRaviTejaG", "review": "MDEyOklzc3VlQ29tbWVudDMzMDAwMzkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzk5MTM5MQ==", "fields": {"created_at": "2017-09-17T10:36:02Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODIyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzk5MTM5Mg==", "fields": {"created_at": "2017-09-17T10:36:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDM3MTI2NQ==", "fields": {"created_at": "2017-09-27T14:46:33Z", "content": "LAUGH", "giver": "Makman2", "receiver": "stellargo", "review": "MDEyOklzc3VlQ29tbWVudDMzMjU0NDEyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDM3MTI2OA==", "fields": {"created_at": "2017-09-27T14:46:34Z", "content": "HOORAY", "giver": "Makman2", "receiver": "stellargo", "review": "MDEyOklzc3VlQ29tbWVudDMzMjU0NDEyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDM3MTUzNA==", "fields": {"created_at": "2017-09-27T14:51:35Z", "content": "THUMBS_UP", "giver": "stellargo", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzMjU0NzA3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDMxODg2OQ==", "fields": {"created_at": "2017-09-26T13:54:51Z", "content": "THUMBS_UP", "giver": "atultherajput", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzMTY0MjQ3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDMzMjg5MQ==", "fields": {"created_at": "2017-09-26T18:48:02Z", "content": "THUMBS_UP", "giver": "gurpreetsingh00885", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzMjI3MzI1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDQ2MzA1NA==", "fields": {"created_at": "2017-09-29T14:54:14Z", "content": "THUMBS_UP", "giver": "urohit011", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzMzEzMjI4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDQ5NDc4MA==", "fields": {"created_at": "2017-10-01T05:24:40Z", "content": "THUMBS_UP", "giver": "urohit011", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzMzMyNDI3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDQ5NzM3Ng==", "fields": {"created_at": "2017-10-01T11:40:27Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "urohit011", "review": "MDEyOklzc3VlQ29tbWVudDMzMzM3MDc4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU2Njg5OQ==", "fields": {"created_at": "2017-10-03T13:07:57Z", "content": "THUMBS_UP", "giver": "rupav", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMzMzgzMDk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU2NjkwMg==", "fields": {"created_at": "2017-10-03T13:08:00Z", "content": "THUMBS_UP", "giver": "rupav", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMzMzgzMTczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3MjgyMQ==", "fields": {"created_at": "2017-10-03T15:09:46Z", "content": "THUMBS_UP", "giver": "rupav", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMzMzg2OTQ4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3Mjk4NA==", "fields": {"created_at": "2017-10-03T15:13:55Z", "content": "THUMBS_UP", "giver": "rupav", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMzMzg3NDE0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3Mzk5NA==", "fields": {"created_at": "2017-10-03T15:33:52Z", "content": "THUMBS_UP", "giver": "aptrishu", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjM5NTA2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3NjMxOQ==", "fields": {"created_at": "2017-10-03T16:25:28Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzMjQxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3NjQxNQ==", "fields": {"created_at": "2017-10-03T16:27:37Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzNDEyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3OTM3MA==", "fields": {"created_at": "2017-10-03T17:34:56Z", "content": "THUMBS_UP", "giver": "rupav", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMzMzg3OTc3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDY0MTgzNg==", "fields": {"created_at": "2017-10-05T01:14:22Z", "content": "THUMBS_UP", "giver": "HarshKhatore", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzNDE3MDM5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDc0NzY2NA==", "fields": {"created_at": "2017-10-08T12:49:55Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDMzNTAwNDQ3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDc0NzYyMQ==", "fields": {"created_at": "2017-10-08T12:45:32Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzNTAwNDI1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDc1NzkxNQ==", "fields": {"created_at": "2017-10-09T04:19:34Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzM2NzY1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDg0ODU0NQ==", "fields": {"created_at": "2017-10-11T00:22:27Z", "content": "THUMBS_UP", "giver": "alphadose", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzNTYzNDY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDg4NzU1MQ==", "fields": {"created_at": "2017-10-11T18:19:30Z", "content": "THUMBS_UP", "giver": "alphadose", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzNTgxOTU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTA0NjU4Nw==", "fields": {"created_at": "2017-10-16T14:52:50Z", "content": "THUMBS_UP", "giver": "alphadose", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzNjg4MTk5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTA2MDMxNg==", "fields": {"created_at": "2017-10-16T20:04:34Z", "content": "THUMBS_UP", "giver": "acashmkj", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzNzAwNzg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTA2MTA2OA==", "fields": {"created_at": "2017-10-16T20:22:59Z", "content": "THUMBS_UP", "giver": "mansiagarwal451", "receiver": "aptrishu", "review": "MDEyOklzc3VlQ29tbWVudDMzNzAyNzMwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTA2ODQ0Nw==", "fields": {"created_at": "2017-10-17T00:31:42Z", "content": "THUMBS_UP", "giver": "rpanczer", "receiver": "CCInCharge", "review": "MDEyOklzc3VlQ29tbWVudDMzNzA3NzU3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTA3MjUzMg==", "fields": {"created_at": "2017-10-17T03:38:05Z", "content": "THUMBS_UP", "giver": "swapagarwal", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMzNzA3MDkwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTAwNTQyMg==", "fields": {"created_at": "2017-10-14T21:05:19Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY5NTk4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTAxNTg2MA==", "fields": {"created_at": "2017-10-15T15:53:13Z", "content": "LAUGH", "giver": "cristianossd", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzNjcwMTcxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE0ODA5NQ==", "fields": {"created_at": "2017-10-18T15:09:42Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ2NjI5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE0ODM4OA==", "fields": {"created_at": "2017-10-18T15:15:31Z", "content": "THUMBS_UP", "giver": "stellargo", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzNzYyNTEyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE1Mzc5MA==", "fields": {"created_at": "2017-10-18T17:03:53Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTQ1MDc0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE1MzgwNA==", "fields": {"created_at": "2017-10-18T17:04:08Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTQ1MTczMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE1MzgwNw==", "fields": {"created_at": "2017-10-18T17:04:10Z", "content": "HOORAY", "giver": "sonali0901", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDMzNzYyODcwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE3NDU2OQ==", "fields": {"created_at": "2017-10-19T04:32:56Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTQ1MTQ0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE4NDk2NA==", "fields": {"created_at": "2017-10-19T11:28:17Z", "content": "THUMBS_UP", "giver": "kartikeys98", "receiver": "soumya-ranjan7", "review": "MDEyOklzc3VlQ29tbWVudDMzNzg3ODY1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE4OTE0OA==", "fields": {"created_at": "2017-10-19T13:49:30Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzNzkxMzQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE4OTIwNA==", "fields": {"created_at": "2017-10-19T13:50:39Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzNzkxMzU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE4OTc0NQ==", "fields": {"created_at": "2017-10-19T14:03:40Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "alphadose", "review": "MDEyOklzc3VlQ29tbWVudDMzNzgwOTgyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE5NTI1NQ==", "fields": {"created_at": "2017-10-19T16:42:32Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzNzk2NjA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTE5NTYxMg==", "fields": {"created_at": "2017-10-19T16:53:18Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDMzNzk2NzA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEwNjY3NA==", "fields": {"created_at": "2017-10-17T18:39:45Z", "content": "THUMBS_UP", "giver": "nealkarpe", "receiver": "sonali0901", "review": "MDEyOklzc3VlQ29tbWVudDMzNzMyMjA1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjIwMg==", "fields": {"created_at": "2017-10-18T06:32:58Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "swapagarwal", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjI3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjU1OQ==", "fields": {"created_at": "2017-10-18T06:45:46Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "swapagarwal", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjUyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjcwNQ==", "fields": {"created_at": "2017-10-18T06:50:39Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "swapagarwal", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ2NTI0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjkzMg==", "fields": {"created_at": "2017-10-18T06:58:24Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ3Nzc5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyODcyMQ==", "fields": {"created_at": "2017-10-18T07:52:52Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ5MDUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTI0OTA1MA==", "fields": {"created_at": "2017-10-20T20:44:47Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzODMwNTU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTI1MDAyMg==", "fields": {"created_at": "2017-10-20T21:15:39Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "cornu-ammonis", "review": "MDEyOklzc3VlQ29tbWVudDMzODMyMzk4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTI4NTczNg==", "fields": {"created_at": "2017-10-23T05:21:15Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTQzODAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTI4Njg0Mw==", "fields": {"created_at": "2017-10-23T06:16:26Z", "content": "THUMBS_UP", "giver": "sils", "receiver": "robbyoconnor", "review": "MDEyOklzc3VlQ29tbWVudDMzODU1NDEwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTIwOTIyOQ==", "fields": {"created_at": "2017-10-19T23:32:45Z", "content": "THUMBS_UP", "giver": "cristianossd", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzNzk2NjA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTIwOTIzMg==", "fields": {"created_at": "2017-10-19T23:32:48Z", "content": "LAUGH", "giver": "cristianossd", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDMzNzk2NzA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTIyNDA1OA==", "fields": {"created_at": "2017-10-20T09:57:07Z", "content": "THUMBS_UP", "giver": "kartikeys98", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDMzODE1NTMwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTIzNDAxNA==", "fields": {"created_at": "2017-10-20T14:27:59Z", "content": "HEART", "giver": "kartikeys98", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzODIwNDA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTIzNDQ1Nw==", "fields": {"created_at": "2017-10-20T14:36:57Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "kartikeys98", "review": "MDEyOklzc3VlQ29tbWVudDMzODIyNDAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTM4Mzg5Mg==", "fields": {"created_at": "2017-10-25T01:40:24Z", "content": "THUMBS_UP", "giver": "acashmkj", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzOTEwMjcxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTM4NzQwNg==", "fields": {"created_at": "2017-10-25T04:30:09Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzODM5MTY0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTM4OTg4Ng==", "fields": {"created_at": "2017-10-25T06:31:25Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzODg5NTQwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTM4OTg5MA==", "fields": {"created_at": "2017-10-25T06:31:30Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "kartikeys98", "review": "MDEyOklzc3VlQ29tbWVudDMzOTAxNDI5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTMwNTMxOQ==", "fields": {"created_at": "2017-10-23T14:18:03Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjE2ODAxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTMxNjY0OA==", "fields": {"created_at": "2017-10-23T18:08:08Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "acashmkj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjMzNTU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTQ0NjU2NQ==", "fields": {"created_at": "2017-10-26T08:47:45Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDMzOTU5NTczMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTQ0NzcxNA==", "fields": {"created_at": "2017-10-26T09:11:18Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDMzOTYwMTIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTQ1MDE2NA==", "fields": {"created_at": "2017-10-26T10:06:00Z", "content": "THUMBS_UP", "giver": "acashmkj", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzOTQ2NDg3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTQ1MjUxMw==", "fields": {"created_at": "2017-10-26T11:11:34Z", "content": "LAUGH", "giver": "acashmkj", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDMzOTYzMDgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTQ2MTk4Mw==", "fields": {"created_at": "2017-10-26T14:48:39Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDMzOTYwMTIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTQyNzA5MA==", "fields": {"created_at": "2017-10-25T20:41:33Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "acashmkj", "review": "MDEyOklzc3VlQ29tbWVudDMzOTE5MTMxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTQyNzA5Nw==", "fields": {"created_at": "2017-10-25T20:41:40Z", "content": "LAUGH", "giver": "Makman2", "receiver": "acashmkj", "review": "MDEyOklzc3VlQ29tbWVudDMzOTE5MTMxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU0MTY1OA==", "fields": {"created_at": "2017-10-29T06:51:06Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "acashmkj", "review": "MDEyOklzc3VlQ29tbWVudDM0MDI0MTUxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU0MzYxNA==", "fields": {"created_at": "2017-10-29T11:05:38Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "stellargo", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzU3MTcxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU0NTI4NQ==", "fields": {"created_at": "2017-10-29T13:43:41Z", "content": "LAUGH", "giver": "singhYash123", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MDI2MzI4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU0NjYxOA==", "fields": {"created_at": "2017-10-29T15:35:59Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM0MDI3MDMxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU0Njc0OA==", "fields": {"created_at": "2017-10-29T15:46:37Z", "content": "THUMBS_UP", "giver": "acashmkj", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM0MDI0MTU2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU0Njg4OQ==", "fields": {"created_at": "2017-10-29T15:55:36Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM0MDI3MjQwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU0ODAwMg==", "fields": {"created_at": "2017-10-29T17:16:06Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MDI2MzI4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU1MDMyOQ==", "fields": {"created_at": "2017-10-29T20:26:50Z", "content": "THUMBS_UP", "giver": "vaibhavsingh97", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM0MDI5MDc4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU1MDUxMQ==", "fields": {"created_at": "2017-10-29T20:38:48Z", "content": "THUMBS_UP", "giver": "vaibhavsingh97", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM0MDI5MTc5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU1MTIyNA==", "fields": {"created_at": "2017-10-29T21:37:42Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzU5MzIxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU1MjQ2OQ==", "fields": {"created_at": "2017-10-29T23:29:54Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0MDI5MDU4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTU1NTU3Nw==", "fields": {"created_at": "2017-10-30T03:08:44Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0MDMxNjg5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTUxMTExMg==", "fields": {"created_at": "2017-10-27T15:46:52Z", "content": "THUMBS_UP", "giver": "IamRaviTejaG", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzODMwNTU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTUyODI4Mw==", "fields": {"created_at": "2017-10-28T03:53:07Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "stellargo", "review": "MDEyOklzc3VlQ29tbWVudDMzOTk0NDgxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTUzNDE4Nw==", "fields": {"created_at": "2017-10-28T15:15:34Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MDE4ODAzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTUzNjY5MQ==", "fields": {"created_at": "2017-10-28T19:15:06Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzU2MTkyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTY2MzIyOQ==", "fields": {"created_at": "2017-11-01T12:09:14Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTAxOTUxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTY2Njg5Nw==", "fields": {"created_at": "2017-11-01T13:52:15Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "aashutoshrathi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODIxMDgxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTY3NDMwMw==", "fields": {"created_at": "2017-11-01T16:25:47Z", "content": "THUMBS_UP", "giver": "alphadose", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODMwOTc4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYwNTI0Nw==", "fields": {"created_at": "2017-10-31T06:15:02Z", "content": "THUMBS_UP", "giver": "anshumanv", "receiver": "aashutoshrathi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzgxNDI1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYwNTM3Nw==", "fields": {"created_at": "2017-10-31T06:22:08Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "aashutoshrathi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzgxNDI1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYwNTk5Nw==", "fields": {"created_at": "2017-10-31T06:54:59Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "mohitkyadav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzkwMjA0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYwNjk5Mg==", "fields": {"created_at": "2017-10-31T07:36:30Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "anshumanv", "review": "MDEyOklzc3VlQ29tbWVudDM0MDY4MjcxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYxMjM0MA==", "fields": {"created_at": "2017-10-31T10:13:52Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "aashutoshrathi", "review": "MDEyOklzc3VlQ29tbWVudDM0MDcxNjk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYxNjgzMQ==", "fields": {"created_at": "2017-10-31T12:21:32Z", "content": "LAUGH", "giver": "prnvdixit", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDM0MDY2MDg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYyMjY0OA==", "fields": {"created_at": "2017-10-31T14:34:18Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "mohitkyadav", "review": "MDEyOklzc3VlQ29tbWVudDM0MDc4MDU1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYyOTk0Mg==", "fields": {"created_at": "2017-10-31T16:51:19Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MDgyNjgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYzODQxMQ==", "fields": {"created_at": "2017-10-31T19:51:24Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzgxOTkwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc0OTQwNA==", "fields": {"created_at": "2017-11-03T08:20:43Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc1MjA5Nw==", "fields": {"created_at": "2017-11-03T09:47:59Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "mohitkyadav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzkwMzkyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc1MjA5OQ==", "fields": {"created_at": "2017-11-03T09:48:06Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "mohitkyadav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQwMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2MDc1OA==", "fields": {"created_at": "2017-11-03T13:58:18Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2MjY4Nw==", "fields": {"created_at": "2017-11-03T14:37:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "troublemagnet", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODU0NDIyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2Mjk2NQ==", "fields": {"created_at": "2017-11-03T14:42:36Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4MzEwOA==", "fields": {"created_at": "2017-11-03T23:47:35Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "troublemagnet", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4NDM1MQ==", "fields": {"created_at": "2017-11-04T01:32:35Z", "content": "THUMBS_UP", "giver": "HarshKhatore", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0MTg1ODEyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4ODI1Nw==", "fields": {"created_at": "2017-11-04T09:51:09Z", "content": "THUMBS_UP", "giver": "yashasingh", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4OTU2OA==", "fields": {"created_at": "2017-11-04T12:07:59Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkyODgyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc5NDAzMw==", "fields": {"created_at": "2017-11-04T18:33:57Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkxODYyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc5NjEwMg==", "fields": {"created_at": "2017-11-04T21:39:41Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTcyNjg5OQ==", "fields": {"created_at": "2017-11-02T17:21:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDM0MTQ5MDgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTgwOTA5Mg==", "fields": {"created_at": "2017-11-05T20:29:21Z", "content": "HEART", "giver": "Monal5031", "receiver": "aashutoshrathi", "review": "MDEyOklzc3VlQ29tbWVudDM0MjAwMTAwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTgwOTAyOQ==", "fields": {"created_at": "2017-11-05T20:23:10Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "aashutoshrathi", "review": "MDEyOklzc3VlQ29tbWVudDM0MjAwMTAwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk0Njk1OQ==", "fields": {"created_at": "2017-11-08T17:56:14Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzODM5MTU4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk0NzU1NA==", "fields": {"created_at": "2017-11-08T18:08:53Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Asalle", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTc0Mjk5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk2NTg2Nw==", "fields": {"created_at": "2017-11-09T02:37:20Z", "content": "HOORAY", "giver": "prashant0598", "receiver": "solutusimmensus", "review": "MDEyOklzc3VlQ29tbWVudDM0Mjk1ODc5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk3MTQyOQ==", "fields": {"created_at": "2017-11-09T07:08:17Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "IpshitaC", "review": "MDEyOklzc3VlQ29tbWVudDM0MzA2NDI2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk5OTA2OA==", "fields": {"created_at": "2017-11-09T17:41:24Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "PlentyMore", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODgzMzk5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk5OTE0Mg==", "fields": {"created_at": "2017-11-09T17:42:35Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "neelanshsahai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkwODkzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk5OTE0OA==", "fields": {"created_at": "2017-11-09T17:42:40Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "neelanshsahai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkxMDE3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkxMzkzNA==", "fields": {"created_at": "2017-11-08T03:14:25Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkyMDEyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkyOTY1MA==", "fields": {"created_at": "2017-11-08T12:10:03Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkzMDk5MQ==", "fields": {"created_at": "2017-11-08T12:45:50Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "IpshitaC", "review": "MDEyOklzc3VlQ29tbWVudDM0Mjc3Mzc3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkzNDkzMA==", "fields": {"created_at": "2017-11-08T14:14:40Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "IpshitaC", "review": "MDEyOklzc3VlQ29tbWVudDM0Mjc3Mzc3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkzNjc4Mg==", "fields": {"created_at": "2017-11-08T14:50:21Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0MjgzNTQwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA0MDQ5OQ==", "fields": {"created_at": "2017-11-10T15:24:58Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDM0MzUwMTA5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA1MDcwMA==", "fields": {"created_at": "2017-11-10T19:37:40Z", "content": "THUMBS_DOWN", "giver": "userzimmermann", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDM0MzU2NTc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA1MTM1MQ==", "fields": {"created_at": "2017-11-10T19:55:48Z", "content": "HEART", "giver": "userzimmermann", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDM0MzU2NTc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA1MTkxNA==", "fields": {"created_at": "2017-11-10T20:12:48Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDAzNjIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA1Mzk3Mg==", "fields": {"created_at": "2017-11-10T21:19:59Z", "content": "HOORAY", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDMzNjMwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA1NDgzMA==", "fields": {"created_at": "2017-11-10T21:48:15Z", "content": "LAUGH", "giver": "Makman2", "receiver": "userzimmermann", "review": "MDEyOklzc3VlQ29tbWVudDM0MzQ1MzUzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA2NDE0Ng==", "fields": {"created_at": "2017-11-11T12:00:39Z", "content": "THUMBS_UP", "giver": "troublemagnet", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA3MTUwNQ==", "fields": {"created_at": "2017-11-11T23:56:03Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "alphadose", "review": "MDEyOklzc3VlQ29tbWVudDM0MzY5MjQxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA3NTE3NQ==", "fields": {"created_at": "2017-11-12T09:50:19Z", "content": "LAUGH", "giver": "nealkarpe", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MzcyMDg1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA3ODUzOQ==", "fields": {"created_at": "2017-11-12T15:28:37Z", "content": "HOORAY", "giver": "RaiVaibhav", "receiver": "Monal5031", "review": "MDEyOklzc3VlQ29tbWVudDM0Mzc0NDg1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjAzNDM5MQ==", "fields": {"created_at": "2017-11-10T12:59:58Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0MzQxODk0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE0NTQ5NQ==", "fields": {"created_at": "2017-11-14T09:16:08Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE4OTY5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE0NjA3OQ==", "fields": {"created_at": "2017-11-14T09:30:08Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE5NDk5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE0NzAxNg==", "fields": {"created_at": "2017-11-14T09:51:33Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE5ODY2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE2NjE2NA==", "fields": {"created_at": "2017-11-14T16:50:35Z", "content": "HEART", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDg5MDYwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE3Mjc4MA==", "fields": {"created_at": "2017-11-14T19:07:24Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE5ODY2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE3Mzk2Mw==", "fields": {"created_at": "2017-11-14T19:33:38Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0NDA0Njc1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjExMjgxNQ==", "fields": {"created_at": "2017-11-13T16:21:07Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDQyNjc4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjExNDEwMQ==", "fields": {"created_at": "2017-11-13T16:45:04Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDMzOTIxMTQwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjExNDEwNQ==", "fields": {"created_at": "2017-11-13T16:45:13Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0Mzc3NDM1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjEzMjUzOQ==", "fields": {"created_at": "2017-11-14T00:29:51Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDcwMzk4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjEzOTAzNA==", "fields": {"created_at": "2017-11-14T05:24:02Z", "content": "THUMBS_UP", "giver": "gabru-md", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE0OTkzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjI1NDkwNQ==", "fields": {"created_at": "2017-11-16T11:00:48Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTM4MTQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjI1NTkxNA==", "fields": {"created_at": "2017-11-16T11:26:44Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NDg5NTA4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjI1Nzc2Ng==", "fields": {"created_at": "2017-11-16T12:19:52Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0NDkwNjIxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjI1Nzc3MQ==", "fields": {"created_at": "2017-11-16T12:19:59Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDgyMTIzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjI3MDAxNg==", "fields": {"created_at": "2017-11-16T16:31:43Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0NDk3ODMzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjI5NDQ2Mg==", "fields": {"created_at": "2017-11-17T04:40:17Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDM0NDk5NTAxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjI5NDQyMQ==", "fields": {"created_at": "2017-11-17T04:38:28Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDM0NTA2Njc1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIwNzI3OA==", "fields": {"created_at": "2017-11-15T13:06:13Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIwNzg4OA==", "fields": {"created_at": "2017-11-15T13:21:19Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIwODAxMQ==", "fields": {"created_at": "2017-11-15T13:24:29Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM0NDU3MzM4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIxNTE3Mg==", "fields": {"created_at": "2017-11-15T15:50:10Z", "content": "THUMBS_UP", "giver": "amitsin6h", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIxNTM2NA==", "fields": {"created_at": "2017-11-15T15:53:07Z", "content": "THUMBS_UP", "giver": "amitsin6h", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIyMTI4Mg==", "fields": {"created_at": "2017-11-15T17:54:51Z", "content": "THUMBS_UP", "giver": "acashmkj", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIyMTk3NA==", "fields": {"created_at": "2017-11-15T18:10:35Z", "content": "THUMBS_UP", "giver": "Asalle", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM0NDY3MjIxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIzNjY1NQ==", "fields": {"created_at": "2017-11-16T00:12:25Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM0NDY0ODA5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0MDk1Mg==", "fields": {"created_at": "2017-11-18T13:39:12Z", "content": "THUMBS_UP", "giver": "sopelj", "receiver": "naveentata", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTgyOTY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0MTI1OQ==", "fields": {"created_at": "2017-11-18T14:11:40Z", "content": "THUMBS_UP", "giver": "sopelj", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTgzODM4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0MTI2Mg==", "fields": {"created_at": "2017-11-18T14:11:46Z", "content": "THUMBS_UP", "giver": "sopelj", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTgzODQxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0MTI2Mw==", "fields": {"created_at": "2017-11-18T14:11:54Z", "content": "THUMBS_UP", "giver": "sopelj", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTgzODQyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0MzcyMA==", "fields": {"created_at": "2017-11-18T17:53:14Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMDEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3MQ==", "fields": {"created_at": "2017-11-18T18:57:32Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTg0NDA2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3NQ==", "fields": {"created_at": "2017-11-18T18:57:41Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3OA==", "fields": {"created_at": "2017-11-18T18:57:57Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3OQ==", "fields": {"created_at": "2017-11-18T18:58:02Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDUwNA==", "fields": {"created_at": "2017-11-18T18:59:45Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDcwMw==", "fields": {"created_at": "2017-11-18T19:16:03Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "ihsraham", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2NDE1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM1NzcxNw==", "fields": {"created_at": "2017-11-19T19:36:57Z", "content": "THUMBS_UP", "giver": "supriyanta", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM0NDY0ODA5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM1NzcyNQ==", "fields": {"created_at": "2017-11-19T19:37:14Z", "content": "THUMBS_UP", "giver": "supriyanta", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM0Mzc2NTE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM3MTY2Mg==", "fields": {"created_at": "2017-11-20T09:23:57Z", "content": "THUMBS_UP", "giver": "neelanshsahai", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTYzNzE4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMxNjA0Mw==", "fields": {"created_at": "2017-11-17T15:42:46Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDM0NTI3Mzk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMxNzU1NA==", "fields": {"created_at": "2017-11-17T16:13:09Z", "content": "HOORAY", "giver": "RJ722", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDM0NTI3NjkxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMxNzU2Mg==", "fields": {"created_at": "2017-11-17T16:13:14Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0NTI3NzQ2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMQ==", "fields": {"created_at": "2017-11-17T17:41:24Z", "content": "HOORAY", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMg==", "fields": {"created_at": "2017-11-17T17:41:27Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjQ4NTMxMA==", "fields": {"created_at": "2017-11-22T14:39:32Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDM0NTg0OTQ1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjU1NDE4MA==", "fields": {"created_at": "2017-11-24T10:30:37Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "aashutoshrathi", "review": "MDEyOklzc3VlQ29tbWVudDM0MDU1NjMzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjU1NDIxMA==", "fields": {"created_at": "2017-11-24T10:31:32Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDM0MDU1NDI5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjU1NDg5Ng==", "fields": {"created_at": "2017-11-24T10:50:46Z", "content": "CONFUSED", "giver": "userzimmermann", "receiver": "Vedarth", "review": "MDEyOklzc3VlQ29tbWVudDM0Njc0MDM5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjU1NDk2OA==", "fields": {"created_at": "2017-11-24T10:52:51Z", "content": "HEART", "giver": "userzimmermann", "receiver": "Vedarth", "review": "MDEyOklzc3VlQ29tbWVudDM0Njc0MDY0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjU3MjgyMA==", "fields": {"created_at": "2017-11-24T23:57:27Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MjgyODIzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjU5MDY1OQ==", "fields": {"created_at": "2017-11-26T15:01:49Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzA0ODQ0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjU5MDcwMg==", "fields": {"created_at": "2017-11-26T15:05:24Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDM0Njk0ODE0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjUwOTk3Nw==", "fields": {"created_at": "2017-11-23T03:10:16Z", "content": "HEART", "giver": "urohit011", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM0NjM4OTYwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjUxOTM2OQ==", "fields": {"created_at": "2017-11-23T10:26:58Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDMzMjk2MzUxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY4Nzk3MA==", "fields": {"created_at": "2017-11-28T20:58:50Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Lyrenhex", "review": "MDEyOklzc3VlQ29tbWVudDM0NzY2MTM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY4OTA1OA==", "fields": {"created_at": "2017-11-28T21:22:46Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "userzimmermann", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzEyOTgwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY5MDM0MA==", "fields": {"created_at": "2017-11-28T21:53:27Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM0NzU2MTYxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY5Nzg3NQ==", "fields": {"created_at": "2017-11-29T02:04:43Z", "content": "HOORAY", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzcyODE2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMTgxNQ==", "fields": {"created_at": "2017-11-27T05:39:45Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjM2Nw==", "fields": {"created_at": "2017-11-27T06:14:40Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjQ4MQ==", "fields": {"created_at": "2017-11-27T06:21:01Z", "content": "THUMBS_UP", "giver": "0x48piraj", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjc0NQ==", "fields": {"created_at": "2017-11-27T06:34:18Z", "content": "THUMBS_UP", "giver": "khanchi97", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMzE5NA==", "fields": {"created_at": "2017-11-27T06:57:13Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA3NTQyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMzY2Mw==", "fields": {"created_at": "2017-11-27T07:19:24Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "0x48piraj", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwNDU4OA==", "fields": {"created_at": "2017-11-27T07:58:27Z", "content": "LAUGH", "giver": "yashovardhanagrawal", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4OTQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwNTE5MQ==", "fields": {"created_at": "2017-11-27T08:19:58Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzA5MTUwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwNTk1OQ==", "fields": {"created_at": "2017-11-27T08:43:20Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzA5MTUzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwOTE0NA==", "fields": {"created_at": "2017-11-27T10:02:59Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDM0NzAzNjI3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYzNzMyNg==", "fields": {"created_at": "2017-11-27T21:08:39Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "richer6605", "review": "MDEyOklzc3VlQ29tbWVudDM0NzI0NTE2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYzNzMyNw==", "fields": {"created_at": "2017-11-27T21:08:43Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "richer6605", "review": "MDEyOklzc3VlQ29tbWVudDM0NzI1NjE0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjc3MTI4Ng==", "fields": {"created_at": "2017-11-30T14:24:00Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "yashasingh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzQ4NjY2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcwMzQxMA==", "fields": {"created_at": "2017-11-29T06:33:16Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "yashasingh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzQ4NjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcxNDIwNA==", "fields": {"created_at": "2017-11-29T11:44:27Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDM0NzgzNjE0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcxODM2NQ==", "fields": {"created_at": "2017-11-29T13:34:02Z", "content": "THUMBS_UP", "giver": "yukiisbored", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzY3NzIyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcxODMyNQ==", "fields": {"created_at": "2017-11-29T13:33:03Z", "content": "HOORAY", "giver": "yukiisbored", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDM0NzgxMTE1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcyNTU0Ng==", "fields": {"created_at": "2017-11-29T15:59:32Z", "content": "HOORAY", "giver": "margobra8", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDM0NzgxMTE1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0Mjg4MQ==", "fields": {"created_at": "2017-12-02T04:38:45Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQxOTg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0NDkxOQ==", "fields": {"created_at": "2017-12-02T09:48:06Z", "content": "THUMBS_DOWN", "giver": "shaipranesh11", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM0ODU4ODMzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0NjE5Nw==", "fields": {"created_at": "2017-12-02T12:19:57Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0ODY0NDY5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0Njg0OQ==", "fields": {"created_at": "2017-12-02T13:24:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ5NjE1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0Nzg4OQ==", "fields": {"created_at": "2017-12-02T15:07:12Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ5NjMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0ODE3Mw==", "fields": {"created_at": "2017-12-02T15:34:19Z", "content": "HOORAY", "giver": "yukiisbored", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDM0ODY5ODQ0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg1NjM1OA==", "fields": {"created_at": "2017-12-03T07:10:37Z", "content": "THUMBS_UP", "giver": "bhavishyagopesh", "receiver": "UnimaginaryUnit", "review": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTM5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg2MjE2Nw==", "fields": {"created_at": "2017-12-03T17:07:57Z", "content": "THUMBS_UP", "giver": "mohitkyadav", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzI3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg2MjI3NQ==", "fields": {"created_at": "2017-12-03T17:16:16Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "mohitkyadav", "review": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzEwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg3Mzk3OA==", "fields": {"created_at": "2017-12-04T07:25:06Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDU3MTE1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjgxMjQ3NA==", "fields": {"created_at": "2017-12-01T10:47:54Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "Grox-Ni", "review": "MDEyOklzc3VlQ29tbWVudDM0ODQ2MzY2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0NjAyMg==", "fields": {"created_at": "2017-12-05T16:29:47Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAwMTE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0Njc1MQ==", "fields": {"created_at": "2017-12-05T16:44:10Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0OTM0OTczNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0Nzc1NA==", "fields": {"created_at": "2017-12-05T17:05:37Z", "content": "THUMBS_UP", "giver": "nkprince007", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAwMTE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0ODQwMw==", "fields": {"created_at": "2017-12-05T17:19:46Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0OTg0Nw==", "fields": {"created_at": "2017-12-05T17:50:39Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAwMTE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk1MjM1NA==", "fields": {"created_at": "2017-12-05T18:47:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2MTQyNA==", "fields": {"created_at": "2017-12-05T22:27:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2MTU3MQ==", "fields": {"created_at": "2017-12-05T22:31:22Z", "content": "THUMBS_UP", "giver": "nkprince007", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTA5NDAwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2NDgyNA==", "fields": {"created_at": "2017-12-06T00:15:50Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2ODI4OQ==", "fields": {"created_at": "2017-12-06T02:41:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3MTQxNg==", "fields": {"created_at": "2017-12-06T05:30:17Z", "content": "LAUGH", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3MTkwNA==", "fields": {"created_at": "2017-12-06T05:54:17Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE0MjM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg2NQ==", "fields": {"created_at": "2017-12-06T08:29:06Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg5OA==", "fields": {"created_at": "2017-12-06T08:30:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NzExNg==", "fields": {"created_at": "2017-12-06T09:01:32Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4Nzg3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkwNDkxNg==", "fields": {"created_at": "2017-12-04T20:08:50Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDc2MDY5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkxODU1MA==", "fields": {"created_at": "2017-12-05T03:36:41Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "indmind", "review": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMDY1OQ==", "fields": {"created_at": "2017-12-05T05:36:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg1MDEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzU3OA==", "fields": {"created_at": "2017-12-05T07:48:42Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzg2NA==", "fields": {"created_at": "2017-12-05T07:58:40Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkzNTEzMA==", "fields": {"created_at": "2017-12-05T12:49:42Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4OTY3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkzNTM5NA==", "fields": {"created_at": "2017-12-05T12:55:42Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg5MjE2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkzNzc4NA==", "fields": {"created_at": "2017-12-05T13:53:56Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "bhavishyagopesh", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMTEzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA0NTk5Ng==", "fields": {"created_at": "2017-12-07T16:13:12Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "gokberksahin", "review": "MDEyOklzc3VlQ29tbWVudDM1MDAxNDY2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA2MTg0MA==", "fields": {"created_at": "2017-12-07T22:25:10Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTYzMjgxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA2MTg0Mg==", "fields": {"created_at": "2017-12-07T22:25:14Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTYzMzQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA2Nzg2MA==", "fields": {"created_at": "2017-12-08T02:26:26Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTY5MTYyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MDAwNg==", "fields": {"created_at": "2017-12-08T04:21:56Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MTg0Mw==", "fields": {"created_at": "2017-12-08T06:15:44Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MjcyMQ==", "fields": {"created_at": "2017-12-08T07:00:40Z", "content": "HEART", "giver": "synicalsyntax", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzA0OQ==", "fields": {"created_at": "2017-12-08T07:14:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzE1MQ==", "fields": {"created_at": "2017-12-08T07:18:57Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzI5Mw==", "fields": {"created_at": "2017-12-08T07:25:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE5MTI4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3NDM0Ng==", "fields": {"created_at": "2017-12-08T08:06:48Z", "content": "THUMBS_UP", "giver": "bhavishyagopesh", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE0MjI5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA4MTEyNw==", "fields": {"created_at": "2017-12-08T11:26:28Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE5MTI4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA4NDQwNA==", "fields": {"created_at": "2017-12-08T13:18:37Z", "content": "THUMBS_UP", "giver": "nikhil-seth", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM1MDA4MDQyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA5MzI2Mg==", "fields": {"created_at": "2017-12-08T17:00:48Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDI4NA==", "fields": {"created_at": "2017-12-06T17:50:09Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzA4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDI5Mw==", "fields": {"created_at": "2017-12-06T17:50:13Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMjkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDc3Mg==", "fields": {"created_at": "2017-12-06T18:00:39Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDc3Ng==", "fields": {"created_at": "2017-12-06T18:00:45Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDc5Mg==", "fields": {"created_at": "2017-12-06T18:01:02Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxNDA5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAzMDc5NA==", "fields": {"created_at": "2017-12-07T10:17:48Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAzMTM0MQ==", "fields": {"created_at": "2017-12-07T10:31:38Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "starkblaze01", "review": "MDEyOklzc3VlQ29tbWVudDM0OTkyNTU2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAzMzQ1OQ==", "fields": {"created_at": "2017-12-07T11:28:19Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTQ5NTAwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE0MTA5OQ==", "fields": {"created_at": "2017-12-11T08:18:04Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjAwMzc2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE1NzI2OA==", "fields": {"created_at": "2017-12-11T15:23:06Z", "content": "THUMBS_UP", "giver": "damian1996", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1MDU5NTM5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE2MzU3Ng==", "fields": {"created_at": "2017-12-11T17:26:36Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1NDc0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE4NjMwMg==", "fields": {"created_at": "2017-12-12T04:35:25Z", "content": "HEART", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE4Nzk2MQ==", "fields": {"created_at": "2017-12-12T06:08:38Z", "content": "LAUGH", "giver": "vddesai1998", "receiver": "parimatrix", "review": "MDEyOklzc3VlQ29tbWVudDM1MDQ3OTA5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE5MDc1Mw==", "fields": {"created_at": "2017-12-12T08:00:26Z", "content": "THUMBS_UP", "giver": "vddesai1998", "receiver": "Mariatta", "review": "MDEyOklzc3VlQ29tbWVudDM1MDk1MTkyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzExMjQwOA==", "fields": {"created_at": "2017-12-09T11:27:49Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDQ1MDU0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzExNjMwMA==", "fields": {"created_at": "2017-12-09T17:58:52Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkyODAzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNTY1Nw==", "fields": {"created_at": "2017-12-10T13:20:53Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "Grox-Ni", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjI2Mg==", "fields": {"created_at": "2017-12-10T14:22:11Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjM5Mg==", "fields": {"created_at": "2017-12-10T14:33:36Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjMyMw==", "fields": {"created_at": "2017-12-10T14:26:52Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjk2MA==", "fields": {"created_at": "2017-12-10T15:22:18Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzI0Nw==", "fields": {"created_at": "2017-12-10T15:47:25Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTMzMzk2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Ng==", "fields": {"created_at": "2017-12-10T16:45:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Nw==", "fields": {"created_at": "2017-12-10T16:45:25Z", "content": "HEART", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyODU2Mg==", "fields": {"created_at": "2017-12-10T17:48:01Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Vedarth", "review": "MDEyOklzc3VlQ29tbWVudDM1MDU1OTE0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyODU2Mw==", "fields": {"created_at": "2017-12-10T17:48:03Z", "content": "LAUGH", "giver": "Makman2", "receiver": "Vedarth", "review": "MDEyOklzc3VlQ29tbWVudDM1MDU1OTE0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyODc1OA==", "fields": {"created_at": "2017-12-10T18:03:34Z", "content": "THUMBS_UP", "giver": "bhavishyagopesh", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1MDU2NDkxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyODc2MA==", "fields": {"created_at": "2017-12-10T18:03:39Z", "content": "THUMBS_UP", "giver": "bhavishyagopesh", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1MDU2NDk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMTgyNQ==", "fields": {"created_at": "2017-12-10T22:39:57Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMzY2OA==", "fields": {"created_at": "2017-12-11T01:19:09Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzNzM1MQ==", "fields": {"created_at": "2017-12-11T05:24:19Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mg==", "fields": {"created_at": "2017-12-11T06:36:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mw==", "fields": {"created_at": "2017-12-11T06:36:03Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk1Ng==", "fields": {"created_at": "2017-12-11T06:47:31Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk4Nw==", "fields": {"created_at": "2017-12-11T06:48:35Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNQ==", "fields": {"created_at": "2017-12-11T06:46:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNw==", "fields": {"created_at": "2017-12-11T06:46:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MDQ3NQ==", "fields": {"created_at": "2017-12-13T07:34:04Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MTkyMQ==", "fields": {"created_at": "2017-12-13T08:24:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MjE0OQ==", "fields": {"created_at": "2017-12-13T08:30:29Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI3NjYzNg==", "fields": {"created_at": "2017-12-13T21:36:46Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1MTUxNDE4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI3ODc1NA==", "fields": {"created_at": "2017-12-13T22:31:16Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM1MTUzMjk1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI3ODc1Nw==", "fields": {"created_at": "2017-12-13T22:31:18Z", "content": "LAUGH", "giver": "Makman2", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM1MTUzMjk1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI4ODUzNw==", "fields": {"created_at": "2017-12-14T05:40:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI5ODEyOA==", "fields": {"created_at": "2017-12-14T10:46:03Z", "content": "LAUGH", "giver": "newbazz", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM1MTUzMjk1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI5OTUzMQ==", "fields": {"created_at": "2017-12-14T11:27:06Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "avirlrma", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjkwMzA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIwNDg2OA==", "fields": {"created_at": "2017-12-12T14:09:36Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI1MDc0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIwNTAzOQ==", "fields": {"created_at": "2017-12-12T14:13:31Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI1MDgwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIwNjQ5OQ==", "fields": {"created_at": "2017-12-12T14:44:27Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI1MDY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIwNjU3Ng==", "fields": {"created_at": "2017-12-12T14:45:40Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjE0OTg1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIwODc2Ng==", "fields": {"created_at": "2017-12-12T15:27:44Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI1MTEwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIxMDQ1OA==", "fields": {"created_at": "2017-12-12T15:59:46Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1MTA1MzQ1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIxNDk1MA==", "fields": {"created_at": "2017-12-12T17:28:20Z", "content": "THUMBS_DOWN", "giver": "Makman2", "receiver": "yashasingh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzQ4NjY2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNjk2NA==", "fields": {"created_at": "2017-12-12T22:08:24Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNzUxNg==", "fields": {"created_at": "2017-12-12T22:22:46Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyOTkyMA==", "fields": {"created_at": "2017-12-12T23:37:33Z", "content": "THUMBS_UP", "giver": "bhavishyagopesh", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1MTExOTY1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM4Mg==", "fields": {"created_at": "2017-12-13T02:42:18Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM5OQ==", "fields": {"created_at": "2017-12-13T02:42:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNjc4MA==", "fields": {"created_at": "2017-12-13T04:52:17Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzOTU3Mw==", "fields": {"created_at": "2017-12-13T06:56:58Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM0NjU1OQ==", "fields": {"created_at": "2017-12-15T11:22:59Z", "content": "THUMBS_UP", "giver": "parimatrix", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1MTk0MjMzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM0OTYyNA==", "fields": {"created_at": "2017-12-15T13:06:08Z", "content": "CONFUSED", "giver": "Vamshi99", "receiver": "mohitkyadav", "review": "MDEyOklzc3VlQ29tbWVudDM1MTk4NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3MzczOA==", "fields": {"created_at": "2017-12-16T03:40:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NDcyMQ==", "fields": {"created_at": "2017-12-16T06:15:38Z", "content": "CONFUSED", "giver": "ashwini0529", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjE2NDE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NTM2Nw==", "fields": {"created_at": "2017-12-16T07:55:31Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNjYzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NTQ1Mw==", "fields": {"created_at": "2017-12-16T08:06:29Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNjgyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NTY5Ng==", "fields": {"created_at": "2017-12-16T08:40:03Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "Nshul", "review": "MDEyOklzc3VlQ29tbWVudDM1MjE2OTkxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA1OQ==", "fields": {"created_at": "2017-12-16T09:26:26Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA2Mg==", "fields": {"created_at": "2017-12-16T09:27:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3ODY3Ng==", "fields": {"created_at": "2017-12-16T14:15:47Z", "content": "THUMBS_UP", "giver": "Nshul", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1MjE3OTg3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3ODY3Nw==", "fields": {"created_at": "2017-12-16T14:15:53Z", "content": "LAUGH", "giver": "Nshul", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1MjE3OTg3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3OTgyMQ==", "fields": {"created_at": "2017-12-16T16:05:14Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Nshul", "review": "MDEyOklzc3VlQ29tbWVudDM1MjE2OTkxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3OTkzNg==", "fields": {"created_at": "2017-12-16T16:16:11Z", "content": "LAUGH", "giver": "Makman2", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM1MjEwNDk5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MTA1Mw==", "fields": {"created_at": "2017-12-16T18:02:20Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjE2MzUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MTE4Nw==", "fields": {"created_at": "2017-12-16T18:15:41Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzODM5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MTY3Mg==", "fields": {"created_at": "2017-12-16T19:04:47Z", "content": "THUMBS_UP", "giver": "aashraybhandar1", "receiver": "khanchi97", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjkyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3NA==", "fields": {"created_at": "2017-12-16T22:16:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3Ng==", "fields": {"created_at": "2017-12-16T22:16:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4Mzg4MA==", "fields": {"created_at": "2017-12-16T22:36:00Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "margobra8", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4NjE4OQ==", "fields": {"created_at": "2017-12-17T04:08:37Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4ODUyMA==", "fields": {"created_at": "2017-12-17T10:21:55Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI0NTE1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4ODYxNA==", "fields": {"created_at": "2017-12-17T10:35:24Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI0NTE1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5MTc0OA==", "fields": {"created_at": "2017-12-17T15:55:35Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI2NTM0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5MjQ4Mw==", "fields": {"created_at": "2017-12-17T17:01:54Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI1ODIyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjg4Ng==", "fields": {"created_at": "2017-12-17T17:37:51Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjk0Mw==", "fields": {"created_at": "2017-12-17T17:41:56Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5MzA4MQ==", "fields": {"created_at": "2017-12-17T17:54:58Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzMwMTkyNA==", "fields": {"created_at": "2017-12-14T12:36:57Z", "content": "THUMBS_UP", "giver": "sibasish14", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1MTY5OTA3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzMwMjc0MQ==", "fields": {"created_at": "2017-12-14T12:59:16Z", "content": "THUMBS_UP", "giver": "sibasish14", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1MTcwMzQ5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzMxMDMzNg==", "fields": {"created_at": "2017-12-14T15:45:12Z", "content": "THUMBS_UP", "giver": "myfrom", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzMyODE3OA==", "fields": {"created_at": "2017-12-14T22:51:51Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDM1MTc4MjI1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzMzNjQ1MA==", "fields": {"created_at": "2017-12-15T05:39:26Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzA4ODIzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQ0Nzg5MQ==", "fields": {"created_at": "2017-12-19T04:59:22Z", "content": "LAUGH", "giver": "newbazz", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1MjQ3OTMxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQ3Mjc2Nw==", "fields": {"created_at": "2017-12-19T16:43:19Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "wyj1026", "review": "MDEyOklzc3VlQ29tbWVudDM1Mjc0MTgwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQ3NjMwOQ==", "fields": {"created_at": "2017-12-19T18:02:37Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "shreyateeza", "review": "MDEyOklzc3VlQ29tbWVudDM1MjgzNzk2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNDIwNQ==", "fields": {"created_at": "2017-12-18T07:43:12Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNzA0Ng==", "fields": {"created_at": "2017-12-18T09:18:14Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQxMDU3Nw==", "fields": {"created_at": "2017-12-18T10:49:42Z", "content": "THUMBS_UP", "giver": "Rahmeen14", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQxODMxMA==", "fields": {"created_at": "2017-12-18T14:23:53Z", "content": "HOORAY", "giver": "shreyateeza", "receiver": "rattandeep1998", "review": "MDEyOklzc3VlQ29tbWVudDM1MjQzODg4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQxODMyMw==", "fields": {"created_at": "2017-12-18T14:24:12Z", "content": "THUMBS_UP", "giver": "rattandeep1998", "receiver": "shreyateeza", "review": "MDEyOklzc3VlQ29tbWVudDM1MjQzODgxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQxODY5NA==", "fields": {"created_at": "2017-12-18T14:33:10Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjQwNDg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQxOTIwMw==", "fields": {"created_at": "2017-12-18T14:44:46Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyateeza", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzM5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQyODAxNg==", "fields": {"created_at": "2017-12-18T17:48:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzUxNDEyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MDU4Ng==", "fields": {"created_at": "2017-12-21T04:33:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MjI3MQ==", "fields": {"created_at": "2017-12-21T06:13:45Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0NDMwOA==", "fields": {"created_at": "2017-12-21T07:45:42Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU1Mzc2Nw==", "fields": {"created_at": "2017-12-21T12:19:24Z", "content": "THUMBS_UP", "giver": "vddesai1998", "receiver": "sourojit", "review": "MDEyOklzc3VlQ29tbWVudDM1MzI5MTI1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NDEyMQ==", "fields": {"created_at": "2017-12-22T04:47:28Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NTM5NA==", "fields": {"created_at": "2017-12-22T06:06:15Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4ODExNg==", "fields": {"created_at": "2017-12-22T08:20:27Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzU0NzAxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU5MTMxMA==", "fields": {"created_at": "2017-12-22T10:09:34Z", "content": "THUMBS_UP", "giver": "k4ni5h", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM1MzQ0MjMzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwMDIyMA==", "fields": {"created_at": "2017-12-20T08:37:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk0MjQ2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwMDIzNQ==", "fields": {"created_at": "2017-12-20T08:37:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk0MDgyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTI3Mw==", "fields": {"created_at": "2017-12-20T10:45:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTU4Mw==", "fields": {"created_at": "2017-12-20T10:54:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUxMDM0NA==", "fields": {"created_at": "2017-12-20T13:18:28Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUxMDk5MA==", "fields": {"created_at": "2017-12-20T13:36:51Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk0MjQ2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUxNDE3Nw==", "fields": {"created_at": "2017-12-20T14:50:59Z", "content": "THUMBS_UP", "giver": "bhavishyagopesh", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDM1MzA2NTk2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUxNjkyOQ==", "fields": {"created_at": "2017-12-20T15:46:18Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjQ0MTM3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYwNg==", "fields": {"created_at": "2017-12-20T17:26:03Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYzNw==", "fields": {"created_at": "2017-12-20T17:26:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTc2Ng==", "fields": {"created_at": "2017-12-20T17:30:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMjA1Mg==", "fields": {"created_at": "2017-12-20T17:37:29Z", "content": "LAUGH", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUzMDIwNA==", "fields": {"created_at": "2017-12-20T21:08:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc2OQ==", "fields": {"created_at": "2017-12-25T15:06:32Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3MA==", "fields": {"created_at": "2017-12-25T15:06:34Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3Mg==", "fields": {"created_at": "2017-12-25T15:06:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQyMw==", "fields": {"created_at": "2017-12-25T21:04:23Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQzNg==", "fields": {"created_at": "2017-12-25T21:06:08Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0ODE2OA==", "fields": {"created_at": "2017-12-26T04:08:54Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODUxNjQxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0OTAzNg==", "fields": {"created_at": "2017-12-26T05:33:40Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY1NTYzMA==", "fields": {"created_at": "2017-12-26T12:00:10Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY1ODE2OQ==", "fields": {"created_at": "2017-12-26T14:13:07Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pradeepgangwar", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODcwNTA1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY2MDAyNA==", "fields": {"created_at": "2017-12-26T15:54:32Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "pradeepgangwar", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzk4MjYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY3MjA4OA==", "fields": {"created_at": "2017-12-27T03:44:47Z", "content": "THUMBS_UP", "giver": "paavininanda", "receiver": "pradeepgangwar", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzk4MjYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY3MzQ2MA==", "fields": {"created_at": "2017-12-27T05:29:51Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzg4ODIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY4MzQ1Mw==", "fields": {"created_at": "2017-12-27T12:40:37Z", "content": "CONFUSED", "giver": "prnvdixit", "receiver": "theOriginalMuktaka", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODc1NzUwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY4Mzk3Nw==", "fields": {"created_at": "2017-12-27T13:03:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY4NDc3MA==", "fields": {"created_at": "2017-12-27T13:35:26Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM1NDEwODg3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY5MzY0NA==", "fields": {"created_at": "2017-12-27T19:27:08Z", "content": "LAUGH", "giver": "Makman2", "receiver": "gokberksahin", "review": "MDEyOklzc3VlQ29tbWVudDM1NDE2MzU1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY5ODU1MQ==", "fields": {"created_at": "2017-12-27T23:33:49Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Alexander-N", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODcyMzM0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYwMjcxMA==", "fields": {"created_at": "2017-12-22T16:39:35Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYxODA1Mg==", "fields": {"created_at": "2017-12-23T13:58:22Z", "content": "THUMBS_UP", "giver": "shreyateeza", "receiver": "sourojit", "review": "MDEyOklzc3VlQ29tbWVudDM1MzcxNDU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNg==", "fields": {"created_at": "2017-12-24T02:00:01Z", "content": "HEART", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNw==", "fields": {"created_at": "2017-12-24T02:00:25Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNDEyOA==", "fields": {"created_at": "2017-12-24T02:47:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQ2OQ==", "fields": {"created_at": "2017-12-24T07:02:47Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQwOQ==", "fields": {"created_at": "2017-12-24T06:52:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQxMA==", "fields": {"created_at": "2017-12-24T06:52:44Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNjM5Nw==", "fields": {"created_at": "2017-12-24T09:34:09Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "danes44", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NzYzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzMDA2Mg==", "fields": {"created_at": "2017-12-24T17:39:19Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzc3Nzg3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzMjI4MQ==", "fields": {"created_at": "2017-12-24T23:35:38Z", "content": "HEART", "giver": "dob9601", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzMzkzMg==", "fields": {"created_at": "2017-12-25T03:02:06Z", "content": "THUMBS_UP", "giver": "danes44", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzc3Nzg3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzOTI2NA==", "fields": {"created_at": "2017-12-25T10:45:55Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc0NDc1OA==", "fields": {"created_at": "2017-12-29T18:22:08Z", "content": "THUMBS_UP", "giver": "adi23arora", "receiver": "namantw", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQyNDEwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc0NjQ0Ng==", "fields": {"created_at": "2017-12-29T19:44:08Z", "content": "THUMBS_UP", "giver": "clarammdantas", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQwNjc3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc0NzM1NQ==", "fields": {"created_at": "2017-12-29T20:29:44Z", "content": "HOORAY", "giver": "clarammdantas", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQ5NTE5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc1MzUzOA==", "fields": {"created_at": "2017-12-30T08:27:48Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM3NDE4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc1Njc3NQ==", "fields": {"created_at": "2017-12-30T15:28:43Z", "content": "THUMBS_UP", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE0MTgzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc1ODI1Nw==", "fields": {"created_at": "2017-12-30T18:02:50Z", "content": "THUMBS_UP", "giver": "pradeepgangwar", "receiver": "clarammdantas", "review": "MDEyOklzc3VlQ29tbWVudDM1NDUxNDg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc1ODY3MA==", "fields": {"created_at": "2017-12-30T18:47:47Z", "content": "THUMBS_UP", "giver": "namantw", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDM1NDU1Njg0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc2MzA2Mw==", "fields": {"created_at": "2017-12-31T04:40:42Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1NDU2NjczMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc2NTEzMg==", "fields": {"created_at": "2017-12-31T10:10:34Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc2ODQzMA==", "fields": {"created_at": "2017-12-31T16:47:54Z", "content": "HEART", "giver": "userzimmermann", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1NDYxMzc4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc3Nzg0Mg==", "fields": {"created_at": "2018-01-01T16:21:24Z", "content": "LAUGH", "giver": "userzimmermann", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1NDY2MTczMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc4MzUzMw==", "fields": {"created_at": "2018-01-02T02:59:56Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE2NDQ1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc4NDM3NA==", "fields": {"created_at": "2018-01-02T04:21:39Z", "content": "THUMBS_UP", "giver": "khanchi97", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTA4MTI4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc4NTcxOQ==", "fields": {"created_at": "2018-01-02T06:41:19Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1NDY2Nzc3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc4NTcyMQ==", "fields": {"created_at": "2018-01-02T06:41:35Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1NDY2NzQyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc5ODk5OQ==", "fields": {"created_at": "2018-01-02T15:26:16Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTI0Njg1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwMjI4NQ==", "fields": {"created_at": "2017-12-28T04:13:16Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODg3ODQyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwMzE3Nw==", "fields": {"created_at": "2017-12-28T05:28:44Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1NDE2MTA4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDExNw==", "fields": {"created_at": "2017-12-28T06:33:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDMzNA==", "fields": {"created_at": "2017-12-28T06:48:01Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNTYyNg==", "fields": {"created_at": "2017-12-28T07:58:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNjE4Nw==", "fields": {"created_at": "2017-12-28T08:24:19Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDE0MQ==", "fields": {"created_at": "2017-12-29T09:31:03Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDQ3OA==", "fields": {"created_at": "2017-12-29T09:50:54Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNTk2MA==", "fields": {"created_at": "2017-12-29T11:09:57Z", "content": "THUMBS_UP", "giver": "bhavishyagopesh", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU3NzQ1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MjY5NQ==", "fields": {"created_at": "2018-01-04T04:48:24Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MzE4OA==", "fields": {"created_at": "2018-01-04T05:22:45Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTUwMjU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MzM0OQ==", "fields": {"created_at": "2018-01-04T05:36:22Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTQ5MjI5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MzM1Ng==", "fields": {"created_at": "2018-01-04T05:36:28Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTUwMjgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg4MTU0NA==", "fields": {"created_at": "2018-01-04T15:22:03Z", "content": "HOORAY", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1NTMwOTE5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg4MTU0Ng==", "fields": {"created_at": "2018-01-04T15:22:06Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1NTMwOTE5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg4MTgwMQ==", "fields": {"created_at": "2018-01-04T15:28:08Z", "content": "LAUGH", "giver": "Makman2", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1NTMxMDg1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgwNDU5Nw==", "fields": {"created_at": "2018-01-02T17:43:22Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE5ODYxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgwNDYwMg==", "fields": {"created_at": "2018-01-02T17:43:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE5OTE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgxMDI5OQ==", "fields": {"created_at": "2018-01-02T20:21:03Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "sourojit", "review": "MDEyOklzc3VlQ29tbWVudDM1NDgyNjQ0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgyNTAzNg==", "fields": {"created_at": "2018-01-03T08:40:29Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDM1NDk1OTUyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgyNTg3OA==", "fields": {"created_at": "2018-01-03T09:10:01Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1NDk2MzYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgzNjQ2OQ==", "fields": {"created_at": "2018-01-03T14:28:06Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODAxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgzNjQ4Nw==", "fields": {"created_at": "2018-01-03T14:28:41Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODQxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgzNjc2Ng==", "fields": {"created_at": "2018-01-03T14:35:19Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODQ0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk0OTQxOQ==", "fields": {"created_at": "2018-01-06T09:08:53Z", "content": "HEART", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1NTcwMDYyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk0OTQyMA==", "fields": {"created_at": "2018-01-06T09:09:00Z", "content": "CONFUSED", "giver": "userzimmermann", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1NTU3MjMxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk0OTQyMw==", "fields": {"created_at": "2018-01-06T09:09:24Z", "content": "HEART", "giver": "userzimmermann", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1NTY5MDUzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk1MzY0Nw==", "fields": {"created_at": "2018-01-06T15:55:07Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "dob9601", "review": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk2Nzg5OQ==", "fields": {"created_at": "2018-01-07T11:05:14Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "shreyateeza", "review": "MDEyOklzc3VlQ29tbWVudDM1NTgwODE4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk3MjI1Ng==", "fields": {"created_at": "2018-01-07T17:19:37Z", "content": "THUMBS_UP", "giver": "namantw", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTYwMzgxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk3MjY3MQ==", "fields": {"created_at": "2018-01-07T17:53:50Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1NTY2NjY1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkxNjUyMg==", "fields": {"created_at": "2018-01-05T11:04:48Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM1NTQ4MjM1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkxNzg4Nw==", "fields": {"created_at": "2018-01-05T11:51:47Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTU4OTY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkxNzkyOA==", "fields": {"created_at": "2018-01-05T11:53:06Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTU4OTc4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyMzAwNg==", "fields": {"created_at": "2018-01-05T14:28:17Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg3ODIyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyMzAyMg==", "fields": {"created_at": "2018-01-05T14:28:38Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg4MDMxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyMzAyNw==", "fields": {"created_at": "2018-01-05T14:28:45Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg4MDAyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyNDc5OQ==", "fields": {"created_at": "2018-01-05T15:10:43Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5MTM0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyNDkwOA==", "fields": {"created_at": "2018-01-05T15:12:56Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5MTU5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyNTgzNg==", "fields": {"created_at": "2018-01-05T15:31:32Z", "content": "THUMBS_UP", "giver": "margobra8", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI1ODIyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyNjE5Mg==", "fields": {"created_at": "2018-01-05T15:39:12Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwMzA1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyNjgzOQ==", "fields": {"created_at": "2018-01-05T15:51:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwNDY0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyOTAyMQ==", "fields": {"created_at": "2018-01-05T16:38:57Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM1NTU5MDk1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODAwNTIyNQ==", "fields": {"created_at": "2018-01-08T17:35:38Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Nshul", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDIwMzczMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODAwNjg3NQ==", "fields": {"created_at": "2018-01-08T18:17:29Z", "content": "THUMBS_UP", "giver": "shashank-b", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1NTg3NDY5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODE5Mjk1Nw==", "fields": {"created_at": "2018-01-12T11:11:23Z", "content": "LAUGH", "giver": "sangamcse", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1NzIxMTE4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODEzNDI0Nw==", "fields": {"created_at": "2018-01-11T08:05:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODEzODU1MQ==", "fields": {"created_at": "2018-01-11T09:48:46Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "Prabhat-IIT", "review": "MDEyOklzc3VlQ29tbWVudDM1Njg4MTQ5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI0MTkyNw==", "fields": {"created_at": "2018-01-14T09:25:28Z", "content": "LAUGH", "giver": "newbazz", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM5MTY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI0NTUyOA==", "fields": {"created_at": "2018-01-14T15:05:18Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTQwMDA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI0Njg3MA==", "fields": {"created_at": "2018-01-14T16:56:19Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1NzUyNDkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI0Nzc0NA==", "fields": {"created_at": "2018-01-14T18:09:18Z", "content": "THUMBS_DOWN", "giver": "ishanSrt", "receiver": "shreyateeza", "review": "MDEyOklzc3VlQ29tbWVudDM1NzQ5MDUwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI0ODk5Mg==", "fields": {"created_at": "2018-01-14T19:41:31Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "vibhanshuvaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1NzUzMzc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI1Njc1OA==", "fields": {"created_at": "2018-01-15T04:53:13Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTQxMjA1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI1Nzc1Mw==", "fields": {"created_at": "2018-01-15T05:50:41Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Kagamihime", "review": "MDEyOklzc3VlQ29tbWVudDM1NzU4ODEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI4NDA5NA==", "fields": {"created_at": "2018-01-15T17:06:39Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "margobra8", "review": "MDEyOklzc3VlQ29tbWVudDM1NzczOTE3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI4NDIxMQ==", "fields": {"created_at": "2018-01-15T17:09:48Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1NzQyNTEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI4NTI4Ng==", "fields": {"created_at": "2018-01-15T17:40:31Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "pradeepgangwar", "review": "MDEyOklzc3VlQ29tbWVudDM1NzA0OTY5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI4NjMxNA==", "fields": {"created_at": "2018-01-15T18:09:46Z", "content": "THUMBS_UP", "giver": "Prabhat-IIT", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1Nzc0NzAxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODIxMjU2Mw==", "fields": {"created_at": "2018-01-12T18:51:33Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "damian1996", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTIwNTM5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODIzMzM5Nw==", "fields": {"created_at": "2018-01-13T17:00:49Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM3NjQ5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODIzNjc2OA==", "fields": {"created_at": "2018-01-13T21:55:51Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "Prabhat-IIT", "review": "MDEyOklzc3VlQ29tbWVudDM1NzQ3MDE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODIzNjgwMA==", "fields": {"created_at": "2018-01-13T21:59:04Z", "content": "THUMBS_UP", "giver": "jackthepirate6", "receiver": "Prabhat-IIT", "review": "MDEyOklzc3VlQ29tbWVudDM1NzQ3MDE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODIzOTk4OA==", "fields": {"created_at": "2018-01-14T04:33:55Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM4NjI3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM0MjI0NQ==", "fields": {"created_at": "2018-01-16T21:01:36Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jackthepirate6", "review": "MDEyOklzc3VlQ29tbWVudDM1ODA4ODU4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM1NTA4Mw==", "fields": {"created_at": "2018-01-17T04:08:42Z", "content": "THUMBS_UP", "giver": "amalrajan", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1ODE5MDg4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM2MDc3OQ==", "fields": {"created_at": "2018-01-17T08:22:34Z", "content": "LAUGH", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1Nzc0MTgyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM2NzE4Nw==", "fields": {"created_at": "2018-01-17T10:47:13Z", "content": "HOORAY", "giver": "ishanSrt", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1ODI2NTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM2NzYzMw==", "fields": {"created_at": "2018-01-17T10:57:25Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1ODI2OTMzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM2NzkwNw==", "fields": {"created_at": "2018-01-17T11:03:45Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1ODI2OTMzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM2NzkxOQ==", "fields": {"created_at": "2018-01-17T11:04:08Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "kriti21", "review": "MDEyOklzc3VlQ29tbWVudDM1ODI3MTE2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM3MTgwMg==", "fields": {"created_at": "2018-01-17T12:48:39Z", "content": "THUMBS_UP", "giver": "clarammdantas", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1ODI4MzE0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM4MDY2Ng==", "fields": {"created_at": "2018-01-17T15:45:30Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1ODA4MzkyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM4ODU0NQ==", "fields": {"created_at": "2018-01-17T18:09:57Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM1ODM1OTQ2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM5MDg1NA==", "fields": {"created_at": "2018-01-17T18:57:28Z", "content": "THUMBS_UP", "giver": "vipuldcoder", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM5MDg1OQ==", "fields": {"created_at": "2018-01-17T18:57:35Z", "content": "THUMBS_UP", "giver": "vipuldcoder", "receiver": "neelanshsahai", "review": "MDEyOklzc3VlQ29tbWVudDM0NDIzOTU0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODMzOTE0Ng==", "fields": {"created_at": "2018-01-16T19:52:48Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "rohanbanerjee", "review": "MDEyOklzc3VlQ29tbWVudDM1NzkxNDY2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODMzOTE0OQ==", "fields": {"created_at": "2018-01-16T19:52:50Z", "content": "LAUGH", "giver": "Makman2", "receiver": "rohanbanerjee", "review": "MDEyOklzc3VlQ29tbWVudDM1NzkxNDY2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODQ1NDg5NA==", "fields": {"created_at": "2018-01-18T22:12:14Z", "content": "THUMBS_UP", "giver": "ShivamSinghania", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODQ4MTYxNQ==", "fields": {"created_at": "2018-01-19T13:24:25Z", "content": "THUMBS_UP", "giver": "vibhanshuvaibhav", "receiver": "amalrajan", "review": "MDEyOklzc3VlQ29tbWVudDM1ODkzNjk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU0NTQ3OA==", "fields": {"created_at": "2018-01-22T06:56:08Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgzMDI3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1NTg0MQ==", "fields": {"created_at": "2018-01-22T12:03:50Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "manankalra", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg5Njk4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1NzgyNA==", "fields": {"created_at": "2018-01-22T12:58:45Z", "content": "THUMBS_DOWN", "giver": "realslimshanky", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1ODE2MQ==", "fields": {"created_at": "2018-01-22T13:06:57Z", "content": "THUMBS_DOWN", "giver": "anctartica", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwNg==", "fields": {"created_at": "2018-01-22T13:43:34Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwOQ==", "fields": {"created_at": "2018-01-22T13:43:36Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM4Nw==", "fields": {"created_at": "2018-01-22T13:57:59Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM5MQ==", "fields": {"created_at": "2018-01-22T13:58:07Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDU1Ng==", "fields": {"created_at": "2018-01-22T14:02:36Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2ODkyNg==", "fields": {"created_at": "2018-01-22T16:30:41Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2OTM3OA==", "fields": {"created_at": "2018-01-22T16:39:13Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU3Mzk3NQ==", "fields": {"created_at": "2018-01-22T18:06:03Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgyMzAwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU3NDUyNQ==", "fields": {"created_at": "2018-01-22T18:17:51Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgyMjk0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU4MTA1NQ==", "fields": {"created_at": "2018-01-22T20:31:13Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQwNjAxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODUyNzM0MA==", "fields": {"created_at": "2018-01-21T08:50:58Z", "content": "THUMBS_UP", "giver": "Kagamihime", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgwNDgxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODUyNzMxOA==", "fields": {"created_at": "2018-01-21T08:47:53Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Kagamihime", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgwNDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODUyODg1Mw==", "fields": {"created_at": "2018-01-21T11:23:59Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Kagamihime", "review": "MDEyOklzc3VlQ29tbWVudDM1OTIzMzQ4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODUzMjIxMw==", "fields": {"created_at": "2018-01-21T16:04:09Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgxNjU5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODUzMjIzNQ==", "fields": {"created_at": "2018-01-21T16:05:19Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgxNjY5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODUzMjMxMg==", "fields": {"created_at": "2018-01-21T16:11:23Z", "content": "LAUGH", "giver": "newbazz", "receiver": "Kagamihime", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgxNjkyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODUzOTQ1MA==", "fields": {"created_at": "2018-01-22T01:07:06Z", "content": "THUMBS_UP", "giver": "Kagamihime", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1OTI5MzA0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODY3NjYyMA==", "fields": {"created_at": "2018-01-24T14:40:24Z", "content": "THUMBS_UP", "giver": "ankurg22", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM2MDEyNzA3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODYxMTM0MQ==", "fields": {"created_at": "2018-01-23T11:48:43Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM1OTc2NjI5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODYxMjEwNw==", "fields": {"created_at": "2018-01-23T12:07:14Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "paavininanda", "review": "MDEyOklzc3VlQ29tbWVudDM1OTc2OTg2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODc1MDQwOQ==", "fields": {"created_at": "2018-01-25T20:00:07Z", "content": "THUMBS_UP", "giver": "Kagamihime", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODcyNTgxOQ==", "fields": {"created_at": "2018-01-25T11:55:05Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM2MDQ0NDQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODg0MTk4MA==", "fields": {"created_at": "2018-01-29T03:48:41Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2MTA5NDcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODg2OTc4Ng==", "fields": {"created_at": "2018-01-29T16:31:48Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "ankurg22", "review": "MDEyOklzc3VlQ29tbWVudDM2MTMwMjIxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODgwMTYyOA==", "fields": {"created_at": "2018-01-26T20:28:24Z", "content": "THUMBS_UP", "giver": "monsij", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM2MDgwMjQ5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODgxNTUzMw==", "fields": {"created_at": "2018-01-27T12:51:43Z", "content": "LAUGH", "giver": "manankalra", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM2MDk4MDk3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODgyMzY1Nw==", "fields": {"created_at": "2018-01-28T00:02:09Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM2MTAyMjcyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODgyODM3OA==", "fields": {"created_at": "2018-01-28T10:54:01Z", "content": "THUMBS_UP", "giver": "priyanshsaxena", "receiver": "manankalra", "review": "MDEyOklzc3VlQ29tbWVudDM2MTA0NDY0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODgzNTExNw==", "fields": {"created_at": "2018-01-28T20:04:17Z", "content": "LAUGH", "giver": "Makman2", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM2MTA3NDcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODk2OTc4OA==", "fields": {"created_at": "2018-01-31T12:18:06Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTAzNDYwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODk4NDAxOA==", "fields": {"created_at": "2018-01-31T16:45:51Z", "content": "THUMBS_UP", "giver": "monsij", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM2MTk0NjA3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODk4NjM0NA==", "fields": {"created_at": "2018-01-31T17:26:22Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTAyMDAxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODkwNzQ3Nw==", "fields": {"created_at": "2018-01-30T10:06:52Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzgyMzQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODkyMjY3MA==", "fields": {"created_at": "2018-01-30T15:29:04Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM2MTQ4NDEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODkyNjQ3Nw==", "fields": {"created_at": "2018-01-30T16:31:12Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2MTY0NjY4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTAxNjgyMw==", "fields": {"created_at": "2018-02-01T08:22:54Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM2MjE5MTk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTAxNjgyNg==", "fields": {"created_at": "2018-02-01T08:22:57Z", "content": "LAUGH", "giver": "newbazz", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM2MjE5MTk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTAyODg1NA==", "fields": {"created_at": "2018-02-01T13:13:25Z", "content": "LAUGH", "giver": "newbazz", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM2MjI2MTUxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTAzNTM3Mg==", "fields": {"created_at": "2018-02-01T15:18:15Z", "content": "LAUGH", "giver": "ankurg22", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM2MjE0MDMwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE0NDcyNw==", "fields": {"created_at": "2018-02-05T05:40:04Z", "content": "THUMBS_UP", "giver": "mvinoba", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE5OTYwMw==", "fields": {"created_at": "2018-02-06T06:52:29Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "mvinoba", "review": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTExMzMwOQ==", "fields": {"created_at": "2018-02-03T05:55:05Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "kriti21", "review": "MDEyOklzc3VlQ29tbWVudDM2Mjc3MzU1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTEyOTU2MQ==", "fields": {"created_at": "2018-02-04T10:58:13Z", "content": "LAUGH", "giver": "pareksha", "receiver": "Nickatak", "review": "MDEyOklzc3VlQ29tbWVudDM2Mjg5ODA4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTM3NTIyNA==", "fields": {"created_at": "2018-02-09T05:34:29Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTgyMzM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTM3NTIyNg==", "fields": {"created_at": "2018-02-09T05:34:34Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTgyMzM4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTM3NTIyOA==", "fields": {"created_at": "2018-02-09T05:34:38Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTgyMzM3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTMxNTUwMg==", "fields": {"created_at": "2018-02-08T05:36:25Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDM2Mzc3Nzc3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTQ1ODY5Mw==", "fields": {"created_at": "2018-02-12T07:39:09Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2NDg0NzExNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTQ1ODcyNg==", "fields": {"created_at": "2018-02-12T07:40:48Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2NDg0NzQ2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTQ2MDE4NA==", "fields": {"created_at": "2018-02-12T08:38:13Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM2NDAwODExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTQ4OTY1NA==", "fields": {"created_at": "2018-02-12T19:39:49Z", "content": "THUMBS_UP", "giver": "pushkalkatara", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM2NTAzMjk4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTQ5MTc3NA==", "fields": {"created_at": "2018-02-12T20:28:41Z", "content": "HEART", "giver": "khanchi97", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1NDE2MTA4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTU3NTI2MQ==", "fields": {"created_at": "2018-02-14T10:54:47Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "ayush9398", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODEzMzA2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTU3NzMzMg==", "fields": {"created_at": "2018-02-14T11:47:40Z", "content": "THUMBS_UP", "giver": "ayush9398", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2NTU3ODkxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTU3ODA5MQ==", "fields": {"created_at": "2018-02-14T12:06:58Z", "content": "THUMBS_UP", "giver": "ayush9398", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2NTU4NjY2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTU3ODgzMA==", "fields": {"created_at": "2018-02-14T12:27:54Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "ayush9398", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODE1NzYyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTU4Mjg5OQ==", "fields": {"created_at": "2018-02-14T14:02:10Z", "content": "LAUGH", "giver": "sangamcse", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NTYxNDUwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTU5MzU5Mg==", "fields": {"created_at": "2018-02-14T17:05:14Z", "content": "THUMBS_UP", "giver": "monsij", "receiver": "kriti21", "review": "MDEyOklzc3VlQ29tbWVudDM2Mzg1NjU4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUxMzAxMA==", "fields": {"created_at": "2018-02-13T08:40:05Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzc5MDI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyMDYzOQ==", "fields": {"created_at": "2018-02-13T11:28:23Z", "content": "HOORAY", "giver": "realslimshanky", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyMTQzNA==", "fields": {"created_at": "2018-02-13T11:48:50Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzOTEyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyMTUyNg==", "fields": {"created_at": "2018-02-13T11:51:16Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "kriti21", "review": "MDEyOklzc3VlQ29tbWVudDM2Mzg1NjU4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyMjE3MA==", "fields": {"created_at": "2018-02-13T12:08:09Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzg0Mzk1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyNzYzMw==", "fields": {"created_at": "2018-02-13T14:13:17Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzODE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyNzg5Ng==", "fields": {"created_at": "2018-02-13T14:17:33Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzOTYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyODA1MQ==", "fields": {"created_at": "2018-02-13T14:20:22Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzOTk0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyODA3MQ==", "fields": {"created_at": "2018-02-13T14:20:35Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzg0MDE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyODE3Ng==", "fields": {"created_at": "2018-02-13T14:22:38Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzg0MDI1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyODIxNA==", "fields": {"created_at": "2018-02-13T14:23:12Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzg0MDUzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUzMTE0NQ==", "fields": {"created_at": "2018-02-13T15:13:12Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzOTg4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTY0NjEzNg==", "fields": {"created_at": "2018-02-15T16:23:47Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODQ1MjE3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTY5MzcwNw==", "fields": {"created_at": "2018-02-16T14:44:19Z", "content": "LAUGH", "giver": "Makman2", "receiver": "nguptaa", "review": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTY5Mzk4Ng==", "fields": {"created_at": "2018-02-16T14:49:48Z", "content": "LAUGH", "giver": "Makman2", "receiver": "kriti21", "review": "MDEyOklzc3VlQ29tbWVudDM2MzQ2NDM2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYwMDQ0Mw==", "fields": {"created_at": "2018-02-14T19:18:14Z", "content": "THUMBS_UP", "giver": "monsij", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NTcxMTMzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYwMTM2Mg==", "fields": {"created_at": "2018-02-14T19:34:34Z", "content": "THUMBS_UP", "giver": "Nickatak", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NTI0MDQzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYwMzkxOA==", "fields": {"created_at": "2018-02-14T20:31:42Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nityeshaga", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODI5NzUzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYyMjI2OQ==", "fields": {"created_at": "2018-02-15T07:52:41Z", "content": "THUMBS_UP", "giver": "ayush9398", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2NTg0OTM3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYyMjMxMg==", "fields": {"created_at": "2018-02-15T07:54:28Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "ayush9398", "review": "MDEyOklzc3VlQ29tbWVudDM2NTg0OTcyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYyMjkwNQ==", "fields": {"created_at": "2018-02-15T08:16:08Z", "content": "THUMBS_DOWN", "giver": "sangamcse", "receiver": "ayush9398", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODQwMjY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYzMDIxMQ==", "fields": {"created_at": "2018-02-15T11:03:44Z", "content": "HEART", "giver": "Naveenaidu", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM1NDE2MTA4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYzMjAzNw==", "fields": {"created_at": "2018-02-15T11:50:23Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODE4MzU5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYzNzgwMQ==", "fields": {"created_at": "2018-02-15T14:04:54Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODQ3ODMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTYzODQ5NA==", "fields": {"created_at": "2018-02-15T14:18:35Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODQ3Njg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTc0MDQyMA==", "fields": {"created_at": "2018-02-18T14:39:53Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "kriti21", "review": "MDEyOklzc3VlQ29tbWVudDM2NjQ1MjU1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTc0MTA1Mw==", "fields": {"created_at": "2018-02-18T15:28:37Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk1NDc5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTc0MTE5NA==", "fields": {"created_at": "2018-02-18T15:40:46Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk1NTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTc0MTQ4MQ==", "fields": {"created_at": "2018-02-18T16:04:15Z", "content": "THUMBS_UP", "giver": "arpit7714", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk1NTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTc0MTQ4NQ==", "fields": {"created_at": "2018-02-18T16:04:26Z", "content": "HOORAY", "giver": "arpit7714", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk1NTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTc3MzA5NA==", "fields": {"created_at": "2018-02-19T15:10:00Z", "content": "THUMBS_UP", "giver": "ksangam68", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NjcxNTA2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTcyMjcxNg==", "fields": {"created_at": "2018-02-17T09:29:03Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "anctartica", "review": "MDEyOklzc3VlQ29tbWVudDM2NjQyOTAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTcyOTI2Nw==", "fields": {"created_at": "2018-02-17T18:45:52Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODkyODk0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTcyOTMxNA==", "fields": {"created_at": "2018-02-17T18:50:01Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODkyOTU5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTg3MzI5OQ==", "fields": {"created_at": "2018-02-21T13:34:51Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Crphang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk1NDczMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTgyODE3Ng==", "fields": {"created_at": "2018-02-20T17:15:58Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM2NjQ5MjE5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTgzNTM2Ng==", "fields": {"created_at": "2018-02-20T19:31:58Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NzA4Mjg1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1MzM3OQ==", "fields": {"created_at": "2018-02-22T18:16:05Z", "content": "HOORAY", "giver": "sks444", "receiver": "himanshu1603", "review": "MDEyOklzc3VlQ29tbWVudDM2Nzc1NDczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1MzUzMg==", "fields": {"created_at": "2018-02-22T18:19:00Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA0NzQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1Mzk0MQ==", "fields": {"created_at": "2018-02-22T18:27:13Z", "content": "HOORAY", "giver": "himanshu1603", "receiver": "himanshu1603", "review": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1NDE1OA==", "fields": {"created_at": "2018-02-22T18:31:45Z", "content": "LAUGH", "giver": "sks444", "receiver": "himanshu1603", "review": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Mw==", "fields": {"created_at": "2018-02-23T01:52:50Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Nw==", "fields": {"created_at": "2018-02-23T01:52:56Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY4OQ==", "fields": {"created_at": "2018-02-23T01:54:31Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYxMA==", "fields": {"created_at": "2018-02-23T01:51:52Z", "content": "LAUGH", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzMw==", "fields": {"created_at": "2018-02-23T01:52:33Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzNQ==", "fields": {"created_at": "2018-02-23T01:52:38Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk4ODkwMQ==", "fields": {"created_at": "2018-02-23T11:18:05Z", "content": "THUMBS_UP", "giver": "Mohit17067", "receiver": "chetasr", "review": "MDEyOklzc3VlQ29tbWVudDM2NzkyNjM1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTkzNTEyNw==", "fields": {"created_at": "2018-02-22T14:00:37Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk2MTk1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTkzNTEzMA==", "fields": {"created_at": "2018-02-22T14:00:39Z", "content": "HOORAY", "giver": "Makman2", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk2MTk1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTkzODE3MQ==", "fields": {"created_at": "2018-02-22T14:44:15Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk2MDY0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTkzODIyNw==", "fields": {"created_at": "2018-02-22T14:44:50Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk2MTA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTkzODYyOA==", "fields": {"created_at": "2018-02-22T14:49:38Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTk2MTQxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA0MDYzOQ==", "fields": {"created_at": "2018-02-25T04:56:44Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDI3NTI5MjU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA0ODcwMQ==", "fields": {"created_at": "2018-02-25T17:35:23Z", "content": "LAUGH", "giver": "harshhx17", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2ODMyNzA5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA0OTc0Mg==", "fields": {"created_at": "2018-02-25T18:47:58Z", "content": "THUMBS_UP", "giver": "harshhx17", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2ODMzMDgwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA0OTc0Ng==", "fields": {"created_at": "2018-02-25T18:48:13Z", "content": "THUMBS_UP", "giver": "harshhx17", "receiver": "anctartica", "review": "MDEyOklzc3VlQ29tbWVudDM2ODMzMTgyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA0OTc0OA==", "fields": {"created_at": "2018-02-25T18:48:16Z", "content": "LAUGH", "giver": "harshhx17", "receiver": "anctartica", "review": "MDEyOklzc3VlQ29tbWVudDM2ODMzMTgyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA0OTc0OQ==", "fields": {"created_at": "2018-02-25T18:48:19Z", "content": "LAUGH", "giver": "harshhx17", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2ODMzMDgwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA1ODczNg==", "fields": {"created_at": "2018-02-26T04:13:54Z", "content": "THUMBS_UP", "giver": "monsij", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDQ4NjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA1ODczNw==", "fields": {"created_at": "2018-02-26T04:13:55Z", "content": "THUMBS_UP", "giver": "monsij", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDQ4NTg4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA2MzY2OQ==", "fields": {"created_at": "2018-02-26T07:51:45Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDM2ODQxNjY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA2NDIyOA==", "fields": {"created_at": "2018-02-26T08:08:43Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2ODQxOTcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA2NDMwMw==", "fields": {"created_at": "2018-02-26T08:10:30Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM2ODQyMDUyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA3Njg5NQ==", "fields": {"created_at": "2018-02-26T13:03:30Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM2ODQ5MTUxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA4NDIzMQ==", "fields": {"created_at": "2018-02-26T15:23:06Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM2ODUxMjk4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA4NjM4Mw==", "fields": {"created_at": "2018-02-26T15:55:31Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "random-access7", "review": "MDEyOklzc3VlQ29tbWVudDM2ODU0MzMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA4NjQ2OQ==", "fields": {"created_at": "2018-02-26T15:56:46Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "LenaAn", "review": "MDEyOklzc3VlQ29tbWVudDM2ODU0MjI0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA5Mjk4OA==", "fields": {"created_at": "2018-02-26T17:42:48Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2ODU4MjcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDAzMzM3NQ==", "fields": {"created_at": "2018-02-24T17:24:43Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDM2ODIyMTE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE1MjM1NA==", "fields": {"created_at": "2018-02-27T16:58:31Z", "content": "THUMBS_UP", "giver": "harshhx17", "receiver": "nityeshaga", "review": "MDEyOklzc3VlQ29tbWVudDM2ODk0NzAwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE1NDk4NA==", "fields": {"created_at": "2018-02-27T17:42:21Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM2ODk2MDg2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE1NTI3OA==", "fields": {"created_at": "2018-02-27T17:48:09Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM2ODk2MzQ2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE1NTM3NQ==", "fields": {"created_at": "2018-02-27T17:49:43Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "random-access7", "review": "MDEyOklzc3VlQ29tbWVudDM2ODk2NTM4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE3NjE5OA==", "fields": {"created_at": "2018-02-28T02:00:39Z", "content": "THUMBS_UP", "giver": "firesans", "receiver": "sks444", "review": "MDEyOklzc3VlQ29tbWVudDM2ODc0MTYzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE5MDE0Ng==", "fields": {"created_at": "2018-02-28T09:43:30Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "nityeshaga", "review": "MDEyOklzc3VlQ29tbWVudDM2ODk0NzAwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDEyNjY3OA==", "fields": {"created_at": "2018-02-27T08:55:23Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2ODY0NjUzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDEzNjQyNg==", "fields": {"created_at": "2018-02-27T12:26:06Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "Naveenaidu", "review": "MDEyOklzc3VlQ29tbWVudDM2ODg0ODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDI0MjAwNw==", "fields": {"created_at": "2018-03-01T05:49:44Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NjI1NTMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDI0NTYwNg==", "fields": {"created_at": "2018-03-01T07:59:09Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDM2OTQzMTU4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDI3NTA5MQ==", "fields": {"created_at": "2018-03-01T17:54:06Z", "content": "THUMBS_UP", "giver": "Mohit17067", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0MDEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDIyNDExMQ==", "fields": {"created_at": "2018-02-28T20:21:44Z", "content": "THUMBS_UP", "giver": "harshhx17", "receiver": "monsij", "review": "MDEyOklzc3VlQ29tbWVudDM2OTM2OTc0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDM0ODg5Ng==", "fields": {"created_at": "2018-03-03T08:27:59Z", "content": "THUMBS_UP", "giver": "Mohit17067", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM3MDEyOTIxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDM1MzQ0Mw==", "fields": {"created_at": "2018-03-03T14:56:25Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Mohit17067", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjAxNzg5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDM2MjYzNA==", "fields": {"created_at": "2018-03-04T05:26:23Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "nityeshaga", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTAwNTgxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDM2ODM0Mw==", "fields": {"created_at": "2018-03-04T15:00:16Z", "content": "LAUGH", "giver": "harshhx17", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM3MDIzNTY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDUyNDA4MA==", "fields": {"created_at": "2018-03-07T14:10:39Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDM3MDM1NjY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY1OTYzOA==", "fields": {"created_at": "2018-03-09T20:31:25Z", "content": "HOORAY", "giver": "sangamcse", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzU1ODUyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3MDc4Mg==", "fields": {"created_at": "2018-03-10T06:32:04Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3MTcxOTEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3MTQ5NA==", "fields": {"created_at": "2018-03-10T07:53:46Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxNTE0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3MjI2Mw==", "fields": {"created_at": "2018-03-10T09:12:27Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxNjYzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3MjkxMQ==", "fields": {"created_at": "2018-03-10T10:17:00Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxODAxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3MjkyNA==", "fields": {"created_at": "2018-03-10T10:17:07Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxODA5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3NzY4NA==", "fields": {"created_at": "2018-03-10T16:51:34Z", "content": "LAUGH", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYyNzIxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3NzcxMw==", "fields": {"created_at": "2018-03-10T16:53:37Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYyNzI3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY4NTE1Ng==", "fields": {"created_at": "2018-03-11T04:43:33Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDQ2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY4NTE2NA==", "fields": {"created_at": "2018-03-11T04:44:28Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDUxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY4NTU3MQ==", "fields": {"created_at": "2018-03-11T05:45:29Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDU0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY5MTU5MQ==", "fields": {"created_at": "2018-03-11T15:19:14Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY1ODA5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDYyMzIzMQ==", "fields": {"created_at": "2018-03-09T06:32:21Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3MTcyNTU2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDc2MjA4Ng==", "fields": {"created_at": "2018-03-13T05:07:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDAxNzUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDcwODk4NQ==", "fields": {"created_at": "2018-03-12T08:36:12Z", "content": "LAUGH", "giver": "sangamcse", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzcxOTc3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDcwODk5MA==", "fields": {"created_at": "2018-03-12T08:36:15Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzcxOTc3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDcwOTMwMQ==", "fields": {"created_at": "2018-03-12T08:43:36Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDM3MjIxNjU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDcwOTMwNA==", "fields": {"created_at": "2018-03-12T08:43:40Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDM3MjIxNjcxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDcyOTkwMQ==", "fields": {"created_at": "2018-03-12T15:30:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzc5NjMyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDk0NDg2OQ==", "fields": {"created_at": "2018-03-16T04:20:37Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDk5MDAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NDg2NA==", "fields": {"created_at": "2018-03-19T11:13:18Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "rohanrk", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE3NzUyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NjUxNw==", "fields": {"created_at": "2018-03-19T11:54:21Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5NjA4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NzQ1NQ==", "fields": {"created_at": "2018-03-19T12:18:35Z", "content": "THUMBS_UP", "giver": "anshumanv", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE5MTc4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NzcyNQ==", "fields": {"created_at": "2018-03-19T12:25:26Z", "content": "HOORAY", "giver": "anshumanv", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE5MzY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NzcyNg==", "fields": {"created_at": "2018-03-19T12:25:28Z", "content": "HEART", "giver": "anshumanv", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE5MzY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA2MzY4MA==", "fields": {"created_at": "2018-03-19T16:56:54Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM3NDI4NTYzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA2Mzc2Ng==", "fields": {"created_at": "2018-03-19T16:58:22Z", "content": "THUMBS_UP", "giver": "lalitmee", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM3NDI4NTYzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA2NTkyNg==", "fields": {"created_at": "2018-03-19T17:33:11Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM3NDI4MDgwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAwMDM3OQ==", "fields": {"created_at": "2018-03-17T11:37:58Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1MDI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAwNTY1OQ==", "fields": {"created_at": "2018-03-17T17:54:36Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "nityeshaga", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI2NDYxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAxMTg3OA==", "fields": {"created_at": "2018-03-18T03:06:14Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI3NjAwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAxNzExNA==", "fields": {"created_at": "2018-03-18T12:42:54Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI4NjY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAyMjM2Mw==", "fields": {"created_at": "2018-03-18T18:48:03Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5NjU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAyMjU2NQ==", "fields": {"created_at": "2018-03-18T19:04:12Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "manankalra", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5OTE0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDI2Mg==", "fields": {"created_at": "2018-03-21T11:38:46Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDM3Nw==", "fields": {"created_at": "2018-03-21T11:42:15Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTY5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDM4NQ==", "fields": {"created_at": "2018-03-21T11:42:21Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTYzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDM4Nw==", "fields": {"created_at": "2018-03-21T11:42:26Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDY2Ng==", "fields": {"created_at": "2018-03-21T11:49:12Z", "content": "LAUGH", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTg3NDU2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE3OTY3OQ==", "fields": {"created_at": "2018-03-21T15:53:14Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "gaocegege", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk4Mjc3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTM1OTgwMQ==", "fields": {"created_at": "2018-03-26T05:01:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDM3NTc2MTg0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTMwNTcyMA==", "fields": {"created_at": "2018-03-23T17:08:43Z", "content": "THUMBS_UP", "giver": "jckw", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NTczMTQxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTMxNjM0Mg==", "fields": {"created_at": "2018-03-23T20:52:07Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM3NTc3MjM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTQ1NDU4Mw==", "fields": {"created_at": "2018-03-27T17:27:03Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDM3NDk5MTgwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTU2ODM3OA==", "fields": {"created_at": "2018-03-29T15:54:16Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM3NzI4MTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTU2ODYzOA==", "fields": {"created_at": "2018-03-29T15:59:16Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM3NzI4MjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTY0MTUwNA==", "fields": {"created_at": "2018-03-31T20:58:53Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzNjk1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTY3NzAxOQ==", "fields": {"created_at": "2018-04-02T14:07:50Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM3NzkzNjAwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTY3ODY1OQ==", "fields": {"created_at": "2018-04-02T14:46:17Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1Mzg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTYwMjYzOA==", "fields": {"created_at": "2018-03-30T10:10:39Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODI2NTk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTYwMzI2MQ==", "fields": {"created_at": "2018-03-30T10:33:18Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM3NzQ5ODI0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTYxODU0Mw==", "fields": {"created_at": "2018-03-30T18:42:50Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM3NzU5MzM1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTc4NzY5Nw==", "fields": {"created_at": "2018-04-04T12:39:51Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM3ODMxMDE0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTc4ODEwOQ==", "fields": {"created_at": "2018-04-04T12:47:34Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODg4MzUzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTc4ODEyMg==", "fields": {"created_at": "2018-04-04T12:47:50Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODg4NDYxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTcxNDEyNw==", "fields": {"created_at": "2018-04-03T08:05:46Z", "content": "THUMBS_DOWN", "giver": "Vamshi99", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM3ODE0NTU0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTcyMDgwMQ==", "fields": {"created_at": "2018-04-03T10:23:57Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM3ODE5NDUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg0NjYyMw==", "fields": {"created_at": "2018-04-05T12:13:47Z", "content": "HOORAY", "giver": "sangamcse", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTAyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg0NjYyOA==", "fields": {"created_at": "2018-04-05T12:13:51Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTAyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg3MzczMA==", "fields": {"created_at": "2018-04-05T19:56:50Z", "content": "LAUGH", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM3OTAwMjE4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg3MzgyOQ==", "fields": {"created_at": "2018-04-05T19:58:43Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM3OTA1Nzg3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg5MjE2Nw==", "fields": {"created_at": "2018-04-06T06:57:29Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTY3MzE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk0NjE0OA==", "fields": {"created_at": "2018-04-07T15:38:12Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkxNTQzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk0NzA4OA==", "fields": {"created_at": "2018-04-07T16:42:52Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkyMTI2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk1ODkzOA==", "fields": {"created_at": "2018-04-08T11:05:46Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzE1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk2MDY4Mw==", "fields": {"created_at": "2018-04-08T13:16:02Z", "content": "THUMBS_UP", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkwNzU1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk2MTUzMw==", "fields": {"created_at": "2018-04-08T14:21:29Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3OTUzMTczMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk2ODk4MQ==", "fields": {"created_at": "2018-04-08T23:33:54Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM3OTU5MTUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk3NTA0Mg==", "fields": {"created_at": "2018-04-09T05:34:44Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkxNDEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk3NTk1NQ==", "fields": {"created_at": "2018-04-09T06:12:30Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM3OTU5MTUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk5NDI2Ng==", "fields": {"created_at": "2018-04-09T13:20:25Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MDc3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk5NDUwMA==", "fields": {"created_at": "2018-04-09T13:24:50Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MjEzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk5NjczMg==", "fields": {"created_at": "2018-04-09T14:02:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3OTc2MjU1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk5OTI2OQ==", "fields": {"created_at": "2018-04-09T14:44:29Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA3OTI2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTkxMzAyMA==", "fields": {"created_at": "2018-04-06T14:49:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM3ODE5NDUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTkzNzkzMw==", "fields": {"created_at": "2018-04-07T02:46:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTQwMTM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTkzODMwNg==", "fields": {"created_at": "2018-04-07T03:30:52Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTcyNDUzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjA1MzA2Mw==", "fields": {"created_at": "2018-04-10T12:56:57Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "Monal5031", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDQwNzM3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjA1OTkyOA==", "fields": {"created_at": "2018-04-10T14:42:43Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI4MDY1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjA3NTg3OQ==", "fields": {"created_at": "2018-04-10T19:13:07Z", "content": "THUMBS_UP", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI3Nzc4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjAyODg0Ng==", "fields": {"created_at": "2018-04-10T02:20:46Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3OTk0Njg5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjAzMzQwNg==", "fields": {"created_at": "2018-04-10T05:39:26Z", "content": "THUMBS_UP", "giver": "Mohit17067", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI5ODE4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjAzODUyOQ==", "fields": {"created_at": "2018-04-10T07:55:55Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3OTk0MTYyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjE0NTExNg==", "fields": {"created_at": "2018-04-11T21:31:49Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "lalitmee", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkwNDU0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjE0NTU1OA==", "fields": {"created_at": "2018-04-11T21:42:17Z", "content": "THUMBS_UP", "giver": "KevinHock", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDg2MTY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjE0NjUwMA==", "fields": {"created_at": "2018-04-11T22:05:05Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxMTk4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjE2NTg0OQ==", "fields": {"created_at": "2018-04-12T08:45:21Z", "content": "THUMBS_UP", "giver": "refactormyself", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxNTE1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjEyNzA5Nw==", "fields": {"created_at": "2018-04-11T15:55:23Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "sks444", "review": "MDEyOklzc3VlQ29tbWVudDM4MDUwMzM5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjI2OTc1MA==", "fields": {"created_at": "2018-04-14T01:53:24Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3MjQ3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjI2OTc1NA==", "fields": {"created_at": "2018-04-14T01:53:38Z", "content": "HEART", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3MjQ3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjI3NjIxMg==", "fields": {"created_at": "2018-04-14T12:44:47Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDg2MTY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjI3OTIyMQ==", "fields": {"created_at": "2018-04-14T16:23:04Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTY4MTczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjI5NDYxNQ==", "fields": {"created_at": "2018-04-15T16:14:47Z", "content": "HOORAY", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTU4Nzc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjIwMDkxNQ==", "fields": {"created_at": "2018-04-12T19:11:50Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "NiklasMM", "review": "MDEyOklzc3VlQ29tbWVudDM4MDM0MjA1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjIzNzYzNg==", "fields": {"created_at": "2018-04-13T12:38:58Z", "content": "LAUGH", "giver": "newbazz", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDI5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjIzNzYzOQ==", "fields": {"created_at": "2018-04-13T12:39:00Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDI5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjIzNzg1Mg==", "fields": {"created_at": "2018-04-13T12:43:40Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDQwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2MjczNQ==", "fields": {"created_at": "2018-04-17T03:01:42Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTkyMDk0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2MzA4Mg==", "fields": {"created_at": "2018-04-17T03:14:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTkzMzEzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2Njc3MA==", "fields": {"created_at": "2018-04-17T05:50:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2OTA3NA==", "fields": {"created_at": "2018-04-17T06:59:56Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk2MTAzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2OTEwMQ==", "fields": {"created_at": "2018-04-17T07:00:28Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk2MDk0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM3MDM4Mw==", "fields": {"created_at": "2018-04-17T07:28:19Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk2NjI5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM4MjIyMg==", "fields": {"created_at": "2018-04-17T11:27:09Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk0ODc2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjMyNjAyMw==", "fields": {"created_at": "2018-04-16T13:06:39Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MDc3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ0MDM0OQ==", "fields": {"created_at": "2018-04-18T09:44:35Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1ODYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ0MDU0NQ==", "fields": {"created_at": "2018-04-18T09:48:40Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1OTQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ0MDUzOA==", "fields": {"created_at": "2018-04-18T09:48:35Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1OTczNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ1NzA0Mw==", "fields": {"created_at": "2018-04-18T14:57:42Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ4MTk2Nw==", "fields": {"created_at": "2018-04-18T22:25:59Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "susg", "review": "MDEyOklzc3VlQ29tbWVudDM3NzM2MzY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ4MjI3NA==", "fields": {"created_at": "2018-04-18T22:34:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Nshul", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDQ3NjYyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5MzAwOQ==", "fields": {"created_at": "2018-04-19T05:18:22Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "nalinbhardwaj", "review": "MDEyOklzc3VlQ29tbWVudDM4MjAwMDcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5MzQyMg==", "fields": {"created_at": "2018-04-19T05:32:30Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyMjkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5MzUzMw==", "fields": {"created_at": "2018-04-19T05:37:14Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyNDMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ0OA==", "fields": {"created_at": "2018-04-19T07:10:40Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ3MQ==", "fields": {"created_at": "2018-04-19T07:11:14Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQxOA==", "fields": {"created_at": "2018-04-19T07:09:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU0OA==", "fields": {"created_at": "2018-04-19T07:13:08Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU1NQ==", "fields": {"created_at": "2018-04-19T07:13:22Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU2MA==", "fields": {"created_at": "2018-04-19T07:13:38Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUwMQ==", "fields": {"created_at": "2018-04-19T07:11:50Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUzMQ==", "fields": {"created_at": "2018-04-19T07:12:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1MA==", "fields": {"created_at": "2018-04-19T07:34:34Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1Mw==", "fields": {"created_at": "2018-04-19T07:34:36Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ3Nw==", "fields": {"created_at": "2018-04-19T07:35:04Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ4NQ==", "fields": {"created_at": "2018-04-19T07:35:18Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzY5Nw==", "fields": {"created_at": "2018-04-19T07:40:01Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQxODc2MQ==", "fields": {"created_at": "2018-04-17T22:34:07Z", "content": "THUMBS_UP", "giver": "damian1996", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MjAxNzU1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjU0OTM2OA==", "fields": {"created_at": "2018-04-20T02:55:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjU0OTg0Mw==", "fields": {"created_at": "2018-04-20T03:16:54Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjkzMzM4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjY5NTQwOA==", "fields": {"created_at": "2018-04-24T04:41:19Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "manankalra", "review": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYwNzA1Nw==", "fields": {"created_at": "2018-04-21T14:45:52Z", "content": "THUMBS_UP", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIwOTkxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxMzQxNg==", "fields": {"created_at": "2018-04-21T23:06:10Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDE1NzI2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxMzQxOQ==", "fields": {"created_at": "2018-04-21T23:06:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDE1NzQyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxMzczMw==", "fields": {"created_at": "2018-04-21T23:48:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxMTY2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxMzczNQ==", "fields": {"created_at": "2018-04-21T23:48:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxMTM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNTM5OQ==", "fields": {"created_at": "2018-04-22T03:43:34Z", "content": "THUMBS_UP", "giver": "Crphang", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM4MzM1MjMxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNjAyMw==", "fields": {"created_at": "2018-04-22T05:09:32Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "attilanagy", "review": "MDEyOklzc3VlQ29tbWVudDM4MzM1NTg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNjQyMA==", "fields": {"created_at": "2018-04-22T06:05:30Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNjUwOA==", "fields": {"created_at": "2018-04-22T06:16:59Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjUzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNjczNw==", "fields": {"created_at": "2018-04-22T06:41:34Z", "content": "THUMBS_DOWN", "giver": "Vamshi99", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjYyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNzY0NA==", "fields": {"created_at": "2018-04-22T08:29:00Z", "content": "CONFUSED", "giver": "attilanagy", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM4MzM1NjQ2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxODczMg==", "fields": {"created_at": "2018-04-22T10:08:32Z", "content": "LAUGH", "giver": "stellargo", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MzM2NzcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjczNTM4OQ==", "fields": {"created_at": "2018-04-24T16:30:57Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "prnvdixit", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg0NDQ2OQ==", "fields": {"created_at": "2018-04-26T09:57:47Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNzU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg0NDczNA==", "fields": {"created_at": "2018-04-26T10:02:38Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "alisianoi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzMzgzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg0NTA5Ng==", "fields": {"created_at": "2018-04-26T10:09:58Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg2NDAxNQ==", "fields": {"created_at": "2018-04-26T15:43:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg4NjQ2Mg==", "fields": {"created_at": "2018-04-26T23:29:31Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNzU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg4NjUxMg==", "fields": {"created_at": "2018-04-26T23:32:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg4NjUyMg==", "fields": {"created_at": "2018-04-26T23:32:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNTczMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg5MDI1NA==", "fields": {"created_at": "2018-04-27T02:08:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDU2MTkwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk0NDExOQ==", "fields": {"created_at": "2018-04-28T02:34:16Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDY3NTQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk1MzUxMg==", "fields": {"created_at": "2018-04-28T15:40:02Z", "content": "THUMBS_UP", "giver": "nityanandagohain", "receiver": "IpshitaC", "review": "MDEyOklzc3VlQ29tbWVudDM4NTE4NDk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk4NDI4MQ==", "fields": {"created_at": "2018-04-30T09:31:50Z", "content": "THUMBS_UP", "giver": "devshiva619", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM0OTM4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk4NDY2NQ==", "fields": {"created_at": "2018-04-30T09:43:39Z", "content": "THUMBS_UP", "giver": "devshiva619", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM1MjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk4NTE3OA==", "fields": {"created_at": "2018-04-30T09:59:22Z", "content": "THUMBS_UP", "giver": "devshiva619", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM1NTQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NTA0OA==", "fields": {"created_at": "2018-05-01T15:58:43Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0OTA4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NTAwNA==", "fields": {"created_at": "2018-05-01T15:57:32Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NjI2MA==", "fields": {"created_at": "2018-05-01T16:27:43Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA1MDY1OQ==", "fields": {"created_at": "2018-05-01T18:01:36Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA3ODk3OA==", "fields": {"created_at": "2018-05-02T09:10:01Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkxMzE0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA4MTE3Mw==", "fields": {"created_at": "2018-05-02T09:58:04Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkyNTc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA4NDAwMA==", "fields": {"created_at": "2018-05-02T11:08:24Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkzNjI2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzAyNDYxMQ==", "fields": {"created_at": "2018-05-01T03:13:16Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "biscuitsnake", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM0MDAzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE1MzM4MQ==", "fields": {"created_at": "2018-05-03T15:01:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTU0NDA3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE1MzM5Ng==", "fields": {"created_at": "2018-05-03T15:01:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTM5ODQ3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE2Njg4MA==", "fields": {"created_at": "2018-05-03T18:55:19Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5MzQ1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE2Njg4Mw==", "fields": {"created_at": "2018-05-03T18:55:21Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5MzY5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE2Njg4OQ==", "fields": {"created_at": "2018-05-03T18:55:24Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5Mzg4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE2Njg5NA==", "fields": {"created_at": "2018-05-03T18:55:30Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5NDAyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE4Nzk0NA==", "fields": {"created_at": "2018-05-04T07:38:28Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NjUxMjg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzEwMjAyNg==", "fields": {"created_at": "2018-05-02T16:31:40Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzEzODM0MQ==", "fields": {"created_at": "2018-05-03T10:06:26Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MzMwMzAyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI1NTYyOA==", "fields": {"created_at": "2018-05-06T15:54:45Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NDQyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI1Njc4Mw==", "fields": {"created_at": "2018-05-06T17:21:38Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NTkzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI2NDk2MA==", "fields": {"created_at": "2018-05-07T03:09:08Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTY0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI3ODczMQ==", "fields": {"created_at": "2018-05-07T10:39:40Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "rohanrk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzMwOTQ0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI4MzE0OQ==", "fields": {"created_at": "2018-05-07T12:47:55Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQwOTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI4NDczOA==", "fields": {"created_at": "2018-05-07T13:21:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI5NTUwOA==", "fields": {"created_at": "2018-05-07T16:42:02Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM4NzA5ODQ4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMDgyNQ==", "fields": {"created_at": "2018-05-05T01:21:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM4NjUyODExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTI5MQ==", "fields": {"created_at": "2018-05-05T02:11:42Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTI5OA==", "fields": {"created_at": "2018-05-05T02:12:17Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MTc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM1OA==", "fields": {"created_at": "2018-05-05T02:19:08Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTcwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM2OQ==", "fields": {"created_at": "2018-05-05T02:20:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM4Ng==", "fields": {"created_at": "2018-05-05T02:21:54Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTkzOA==", "fields": {"created_at": "2018-05-05T03:20:17Z", "content": "HEART", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjMyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMjc1NQ==", "fields": {"created_at": "2018-05-05T04:59:31Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI1MTIwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzNzEyMg==", "fields": {"created_at": "2018-05-05T11:54:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI4OTY1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzODMyMg==", "fields": {"created_at": "2018-05-05T13:35:05Z", "content": "LAUGH", "giver": "sopelj", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3ODkzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzM4MDc0MQ==", "fields": {"created_at": "2018-05-09T05:25:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM4NzYyMjY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzM5Njk4OQ==", "fields": {"created_at": "2018-05-09T12:01:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNDY0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzM5NjkzNA==", "fields": {"created_at": "2018-05-09T11:59:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNjEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMwMzY2Mw==", "fields": {"created_at": "2018-05-07T19:26:59Z", "content": "THUMBS_UP", "giver": "PrajwalM2212", "receiver": "attilanagy", "review": "MDEyOklzc3VlQ29tbWVudDM4NzE3NTEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNTMxNw==", "fields": {"created_at": "2018-05-08T00:54:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQ0NDY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNTMyMg==", "fields": {"created_at": "2018-05-08T00:54:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNzI2OA==", "fields": {"created_at": "2018-05-08T02:06:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU5NjQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMyMDc1NQ==", "fields": {"created_at": "2018-05-08T04:43:12Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "siddhant-curious", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjYxNTMxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMyMTAwMQ==", "fields": {"created_at": "2018-05-08T04:55:07Z", "content": "THUMBS_UP", "giver": "PrajwalM2212", "receiver": "siddhant-curious", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjYxNjQ2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMyNDkzMA==", "fields": {"created_at": "2018-05-08T07:15:20Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTgyOTg5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMzMDg3OQ==", "fields": {"created_at": "2018-05-08T09:23:07Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "rhemon", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTk0NzI2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ0MzY2Nw==", "fields": {"created_at": "2018-05-10T07:57:37Z", "content": "LAUGH", "giver": "ishanSrt", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4Nzk4MTQwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ0MzY3Mg==", "fields": {"created_at": "2018-05-10T07:57:42Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4Nzk4MTQwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIxNw==", "fields": {"created_at": "2018-05-10T12:39:54Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "lilithxxx", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIzMw==", "fields": {"created_at": "2018-05-10T12:40:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1ODgxNw==", "fields": {"created_at": "2018-05-10T14:13:48Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzMyODIxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ2MDEwNw==", "fields": {"created_at": "2018-05-10T14:34:33Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzMyOTY1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ2NjUwNg==", "fields": {"created_at": "2018-05-10T16:23:03Z", "content": "THUMBS_UP", "giver": "monsij", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk1MDM0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ3ODY5Mw==", "fields": {"created_at": "2018-05-10T20:29:45Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "nemaniarjun", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ5Mjk5OA==", "fields": {"created_at": "2018-05-11T05:18:44Z", "content": "LAUGH", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUxODc4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ5NTI2OA==", "fields": {"created_at": "2018-05-11T06:41:15Z", "content": "HOORAY", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDEyOklzc3VlQ29tbWVudDM4ODI3NTE1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQxNjMxNg==", "fields": {"created_at": "2018-05-09T17:45:35Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNDY0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQxNjY5Mw==", "fields": {"created_at": "2018-05-09T17:52:37Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNTU4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQyMTEzOQ==", "fields": {"created_at": "2018-05-09T19:18:03Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE0MzIyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQyMTQzNg==", "fields": {"created_at": "2018-05-09T19:24:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzEzNjczMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQzNDM3OA==", "fields": {"created_at": "2018-05-10T01:53:48Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE1MDI0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQzNTU5NQ==", "fields": {"created_at": "2018-05-10T02:45:10Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Nzg3NzIxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQzNjMwNw==", "fields": {"created_at": "2018-05-10T03:15:28Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNjg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU0MTEyMQ==", "fields": {"created_at": "2018-05-12T06:24:10Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4ODM1OTY5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU0NzMxMA==", "fields": {"created_at": "2018-05-12T15:32:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "jackthepirate6", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjI1MDA4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU1NTY5Mw==", "fields": {"created_at": "2018-05-13T05:29:24Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUxODc4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU1Njc3Nw==", "fields": {"created_at": "2018-05-13T07:45:45Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4OTU3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU2MjA0MQ==", "fields": {"created_at": "2018-05-13T15:15:13Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "The-Compiler", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc5MzU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU2MzUwOA==", "fields": {"created_at": "2018-05-13T17:04:35Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4ODY0MDc1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU2Mzc3OA==", "fields": {"created_at": "2018-05-13T17:26:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNzMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU3MzkxMA==", "fields": {"created_at": "2018-05-14T05:20:27Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNzMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzUwOTc4MA==", "fields": {"created_at": "2018-05-11T12:48:51Z", "content": "CONFUSED", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Nzc3MDEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzY1NzA0MQ==", "fields": {"created_at": "2018-05-15T13:56:15Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gaocegege", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODI5NTQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzYyMDIzNQ==", "fields": {"created_at": "2018-05-14T21:16:42Z", "content": "THUMBS_UP", "giver": "bekicot", "receiver": "aptrishu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjgxMTk5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzYyMTc3NQ==", "fields": {"created_at": "2018-05-14T21:54:35Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzkyNjYzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzc1NzU2Nw==", "fields": {"created_at": "2018-05-17T04:32:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODUxMTU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzcwNzU2Nw==", "fields": {"created_at": "2018-05-16T09:58:32Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODU2NjgxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzcxMDE4NA==", "fields": {"created_at": "2018-05-16T10:52:15Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk1MDM0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzg1MzQwNw==", "fields": {"created_at": "2018-05-18T17:39:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA1NDU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyMTcyMw==", "fields": {"created_at": "2018-05-18T06:26:13Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gatesn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNDgwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyMTczMw==", "fields": {"created_at": "2018-05-18T06:26:30Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gatesn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTA2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNDA3Mg==", "fields": {"created_at": "2018-05-18T07:31:26Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gatesn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTE0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNTU0NA==", "fields": {"created_at": "2018-05-18T08:06:22Z", "content": "THUMBS_UP", "giver": "gatesn", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4NjEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNTU2MQ==", "fields": {"created_at": "2018-05-18T08:06:37Z", "content": "THUMBS_UP", "giver": "gatesn", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4Nzc0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNTYyNw==", "fields": {"created_at": "2018-05-18T08:07:47Z", "content": "THUMBS_UP", "giver": "gatesn", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDM5MDA5NjMxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk2MTY4Mw==", "fields": {"created_at": "2018-05-22T08:36:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MDUwMTM5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk3Nzk2Mw==", "fields": {"created_at": "2018-05-22T13:45:35Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDM5MDk5NDI1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4NDc1OA==", "fields": {"created_at": "2018-05-22T15:19:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTA0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc0Mw==", "fields": {"created_at": "2018-05-22T16:02:53Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc2Mw==", "fields": {"created_at": "2018-05-22T16:03:14Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkzNDgzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc4Mw==", "fields": {"created_at": "2018-05-22T16:03:34Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTk0MzQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzkwMTYyOA==", "fields": {"created_at": "2018-05-21T03:55:15Z", "content": "CONFUSED", "giver": "sanjeethboddi", "receiver": "kriti21", "review": "MDEyOklzc3VlQ29tbWVudDM2NjQ1MjU1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzkwMjk1MQ==", "fields": {"created_at": "2018-05-21T05:16:51Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ5NTM3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzkyNDcwNw==", "fields": {"created_at": "2018-05-21T15:14:51Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5MDY2MjUzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDA1MTcyOQ==", "fields": {"created_at": "2018-05-23T16:06:17Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM5MTM2ODYwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDA2MDc1Ng==", "fields": {"created_at": "2018-05-23T18:45:13Z", "content": "HOORAY", "giver": "fatma-mohamed", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MTQxMzgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAwNjI0Ng==", "fields": {"created_at": "2018-05-22T21:52:30Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTY4MTczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxNTU3Mg==", "fields": {"created_at": "2018-05-23T03:33:35Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAxMDkyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxNTYxNQ==", "fields": {"created_at": "2018-05-23T03:35:00Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAyNDQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxOTgzNg==", "fields": {"created_at": "2018-05-23T06:28:47Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "dorothykiz1", "review": "MDEyOklzc3VlQ29tbWVudDM5MTIyNzkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE2OTYzNQ==", "fields": {"created_at": "2018-05-25T15:07:31Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTc3Mzk4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5NzIyNg==", "fields": {"created_at": "2018-05-26T11:48:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjU2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODc4MQ==", "fields": {"created_at": "2018-05-26T13:59:44Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjgzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODcyNA==", "fields": {"created_at": "2018-05-26T13:56:37Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0Njc4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODg0NA==", "fields": {"created_at": "2018-05-26T14:03:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjkyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5OTA1OA==", "fields": {"created_at": "2018-05-26T14:19:28Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0OTM2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDEwNzUyNg==", "fields": {"created_at": "2018-05-24T14:16:03Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDU5OTI4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDEyODgyMQ==", "fields": {"created_at": "2018-05-24T20:15:18Z", "content": "THUMBS_UP", "giver": "xferra", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDU5OTI4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI1Mzc2MA==", "fields": {"created_at": "2018-05-28T18:03:24Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI1MzY3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI2MDI3OA==", "fields": {"created_at": "2018-05-28T22:48:33Z", "content": "THUMBS_UP", "giver": "utkarsh2102", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MjUyMTU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI2NjQxNQ==", "fields": {"created_at": "2018-05-29T04:29:54Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MjYzMzY4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI3MDI0NA==", "fields": {"created_at": "2018-05-29T06:57:41Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM5MjY3MTg2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI3Mzk2Mw==", "fields": {"created_at": "2018-05-29T08:22:09Z", "content": "THUMBS_UP", "giver": "ananyaarun", "receiver": "sks444", "review": "MDEyOklzc3VlQ29tbWVudDM5MjY4Mzk4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI5NDQ0Mg==", "fields": {"created_at": "2018-05-29T14:43:37Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQzNTEzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI5NDQ0NA==", "fields": {"created_at": "2018-05-29T14:43:40Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0MDk3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI5NDc0Mw==", "fields": {"created_at": "2018-05-29T14:47:53Z", "content": "THUMBS_DOWN", "giver": "palash25", "receiver": "dorothykiz1", "review": "MDEyOklzc3VlQ29tbWVudDM5MjgwMDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI5NDk1MA==", "fields": {"created_at": "2018-05-29T14:50:46Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "dorothykiz1", "review": "MDEyOklzc3VlQ29tbWVudDM5MjgwNDc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDIwMDg4MA==", "fields": {"created_at": "2018-05-26T16:35:46Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA1MzEwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDIxMjA2MA==", "fields": {"created_at": "2018-05-27T13:01:09Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTAzNzUyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDM0MzYxNw==", "fields": {"created_at": "2018-05-30T10:29:50Z", "content": "CONFUSED", "giver": "dorothykiz1", "receiver": "dorothykiz1", "review": "MDEyOklzc3VlQ29tbWVudDM5MjgwMDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMyNDA3NQ==", "fields": {"created_at": "2018-05-30T01:38:11Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTUyMzYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMyNDA4MA==", "fields": {"created_at": "2018-05-30T01:38:25Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0ODc2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMyNDcwNQ==", "fields": {"created_at": "2018-05-30T02:00:51Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ1MDUxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMzMTM0Nw==", "fields": {"created_at": "2018-05-30T06:27:06Z", "content": "LAUGH", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTY1MzAwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMzMTYxMg==", "fields": {"created_at": "2018-05-30T06:34:20Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTY1NDI5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ0NDIwNQ==", "fields": {"created_at": "2018-05-31T21:36:28Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI2MzUwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NDEzMQ==", "fields": {"created_at": "2018-06-01T04:24:20Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jsecrest", "review": "MDEyOklzc3VlQ29tbWVudDM5MzY3ODY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NDI3OQ==", "fields": {"created_at": "2018-06-01T04:32:02Z", "content": "HOORAY", "giver": "jsecrest", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5Mzc0ODM1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NjU0MQ==", "fields": {"created_at": "2018-06-01T06:13:25Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MjgwNDEwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ3NDY5NQ==", "fields": {"created_at": "2018-06-01T13:24:22Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NzAwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ3NDg3Mw==", "fields": {"created_at": "2018-06-01T13:27:32Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NDcwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwNDIzMA==", "fields": {"created_at": "2018-06-02T04:09:00Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "bekicot", "review": "MDEyOklzc3VlQ29tbWVudDM5NDA1MjA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODE4NA==", "fields": {"created_at": "2018-06-02T10:45:36Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjM5NDYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODE5Nw==", "fields": {"created_at": "2018-06-02T10:46:38Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NjA4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODM4MQ==", "fields": {"created_at": "2018-06-02T11:03:30Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1MDE1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODk5Mw==", "fields": {"created_at": "2018-06-02T11:53:50Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "RJ722", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NTc2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTI2Mw==", "fields": {"created_at": "2018-06-02T12:14:54Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDM5NDA4MTgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTM2MQ==", "fields": {"created_at": "2018-06-02T12:22:58Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1Nzk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTM2Mw==", "fields": {"created_at": "2018-06-02T12:23:07Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1ODM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTQ1NQ==", "fields": {"created_at": "2018-06-02T12:30:40Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NzkyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUyNjY2Ng==", "fields": {"created_at": "2018-06-03T14:22:58Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTE5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUyNjY2OA==", "fields": {"created_at": "2018-06-03T14:23:02Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTEzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUzMzA1OQ==", "fields": {"created_at": "2018-06-03T22:01:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTM0OQ==", "fields": {"created_at": "2018-06-05T19:35:04Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MTY5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTM4Mw==", "fields": {"created_at": "2018-06-05T19:35:41Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MTg5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTM5MQ==", "fields": {"created_at": "2018-06-05T19:35:47Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MjA0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTQ1MQ==", "fields": {"created_at": "2018-06-05T19:37:07Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTMzODg5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTQ2NA==", "fields": {"created_at": "2018-06-05T19:37:24Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTQ2OA==", "fields": {"created_at": "2018-06-05T19:37:28Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDE1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTQ3MA==", "fields": {"created_at": "2018-06-05T19:37:31Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTU5Nw==", "fields": {"created_at": "2018-06-05T19:39:59Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5NTA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY2MTAyMQ==", "fields": {"created_at": "2018-06-06T02:56:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5NTA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYxODE1Ng==", "fields": {"created_at": "2018-06-05T12:12:30Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTcwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNTE0MQ==", "fields": {"created_at": "2018-06-05T14:08:19Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM5NDcyMTc1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNjY3MQ==", "fields": {"created_at": "2018-06-05T14:28:35Z", "content": "HOORAY", "giver": "Makman2", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM5NDE1NjY3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNjc0MQ==", "fields": {"created_at": "2018-06-05T14:29:28Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM5NDczMDM2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYzMDMwOA==", "fields": {"created_at": "2018-06-05T15:18:41Z", "content": "LAUGH", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzEwOTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYzMTI5Mw==", "fields": {"created_at": "2018-06-05T15:33:29Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0MDk3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc0Njk2OA==", "fields": {"created_at": "2018-06-07T09:51:38Z", "content": "LAUGH", "giver": "sks444", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5NTM2MTcwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc2MzQ1Ng==", "fields": {"created_at": "2018-06-07T14:49:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3NDY2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc2Mzk5NA==", "fields": {"created_at": "2018-06-07T14:57:09Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3Nzk2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc3NDg1OQ==", "fields": {"created_at": "2018-06-07T17:51:59Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "IpshitaC", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzgyNDM4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc3NDk5OA==", "fields": {"created_at": "2018-06-07T17:54:23Z", "content": "CONFUSED", "giver": "RaiVaibhav", "receiver": "IpshitaC", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzgyMzk2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc5OTQ1OQ==", "fields": {"created_at": "2018-06-08T05:50:48Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MjQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDcxOTEzNg==", "fields": {"created_at": "2018-06-06T20:54:19Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzU0MTU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDczNDE5NA==", "fields": {"created_at": "2018-06-07T05:17:17Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzYyNjEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg0NzY3MA==", "fields": {"created_at": "2018-06-09T01:21:06Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5NTkyODY0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg0OTg4MQ==", "fields": {"created_at": "2018-06-09T05:38:52Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxMzkwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg0OTg5Mg==", "fields": {"created_at": "2018-06-09T05:39:51Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxMzg5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg0OTk1NA==", "fields": {"created_at": "2018-06-09T05:47:04Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzY3MjI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1MDU1OQ==", "fields": {"created_at": "2018-06-09T06:51:27Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNjY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NDU2Ng==", "fields": {"created_at": "2018-06-09T12:13:12Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzg4MjM3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NDY1OQ==", "fields": {"created_at": "2018-06-09T12:21:15Z", "content": "THUMBS_UP", "giver": "anctartica", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5NTk2Mzg4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NDY2MA==", "fields": {"created_at": "2018-06-09T12:21:22Z", "content": "LAUGH", "giver": "anctartica", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5NTk2Mzg4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NTI5Mw==", "fields": {"created_at": "2018-06-09T13:11:29Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NTI5NA==", "fields": {"created_at": "2018-06-09T13:11:33Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NTI5Ng==", "fields": {"created_at": "2018-06-09T13:11:37Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTIxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1Njg0NA==", "fields": {"created_at": "2018-06-09T14:58:30Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NjgwNA==", "fields": {"created_at": "2018-06-09T14:55:38Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyMzAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1Njk5MQ==", "fields": {"created_at": "2018-06-09T15:06:34Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTUxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1ODQzMg==", "fields": {"created_at": "2018-06-09T16:46:35Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTQzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2MjI3NA==", "fields": {"created_at": "2018-06-09T22:24:16Z", "content": "THUMBS_UP", "giver": "CCInCharge", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyMzAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2MjI3Nw==", "fields": {"created_at": "2018-06-09T22:24:25Z", "content": "THUMBS_UP", "giver": "CCInCharge", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5NTk3MjA1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2NDA1NQ==", "fields": {"created_at": "2018-06-10T02:15:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIzODI2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2NDYyNw==", "fields": {"created_at": "2018-06-10T03:41:31Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5NjAwODAzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2ODgxOA==", "fields": {"created_at": "2018-06-10T11:20:26Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI0OTU5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2OTI4MQ==", "fields": {"created_at": "2018-06-10T12:02:26Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI0OTIwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg3MDM5MA==", "fields": {"created_at": "2018-06-10T13:32:40Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg3MDM5Mg==", "fields": {"created_at": "2018-06-10T13:32:43Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg3MDUwOQ==", "fields": {"created_at": "2018-06-10T13:43:14Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4MzA3Nw==", "fields": {"created_at": "2018-06-11T04:29:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4MzA3OQ==", "fields": {"created_at": "2018-06-11T04:29:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzIxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4MzU5NA==", "fields": {"created_at": "2018-06-11T04:58:46Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTAxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NDM2OQ==", "fields": {"created_at": "2018-06-11T05:35:26Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTAzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NjM0NQ==", "fields": {"created_at": "2018-06-11T06:50:11Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NjY2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NjYyNw==", "fields": {"created_at": "2018-06-11T06:58:07Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzEwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4Njk4MQ==", "fields": {"created_at": "2018-06-11T07:08:55Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NzA1NA==", "fields": {"created_at": "2018-06-11T07:11:27Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzIxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NzA1OA==", "fields": {"created_at": "2018-06-11T07:11:36Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTA1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg5Njk2MA==", "fields": {"created_at": "2018-06-11T10:44:07Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTE1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDgzNTYyMg==", "fields": {"created_at": "2018-06-08T18:36:00Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczMzcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk3OTk3NQ==", "fields": {"created_at": "2018-06-12T17:34:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTg1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk4MTE1Ng==", "fields": {"created_at": "2018-06-12T17:55:19Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk4NDkyOQ==", "fields": {"created_at": "2018-06-12T19:05:29Z", "content": "HEART", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM5NjY5ODM4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk5MTg4Mw==", "fields": {"created_at": "2018-06-12T21:16:55Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MjgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk5MTkwOA==", "fields": {"created_at": "2018-06-12T21:17:24Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MTkwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk5MTkzMA==", "fields": {"created_at": "2018-06-12T21:17:42Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MzE1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTA0MDc1MQ==", "fields": {"created_at": "2018-06-13T16:42:36Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTAxOTE2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTA2MDU2OA==", "fields": {"created_at": "2018-06-13T23:49:49Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE4ODAxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTA2OTczNg==", "fields": {"created_at": "2018-06-14T06:01:00Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTI0NDk5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTAxMjAyOQ==", "fields": {"created_at": "2018-06-13T08:19:10Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczMDUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTAxOTMxNg==", "fields": {"created_at": "2018-06-13T10:35:06Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5Njg3MzQyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTAyMjI5MQ==", "fields": {"created_at": "2018-06-13T11:45:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMjcwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTAyMjIyNg==", "fields": {"created_at": "2018-06-13T11:44:19Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMjIwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTAyNzYyMQ==", "fields": {"created_at": "2018-06-13T13:26:53Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMzA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE1ODUwOQ==", "fields": {"created_at": "2018-06-15T15:49:15Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "SubbulakshmiRS", "review": "MDEyOklzc3VlQ29tbWVudDM5NzY2MjM5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NTUwNw==", "fields": {"created_at": "2018-06-15T23:27:03Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTMwOTM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzM4NQ==", "fields": {"created_at": "2018-06-16T02:01:14Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "bekicot", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTA0NzExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzQ4OQ==", "fields": {"created_at": "2018-06-16T02:16:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "bekicot", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY5MDIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzUxMw==", "fields": {"created_at": "2018-06-16T02:19:22Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE1NDgzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzUyNg==", "fields": {"created_at": "2018-06-16T02:20:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTEwMTE5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4MDAxMQ==", "fields": {"created_at": "2018-06-16T07:34:06Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NDg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4MzU0Mw==", "fields": {"created_at": "2018-06-16T13:09:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM5NzUxNzU5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4NTA3OA==", "fields": {"created_at": "2018-06-16T15:21:14Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwMzcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4NTQ5Ng==", "fields": {"created_at": "2018-06-16T15:55:37Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwMzcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4NTQyNQ==", "fields": {"created_at": "2018-06-16T15:49:55Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4Njc2Mw==", "fields": {"created_at": "2018-06-16T17:31:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwNzUxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE5MzYzOQ==", "fields": {"created_at": "2018-06-17T07:25:32Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkxOTE5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE5NTUzOQ==", "fields": {"created_at": "2018-06-17T10:39:55Z", "content": "CONFUSED", "giver": "ishanSrt", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNDk2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTIyOTY5Mg==", "fields": {"created_at": "2018-06-18T13:40:04Z", "content": "THUMBS_UP", "giver": "ananyaarun", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5ODA0Mjc4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM0NzQ3Mw==", "fields": {"created_at": "2018-06-20T10:59:01Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5ODcwOTYxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM2MjczMw==", "fields": {"created_at": "2018-06-20T15:23:09Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc1NTAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MDk5Mw==", "fields": {"created_at": "2018-06-21T02:01:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MzQ3Nw==", "fields": {"created_at": "2018-06-21T03:38:52Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5ODA0MQ==", "fields": {"created_at": "2018-06-21T06:37:11Z", "content": "THUMBS_UP", "giver": "chhabrabhishek", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMwOTA4Mg==", "fields": {"created_at": "2018-06-19T18:09:58Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM5ODQ5MzA5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMyNDA1MQ==", "fields": {"created_at": "2018-06-19T23:39:28Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM5ODQ5MzA5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMzMDkyNA==", "fields": {"created_at": "2018-06-20T04:15:18Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYyNTkxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMzMTQ0Ng==", "fields": {"created_at": "2018-06-20T04:41:16Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYyNjIzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMzNDM0Mw==", "fields": {"created_at": "2018-06-20T06:28:55Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5Nzg0OTEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ1ODYzMw==", "fields": {"created_at": "2018-06-22T06:05:41Z", "content": "LAUGH", "giver": "harshhx17", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ1ODYzNQ==", "fields": {"created_at": "2018-06-22T06:05:44Z", "content": "THUMBS_UP", "giver": "harshhx17", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ2Mzk2NQ==", "fields": {"created_at": "2018-06-22T08:24:45Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQwODY0MA==", "fields": {"created_at": "2018-06-21T10:06:37Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyNzcwNw==", "fields": {"created_at": "2018-06-21T15:48:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM5NzUxNzU5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyNzg2MA==", "fields": {"created_at": "2018-06-21T15:50:06Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE0ODgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyODIyMw==", "fields": {"created_at": "2018-06-21T15:55:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyOTgwMQ==", "fields": {"created_at": "2018-06-21T16:23:36Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE0NTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzMjU4Nw==", "fields": {"created_at": "2018-06-21T17:12:54Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIwNDA1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDA2NQ==", "fields": {"created_at": "2018-06-21T17:38:00Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE3MjQzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDM3Mw==", "fields": {"created_at": "2018-06-21T17:43:50Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE0NTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDQyMQ==", "fields": {"created_at": "2018-06-21T17:44:32Z", "content": "HEART", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIxMzc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDk3OQ==", "fields": {"created_at": "2018-06-21T17:53:50Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE2NTc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2MjkxMQ==", "fields": {"created_at": "2018-06-25T14:46:50Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDA5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2MzAwMw==", "fields": {"created_at": "2018-06-25T14:48:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2NTAxMQ==", "fields": {"created_at": "2018-06-25T15:18:06Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMTU3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU4NDY0MA==", "fields": {"created_at": "2018-06-25T21:27:35Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwNzU3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNDkzMg==", "fields": {"created_at": "2018-06-23T02:18:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNjUwNw==", "fields": {"created_at": "2018-06-23T05:39:31Z", "content": "THUMBS_UP", "giver": "bekicot", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNzEyMw==", "fields": {"created_at": "2018-06-23T06:56:10Z", "content": "THUMBS_UP", "giver": "starkblaze01", "receiver": "chhabrabhishek", "review": "MDEyOklzc3VlQ29tbWVudDM5OTYyOTU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUxNTA4NA==", "fields": {"created_at": "2018-06-23T18:47:34Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2ODk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUxODk1OA==", "fields": {"created_at": "2018-06-24T02:28:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUyMjA5NA==", "fields": {"created_at": "2018-06-24T09:22:04Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM5OTczMTEzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY0NTc3NA==", "fields": {"created_at": "2018-06-26T21:12:19Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNTc2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MDk5OA==", "fields": {"created_at": "2018-06-27T13:20:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzY0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MDk5OQ==", "fields": {"created_at": "2018-06-27T13:20:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzUwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MTAwMQ==", "fields": {"created_at": "2018-06-27T13:20:22Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjY0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MTAwMg==", "fields": {"created_at": "2018-06-27T13:20:24Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjQ2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4NDI1Ng==", "fields": {"created_at": "2018-06-27T14:12:13Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc0MDA1Mw==", "fields": {"created_at": "2018-06-28T12:55:49Z", "content": "THUMBS_UP", "giver": "starkblaze01", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwMTAwNzI3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc0MDA2Mg==", "fields": {"created_at": "2018-06-28T12:56:00Z", "content": "LAUGH", "giver": "starkblaze01", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwMTAyMzU1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg0NA==", "fields": {"created_at": "2018-06-28T17:28:43Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTkxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg1MA==", "fields": {"created_at": "2018-06-28T17:28:52Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg1NA==", "fields": {"created_at": "2018-06-28T17:28:56Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTE0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg1OA==", "fields": {"created_at": "2018-06-28T17:28:59Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMDA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg2NQ==", "fields": {"created_at": "2018-06-28T17:29:07Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxOTg0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc3OTkwNA==", "fields": {"created_at": "2018-06-29T04:40:39Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc5NTI3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc4MDIzNQ==", "fields": {"created_at": "2018-06-29T04:58:09Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc4MTI0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg0Mzg1MA==", "fields": {"created_at": "2018-07-01T05:58:05Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDQwMTUzNDgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg0NDU3Mg==", "fields": {"created_at": "2018-07-01T07:35:36Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NjUzMjk4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg0NDkyOQ==", "fields": {"created_at": "2018-07-01T08:11:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NTgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzA1OQ==", "fields": {"created_at": "2018-07-02T02:09:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTE4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzA3MQ==", "fields": {"created_at": "2018-07-02T02:10:13Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzE0MA==", "fields": {"created_at": "2018-07-02T02:13:44Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzMwNw==", "fields": {"created_at": "2018-07-02T02:23:07Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg2NzQyNA==", "fields": {"created_at": "2018-07-02T08:54:49Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDQwMTUzNDgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTgxNDA2Ng==", "fields": {"created_at": "2018-06-29T17:54:50Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMjkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk2NDI3NQ==", "fields": {"created_at": "2018-07-03T21:59:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0NzI0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NTYwMA==", "fields": {"created_at": "2018-07-04T06:06:51Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNzQ3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NTYyMQ==", "fields": {"created_at": "2018-07-04T06:07:26Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0MjI2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NTYyNQ==", "fields": {"created_at": "2018-07-04T06:07:34Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDA2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NzQ3Mg==", "fields": {"created_at": "2018-07-04T07:04:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDAyMzk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4MzgxNA==", "fields": {"created_at": "2018-07-04T09:10:14Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "raduklb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE4NTA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4NDYzOA==", "fields": {"created_at": "2018-07-04T09:25:07Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQwNjAzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4NTE3MQ==", "fields": {"created_at": "2018-07-04T09:34:39Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5MzM3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4NTE4MQ==", "fields": {"created_at": "2018-07-04T09:35:00Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5MzUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4NTI4MQ==", "fields": {"created_at": "2018-07-04T09:36:52Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5Mzk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk5ODI5Mw==", "fields": {"created_at": "2018-07-04T14:10:28Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDY5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjA1Mjk2Nw==", "fields": {"created_at": "2018-07-05T16:13:49Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDM5NTk0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjA4NjA2Ng==", "fields": {"created_at": "2018-07-06T08:44:54Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzY2OTM5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjA5NTg5Mg==", "fields": {"created_at": "2018-07-06T12:34:32Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA2NA==", "fields": {"created_at": "2018-07-04T17:19:00Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzcxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA2NQ==", "fields": {"created_at": "2018-07-04T17:19:02Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzU3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA2OQ==", "fields": {"created_at": "2018-07-04T17:19:05Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTkzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA3MQ==", "fields": {"created_at": "2018-07-04T17:19:08Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0MzU1NA==", "fields": {"created_at": "2018-07-08T13:09:12Z", "content": "HOORAY", "giver": "Makman2", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQwMzA3MzQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0MzU1NQ==", "fields": {"created_at": "2018-07-08T13:09:14Z", "content": "LAUGH", "giver": "Makman2", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQwMzA3MzQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0NDQ4OA==", "fields": {"created_at": "2018-07-08T14:33:26Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MTU3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0ODAyMg==", "fields": {"created_at": "2018-07-08T19:19:33Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0NDM1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE3NDkwMQ==", "fields": {"created_at": "2018-07-09T12:48:29Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDQwMzQ2NjYzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE5MDA3Ng==", "fields": {"created_at": "2018-07-09T17:06:37Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3NzE3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0MA==", "fields": {"created_at": "2018-07-07T07:58:59Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDY2OTI2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0MQ==", "fields": {"created_at": "2018-07-07T07:59:03Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0Mg==", "fields": {"created_at": "2018-07-07T07:59:06Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0NA==", "fields": {"created_at": "2018-07-07T07:59:08Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyODM5Mg==", "fields": {"created_at": "2018-07-07T09:45:40Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkwMjYwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyOTUyNw==", "fields": {"created_at": "2018-07-07T11:36:22Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDAyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjAyOA==", "fields": {"created_at": "2018-07-07T15:23:10Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjE4NA==", "fields": {"created_at": "2018-07-07T15:36:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI3MDUzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjE4OA==", "fields": {"created_at": "2018-07-07T15:37:05Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTkwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjMwMA==", "fields": {"created_at": "2018-07-07T15:44:55Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTE3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI0ODYwNw==", "fields": {"created_at": "2018-07-10T15:48:43Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM4OTIxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI0ODYxMQ==", "fields": {"created_at": "2018-07-10T15:48:48Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM5MjgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI2MzkwMg==", "fields": {"created_at": "2018-07-10T20:29:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3MDU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI2NDAxMQ==", "fields": {"created_at": "2018-07-10T20:30:51Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2ODEyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI3ODYzNQ==", "fields": {"created_at": "2018-07-11T04:13:07Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNDAwMTU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI5NTAxNA==", "fields": {"created_at": "2018-07-11T10:50:11Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI5NTAxOQ==", "fields": {"created_at": "2018-07-11T10:50:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMDY4Nw==", "fields": {"created_at": "2018-07-10T07:15:58Z", "content": "THUMBS_DOWN", "giver": "ksdme", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMTQ0NQ==", "fields": {"created_at": "2018-07-10T07:34:45Z", "content": "THUMBS_DOWN", "giver": "palash25", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzA2Ng==", "fields": {"created_at": "2018-07-10T08:10:17Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzk3Mg==", "fields": {"created_at": "2018-07-10T08:27:49Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjM2NzMxNg==", "fields": {"created_at": "2018-07-12T13:41:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjAzNjY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjM4MzExMA==", "fields": {"created_at": "2018-07-12T17:41:07Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc2MDM3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjQxNTUxMA==", "fields": {"created_at": "2018-07-13T08:57:37Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjUzNzA4Mg==", "fields": {"created_at": "2018-07-17T01:05:11Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgwMTI0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjUzNzA4NQ==", "fields": {"created_at": "2018-07-17T01:05:15Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5OTQzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjUzOTA0OA==", "fields": {"created_at": "2018-07-17T02:24:42Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5MjIyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0NTE4Ng==", "fields": {"created_at": "2018-07-18T18:08:43Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MDYxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0NTQwMw==", "fields": {"created_at": "2018-07-18T18:12:25Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "nvzard", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzE0ODE3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0OTY4OQ==", "fields": {"created_at": "2018-07-18T19:32:47Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0OTY5MQ==", "fields": {"created_at": "2018-07-18T19:32:53Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTU0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0OTYwNg==", "fields": {"created_at": "2018-07-18T19:31:11Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTI2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2ODEzNQ==", "fields": {"created_at": "2018-07-19T05:08:35Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "raduklb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE4NTA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2ODEzNw==", "fields": {"created_at": "2018-07-19T05:08:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE5ODAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2ODM3NA==", "fields": {"created_at": "2018-07-19T05:18:10Z", "content": "THUMBS_UP", "giver": "JoeSiew", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2OTE0OQ==", "fields": {"created_at": "2018-07-19T05:50:30Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjYwOTQzMg==", "fields": {"created_at": "2018-07-18T07:14:31Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc1ODM4NQ==", "fields": {"created_at": "2018-07-20T15:46:39Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "manankalra", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDAxMzg3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2NTg1MQ==", "fields": {"created_at": "2018-07-20T18:20:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyMjc1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2ODE5NA==", "fields": {"created_at": "2018-07-20T19:11:13Z", "content": "LAUGH", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2ODIwNA==", "fields": {"created_at": "2018-07-20T19:11:21Z", "content": "HOORAY", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4MDkzOQ==", "fields": {"created_at": "2018-07-21T06:34:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4MzY2Ng==", "fields": {"created_at": "2018-07-21T11:09:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjYzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NTIwNA==", "fields": {"created_at": "2018-07-21T13:25:56Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTM0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NjQyOA==", "fields": {"created_at": "2018-07-21T15:10:03Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NjQzMQ==", "fields": {"created_at": "2018-07-21T15:10:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTk4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NDAzNQ==", "fields": {"created_at": "2018-07-22T04:28:56Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NDAzNg==", "fields": {"created_at": "2018-07-22T04:29:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NTE3Mg==", "fields": {"created_at": "2018-07-22T06:48:32Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDQwNjgxMTM5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NTY0Nw==", "fields": {"created_at": "2018-07-22T07:49:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDQwNjg0NzU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5ODMwOQ==", "fields": {"created_at": "2018-07-22T11:48:10Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5ODQxNQ==", "fields": {"created_at": "2018-07-22T11:57:51Z", "content": "CONFUSED", "giver": "li-boxuan", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjcxNzM3NA==", "fields": {"created_at": "2018-07-19T21:00:26Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg4ODk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjcyNzU2OQ==", "fields": {"created_at": "2018-07-20T02:46:42Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MjgzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjcyNzYwNg==", "fields": {"created_at": "2018-07-20T02:48:03Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MzI3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjczMDg1MA==", "fields": {"created_at": "2018-07-20T05:24:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2Nzc2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjczNzc5Mg==", "fields": {"created_at": "2018-07-20T08:39:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzk3MjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjczNzkzNQ==", "fields": {"created_at": "2018-07-20T08:42:30Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0MzY2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjczNzkzOA==", "fields": {"created_at": "2018-07-20T08:42:35Z", "content": "CONFUSED", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0MzY2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg0NjU4OA==", "fields": {"created_at": "2018-07-23T16:58:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1MDg2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg1MTQxNg==", "fields": {"created_at": "2018-07-23T18:25:47Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg3MjE4OA==", "fields": {"created_at": "2018-07-24T04:25:21Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTIwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgwMjcwMA==", "fields": {"created_at": "2018-07-22T17:36:08Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5NDMwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgwMjg2OA==", "fields": {"created_at": "2018-07-22T17:48:52Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MjgzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxMTkyMg==", "fields": {"created_at": "2018-07-23T04:23:31Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "adhikasp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjY2ODY5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxNTg1MQ==", "fields": {"created_at": "2018-07-23T07:04:40Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxODM0Mg==", "fields": {"created_at": "2018-07-23T08:03:02Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "sks444", "review": "MDEyOklzc3VlQ29tbWVudDQwNjk0NzE4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxODMwMA==", "fields": {"created_at": "2018-07-23T08:02:21Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI4MDAyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxODMwNA==", "fields": {"created_at": "2018-07-23T08:02:23Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI3ODc0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyMzkzMA==", "fields": {"created_at": "2018-07-23T09:54:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMDQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyNDUxNg==", "fields": {"created_at": "2018-07-23T10:06:21Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyNDgyMg==", "fields": {"created_at": "2018-07-23T10:12:57Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDM5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgzMTcyMw==", "fields": {"created_at": "2018-07-23T12:55:35Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgzNDgyMQ==", "fields": {"created_at": "2018-07-23T13:50:33Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk1Nzg1NA==", "fields": {"created_at": "2018-07-25T12:56:23Z", "content": "THUMBS_UP", "giver": "cypher-naman", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDQwNzAxNjY4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5MTAxOQ==", "fields": {"created_at": "2018-07-25T23:03:15Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTQwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5MTAyMg==", "fields": {"created_at": "2018-07-25T23:03:20Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5OTE5Mw==", "fields": {"created_at": "2018-07-26T04:20:43Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMyNzAxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5OTUzMw==", "fields": {"created_at": "2018-07-26T04:36:05Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMyNjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjkwMjMzNw==", "fields": {"created_at": "2018-07-24T14:43:01Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDQwNzAxNjY4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzA0MjY1MA==", "fields": {"created_at": "2018-07-26T18:59:32Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkzMjg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzA0MzU1NQ==", "fields": {"created_at": "2018-07-26T19:18:14Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkzMjkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzA3NjY5NA==", "fields": {"created_at": "2018-07-27T11:33:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2ODEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAwMzg5Ng==", "fields": {"created_at": "2018-07-26T07:01:54Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDk2NDUyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAxNTAyMw==", "fields": {"created_at": "2018-07-26T10:45:40Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM5OTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAyNDkzNQ==", "fields": {"created_at": "2018-07-26T14:00:42Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjE1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAyNzY4NA==", "fields": {"created_at": "2018-07-26T14:42:24Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQwODA5NzgyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMDgwMA==", "fields": {"created_at": "2018-07-28T02:31:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczMjE2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMzA3OQ==", "fields": {"created_at": "2018-07-28T07:11:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTQzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMzE3MA==", "fields": {"created_at": "2018-07-28T07:20:18Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTM3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMzE3Mg==", "fields": {"created_at": "2018-07-28T07:20:24Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTQzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExNzkxMQ==", "fields": {"created_at": "2018-07-28T14:31:32Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NDM5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjQ5OA==", "fields": {"created_at": "2018-07-29T05:05:47Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDc2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjc5NQ==", "fields": {"created_at": "2018-07-29T05:49:39Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "HemabhKamboj", "review": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjk2NQ==", "fields": {"created_at": "2018-07-29T06:14:20Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIzOQ=="}}]