[{"model": "meta_review.participant", "pk": "0x48piraj", "fields": {"name": "Piyush Raj", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-11-27T07:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "123vivekr", "fields": {"name": "Vivek R", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2018-09-16T17:22:06Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AMR-KELEG", "fields": {"name": "Amr Mohamed ", "score": 0.35000000000000003, "rank": 145, "trend": -1, "last_active_at": "2017-08-07T14:56:27Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10288354213296552, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AbdealiJK", "fields": {"name": "AbdealiJK", "score": 0.14909642631009062, "rank": 199, "trend": -1, "last_active_at": "2018-08-13T04:28:08Z", "pos_in": 1, "weighted_pos_in": 0.14909642631009062, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10122835950611353, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AdeshAtole", "fields": {"name": "Adesh Atole", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-09-07T12:54:47Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Adrianzatreanu", "fields": {"name": "Zatreanu Adrian-Gabriel", "score": 2.925239107332622, "rank": 58, "trend": 0, "last_active_at": "2017-08-24T14:10:44Z", "pos_in": 10, "weighted_pos_in": 2.5752391073326217, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1241001434714059, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Akhelesh", "fields": {"name": null, "score": 0.15788013766399495, "rank": 192, "trend": -1, "last_active_at": "2018-08-18T16:18:55Z", "pos_in": 1, "weighted_pos_in": 0.15788013766399495, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10130072579689293, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AkshJain99", "fields": {"name": "Akshit Jain", "score": 3.1390604041627537, "rank": 55, "trend": 0, "last_active_at": "2018-10-30T13:55:23Z", "pos_in": 5, "weighted_pos_in": 2.439060404162754, "pos_out": 14, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12586175123807736, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Alexander-N", "fields": {"name": null, "score": 0.9273113708820407, "rank": 106, "trend": -1, "last_active_at": "2017-12-27T23:33:49Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10763983259518967, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Ananthavijay", "fields": {"name": "", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-10-18T13:00:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Arsfiqball", "fields": {"name": "Iqbal Mohammad Abdul Ghoni", "score": 4.094314558979797, "rank": 48, "trend": 0, "last_active_at": "2017-07-18T16:10:12Z", "pos_in": 19, "weighted_pos_in": 4.0443145589797975, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13373179581837824, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Asalle", "fields": {"name": "Asalle Mirzaieva", "score": 1.5429330499468639, "rank": 84, "trend": -1, "last_active_at": "2017-11-21T07:54:10Z", "pos_in": 2, "weighted_pos_in": 0.4429330499468638, "pos_out": 22, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11271174987961936, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AsnelChristian", "fields": {"name": "Christian Asnel Ngoulla Sob", "score": 4.504303931987234, "rank": 45, "trend": 0, "last_active_at": "2017-07-21T06:52:13Z", "pos_in": 15, "weighted_pos_in": 3.754303931987234, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13710957190733558, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CCInCharge", "fields": {"name": "Charles Chen", "score": 0.20095642933049948, "rank": 179, "trend": -1, "last_active_at": "2018-06-09T22:24:25Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10165561808818516, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CLiu13", "fields": {"name": "Charlie Liu", "score": 0.7593086804779455, "rank": 112, "trend": 1, "last_active_at": "2018-12-03T02:28:44Z", "pos_in": 2, "weighted_pos_in": 0.20930868047794549, "pos_out": 11, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10625571020595603, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CleanCut", "fields": {"name": "Nathan Stocks", "score": 1.0, "rank": 104, "trend": -1, "last_active_at": "2017-04-09T08:02:04Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10823869180847293, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Crphang", "fields": {"name": "Phang Chun Rong", "score": 0.9773113708820408, "rank": 105, "trend": -1, "last_active_at": "2018-04-22T03:43:34Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10805176718561331, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Daronion", "fields": {"name": null, "score": 0.10177179133285873, "rank": 206, "trend": -1, "last_active_at": "2018-10-01T08:37:21Z", "pos_in": 1, "weighted_pos_in": 0.10177179133285873, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10083846642358764, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Dhiraj240", "fields": {"name": "Dhiraj Sharma", "score": 0.5658786687014348, "rank": 119, "trend": -1, "last_active_at": "2018-11-07T18:34:40Z", "pos_in": 3, "weighted_pos_in": 0.4658786687014348, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10466209995242007, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Divi09112", "fields": {"name": "Divyansh Verma", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-11-09T14:35:15Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Elgayar", "fields": {"name": "Mostafa Elgayar", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2016-12-31T09:57:53Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "EverWinter23", "fields": {"name": "rishabh", "score": 1.3492029755579165, "rank": 88, "trend": -1, "last_active_at": "2018-06-21T15:48:01Z", "pos_in": 3, "weighted_pos_in": 1.3492029755579165, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11111566750269629, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "FosterSamuel", "fields": {"name": "Samuel Foster", "score": 0.15000000000000002, "rank": 198, "trend": -1, "last_active_at": "2017-08-12T15:45:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10123580377127095, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Grox-Ni", "fields": {"name": "GroxNi", "score": 0.4250265674814016, "rank": 133, "trend": -1, "last_active_at": "2017-12-18T09:18:14Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10350166289989239, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HarshKhatore", "fields": {"name": "Harsh Khatore", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-11-04T01:32:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Harshish", "fields": {"name": "Harshish Yadav", "score": 0.3468650371944737, "rank": 146, "trend": -1, "last_active_at": "2017-02-28T16:55:27Z", "pos_in": 1, "weighted_pos_in": 0.1468650371944737, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10285771414057977, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HemabhKamboj", "fields": {"name": "Hemabh Kamboj", "score": 0.3185765777593346, "rank": 147, "trend": -1, "last_active_at": "2018-07-29T08:23:21Z", "pos_in": 2, "weighted_pos_in": 0.3185765777593346, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10262465424155717, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HitRam", "fields": {"name": "Hitesh Ramchandani", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-01-23T17:54:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Hsankesara", "fields": {"name": "Heet Sankesara", "score": 0.15000000000000002, "rank": 198, "trend": -1, "last_active_at": "2017-07-18T08:34:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10123580377127095, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HyungKun", "fields": {"name": "HyungKun Jung", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-03-31T12:39:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IamRaviTejaG", "fields": {"name": "Ravi Teja Gannavarapu", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-10-27T15:46:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IpshitaC", "fields": {"name": "Ipshita Chatterjee", "score": 1.5447396386822505, "rank": 83, "trend": -1, "last_active_at": "2018-06-07T17:54:23Z", "pos_in": 6, "weighted_pos_in": 1.0447396386822505, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11272663380743488, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JoeSiew", "fields": {"name": null, "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-07-19T05:18:10Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnMoutafis", "fields": {"name": "John Moutafis", "score": 0.15000000000000002, "rank": 198, "trend": -1, "last_active_at": "2017-07-17T12:05:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10123580377127095, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnS-01", "fields": {"name": null, "score": 0.27502656748140175, "rank": 152, "trend": -1, "last_active_at": "2017-05-08T19:17:17Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10226585912862145, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "KVGarg", "fields": {"name": "Keshav Garg", "score": 1.2388266267969088, "rank": 94, "trend": -1, "last_active_at": "2018-11-26T17:02:39Z", "pos_in": 6, "weighted_pos_in": 0.8888266267969087, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11020631078230983, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Kagamihime", "fields": {"name": "Eisha Chen-yen-su", "score": 0.7311902231668423, "rank": 114, "trend": -2, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 3, "weighted_pos_in": 0.5811902231668423, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10602405090204015, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Kevchen", "fields": {"name": null, "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2016-11-25T19:33:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "KevinHock", "fields": {"name": "", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-04-11T21:42:17Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Kiy4h", "fields": {"name": "zeet", "score": 0.05, "rank": 211, "trend": null, "last_active_at": "2018-12-03T02:42:31Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LappleApple", "fields": {"name": "Lauri Apple", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-06-08T17:44:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LeafyLi", "fields": {"name": null, "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-01-15T18:18:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LenaAn", "fields": {"name": null, "score": 0.9273113708820407, "rank": 106, "trend": -1, "last_active_at": "2018-02-26T15:56:46Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10763983259518967, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Logan1x", "fields": {"name": "Khushal Sharma", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-09-17T10:03:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Lyrenhex", "fields": {"name": "Damian Heaton", "score": 0.20425079702444154, "rank": 178, "trend": -1, "last_active_at": "2017-11-28T20:58:50Z", "pos_in": 1, "weighted_pos_in": 0.20425079702444154, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10168275936831933, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MacBox7", "fields": {"name": "Ankit Joshi", "score": 6.207332624867159, "rank": 32, "trend": -1, "last_active_at": "2018-07-29T05:49:39Z", "pos_in": 15, "weighted_pos_in": 5.707332624867159, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15114030044895974, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mah1ndra", "fields": {"name": "Mahendra Thanniru", "score": 0.2, "rank": 181, "trend": -1, "last_active_at": "2018-09-03T09:41:31Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10164773836169459, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Makman2", "fields": {"name": "Mischa Kr\u00fcger", "score": 92.47026547474641, "rank": 2, "trend": 0, "last_active_at": "2018-10-06T01:44:10Z", "pos_in": 381, "weighted_pos_in": 86.27026547474642, "pos_out": 120, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.8618340186941089, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Man-Jain", "fields": {"name": "Manank Patni", "score": 3.0, "rank": 57, "trend": 0, "last_active_at": "2018-10-17T14:27:40Z", "pos_in": 3, "weighted_pos_in": 3.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12471607542541874, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ManthanKeim", "fields": {"name": "Manthan Keim", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-10-15T11:34:16Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mariatta", "fields": {"name": "", "score": 1.0757173219978733, "rank": 102, "trend": -1, "last_active_at": "2017-12-12T08:00:26Z", "pos_in": 8, "weighted_pos_in": 1.0257173219978732, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1088625034889763, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MariosPanag", "fields": {"name": "Marios Panagopoulos", "score": 0.5500531349628035, "rank": 121, "trend": -1, "last_active_at": "2017-05-07T21:48:37Z", "pos_in": 2, "weighted_pos_in": 0.5500531349628035, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1045317182572429, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MikeTheReader", "fields": {"name": "Mike Lundin", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-05-24T17:18:50Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mixih", "fields": {"name": "mixih", "score": 13.817640807651394, "rank": 15, "trend": 0, "last_active_at": "2017-12-29T20:29:44Z", "pos_in": 43, "weighted_pos_in": 13.421466524973392, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.21383928413441858, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mohit17067", "fields": {"name": "Mohit Juneja", "score": 0.4214665249734319, "rank": 134, "trend": -1, "last_active_at": "2018-04-10T05:39:26Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10347233280684416, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Monal5031", "fields": {"name": "Monal Shadi", "score": 4.24867162592986, "rank": 46, "trend": 0, "last_active_at": "2018-10-14T21:00:47Z", "pos_in": 5, "weighted_pos_in": 3.4486716259298604, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13500349612143964, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Naveenaidu", "fields": {"name": "Naveen Naidu", "score": 0.6191921715200848, "rank": 116, "trend": -1, "last_active_at": "2018-11-28T00:16:21Z", "pos_in": 1, "weighted_pos_in": 0.2691921715200848, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10510133347137308, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nickatak", "fields": {"name": "", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-02-14T19:34:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "NiklasMM", "fields": {"name": "Niklas", "score": 11.478055260361305, "rank": 16, "trend": 0, "last_active_at": "2018-06-13T23:49:49Z", "pos_in": 41, "weighted_pos_in": 10.728055260361305, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1945641598507381, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nosferatul", "fields": {"name": "Alexandru-Sorin Maxim", "score": 3.1732199787460154, "rank": 54, "trend": 0, "last_active_at": "2017-08-28T19:37:32Z", "pos_in": 6, "weighted_pos_in": 2.373219978746015, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1261431814453774, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nshul", "fields": {"name": "Anshul Mittal", "score": 1.6474495217853333, "rank": 81, "trend": -1, "last_active_at": "2018-04-18T22:34:33Z", "pos_in": 4, "weighted_pos_in": 1.5974495217853333, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11357282888000544, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PierceAndy", "fields": {"name": "Pierce Fu", "score": 0.5020722635494147, "rank": 126, "trend": -1, "last_active_at": "2017-04-04T04:11:31Z", "pos_in": 2, "weighted_pos_in": 0.3520722635494147, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10413641864496602, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PlentyMore", "fields": {"name": "PlentyMore", "score": 0.15929861849096674, "rank": 191, "trend": -1, "last_active_at": "2017-11-09T17:41:24Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10131241222326258, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Prabhat-IIT", "fields": {"name": "Prabhat", "score": 0.3758235919234855, "rank": 141, "trend": -1, "last_active_at": "2018-01-15T18:09:46Z", "pos_in": 3, "weighted_pos_in": 0.32582359192348553, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10309629474821089, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Pradhvan", "fields": {"name": "Pradhvan Bisht ", "score": 0.18837538892599412, "rank": 183, "trend": -1, "last_active_at": "2018-03-04T17:04:18Z", "pos_in": 1, "weighted_pos_in": 0.18837538892599412, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10155196677366249, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PrajwalM2212", "fields": {"name": "PRAJWAL M", "score": 0.20044316594365302, "rank": 180, "trend": -1, "last_active_at": "2018-09-16T17:22:06Z", "pos_in": 1, "weighted_pos_in": 0.10044316594365302, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10165138946932435, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RJ722", "fields": {"name": "Rahul Jha", "score": 5.123007438894791, "rank": 39, "trend": 0, "last_active_at": "2018-08-14T09:55:13Z", "pos_in": 8, "weighted_pos_in": 2.9730074388947907, "pos_out": 63, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14220687942156832, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Rahmeen14", "fields": {"name": "Rahmeen Habib", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-12-18T10:49:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RaiVaibhav", "fields": {"name": "Vaibhav Rai", "score": 15.767201976141052, "rank": 11, "trend": -1, "last_active_at": "2018-11-04T18:41:55Z", "pos_in": 30, "weighted_pos_in": 13.105531239203767, "pos_out": 96, "neg_in": 7, "weighted_neg_in": 3.038329263062721, "neg_out": 7, "offset": 0.5, "weight_factor": 0.22990111776337122, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "Raman1121", "fields": {"name": "Raman Dutt", "score": 0.18225292242295388, "rank": 186, "trend": -1, "last_active_at": "2017-09-02T18:12:11Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295388, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10150152565903625, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RohanVB", "fields": {"name": "Rohan", "score": 4.547077577045693, "rank": 43, "trend": 0, "last_active_at": "2017-04-28T16:22:19Z", "pos_in": 16, "weighted_pos_in": 3.9470775770456923, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13746197078649722, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "S2606", "fields": {"name": "Shagun Khemka", "score": 0.428427205100956, "rank": 132, "trend": -1, "last_active_at": "2017-07-20T07:39:17Z", "pos_in": 3, "weighted_pos_in": 0.378427205100956, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1035296797051922, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SanketDG", "fields": {"name": "Sanket Dasgupta", "score": 15.109723698193388, "rank": 12, "trend": 0, "last_active_at": "2018-02-27T08:55:23Z", "pos_in": 40, "weighted_pos_in": 13.159723698193389, "pos_out": 39, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.22448435686059492, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Sanny26", "fields": {"name": "Santhoshini ", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-02-10T16:27:28Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SerekKiri", "fields": {"name": "", "score": 1.4, "rank": 86, "trend": -1, "last_active_at": "2018-11-22T16:46:11Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11153416853186209, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shade5", "fields": {"name": "George Joseph", "score": 1.1057385759829967, "rank": 101, "trend": -1, "last_active_at": "2017-03-25T17:05:36Z", "pos_in": 2, "weighted_pos_in": 1.1057385759829967, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10910983934826363, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ShivamSinghania", "fields": {"name": "Shivam Singhania", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-01-18T22:12:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shruti9520", "fields": {"name": "Shruti Singh", "score": 0.6628586609989368, "rank": 115, "trend": -1, "last_active_at": "2017-02-05T19:51:42Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10546108822054727, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SiddharthKumar02", "fields": {"name": "Siddharth Kumar", "score": 0.21285866099893672, "rank": 174, "trend": -1, "last_active_at": "2017-01-22T12:51:10Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10175367690673445, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Siddhartha1234", "fields": {"name": "Siddhartha Mishra", "score": 1.573379383634431, "rank": 82, "trend": -1, "last_active_at": "2017-04-13T15:21:34Z", "pos_in": 4, "weighted_pos_in": 1.4233793836344308, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11296258783956915, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Stropek", "fields": {"name": "Przemys\u0142aw Curzytek", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-09-05T12:13:36Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SubbulakshmiRS", "fields": {"name": "R S Subbulakshmi", "score": 0.17364505844845868, "rank": 188, "trend": -1, "last_active_at": "2018-06-15T15:55:05Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10143060812062112, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Techievena", "fields": {"name": "Abinash Senapati", "score": 5.320563230605731, "rank": 37, "trend": 0, "last_active_at": "2017-12-07T11:28:19Z", "pos_in": 21, "weighted_pos_in": 4.370563230605731, "pos_out": 19, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14383448070445362, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "The-Compiler", "fields": {"name": "Florian Bruhin", "score": 0.15547290116896886, "rank": 193, "trend": -1, "last_active_at": "2018-05-13T15:15:13Z", "pos_in": 1, "weighted_pos_in": 0.15547290116896886, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10128089331730031, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Udayan12167", "fields": {"name": "Udayan Tandon", "score": 14.813496280552588, "rank": 13, "trend": 0, "last_active_at": "2017-07-19T19:08:09Z", "pos_in": 33, "weighted_pos_in": 14.817321997874586, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.22204383046143256, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "UnimaginaryUnit", "fields": {"name": "Alexander Voronkov", "score": 0.10860786397449518, "rank": 203, "trend": -1, "last_active_at": "2017-12-03T07:10:37Z", "pos_in": 1, "weighted_pos_in": 0.10860786397449518, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10089478671926241, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Utkarsh1308", "fields": {"name": "Utkarsh Sharma", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2018-10-06T03:07:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vamshi99", "fields": {"name": "Vamshi Krishna", "score": 5.425398232898823, "rank": 36, "trend": 0, "last_active_at": "2018-08-12T07:18:21Z", "pos_in": 14, "weighted_pos_in": 4.663655406118802, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.13825717321997855, "neg_out": 2, "offset": 0.0, "weight_factor": 0.14469818397908696, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vedarth", "fields": {"name": "Vedarth Sharma", "score": 0.9273113708820407, "rank": 106, "trend": -1, "last_active_at": "2017-12-10T17:48:03Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10763983259518967, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Warewolf96", "fields": {"name": "Parth Verma", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-02-15T03:42:58Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Yashwanthv21", "fields": {"name": "Yashwanth Reddy", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-03-04T17:26:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Zimmerman", "fields": {"name": "Martin Zimmerman", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-05-10T10:07:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aabhaas-vaish", "fields": {"name": "Aabhaas Vaish", "score": 1.364135156181499, "rank": 87, "trend": -1, "last_active_at": "2018-03-01T07:59:09Z", "pos_in": 2, "weighted_pos_in": 1.064135156181499, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11123868913688244, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aalind0", "fields": {"name": "Aalind Singh", "score": 0.26285866099893673, "rank": 155, "trend": -1, "last_active_at": "2017-02-08T17:34:24Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10216561149715811, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashraybhandar1", "fields": {"name": null, "score": 2.8158873538788507, "rank": 59, "trend": 0, "last_active_at": "2018-04-02T14:07:50Z", "pos_in": 7, "weighted_pos_in": 2.765887353878851, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12319922807598416, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashutoshrathi", "fields": {"name": "Aashutosh Rathi", "score": 2.5315621679064773, "rank": 65, "trend": 0, "last_active_at": "2018-08-10T13:30:01Z", "pos_in": 8, "weighted_pos_in": 1.7315621679064774, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12085676049537103, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "abeerzz", "fields": {"name": null, "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-09-08T03:00:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "abhishalya", "fields": {"name": "Abhinav Kaushlya", "score": 0.28772264379514767, "rank": 150, "trend": -1, "last_active_at": "2018-11-14T07:21:54Z", "pos_in": 3, "weighted_pos_in": 0.43889471620052495, "pos_out": 0, "neg_in": 1, "weighted_neg_in": 0.1511720724053773, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10237045818854726, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "abhsag24", "fields": {"name": "Abhay Raizada", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-01-29T06:17:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "acashmkj", "fields": {"name": "acash mkj", "score": 2.3260892667375135, "rank": 68, "trend": -1, "last_active_at": "2017-11-15T17:54:51Z", "pos_in": 3, "weighted_pos_in": 2.0760892667375135, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11916393258764713, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adhikasp", "fields": {"name": "Adhika Setya Pramudita", "score": 8.034112646121137, "rank": 24, "trend": 0, "last_active_at": "2018-07-23T04:23:31Z", "pos_in": 23, "weighted_pos_in": 5.80913921360254, "pos_out": 50, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16619057804594686, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adi23arora", "fields": {"name": "Aditya Arora", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-12-29T18:22:08Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aditya81070", "fields": {"name": "Aditya Agarwal", "score": 0.10077927804385615, "rank": 208, "trend": -1, "last_active_at": "2018-09-26T07:31:28Z", "pos_in": 1, "weighted_pos_in": 0.10077927804385615, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10083028941248373, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adrienverge", "fields": {"name": "Adrien Verg\u00e9", "score": 1.0, "rank": 104, "trend": -1, "last_active_at": "2017-02-06T20:17:25Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10823869180847293, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adtac", "fields": {"name": "Adhityaa Chandrasekar", "score": 5.435349951468151, "rank": 35, "trend": 0, "last_active_at": "2018-03-24T16:32:16Z", "pos_in": 16, "weighted_pos_in": 4.785349951468151, "pos_out": 13, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1447801731213443, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "akshatkarani", "fields": {"name": "Akshat Karani", "score": 1.2583849151113642, "rank": 93, "trend": -1, "last_active_at": "2018-11-09T11:48:22Z", "pos_in": 3, "weighted_pos_in": 1.2083849151113641, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11036744549203388, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alisianoi", "fields": {"name": "Alexander Lisianoi", "score": 1.2738575982996783, "rank": 92, "trend": -1, "last_active_at": "2018-04-26T10:02:38Z", "pos_in": 7, "weighted_pos_in": 2.173857598299678, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11049492016027254, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alphadose", "fields": {"name": "Anish Mukherjee", "score": 2.1046227417640813, "rank": 74, "trend": -1, "last_active_at": "2018-03-04T18:18:37Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11733933814249754, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amalrajan", "fields": {"name": "Amal Rajan", "score": 0.25286928799149844, "rank": 160, "trend": -1, "last_active_at": "2018-11-05T13:40:33Z", "pos_in": 1, "weighted_pos_in": 0.1028692879914984, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10208331213158994, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amitsin6h", "fields": {"name": "Amit singh", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-11-15T15:53:07Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ananyaarun", "fields": {"name": "Ananya Arun", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2018-06-18T13:40:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anctartica", "fields": {"name": "", "score": 5.705951115834216, "rank": 34, "trend": 0, "last_active_at": "2018-08-13T15:35:19Z", "pos_in": 13, "weighted_pos_in": 5.411689691817212, "pos_out": 4, "neg_in": 1, "weighted_neg_in": 0.10573857598299678, "neg_out": 1, "offset": 0.0, "weight_factor": 0.14700957271757023, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "andrewda", "fields": {"name": "Andrew Dassonville", "score": 17.29651988705404, "rank": 7, "trend": 0, "last_active_at": "2018-11-07T09:12:15Z", "pos_in": 35, "weighted_pos_in": 15.296519887054036, "pos_out": 50, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.24250069670856095, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "ankurg22", "fields": {"name": "Ankur Gupta", "score": 0.24373007438894745, "rank": 162, "trend": -1, "last_active_at": "2018-02-01T15:18:15Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10200801696734672, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anshumanv", "fields": {"name": "Anshuman Verma", "score": 0.2239107332624866, "rank": 168, "trend": -1, "last_active_at": "2018-03-19T12:25:28Z", "pos_in": 1, "weighted_pos_in": 0.12391073326248658, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10184473152395881, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aptrishu", "fields": {"name": "Rishav Kumar", "score": 4.235653560042503, "rank": 47, "trend": 0, "last_active_at": "2018-05-14T21:16:42Z", "pos_in": 11, "weighted_pos_in": 2.885653560042503, "pos_out": 27, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13489624428865132, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aquatiko", "fields": {"name": "Rohit Kumar", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2018-10-30T17:21:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arjunsinghy96", "fields": {"name": "Arjun Singh Yadav", "score": 4.036928799149839, "rank": 49, "trend": 0, "last_active_at": "2017-04-28T06:55:34Z", "pos_in": 7, "weighted_pos_in": 3.686928799149839, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13325901222894418, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arnab1896", "fields": {"name": null, "score": 0.6147715196599357, "rank": 117, "trend": -1, "last_active_at": "2017-02-24T10:21:12Z", "pos_in": 2, "weighted_pos_in": 0.31477151965993566, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10506491308310477, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arpit7714", "fields": {"name": "ARPIT VARSHNEY", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-02-18T16:04:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arrayslayer", "fields": {"name": "Aditya Lahiri", "score": 0.26285866099893673, "rank": 155, "trend": -1, "last_active_at": "2017-06-27T11:07:04Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10216561149715811, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arush0311", "fields": {"name": "Arush Goyal", "score": 2.241126461211477, "rank": 71, "trend": -1, "last_active_at": "2017-02-12T19:30:48Z", "pos_in": 3, "weighted_pos_in": 2.141126461211477, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11846395021773488, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ashwini0529", "fields": {"name": "Ashwini Purohit", "score": 0.4138150903294362, "rank": 138, "trend": -1, "last_active_at": "2018-10-29T06:54:37Z", "pos_in": 2, "weighted_pos_in": 0.3138150903294362, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1034092949949196, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "atb00ker", "fields": {"name": "Ajay Tripathi", "score": 0.6104538062998985, "rank": 118, "trend": -1, "last_active_at": "2018-11-13T15:27:14Z", "pos_in": 1, "weighted_pos_in": 0.3104538062998985, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1050293407734141, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "attilanagy", "fields": {"name": "Attila Nagy", "score": 0.2841657810839528, "rank": 151, "trend": -1, "last_active_at": "2018-05-07T19:26:59Z", "pos_in": 2, "weighted_pos_in": 0.2841657810839528, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10234115429286468, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "atultherajput", "fields": {"name": "Atul Krishna", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-09-26T13:54:51Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "avirlrma", "fields": {"name": "Aviral Verma", "score": 0.18225292242295385, "rank": 187, "trend": -1, "last_active_at": "2017-12-14T11:27:06Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295385, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10150152565903625, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayan-b", "fields": {"name": "Ayan Banerjee", "score": 2.5501671934578787, "rank": 64, "trend": 0, "last_active_at": "2018-11-08T10:56:39Z", "pos_in": 6, "weighted_pos_in": 2.3501671934578785, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12101004156697778, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush1999", "fields": {"name": "Ayush Shridhar", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-08-03T10:15:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush9398", "fields": {"name": "Ayush Mittal", "score": 0.4972901168969174, "rank": 127, "trend": -1, "last_active_at": "2018-02-15T08:16:08Z", "pos_in": 3, "weighted_pos_in": 0.520935175345376, "pos_out": 3, "neg_in": 1, "weighted_neg_in": 0.17364505844845868, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10409702001251317, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayushin78", "fields": {"name": "Ayushi Negi", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-02-24T06:18:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bekicot", "fields": {"name": "Yana Agun Siswanto", "score": 0.2554729011689688, "rank": 158, "trend": -1, "last_active_at": "2018-06-23T05:39:31Z", "pos_in": 2, "weighted_pos_in": 1.1554729011689688, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1021047624981476, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bharatpurohit97", "fields": {"name": "Bharat purohit", "score": 0.41928530475613757, "rank": 137, "trend": -1, "last_active_at": "2018-11-25T16:59:41Z", "pos_in": 4, "weighted_pos_in": 0.41928530475613757, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10345436240570746, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bhavishyagopesh", "fields": {"name": "BHAVISHYA", "score": 0.5437300743889475, "rank": 122, "trend": -1, "last_active_at": "2017-12-29T11:09:57Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1044796245098886, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bhawesh96", "fields": {"name": "Bhawesh Bhansali", "score": 0.3601699127912892, "rank": 144, "trend": -1, "last_active_at": "2018-11-23T06:38:03Z", "pos_in": 1, "weighted_pos_in": 0.11016991279128921, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.102967328910172, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "biscuitsnake", "fields": {"name": "biscuitsnake", "score": 0.15069075451647157, "rank": 197, "trend": -1, "last_active_at": "2018-05-01T03:13:16Z", "pos_in": 1, "weighted_pos_in": 0.15069075451647157, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10124149468484746, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bkhanale", "fields": {"name": "Bhushan Khanale", "score": 0.42136040857842366, "rank": 135, "trend": -1, "last_active_at": "2018-10-29T14:03:35Z", "pos_in": 3, "weighted_pos_in": 0.42136040857842366, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10347145854656986, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "blazeu", "fields": {"name": "Surya Widi", "score": 31.247037310615752, "rank": 3, "trend": 0, "last_active_at": "2018-11-20T12:37:00Z", "pos_in": 87, "weighted_pos_in": 30.297037310615753, "pos_out": 39, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 1.0, "weight_factor": 0.3574347103300175, "modified_comments_after_meta_review": 2}}, {"model": "meta_review.participant", "pk": "blossomica", "fields": {"name": "Gloria Dwomoh", "score": 1.1137559273235373, "rank": 100, "trend": -1, "last_active_at": "2018-10-21T15:54:30Z", "pos_in": 2, "weighted_pos_in": 1.1137559273235373, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10917589183507859, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cRAN-cg", "fields": {"name": "Chiranjeev Gupta", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-06-12T07:59:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chetasr", "fields": {"name": "Chetas Murali", "score": 0.10573857598299678, "rank": 204, "trend": -1, "last_active_at": "2018-02-23T11:18:05Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1008711475397907, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chhabrabhishek", "fields": {"name": "Abhishek Chhabra", "score": 0.15382571732199785, "rank": 195, "trend": -1, "last_active_at": "2018-06-23T06:56:10Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10126732267723322, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "clarammdantas", "fields": {"name": "Clara Moraes Dantas", "score": 0.20956429330499465, "rank": 175, "trend": -1, "last_active_at": "2018-01-17T12:48:39Z", "pos_in": 1, "weighted_pos_in": 0.10956429330499463, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10172653562660028, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cornu-ammonis", "fields": {"name": "Andrew Jones", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-10-20T21:15:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "corona10", "fields": {"name": "Dong-hee Na", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-09-13T14:17:58Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cristianossd", "fields": {"name": "Cristiano Santos", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-10-19T23:32:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cypher-naman", "fields": {"name": "Naman Sharma", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-07-25T12:56:23Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "d3db0t", "fields": {"name": "Shady Tantawy", "score": 0.5092986184909668, "rank": 125, "trend": -1, "last_active_at": "2017-03-17T07:27:27Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10419595435622811, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damian1996", "fields": {"name": "Damian Stachura", "score": 0.39373007438894747, "rank": 140, "trend": -1, "last_active_at": "2018-04-17T22:34:07Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10324382073861765, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damngamerz", "fields": {"name": "Saurav Singh", "score": 7.708395324123271, "rank": 26, "trend": 0, "last_active_at": "2018-06-08T18:36:00Z", "pos_in": 12, "weighted_pos_in": 5.208395324123271, "pos_out": 50, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1635070934133253, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "danes44", "fields": {"name": "Frume44", "score": 0.2561636556854405, "rank": 157, "trend": -1, "last_active_at": "2017-12-25T03:02:06Z", "pos_in": 1, "weighted_pos_in": 0.20616365568544046, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10211045341172412, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "devshiva619", "fields": {"name": "Devesh Verma", "score": 0.15000000000000002, "rank": 198, "trend": -1, "last_active_at": "2018-04-30T09:59:22Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10123580377127095, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dhishan", "fields": {"name": "Dhishan", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-01-06T22:08:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "diveshuttam", "fields": {"name": "Divesh Uttamchandani", "score": 0.4523379383634426, "rank": 130, "trend": -1, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 2, "weighted_pos_in": 0.3023379383634426, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10372667286745643, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "djokester", "fields": {"name": "Samriddhi Sinha", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-04-11T22:55:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dob9601", "fields": {"name": "Daniel O'Brien", "score": 1.9791710945802308, "rank": 78, "trend": -1, "last_active_at": "2018-01-06T15:55:07Z", "pos_in": 5, "weighted_pos_in": 1.8791710945802307, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11630578068448452, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dorothykiz1", "fields": {"name": "Dorothy Kabarozi", "score": 0.18225292242295388, "rank": 186, "trend": -1, "last_active_at": "2018-05-30T10:29:50Z", "pos_in": 2, "weighted_pos_in": 0.36450584484590776, "pos_out": 0, "neg_in": 1, "weighted_neg_in": 0.18225292242295388, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10150152565903625, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dracarys09", "fields": {"name": "Abhijeet Dubey", "score": 1.3006907545164714, "rank": 89, "trend": -1, "last_active_at": "2017-02-15T10:40:45Z", "pos_in": 3, "weighted_pos_in": 1.2506907545164714, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11071599026459131, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "etotientz", "fields": {"name": "Satrap Rathore", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-02-02T14:26:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "fatma-mohamed", "fields": {"name": "Fatma Mohamed", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-05-23T18:45:13Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "firesans", "fields": {"name": "Sanjana Gunna", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-02-28T02:00:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gabru-md", "fields": {"name": "Manish Devgan", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-11-14T05:24:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gaocegege", "fields": {"name": "Ce Gao", "score": 2.228895961472242, "rank": 72, "trend": -1, "last_active_at": "2018-08-06T11:33:29Z", "pos_in": 7, "weighted_pos_in": 1.8788959614722418, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11836318689971972, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gatesn", "fields": {"name": "Nicholas Gates", "score": 0.5619022316684372, "rank": 120, "trend": -1, "last_active_at": "2018-05-18T08:07:47Z", "pos_in": 3, "weighted_pos_in": 0.4119022316684372, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1046293393132094, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "girishramnani", "fields": {"name": "girish ramnani", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-05-03T17:41:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gkrishnan724", "fields": {"name": "GopalaKrishnan P", "score": 2.6393198724760856, "rank": 63, "trend": 0, "last_active_at": "2017-06-26T15:23:19Z", "pos_in": 8, "weighted_pos_in": 2.4393198724760854, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1217445430133085, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gokberksahin", "fields": {"name": "G\u00f6kberk \u015eahin", "score": 0.1286928799149839, "rank": 201, "trend": -1, "last_active_at": "2017-12-27T19:27:08Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10106026097556438, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gopalgoel19", "fields": {"name": "Gopal Goel", "score": 0.35000000000000003, "rank": 145, "trend": -1, "last_active_at": "2018-05-13T17:04:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10288354213296552, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "guilherme-p", "fields": {"name": "Guilherme Peixoto", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-03-14T19:24:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gureks", "fields": {"name": "Gurek Singh", "score": 1.2214665249734318, "rank": 95, "trend": -1, "last_active_at": "2017-11-12T12:23:52Z", "pos_in": 2, "weighted_pos_in": 1.2214665249734318, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1100632862536225, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gurpreetsingh00885", "fields": {"name": null, "score": 0.25, "rank": 161, "trend": -1, "last_active_at": "2017-09-26T18:48:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10205967295211824, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gutsytechster", "fields": {"name": "Prashant Sharma", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-07-30T11:22:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "haeungun", "fields": {"name": "Haeun Kim", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-09-13T14:17:58Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshhx17", "fields": {"name": "Harsh Kumar Bhartiya", "score": 0.25, "rank": 161, "trend": -1, "last_active_at": "2018-06-22T06:05:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10205967295211824, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshit890", "fields": {"name": null, "score": 0.9273113708820407, "rank": 106, "trend": -1, "last_active_at": "2017-01-16T20:38:31Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10763983259518967, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "haxzie", "fields": {"name": "Musthaq Ahamad", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2018-10-07T19:07:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "hemangsk", "fields": {"name": "Hemang Kumar", "score": 11.372267743993602, "rank": 17, "trend": 0, "last_active_at": "2018-08-23T01:27:16Z", "pos_in": 33, "weighted_pos_in": 8.572267743993601, "pos_out": 56, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.19369260910620084, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "himanshu1603", "fields": {"name": "", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-02-22T18:31:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "hritikhks", "fields": {"name": null, "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-10-12T12:37:09Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsavru", "fields": {"name": "Urvashi Verma", "score": 0.2605207226354941, "rank": 156, "trend": -1, "last_active_at": "2017-07-23T17:27:24Z", "pos_in": 2, "weighted_pos_in": 0.2105207226354941, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1021463499435145, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsraham", "fields": {"name": "Maharshi Mishra", "score": 0.3162592986184909, "rank": 148, "trend": -1, "last_active_at": "2017-11-18T19:16:03Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10260556289288156, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "impmihai", "fields": {"name": "Mihai Ionut", "score": 2.0, "rank": 77, "trend": -1, "last_active_at": "2017-04-29T21:12:36Z", "pos_in": 2, "weighted_pos_in": 2.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11647738361694583, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "incorrectusername", "fields": {"name": "Yogesh Gupta", "score": 0.4, "rank": 139, "trend": -1, "last_active_at": "2017-08-13T02:03:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10329547672338917, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "indmind", "fields": {"name": "Indmind", "score": 0.3750265674814016, "rank": 142, "trend": -1, "last_active_at": "2017-12-07T10:17:48Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10308972830946875, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ishanSrt", "fields": {"name": "Ishan Srivastava", "score": 7.7496285681550585, "rank": 25, "trend": 0, "last_active_at": "2018-11-08T20:31:47Z", "pos_in": 31, "weighted_pos_in": 7.4648251675174375, "pos_out": 10, "neg_in": 2, "weighted_neg_in": 0.4151965993623793, "neg_out": 1, "offset": 0.0, "weight_factor": 0.16384680140316676, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jack17529", "fields": {"name": "JACK_1729", "score": 0.35000000000000003, "rank": 145, "trend": -1, "last_active_at": "2017-03-26T17:53:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10288354213296552, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jackthepirate6", "fields": {"name": "Ajinkya Narnaware", "score": 1.9773113708820407, "rank": 79, "trend": -1, "last_active_at": "2018-05-12T15:32:01Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11629045899408622, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jayvdb", "fields": {"name": "John Vandenberg", "score": 108.74064413653798, "rank": 1, "trend": 0, "last_active_at": "2018-12-03T02:42:31Z", "pos_in": 501, "weighted_pos_in": 99.71439398360938, "pos_out": 222, "neg_in": 5, "weighted_neg_in": 4.97374984707137, "neg_out": 17, "offset": 0.5, "weight_factor": 1.0, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "jckw", "fields": {"name": "Jack W", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-03-23T17:08:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jendrikseipp", "fields": {"name": "Jendrik Seipp", "score": 2.332093517534533, "rank": 67, "trend": -1, "last_active_at": "2017-08-28T07:45:46Z", "pos_in": 15, "weighted_pos_in": 2.332093517534533, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11921339975950454, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "joenash", "fields": {"name": "Joe Nash", "score": 0.9008933088528792, "rank": 107, "trend": -1, "last_active_at": "2018-09-29T03:55:46Z", "pos_in": 5, "weighted_pos_in": 0.9008933088528792, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10742218232395429, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jsecrest", "fields": {"name": "Jason Secrest", "score": 0.21381509032943616, "rank": 173, "trend": -1, "last_active_at": "2018-06-01T04:32:02Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10176155663322503, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "k4ni5h", "fields": {"name": "Kanish", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-12-22T10:09:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kartikeys98", "fields": {"name": "Kartikey", "score": 0.21625929861849089, "rank": 172, "trend": -1, "last_active_at": "2017-10-25T06:31:30Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10178169371203426, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kaustubhhiware", "fields": {"name": "Kaustubh Hiware", "score": 0.765621679064823, "rank": 111, "trend": -1, "last_active_at": "2017-05-09T10:22:07Z", "pos_in": 3, "weighted_pos_in": 0.615621679064823, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10630772105570065, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khanchi97", "fields": {"name": "Sushil khanchi", "score": 1.2997874601487758, "rank": 90, "trend": -1, "last_active_at": "2018-02-12T20:28:41Z", "pos_in": 8, "weighted_pos_in": 1.1997874601487757, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11070854830068354, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khushmeeet", "fields": {"name": "Khushmeet Singh", "score": 0.7428267800212515, "rank": 113, "trend": -2, "last_active_at": "2017-04-12T07:41:07Z", "pos_in": 3, "weighted_pos_in": 0.7428267800212515, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1061199209076754, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kriti21", "fields": {"name": "Kriti Rohilla", "score": 4.823273113708819, "rank": 42, "trend": 0, "last_active_at": "2018-08-11T15:59:05Z", "pos_in": 13, "weighted_pos_in": 4.323273113708819, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13973746069194048, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksangam68", "fields": {"name": "Sangam Kumar", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-02-19T15:10:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksdme", "fields": {"name": "Kilari Teja", "score": 9.380605738575984, "rank": 22, "trend": 0, "last_active_at": "2018-10-23T01:17:24Z", "pos_in": 12, "weighted_pos_in": 7.4306057385759825, "pos_out": 35, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.17728391965691997, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lalitmee", "fields": {"name": "Lalit Kumar", "score": 0.22364505844845867, "rank": 169, "trend": -1, "last_active_at": "2018-04-11T21:31:49Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10184254271104477, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "li-boxuan", "fields": {"name": "Boxuan Li", "score": 25.528545276694306, "rank": 4, "trend": 0, "last_active_at": "2018-11-28T00:16:21Z", "pos_in": 54, "weighted_pos_in": 20.5785452766943, "pos_out": 95, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.31032181685333127, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lilithxxx", "fields": {"name": "Rishav Chakraborty", "score": 0.13730074388947908, "rank": 200, "trend": -1, "last_active_at": "2018-05-10T12:39:54Z", "pos_in": 1, "weighted_pos_in": 0.13730074388947908, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1011311785139795, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lshobith", "fields": {"name": "sai shobith", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-03-10T14:42:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lucas03", "fields": {"name": "Lukas Vojt", "score": 0.22077577045696029, "rank": 171, "trend": -1, "last_active_at": "2017-06-18T15:25:10Z", "pos_in": 1, "weighted_pos_in": 0.1707757704569603, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10181890353157307, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mach64", "fields": {"name": "Krut Patel", "score": 0.0613256081464395, "rank": 210, "trend": -1, "last_active_at": "2018-10-30T17:21:26Z", "pos_in": 5, "weighted_pos_in": 0.5613256081464395, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.1005052427854857, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "madhukar01", "fields": {"name": "Madhukar S Holla", "score": 3.424601487778958, "rank": 52, "trend": 0, "last_active_at": "2017-04-10T16:11:59Z", "pos_in": 6, "weighted_pos_in": 3.3746014877789583, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12821423622464867, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "manankalra", "fields": {"name": "Manan Kalra", "score": 1.197980871413389, "rank": 96, "trend": -1, "last_active_at": "2018-10-03T05:13:03Z", "pos_in": 4, "weighted_pos_in": 0.597980871413389, "pos_out": 32, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10986979519202074, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mani87", "fields": {"name": "Mani Kumar", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-08-30T03:25:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mansiagarwal451", "fields": {"name": "Mansi Agarwal", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-10-16T20:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "margobra8", "fields": {"name": "Marcos G\u00f3mez", "score": 1.9773113708820407, "rank": 79, "trend": -1, "last_active_at": "2018-01-15T17:06:39Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11629045899408622, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "marian-ald", "fields": {"name": "", "score": 0.2714665249734317, "rank": 153, "trend": -1, "last_active_at": "2016-12-04T17:59:51Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10223652903557323, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "maweki", "fields": {"name": "Mario Wenzel", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-02-07T18:27:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "meetmangukiya", "fields": {"name": "Meet Mangukiya", "score": 15.919234856535589, "rank": 10, "trend": 1, "last_active_at": "2018-07-25T23:03:20Z", "pos_in": 41, "weighted_pos_in": 11.800212539851206, "pos_out": 88, "neg_in": 4, "weighted_neg_in": 1.0809776833156182, "neg_out": 4, "offset": 0.0, "weight_factor": 0.22703432390545977, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mohit2872", "fields": {"name": "Mohit Gupta", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-11-14T09:48:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mohitkyadav", "fields": {"name": "Mohit Kumar Yadav", "score": 0.8475557917109453, "rank": 109, "trend": -1, "last_active_at": "2017-12-15T13:06:08Z", "pos_in": 4, "weighted_pos_in": 1.3975557917109453, "pos_out": 9, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10698275095839274, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "monsij", "fields": {"name": "Monsij Biswal", "score": 0.4547821466524974, "rank": 129, "trend": -1, "last_active_at": "2018-05-10T16:23:03Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10374680994626566, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mridubhatnagar", "fields": {"name": "Mridu Bhatnagar", "score": 4.983315621679066, "rank": 41, "trend": 0, "last_active_at": "2017-12-14T10:46:03Z", "pos_in": 10, "weighted_pos_in": 4.483315621679066, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14105600159136242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mrtes", "fields": {"name": null, "score": 2.742401700318808, "rank": 60, "trend": 0, "last_active_at": "2017-11-12T12:33:42Z", "pos_in": 6, "weighted_pos_in": 2.742401700318808, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12259380242395876, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mvinoba", "fields": {"name": "Vin\u00edcius Figueiredo", "score": 0.24373007438894745, "rank": 162, "trend": -1, "last_active_at": "2018-02-06T06:52:29Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10200801696734672, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myfrom", "fields": {"name": "Wiktor Olejniczak", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-12-14T15:45:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myint", "fields": {"name": "Steven Myint", "score": 0.21625929861849089, "rank": 172, "trend": -1, "last_active_at": "2017-03-25T11:58:13Z", "pos_in": 2, "weighted_pos_in": 0.21625929861849089, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10178169371203426, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nalinbhardwaj", "fields": {"name": "Nalin Bhardwaj", "score": 2.7226886291179593, "rank": 61, "trend": 0, "last_active_at": "2018-09-24T15:37:17Z", "pos_in": 5, "weighted_pos_in": 2.372688629117959, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12243139250573648, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namantw", "fields": {"name": "Naman Tiwari", "score": 0.20095642933049948, "rank": 179, "trend": -1, "last_active_at": "2018-01-07T17:19:37Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10165561808818516, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namanyadav12", "fields": {"name": "Naman Yadav", "score": 0.24017003188097746, "rank": 163, "trend": -1, "last_active_at": "2017-01-16T17:45:30Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1019786868742985, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "naveentata", "fields": {"name": "Naveen Tata", "score": 0.10382571732199786, "rank": 205, "trend": -1, "last_active_at": "2017-11-18T13:39:12Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10085538808680958, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nealkarpe", "fields": {"name": "Neal Karpe", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-11-12T09:50:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "neelanshsahai", "fields": {"name": "Neelansh Sahai", "score": 0.8163124335812947, "rank": 110, "trend": -1, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 4, "weighted_pos_in": 0.7663124335812946, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10672534655970081, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nemaniarjun", "fields": {"name": "Arjun Nemani", "score": 3.230765143464399, "rank": 53, "trend": 0, "last_active_at": "2018-05-10T20:29:45Z", "pos_in": 11, "weighted_pos_in": 3.080765143464399, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12661727832255998, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "netman92", "fields": {"name": "Stanislav Komanec", "score": 0.31381509032943616, "rank": 149, "trend": -1, "last_active_at": "2017-05-29T08:39:39Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10258542581407232, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "newbazz", "fields": {"name": null, "score": 7.5072263549415466, "rank": 27, "trend": 0, "last_active_at": "2018-05-10T12:40:12Z", "pos_in": 23, "weighted_pos_in": 4.907226354941546, "pos_out": 44, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.1618497242748089, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nguptaa", "fields": {"name": "Nikhil Gupta", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-02-16T14:44:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikhil-seth", "fields": {"name": "Nikhil Seth", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-12-08T13:18:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikita1412", "fields": {"name": null, "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-03-14T08:25:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nitinkgp23", "fields": {"name": "Nitin Choudhary", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-01-27T23:54:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityanandagohain", "fields": {"name": "Nityananda Gohain", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-04-28T15:40:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityeshaga", "fields": {"name": "Nityesh Agarwal", "score": 1.9207757704569604, "rank": 80, "trend": -1, "last_active_at": "2018-04-14T17:36:15Z", "pos_in": 5, "weighted_pos_in": 1.4707757704569602, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.115824679605977, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nkprince007", "fields": {"name": "Naveen Kumar Sangi", "score": 5.782303242128645, "rank": 33, "trend": 0, "last_active_at": "2018-08-24T09:41:07Z", "pos_in": 14, "weighted_pos_in": 5.682303242128645, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14763861435503164, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nvzard", "fields": {"name": "Nitanshu", "score": 6.302873043523538, "rank": 31, "trend": 1, "last_active_at": "2018-11-03T16:41:57Z", "pos_in": 6, "weighted_pos_in": 2.103687924053914, "pos_out": 99, "neg_in": 2, "weighted_neg_in": 1.150814880530375, "neg_out": 2, "offset": 0.0, "weight_factor": 0.14780808260928566, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "paavininanda", "fields": {"name": "Paavini Nanda", "score": 0.24373007438894745, "rank": 162, "trend": -1, "last_active_at": "2018-01-23T12:07:14Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10200801696734672, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "palash25", "fields": {"name": "Palash Nigam", "score": 10.533508601313745, "rank": 20, "trend": 0, "last_active_at": "2018-11-26T17:02:39Z", "pos_in": 26, "weighted_pos_in": 7.683508601313746, "pos_out": 49, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.18678233102812253, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pareksha", "fields": {"name": "Pareksha Manchanda", "score": 8.207607154157325, "rank": 23, "trend": 0, "last_active_at": "2018-11-08T07:42:53Z", "pos_in": 15, "weighted_pos_in": 6.257607154157325, "pos_out": 39, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16761994582811962, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parimatrix", "fields": {"name": "Parikansh Ahluwalia", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-12-15T11:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parthboricha", "fields": {"name": null, "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-11-01T17:22:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prachi1210", "fields": {"name": "Prachi Manchanda", "score": 0.15155001112871574, "rank": 196, "trend": -1, "last_active_at": "2017-06-21T12:11:03Z", "pos_in": 1, "weighted_pos_in": 0.15155001112871574, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10124857383526013, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pradeepgangwar", "fields": {"name": "Pradeep Gangwar", "score": 2.285653560042508, "rank": 70, "trend": -1, "last_active_at": "2018-01-15T17:40:31Z", "pos_in": 4, "weighted_pos_in": 2.1856535600425078, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11883079526212917, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prashant0598", "fields": {"name": "Prashant Nigam", "score": 1.1847502656748123, "rank": 97, "trend": -1, "last_active_at": "2017-11-30T07:03:00Z", "pos_in": 4, "weighted_pos_in": 0.7347502656748123, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10976079230890119, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pratyushprakash", "fields": {"name": "Pratyush Prakash", "score": 5.201700318809775, "rank": 38, "trend": 0, "last_active_at": "2017-04-24T19:26:51Z", "pos_in": 14, "weighted_pos_in": 4.501700318809775, "pos_out": 14, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14285520580670905, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "priyanshsaxena", "fields": {"name": "Priyansh Saxena", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-01-28T10:54:01Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prnvdixit", "fields": {"name": "Pranav Dixit", "score": 6.58639744952178, "rank": 30, "trend": 0, "last_active_at": "2018-10-14T17:35:11Z", "pos_in": 24, "weighted_pos_in": 5.48639744952178, "pos_out": 22, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.154263298714722, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "proishan11", "fields": {"name": "Ishan Singh", "score": 0.5401700318809775, "rank": 123, "trend": -1, "last_active_at": "2017-03-24T11:54:16Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10445029441684037, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pushkalkatara", "fields": {"name": "Pushkal Katara", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-02-12T19:39:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raduklb", "fields": {"name": "Radu Capalb", "score": 1.1506907545164715, "rank": 98, "trend": -1, "last_active_at": "2018-07-19T05:08:35Z", "pos_in": 2, "weighted_pos_in": 1.1506907545164715, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10948018649332038, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raghavmittal101", "fields": {"name": "Raghav Mittal", "score": 0.21285866099893672, "rank": 174, "trend": -1, "last_active_at": "2017-07-05T15:51:33Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10175367690673445, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rahulkrishnan98", "fields": {"name": "Rahul Krishnan", "score": 0.2691285866099893, "rank": 154, "trend": -1, "last_active_at": "2017-02-08T10:22:43Z", "pos_in": 1, "weighted_pos_in": 0.11912858660998926, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10221726748192962, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raj-maurya", "fields": {"name": "Raj Maurya", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-02-08T20:43:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rajdeepbharati", "fields": {"name": "Rajdeep Bharati", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-11-06T17:58:23Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "random-access7", "fields": {"name": "Aabhaas Vaish", "score": 1.4155685441020194, "rank": 85, "trend": -1, "last_active_at": "2018-03-01T07:59:09Z", "pos_in": 2, "weighted_pos_in": 1.0655685441020193, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11166243296862524, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rattandeep1998", "fields": {"name": "RATTANDEEP SINGH", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-12-18T14:24:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "realslimshanky", "fields": {"name": "Shashank Kumar", "score": 0.18618490967056384, "rank": 184, "trend": -1, "last_active_at": "2018-02-13T11:28:23Z", "pos_in": 1, "weighted_pos_in": 0.10669500531349625, "pos_out": 4, "neg_in": 2, "weighted_neg_in": 0.3205100956429324, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10153392009016415, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refactormyself", "fields": {"name": "Bolarinwa Saheed Olayemi", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-04-12T08:45:21Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refeed", "fields": {"name": "Rafid Aslam", "score": 14.016312433581295, "rank": 14, "trend": 0, "last_active_at": "2018-08-13T14:36:17Z", "pos_in": 16, "weighted_pos_in": 13.666312433581295, "pos_out": 17, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.21547607843154326, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "rhemon", "fields": {"name": "Ridhwanul Haque", "score": 3.904357066950049, "rank": 51, "trend": 0, "last_active_at": "2018-05-08T09:23:07Z", "pos_in": 13, "weighted_pos_in": 3.904357066950049, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1321667945848347, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "richardson-souza", "fields": {"name": "Richardson Souza", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2018-10-08T18:51:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "richer6605", "fields": {"name": "Dean Lin", "score": 0.27502656748140175, "rank": 152, "trend": -1, "last_active_at": "2017-11-27T21:08:43Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10226585912862145, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rishabhgarg25699", "fields": {"name": "Rishabh Garg", "score": 0.8522619232942821, "rank": 108, "trend": -1, "last_active_at": "2018-10-03T15:18:58Z", "pos_in": 3, "weighted_pos_in": 1.1178612310768588, "pos_out": 0, "neg_in": 1, "weighted_neg_in": 0.26559930778257657, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10702152332611797, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "robbyoconnor", "fields": {"name": "Robby O'Connor", "score": 0.2714665249734317, "rank": 153, "trend": -1, "last_active_at": "2017-10-23T06:16:26Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10223652903557323, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanbanerjee", "fields": {"name": "Rohan Banerjee", "score": 0.9273113708820407, "rank": 106, "trend": -1, "last_active_at": "2018-01-16T19:52:50Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10763983259518967, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanraju97", "fields": {"name": "Rohan Raju", "score": 0.15478214665249734, "rank": 194, "trend": -1, "last_active_at": "2017-03-28T16:55:43Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10127520240372379, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanrk", "fields": {"name": "Rohan", "score": 0.36354941551540826, "rank": 143, "trend": -1, "last_active_at": "2018-05-07T10:39:40Z", "pos_in": 2, "weighted_pos_in": 0.36354941551540826, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10299517159158192, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rpanczer", "fields": {"name": "Bobby Panczer", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-10-17T00:31:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rubdos", "fields": {"name": "Ruben De Smet", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-03-07T03:13:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rupav", "fields": {"name": "rupav jain", "score": 0.25, "rank": 161, "trend": -1, "last_active_at": "2017-10-03T17:34:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10205967295211824, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sadovnychyi", "fields": {"name": "Dmytro Sadovnychyi", "score": 0.2, "rank": 181, "trend": -1, "last_active_at": "2017-06-14T11:01:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10164773836169459, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sahilarora535", "fields": {"name": "Sahil Arora", "score": 0.44102019128586484, "rank": 131, "trend": -1, "last_active_at": "2017-03-19T16:49:09Z", "pos_in": 2, "weighted_pos_in": 0.44102019128586484, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10363342943731801, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "saksham189", "fields": {"name": "", "score": 2.4616665308215944, "rank": 66, "trend": null, "last_active_at": "2018-08-13T15:35:19Z", "pos_in": 4, "weighted_pos_in": 2.3132033469124607, "pos_out": 1, "neg_in": 1, "weighted_neg_in": 0.1015368160908661, "neg_out": 1, "offset": 0.0, "weight_factor": 0.12028091188267181, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sangamcse", "fields": {"name": "sangamcse", "score": 9.89472111817497, "rank": 21, "trend": 0, "last_active_at": "2018-10-20T12:20:09Z", "pos_in": 21, "weighted_pos_in": 8.79472111817497, "pos_out": 38, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.1815195578234321, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sanjeethboddi", "fields": {"name": "Sanjeeth", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2018-05-21T03:55:15Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sarthakchakerverty", "fields": {"name": "Sarthak Chakerverty", "score": -0.21955366631243298, "rank": 214, "trend": -1, "last_active_at": "2018-07-13T08:57:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 2, "weighted_neg_in": 0.319553666312433, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "satwikkansal", "fields": {"name": "Satwik Kansal", "score": 10.68698193411264, "rank": 18, "trend": 0, "last_active_at": "2018-04-07T15:38:12Z", "pos_in": 18, "weighted_pos_in": 9.63698193411264, "pos_out": 21, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.18804675051787184, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "seeeturtle", "fields": {"name": "Joshua Chung", "score": 0.1260558732454054, "rank": 202, "trend": -1, "last_active_at": "2018-10-30T13:55:23Z", "pos_in": 1, "weighted_pos_in": 0.1260558732454054, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10103853549031683, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sgsh123", "fields": {"name": null, "score": 0.10573857598299678, "rank": 204, "trend": -1, "last_active_at": "2017-02-20T03:35:34Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1008711475397907, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shaipranesh11", "fields": {"name": null, "score": 0.2, "rank": 181, "trend": -1, "last_active_at": "2017-12-02T09:48:06Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10164773836169459, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shashank-b", "fields": {"name": "Shashank Batra", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-01-08T18:17:29Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shikharvaish28", "fields": {"name": "Shikhar Vaish", "score": 0.5105471925073762, "rank": 124, "trend": -1, "last_active_at": "2018-10-28T12:26:48Z", "pos_in": 4, "weighted_pos_in": 0.4234480659314475, "pos_out": 7, "neg_in": 1, "weighted_neg_in": 0.26290087342407126, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10420624097274937, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreab373", "fields": {"name": "shreab373", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-04-08T16:45:09Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyans800755", "fields": {"name": "Shreyans", "score": 20.82037438984581, "rank": 6, "trend": 0, "last_active_at": "2018-08-18T06:53:16Z", "pos_in": 41, "weighted_pos_in": 19.34540095732721, "pos_out": 35, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2715326479349619, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyateeza", "fields": {"name": "Shreya", "score": 1.276780021253985, "rank": 91, "trend": -1, "last_active_at": "2018-01-14T18:09:18Z", "pos_in": 4, "weighted_pos_in": 1.3841657810839527, "pos_out": 1, "neg_in": 1, "weighted_neg_in": 0.15738575982996783, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11051899710232709, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shrutishrm512", "fields": {"name": "Shruti Sharma", "score": 0.25, "rank": 161, "trend": -1, "last_active_at": "2017-03-28T08:50:11Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10205967295211824, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sibasish14", "fields": {"name": "Sibasish Ghosh", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-12-14T12:59:16Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "siddhant-curious", "fields": {"name": "Siddhant Chhabra", "score": 0.22773645058448444, "rank": 167, "trend": -1, "last_active_at": "2018-05-08T04:55:07Z", "pos_in": 2, "weighted_pos_in": 0.22773645058448444, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1018762504299211, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "siddhpant", "fields": {"name": "Siddh Raman Pant", "score": 0.18320888899977972, "rank": 185, "trend": -1, "last_active_at": "2018-11-27T02:34:38Z", "pos_in": 1, "weighted_pos_in": 0.18320888899977972, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10150940157304192, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sidharthskumar", "fields": {"name": "sidharth sk", "score": 0.42104144527098825, "rank": 136, "trend": -1, "last_active_at": "2017-07-18T10:13:56Z", "pos_in": 1, "weighted_pos_in": 0.1210414452709882, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1034688307061817, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sils", "fields": {"name": "Lasse Schuirmann", "score": 17.284856535600408, "rank": 8, "trend": 0, "last_active_at": "2018-01-03T08:40:29Z", "pos_in": 60, "weighted_pos_in": 16.934856535600407, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.24240460595048058, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sims1253", "fields": {"name": "Maximilian Scholz", "score": 6.859936238044619, "rank": 29, "trend": 0, "last_active_at": "2017-11-02T17:21:01Z", "pos_in": 34, "weighted_pos_in": 6.759936238044619, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1565169004910247, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "singhYash123", "fields": {"name": "Yash", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-10-29T13:43:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sks444", "fields": {"name": "Shrikrishna Singh", "score": 10.540432304100218, "rank": 19, "trend": 0, "last_active_at": "2018-11-27T02:38:37Z", "pos_in": 22, "weighted_pos_in": 7.873641193099994, "pos_out": 93, "neg_in": 3, "weighted_neg_in": 2.1832088889997796, "neg_out": 1, "offset": 0.0, "weight_factor": 0.18683937328155376, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sladyn98", "fields": {"name": "Sladyn", "score": 0.23390232097780678, "rank": 165, "trend": -1, "last_active_at": "2018-10-07T08:49:29Z", "pos_in": 1, "weighted_pos_in": 0.23390232097780678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10192704913582266, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "snakevenom04", "fields": {"name": "Sir Cheshire", "score": 0.2547821466524973, "rank": 159, "trend": -1, "last_active_at": "2017-08-25T07:26:44Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10209907158457109, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "solutusimmensus", "fields": {"name": "SolutusImmensus", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-11-09T02:37:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sonali0901", "fields": {"name": "sonali0901", "score": 0.10095642933049948, "rank": 207, "trend": -1, "last_active_at": "2017-10-18T17:04:10Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10083174890733787, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sopelj", "fields": {"name": "Jesse Sopel", "score": 0.2, "rank": 181, "trend": -1, "last_active_at": "2018-05-05T13:35:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10164773836169459, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "soumya-ranjan7", "fields": {"name": "Soumya Ranjan", "score": 0.10382571732199786, "rank": 205, "trend": -1, "last_active_at": "2017-10-19T11:28:17Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10085538808680958, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sourabh1031", "fields": {"name": "Sourabh Pruthi", "score": -0.23499887608965248, "rank": 215, "trend": -1, "last_active_at": "2018-11-04T18:41:55Z", "pos_in": 2, "weighted_pos_in": 0.2227064920486071, "pos_out": 0, "neg_in": 2, "weighted_neg_in": 0.45770536813825957, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sourojit", "fields": {"name": "Sourojit Bhaduri", "score": 1.135919234856536, "rank": 99, "trend": -1, "last_active_at": "2018-01-02T20:21:03Z", "pos_in": 3, "weighted_pos_in": 1.135919234856536, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10935848849529936, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "srikanth100", "fields": {"name": "Srikanth Kini", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-02-13T12:59:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "srivama", "fields": {"name": "Amandeep Srivastava", "score": 0.15000000000000002, "rank": 198, "trend": -1, "last_active_at": "2018-10-16T09:10:14Z", "pos_in": 1, "weighted_pos_in": 0.1, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10123580377127095, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "starkblaze01", "fields": {"name": "Mayank Pathela", "score": 0.2286928799149839, "rank": 166, "trend": -1, "last_active_at": "2018-06-28T12:56:00Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10188413015641166, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "stellargo", "fields": {"name": "Sumit Sarin", "score": 0.4702444208289045, "rank": 128, "trend": -1, "last_active_at": "2018-04-22T10:08:32Z", "pos_in": 2, "weighted_pos_in": 0.3702444208289045, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10387419885786318, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "subhaminion", "fields": {"name": "Subham Bhattacharjee", "score": -1.0, "rank": 217, "trend": -1, "last_active_at": "2018-10-22T01:45:03Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supergr35", "fields": {"name": "Grant Parajuli", "score": 7.251859723698191, "rank": 28, "trend": 0, "last_active_at": "2017-11-14T19:07:24Z", "pos_in": 25, "weighted_pos_in": 6.65185972369819, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15974583730182693, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supriyanta", "fields": {"name": "Supriyanta Poddar", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-11-19T19:37:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "susg", "fields": {"name": "sushant gupta", "score": 1.0, "rank": 104, "trend": -1, "last_active_at": "2018-04-18T22:25:59Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10823869180847293, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "swapagarwal", "fields": {"name": "Swapnil Agarwal", "score": 0.16599362380446298, "rank": 189, "trend": -1, "last_active_at": "2017-10-18T06:50:39Z", "pos_in": 1, "weighted_pos_in": 0.16599362380446298, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10136757030869657, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "synicalsyntax", "fields": {"name": "Cynthia Lin", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-12-08T07:18:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "tabias", "fields": {"name": null, "score": 0.1633900106269925, "rank": 190, "trend": -1, "last_active_at": "2017-03-02T07:57:36Z", "pos_in": 1, "weighted_pos_in": 0.11339001062699249, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10134611994213891, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "theOriginalMuktaka", "fields": {"name": "", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-12-27T12:40:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "thisch", "fields": {"name": "Thomas Hisch", "score": 2.6401700318809724, "rank": 62, "trend": 0, "last_active_at": "2017-06-12T21:21:05Z", "pos_in": 8, "weighted_pos_in": 2.6401700318809724, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12175154721463344, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "traff", "fields": {"name": "Dmitry Trofimov", "score": 0.0, "rank": 213, "trend": -1, "last_active_at": "2017-01-26T00:50:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "troublemagnet", "fields": {"name": "Gunjan Karamchandani", "score": 2.155738575982997, "rank": 73, "trend": -1, "last_active_at": "2017-11-11T12:00:39Z", "pos_in": 3, "weighted_pos_in": 2.105738575982997, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11776046574716018, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "tulphoon", "fields": {"name": "Dawid Osuchowski", "score": 0.23666653727384643, "rank": 164, "trend": -1, "last_active_at": "2016-11-25T19:33:37Z", "pos_in": 2, "weighted_pos_in": 0.23666653727384643, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10194982266197769, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "twinone", "fields": {"name": "Luuk W.", "score": 0.19277364505844796, "rank": 182, "trend": -1, "last_active_at": "2017-03-20T14:45:54Z", "pos_in": 1, "weighted_pos_in": 0.19277364505844796, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1015882026504325, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "umeshksingla", "fields": {"name": "Umesh Singla", "score": 2.0046227417640816, "rank": 76, "trend": -1, "last_active_at": "2017-09-04T17:38:53Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11651546896165026, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "underyx", "fields": {"name": "Bence Nagy", "score": 0.10382571732199786, "rank": 205, "trend": -1, "last_active_at": "2017-05-28T03:21:13Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10085538808680958, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "urohit011", "fields": {"name": "Rohit Upadhyay", "score": 1.0273113708820407, "rank": 103, "trend": -1, "last_active_at": "2017-11-23T03:10:16Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10846370177603695, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "userzimmermann", "fields": {"name": "Stefan Zimmermann", "score": 15.993251859723685, "rank": 9, "trend": 0, "last_active_at": "2018-01-06T09:09:24Z", "pos_in": 46, "weighted_pos_in": 11.443251859723684, "pos_out": 83, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.23176347308754972, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "utkarsh2102", "fields": {"name": "Utkarsh Gupta", "score": 0.2, "rank": 181, "trend": -1, "last_active_at": "2018-11-26T13:08:48Z", "pos_in": 1, "weighted_pos_in": 0.1, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10164773836169459, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaibhavsingh97", "fields": {"name": "Vaibhav Singh", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-10-29T20:38:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaishnavm217", "fields": {"name": "Vaishnav Murali", "score": 0.20451647183846944, "rank": 177, "trend": -1, "last_active_at": "2017-03-01T11:58:41Z", "pos_in": 1, "weighted_pos_in": 0.15451647183846942, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10168494818123339, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vddesai1998", "fields": {"name": "Vishal Desai", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2017-12-21T12:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vibhanshuvaibhav", "fields": {"name": "Vibhanshu Vaibhav", "score": 0.20738575982996782, "rank": 176, "trend": -1, "last_active_at": "2018-01-19T13:24:25Z", "pos_in": 1, "weighted_pos_in": 0.15738575982996783, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1017085873607051, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vijeth-aradhya", "fields": {"name": "euleram", "score": 2.080446333687567, "rank": 75, "trend": -1, "last_active_at": "2017-03-26T12:34:47Z", "pos_in": 3, "weighted_pos_in": 1.980446333687567, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11714015616731926, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vipuldcoder", "fields": {"name": "vipul Aggarwal", "score": 0.1, "rank": 209, "trend": -1, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10082386918084729, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "virresh", "fields": {"name": "Viresh Gupta", "score": 4.543888318164969, "rank": 44, "trend": 0, "last_active_at": "2018-10-14T13:38:16Z", "pos_in": 15, "weighted_pos_in": 4.09388831816497, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1374356954654815, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wisn", "fields": {"name": "Wisnu Adi Nurcahyo", "score": 3.9312585305114545, "rank": 50, "trend": 0, "last_active_at": "2018-07-30T11:39:09Z", "pos_in": 13, "weighted_pos_in": 3.5812585305114544, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.132388427452314, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wyj1026", "fields": {"name": "Wang Yijie", "score": 0.2214665249734319, "rank": 170, "trend": -1, "last_active_at": "2017-12-19T16:43:19Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10182459444514957, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "xferra", "fields": {"name": "Andrey", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yash-nisar", "fields": {"name": "Yash Nisar", "score": 21.023113708820397, "rank": 5, "trend": 0, "last_active_at": "2017-09-03T12:50:43Z", "pos_in": 33, "weighted_pos_in": 14.273113708820395, "pos_out": 135, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2732029547014532, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashLadha", "fields": {"name": "Yash Ladha", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-03-02T12:08:38Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashasingh", "fields": {"name": "Yasha", "score": -0.4513283740701395, "rank": 216, "trend": -1, "last_active_at": "2017-12-12T17:28:20Z", "pos_in": 2, "weighted_pos_in": 0.3759829968119013, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.9273113708820407, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashovardhanagrawal", "fields": {"name": "Yashovardhan Agrawal", "score": 2.3188629117959616, "rank": 69, "trend": -1, "last_active_at": "2018-09-29T03:56:01Z", "pos_in": 11, "weighted_pos_in": 2.0688629117959616, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11910439687638505, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yukiisbored", "fields": {"name": "Muhammad Kaisar Arkhan", "score": 5.021625929861844, "rank": 40, "trend": 0, "last_active_at": "2018-05-18T17:39:46Z", "pos_in": 27, "weighted_pos_in": 4.771625929861844, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14137162841356796, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yzgyyang", "fields": {"name": "Guangyuan (Charlie) Yang", "score": 3.1009564293304996, "rank": 56, "trend": 0, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 4, "weighted_pos_in": 3.1009564293304996, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1255478243327566, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zenara", "fields": {"name": "Chathurika Senani", "score": 0.05, "rank": 211, "trend": -1, "last_active_at": "2017-04-06T19:27:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10041193459042365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zwliew", "fields": {"name": "Zhao Wei Liew", "score": 0.04871011885228427, "rank": 212, "trend": -1, "last_active_at": "2017-12-28T06:48:01Z", "pos_in": 2, "weighted_pos_in": 0.5487101188522843, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.10040130765717806, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ==", "fields": {"body": "@meetmangukiya I'm looking into them :)", "diff": null, "created_at": "2017-03-19T15:20:51Z", "last_edited_at": null, "author": "sahilarora535", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ==", "fields": {"body": "@Techievena Pro-tip: Use a different branch on your fork so you can update it easily without issues with \"merging\" from the origin remote when pulling.", "diff": null, "created_at": "2017-04-22T15:57:12Z", "last_edited_at": "2017-04-22T15:57:19Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw==", "fields": {"body": "@ai-coder , you have done one newcomer issue.  Fixing individual spelling mistakes are newcomer issues.\nThe bug you are solving was low because it was about adding a spell checker bear, which is not what you are doing in this PR.", "diff": null, "created_at": "2017-11-03T08:19:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw==", "fields": {"body": "The content of your patch is fine; please amend your commit message\nhttp://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nThis type of change is \"Closes\", not a \"Fixes\", as the current version is not broken.", "diff": null, "created_at": "2017-11-03T14:00:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg==", "fields": {"body": "I would rather recommend to write it lowercase, because it's not referring to a name or title. Do it then for both, inside the commit body and in the .rst", "diff": null, "created_at": "2017-11-04T20:26:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ==", "fields": {"body": "@Grox-Ni You missed a full stop at the end of commit description \ud83d\ude09.", "diff": null, "created_at": "2017-11-07T15:42:01Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ==", "fields": {"body": "@troublemagnet done thanks!!", "diff": null, "created_at": "2017-11-11T11:55:28Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA==", "fields": {"body": "@neelanshsahai You don't need to unack just to request changes, use GitHub's feature or just make it a comment.\nOf course, unack is used when you disagree that this is acceptable and has been ack'd by someone else.", "diff": null, "created_at": "2017-11-16T11:02:09Z", "last_edited_at": "2017-11-16T11:02:48Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA==", "fields": {"body": "Yes, the documentation should focus on describing .coarc , rather than default_coafile, but I think this example is good enough for this PR/issue.  The problem with default_coafile is in core, not the documentation, and further improvements of docs dont help users a great deal.", "diff": null, "created_at": "2017-11-17T17:39:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg==", "fields": {"body": "@prashant0598 please insert a line break between the description and Closes #128\nas I had suggested", "diff": null, "created_at": "2017-11-18T18:55:51Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ==", "fields": {"body": "Also, fix your commit to adhere to https://coala.io/commit \ud83d\ude04", "diff": null, "created_at": "2017-11-26T05:35:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg==", "fields": {"body": "@0x48piraj, please follow the instructions given to you by our developers.  We have good reasons for why and how we do things, which you will learn if you proceed through the newcomer process.\nOur newcomer process exists only to ensure you know how to use git correctly.\nIf you dont follow our processes, we discard your PR.\nThank you.", "diff": null, "created_at": "2017-11-27T05:39:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng==", "fields": {"body": "Also, it's a great first PR \ud83d\ude04 - you needn't start a new PR, just go through the suggested changes and associated guides \ud83d\ude03.\n\nI was talking about setting up the project in git \ud83d\ude1b\nAnd \"I never said anything\" was for that this was just a request to accept this PR, and from next issue, I will do it via git.\nAnyways, you all are right! I read the guidelines, but of my laziness I did it via web-interface.\nI know I'm assigned \ud83d\ude09\nThanks @prnvdixit for such a positive comment.\nFrom now, I will do as it is done in coala \ud83d\ude0a", "diff": null, "created_at": "2017-11-27T06:48:31Z", "last_edited_at": null, "author": "0x48piraj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA==", "fields": {"body": "Done :)", "diff": null, "created_at": "2017-12-05T03:33:08Z", "last_edited_at": null, "author": "indmind", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg==", "fields": {"body": "Also, it's not labelled \"bug\" - So, use \"Closes\" instead of \"Fixes\" in commit. \ud83d\udc4d", "diff": null, "created_at": "2017-12-05T07:48:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng==", "fields": {"body": "If #37 is merged shortly, it'll still be good to add static/js/*.js to the linted JavaScript files.", "diff": null, "created_at": "2017-12-06T08:28:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw==", "fields": {"body": "Comment on a3bbb6d, file scrap.js, line 10.\nBroken link - unable to connect to https://codein.withgoogle.com/api/program/2017/organization/?status=2 (HTTP Error: 503)\nOrigin: InvalidLinkBear, Section: all.links.", "diff": null, "created_at": "2017-12-06T05:25:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw==", "fields": {"body": "You might need run this 2 line inside the project folder\nexport PATH=$PATH:./node_modules/.bin\nexport NODE_PATH=$NODE_PATH:./node_modules\n\nTo let coala use the local eslint.", "diff": null, "created_at": "2017-12-07T10:15:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg==", "fields": {"body": "Could you modify this as well as part of your folder restructuring?\n\n  \n    \n      gci-leaders/.coafile\n    \n    \n         Line 2\n      in\n      df44130\n    \n    \n    \n    \n\n        \n          \n           files = *.js, static/js/*.js", "diff": null, "created_at": "2017-12-08T06:09:21Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw==", "fields": {"body": "This is so awesome \u2764\ufe0f", "diff": null, "created_at": "2017-12-08T06:58:37Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA==", "fields": {"body": "#49 and #50 should use Closes\nThe rest is good enough, however try to keep to our 'one commit for one issue' guideline next time.", "diff": null, "created_at": "2017-12-08T07:07:31Z", "last_edited_at": "2017-12-08T07:14:48Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng==", "fields": {"body": "LGTM = looks good to me. ack tells the bot to accept the patch", "diff": null, "created_at": "2017-12-08T16:41:11Z", "last_edited_at": "2017-12-08T16:41:29Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw==", "fields": {"body": "I think we should have a strong horizontal line between each org, and a much less visually distracting separator between icons and participants.", "diff": null, "created_at": "2017-12-11T06:45:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA==", "fields": {"body": "Oh, one last thing, it might be better to use the Wikipedia and Wikimedia logos without text, because it's not readable anyways when the logo is so small. Using just the icon without text will help it fit in more.", "diff": null, "created_at": "2017-12-12T22:05:57Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ==", "fields": {"body": "how do we determine the parent repo of the fork?\n\nThat would be another GitHub API call .. ;)\nBut I meant that it would be OK to just hard code https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nI dont feel particularly inclined to help someone create an alternative version without sending their improvements to this repo.  I am more concerned about the ability for development forks of this repo to build correctly, so newcomers can easily participate in this repo.\nThe problem is that if you use https://raw.githubusercontent.com/andrewda/gh-pages/data.min.json , and dont use https://raw.githubusercontent.com/coala/gh-pages/data.min.json , the build on the fork will be 'reset' , and will need to have several builds before it catches up to the data which has been found in https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nSo if you do use https://raw.githubusercontent.com/xxxx/gh-pages/data.min.json , you should also fall back to https://raw.githubusercontent.com/coala/gh-pages/data.min.json (and IMO , just hard-code it).", "diff": null, "created_at": "2017-12-13T08:23:52Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng==", "fields": {"body": "That would be one option, but adding a CACHE_VERSION would allow us to avoid this problem entirely in the future, such as if a new key were added or an existing one were taken away.", "diff": null, "created_at": "2017-12-14T03:21:12Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ==", "fields": {"body": "Also the expected results says to use yeah but you have changed it to true", "diff": null, "created_at": "2017-12-17T17:16:16Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw==", "fields": {"body": "@ishanSrt\n\nAlso the expected results says to use yeah but you have changed it to true\n\nthat is the expected results it depends what we passed , but on Tutorial we passed True :)", "diff": null, "created_at": "2017-12-17T17:54:01Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg==", "fields": {"body": "If you want to use var = arr.map then you need to return the whole object, not just mutating them.\nBut let's just use forEach", "diff": null, "created_at": "2017-12-18T07:56:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ==", "fields": {"body": "http://coala.io/newcomer tells you not to do that, twice.  Please read it carefully.", "diff": null, "created_at": "2017-12-18T09:46:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA==", "fields": {"body": "Would be good to have the RSS mentioned in the index.html", "diff": null, "created_at": "2017-12-20T10:41:27Z", "last_edited_at": "2017-12-20T10:41:36Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw==", "fields": {"body": "@blazeu Is it?", "diff": null, "created_at": "2017-12-21T06:07:46Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA==", "fields": {"body": "Ignoring the line is probably the best way.", "diff": null, "created_at": "2017-12-21T00:37:25Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzU0NzAxNg==", "fields": {"body": "I suspect that it is the foo & which is tripping it up.", "diff": null, "created_at": "2017-12-22T08:19:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg==", "fields": {"body": "Please squash your rss commits.  There is no need to create a file in one commit and then modify it in another , within one PR.  It is one code addition.", "diff": null, "created_at": "2017-12-22T05:47:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ==", "fields": {"body": "Ideally a PR shouldn't come from your master branch it can complicate things.\nBut don't worry, do not close this one. You can discuss about it in our chat.", "diff": null, "created_at": "2017-12-22T15:31:46Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA==", "fields": {"body": "In general, it's let for reassignable variable or const for unassignable.\nSee our backend js.\nWe have Babel so browser support is pretty good.", "diff": null, "created_at": "2017-12-24T00:53:38Z", "last_edited_at": "2017-12-24T00:54:23Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw==", "fields": {"body": "According to the Best Practices doc mentioned in the original issue, the image size has to be at least 200x200 pixels for smaller sharing posts, or 600x315 pixels for larger sharing posts.\nThe current image is 72x72 pixels (after commit f95ffaf214f529b69de444760653ce75f2621410, so I decided to re-add the previous image instead.", "diff": null, "created_at": "2017-12-28T06:31:41Z", "last_edited_at": "2017-12-28T06:35:40Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ==", "fields": {"body": "I believe an image with a white background works and looks fine.\nExample using an image with a white background:", "diff": null, "created_at": "2017-12-28T06:40:15Z", "last_edited_at": "2017-12-28T06:40:25Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng==", "fields": {"body": "@blazeu That was actually caused by my padding: 10px instead of padding: 10px 0. I just fixed the padding instead.", "diff": null, "created_at": "2017-12-29T08:17:08Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA==", "fields": {"body": "@blazeu I've mentioned it above. See here.", "diff": null, "created_at": "2017-12-31T10:04:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA==", "fields": {"body": "Note that this was working way back before @dob9601 added a bunch of new codes, so I accepted the task in GCI.", "diff": null, "created_at": "2018-01-03T14:30:35Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng==", "fields": {"body": "done", "diff": null, "created_at": "2018-01-06T15:10:14Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ==", "fields": {"body": "and make sure in your commit message you are using only present tense \ud83d\ude09", "diff": null, "created_at": "2018-01-18T22:11:34Z", "last_edited_at": null, "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng==", "fields": {"body": "@Kagamihime Oh forgot to change the comment here. Had already changed the commit by looking at another PR.", "diff": null, "created_at": "2018-01-22T14:01:03Z", "last_edited_at": null, "author": "diveshuttam", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng==", "fields": {"body": "coala says:\n|    | [NORMAL] GitCommitBear:\n|    | No newline found between shortlog and body at HEAD commit. Please add one.\n\nYour commit needs to be like this\nMain.css: Fix broken social link\n\nFixes https://github.com/coala/gci-leaders/issues/73\n\n1 newline between shortlog and body.", "diff": null, "created_at": "2018-02-04T14:53:15Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA==", "fields": {"body": "I implemented wisn's suggestion, the one that made the issue a newcomer one, but perhaps there are better ways to solve this issue.", "diff": null, "created_at": "2018-02-06T06:49:20Z", "last_edited_at": null, "author": "mvinoba", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg==", "fields": {"body": "Now we are talking, looks good :D", "diff": null, "created_at": "2018-02-13T11:24:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw==", "fields": {"body": "Sure @Makman2 This won't repeat again :)", "diff": null, "created_at": "2018-02-15T14:41:19Z", "last_edited_at": null, "author": "nguptaa", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3ODE0NTU0Nw==", "fields": {"body": "@rammanoj You didn't change the rst section yet", "diff": null, "created_at": "2018-04-03T06:45:37Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3ODE5NDUwNA==", "fields": {"body": "technically git section also shouldn't require any derivation but currently it requires the files from [all] but waiting for a PR to be merged, will reference this PR there if it gets merged before this, then you can make changes. \ud83d\udc4d", "diff": null, "created_at": "2018-04-03T09:52:48Z", "last_edited_at": "2018-04-03T09:53:28Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTUzMTczMg==", "fields": {"body": "Interesting error on Appveyor.  maybe different version of pylint there?", "diff": null, "created_at": "2018-04-08T08:35:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng==", "fields": {"body": "I notice that JBoss has two linked on https://gci-leaders.netlify.com/ , but none on https://deploy-preview-148--gci-leaders.netlify.com/ .", "diff": null, "created_at": "2018-04-17T04:57:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA==", "fields": {"body": "fwiw, a part of the problem was that 92a68a2 cleared out all of the data in the deploy.\nWe dont need a special case for JBoss.  The link in GCI is old, but a head request will give us the new URL.\nThat is needed for any github/gitter URL which changes.\nThat should be a new PR which just fixes master.", "diff": null, "created_at": "2018-04-20T02:18:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA==", "fields": {"body": "#551 (comment) kind of comments can be disabled by turning on travis-buddy only if the tests fail.", "diff": null, "created_at": "2018-04-22T20:56:04Z", "last_edited_at": null, "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkxMzE0Mg==", "fields": {"body": "But what's the aim of doing that? It doesn't seem to save API hits.\n\nIt does save API hits, and it is also much quicker.  The user should be able to load the specified repositories with only a few API hits used.\nIt is also stored in gh-pages, and then used by community repo at https://github.com/coala/community/blob/master/activity/scraper.py#L144", "diff": null, "created_at": "2018-05-02T09:07:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkyNTc0MA==", "fields": {"body": ".. but closed issues/prs is empty ..\n\nI see that https://deploy-preview-18--coala-gh-board.netlify.com/issues.json does include closed & merged items , so the graphql isnt the problem.\nHowever there is only 1577 items in the JSON.  The number should be much higher.\nAccording to https://developer.github.com/v4/guides/resource-limitations/ , the last: 100 is as high as it goes, and it means multiple GraphQL requests will be needed per repo, or the pre-fetcher may need to revert to using the REST API for the larger repos.\nWhat is very nice about the GraphQL approach is that it works much better on PRs, which do not have a token.", "diff": null, "created_at": "2018-05-02T09:55:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NjUxMjg2Ng==", "fields": {"body": "Then issues.json is not storing them in the correct format, and/or the loader is not unserializing them correctly into the user's browser local storage.\n\nTo see the difference, run the old fetch-issues process locally on your machine, and see the format that issues.json needs to be for the unserializer to load it correctly.", "diff": null, "created_at": "2018-05-04T06:08:22Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NjUyODExNQ==", "fields": {"body": "I've put it as a separate issue as loading the last 100 issues is good enough for now, to get the build working again.\n\nThat's indeed a great idea and we definitely should do that but I don't think that's urgent. Actually I have fixed my script and it is able to fetch all issues (by using cursor in GraphQL) now. I would update this PR later.\n@jayvdb I'm afraid I may not be able to solve #23 during the bonding period. Would it be OK if I put that into coding phase?", "diff": null, "created_at": "2018-05-04T07:46:57Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MTc5OA==", "fields": {"body": "Is this file linted using .eslint in the project? because the last time I made this it isn't linted automatically, and it made me merge code with completely different style from the rest of the project.", "diff": null, "created_at": "2018-05-05T02:03:37Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjMyMw==", "fields": {"body": "I'm willing to merge without updating the lifecycle method in this PR. There's no deprecation warning in 16.3, but the next version will.", "diff": null, "created_at": "2018-05-05T02:13:56Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ==", "fields": {"body": "Just run it manually for now, it can come later in another PR after this one.\n@jayvdb different folder, script isn't included ;)", "diff": null, "created_at": "2018-05-05T02:19:53Z", "last_edited_at": "2018-05-05T02:20:47Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NzA5ODQ4Mg==", "fields": {"body": "Thanks @ksdme\nThe shortlog was exceeding character limit, so replaced support with add \ud83d\ude05", "diff": null, "created_at": "2018-05-07T15:15:09Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Nzc3MDEzMw==", "fields": {"body": "I have tested yet, but it looks good.\n(edit) I have not tested yet, but it looks good.", "diff": null, "created_at": "2018-05-09T15:03:54Z", "last_edited_at": "2018-05-11T11:43:00Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDUwMTM5OQ==", "fields": {"body": "ping @Anubhav-Bhargava please read the commit guidelines http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html your commit message doesn't follow them.\nAlso I think it would be best if you drop the description and only keep the shortlog and the issue link.\n\nThe commit message says adds .vscode, this should also indicate that .vscode is a directory.\n\n@ksdme I don't think that there is a file named .vscode so I'm not sure how that would cause confusing its always a directory.", "diff": null, "created_at": "2018-05-20T18:27:24Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDY2MjUzMg==", "fields": {"body": "@blazeu What about saving two files, one is full issues.json and the other one called recent-issues.json which only has recent (e.g. a month) issues/prs/reviews? The full issues.json is needed by coala/community and we only load the smaller recent-issues.json to the frontend.", "diff": null, "created_at": "2018-05-21T14:02:29Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTM2ODYwOA==", "fields": {"body": "Ok how about we limit those concurrency?\nUsing something like https://github.com/sindresorhus/p-all , or see the related modules there, might be useful.", "diff": null, "created_at": "2018-05-23T14:30:08Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjUyMTU3MA==", "fields": {"body": "However, I heartily apologise if you felt I'm talking about the commit message.\n\nOh I didn't realise that you were only talking about file changes. But since you approved it I thought the you approved the commit message too.\nWe only ack PRs when they are perfect and ready to merge for pointing out things separately we resort to reviews and comments.\nSo PRs should only be approved once they are ready to be merged and that is usually done by the maintainers. @utkarsh2102 \ud83d\ude04", "diff": null, "created_at": "2018-05-28T13:03:27Z", "last_edited_at": "2018-05-28T13:04:29Z", "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjY3MTg2NQ==", "fields": {"body": "@sanshay, you should at least take a look at each comments on your PR.\nThe changes I requested should be done using git commit --amend which @palash25 has mentioned in #2506 (comment).\nAny way, you have made 2 commits here. So you need to squash your commits into one. After that your PR will be ready to merge. \ud83d\ude09", "diff": null, "created_at": "2018-05-29T06:56:18Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MzY3ODY4OQ==", "fields": {"body": "You should never close a pull request. You should just get help fixing this one. I also see that there are a few commits in this branch. When you fixed your commit message you should have amended the commit. After amending the commit then you force push it. (see the follow up section in the coala git tutorial) As it is maybe you need to squash them? (Not sure, I'm still learning.)\nA great place to get help is here https://gitter.im/coala/coala - there are a lot of active contributors who monitor that chat.", "diff": null, "created_at": "2018-05-31T21:01:07Z", "last_edited_at": null, "author": "jsecrest", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5Mzc0ODM1MQ==", "fields": {"body": "As @jsecrest points out, you need to squash your commit messages and then do a force push.", "diff": null, "created_at": "2018-06-01T03:34:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDcyMTc1NQ==", "fields": {"body": "I found that the test file isn't properly linted.\nI think we should add that in #24 along with the script directory.", "diff": null, "created_at": "2018-06-05T14:05:10Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDczMDM2Mg==", "fields": {"body": "@li-boxuan seems we never had a package-lock.json committed. I would do that in another issue, that one would also include to verify that package-lock.json has the right content^^", "diff": null, "created_at": "2018-06-05T14:27:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NzUxNzU5OA==", "fields": {"body": "@gautam1858 Pls, read the  commit guidelines carefully. Your shortlog, and your commit message do not correspond to the format specified.\nChecklist specifically tells you to go through the commit guidelines, but you seem to have skipped that part altogether.\nYou're commit message should be something like this:\nReview.rst: Typo Github->GitHub\nCloses #5512\nThis format makes sure, that the issue is closed automatically when the pull request is merged. Filename is important because when you see your repository, it displays you're last commit in that directory, and it's much easier to know where the change was made when the filename is specified in the commit shortlog.\nPlease update your PR, and DO NOT FORGET TO SQUASH YOU'RE COMMITS into one. If you have trouble squashing commits, let me know.", "diff": null, "created_at": "2018-06-15T05:28:20Z", "last_edited_at": "2018-06-15T05:29:05Z", "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODA0Mjc4Nw==", "fields": {"body": "We have another bug which you have uncovered.\nI'll get that fixed.\n#5541", "diff": null, "created_at": "2018-06-18T12:49:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODcwOTYxNg==", "fields": {"body": ",one disadvantage it that pytest-pofiling display only first 20 profiled data on the basis of cumulative time\n\nsofixit", "diff": null, "created_at": "2018-06-20T10:58:16Z", "last_edited_at": "2018-06-20T10:59:25Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ==", "fields": {"body": "Any opinion on if we should should have a wrapped link -  If you believe someone is violating the code of conduct <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>__ to maintain line length?", "diff": null, "created_at": "2018-06-21T07:12:04Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg==", "fields": {"body": "See follow up notice at #2539 (comment)\nThe objective of this issue / PR is to move the apt installs to travis' managed list.", "diff": null, "created_at": "2018-06-22T05:55:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTYyOTU0NQ==", "fields": {"body": "Hey! I think your code is quite satisfying but your commit message is incorrect based on the community commit guidelines. So I suggest you to please change your commit message.\nYou can refer to http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html for correcting your commit. Also use Fixes/Fix instead of closes because you are dealing with a bug issue.", "diff": null, "created_at": "2018-06-23T04:19:42Z", "last_edited_at": null, "author": "chhabrabhishek", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTczMTEzOQ==", "fields": {"body": "@kriti21\nIf nothing else, then the first point that I'd question is why does the assertion in GitCommitBear get a 'HEAD commit information'\nwhile you are checking for the CommitResult Object in the VCSCommitBearTests\nI know that you are using the same function of self.run_uut which was meant to only return messages,\nBut checking if the hidden result was generated or not is of no use in the GitCommitBear, either don't check it at all, (using some approach as described in my previous comment) or check the whole commit object like what would be done in the VCSCommitResult (both of them should be done imo, i.e don't check for the hidden results in the existing tests, so they won't change, and make another class to check for the hidden results)\nAs for the main logic, I'd recommended previously as well to have a look over generators,\nThe for loop that I had written as an example was simply to illustrate the point why the tests weren't being executed, I expected you to read up a little more on that and use the appropriate things\nWhat would be apt would be using a yield from IMO\nI hope I haven't got things wrong here and am clearer now \ud83d\ude05", "diff": null, "created_at": "2018-06-24T05:39:53Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ==", "fields": {"body": "Thank you so much.. this is my first ever PR accepted in an opensource project. hooray!! \ud83d\ude03", "diff": null, "created_at": "2017-07-05T13:20:36Z", "last_edited_at": null, "author": "raghavmittal101", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg==", "fields": {"body": "Hello,\nIt looks like your commit doesn't follow our guidelines. Please take a look at https://coala.io/commit for the commit guidelines.\nI suggest using your current PR title as the commit shortlog and describe what you did on the commit description. Don't forget to mention the issue on the bottom with Fixes!\nThanks!", "diff": null, "created_at": "2017-08-10T02:53:12Z", "last_edited_at": "2017-08-10T02:53:32Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ==", "fields": {"body": "Yeah definitely :) yukiisbored already provided you the link where you can read commit guidelines, Let us know if you need any help :)", "diff": null, "created_at": "2017-08-10T16:01:49Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw==", "fields": {"body": "One thing, you don't have to create a new PR or branch to fix stuff/rewriting history. Just do it on the same branch and do a force push.", "diff": null, "created_at": "2017-08-11T23:43:03Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQ0MTA4MTE1Nw==", "fields": {"body": "@SerekKiri Guideline says maximum of 72 characters per line, not in total :)", "diff": null, "created_at": "2018-11-22T16:40:50Z", "last_edited_at": null, "author": "CLiu13", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQ0MTMwMjcwMg==", "fields": {"body": "Ok @CLiu13 ,I will make the suggested changes and will commit them soon.", "diff": null, "created_at": "2018-11-23T18:49:39Z", "last_edited_at": null, "author": "KVGarg", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQ0MTMwODI0Ng==", "fields": {"body": "@CLiu13 Please check whether changes I made are correct or not !!\nThanks a lot", "diff": null, "created_at": "2018-11-23T19:35:32Z", "last_edited_at": null, "author": "KVGarg", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQ0MTMxMjgxMA==", "fields": {"body": "Done \ud83d\ude04", "diff": null, "created_at": "2018-11-23T20:16:54Z", "last_edited_at": null, "author": "KVGarg", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQ0MTQ1MzQwOA==", "fields": {"body": "@KVGarg  Use cEPs instead of cEP's.", "diff": null, "created_at": "2018-11-25T16:33:36Z", "last_edited_at": null, "author": "bharatpurohit97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQ0MTY0MjgyMA==", "fields": {"body": "Will be able to work on this issue after 4 days as my semester sessionals are going on, So busy with them. \ud83d\ude07", "diff": null, "created_at": "2018-11-26T13:42:34Z", "last_edited_at": "2018-11-26T13:43:55Z", "author": "KVGarg", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQ0MTYyOTUwMA==", "fields": {"body": "As a rule of thumb, always checkout the branch to something else, other than the master.", "diff": null, "created_at": "2018-11-26T12:56:49Z", "last_edited_at": null, "author": "utkarsh2102", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMTAwNzI3OA==", "fields": {"body": "That was a transient error - a timeout in installation.", "diff": null, "created_at": "2018-06-28T11:44:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMTUzNDgzNg==", "fields": {"body": "@kriti21 this is a basic language file. Amendments for that can be made later on. Moreover, this file is not of any use as for now. Creating this language file was necessary for me to see the possibilities of defining tastes for the Quotation aspect.", "diff": null, "created_at": "2018-06-30T11:22:14Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzA3MzQ5MQ==", "fields": {"body": "Actually, have you seen this? --> https://pypi.org/project/cached-property/\n\nI have seen something similar but not this package \ud83d\ude06 . But if I had just copy pasted this I wouldn't get to learn so much about the dunder functions, so I'm glad I missed this.", "diff": null, "created_at": "2018-07-06T15:51:51Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzIwODY4OQ==", "fields": {"body": "Go through the newcomer guide http://coala.io/newcomer first. It will help you to write good commit messages.", "diff": null, "created_at": "2018-07-07T11:23:13Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzIwOTMyNg==", "fields": {"body": "@igagankalra, you need to adjust your commit message to follow https://coala.io/commit\nDont worry about the moban sync problem.  Someone else will fix that, or we'll show you how to fix that, once your commit is OK.", "diff": null, "created_at": "2018-07-07T11:36:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNDAwMTU5Nw==", "fields": {"body": "@refeed, different floating number implementations.\nJust using an if to get your build green.", "diff": null, "created_at": "2018-07-10T23:54:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw==", "fields": {"body": "Ugh.  Repeat of #5633 .  @JoeSiew , do not ever delete your fork.\nFollow our newcomers guide carefully https://github.com/coala/coala/blob/master/docs/Developers/Newcomers_Guide.rst", "diff": null, "created_at": "2018-07-19T04:27:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjg0NzU0Ng==", "fields": {"body": "You can also find out squashing guide at https://api.coala.io/en/latest/Developers/Git_Basics.html#rebasing.", "diff": null, "created_at": "2018-07-22T07:39:53Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjgxMTM5Mw==", "fields": {"body": "The PR won't be merged until you fix what has been suggested. And every PR should pass all test case.\n\nDo not close this PR\nDo not delete this branch\nDo not create new commits.\n\nMake changes in the same commit and use git commit --amend  to that.", "diff": null, "created_at": "2018-07-21T17:28:32Z", "last_edited_at": "2018-07-21T17:28:53Z", "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODA5NzgyMw==", "fields": {"body": "I am getting a lot of failed builds with this PR and #85 ; not sure what is the problem.\n\nI checked the log. Those fail builds are due to the error element (\".modal-dialog button.close\") still not existing after 60000ms\nI am also facing this issue recently. The reason could be, syncing issues takes too much time, or the page isn't correctly loaded due to some unknown reason.\nI wonder if we should abandon the current integration test, which is instable and hard to report coverage, and start building unittests.", "diff": null, "created_at": "2018-07-26T13:29:58Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA==", "fields": {"body": "@MacBox7 will do it by today", "diff": null, "created_at": "2018-07-29T05:35:51Z", "last_edited_at": null, "author": "HemabhKamboj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY2MjgwNQ==", "fields": {"body": "Someone forgot to rebase ! :P", "diff": null, "created_at": "2018-07-29T09:07:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY3NTIxMg==", "fields": {"body": "Some general thoughts:\nI believe .babelrc stuff can be put into package.json .. I prefer that, but what about other ppl?\ncodecov.yml is currently doing nothing, so isnt necessary.  Data can be sent to codecov without it, and the percentage will slowly rise.  until it gets to a decent percentage, tracking that isnt useful.\ntravis after_success/after_failure needs to be deactivated for the moban job.\njest.config.js - I am not a fan of checking in a large config file of comments about possible settings.  We know whether to find the docs if we want more settings.", "diff": null, "created_at": "2018-07-29T12:40:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY5MTkwNA==", "fields": {"body": "@jayvdb I would prefer .babelrc than package.json", "diff": null, "created_at": "2018-07-29T17:15:56Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODgyMDU2Nw==", "fields": {"body": "It got stuck again, at\n$ coala --non-interactive\n[WARNING][10:30:45] Section `all.todos` contain invalid language setting: 'Language `python3` is not a valid language name or not recognized by coala.'\nExecuting section all...\n\nIm pretty sure we know why and have a fix coming for that.", "diff": null, "created_at": "2018-07-30T10:34:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODkxNTY5Nw==", "fields": {"body": "A filter to hide the users own actions/content is a general setting which would apply to most 'detail' components.  Issues and PRs and Review comments, etc.  The only exception is when a users PR passes, but generally the user has other notifications for that event anyway.\nThe user doesnt need another notification for their own actions.  It should be not shown by default , but the user can enable it of course.\nAnyways, I can see how it isnt relevant to this PR. And after we can use gh-board interactively maybe I will have a different perspective on this.", "diff": null, "created_at": "2018-07-30T15:59:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODkyNDA0OQ==", "fields": {"body": "This is blocked - please stop pushing.", "diff": null, "created_at": "2018-07-30T16:23:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDEwOTMzMQ==", "fields": {"body": "@RaiVaibhav , you might need the Windows trick that is being used at https://github.com/coala/coala-bears/pull/2523/files#diff-c3fb76c94bc425a8cdc7577d5d0e3e31R60", "diff": null, "created_at": "2018-08-03T00:40:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDEzNjE3Ng==", "fields": {"body": "shutil.rmtree will throw NotADirectoryError as I am checking for the file :)", "diff": null, "created_at": "2018-08-03T03:46:42Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDEzNjQwMA==", "fields": {"body": "I findout the reason of previous problem here  https://www.logilab.org/blogentry/17873\nSo instead of hardcoding I used NamedTemporaryFile + with so solve the problem.", "diff": null, "created_at": "2018-08-03T03:48:34Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDYxNjY3NQ==", "fields": {"body": "As #565 is still open, I guess this could be Closes ... ?", "diff": null, "created_at": "2018-08-06T07:40:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMTc3MjMxMw==", "fields": {"body": "Source map demo: https://5b6c47e2b13fb1499142899d--coala-gh-board.netlify.com/ (open devtools, check console and sources tab)\nNot as nice as I would've hoped, but it's functional and debug breakpoints are working.", "diff": null, "created_at": "2018-08-09T14:13:35Z", "last_edited_at": "2018-08-09T14:57:13Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMjI0OTk3MQ==", "fields": {"body": "Also you sent some patches upstream.  They should be noted, even though they havent been merged.", "diff": null, "created_at": "2018-08-11T04:29:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMjMyNjcwNw==", "fields": {"body": "Your commit message doesn't include the issue link", "diff": null, "created_at": "2018-08-12T08:16:50Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMjMyODMwNg==", "fields": {"body": "There is a redundant : in your commit message - Closes: should be Closes\n\nI don't know why, but I have always used the : :D", "diff": null, "created_at": "2018-08-12T08:48:17Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMjMyODUyOQ==", "fields": {"body": "I don't know why, but I have always used the :\n\nI would suggest sticking to https://api.coala.io/en/latest/Developers/Writing_Good_Commits.html, but it's your choice.", "diff": null, "created_at": "2018-08-12T08:52:35Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzA0MzM5Nw==", "fields": {"body": "I'll write tests, but waiting for @Makman2 's thoughts first.", "diff": null, "created_at": "2018-08-14T23:03:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzEzMTE2OA==", "fields": {"body": "Would you consider doing this in stages? First let us transition this into tuple based structures and then worry about introducing dicts (OrderedDicts) or class based filters.", "diff": null, "created_at": "2018-08-15T08:34:15Z", "last_edited_at": "2018-08-15T08:34:35Z", "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzk5OTEwOQ==", "fields": {"body": "Not sure why appveyor is failing though. I also don't see a rebuild button on appveyor is there no way to re run appveyor jobs except for a force push?\n\nOnly admins have access to rebuild button. Go for force push.", "diff": null, "created_at": "2018-08-17T22:02:08Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNDAxMjMxMA==", "fields": {"body": "Any time you see timeout is the log , assume it is our intermittent timeout problem, which is complicated by #5674 .  On AppVeyor, force push is all you can do until we get corobo back online and implement job restart commands in corobo.  But dont feel like you have to keep force pushing to get it green - if travis or circle pass, a note that appveyor timeouted is enough for us to keep the PR in the review queue even if appveyor is red.", "diff": null, "created_at": "2018-08-17T23:31:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNzg1ODA0Ng==", "fields": {"body": "Ha, I was just going to explain the build failure ... and recommend exactly what you did as the solution. awesome", "diff": null, "created_at": "2018-09-01T12:58:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNzg2MjI5NA==", "fields": {"body": "Issue now assigned.", "diff": null, "created_at": "2018-09-01T14:10:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNzg5NjUxNg==", "fields": {"body": "Dup of #2680 , not reviewed for two weeks.", "diff": null, "created_at": "2018-09-02T00:29:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNzk0ODM1Mw==", "fields": {"body": "@Mah1ndra Also run coala locally on the repo before pushing the changes.", "diff": null, "created_at": "2018-09-02T18:04:44Z", "last_edited_at": null, "author": "shikharvaish28", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxODA1NzE0OQ==", "fields": {"body": "Nice work with the testing. The commit message still seems a bit out of place. How about __init__.py: Arrange imports alphabetically? It is short and crisp, and still conveys the relevant information about the commit.", "diff": null, "created_at": "2018-09-03T09:29:09Z", "last_edited_at": "2018-09-03T09:30:10Z", "author": "mach64", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxODAwMTg5NQ==", "fields": {"body": "You have to ensure all tests pass locally before you push it to github. This includes not having any warnings thrown by pytest. Follow this to properly test your changes.", "diff": null, "created_at": "2018-09-03T05:12:10Z", "last_edited_at": null, "author": "mach64", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxODAwNTM3OA==", "fields": {"body": "The CI builds are failing because your local repo is out of sync with master. You'll have to rebase first.", "diff": null, "created_at": "2018-09-03T05:39:29Z", "last_edited_at": null, "author": "mach64", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxODY2ODAyNQ==", "fields": {"body": "This made me recall #5204 (comment)\n\nirony: a commit to fix commit messages has an invalid commit message.", "diff": null, "created_at": "2018-09-05T09:40:22Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyMDM3ODI1OQ==", "fields": {"body": "Python 3.5.6 fail looks like it's because of an issue with pyre-check\nFor more, please follow: facebook/pyre-check#102", "diff": null, "created_at": "2018-09-11T18:41:48Z", "last_edited_at": null, "author": "atb00ker", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyMTAxNjI1Mg==", "fields": {"body": "@corona10 ping", "diff": null, "created_at": "2018-09-13T13:55:56Z", "last_edited_at": null, "author": "haeungun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyMTc5OTE0Mw==", "fields": {"body": "Thanks @123vivekr . I will make the changes you said .", "diff": null, "created_at": "2018-09-16T17:20:43Z", "last_edited_at": null, "author": "PrajwalM2212", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ==", "fields": {"body": "So I'm not sure whether this PR will get merged or not, only the maintainers can tell us (cc @jayvdb @Makman2  ) but I would like to start suggesting alternatives for the quote that might replace the current one.\nOne of my favorite quotes is the Linus Law and I think this goes well with coala since our community is so much focussed on reviews and we try to turn newcomers into reviewers early on in their open source careers.\n\n\"given enough eyeballs, all bugs are shallow\"\n\nOr this Martin Fowler quote\n\n\u201cI\u2019m not a great programmer; I\u2019m just a good programmer with great habits.\u201d", "diff": null, "created_at": "2018-09-24T11:37:13Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNDA5MTYxMg==", "fields": {"body": "@rishabhgarg25699 His commit message is fine. Please have a look at the tests below.\nIt is highly recommended that you should cross-check before commenting anything.", "diff": null, "created_at": "2018-09-24T19:14:10Z", "last_edited_at": "2018-09-24T19:15:44Z", "author": "shikharvaish28", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNDAxNjM2MQ==", "fields": {"body": "seems like an overkill of moral behaviour in the context of inability to take a joke. \ud83e\udd28\nWhen we say \"Do or die\" are we imparting death upon someone or disrespecting in any way?", "diff": null, "created_at": "2018-09-24T15:27:19Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA==", "fields": {"body": "@ishanSrt It\u2019s not about not taking a joke, it\u2019s about good copy writing. Jokes are great! But it\u2019s a readme: it should communicate about the project. I just believe that space could be better utilised to communicate about the project, than telling an old joke.\nBut I\u2019m not gonna fight for the point - it was a good faith suggestion by someone who is not a contributor to this project, take it or leave it \ud83d\udc96", "diff": null, "created_at": "2018-09-24T15:38:37Z", "last_edited_at": null, "author": "joenash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNDIxMjcyMQ==", "fields": {"body": "This was something I never thought about \ud83e\udd14 even I started thinking why that quote is there but yeah it can have a better replacement.", "diff": null, "created_at": "2018-09-25T05:33:39Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA==", "fields": {"body": "@rishabhgarg25699 this is very rude behaviour from you considering how many rules, you yourself have broken since you entered this org and as far as I see the earlier PR was opened without any requests for assignment for this issue, which make this one genuine.\nAgain I repeat, no need to use any form of strong language or bringing down someone like,\n\nYou did not make the rules of yours and also if want to only practise then you can do this in your github account on any your project\n\nWhen you yourself aren't aware of half of them.", "diff": null, "created_at": "2018-10-01T01:20:24Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNTc3ODA5Mg==", "fields": {"body": "It would be much better if you can add some tests, e.g. creating two meta-review participants, one of whom has done a meta-review while the other one hasn't. Then obviously the former one completes the meta-review activity while the latter one doesn't complete.", "diff": null, "created_at": "2018-10-01T03:04:11Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNTgxMTI5OA==", "fields": {"body": "@ishanSrt @Daronion @Naveenaidu I am really very sorry for my hard language . I will remember this thing from next time and does not demotivate any newcomer.I once again Sorry @Daronion for my language. I realize this is my fault for demotivating a newcomer .", "diff": null, "created_at": "2018-10-01T07:19:11Z", "last_edited_at": "2018-10-01T07:31:18Z", "author": "rishabhgarg25699", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNTgxNzM3Nw==", "fields": {"body": "@Naveenaidu oops didn't mean to misspell your name, I think it must have autocompleted and I didn't notice.\nThank you guys (Naveenaidu, ishanSrt, rishabhgarg25699) for taking your time to check this even if it is just a newcomer issue and it has no impact on the actual project. Helpful and active people is what I was hoping for since I'm willing to start documenting myself on this project so that I can solve greater issues.\nDidn't mean to cause any trouble or make you guys feel like you demotivated me. I was just not aware and didn't want to break any rules.\nI reopened the PR", "diff": null, "created_at": "2018-10-01T07:45:49Z", "last_edited_at": "2018-10-01T07:46:11Z", "author": "Daronion", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNTk2Mjk5OA==", "fields": {"body": "@rishabhgarg25699 I think you really need to understand what review is\n\nYour changes and PR are good but tell me one thing How you are working on this issue. You are not assigned to this issue. Without assigning , you draft a PR . Also in the issue of this PR there was a reference a open PR but you ignore that and open your PR . Please follow the rules and regulations of the organisation.\n\nNext time no such things in review, this is opensource no one is forced here, you need to remove your this type of review from all the PR you have reviewed (if any) and yeah like I said earlier please review your review first, you haven't done that.", "diff": null, "created_at": "2018-10-01T16:02:11Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNjQwNDQ4Mw==", "fields": {"body": "@Makman2 @wisn suggested earlier that\nderiving and instance already exists.Don't need to write it again as deriving instance. It is also a typo by the way.And\nSince type and instance already exists, I don't think you need to write it again as type instance.\nSee previous to previous commits of wisn\nSo I also removed data instance", "diff": null, "created_at": "2018-10-02T19:42:34Z", "last_edited_at": "2018-10-02T19:43:25Z", "author": "rishabhgarg25699", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNjUwNzMzOQ==", "fields": {"body": "@manankalra\nI have amended the commit message as per guidelines", "diff": null, "created_at": "2018-10-03T04:22:52Z", "last_edited_at": null, "author": "bhawesh96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzM4NjA4Nw==", "fields": {"body": "Hmm. I agree with coala/documentation#252 (comment)\nwhile in the case of #3754 (comment) , I guess you should add a box sought of thing which encloses the links in a well formated way e.g. in http://enwp.org/WP:W2W\nAnyways, lets wait other to review it.", "diff": null, "created_at": "2018-10-05T14:31:42Z", "last_edited_at": null, "author": "shikharvaish28", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzQ0MTkyMw==", "fields": {"body": "You are not following the commit guidelines\nChange your commit to something like this\ndocs: Add short url for newcomers guide\nCloses:", "diff": null, "created_at": "2018-10-05T17:32:59Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzQ0Mjk5OQ==", "fields": {"body": "How does it look?\n\n\nNice work there, looks pretty decent \ud83d\ude04 . Maybe you can reduce the height of that black box a little, or keep both the urls in independent black boxes ,Eg. Short URL [BOX1] [BOX2].\nIt's designing, so you'll have to design and check which one looks better  \ud83d\ude09 .\nThe changes you've done so far aren't visible at  https://deploy-preview-5788--coala-api.netlify.com/.\nYour'e not fixing any bug, so you're commit message shouldn't use fixes. Please refer to https://api.coala.io/en/latest/Developers/Writing_Good_Commits.html for details :)", "diff": null, "created_at": "2018-10-05T17:36:49Z", "last_edited_at": null, "author": "srivama", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzQ5MjY5Nw==", "fields": {"body": "Builds fail, did you try to find out the reason? @AkshJain99", "diff": null, "created_at": "2018-10-05T20:41:16Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzQ5MzAzNw==", "fields": {"body": "Actually nvm, your change doesn't affect anything that would lead to such an error. Approving, but merge has to wait until CI gets green again^^", "diff": null, "created_at": "2018-10-05T20:42:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzY3ODIxNA==", "fields": {"body": "@ayan-b Fixed, thanks for the pointers smile\n\nLooks good, just edit the PR message as well, i.e. here: #5789 (comment) .", "diff": null, "created_at": "2018-10-07T19:06:02Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzYyNDk5OA==", "fields": {"body": "@Makman2 @ayan-b Just a query. Why is it so that the changes aren't visible on netlify deploy?\n\nI have only added for newcomers guide: https://deploy-preview-5788--coala-api.netlify.com/developers/newcomers_guide", "diff": null, "created_at": "2018-10-07T04:28:20Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzYzNjA4Ng==", "fields": {"body": "Approach the problem in tasks.\nFirst check the log level and print and then proceed. The output is relayed to the log_printer, be sure to know what is happening and you will easily solve it.", "diff": null, "created_at": "2018-10-07T08:40:41Z", "last_edited_at": null, "author": "sladyn98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzcyNjk1Mw==", "fields": {"body": "Hello, @richardson-souza before sending the pr please check whether the code is following PEP8 guidelines or not,  you can have an IDE or an editor offering PEP8 checks to do the same. Secondly, you need to change the commit message as it is not following the expected style see here https://api.coala.io/en/latest/Developers/Writing_Good_Commits.html  and one more thing please tick mark the checkbox in your pr message description", "diff": null, "created_at": "2018-10-08T05:47:49Z", "last_edited_at": "2018-10-08T05:49:13Z", "author": "sourabh1031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzkwNjU5MA==", "fields": {"body": "@richardson-souza , please re-push to your branch richardson , and then re-open this PR.\nIt is never necessary to open a second PR.  You need to fix the existing PR.\nA PR is just a link to a branch name in your repo.", "diff": null, "created_at": "2018-10-08T16:55:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyODY0NjMzMA==", "fields": {"body": "@shikharvaish28 I have changed it", "diff": null, "created_at": "2018-10-10T16:47:55Z", "last_edited_at": null, "author": "AkshJain99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyODY5ODEyOA==", "fields": {"body": "@RaiVaibhav  I have change the commit message as you said \ud83d\ude04", "diff": null, "created_at": "2018-10-10T19:18:55Z", "last_edited_at": null, "author": "AkshJain99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyOTYyNjk3MA==", "fields": {"body": "Netlify has been failing here for a while.\nMigrating this to GitLab will work around that, as GitLab Pages will deploy to the forks CI, which can have GH and GL tokens, and is a bit easier to debug.\n#202 is part of that", "diff": null, "created_at": "2018-10-14T13:35:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyOTgxMzA4MA==", "fields": {"body": "@ManthanKeim just one suggestion never make a PR from your master, always checkout a new branch from the master for a particular issue and keep your master clean.\nWe can overlook this mistake for now but you should keep this best practice in mind so that you are able to work on multiple PRs simultaneously in the future \ud83d\ude09", "diff": null, "created_at": "2018-10-15T11:24:29Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMDE2MDk1OQ==", "fields": {"body": "GraphQL can be used with multiple languages, couldn't find an extension for it, except for a webpage which mentions .graphql.\n\nYep, there is no standard, but I see mostly people use .graphql. And see this facebook/graphql#203 (comment)", "diff": null, "created_at": "2018-10-16T09:08:09Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMDgyODkxMA==", "fields": {"body": "@sks444 , we dont have a good mechanism for managing logging for django CLI commands.  See #207", "diff": null, "created_at": "2018-10-17T23:55:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMDk5ODY0Mw==", "fields": {"body": "Do we have an issue about this?\nIf not, could you please create one.\nWe will get the CI fixed soon.", "diff": null, "created_at": "2018-10-18T12:59:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMDkzOTc2MQ==", "fields": {"body": "But according to PEP257 there needs no change in the PEP8bear.py ,so what type of change do I need to do to resolve this issue???\n\nIt is correct that the old docstring complies with PEP 257, so there is no benefit in these changes of indentation unless ...\nWe need to know why we are changing them.\nOtherwise this change of indentation is just random changes without purpose.\nThe code changes are fine.  It is the commit message which isnt.  And that is important.", "diff": null, "created_at": "2018-10-18T09:26:28Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMTI0MDQxNA==", "fields": {"body": "So @jayvdb I think this is sphinx format which coala repo is using as sphinx format is something in which parameter are necessary and also I have seen some sphinx related code in coala repo.\nIs it???", "diff": null, "created_at": "2018-10-19T04:21:25Z", "last_edited_at": "2018-10-19T04:50:35Z", "author": "AkshJain99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMTU2OTk3Mg==", "fields": {"body": "Right approach, but the bear is still complaining, suggesting changes to line 16", "diff": null, "created_at": "2018-10-20T10:52:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMTU3MTgxNQ==", "fields": {"body": "@jayvdb now I think it has been rebased \ud83d\ude05", "diff": null, "created_at": "2018-10-20T11:23:21Z", "last_edited_at": "2018-10-20T11:33:15Z", "author": "AkshJain99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMTU3NTMxMw==", "fields": {"body": "@sangamcse , this needs to be done in the moban template repo.  ping @ayan-b to help you.\nThe .svg needs to be sync'd to the template repo, and then the template repo's .css needs to be updated and propogated to both the documentation and coala repos.", "diff": null, "created_at": "2018-10-20T12:19:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMTY5Nzg2Mg==", "fields": {"body": "Test cases are failing. @amalrajan", "diff": null, "created_at": "2018-10-21T19:42:54Z", "last_edited_at": null, "author": "subhaminion", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMTYwODkyMg==", "fields": {"body": "@AkshJain99 - Yes, i'm trying to fix it.\nI don't need squashing. I need to remove some commits which is something i'm working on. Thanks for the heads up.", "diff": null, "created_at": "2018-10-20T18:56:40Z", "last_edited_at": "2018-10-20T18:57:32Z", "author": "blossomica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMTg4MzA4OQ==", "fields": {"body": "@sourabh1031 you haven't added body(optional) the fixes/closes issue part.\n\n\n@sourabh1031 you haven't added body(optional) the fixes/closes issue part.\n\n@ayan-b please check it now", "diff": null, "created_at": "2018-10-22T16:14:41Z", "last_edited_at": null, "author": "sourabh1031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMTg4MzYyOA==", "fields": {"body": "@sourabh1031 I guess shortlog exceeds 50 characters. Can you please check? And also specify the words you remove.", "diff": null, "created_at": "2018-10-22T16:16:26Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMjg5NTg0OA==", "fields": {"body": "You need to include your language in https://github.com/coala/coala/blob/master/coalib/bearlib/languages/__init__.py too.", "diff": null, "created_at": "2018-10-25T02:50:49Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMzEwMTE5OA==", "fields": {"body": "@ishanSrt We decide on gitter that here it will be two commits", "diff": null, "created_at": "2018-10-25T15:40:15Z", "last_edited_at": null, "author": "SerekKiri", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMzI2NDk4OQ==", "fields": {"body": "@CLiu13 , not yet ... let me have a bit more of a look at this new version.  Very strange ;-)", "diff": null, "created_at": "2018-10-26T02:23:18Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMzY5NzE2OA==", "fields": {"body": "@AkshJain99 There's a need for rebase \ud83d\ude04", "diff": null, "created_at": "2018-10-28T11:36:11Z", "last_edited_at": null, "author": "shikharvaish28", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzMzgwNjgxMQ==", "fields": {"body": "IIRC the number of unauthenticated GraphQL requests you get is lower than normal API hits. Since this is a PR, I think Travis removes the GH_TOKEN env variable for security reasons, so all the GraphQL requests are made unauthenticated. Might be why it is unable to fetch users after a certain point?", "diff": null, "created_at": "2018-10-29T07:00:48Z", "last_edited_at": "2018-10-29T07:01:52Z", "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzNDI3ODYzMQ==", "fields": {"body": "In addition, before committing your changes, it is absolutely necessary to run coala on your modified codebase. This will ensure that your changes are fully PEP-8 compliant. (Currently, after every push, you can see that the gitmate bot complains about some inconsistencies. Better to solve them locally, before committing).\nEDIT: nevermind, I guess the latest commit is fully compliant. Even then, in the future, I would recommend running coala just before a commit :)", "diff": null, "created_at": "2018-10-30T12:20:07Z", "last_edited_at": "2018-10-30T12:29:41Z", "author": "mach64", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzNTY1ODkzMQ==", "fields": {"body": "@jayvdb Vaibhav Rai is the mentor  before sending pr i asked whether whatever logic i am pushing is correct or not . Please don't think i am blaming vaibhav .", "diff": null, "created_at": "2018-11-04T10:42:07Z", "last_edited_at": "2018-11-04T10:43:11Z", "author": "sourabh1031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzNTY2OTQ0NQ==", "fields": {"body": "@RaiVaibhav sorry if it hurt your feelings but I thought that the logic you checked of mine was correct.\nand okay @jayvdb i will try to solve it again and yes i am responsible for writting correct logic not vaibhav otherwise there would be no meaning of issue to be solved by me", "diff": null, "created_at": "2018-11-04T13:25:40Z", "last_edited_at": null, "author": "sourabh1031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzODIwMjAwNw==", "fields": {"body": "I was also coming up with this same error while I tried to deploy on netlify. After spending few hours on debugging the code I found that the value of pathname in url is empty with name and  owner set to none, due to which that error is being raised. Maybe there is some fault/error in API or in code that I haven't checked yet or in environment varibales. While parsing the url it has to extract the information from the url that who is owner etc. like information but no idea why it isn't extracting the information for forked repositories. \ud83d\ude1e\nActually I was also trying to solve this problem from morning due to which I have to debug the code and due to this only I asked you that whether the logo was visible or not.", "diff": null, "created_at": "2018-11-13T09:44:56Z", "last_edited_at": "2018-11-13T09:47:04Z", "author": "KVGarg", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQzODU2Mjc5NQ==", "fields": {"body": "No problem @li-boxuan \ud83d\ude04", "diff": null, "created_at": "2018-11-14T07:19:30Z", "last_edited_at": null, "author": "abhishalya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ==", "fields": {"body": "Please make it to  https://coala.io instead https://coala.io/", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T12:19:56Z", "last_edited_at": "2017-11-03T14:42:32Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg==", "fields": {"body": "That is irrelevant", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T13:58:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA==", "fields": {"body": "This can be a bit misleading. I suggest you, write it in the form minified files (*.min.js) and backup files (*.orig).", "diff": "@@ -39,6 +39,15 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n+It can be used to define the type of files you usually\n+don't want to lint like minified files\n+and backup files (e.g. ``*.min.js``, ``*.orig``)", "created_at": "2017-11-03T14:36:02Z", "last_edited_at": "2017-11-03T14:41:58Z", "author": "troublemagnet", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA==", "fields": {"body": "Hmm that reads bad as a first sentence. Rather I would make some kind of citation at the end^^\nAlso:\n\nThe layout needs to be very clear that it is an unmodified copy only, and no editing of the text is desirable.\n\nNot sure that this intention gets to the reader here^^", "diff": "@@ -1,6 +1,8 @@\n What is Docker?\n ===============\n \n+According to `opensource.com <https://opensource.com/resources/what-docker>`__:", "created_at": "2017-11-15T17:21:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw==", "fields": {"body": "base url is a constant that may be needed again in future enhancements.", "diff": "@@ -17,20 +17,78 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n-async function fetchOrgsWithLeaders() {\n+async function searchGitHubOrgs(query) {\n+  const token = process.env.GITHUB_TOKEN\n+  const res = await fetch(\n+    `https://api.github.com/search/users?q=${query}%20type:org`,", "created_at": "2017-12-05T16:05:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA==", "fields": {"body": "Remove one of the spaces after the equals sign.\nWe should get coala working ASAP", "diff": "@@ -1,6 +1,7 @@\n const fs = require('fs')\n const Mustache = require('mustache')\n const orgs = require('./out/data.json')\n+const timestamp =  new Date(fs.statSync('./out/data.json').mtime).getTime()", "created_at": "2017-12-05T17:38:31Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ==", "fields": {"body": "Weird, ok. I can look into that more in a while, but for now adding both seems fine \ud83d\udc4d", "diff": "@@ -1,8 +1,15 @@\n ---\n+env:\n+  node: true", "created_at": "2017-12-06T08:27:32Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw==", "fields": {"body": "eslint-config-prettier is for turning off eslint rules that conflict with prettier\nhttps://github.com/prettier/eslint-plugin-prettier should be used instead", "diff": "@@ -12,5 +12,9 @@\n   \"dependencies\": {\n     \"mustache\": \"^2.3.0\",\n     \"node-fetch\": \"^1.7.3\"\n+  },\n+  \"devDependencies\": {\n+    \"eslint\": \"^4.12.1\",\n+    \"eslint-config-prettier\": \"^2.9.0\"", "created_at": "2017-12-05T23:51:12Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA==", "fields": {"body": "you can add node_modules/.bin to PATH\nand set NODE_PATH (see our dockerfile)\nhttps://github.com/coala/docker-coala-base/blob/master/Dockerfile#L10\nhttps://github.com/coala/coala-atom/blob/master/circle.yml#L32", "diff": "@@ -1,7 +1,15 @@\n-sudo: false\n-language: node_js\n+sudo: required\n+language: python\n+python: 3.6\n+\n+before_install:\n+  - nvm install 8\n+  - npm install\n+  - npm install -g eslint prettier eslint-plugin-prettier", "created_at": "2017-12-06T01:58:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ==", "fields": {"body": "The <script> tag can be put on the bottom of the body, after app.js", "diff": "@@ -21,6 +21,13 @@ <h1>Google Code-in 2017 Current Leaders</h1>\n     <i>\n       The leading participants for each organization are listed randomly. \n     </i>\n+    <div class=\"twitter\">\n+      <a class=\"twitter-timeline\"  href=\"https://twitter.com/hashtag/googlecodein\"\n+         data-widget-id=\"938830025809432577\">Tweets about GCI\n+      </a>\n+      <script src=\"static/js/twitter.js\"></script>", "created_at": "2017-12-08T04:04:21Z", "last_edited_at": "2017-12-08T04:15:53Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA==", "fields": {"body": "Otherwise it would have so many digits, so maybe not readable?", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen)/(24*3600*1000)\n+const timeLeft = (noClaims-today)/(24*3600*1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100-(timeLeft/totalTime)*100)", "created_at": "2017-12-10T13:19:40Z", "last_edited_at": null, "author": "Grox-Ni", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw==", "fields": {"body": "I prefer this to be in the frontend, because we might not do build everyday.\nUse and modify timeDifference function inside static/js/app.js.", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen) / (24 * 3600 * 1000)\n+const timeLeft = (noClaims - today) / (24 * 3600 * 1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100 - timeLeft / totalTime * 100)", "created_at": "2017-12-10T13:26:14Z", "last_edited_at": "2017-12-10T13:31:14Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw==", "fields": {"body": "As this is invalid on a fork, I think these should be in Travis environment variables. (also COMMIT_*).", "diff": "@@ -1,6 +1,11 @@\n language: python\n python: 3.6\n \n+env:\n+  global:\n+    - ENCRYPTION_LABEL: \"b7c548322a41\"", "created_at": "2017-12-10T14:15:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA==", "fields": {"body": "In my version, the build is not in the deploy script.  The deploy script should take a built version, and overlay it on the previous built version.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN\n+    npm run build\n+    return\n+fi\n+\n+# Save some useful information\n+REPO=`git config remote.origin.url`\n+SSH_REPO=${REPO/https:\\/\\/github.com\\//git@github.com:}\n+SHA=`git rev-parse --verify HEAD`\n+\n+# Clone the existing gh-pages for this repo into out/\n+# Create a new empty branch if gh-pages doesn't exist yet (should only happen on first deploy)\n+rm -r out\n+git clone $REPO out\n+cd out\n+git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH\n+cd ..\n+\n+# Clean out existing contents\n+rm -rf out/*\n+\n+# Run our compile script\n+npm run build", "created_at": "2017-12-10T14:17:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA==", "fields": {"body": "the PR wont get an env var on Travis, or any other sane system (Netlify isnt sane/safe), so this is useless on Travis.\nbut more importantly, this is useless.  If the token is available here, a malicious person could modify this script to emit it to the log , or send it via email to themselves, or anything.\nHowever this isnt such a large problem if the token in GITHUB_TOKEN has no scopes which allow greater access than the malicious person could obtain themselves.  The worst they can do is abuse the token so that GitHub cancels it, breaking the builds.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN", "created_at": "2017-12-10T14:23:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA==", "fields": {"body": "maybe condition: \"$ENCRYPTION_LABEL\" = \"\" ?", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:21:08Z", "last_edited_at": "2017-12-10T15:21:19Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ==", "fields": {"body": "^ Yup, tested on my fork.", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:52:27Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg==", "fields": {"body": "I'd prefer the chat platform type to be included also, to give a bit of clarity in the JSON.", "diff": "@@ -84,13 +95,19 @@ async function fetchOrgsWithData() {\n   const orgs = await fetchOrgs()\n   const fetchingLeaders = orgs.map(org => fetchLeaders(org.id))\n   const fetchingGitHub = orgs.map(org => findOrganization(org))\n+  const fetchingChat = orgs.map(org => chattie(org.irc_channel))\n   const orgLeaders = await Promise.all(fetchingLeaders)\n   const orgGitHub = await Promise.all(fetchingGitHub)\n+  const orgChats = await Promise.all(fetchingChat)\n \n   return orgs.map((org, index) =>\n     Object.assign(org, {\n       leaders: orgLeaders[index],\n       github: orgGitHub[index],\n+      chat: {\n+        url: orgChats[index].url,\n+        image: CHAT_IMAGES[chattie.CHAT[orgChats[index].type]],", "created_at": "2017-12-10T22:29:03Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw==", "fields": {"body": "ESLint wants this all on one line", "diff": "@@ -127,6 +128,18 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n-  fs.writeFileSync(`${__dirname}/../out/data.json`, JSON.stringify(data))\n+  // readable JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.json`,\n+    JSON.stringify(data, null, 2)\n+  )\n+  // minified JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.min.json`,\n+    JSON.stringify(data)\n+  )", "created_at": "2017-12-11T05:23:50Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ==", "fields": {"body": "EOF", "diff": "@@ -128,4 +157,4 @@ <h3>\n     <script src=\"static/js/app.js\"></script>\n     <script src=\"static/js/twitter.js\"></script>\n   </body>\n-</html>\n+</html>", "created_at": "2017-12-11T06:19:53Z", "last_edited_at": "2017-12-11T06:25:53Z", "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA==", "fields": {"body": "Don't use the org's image for their website prompt. Usually a globe is used, similar to https://image.flaticon.com/icons/png/128/12/12195.png (you might need to find one from somewhere else or give proper attribution for that one).", "diff": "@@ -92,26 +107,40 @@ <h3>\n                 {{name}}\n               </a>\n             </h3>\n-            <p>Tasks Completed: {{completed_task_instance_count}}\n-              {{#github}}\n+            <p>Tasks Completed: {{completed_task_instance_count}}</p>\n+            {{#github}}\n               <a href=\"https://github.com/{{github}}\">\n                 <img\n                   src=\"https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\"\n                   class=\"github\"\n                 />\n               </a>\n-              {{/github}}\n-              {{#mailing_list}}\n+            {{/github}}\n+            {{#mailing_list}}\n               <a href=\"{{mailing_list}}\">\n                 <img src=\"static/images/mail.png\" class=\"chat\" />\n               </a>\n-              {{/mailing_list}}\n-              {{#chat}}\n+            {{/mailing_list}}\n+            {{#chat}}\n               <a href=\"{{chat.url}}\">\n                 <img src=\"{{chat.image}}\" class=\"chat\" />\n               </a>\n-              {{/chat}}\n-            </p>\n+            {{/chat}}\n+            {{#twitter_url}}\n+              <a href=\"{{twitter_url}}\">\n+                <img src=\"static/images/logos/twitter.png\" class=\"chat\" />\n+              </a>\n+            {{/twitter_url}}\n+            {{#gplus_url}}\n+              <a href=\"{{gplus_url}}\">\n+                <img src=\"static/images/logos/gplus.png\" class=\"chat\" />\n+              </a>\n+            {{/gplus_url}}\n+            {{#website_url}}\n+              <a href=\"{{website_url}}\">\n+                <img src=\"https://{{image_url}}\" class=\"chat\" />", "created_at": "2017-12-11T06:23:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA==", "fields": {"body": "fyi, there is a flag to turn off creation of .orig files.", "diff": "@@ -3,3 +3,4 @@ out/*\n !out/.keep\n yarn.lock\n .DS_Store\n+**.orig", "created_at": "2017-12-12T04:32:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ==", "fields": {"body": "could this be JavaScript, so it can be incorporated into the npm build process ?", "diff": "@@ -11,6 +11,7 @@ before_install:\n script:\n   - coala --non-interactive -V\n   - npm run build\n+  - ./.ci/gather_data.sh", "created_at": "2017-12-13T04:30:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw==", "fields": {"body": "Remove the contents instead of the folder\ni.e. rm -rf out/*\nand if you do that you don't need to recreate the .keep file", "diff": "@@ -4,7 +4,12 @@\n   \"description\": \"\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n-    \"build\": \"node ./lib/scrape.js && node ./lib/generate.js\"\n+    \"scrape\": \"node ./lib/scrape.js\",\n+    \"generate\": \"node ./lib/generate.js\",\n+    \"gather\": \"node ./lib/gather.js\",\n+    \"clean\": \"rm -rf out && mkdir -p out && touch out/.keep\",", "created_at": "2017-12-13T06:50:20Z", "last_edited_at": "2017-12-13T06:52:46Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA==", "fields": {"body": "Shhh... \ud83d\ude0b", "diff": "@@ -210,11 +220,14 @@ async function findWiki(name) {\n }\n \n async function findGitHubUser({ display_name }, org) {\n+=======\n+async function findGitHubUser(displayName, org) {\n+>>>>>>> scrape.js: Reduce number of API calls", "created_at": "2017-12-13T07:20:39Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA==", "fields": {"body": "Maybe in that case https:${wikidataurl}?", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {\n+      const wikipediaurl = wdk.getSitelinkUrl(sitelink['enwiki'])\n+      return {\n+        url: wikipediaurl,\n+        type: 'wikipedia',\n+      }\n+    } else {\n+      return {\n+        url: 'https:' + wikidataurl,", "created_at": "2017-12-12T22:03:28Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg==", "fields": {"body": "In future(with i18n) this should become language_code + 'wiki'. So that'd probably bring us back to this way...", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {", "created_at": "2017-12-12T22:06:35Z", "last_edited_at": null, "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA==", "fields": {"body": "IMO we should remove all translation for now and only keep en or 2.", "diff": "@@ -0,0 +1,21 @@\n+{\n+  \"page-title\": \"Google Code-in 2017 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0928\u0947\u0924\u093e\",\n+  \"last-updated\": \"\u0906\u0916\u0930\u0940 \u0905\u092a\u0921\u0947\u091f\",", "created_at": "2017-12-14T06:10:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA==", "fields": {"body": "Yep, seems to not be working. But in that case just skip over it and only use working XML feeds. That'll be encouragement to get the coala feed fixed \ud83d\ude09", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',\n+]", "created_at": "2017-12-15T03:21:22Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ==", "fields": {"body": "Make it so that when the parser failed it's skipping instead of \"breaking\".", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',", "created_at": "2017-12-15T03:23:31Z", "last_edited_at": "2017-12-15T03:23:40Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg==", "fields": {"body": "if (blog_url) is enough, I think.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(\n+    data.map(org => {\n+      const { blog_url } = org\n+      if (blog_url != null && blog_url != '') {", "created_at": "2017-12-16T13:19:29Z", "last_edited_at": "2017-12-16T13:45:03Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA==", "fields": {"body": "Probably looks neater if you put it inside variable first and then use Promise.all().\nAlso, async function please, instead of then.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(", "created_at": "2017-12-16T13:24:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ==", "fields": {"body": "JSON doesn't have linebreaks and the translations for some strings are too long for the linelength limit.", "diff": "@@ -9,7 +9,7 @@ bears = SpaceConsistencyBear\n default_actions = *: ApplyPatchAction\n \n [all.linelength]\n-ignore += **.html\n+ignore += **.html, static/js/i18n/**.json", "created_at": "2017-12-16T15:25:06Z", "last_edited_at": null, "author": "margobra8", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng==", "fields": {"body": "Maybe create a new file that holds the last updated time.\nWe have many generated files (org data, blog planet, dates) and that'll give the last updated time to all of that data.", "diff": "@@ -369,14 +377,19 @@ async function fetchDates() {\n }\n \n ;(async () => {\n-  const data = await fetchOrgsWithData()\n+  const orgs = await fetchOrgsWithData()\n   const dates = await fetchDates()\n \n   // sort data by completed_task_instance_count\n-  data.sort(\n+  orgs.sort(\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  const data = {\n+    orgs: sortKeys({ orgs }, { deep: true }).orgs,\n+    lastUpdated: new Date(),", "created_at": "2017-12-20T10:49:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw==", "fields": {"body": "The rss module does this automatically for me. See the output: https://deploy-preview-95--gci-leaders.netlify.com/feed.xml", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,", "created_at": "2017-12-20T17:25:53Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ==", "fields": {"body": "Do we need this? or is this for debugging, we might want a fancier log message or just throw this away completely.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)", "created_at": "2017-12-20T11:47:18Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg==", "fields": {"body": "We might want to fetch this like data.json or the file will not be available on every build.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()", "created_at": "2017-12-20T11:48:36Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg==", "fields": {"body": "Might want to add description.\nThe value can be a readable form of property:old and property:new", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,", "created_at": "2017-12-20T12:01:09Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw==", "fields": {"body": "Every new .js is loading this file again.  And creating a new script , and a longer build command.\nIf these .js are modularised, the data can be parsed once and passed around .", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()", "created_at": "2017-12-20T12:38:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ==", "fields": {"body": "@andrewda went afk, still isn't finished yet. Have yet to remove debug lines", "diff": "@@ -0,0 +1,24 @@\n+function twitter_filter() {\r\n+  var twitter_handles = [];\r\n+  for(var i=0; i<document.getElementsById(\"org-info\"); i++) {\r\n+    var org_info = document.getElementsById(\"org-info\");\r\n+    for(var j=0; i<org_info.children.length; i++) {\r\n+      if(org_info.children[j].href.startsWith(\"https://twitter.com/\")) {\r\n+        twitter_handles.push(org_info.children[j].href.substr(20));\r\n+      }\r\n+    }\r\n+  }\r\n+  console.log(twitter_handles);\r", "created_at": "2017-12-20T21:07:08Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ==", "fields": {"body": "So we can run array function like filter ;)\nYou can use Array.from() instead, more readable.", "diff": "@@ -8,5 +8,40 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('load', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode\n+  var twitter_prefix = 20\n+  var twitter_handles = []\n+  var orgs = document.getElementsByClassName('org-info')\n+  for (var i = 0; i < orgs.length; i++) {\n+    var org_info = orgs[i]\n+    for (var j = 0; j < org_info.children.length; j++) {\n+      if (org_info.children[j].href) {", "created_at": "2017-12-21T22:33:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg==", "fields": {"body": "@dob9601 If you do rebase, you can use import and put that in utils file.", "diff": "@@ -8,5 +8,43 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode", "created_at": "2017-12-24T00:50:58Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ==", "fields": {"body": "store in a repo_info.graphql ?\nthe variables are part of the language.", "diff": "@@ -0,0 +1,30 @@\n+module.exports.REPO_INFO_QUERY = `", "created_at": "2017-12-24T02:30:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA==", "fields": {"body": "Can we remove all of these rulers? They look annoying.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***", "created_at": "2017-12-24T04:31:51Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw==", "fields": {"body": "Better to use === instead of ==. See https://github.com/airbnb/javascript#comparison--eqeqeq.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks\n+          .map(u => {\n+            const createdAt = new Date(u.createdAt)\n+            if (createdAt.getTime() > COMPETITION_OPEN.getTime()) {\n+              return u.owner.login.toLowerCase()\n+            }\n+          })\n+          .filter(login => login)\n+      )\n+\n+    repo.watchers.forEach(watcher => {\n+      if (watcher.name) {\n+        names[watcher.name.toLowerCase()] = watcher.login\n+      }\n+    })\n+  })\n+\n+  logins = logins.filter((item, pos, self) => self.indexOf(item) == pos)", "created_at": "2017-12-24T06:38:05Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw==", "fields": {"body": "Group that let and const. See https://github.com/airbnb/javascript#variables--const-let-group.", "diff": "@@ -1,16 +1,22 @@\n const fetch = require('node-fetch')\n+const GraphQL = require('graphql-client')\n const chattie = require('chattie')\n const fs = require('fs')\n const json2yaml = require('json2yaml')\n const validUsername = require('valid-github-username')\n const wdk = require('wikidata-sdk')\n \n+const { REPO_INFO_QUERY } = require('./queries')\n+\n const GH_BASE = 'https://github.com'\n const GH_USER_BASE = `${GH_BASE}/users`\n const GH_ORG_BASE = `${GH_BASE}/orgs`\n const GH_API_BASE = 'https://api.github.com'\n+const GH_GQL_BASE = 'https://api.github.com/graphql'\n const GCI_API_BASE = 'https://codein.withgoogle.com/api'\n \n+let COMPETITION_OPEN", "created_at": "2017-12-24T06:35:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA==", "fields": {"body": "An issue is a very noticable action.  It is a new thing, and the malicious person is the creator.\nA review is not quite as noticeable, but it would need to be done on an obscure open PR in order to not be noticed.\nEither would likely be seen as intentional confusion, maybe suitable for GitHub to investigate as 'abuse'.\nstars/watches/forks are almost invisible.  And it is very hard to file 'abuse' with GitHub for doing those actions.\nYour issue is a specific attempt to do #8 .\nThe biggest problem is that so far this algorithm has a lower confidence level than the previous algorithms, but it is being used first.  This could be used to override the existing algorithms, which are more reliable.\nOnce you have a potential match, which wasnt found using the existing more reliable algorithms, you need to look at the match profiles to determine how you can increase the confidence level of your match.  The more effort you require of the abuser, the more likely their abuse can only be viewed as intentional or at least highly suspicious.\nProbably also a good idea to annotate each match with the matching method used.\nAPI hits isn't relevant now, as the hits can grow over time.  You can include probable matches in the yaml which are not included in the rendered page, as they are needing more analysis deferred until a subsequent build has extra API calls to use.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks", "created_at": "2017-12-24T06:46:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg==", "fields": {"body": "And it can be autodetected using shields.io, so may as well do that instead of hardcoding it.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***\n+This is a website to show the current leaders from all organizations in GCI.\n+***\n+ * [Installation](#installation)\n+ * [Languages](#languages)\n+ * [Usage](#usage)\n+ * [Getting Involved](#getting-involved)\n+ * [Support](#support)\n+ * [Authors](#authors)\n+ * [License](#license)\n+***\n+### Installation\n+```\n+npm install\n+```\n+***\n+### Languages:\n+* Node.js\n+* JSON\n+***\n+### Usage:\n+```\n+npm run build\n+```\n+***\n+### Getting Involved\n+If you would like to be a part of the coala community, you can check out our [Getting In Touch](http://coala.readthedocs.io/en/latest/Help/Getting_In_Touch.html) page or ask us at our active Gitter channel, where we have maintainers from all over the world. We appreciate any help!\n+\n+We also have a [newcomer guide](http://api.coala.io/en/latest/Developers/Newcomers_Guide.html) to help you get started by fixing an issue yourself! If you get stuck anywhere or need some help, feel free to contact us on Gitter or drop a mail at our [newcomer mailing list](https://groups.google.com/forum/#!forum/coala-newcomers).\n+***\n+### Support\n+Feel free to contact us at our [Gitter channel](https://gitter.im/coala/coala), we'd be happy to help!\n+\n+If you are interested in commercial support, please contact us on the Gitter channel as well.\n+\n+You can also drop an email at our [mailing list](https://github.com/coala/coala/wiki/Mailing-Lists).\n+***\n+### Authors\n+You can contact to author for more information.\n+[blazeu](mailto:neversleepman@tfwno.gf)\n+***\n+### License\n+[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)", "created_at": "2017-12-25T14:34:47Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ==", "fields": {"body": "Use !== please.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {", "created_at": "2017-12-25T14:42:41Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng==", "fields": {"body": "Use let or const instead.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {\n+      const twitter_account = twitter_url[0].pathname.substr(1)\n+      twitter_handles.push(twitter_account)\n+    }\n+  }\n+  \n+  if (document.getElementById(twitter_id) !== null) {\n+    const tweet_authors = document\n+      .getElementById(twitter_id)\n+      .contentWindow.document.getElementsByClassName(\n+        'TweetAuthor-screenName Identity-screenName'\n+      )\n+      \n+    if (tweet_authors.length > 0) {\n+      for (var k = 0; k < tweet_authors.length; k++) {\n+        if (\n+          twitter_handles.indexOf(tweet_authors[k].innerHTML.substr(1)) > -1\n+        ) {\n+          var tweet = getNodesDeep(tweet_authors[k], 5)", "created_at": "2017-12-25T14:43:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA==", "fields": {"body": "Makes it import { getNodesDeep } from 'utils' please.", "diff": "@@ -1,3 +1,5 @@\n+import {getNodesDeep} from 'utils.js'", "created_at": "2017-12-25T14:42:21Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg==", "fields": {"body": "a README in that directory would be useful.  Also for CC licenses, the full text of the license isnt necessary.  A link is acceptable, and a link to the license file in their repo is really good, as it allows the reader to find the original, which is the intent of CC.", "diff": "@@ -57,6 +57,15 @@ <h3>\n                 />\n               </a>\n             {{/github}}\n+            {{#gitlab}}\n+              <a href=\"https://gitlab.com/{{gitlab}}\">\n+                <img\n+                  src=\"images/logos/gitlab.png\"", "created_at": "2017-12-26T05:29:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA==", "fields": {"body": "Can you please update the color? Somebody will be blind. Update the font color to white for example.", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T07:42:35Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng==", "fields": {"body": "Also, crimson or orangered is better than red", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T08:21:51Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg==", "fields": {"body": "No need, honestly. It's just one line.", "diff": "@@ -55,5 +56,8 @@\n \t\t</TMPL_LOOP>\n \t</ul>\n </div>\n+<script>\n+twemoji.parse(document.body);", "created_at": "2017-12-29T06:28:56Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ==", "fields": {"body": "@andrewda While some hr elements not using backslash, there is some img elements using backslash. We need to fix this later. Consistency is important.", "diff": "@@ -209,7 +209,8 @@ <h3>\n     </div>\n     <footer>\n       <small data-i18n=\"gci-copyright\">Google Code-in and the Google Code-in logo are trademarks of Google Inc.</small><br />\n-      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small>\n+      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small><br />", "created_at": "2018-01-11T08:00:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng==", "fields": {"body": "we probably don't want this as venv is created here only for using coala whereas in the development setup notes coala-venv is created for the purpose of development.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T09:54:17Z", "last_edited_at": null, "author": "saksham189", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA==", "fields": {"body": "Since it's venv in the rest documentation, use venv only. Didn't note that before. ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:03Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ==", "fields": {"body": "@diveshuttam yea i just had a look and IMO you can carry on withvenv and later on file an issue to change it after asking a maintainer ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:36Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ==", "fields": {"body": "@pareksha @newbazz @diveshuttam I agree with you guys on being consistent with the naming convention. However my comment was only regarding functionality either way \ud83d\ude0a", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T16:32:11Z", "last_edited_at": null, "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA==", "fields": {"body": "@pareksha  @anctartica actually, naming the virtual environment doesn't change its functionality. Using either venv or coala-venv is correct.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:00:41Z", "last_edited_at": "2018-01-22T13:01:01Z", "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA==", "fields": {"body": "yes, i know.. was referring to the context in which the name is used in the documentation", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:06:51Z", "last_edited_at": null, "author": "saksham189", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA==", "fields": {"body": "I have already mentioned that the user will not see a version number if virtualenv is not installed and I think the output message would be pretty obvious to know that its not installed yet", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:\n+", "created_at": "2018-01-31T16:45:40Z", "last_edited_at": null, "author": "lilithxxx", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ==", "fields": {"body": "You need to explain the use of --user flag.", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:", "created_at": "2018-02-05T07:31:55Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw==", "fields": {"body": "till -> until\nRather avoid slang ;)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular\n+section in them (you have not specified any particular sections till", "created_at": "2018-02-22T20:44:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ==", "fields": {"body": "You could actually say \"This special section\" (because it really is special in coala's setting system)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:44:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw==", "fields": {"body": "Maybe say that \"This section groups all the settings that are entered via ...\", because the purpose of sections are their grouping-ability.", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:45:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA==", "fields": {"body": "--> \"that don't belong to a particular section\", I think this one is better :)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular", "created_at": "2018-02-22T20:47:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg==", "fields": {"body": "Ah :3 Regarding \u261d\ufe0f  edf0dae#r170088538\nSo this is what should come earlier, in the Configuration Files - coafiles-paragraph.", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng==", "fields": {"body": "Hm not sure we should encourage people to name it \"all\". But yeah, maybe a good convention in future? Not sure :3", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:28Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzNjk1NQ==", "fields": {"body": "if you add () to this rule then your test case would pass. You should add more test cases where this would fail even with () to show that it is invalid.", "diff": "@@ -105,7 +105,22 @@ def extract_links_from_file(file, link_ignore_regex, link_ignore_list):\n             https?://                   # http:// or https:// as only these\n                                         # are supported by the ``requests``\n                                         # library\n-            [^.:%\\s_/?#[\\]@\\\\]+         # Initial part of domain", "created_at": "2018-03-31T17:09:53Z", "last_edited_at": "2018-03-31T17:10:31Z", "author": "saksham189", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTAyMQ==", "fields": {"body": "check the comments on the issue", "diff": "@@ -39,7 +39,7 @@ def setup_dependencies(self):\n             nltk.download([\n                 'punkt',\n                 'averaged_perceptron_tagger',\n-            ])\n+            ], quiet=True)", "created_at": "2018-04-05T12:12:39Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzE1NQ==", "fields": {"body": "Remove after debugging", "diff": "@@ -138,6 +138,21 @@ export function parseRoute({params, routes, location}) {\n class FilterState {\n   constructor(state) {\n     this.state = state;\n+    if (this.state.repoInfos.length === 0) {\n+      const repositories = process.env.REPOSITORIES || 'coala';\n+      const repoOwner = 'coala'; //default repoOwner\n+\n+      // extracting repo names\n+      let repoNames = repositories.substring(repositories.indexOf(\":\") + 1).split(\"|\");\n+\n+      let arr = [];\n+      repoNames.forEach(repoName => {\n+        arr.push({ repoOwner, repoName});\n+      })\n+\n+      this.state.repoInfos = arr;\n+    }\n+    console.log(this.state.repoInfos)", "created_at": "2018-04-08T10:34:16Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MDc3NQ==", "fields": {"body": "Most of these tasks are handled already by IGitt, I recommend using that.", "diff": "@@ -102,6 +105,70 @@ def get_host_from_remotes():\n             netloc = urlparse(url)[1]\n         return netloc.split('.')[0]\n \n+    @staticmethod\n+    def get_owner_from_url(url):", "created_at": "2018-04-09T13:19:01Z", "last_edited_at": null, "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MjEzOA==", "fields": {"body": "Again as @nalinbhardwaj  mentioned earlier, we do support GitLab host also\nSo limiting to GithubAPI could limit the user to not being able to check for issue on other hosts\nIgitt is perhaps the place to handle such stuff", "diff": "@@ -102,6 +105,70 @@ def get_host_from_remotes():\n             netloc = urlparse(url)[1]\n         return netloc.split('.')[0]\n \n+    @staticmethod\n+    def get_owner_from_url(url):\n+        return urlparse(url)[2].split('/')[1]\n+\n+    @staticmethod\n+    def get_repository_from_url(url):\n+        return urlparse(url)[2].split('/')[2]\n+\n+    @staticmethod\n+    def get_owner_from_remote(remote):\n+        \"\"\"\n+        Retrieve the owner from the specified remote.\n+        \"\"\"\n+        url, _ = run_shell_command(\n+                \"git config --get-regex '^remote.{}.url$'\".format(remote))\n+        url = url.split()\n+        if len(url) == 0:\n+            return None\n+        url = url[-1]\n+\n+        if 'git@' in url:\n+            user = re.findall(r':(.*?)/', url)[0]\n+        else:\n+            user = urlparse(url)[2].split('/')[1]\n+        return user\n+\n+    @staticmethod\n+    def get_repository_from_remote(remote):\n+        \"\"\"\n+        Retrieve the owner from the specified remote.\n+        \"\"\"\n+        url, _ = run_shell_command(\n+                \"git config --get-regex '^remote.{}.url$'\".format(remote))\n+        url = url.split()\n+        if len(url) == 0:\n+            return None\n+        url = url[-1]\n+\n+        if 'git@' in url:\n+            repository = re.findall(r'/(.*?).git', url)[0]\n+        else:\n+            repository = urlparse(url)[2].split('/')[2][:-4]\n+        return repository\n+\n+    @staticmethod\n+    def is_issue_open(owner, repo, issue_id):\n+        github_get_issue_api = 'https://api.github.com/repos/{}/{}/issues/{}'", "created_at": "2018-04-09T13:23:44Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw==", "fields": {"body": "Just do multiple variable on a single destructuring line { a, b, c }", "diff": "@@ -9,17 +9,16 @@ const wdk = require('wikidata-sdk')\n const cheerio = require('cheerio')\n \n const { GITHUB_REPO_INFO_QUERY } = require('./queries')\n+const { GITHUB_SEARCH_ORG_QUERY } = require('./queries')\n+const { GITHUB_USER_INFO_QUERY } = require('./queries')", "created_at": "2018-04-17T11:51:49Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA==", "fields": {"body": "since rultor died pre tag hasn't been updated for coala. Hardly likely it's done for coala quick start. You must remove this.", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre", "created_at": "2018-04-19T06:45:05Z", "last_edited_at": "2018-04-19T06:47:36Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw==", "fields": {"body": "coala-quickstart coala Quickstart\n\"Generating a .coafile using coala-quickstart\" sounds better", "diff": "@@ -27,6 +27,7 @@ Welcome to the coala documentation!\n    Installing coala <Users/Install>\n    Getting Started with coala <Users/Tutorial>\n    Writing a coala Configuration File (coafile and coarc) <Users/coafile>\n+   Using coala Quickstart to Generate a .coafile <Users/coala_quickstart.rst>", "created_at": "2018-04-19T06:50:10Z", "last_edited_at": "2018-04-19T06:50:27Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA==", "fields": {"body": "this tool called", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called", "created_at": "2018-04-19T06:54:42Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw==", "fields": {"body": "use it, to", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.", "created_at": "2018-04-19T06:55:14Z", "last_edited_at": "2018-04-19T06:56:51Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ==", "fields": {"body": "this doesn't seem much of a feature, you can add automatic detection of bear settings instead of this", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your", "created_at": "2018-04-19T06:58:02Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA==", "fields": {"body": "then", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages", "created_at": "2018-04-19T07:02:44Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA==", "fields": {"body": "After that you will --> You will now", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears", "created_at": "2018-04-19T07:02:27Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ==", "fields": {"body": "good to go --> done!", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are good to go.", "created_at": "2018-04-19T07:03:52Z", "last_edited_at": "2018-04-19T07:07:54Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA==", "fields": {"body": "cli -> CLI", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with", "created_at": "2018-04-19T07:25:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ==", "fields": {"body": "new paragraph for \"It ...\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages", "created_at": "2018-04-19T07:25:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA==", "fields": {"body": "\"fire up\" -> \"execute\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's", "created_at": "2018-04-19T07:27:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA==", "fields": {"body": "shouldnt editing .coafile be done before running coala?", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's\n+root:\n+\n+::\n+\n+    $ coala\n+\n+You can also open the .coafile in your favorite editor and edit the settings", "created_at": "2018-04-19T07:27:28Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA==", "fields": {"body": "you add the clone, cd and then pip install . method for latest development version", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+", "created_at": "2018-04-19T07:32:45Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIwOTkxOA==", "fields": {"body": "That feels like a bug in process_output_corrected.  If there was an error, the linter can only emit \\n on stdout.  It shouldnt decide that means the file should be blanked.", "diff": "@@ -23,13 +23,17 @@ class PrettierLintBear:\n                   'Multi-line objects'}\n     SEE_MORE = 'https://prettier.io/'\n \n-    regex = re.compile(r'L(?P<line>\\d+)C(?P<column>\\d+): (?P<message>.*)')\n+    regex = re.compile(\n+        r'(?P<message>SyntaxError:.*) '\n+        r'\\((?P<line>\\d+):(?P<column>\\d+)\\)')\n \n     def process_output(self, output, filename, file):\n         stdout, stderr = output\n-        yield from self.process_output_corrected(stdout, filename, file)\n-        yield from self.process_output_regex(stderr, filename, file,\n-                                             self.regex)\n+        if stdout == '\\n':", "created_at": "2018-04-21T13:33:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg==", "fields": {"body": "@manankalra Looks good. \ud83d\udc4d\nI also agree with you that adding \"on_success: never\" should be there as well. Gitmate automatically approves the PR if all CI passes, so there should ideally be no message in that case. \ud83d\ude04", "diff": "@@ -11,6 +11,7 @@ script:\n \n notifications:\n   email: false\n+  webhooks: https://www.travisbuddy.com/", "created_at": "2018-04-24T04:40:15Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA==", "fields": {"body": "I don't think it's necessary to convert method other than event listener to class properties, this is still this class because it's not called from event listener.\nRelated https://stackoverflow.com/questions/44423947/javascript-class-methods-versus-properties#comment75847321_44424064", "diff": "@@ -26,11 +25,13 @@ const FilterCategory = React.createClass({\n       }\n       return true;\n     });\n-  },\n-  onFilterInputChange(e) {\n+  };\n+\n+  onFilterInputChange = (e) => {\n     this.setState({filterStr: e.currentTarget.value});\n-  },\n-  renderItem(item) {\n+  };\n+\n+  renderItem = (item) => {", "created_at": "2018-05-01T15:19:21Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0OTA4Mg==", "fields": {"body": "This can be converted to functional component.\nAll component with only render method can be functional component, I'll stop marking.", "diff": "@@ -49,9 +49,9 @@ const ListGroupWithMore = React.createClass({\n       </BS.ListGroup>\n     );\n   }\n-});\n+}\n \n-const RepoItem = React.createClass({\n+class RepoItem extends React.Component {\n   render() {", "created_at": "2018-05-01T15:28:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ==", "fields": {"body": "Could just be me, but I much prefer extends Component over extends React.Component. (i.e. importing Component using import React, {Component} from 'react')", "diff": "@@ -6,7 +6,7 @@ import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n+class AnonymousModal extends React.Component {", "created_at": "2018-05-01T16:28:59Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI4OTY1OA==", "fields": {"body": "Yeah, let's do that.\nAdditionally, babel-plugin-react-require can be used to auto import React when the file only has functional component that doesn't need to extends from Component", "diff": "@@ -6,7 +6,7 @@ import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n+class AnonymousModal extends React.Component {", "created_at": "2018-05-01T18:04:57Z", "last_edited_at": "2018-05-01T18:05:18Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTQ1OA==", "fields": {"body": "Maybe we could leave this as a separate issue? If we decide to move back to normal methods, we need careful reviews. Errors are likely to be missed in this large PR.\nIf I move some inappropriate methods back to use normal class methods, there would be no diff for that method in this PR, which is almost impossible for reviewers to detect if I make any errors.", "diff": "@@ -26,11 +25,13 @@ const FilterCategory = React.createClass({\n       }\n       return true;\n     });\n-  },\n-  onFilterInputChange(e) {\n+  };\n+\n+  onFilterInputChange = (e) => {\n     this.setState({filterStr: e.currentTarget.value});\n-  },\n-  renderItem(item) {\n+  };\n+\n+  renderItem = (item) => {", "created_at": "2018-05-05T01:58:12Z", "last_edited_at": "2018-05-05T02:02:22Z", "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTY0Nw==", "fields": {"body": "You made the your own getTime function below.", "diff": "@@ -1,64 +1,211 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: moment(node.updatedAt).toDate().getTime(),", "created_at": "2018-05-05T02:07:31Z", "last_edited_at": "2018-05-05T02:09:28Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTcwMA==", "fields": {"body": "Can be turned into arrow function and put at the very top.", "diff": "@@ -1,64 +1,211 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: moment(node.updatedAt).toDate().getTime(),\n+        issue: {\n+          htmlUrl: node.url,\n+          number: node.number,\n+          title: node.title,\n+          body: node.bodyText,\n+          comments: node.comments.totalCount,\n+          updatedAt: node.updatedAt,\n+          state: node.state,\n+          user: {\n+            login: node.author ? node.author.login : null,\n+            avatarUrl: node.author? node.author.avatarUrl : null\n+          },\n+          milestone: {\n+            title: node.milestone ? node.milestone.title : null,\n+            createdAt: node.milestone? node.milestone.createdAt : null,\n+            dueOn: node.milestone? node.milestone.dueOn : null,\n+            state: node.milestone? node.milestone.state : null,\n+            htmlUrl: node.milestone? node.milestone.url : null,\n+            description: node.milestone? node.milestone.description : null,\n+          },\n+          labels: node.labels.nodes.map(label => ({\n+            name: label.name,\n+            color: label.color\n+          }))\n         }\n-      })\n+      };\n+      if (!isIssue) {\n+        info.pullRequest = {\n+          htmlUrl: node.url\n+        };\n+      }\n+      return info;\n+    });\n+    data = data.concat(result);\n+    if (hasPreviousPage && (pageCount < pageThreshold || pageThreshold == -1)) {\n+      return fetchNextPage(owner, name, isIssue, data,\n+        cursor, pageCount);\n+    } else {\n+      return data;\n     }\n+  } else {\n+    console.log('Warning: no available data. owner:', owner, 'name:', name,\n+      'isIssue:', isIssue, 'pageCount:', pageCount);\n+    return data;\n+  }\n+}\n \n-    return Promise.all([\n-      dump('issues'),\n-      dump('repoLabels'),\n-      dump('repositories'),\n-    ])\n-  })\n-\n-  cache = {\n-    issues: cache[0],\n-    repoLabels: cache[1],\n-    repositories: cache[2],\n+async function fetchIssue(owner, names, isIssue) {\n+  //return Promise.all(names.map(async name => {\n+  let result = [];\n+  for (const name of names) {\n+    try {\n+      result = result.concat(\n+        await fetchNextPage(owner, name, isIssue, [], null, 0));\n+    } catch (error) {\n+      console.log('repo owner:', owner, 'repo name:', name,\n+        'is issue:', isIssue, 'error:', error);\n+    }\n   }\n+  return result;\n+}\n+\n+function fetchLabel(owner, names) {\n+  return Promise.all(names.map(async name => {\n+    try {\n+      const { data } = await client.query(GITHUB_LABEL_INFO_QUERY,  {owner, name});\n+      let result = [];\n+      if (data && data.repository) {\n+        result = data.repository.labels.nodes.map(node => ({\n+          id: node.id,\n+          name: node.name,\n+          color: node.color,\n+          default: node.isDefault,\n+        }));\n+      }\n+      return {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result,\n+      };\n+    } catch (error) {\n+      console.log(error);\n+    }\n+  }));\n+}\n+\n+function getTime(timeString) {\n+  return moment(timeString).toDate().getTime();", "created_at": "2018-05-05T02:10:33Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI1MTIwNw==", "fields": {"body": "oh ... that is at the repo level .. hmm.. this might be ok...\ngit grep updatedAtMs\nscript/fetch-issues.js:        updatedAtMs: moment(node.updatedAt).toDate().getTime(),\nsrc/database.js:      updatedAtMs: moment(issue.updatedAt).toDate().getTime(),", "diff": "@@ -1,64 +1,208 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n+\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+const getTime = timeString => moment(timeString).toDate().getTime();\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: getTime(node.updatedAt),", "created_at": "2018-05-05T03:38:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NDQyNA==", "fields": {"body": "Oh\nCool\nThanks @ksdme", "diff": "@@ -34,14 +34,22 @@ class GitCommitBear(GlobalBear):\n             'issue': r'(?:\\w+/\\w+)?#(\\S+)',\n             'full issue': r'https?://gitlab\\S+/issues/(\\S+)',\n         },\n+        'bitbucket': {\n+            'issue': r'#(\\S+)',\n+            'full issue': None,\n+        },\n     }\n     SUPPORTED_HOST_KEYWORD_REGEX = {\n         'github': (r'[Cc]lose[sd]?'\n                    r'|[Rr]esolve[sd]?'\n                    r'|[Ff]ix(?:e[sd])?'),\n         'gitlab': (r'[Cc]los(?:e[sd]?|ing)'\n                    r'|[Rr]esolv(?:e[sd]?|ing)'\n-                   r'|[Ff]ix(?:e[sd]|ing)?')\n+                   r'|[Ff]ix(?:e[sd]|ing)?'),\n+        'bitbucket': (r'[Cc]los(?:e[sd]?|ing)'\n+                      r'|[Rr]esolv(?:e[sd]?|ing)'\n+                      r'|[Ff]ix(?:e[sd]|ing)?'\n+                      r')(?:(?:[ \\t]*(?:bug|issue|ticket)?)?'),", "created_at": "2018-05-06T15:32:17Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NTkzNQ==", "fields": {"body": "Opened https://bitbucket.org/site/master/issues/16240/issue-referencing-on-bitbucket-cloud\nAnd off to support fixes bug#11 and fixes bug #11", "diff": "@@ -34,14 +34,22 @@ class GitCommitBear(GlobalBear):\n             'issue': r'(?:\\w+/\\w+)?#(\\S+)',\n             'full issue': r'https?://gitlab\\S+/issues/(\\S+)',\n         },\n+        'bitbucket': {\n+            'issue': r'#(\\S+)',\n+            'full issue': None,\n+        },\n     }\n     SUPPORTED_HOST_KEYWORD_REGEX = {\n         'github': (r'[Cc]lose[sd]?'\n                    r'|[Rr]esolve[sd]?'\n                    r'|[Ff]ix(?:e[sd])?'),\n         'gitlab': (r'[Cc]los(?:e[sd]?|ing)'\n                    r'|[Rr]esolv(?:e[sd]?|ing)'\n-                   r'|[Ff]ix(?:e[sd]|ing)?')\n+                   r'|[Ff]ix(?:e[sd]|ing)?'),\n+        'bitbucket': (r'[Cc]los(?:e[sd]?|ing)'\n+                      r'|[Rr]esolv(?:e[sd]?|ing)'\n+                      r'|[Ff]ix(?:e[sd]|ing)?'\n+                      r')(?:(?:[ \\t]*(?:bug|issue|ticket)?)?'),", "created_at": "2018-05-06T16:33:10Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQ0NDY4OA==", "fields": {"body": "I just transformed it into the functional component. You are right, the undefined onClickIcon has nothing to do with whether it is using class or function.\nFiled another issue #29 for the undefined onClickIcon.", "diff": "@@ -10,7 +10,7 @@ import GithubFlavoredMarkdown from './gfm';\n import Loadable from './loadable';\n import ColoredIcon from './colored-icon';\n \n-const IssueOrPullRequestBlurb = React.createClass({\n+class IssueOrPullRequestBlurb extends Component {", "created_at": "2018-05-07T14:42:41Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQwOTc5MQ==", "fields": {"body": "This will introduce error, since it's functional component and has no this.setState\nhttps://jsbin.com/dodalubaxo/edit?html,js,output", "diff": "@@ -1,45 +1,42 @@\n-import React from 'react';\n import * as BS from 'react-bootstrap';\n import {GearIcon} from 'react-octicons';\n \n import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n-  render() {\n-    const onHide = () => {\n-      hasAlreadyShownAnonymousModal = true;\n-      this.setState({ showModal: false});\n-    };\n-    let showModal;\n-    if (CurrentUserStore.getUser()) {\n-      showModal = false;\n-    } else {\n-      showModal = !hasAlreadyShownAnonymousModal;\n-    }\n+function AnonymousModal() {\n+  const onHide = () => {\n+    hasAlreadyShownAnonymousModal = true;\n+    this.setState({ showModal: false});", "created_at": "2018-05-07T12:36:34Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg==", "fields": {"body": "Ah ok. We'll leave it as it is.\nBut does it even matter? Since this.onClickIcon is undefined whether it is using class or functional. It would lead to an error either way.\nProbably open an issue after finding where the component is located in the UI, if there's an error.", "diff": "@@ -10,7 +10,7 @@ import GithubFlavoredMarkdown from './gfm';\n import Loadable from './loadable';\n import ColoredIcon from './colored-icon';\n \n-const IssueOrPullRequestBlurb = React.createClass({\n+class IssueOrPullRequestBlurb extends Component {", "created_at": "2018-05-07T12:52:39Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU5NjQ4NA==", "fields": {"body": "Please note that a 'split line' type of change should only be done in this PR where the change already contains a non-whitespace modification to the line.\nWe dont want git diff -w for this patch getting extra changes which are line splits.\nThere are only a few cases in this PR where the very long line is already changing syntax, so we may as well also improve the layout a little.", "diff": "@@ -10,28 +11,32 @@ import Loadable from './loadable';\n import Progress from '../progress';\n import Database from '../database';\n \n-const ProgressView = React.createClass({\n-  getInitialState() {\n-    return {message: null, ticks: 0, max: 0};\n-  },\n+class ProgressView extends Component {\n+  state = {message: null, ticks: 0, max: 0};\n+\n   componentDidMount() {\n     const {progress} = this.props;\n     progress.on('start', this.onStart);\n     progress.on('tick', this.onTick);\n     progress.on('stop', this.onStop);\n-  },\n+  }\n+\n   componentWillUnmount() {\n     const {progress} = this.props;\n     progress.off('start', this.onStart);\n     progress.off('tick', this.onTick);\n     progress.off('stop', this.onStop);\n-  },\n-  onStart(context) { this.setState({max: this.props.progress.max, message: 'Start: ' + context}); },\n-  onTick(context, ticks, max) {\n+  }\n+\n+  onStart = (context) => { this.setState({max: this.props.progress.max, message: 'Start: ' + context}); };\n+\n+  onTick = (context, ticks, max) => {\n     this.setState({ticks: ticks, max: max, message: context});\n     this.forceUpdate();\n-  },\n-  onStop(context) { this.setState({ticks: this.props.progress.ticks, max: this.props.progress.max, message: 'Finished: ' + context}); },\n+  };\n+\n+  onStop = (context) => { this.setState({ticks: this.props.progress.ticks, max: this.props.progress.max, message: 'Finished: ' + context}); };", "created_at": "2018-05-08T01:31:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA==", "fields": {"body": "umm, https://raivaibhav.github.io./GSoC.xml or  https://raivaibhav.github.io/GSoC.xml", "diff": "@@ -125,3 +125,6 @@ name = Saksham Bansal\n \n [https://charlieyang.me/feed_gsoc.xml]\n name = Guangyuan Yang\n+\n+[https://raivaibhav.github.io./GSoC.xml]", "created_at": "2018-05-10T20:24:53Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ5NTM3MA==", "fields": {"body": "This is a rather inelegant, maybe put up an array of author and comment body to ignore?\nWe fill it with sensible default, and make it so we can add more via env var.", "diff": "@@ -141,14 +148,72 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          if (node.bodyText.search('@gitmate-bot') !== -1) {\n+            // gitmate-bot instructions\n+            flag = false;\n+          } else if (node.bodyText.search('@rultor') !== -1) {\n+            // rultor instructions\n+            flag = false;\n+          } else if (node.bodyText.match(/^(unack|ack)/g)) {\n+            // ack and unack messages\n+            flag = false;\n+          } else if (node.author && node.author.login === 'gitmate-bot') {\n+            // comments by gitmate-bot\n+            flag = false;\n+          } else if (node.author && node.author.login === 'rultor') {", "created_at": "2018-05-21T04:59:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTk0MzQ0OQ==", "fields": {"body": "fyi you can also do repositories instead of repositories: repositories.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recent_issues = [];\n+  const today = new Date();\n+  const day_last_month = today.setMonth(today.getMonth() - 1);\n+  for (const issue of issues) {\n+    if (getTime(day_last_month) < issue.updatedAtMs) {\n+      recent_issues.push(issue);\n+    }\n+  }\n+  return recent_issues;\n+}\n+\n ;(async () => {\n   let issueInfo, prInfo, labelInfo;\n   try {\n-    // Don't fetch them concurrently, otherwise some queries may fail \n+    // Don't fetch them concurrently, otherwise some queries may fail\n     issueInfo = await fetchIssue(repoOwner, repoNames, true);\n-    prInfo = await fetchIssue(repoOwner, repoNames, false); \n-    labelInfo = await fetchLabel(repoOwner, repoNames); \n+    labelInfo = await fetchLabel(repoOwner, repoNames);\n+    prInfo = await fetchIssue(repoOwner, repoNames, false);\n   } catch (error) {\n     console.log(error);\n   };\n   const issues = issueInfo.concat(prInfo);\n+  const repositories = generateRepoInfo(repoOwner, repoNames, issues);\n   const result = {\n     issues: issues,\n     repoLabels: labelInfo,\n-    repositories: generateRepoInfo(repoOwner, repoNames, issues)\n+    repositories: repositories\n+  };\n+  const recent_result = {\n+    issues: filterRecent(issues),\n+    repoLabels: labelInfo,\n+    repositories: repositories", "created_at": "2018-05-22T15:20:25Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTA0Mw==", "fields": {"body": "I think the project uses camelCase instead of snake_case variable name, need to keep it consistent here.\nenv is okay though.", "diff": "@@ -18,13 +18,28 @@ const GH_GQL_OPTIONS = {\n \n const client = GraphQL(GH_GQL_OPTIONS);\n \n-// number of pages we want to query (default: 20 pages x 100 items)\n+// number of pages we want to query\n // if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n-const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+const pageThreshold = process.env.PAGE_THRESHOLD || -1;\n console.log('page number threshold:', pageThreshold);\n \n+// earliest date we want to query from\n+// GitHub supports reactions since 2016-03-10\n+const earliestDate = process.env.EARLIEST_DATE || '2016-03-10T00:00:00Z';\n+\n const repo = process.env.REPOSITORIES;\n \n+// review will be ignored if it's written by any author specified here\n+// delimiter: space\n+const ignore_review_author = process.env.IGNORE_REVIEW_AUTHOR ||", "created_at": "2018-05-22T14:24:00Z", "last_edited_at": "2018-05-22T14:28:41Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTY5Mw==", "fields": {"body": "Why not Array.forEach ?\n... or Array.reduce", "diff": "@@ -141,22 +159,76 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignore_content of ignore_review_content.split(' ')) {", "created_at": "2018-05-22T14:25:43Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkzNDgzOQ==", "fields": {"body": "I guess just leave it as is, if you're not going to use reduce", "diff": "@@ -141,22 +159,76 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignore_content of ignore_review_content.split(' ')) {", "created_at": "2018-05-22T14:58:46Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAxMDkyMQ==", "fields": {"body": "Could use issues.filter and be made 1 liner.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recentIssues = [];\n+  const today = new Date();\n+  const dayLastMonth = today.setMonth(today.getMonth() - 1);\n+  for (const issue of issues) {\n+    if (getTime(dayLastMonth) < issue.updatedAtMs) {\n+      recentIssues.push(issue);", "created_at": "2018-05-22T18:41:56Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAyNDQwOA==", "fields": {"body": "let is for a variable that's available to be reassigned, push will not reassign the variable, it'll modify the array inside. In this case, keep using const.\nBut see my comment above, you can return the filter result directly instead without making a variable.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recentIssues = [];", "created_at": "2018-05-22T19:27:59Z", "last_edited_at": "2018-05-22T19:30:00Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjU2NQ==", "fields": {"body": "If this is really necessary, it's better to have a DEBUG env var that enable/disable verbose log, otherwise just omit.", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {\n+            rawComments.map((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+              return comment;\n+            });\n+          }\n+        } else {\n+          // for debug\n+          // console.log('pull request does not have reactions. repoOwner:', owner,", "created_at": "2018-05-26T11:36:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0Njc4NA==", "fields": {"body": "Not sure what this is doing, do you mean forEach ?\nmap will create new array.", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {\n+            rawComments.map((comment, index) => {", "created_at": "2018-05-26T11:46:51Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjgzOA==", "fields": {"body": "dayLastMonth never changes, I think it's better to call getTime in the dayLastMonth variable itself.", "diff": "@@ -223,24 +379,47 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  const today = new Date();\n+  const dayLastMonth = today.setMonth(today.getMonth() - 1);\n+  return issues.filter(issue => getTime(dayLastMonth) < issue.updatedAtMs);", "created_at": "2018-05-26T11:52:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjkyNA==", "fields": {"body": "empty array is truthy", "diff": "@@ -141,23 +192,128 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {", "created_at": "2018-05-26T11:57:38Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0OTM2NQ==", "fields": {"body": "Nope, that was intentional. iff = if and only if", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff", "created_at": "2018-05-26T13:53:53Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI1MzY3OQ==", "fields": {"body": "Why did you add one extra blank line? \ud83d\ude03  We already have one blank line in .gitignore file.", "diff": "@@ -43,3 +43,5 @@ Gemfile.lock\n venv\n bears/upload/\n package-lock.json\n+.pytest_cache\n+", "created_at": "2018-05-28T18:01:54Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3NDY2MQ==", "fields": {"body": "If it has been removed completely, why not just remove the whole code? We can't get it working in the future anyway.\nFor historical purposes, the code will always be there on the git history.\nWe should also remove the readme section https://github.com/coala/gh-board#easter-eggs\nBut it said \"easter eggs\" I'm not sure if it's truly a hidden easter eggs that is not very obvious to find, and we miss it. \ud83d\ude02", "diff": "@@ -59,11 +59,12 @@ test('shows a repo', async t => {\n   t.true(agoRegExp.test(await browser.getText('time.updated-at')));\n });\n \n-test('checks that the games load up', async () => {\n-  await browser.waitForExist('.nav-secret-game');\n-  await browser.click('.nav-secret-game');\n-  await browser.waitForExist('.secret-game-is-playing', 30 * 1000); // It may take some time to fetch the game from the Gist\n-});\n+// game functionality has been removed", "created_at": "2018-06-07T14:48:12Z", "last_edited_at": "2018-06-07T14:48:24Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczMzcyNA==", "fields": {"body": "an extra level is needed in the abstraction, which needs to be a separate PR before this.\nthis isnt creating a meta bear.\nA meta bear is like URLBear, which only yields HiddenResult.  See URLHeadBear and InvalidLinkBear for how they all link together.\nWe need a VCSCommitBear which only yields a CommitResult(HiddenResult).  SkipCIBear would then receive those CommitResult and only yield the CommitResult if the commit was a CI skip.\n(and while trying to understand this, it is better to simply ignore GitCommitBear and HgCommitBear -- those will need to be glued back in after the redesign.)", "diff": "@@ -0,0 +1,44 @@\n+\n+from coalib.misc.Shell import run_shell_command\n+from bears.vcs.CommitBear import _CommitBear\n+\n+\n+class SkipCIBear(_CommitBear):", "created_at": "2018-06-07T12:50:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MjQyMg==", "fields": {"body": "removing these should have been another commit in the same PR, as this is related to the fact that Ryan removed the game , and is unrelated to the test runner problems.  Also note that it wasnt mentioned in the commit message.  Anyway, this is minor and it is very distinct changes within the same commit.\nI am guessing Ryan will appreciate this being sent upstream (as two commits, and probably best left to coding phase 2), and it should almost apply without much difficulty, and likewise try the same with Phil, but that is very optional as that codebase probably has other problems which are not related to your project.", "diff": "@@ -59,13 +59,6 @@ test('shows a repo', async t => {\n   t.true(agoRegExp.test(await browser.getText('time.updated-at')));\n });\n \n-test('checks that the games load up', async () => {", "created_at": "2018-06-08T04:54:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTA0NzExNQ==", "fields": {"body": "Airbnb style actually uses 4.9 as peer dependency. I really want to downgrade to that matching version :( too. Waiting for @blazeu .", "diff": "@@ -3,23 +3,14 @@\n   \"plugins\": [ \"react\" ],\n   \"env\": {\n     \"es6\": true,\n-    \"browser\": true,\n-  },\n-  \"ecmaFeatures\": {\n-    \"templateStrings\": true,\n-    \"arrowFunctions\": true,\n-    \"modules\": true,\n-    \"blockBindings\": true,\n-    \"forOf\": true,\n-    \"jsx\": true\n+    \"browser\": true\n   },\n   \"rules\": {\n     \"no-unused-vars\": 1,\n     \"react/jsx-uses-vars\": 1,\n     \"no-var\": 2,\n     \"new-cap\": 0,\n     \"quotes\": [1, \"single\", \"avoid-escape\"],\n-    \"semi\": 1,\n-    \"indent\": [2, 2]", "created_at": "2018-06-13T11:29:39Z", "last_edited_at": null, "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE1NDgzMw==", "fields": {"body": "I vaguely remember doing something like this in the past, but my quick searches couldn't come up with anything. What's the story behind this?", "diff": "@@ -42,5 +67,5 @@ deploy:\n   provider: pages\n   skip_cleanup: true\n   github_token: $GITHUB_TOKEN\n-  on:\n+  \"on\":", "created_at": "2018-06-13T16:36:58Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTEwMTE5NA==", "fields": {"body": ".eslintrc?", "diff": "@@ -0,0 +1,27 @@\n+[all]\n+ignore = node_modules/**, dist/**, .git/**\n+\n+[all.SpaceConsistencyBear]\n+files = **.js, **.json, **.yml, **.yaml, **.md\n+bears = SpaceConsistencyBear\n+use_spaces = true\n+ignore += src/gantt-chart.js\n+\n+[all.json]\n+bears = JSONFormatBear\n+files = **.json\n+indent_size = 2\n+\n+[all.js]\n+bears = ESLintBear\n+eslint_config = .eslintrc.json", "created_at": "2018-06-13T14:20:46Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY5MDIzMg==", "fields": {"body": "it is from the yaml lint bear.\nI used to disabled it in git-task-list. But it is far easier just to quote it.", "diff": "@@ -42,5 +67,5 @@ deploy:\n   provider: pages\n   skip_cleanup: true\n   github_token: $GITHUB_TOKEN\n-  on:\n+  \"on\":", "created_at": "2018-06-15T10:14:28Z", "last_edited_at": null, "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg==", "fields": {"body": "These copy from docs/docs-requirements.txt to docs-requirements.txt.\nPlease re-review @kriti21 .", "diff": "@@ -0,0 +1,24 @@\n+overrides: coala.yaml\n+\n+name: documentation\n+\n+dependencies:\n+  - coala\n+  - '-r docs-requirements.txt'\n+\n+configuration:\n+  template_dir:\n+    - ../coala-mobans/templates/\n+    - ../coala-mobans/assets/\n+  configuration: .moban.yaml\n+  configuration_dir: ../coala-mobans/\n+targets:\n+  - requirements.txt: requirements.txt.jj2\n+copy:\n+  - docs-requirements.txt: docs/docs-requirements.txt", "created_at": "2018-06-16T06:38:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNDk2Nw==", "fields": {"body": "It must be prose. High level summary. See pep 257. It is hard .. ;)", "diff": "@@ -0,0 +1,8 @@\n+\"\"\"\n+Has Setting, Section class; indexing tools; input checks; loads bears, files.", "created_at": "2018-06-17T10:36:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA==", "fields": {"body": "We could use ternary if we really want it short\nconst oldOrgs = oldData ? createOrgHash(oldData) : newOrgs\nbut, maybe, it's clearer if we use explicit conditional.", "diff": "@@ -25,8 +25,11 @@ module.exports = ({\n   feed_items: current,\n   data_updated: dataUpdated,\n }) => {\n-  const oldOrgs = createOrgHash(oldData)\n   const newOrgs = createOrgHash(newData)\n+  let oldOrgs = newOrgs\n+  if (oldData) {\n+    oldOrgs = createOrgHash(oldData)\n+  }", "created_at": "2018-06-20T11:32:42Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ==", "fields": {"body": "Missing newline", "diff": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" version=\"2.0\" xmlns:org=\"https://g.co/gci\" xmlns:property=\"https://g.co/gci\"><channel><title><![CDATA[Google Code-in Leaders]]></title><description><![CDATA[A feed for Google Code-in updates]]></description><link>https://gci-leaders.netlify.com</link><generator>RSS for Node</generator><lastBuildDate>Sun, 24 Dec 2017 03:04:35 GMT</lastBuildDate><atom:link href=\"https://gci-leaders.netlify.com/feed.xml\" rel=\"self\" type=\"application/rss+xml\"/><pubDate>Sun, 24 Dec 2017 03:04:35 GMT</pubDate></channel></rss>", "created_at": "2018-06-20T11:41:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2ODk3MA==", "fields": {"body": "You can import run_git_command() & git_commit() from GitCommitBearTest module and use it here, they're static methods. Code duplication isn't a good idea", "diff": "@@ -0,0 +1,174 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.vcs.VCSCommitBear import VCSCommitBear, CommitResult\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.settings.Section import Section\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class FakeCommitBear(VCSCommitBear):\n+    @classmethod\n+    def check_prerequisites(cls):\n+        return True\n+\n+    def get_head_commit(self):\n+        return ('This is the fake head commit', '')\n+\n+\n+@generate_skip_decorator(VCSCommitBear)\n+class VCSCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure message if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = FakeCommitBear(None, self.section, self.msg_queue)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(GitCommitBear.check_prerequisites(),\n+                             'git is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/git'\n+            self.assertTrue(GitCommitBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    def test_head_commit(self):\n+        self.assertEqual(self.run_uut(), ['HEAD commit information'])\n+\n+\n+@generate_skip_decorator(GitCommitBear)\n+class AnalyzeGitCommitTest(unittest.TestCase):\n+\n+    @staticmethod\n+    def run_git_command(*args, stdin=None):", "created_at": "2018-06-20T13:08:04Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg==", "fields": {"body": "This page is about contacting people.\nThis should be after \"- Give us feedback\", as a new item,\n\n\nReport any Code of Conduct violations to ....", "diff": "@@ -24,3 +24,6 @@ Modularity, clean good code as well as a high usability for both users\n and developers of analyse routines (called bears) stand in the\n foreground of the development. We will not speed up our development if\n it needs sacrificing any aspect of quality.\n+\n+\n+Please follow our Code Of Conduct, you can find it `here <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>`__.", "created_at": "2018-06-20T23:59:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA==", "fields": {"body": "query = db.issues.where('state').equals(states[0]) ?", "diff": "@@ -187,7 +187,11 @@ const database = new class Database {\n       const cards = [];\n       let query;\n       if (states.length === 1) {\n-        query = db.issues.where('state').equals('open');\n+        if (states[0] === 'open') {\n+          query = db.issues.where('state').equals('open');", "created_at": "2018-06-21T15:24:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDA5OQ==", "fields": {"body": "Just do 'review-blurb' ?", "diff": "@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');\n+  const reviewNumber = splitUrl[splitUrl.length - 1];\n+\n+  const classes = {\n+    'review-blurb': true\n+  };\n+\n+  return (\n+    <span className={classnames(classes)}>", "created_at": "2018-06-24T06:50:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE2NQ==", "fields": {"body": "split then pop returns the last element.", "diff": "@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');", "created_at": "2018-06-24T06:54:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMTU3OQ==", "fields": {"body": "in the future, I would love to see this turns into infinite list (automatically add more on scroll), since it doesn't load from the network anyway.\nAlso in the future, look at scrolling performance problem, it shouldn't happen now, but it might happen because there's thousands of DOM element being rendered (even the element outside the visible browser window).", "diff": "@@ -0,0 +1,79 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+import ColoredIcon from './colored-icon';\n+\n+const MIN_CHILDREN_TO_SHOW = 10;\n+\n+\n+class ReviewList extends Component {\n+  state = {morePressedCount: 0, showCSVModal: false};\n+\n+  showAllReviews = () => {\n+    this.setState({showAllReviews: true});\n+  };\n+\n+  onClickMore = () => {\n+    this.setState({morePressedCount: this.state.morePressedCount + 1});\n+  };\n+\n+  toggleCSVModal = () => {\n+    const {showCSVModal} = this.state;\n+    this.setState({showCSVModal: !showCSVModal});\n+  };\n+\n+  render() {\n+    const {icon, backgroundColor, children} = this.props;\n+    const {isOver} = this.props; // from the collector\n+    const {showAllReviews, morePressedCount} = this.state;\n+    const multiple = 25; // Add 25 results at a time\n+\n+    let className = 'column-title';\n+    if (icon) {\n+      className += ' has-icon';\n+    }\n+\n+    let iconEl;\n+    if (icon) {\n+      iconEl = (\n+        <ColoredIcon className='column-icon' color={backgroundColor}>{icon}</ColoredIcon>\n+      );\n+    }\n+\n+    const header = (\n+      <h2 className={className}>\n+        {iconEl}Meta-reviews in Need ({children.length})\n+      </h2>\n+    );\n+\n+    const classes = {\n+      'issue-list': true,\n+      'is-over': isOver\n+    };\n+\n+    let partialChildren;\n+    let moreButton;\n+    if (!showAllReviews && MIN_CHILDREN_TO_SHOW + (1 + morePressedCount) * multiple < children.length) {\n+      partialChildren = children.slice(0, MIN_CHILDREN_TO_SHOW + morePressedCount * multiple);\n+      moreButton = (\n+        <BS.Button onClick={this.onClickMore} className='list-group-item'>\n+          {children.length - (morePressedCount + 1) * multiple} more...", "created_at": "2018-06-24T08:02:04Z", "last_edited_at": "2018-06-24T08:02:56Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NTgxNQ==", "fields": {"body": "Nevermind, it's inside map, didn't saw that.\nBut this will mutate the prop, it's considered bad practice in React, and IMO a map shouldn't mutate because it's normally for creating a new array. This will not cause problem since we know it's only adding new property that isn't used elsewhere. But, best to stay away from bad practices. Spread syntax (...) is available for cloning objects.", "diff": "@@ -77,6 +99,27 @@ class KanbanRepo extends Component {\n   render() {\n     const {columnData, cards, repoInfos} = this.props;\n \n+    // Get review comments out of cards\n+    const reviews = cards.map((card) => {\n+      if (card.issue.pullRequest && card.issue.pullRequest.comments) {\n+        let comments = card.issue.pullRequest.comments;\n+        comments.forEach(comment => {\n+          comment.repoOwner = card.repoOwner;\n+          comment.repoName = card.repoName;\n+          comment.number = card.number;\n+        });\n+        return comments;", "created_at": "2018-06-25T16:49:25Z", "last_edited_at": "2018-06-25T17:07:25Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTkyMg==", "fields": {"body": "We need to fix #3 so people don't get confused.", "diff": "@@ -0,0 +1,92 @@\n+.review {", "created_at": "2018-06-27T11:56:43Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc2MDM3Mg==", "fields": {"body": "I think you can remove this (as I saw in other templates).", "diff": "@@ -3,4 +3,10 @@\n \n @Language\n class Ruby:\n-    pass\n+    aliases = 'rb',\n+", "created_at": "2018-06-28T08:53:30Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc4MTI0Mg==", "fields": {"body": "1.4 is a version of one program called \"GNU m4\", and isnt a version of the language.\nSome of the history of the language can be found on Wikipedia and https://www.gnu.org/savannah-checkouts/gnu/m4/manual/m4-1.4.18/html_node/Compatibility.html\nDue to incompatibilities mentioned in the above, we could say there is one version of the language called \"GNU m4 1.4\", and a different one being \"System V m4\", etc.\nHowever unless/until we know about some clear differences for these variations, and notice that users are supplying .m4 files with those differences, I think it is best to avoid defining versions.", "diff": "@@ -0,0 +1,11 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class m4:\n+    versions = 1.4,", "created_at": "2018-06-28T09:47:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc5NTI3NQ==", "fields": {"body": "not quite..\n'#' only works at the beginning of a command, which is conceptually incompatible with the other usages of comment_delimiter` which assume a comment delimiter has a high precedence.\nTypically this means in Tcl, ; # is needed to be a comment occurring in the middle of a line.\nThis difference is quite small, and quite achievable to support, but is getting further from your project scope of quotes, so I think discard this from the MR, and please create an issue about supporting Tcl comments.", "diff": "@@ -0,0 +1,12 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class Tcl:\n+    aliases = 'Tcl/Tk',\n+    versions = 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6\n+    extensions = '.tcl',\n+    comment_delimiter = '#'", "created_at": "2018-06-28T10:37:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMjkzMQ==", "fields": {"body": "super()?", "diff": "@@ -46,6 +48,29 @@\n member_accessed\"\"\"))\n \n \n+@generate_repr(('id', hex),\n+               'origin',\n+               'differences',\n+               'count_matrices',\n+               'message')\n+@generate_ordering('origin',\n+                   'differences',\n+                   'count_matrices',\n+                   'message')\n+class ClangFunctionDifferenceResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin,\n+                 differences: list,\n+                 count_matrices: dict):\n+        HiddenResult.__init__(origin,", "created_at": "2018-06-28T11:54:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDY2OQ==", "fields": {"body": "Maybe check if commentsWithReactions is the same length as rawComments here because if not, you might have an error.", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {", "created_at": "2018-07-01T16:44:07Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTE4NQ==", "fields": {"body": "Also, probably use NODE_ENV === 'development' for debug value instead.", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {", "created_at": "2018-06-30T15:27:54Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcxMA==", "fields": {"body": "node.diffHunk || null", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,", "created_at": "2018-06-30T15:53:12Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTg1Nw==", "fields": {"body": "Why bother setting the properties, if all of it is null?", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,\n+            author: commentAuthor,\n+            reactions,\n+            createdAt: node.createdAt,\n+            lastEditedAt: node.lastEditedAt,\n+            // the native `updatedAt` field of comment is inaccurate\n+            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt\n+          };\n+        });\n+        info.issue.pullRequest = {\n+          htmlUrl: node.url,\n+          comments\n+        };\n+        return info;\n+      }).filter((node) => node));\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for pull request. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchPullRequests);\n+    }\n+  }\n+\n+  _mapNodeToIssue(node) {\n+    let user, assignee, milestone;\n+\n+    if (node.author) {\n+      user = {\n+        login: node.author.login,\n+        avatarUrl: node.author.avatarUrl\n+      };\n+    } else {\n+      user = {\n+        login: null,\n+        avatarUrl: null\n+      };\n+    }\n+\n+    if (node.assignees.nodes && node.assignees.nodes.length) {\n+      assignee = {\n+        login: node.assignees.nodes[0].login,\n+        avatarUrl: node.assignees.nodes[0].avatarUrl\n+      };\n+    } else {\n+      assignee = null;\n+    }\n+\n+    if (node.milestone) {\n+      milestone = {\n+        title: node.milestone.title,\n+        createdAt: node.milestone.createdAt,\n+        dueOn: node.milestone.dueOn,\n+        state: node.milestone.state.toLowerCase(),\n+        htmlUrl: node.milestone.url,\n+        description: node.milestone.description\n+      };\n+    } else {\n+      milestone = {\n+        title: null,\n+        createdAt: null,\n+        dueOn: null,\n+        state: null,\n+        htmlUrl: null,\n+        description: null\n+      };", "created_at": "2018-06-30T15:59:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQwNjAzMg==", "fields": {"body": "REM is another one.\nhttps://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/comments-in-code\nWe need to enhance coalib to allow multiple delimiters.  Create an issue please", "diff": "@@ -0,0 +1,11 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class VisualBasic:\n+    aliases = 'vb',\n+    extensions = '.vb', '.bas'\n+    comment_delimiter = \"'\"", "created_at": "2018-07-02T07:32:30Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0MjI2NA==", "fields": {"body": "use type(self._instance)", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines\n+\n+\n+class Memoize:\n+    \"\"\"\n+    ``Memoize`` serves as a decorator for the properties\n+    of ``FileFactory`` and caches the results of the property\n+    for a particular ``FileFactory`` object.\n+    \"\"\"\n+\n+    def __init__(self, method):\n+        self._method = method\n+\n+    def __call__(self, instance):\n+        self._instance = instance\n+        return self.__get__(self._instance, self._instance.__class__)", "created_at": "2018-07-03T20:33:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkwMjYwMw==", "fields": {"body": "put them into an array, and then format them at the end when raising the exception", "diff": "@@ -1,45 +1,43 @@\n-from coala_utils.Comparable import Comparable\n+import unittest\n \n+from coala_utils.Comparable import Comparable\n \n-def _assert_comparable_equal(observed_result, expected_result):\n-    \"\"\"\n-    Compares individual fields of the result objects using\n-    `__compare_fields__` of `coala_utils.Comparable` class\n-    and yields messages in case of an attribute mismatch.\n-    \"\"\"\n \n-    if not len(observed_result) == len(expected_result):\n-        assert observed_result == expected_result, '%s != %s' % (\n-            observed_result, expected_result)\n-\n-    messages = ''\n-    for observed, expected in zip(observed_result, expected_result):\n-        if (isinstance(observed, Comparable) and\n-            isinstance(expected, Comparable)) and (type(observed) is\n-                                                   type(expected)):\n-            for attribute in type(observed).__compare_fields__:\n-                try:\n-                    assert getattr(observed, attribute) == getattr(\n-                        expected, attribute), (\n-                        '{} mismatch: {}, {} != {}, {}'.format(\n-                            attribute,\n-                            observed.origin, observed.message,\n-                            expected.origin, expected.message))\n-                except AssertionError as ex:\n-                    messages += (str(ex) + '\\n\\n')\n-        else:\n-            assert observed_result == expected_result, '%s != %s' % (\n-                observed_result, expected_result)\n-\n-    if messages:\n-        raise AssertionError(messages)\n-\n-\n-class BaseTestHelper:\n+class BaseTestHelper(unittest.TestCase):\n     \"\"\"\n     This is a base class for all Bears' tests of coala's testing API.\n     \"\"\"\n \n+    def _assert_comparable_equal(self,\n+                                 observed_result,\n+                                 expected_result):\n+        \"\"\"\n+        Compares individual fields of the result objects using\n+        `__compare_fields__` of `coala_utils.Comparable` class\n+        and yields messages in case of an attribute mismatch.\n+        \"\"\"\n+\n+        if not len(observed_result) == len(expected_result):\n+            self.assertEqual(observed_result, expected_result)\n+\n+        messages = ''", "created_at": "2018-07-03T18:06:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDA2Mg==", "fields": {"body": "We should move that asap to coala-utils ;) Maybe even extend it to something like cached_property:\n@cached_property\ndef myprop(self):\n    ...", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines\n+\n+\n+class Memoize:\n+    \"\"\"\n+    ``Memoize`` serves as a decorator for the properties\n+    of ``FileFactory`` and caches the results of the property\n+    for a particular ``FileFactory`` object.\n+    \"\"\"", "created_at": "2018-07-03T20:02:42Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDY5NA==", "fields": {"body": "Can we add here\nfunctools.update_wrapper(self, func)\n\nthen the signatures look a bit nicer ;)", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines\n+\n+\n+class Memoize:\n+    \"\"\"\n+    ``Memoize`` serves as a decorator for the properties\n+    of ``FileFactory`` and caches the results of the property\n+    for a particular ``FileFactory`` object.\n+    \"\"\"\n+\n+    def __init__(self, method):\n+        self._method = method", "created_at": "2018-07-03T20:05:24Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNzQ3NQ==", "fields": {"body": "do we still need all that?", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines", "created_at": "2018-07-03T20:16:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw==", "fields": {"body": "Any reasons for migrating to materializecss? Please mention that in the commit message.", "diff": "@@ -11,15 +11,15 @@\n     <link rel=\"stylesheet\"\n           href=\"https://fonts.googleapis.com/css?family=Roboto:100,200,300,400,500,600,800,900\">\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n-    <link rel=\"stylesheet\"\n           href=\"bower_components/google-code-prettify/src/prettify.css\">\n-    <!-- Bootstrap Material Design -->\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap-material-design/dist/css/bootstrap-material-design.css\">\n+          href=\"bower_components/materialize/dist/css/materialize.min.css\">", "created_at": "2017-07-29T16:25:25Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDAyMzk4Mg==", "fields": {"body": "Actually I just need to add a linebreak (\\n) to each elements, since LocalBearTestHelper.get_results uses prepare_file to add the linebreaks to the lines before inputting it to bear.execute.\nIf I just use short_url_redirect directly as an argument for instancing Diff(), it will raise AssertionError, since the bear is actually processing the lines with the linebreaks added", "diff": "@@ -253,6 +255,11 @@ def test_redirect_threshold(self):\n             self.check_validity(self.uut, long_url_redirect,\n                                 settings={'follow_redirects': 'true'})\n \n+            with prepare_file(short_url_redirect, None) as (lines, _):", "created_at": "2018-07-04T06:57:09Z", "last_edited_at": "2018-07-04T07:19:24Z", "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI3MDUzMQ==", "fields": {"body": "There's Promise.resolve()\nBut returning whatever directly also wraps it  into promise because it's inside an async function.", "diff": "@@ -199,7 +199,30 @@ const issueStore = new class IssueStore extends EventEmitter {\n     }\n     let fetchPromise;\n     if (Client.canCacheLots()) {\n-      fetchPromise = Client.getOcto().repos(repoOwner, repoName).issues.fetchAll(opts);\n+      if (Client.useGraphQL()) {\n+        const [issues, pullRequests] = await Promise.all([\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .issues({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 100}),\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .pullRequests({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 30})\n+        ]);\n+        let result = [];\n+        if (issues) {\n+          result = result.concat(issues);\n+        }\n+        if (pullRequests) {\n+          result = result.concat(pullRequests);\n+        }\n+        fetchPromise = new Promise(resolve => resolve(", "created_at": "2018-07-05T08:30:36Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDM5NTk0MA==", "fields": {"body": "Use your width wisely.\nPut message on next line & indent only four spaces.", "diff": "@@ -162,8 +163,21 @@ class SubLanguageMeta(type(cls)):\n \n                 def __getattr__(self, item):\n                     try:\n+                        if item is 'comment_delimiter':\n+                            # Providing backward compatibility for\n+                            # `comment_delimiter`\n+                            logging.warning('The property `comment_delimiter` '\n+                                            'of Language module is deprecated '", "created_at": "2018-07-05T15:30:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTE3NA==", "fields": {"body": "possibly deferred to a separate followup issue after this is merged ...\nWhat about adding a query parameter to force either GraphQL or standard API ?\nAnd (if still feasible) possibly add a env var which does the same for the pre-fetch and/or developer's local server?", "diff": "@@ -191,6 +193,17 @@ class Client extends EventEmitter {\n     let {token, password} = this.getCredentials();\n     return !!token || !!password;\n   }\n+  useGraphQL() {\n+    // use GraphQL when applicable, provided `hasCredentials()` is true\n+    // developers need to change the behaviour here in case they", "created_at": "2018-07-06T05:54:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTkwOQ==", "fields": {"body": "trailing comma ?\nI'll stop with the trailing comma here, in case you or @blazeu believe they are not appropriate in these contexts.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'", "created_at": "2018-07-06T05:59:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjI4Ng==", "fields": {"body": "ideally this coala specific config is not in this library, but is provided by separate configuration.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';", "created_at": "2018-07-06T06:02:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjQ0Ng==", "fields": {"body": "this is my python brain kicking in ....\nthe || .. here should be indented more so that it doesnt align with the console.log(..) on the next line.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {", "created_at": "2018-07-06T06:03:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MTU3NQ==", "fields": {"body": "accessing the same property multiple times for a FileFactory objects.", "diff": "@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files\n+  anymore.\n+- High Performance: ``FileFactory``'s properties are cached to reduce\n+  unnecessary load caused by accessing the same property for a\n+  ``FileFactory`` objects.", "created_at": "2018-07-08T14:00:27Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0NDM1Mg==", "fields": {"body": "I changed the heading to various formats and the raw mode parts is kept the same to avoid confusion.", "diff": "@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files", "created_at": "2018-07-08T15:34:10Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDAyNg==", "fields": {"body": "yes, to forcefully include it despite other rules which ignore it.", "diff": "@@ -7,5 +7,6 @@\n *.patch\n *.orig\n *.diff\n+!*/src/lib/columns.js", "created_at": "2018-07-07T11:35:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3NzE3NQ==", "fields": {"body": "No. It installs the pre-release in pypi, from January 2018.\nWe still are not ready to do pre-releases yet, with coala-utils and dependency-management still needing more work and need to be released first.", "diff": "@@ -109,12 +110,8 @@ script:\n   - py.test\n   - python setup.py bdist_wheel\n   - pip install ./dist/coala-*.whl\n-  - pip install coala-bears[alldeps] --pre -U\n-  # https://github.com/coala/coala-bears/issues/1037\n-  - >\n-    if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-      sed -i.bak '/bears = GitCommitBear/d' .coafile\n-    fi\n+  - curl -fsSL -o coala-bears.zip $BEARS_ZIP_URL/master\n+  - pip install coala-bears.zip[alldeps] --pre -U", "created_at": "2018-07-09T17:02:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA==", "fields": {"body": "Why not just 'coala' like: a bear is a set of rules used by coala or a bear is a routine used by coala to check ...", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:34:38Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw==", "fields": {"body": "@sangamcse would 'libraries' be a better replacement for 'packages' ?", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:09:08Z", "last_edited_at": null, "author": "sarthakchakerverty", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2ODEyNg==", "fields": {"body": "why not just declaring an optional argument bear=None? Then you don't need to pop it off from kwargs", "diff": "@@ -26,6 +26,11 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, **kwargs):\n+        self.bear = kwargs.get('bear', None)\n+        kwargs.pop('bear', None)", "created_at": "2018-07-10T19:36:33Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3MDU3MA==", "fields": {"body": "that should be\nself.message('%s = %r' % (param, section_params_dict[param] if param in section_params_dict else md.optional_params[param][2]))", "diff": "@@ -34,6 +39,19 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        md = self.bear.get_metadata()\n+        section_params_dict = md.create_params_from_section(self.bear.section)\n+        for param in md.non_optional_params:\n+            self.message('%s = %r' % (param, section_params_dict[param]))\n+        for param in md.optional_params:\n+            if param in section_params_dict:\n+                self.message('%s = %r' % (param, section_params_dict[param]))\n+            else:\n+                self.message('%s = %r' % (param,\n+                                          md.optional_params[param][2]))", "created_at": "2018-07-10T19:45:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ==", "fields": {"body": "line_length is not used\nThis example doesn't round up so nicely, SpaceConsistencyBear is similar, and what's especially weird is that you lint on message, not on file ;) Please provide a better example \ud83d\udc4d", "diff": "@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the\n+passed message contains character more than 79.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class CharCheckBear(LocalBear):\n+        def run(self, filename, file, message: str, line_length: int = 79):\n+            \"\"\"\n+            Detect if a passed string contain characters more than 79.\n+\n+            :param message:\n+                enter the message.\n+            \"\"\"\n+            if len(message)<=79:\n+                yield self.new_result(message=message, file=filename)\n+            else:\n+                yield self.new_result(message='message contains character '\n+                                              'more than 79', file=filename)", "created_at": "2018-07-10T20:04:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ==", "fields": {"body": "for your code sounds redundant, but I think it is acceptable.", "diff": "@@ -55,6 +55,16 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by coala to check your code\n+for lint issues. A group of these routines(bears) is used for defining\n+certain quality requirements in various languages. A bear can analyse code\n+for potential problems, calculate metrics and even provide corrections for\n+your code. While many of these bears for various languages are shipped along", "created_at": "2018-07-11T20:21:42Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjAzNjY4Mw==", "fields": {"body": "padding: 0", "diff": "@@ -0,0 +1,92 @@\n+.review {\n+  cursor: default;\n+  padding-top: 0;\n+  padding-right: 0;\n+  padding-bottom: 0;\n+  padding-left: 0;", "created_at": "2018-07-12T13:37:29Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg4ODk5Mg==", "fields": {"body": "Can't changed to debug_run(self.run, *args, Debugger(bear=self), **kwargs) for python3.4 during running pytest it will throw SyntaxError SyntaxError: only named arguments may follow *expression", "diff": "@@ -319,7 +338,7 @@ def run_bear_from_section(self, args, kwargs):\n                 self.name), str(err))\n             return\n         if self.debugger:\n-            return debug_run(self.run, Debugger(), *args, **kwargs)\n+            return debug_run(self.run, Debugger(bear=self), *args, **kwargs)", "created_at": "2018-07-17T04:06:21Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjY3NQ==", "fields": {"body": "an approach you might like to try (test on a different fork; no PR necessary) is adding a bear setting for language : Language = Unknown , which you can pass to the Formatting aspect to make it happy.\nLocalBearTestHelper is in a different repo, so it needs to be a separate PR.", "diff": "@@ -49,4 +67,6 @@ def run(self,\n                     line=line_number + 1,\n                     column=max_line_length + 1,\n                     end_line=line_number + 1,\n-                    end_column=len(line))\n+                    end_column=len(line),\n+                    aspect=Formatting('py'),", "created_at": "2018-07-17T11:31:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MDYxMQ==", "fields": {"body": "It is better to make a new AspectsTestBear instead of changing the TestBear IMO.", "diff": "@@ -1,8 +1,20 @@\n from coalib.bears.LocalBear import LocalBear\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import TrailingSpace\n \n \n-class TestBear(LocalBear):\n+class TestBear(", "created_at": "2018-07-18T12:35:13Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTI2Mw==", "fields": {"body": "why do you introduce documentation about the debugger in the commit for the profiler?", "diff": "@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.", "created_at": "2018-07-18T18:01:36Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3ODk1NA==", "fields": {"body": "what if profile and debugger are both given? I thought that's an invalid state, thus an exception should be raised?", "diff": "@@ -283,6 +291,7 @@ def __init__(self,\n         self.message_queue = message_queue\n         self.timeout = timeout\n         self.debugger = debugger\n+        self.profile = profile", "created_at": "2018-07-18T18:13:15Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTU0Nw==", "fields": {"body": "function name doesn't resemble what it's doing", "diff": "@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):", "created_at": "2018-07-18T18:15:13Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTczNw==", "fields": {"body": "Function name should be preceded with an underscore, I guess nobody should directly call that^^", "diff": "@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):", "created_at": "2018-07-18T18:15:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2Nzc2OA==", "fields": {"body": "Up to you: Maybe we shouldn't document that, people will understand what the naming scheme means once they see a profile dump.", "diff": "@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'\n+        ' to dump the profile files, supply the path or the directory name, all'\n+        ' the bear (even implicit dependency bears) in a section will get'\n+        ' profile and there profile data will save in the specified directory'\n+        ' or the path with name format {section.name}_{bear.name}.prof.')", "created_at": "2018-07-19T20:53:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTM0NQ==", "fields": {"body": "It uses the argcomplete import at the top of the file which ensures that the test module fails loudly with a suitable error message if it is not installed, instead of the import rather silently failing and the test method being a bit confusing in how it fails.", "diff": "@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete\n+\n+    def test_argcomplete_bear_names(self):\n+        self.assertEqual(_argcomplete_bears_names(), get_all_bears_names())\n+\n+    def test_missing_argcomplete(self):\n+        if coalib.parsing.DefaultArgParser.argcomplete is not None:\n+            coalib.parsing.DefaultArgParser.argcomplete = None\n+        fake_importer = Mock(side_effect=ImportError('import missing'))\n+        with patch('builtins.__import__', new=fake_importer):\n+            default_arg_parser()\n+        self.assertFalse(coalib.parsing.DefaultArgParser.argcomplete)\n+        # Dummy usage\n+        coalib.parsing.DefaultArgParser.argcomplete = argcomplete", "created_at": "2018-07-21T00:34:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTc2OQ==", "fields": {"body": "this doesnt belong in the checked in version", "diff": "@@ -24,6 +24,7 @@ class PySafetyBearTest(LocalBearTestHelper):\n \n     def setUp(self):\n         self.uut = PySafetyBear(Section('name'), Queue())\n+        self.maxDiff = None", "created_at": "2018-07-21T00:42:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyMjc1Mw==", "fields": {"body": "If not passing a bear is an erroneous state, raise an exception while instantiating the debugger. This is easiest and will always require you to initialize the debugger properly.", "diff": "@@ -34,6 +38,21 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        if self.bear is not None:\n+            md = self.bear.get_metadata()\n+            section_params_dict = md.create_params_from_section(\n+                                  self.bear.section)\n+            for param in md.non_optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param]))\n+            for param in md.optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param] if\n+                                          param in section_params_dict else\n+                                          md.optional_params[param][2]))\n+            return 1\n+        else:\n+            self.error(\"Name 'settings' is not defined.\")", "created_at": "2018-07-20T17:53:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw==", "fields": {"body": "split on . and use the first three", "diff": "@@ -0,0 +1,18 @@\n+Name: {{ name }}\n+{# cabal cannot parse .dev version syntax #}\n+Version: {{ version[:-4] }}", "created_at": "2018-07-20T18:17:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ==", "fields": {"body": "You have all your code wrapped in an if statement, though, so none of the code will be run if REPOSITORIES is undefined, right?", "diff": "@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {", "created_at": "2018-07-23T06:43:09Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjYzNQ==", "fields": {"body": "No , advisory is additional detail", "diff": "@@ -39,9 +40,9 @@ def test_with_cve_vulnerability(self):\n             self.uut,\n             file_contents,\n             [Result.from_values('PySafetyBear',\n-                                'bottle<0.12.10 is vulnerable '\n-                                'to CVE-2016-9964 and your project '", "created_at": "2018-07-21T09:09:10Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTgzNQ==", "fields": {"body": "Keep it as it was, uncommented. Sorry if i was confusing.\nUse pragma nocover for now.", "diff": "@@ -11,21 +12,34 @@\n from coalib.settings.Setting import typed_list\n \n \n-def cve_key_checker(vulnerability):\n-    if 'cve' in vulnerability.data:\n-        if vulnerability.data['cve'] is None:\n-            return None\n-        else:\n-            return True\n-    else:\n-        return None\n+# It was for old versions of safety and those versions will be allow in future.\n+# def cve_key_checker(vulnerability):", "created_at": "2018-07-21T14:12:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTk4Mw==", "fields": {"body": "See other bears (inc CheckstyleBear ) for the type to use for paths", "diff": "@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,", "created_at": "2018-07-21T14:19:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2Mw==", "fields": {"body": "josn", "diff": "@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'", "created_at": "2018-07-22T04:06:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzQwOA==", "fields": {"body": "put these in module level global _private variables so that people can access them easily if they need to.", "diff": "@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'", "created_at": "2018-07-22T04:09:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTgyNA==", "fields": {"body": "You don't need to change this to let since you still could do push. Also, uppercase words in a variable name must be use const.", "diff": "@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [", "created_at": "2018-07-22T10:51:25Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTk3Ng==", "fields": {"body": "Give a single whitespace after warning:.", "diff": "@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {\n+    const repoOwner = repos.split(':')[0];\n+    const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+    SAMPLE_REPOS.push({\n+      repoOwner, repoNames\n+    });\n+  };\n+} catch (error) {\n+  console.log('warning:', error);", "created_at": "2018-07-22T10:56:10Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDM5MQ==", "fields": {"body": "a count comparson sounds good.", "diff": "@@ -422,3 +424,38 @@ def test_get_all_bears_names(self):\n                  'TestDepBearAA',\n                  'AspectTestBear',\n                  'TestDepBearDependsAAndAA'})\n+\n+    def test_get_all_languages(self):\n+        with bear_test_module():\n+            languages = get_all_languages()\n+            assert isinstance(languages, tuple)\n+            self.assertSetEqual(\n+                {str(language) for language in languages},\n+                {'C',\n+                 'C#',\n+                 'CPP',\n+                 'CSS',\n+                 'Fortran',\n+                 'Golang',\n+                 'Hypertext Markup Language 2.0, 3.2, 4.0, 4.1, 5, 5.1',\n+                 'Java',\n+                 'JavaScript',\n+                 'JavaServer Pages',\n+                 'Jinja2',\n+                 'Markdown',\n+                 'Matlab',\n+                 'ObjectiveC',\n+                 'PHP',\n+                 'PLSQL',\n+                 'PowerShell',\n+                 'Python 2.7, 3.3, 3.4, 3.5, 3.6',\n+                 'Ruby',\n+                 'Scala',\n+                 'Shell',\n+                 'Swift',\n+                 'Tcl',\n+                 'TypeScript',\n+                 'Unknown',\n+                 'Vala',\n+                 'VisualBasic',\n+                 'm4'})", "created_at": "2018-07-23T09:55:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1MDg2OQ==", "fields": {"body": "This would be the correct sorted order\nTEST_BEAR_NAME_REPRS = [\n    \"<class 'AspectTestBear.AspectTestBear'>\",\n    \"<class 'DependentBear.DependentBear'>\",\n    \"<EchoBear linter class (wrapping 'echo')>\",\n    \"<ErrorTestBear linter class (wrapping 'I_do_not_exist')>\",\n    \"<class 'JavaTestBear.JavaTestBear'>\",\n    \"<class 'LineCountTestBear.LineCountTestBear'>\",\n    \"<class 'RaiseTestBear.RaiseTestBear'>\",\n    \"<class 'SpaceConsistencyTestBear.SpaceConsistencyTestBear'>\",\n    \"<class 'TestBear.TestBear'>\",\n    \"<class 'TestBearDep.TestDepBearA'>\",\n    \"<class 'TestBearDep.TestDepBearAA'>\",\n    \"<class 'TestBearDep.TestDepBearBDependsA'>\",\n    \"<class 'TestBearDep.TestDepBearCDependsB'>\",\n    \"<class 'TestBearDep.TestDepBearDependsAAndAA'>\"\n]", "diff": "@@ -5,16 +5,35 @@\n \n from coala_utils.ContextManagers import retrieve_stdout, retrieve_stderr\n \n-TEST_BEARS_COUNT = 14\n+# This list is sorted alphabetically\n+TEST_BEAR_NAMES = (\n+    'AspectTestBear',\n+    'DependentBear',\n+    'EchoBear',\n+    'ErrorTestBear',\n+    'JavaTestBear',\n+    'LineCountTestBear',\n+    'RaiseTestBear',\n+    'SpaceConsistencyTestBear',\n+    'TestBear',\n+    'TestDepBearA',\n+    'TestDepBearAA',\n+    'TestDepBearBDependsA',\n+    'TestDepBearCDependsB',\n+    'TestDepBearDependsAAndAA',\n+)\n+\n+TEST_BEARS_COUNT = len(TEST_BEAR_NAMES)\n \n # This list is sorted by filename of the bears, then name within the modules\n-TEST_BEAR_NAMES = [\n+TEST_BEAR_NAME_REPRS = [", "created_at": "2018-07-23T10:20:16Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw==", "fields": {"body": "Check for the type instead, typeof REPOSITORIES !== 'undefined'", "diff": "@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {", "created_at": "2018-07-23T12:09:47Z", "last_edited_at": "2018-07-23T12:10:31Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMDQyMg==", "fields": {"body": "I see, I'll keep it here for now else the tests won't pass. Would rebase as soon as you get the issue solved \ud83d\udc4d", "diff": "@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={", "created_at": "2018-07-23T09:07:09Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTIwNw==", "fields": {"body": "It is ready", "diff": "@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={", "created_at": "2018-07-23T17:45:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjE1Ng==", "fields": {"body": "shouldn't be there another newline here? Not sure if RST requires that", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to\n+optimize its performance.\n+\n+The profiler will start by profiling the run() method of bears because it\n+consumes most of the bears time. So, this is part where bear writer will spend\n+time, as rest of the part like loading the files, collecting the settings,\n+etc. are done by coala itself.\n+\n+.. note::", "created_at": "2018-07-26T09:05:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM5OTAwOA==", "fields": {"body": "Why not assert the instances of all three bears.", "diff": "@@ -470,9 +470,9 @@ def test_get_filtered_bears(self):\n         local_bears['cli'] = _sort_bears(local_bears['cli'])\n         global_bears['cli'] = _sort_bears(global_bears['cli'])\n \n-        self.assertEqual(len(local_bears['cli']), 2)\n-        self.assertEqual(str(local_bears['cli'][0]),\n-                         \"<class 'JavaTestBear.JavaTestBear'>\")\n+        self.assertEqual(len(local_bears['cli']), 3)\n         self.assertEqual(str(local_bears['cli'][1]),", "created_at": "2018-07-26T09:59:01Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2ODEzNA==", "fields": {"body": "Usage of the --devoption is deprecated. Use--only=dev instead.\nc.f. https://travis-ci.org/coala/gh-board/jobs/408440200#L458", "diff": "@@ -26,6 +26,12 @@ before_script:\n   - sh -e /etc/init.d/xvfb start\n   - sleep 3 # give xvfb some time to start\n \n+before_install:\n+  - npm install --no-save --no-optional --dev npm@5.8.0", "created_at": "2018-07-26T14:00:59Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczMjE2Nw==", "fields": {"body": "Just noting that when I run eslint with airbnb on the new files of this PR (not issue-store.js)...\nnpx install-peerdeps --dev eslint-config-airbnb\n..\n./node_modules/.bin/eslint script/queries/export.js script/queries/github_issue_info.js script/queries/github_label_info.js script/queries/github_pr_info.js script/queries/github_reaction_info.js src/github-client.js src/github-graphql.js\n\n\u2716 119 problems (114 errors, 5 warnings)\n  88 errors, 0 warnings potentially fixable with the `--fix` option.\n\ne.g.\nsrc/github-graphql.js:\n   2:1   error  Dependency cycle detected  import/no-cycle\n  15:26  error  Missing trailing comma     comma-dangle\n  22:5   error  Unary operator '++' used   no-plusplus", "diff": "@@ -0,0 +1,26 @@\n+import GraphQLClientBase from './github-graphql-base';\n+import Client from './github-client';\n+\n+// global event id\n+let EVENT_ID = 0;\n+\n+class GraphQLClient extends GraphQLClientBase {\n+  _updateRateLimit(rateLimit) {\n+    this.remaining = rateLimit.remaining;\n+    this.limit = rateLimit.limit;\n+    this.resetAt = rateLimit.resetAt;\n+    const emitterRate = {\n+      remaining: this.remaining,\n+      limit: this.limit,\n+      reset: this.resetAt\n+    };\n+    // to match Restful API style\n+    const responseStatus = 200;\n+    // config = {method, path, data, options}\n+    const config = null;\n+    Client.emit('end', EVENT_ID, config, responseStatus, emitterRate);\n+    EVENT_ID++;", "created_at": "2018-07-27T10:28:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NDM5NA==", "fields": {"body": "Sounds like a good idea,.\nhttps://gitlab.com/coala/mobans/issues/74", "diff": "@@ -1,5 +1,10 @@\n-from pytest_reqs import check_requirements\n+# Allow import to fail to avoid annoying developers\n+try:\n+    from pytest_reqs import check_requirements\n+except ImportError:", "created_at": "2018-07-28T14:08:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDc2MA==", "fields": {"body": "the helper would take an argument obviously for the setting name.\nIf necessary, create two helpers.\nAt the moment these are gibberish logic which I am assuming is similar because it isnt python code which is readable and intuitive.", "diff": "@@ -301,7 +302,12 @@ def __init__(self,\n         self.section = section\n         self.message_queue = message_queue\n         self.timeout = timeout\n-        self.debugger = debugger\n+        self.debugger = (False if 'debug_bears' not in section or (", "created_at": "2018-07-29T04:57:06Z", "last_edited_at": "2018-07-29T04:57:24Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIzOQ==", "fields": {"body": "Extract this fom webpack conf\n\n  \n    \n      gh-board/webpack.config.js\n    \n    \n        Lines 29 to 38\n      in\n      3c8b0e5\n    \n    \n    \n    \n\n        \n          \n           options: { \n        \n\n        \n          \n             presets: [ \n        \n\n        \n          \n               'react', \n        \n\n        \n          \n               'env' \n        \n\n        \n          \n             ], \n        \n\n        \n          \n             plugins: [ \n        \n\n        \n          \n               'react-require', \n        \n\n        \n          \n               'transform-object-rest-spread', \n        \n\n        \n          \n               'transform-class-properties' \n        \n\n        \n          \n             ], \n        \n    \n  \n\n\nbabel-loader will also read from .babelrc if it exists.", "diff": "@@ -0,0 +1,3 @@\n+{\n+  \"presets\": [\"es2015\", \"react\"]", "created_at": "2018-07-29T05:26:58Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTU0OQ==", "fields": {"body": "I'll skip this one as then the comment has to move as well.\nI'm trying to get their code in with least amount of changes, but basic style consistency changes are doable.", "diff": "@@ -30,16 +29,26 @@ const EtherpadInner = createReactClass({\n   },\n   poll() {\n     // Start polling\n-    Client.getAnonymousOcto().fromUrl(`${this.getUrl()}/export/txt`).read().then((text) => {\n-      this.setState({text});\n-      // This is the magic text inside a newly-created pad.\n-      // Defined in `etherpad-lite-heroku`'s settings file\n-      if (text.indexOf('Welcome to Etherpad!') >= 0) {\n-        this.loadIssueBody().then(() => {\n-          this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n-        });\n+    const etherpad = EtherpadClient.connect(\n+      this.getEtherpadInfo()\n+    );\n+    etherpad.getText({padID: this.props.padName}, (error, data) => {\n+      if(error) {\n+        console.error('Error creating pad: ' + error.message);\n+        if(error.message === 'padID does not exist') {\n+          this.loadIssueBody().then(() => {\n+            this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n+          });", "created_at": "2018-07-29T05:47:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDk0OQ==", "fields": {"body": "Yeah, this can also be used in #131, but not moved.", "diff": "@@ -91,11 +92,28 @@ function ReviewColumn(props) {\n }\n \n class KanbanRepo extends Component {\n+  state = {login: null};\n+\n   componentDidMount() {\n     const repoTitle = titlecaps(this.props.repoInfos[0].repoName);\n     document.title = `${repoTitle} Kanban Board`;\n+    Client.on('changeToken', this.onChangeToken);", "created_at": "2018-07-29T08:14:35Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzA1NA==", "fields": {"body": "what does this do?\nthe function name should describe it.\nthe docstring should explain it.", "diff": "@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):", "created_at": "2018-07-29T09:35:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw==", "fields": {"body": "you can return the result of bear.name.lower() in ... directly instead of using an if, it's like if True: return True else: return False now", "diff": "@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):\n+        return False\n+    elif bear.name.lower() in (\n+            map(str.lower, typed_list(str)(bear.section['debug_bears']))) or (\n+                typed_list(str)(bear.section['debug_bears'])[0].lower() in\n+            TRUE_STRINGS):\n+        return True\n+    else:\n+        return False", "created_at": "2018-07-29T10:35:23Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTMwNQ==", "fields": {"body": "We don't need this now since we have the same config as webpack?", "diff": "@@ -1,3 +1,4 @@\n+import React from 'react';", "created_at": "2018-07-29T12:11:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NDk5MA==", "fields": {"body": "Yes, but we will need to prevent this component loading if it is not set correctly.  It is useless fixing this here.\nEtherpadClient.connect(self.getEtherpadInfo()) is going to fail if this doesnt return a valid connection metadata.\ne.g. if I put in foo as the URL setting.\nIdeally the validation of the user setting is moved to the modal.\nBut this PR gives credit where it is due, and lets us build on top.\nFirst step is disabling the editor everywhere if the setting is empty.\nThen the problems of this entire component are much less critical as the user cant encounter the problems in the first few clicks.", "diff": "@@ -52,18 +61,27 @@ const EtherpadInner = createReactClass({\n     // from https://github.com/ether/etherpad-lite-jquery-plugin/blob/master/js/etherpad.js\n     return `${hostName}/p/${padName}`;\n   },\n+  getEtherpadInfo() {\n+    const reg = /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*):([0-9]+))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/;\n+    let m = window.localStorage.getItem('ep-url').match(reg);", "created_at": "2018-07-29T13:58:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NjI3MA==", "fields": {"body": "storing .graphql files inside a .js file isnt ideal.\ncant we load these files as const's ?\nSomething like https://github.com/ahalimkara/babel-plugin-import-static-files", "diff": "@@ -1,13 +0,0 @@\n-query($owner: String!, $name: String!) {", "created_at": "2018-07-30T01:22:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA3MzYxNA==", "fields": {"body": "It's both, it runs tasks offloaded by bears", "diff": "@@ -0,0 +1,16 @@\n+\"\"\"\n+Provides an API for coala's NextGen-Core\n+\n+- ``Bear``: Base class for all the NextGen Bears.\n+- ``Core``: Maintains sessions for coala's execution.", "created_at": "2018-07-30T09:48:26Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDk5Mw==", "fields": {"body": "Like @jayvdb mentioned, we don't need a configuration to publish code coverage to codecov.", "diff": "@@ -0,0 +1,9 @@\n+comment: false", "created_at": "2018-07-30T05:54:40Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDkyOA==", "fields": {"body": "This change is welcoming. Most of the text editors these days automatically pick up babelrc files and provide autocompletion features based on babel configuration.", "diff": "@@ -0,0 +1,11 @@\n+{", "created_at": "2018-07-30T05:54:08Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzMwOA==", "fields": {"body": "Use array.some or array.every ?", "diff": "@@ -350,3 +357,58 @@ export function filterCardsByFilter(cards, filter) {\n     return true;\n   });\n }\n+\n+// Filters the list of reviews by the criteria set in the URL.\n+// Note this happens after `issues/prs` get filtered. A review is\n+// just a part of a pull request, so this would only take effect\n+// if its corresponding issue is not filtered out.\n+// Used by FilterStore.filterAndSortReviews()\n+export function filterReviewsByFilter(reviews, filter, user) {\n+  filter = filter || getFilters();\n+  const {reviews: reviewOptions} = filter.getState();\n+\n+  let myReviews, reviewsUnderMyPr, myMetaReviews, others;\n+  for (const reviewOption of reviewOptions) {\n+    switch (reviewOption) {\n+    case 'my-reviews':\n+      myReviews = true;\n+      break;\n+    case 'reviews-under-my-pr':\n+      reviewsUnderMyPr = true;\n+      break;\n+    case 'my-meta-reviews':\n+      myMetaReviews = true;\n+      break;\n+    case 'others':\n+      others = true;\n+      break;\n+    default:\n+      throw new Error('Review filter is invalid!');\n+    }\n+  }\n+\n+  return reviews.filter(review => {\n+    const isMyReview = review.author && review.author.login && review.author.login === user;\n+    const isReviewUnderMyPr = review.prAuthor === user;\n+    const hasMyMetaReview = (() => {", "created_at": "2018-07-30T11:47:47Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyMjkxMg==", "fields": {"body": "split into multiple lines?\nalso noting that these methods are horribly repetitive. (i.e. renderTypes / renderStates / etc), but that should get fixed in a separate PR before or after this one, maybe by someone else ;-)", "diff": "@@ -243,6 +243,17 @@ class FilterDropdown extends Component {\n     return (<FilterCategory noSearch items={items}/>);\n   };\n \n+  renderReviews = () => {\n+    const filters = getFilters();\n+    const {reviews} = filters.getState();\n+\n+    const items = ['my-reviews', 'reviews-under-my-pr', 'my-meta-reviews', 'others'].map((review) => {\n+      return {text: review, isSelected: reviews.indexOf(review) >= 0, toggleHref: filters.toggleReviews(review).url() };", "created_at": "2018-07-30T12:59:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMxMTU4MA==", "fields": {"body": "dirname or dirpath, choose wisely :P", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled\n+files will be saved to current working directory. If specified directory does\n+not exists it will create one and if path specified is already a file path then\n+it will throw ``FileExistsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format ``{section.name}_{bear.name}.prof``.\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument.\n+\n+- To dump profile files in current working directory:\n+\n+  .. code:: shell\n+\n+      $coala -b PEP8Bear,PyUnusedCodeBear -f <filename> --profile\n+\n+- To dump profile files to a specified directory:\n+\n+  .. code:: shell\n+\n+      $coala -b PEP8Bear,MypyBear -f <filename> --profile <dirpath>\n+\n+coafile\n+^^^^^^^\n+\n+Users can specify to profile bears using a ``.coafile`` as well.\n+\n+- To dump profile files in current working directory:\n+\n+  ::\n+\n+      [all]\n+      bears = PEP8Bear,MypyBear\n+      files = <filename>\n+      profile = True\n+\n+- To dump profile files to a specified directory:\n+\n+  ::\n+\n+      [all]\n+      bears = PEP8Bear,MypyBear\n+      files = <filename>\n+      profile = DirName/Dirpath", "created_at": "2018-07-30T20:33:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjQ5NTUxOQ==", "fields": {"body": "Use https://www.npmjs.com/package/babel-plugin-inline-import", "diff": "@@ -1,13 +0,0 @@\n-query($owner: String!, $name: String!) {", "created_at": "2018-07-31T11:50:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTgwOQ==", "fields": {"body": "When reading this sounds a bit confusing, it reads like it takes either \"an additional parameter\", or either a \"directory name\" or a \"directory path\". Would recommend following:\n\n... accepts an additional parameter: a directory path where profiled files will be ...", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled", "created_at": "2018-07-31T19:32:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTk5OQ==", "fields": {"body": "question is what that means to the regular user, but let's put that aside for now, I'm not sure how coala should handle such \"user-exceptions\" properly (which are intended to generate an error-log and exit).", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled\n+files will be saved to current working directory. If the specified directory\n+does not exist it will be created. If the specified path points to an already\n+existing file a ``FileExistsError`` is thrown.", "created_at": "2018-07-31T19:33:20Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjcyNzAwMg==", "fields": {"body": "please add a disable_global variable like https://github.com/coala/git-task-list/blob/master/.travis.yml#L13 , so all extra jobs can re-use it.", "diff": "@@ -18,18 +20,33 @@ jobs:\n       before_script: false\n       script: .ci/check_moban.sh\n       after_success: false\n+      after_failure: false", "created_at": "2018-08-01T00:55:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MjA3OQ==", "fields": {"body": "no.  we fall back to the setting , which will be in the arg max_line_length, which defaults to 79 cpl.\nBut most Language will never have a max_line_length, because most languages dont restrict that, so this warning is not user friendly, nor is it developer friendly.  We dont want patches for adding max_line_length to language definitions unless the language does restrict line length, and we know that is rare.", "diff": "@@ -30,7 +47,30 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.\n         '''\n+        if language:\n+            try:\n+                language = Language[language]\n+            except UnknownLanguageError:\n+                logging.warn(\n+                    language + ' is an invalid language name '\n+                    'or is not recognized by coala. Language specific '\n+                    'line length limitation can not be applied.'\n+                )\n+                language = Language['Unknown']\n+            else:\n+                if 'max_line_length' in language.attributes:\n+                    max_line_length = language.max_line_length\n+                else:\n+                    logging.warn(\n+                        'Language ' + str(language) + ' does not have '\n+                        '`maximum line length` defined in coalang. '\n+                        'Falling back to 80 characters as maximum line length.'", "created_at": "2018-08-02T22:18:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU0MTM5NQ==", "fields": {"body": "should have also been moved up", "diff": "@@ -30,7 +46,11 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.", "created_at": "2018-08-03T13:20:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDM1MA==", "fields": {"body": "again, dont use tags that are a language .  it is confusing.", "diff": "@@ -68,3 +105,53 @@ def apply_filters(filters, bears=None):\n         filter_name, *filter_args = filter\n         bears = apply_filter(filter_name, filter_args, bears)\n     return bears\n+\n+\n+def apply_section_filters(filters, sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filters``. It returns\n+    intersection of sections if more than one element is present in ``filters``\n+    list.\n+\n+    :param filters:\n+        List of args based on ``sections`` has to be filtered.\n+        For example:\n+        ``[['tags', ('save', 'change')], ['exclude', ('css', '!python')]]``", "created_at": "2018-08-05T15:38:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMwMg==", "fields": {"body": "This belongs before --bear-dirs , probably after --files .\nLets wait for more feedback on position", "diff": "@@ -177,6 +177,10 @@ def default_arg_parser(formatter_class=None):\n         '-d', '--bear-dirs', type=PathArg, nargs='+', metavar='DIR',\n         help='additional directories which may contain bears')\n \n+    inputs_group.add_argument(", "created_at": "2018-08-05T15:35:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMzMA==", "fields": {"body": "please use exampes from your cEP, and your own real needs.\nthis looks like language , not a tag which should be an arbitrary grouping which couldnt be achieved via any other means.", "diff": "@@ -49,6 +55,37 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n+def apply_section_filter(filter_name, filter_args, all_sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filter_args``. It returns\n+    all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the filter.\n+    :param filter_args:\n+        Arguments of the filter to be passed in.\n+        For example:\n+        ``['tags', ('java',)]``", "created_at": "2018-08-05T15:37:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDQ0Mw==", "fields": {"body": "move the '-c',  back to the next line, so you dont modify that line.\nit is also confusing to have the '-c',  on this line when its arg is on the next line.", "diff": "@@ -198,12 +198,16 @@ def test_merge_defaults(self):\n                 gather_configuration(lambda *args: True,\n                                      self.log_printer,\n                                      arg_list=['-S', 'value=1', 'test.value=2',\n-                                               '-c', escape(temporary, '\\\\')] +\n+                                               '--tags', 'save', '-c',", "created_at": "2018-08-05T15:41:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTY4Ng==", "fields": {"body": "Please see how this is used by core and bears. I believe there are no equivalent in xml.", "diff": "@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}\n+    multiline_string_delimiters = string_delimiters\n+    encapsulators = {'<': '>'}", "created_at": "2018-08-05T21:57:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTcyNA==", "fields": {"body": "Also add cdata", "diff": "@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}", "created_at": "2018-08-05T21:58:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2MDE2NQ==", "fields": {"body": "great. removing this is necessary, because the decorator uses self.section.aspects , and so self is needed.", "diff": "@@ -21,9 +23,14 @@ class PycodestyleBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting'}\n \n-    @staticmethod", "created_at": "2018-08-06T02:03:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2OTAxOQ==", "fields": {"body": "I think we could remove the last ,", "diff": "@@ -159,6 +161,15 @@ def run_coala(console_printer=None,\n                 (section_name, sections[section_name])\n                 for section_name in targets)\n \n+        # Collect all the section filters which are based on args,", "created_at": "2018-08-06T03:54:24Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjg5Mw==", "fields": {"body": "Please don't use subclass, it's an antipattern in React. Instead, extract the logic into separate component or use HOC", "diff": "@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {", "created_at": "2018-08-04T11:50:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjkyNw==", "fields": {"body": "Remember to use onClick = () => {} in class method so it autobinds.", "diff": "@@ -1,45 +1,180 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '\ud83d\udc4d',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '\ud83d\udc4e',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '\ud83d\ude04',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '\ud83c\udf89',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '\ud83d\ude15',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '\u2764\ufe0f',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  async onClick(id, content) {\n+    const canAdd = this.state.canAdd[content];\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n+    }\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '\ud83d\udc4d',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '\ud83d\udc4e',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '\ud83d\ude04',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '\ud83c\udf89',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '\ud83d\ude15',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '\u2764\ufe0f',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={this.onClick.bind(this, id, reaction.name)}", "created_at": "2018-08-04T11:52:33Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNzg4MA==", "fields": {"body": "Component approach can be done by making a component that takes a children as a function or a render prop that gives back data. i.e.\nconst Auth = ({ children }) => {\n  return children(loginInfo) // get loginInfo from somewhere (componentDidMount?)\n}\n\n// or with render prop\n\nconst Auth = ({ render }) => {\n  return render(loginInfo)\n}\nusage:\n<Auth>\n{loginInfo => {\n  ... add logic here or render component\n}}\n</Auth>\n\n// or\n\n<Auth render={{loginInfo => { ... }}} />\nHOC is just a function that wraps other component, gives it extra prop, and returns it\nfunction withAuth(WrapperComponent) {\n  return class WithAuth extends Component {\n    render() {\n      return <WrapperComponent {...this.props} loginInfo={this.loginInfo} />\n    }\n  }\n}\nHOC usage:\nconst ReviewCard = ({ loginInfo }) => <div>{loginInfo.something}</div>\n\nexport default withAuth(ReviewCard)\nhttps://reactjs.org/docs/render-props.html\nhttps://reactjs.org/docs/higher-order-components.html", "diff": "@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {", "created_at": "2018-08-04T12:44:10Z", "last_edited_at": "2018-08-04T12:47:54Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODkyMg==", "fields": {"body": "We can have a alternate way, check this out https://medium.com/@george.shuklin/how-to-test-if-name-main-1928367290cb", "diff": "@@ -67,3 +67,4 @@ exclude_lines =\n   pragma ${PLATFORM_SYSTEM}: no cover\n   pragma ${OS_NAME}: no cover\n   pragma Python [0-9.,]*${PYTHON_VERSION}[0-9.,]*: no cover\n+  sys.exit\\(main\\(\\)\\)", "created_at": "2018-08-04T13:39:36Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0NQ==", "fields": {"body": "code repetition here, no need to reassign the same value", "diff": "@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')", "created_at": "2018-08-05T07:12:47Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0Ng==", "fields": {"body": "same ^^", "diff": "@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []", "created_at": "2018-08-05T07:13:01Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMDA0NQ==", "fields": {"body": "FileExistsError will be thrown and it raise SystemExit when user provide a filepath in --profile but if user provide a directory path and that directory already have profiled files then in the next run of coala file with the same name gets overwritten", "diff": "@@ -0,0 +1,76 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter: a directory path where\n+profiled files will be dumped, if ``True`` is provided profiled files will be\n+saved to current working directory. If the specified directory does not exist\n+it will be created. If the specified path points to an already existing file\n+a error is raised. Profiled files will get overwritten, if specified directory", "created_at": "2018-08-06T07:48:07Z", "last_edited_at": "2018-08-06T07:48:40Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyMDM2OQ==", "fields": {"body": "not all pycodestyle errors are LineLength('py').\nPlease decode the pycodestyle errors and use appropriate aspects", "diff": "@@ -61,3 +67,24 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        output_regex = (r'(?P<line>\\d+) (?P<column>\\d+) '\n+                        r'(?P<message>(?P<origin>\\S+).*)')\n+        result = re.match(output_regex, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        yield Result.from_values(\n+            origin=self,\n+            message=message,\n+            file=filename,\n+            line=int(line),\n+            column=int(column),\n+            aspect=LineLength('py'),", "created_at": "2018-08-06T14:52:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyOTUxMQ==", "fields": {"body": "I think it would've been possible to chain onChangeToken if it's component with render prop instead of HOC\nclass Dashboard extends Component {\n  onChangeToken() {\n    ...\n  }\n  \n  renderDashboard(loginInfo) {\n    return (...)\n  }\n  \n  render() {\n    return (\n      <Auth\n        onChangeToken={this.onChangeToken}\n        render={this.renderDashboard}\n      />\n    )\n  }\n}\nThe onChangeToken in Auth component (currently withAuth HOC) should also call this.props.onChangeToken, after setting its own state.\nYou could also pass Client down with this.props.onChangeToken so it's not leaking (although I'm not so sure, is Client related to auth?)", "diff": "@@ -1,125 +1,186 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n import classnames from 'classnames';\n import {Link} from 'react-router';\n \n import {getFilters} from '../route-utils';\n import IssueStore from '../issue-store';\n+import Database from '../database';\n \n import GithubFlavoredMarkdown from './gfm';\n import Time from './time';\n import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n+import withAuth from './login-auth';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {\n+  saveToDatabase = (content, isAdd) => {\n+    // reviewCard is just part of issueCard\n+    const {card, loginInfo} = this.props;\n+    const {repoOwner, repoName, number} = card;\n+    const {login} = loginInfo;\n+    if (isAdd) {\n+      // add a new reaction\n+      if (!card.reactions) card.reactions = [];\n+      card.reactions.push({\n+        content,\n+        user: {\n+          login,\n+        },\n+      });\n+    } else {\n+      // remove an existing reaction\n+      card.reactions = card.reactions.filter((reaction) => {\n+        return !(reaction.user.login === login && reaction.content === content);\n+      });\n+    }\n+    // find the corresponding issueCard\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    // update corresponding issueCard\n+    issueCard.issue.pullRequest.comments.forEach(reviewCard => {\n+      if (reviewCard.id === card.id) {\n+        reviewCard = card;\n+      }\n+    });\n+    Database.putCards([issueCard]);\n+  }\n+\n+  render() {\n+    const {card, primaryRepoName, loginInfo} = this.props;\n+    const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n+    const key = `${repoOwner}/${repoName}#${number}-${id}`;\n+\n+    // comment updatedAt is updated when comment content is edited.\n+    // Note that the default `updatedAt` field of review comment\n+    // provided by GraphQL API is inaccurate. Thus, we use our custom\n+    // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n+    const updatedAt = card.updatedAt;\n+\n+    const user = card.author;\n+    const assignedAvatar = (\n+      <Link to={getFilters().toggleUserName(user.login).url()}>\n+        <img\n+          key='avatar'\n+          className='avatar-image'\n+          title={'Click to filter on ' + user.login}\n+          src={user.avatarUrl}/>\n+      </Link>\n+    );\n+    // stop highlighting after 5min\n+    const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n+\n+    // put the corresponding pull request as related card\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    const relatedCards = [issueCard].map((issueCard) => {\n+      let title;\n+      if (issueCard.issue) {\n+        title = (\n+          <span className='related-issue-title'>{issueCard.issue.title}</span>\n+        );\n+      }\n+      return (\n+        <div key={issueCard.key()} className='related-issue'>\n+          <IssueOrPullRequestBlurb\n+            card={issueCard}\n+            primaryRepoName={card.repoName}/>\n+          {title}\n+        </div>\n       );\n+    });\n+\n+    const classes = {\n+      'review': true,\n+      'is-updated': isUpdated,\n+    };\n+\n+    const header = [\n+      <ReviewBlurb key='review-blurb'\n+        card={card}\n+        primaryRepoName={primaryRepoName} />,\n+    ];\n+\n+    let reactionsStat = {\n+      THUMBS_UP: 0,\n+      THUMBS_DOWN: 0,\n+      LAUGH: 0,\n+      HOORAY: 0,\n+      HEART: 0,\n+      CONFUSED: 0\n+    };\n+    if (reactions) {\n+      reactions.forEach(reaction => reactionsStat[reaction.content]++);\n     }\n+\n+    let noReactionByMe;\n+    let hasLogin = false;\n+    if (loginInfo) {\n+      hasLogin = true;\n+      noReactionByMe = {\n+        THUMBS_UP: true,\n+        THUMBS_DOWN: true,\n+        LAUGH: true,\n+        HOORAY: true,\n+        HEART: true,\n+        CONFUSED: true\n+      };\n+      if (reactions) {\n+        reactions.forEach(reaction => {\n+          if (reaction.user && reaction.user.login === loginInfo.login) {\n+            noReactionByMe[reaction.content] = false;\n+          }\n+        });\n+      }\n+    }\n+\n     return (\n-      <div key={issueCard.key()} className='related-issue'>\n-        <IssueOrPullRequestBlurb\n-          card={issueCard}\n-          primaryRepoName={card.repoName}/>\n-        {title}\n-      </div>\n-    );\n-  });\n-\n-  const classes = {\n-    'review': true,\n-    'is-updated': isUpdated,\n-  };\n-\n-  const header = [\n-    <ReviewBlurb key='review-blurb'\n-      card={card}\n-      primaryRepoName={primaryRepoName} />,\n-  ];\n-\n-  let reactionsStat = {\n-    THUMBS_UP: 0,\n-    THUMBS_DOWN: 0,\n-    LAUGH: 0,\n-    HOORAY: 0,\n-    HEART: 0,\n-    CONFUSED: 0\n-  };\n-  if (reactions) {\n-    reactions.forEach(reaction => reactionsStat[reaction.content]++);\n-  }\n+      <div className='-card-and-related'>\n+        <BS.ListGroupItem\n+          key={key}\n+          header={header}\n+          className={classnames(classes)}>\n \n-  return (\n-    <div className='-card-and-related'>\n-      <BS.ListGroupItem\n-        key={key}\n-        header={header}\n-        className={classnames(classes)}>\n-\n-        <span className='-extra-span-for-inline-popover'>\n-          <a\n-            key='link'\n-            className='review-title'\n-            target='_blank'\n-            href={url}>\n-              <GithubFlavoredMarkdown\n-                inline\n-                repoOwner={repoOwner}\n-                repoName={repoName}\n-                text={bodyText}/>\n-          </a>\n-        </span>\n-\n-        <span key='footer' className='review-footer'>\n-          <span key='left-footer' className='comment-reactions'>\n-            <Reactions stat={reactionsStat}/>\n+          <span className='-extra-span-for-inline-popover'>\n+            <a\n+              key='link'\n+              className='review-title'\n+              target='_blank'\n+              href={url}>\n+                <GithubFlavoredMarkdown\n+                  inline\n+                  repoOwner={repoOwner}\n+                  repoName={repoName}\n+                  text={bodyText}/>\n+            </a>\n           </span>\n-          <span key='right-footer' className='review-time-and-user'>\n-            <Time key='time' className='updated-at' dateTime={updatedAt}/>\n-            {assignedAvatar}\n+\n+          <span key='footer' className='review-footer'>\n+            <span key='left-footer' className='comment-reactions'>\n+              <Reactions\n+                id={id}\n+                stat={reactionsStat}\n+                noReactionByMe={noReactionByMe}\n+                hasLogin={hasLogin}\n+                saveCallBack={this.saveToDatabase}/>\n+            </span>\n+            <span key='right-footer' className='review-time-and-user'>\n+              <Time key='time' className='updated-at' dateTime={updatedAt}/>\n+              {assignedAvatar}\n+            </span>\n           </span>\n-        </span>\n-      </BS.ListGroupItem>\n-      <div key='related' className='related-issues'>\n-        {relatedCards}\n+        </BS.ListGroupItem>\n+        <div key='related' className='related-issues'>\n+          {relatedCards}\n+        </div>\n       </div>\n-    </div>\n-  );\n+    );\n+  }\n }\n \n-function Review({review}) {\n+function Review({review, loginInfo}) {\n   return (\n-    <ReviewCard card={review}/>\n+    <ReviewCard card={review} loginInfo={loginInfo}/>\n   );\n }\n \n-export default Review;\n+export default withAuth(Review);", "created_at": "2018-08-06T15:17:49Z", "last_edited_at": "2018-08-06T15:23:46Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MDI2MA==", "fields": {"body": "move this after the apply_filters function so that the diff better aligns, and probably at the end as it is a private function", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):", "created_at": "2018-08-06T21:49:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng==", "fields": {"body": "(almost) very generic ... belongs in coala_utils::decorators.py\nand this is enforce_duck_type or enforce_duct_tape ? ;-)\nand to make calling generic, use\n@typed_filter(bear='bearclass')\ndef language_filter(bear, args):\n```", "diff": "@@ -0,0 +1,42 @@\n+from inspect import getmro\n+from functools import wraps\n+\n+\n+def typed_filter(type_classes, msg=None):", "created_at": "2018-08-06T21:58:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjI0OA==", "fields": {"body": "thing -> obj or object_", "diff": "@@ -0,0 +1,42 @@\n+from inspect import getmro\n+from functools import wraps\n+\n+\n+def typed_filter(type_classes, msg=None):\n+    \"\"\"\n+    Used to enforce type of the first argument of a method\n+    by its class name as string. Raises NotImplementedError\n+    if the type does not match. Primarily used to enforce\n+    type of a filter.\n+\n+    :param type_classes:    list or tuple of acceptable class names\n+                            as strings for the first argument of the\n+                            method being decorated.\n+    :param msg:             Message to pass with NotImplementedError.\n+    \"\"\"\n+    if (type(type_classes) not in (tuple, list)):\n+        type_classes = (type_classes,)\n+\n+    def decorator(filter):\n+\n+        @wraps(filter)\n+        def decorated_filter(thing, *args, **kargs):", "created_at": "2018-08-06T21:58:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0NDM1Nw==", "fields": {"body": "section_tag_filter", "diff": "@@ -0,0 +1,31 @@\n+from coalib.parsing.filters.decorators import typed_filter\n+\n+\n+@typed_filter(('bearclass', 'Bear', 'Section'))\n+def tag_section_filter(section_or_bear, args):", "created_at": "2018-08-06T22:09:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTA0OQ==", "fields": {"body": "Let's call it items rather than things", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears", "created_at": "2018-08-06T20:50:01Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTQ0OQ==", "fields": {"body": "Do we have any practical case for this condition ?\nIf so, is there way we can check this before calling this function ?", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:", "created_at": "2018-08-06T20:51:36Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAzOTExNQ==", "fields": {"body": "Now we need a test class which verifies that the aspect is used when the line length is exceeded.", "diff": "@@ -63,3 +69,22 @@ def hello():\n     valid_files=(file_with_very_long_line,),\n     invalid_files=(),\n     settings={'max_line_length': 0})\n+\n+PycodestyleBearAspectsTest = verify_local_bear(", "created_at": "2018-08-06T21:45:07Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwODgwMw==", "fields": {"body": "run_coala\n\n:param arg_parser:        Instance of ArgParser that is used to non-setting arguments.\n:param arg_list:              The CLI argument list.\n:param args:                   Alternative pre-parsed CLI arguments.\n\nThis is not just about the tests, since args to run_coala() can be optionally passed instead of arg_list, I think we need to merge opts from both, so as to enable the internal usage of this filter. Tests also use can use this by directly calling run_coala() with an arg list.", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:", "created_at": "2018-08-07T06:12:25Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjkyMw==", "fields": {"body": "missing key property\nhttps://reactjs.org/docs/lists-and-keys.html", "diff": "@@ -1,45 +1,185 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '\ud83d\udc4d',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '\ud83d\udc4e',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '\ud83d\ude04',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '\ud83c\udf89',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '\ud83d\ude15',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '\u2764\ufe0f',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  onClick = async (id, content) => {\n+    const canAdd = this.state.canAdd[content];\n+    const saveToDatabase = this.props.saveCallBack;\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, true);\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, false);\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n+    }\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '\ud83d\udc4d',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '\ud83d\udc4e',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '\ud83d\ude04',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '\ud83c\udf89',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '\ud83d\ude15',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '\u2764\ufe0f',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={() => this.onClick(id, reaction.name)}\n+          disabled={!hasLogin}>", "created_at": "2018-08-07T13:38:34Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMzE2Nw==", "fields": {"body": "^ Seems like the old one doesn't have it either, React should've warned about this.", "diff": "@@ -1,45 +1,185 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '\ud83d\udc4d',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '\ud83d\udc4e',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '\ud83d\ude04',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '\ud83c\udf89',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '\ud83d\ude15',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '\u2764\ufe0f',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  onClick = async (id, content) => {\n+    const canAdd = this.state.canAdd[content];\n+    const saveToDatabase = this.props.saveCallBack;\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, true);\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, false);\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n+    }\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '\ud83d\udc4d',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '\ud83d\udc4e',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '\ud83d\ude04',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '\ud83c\udf89',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '\ud83d\ude15',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '\u2764\ufe0f',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={() => this.onClick(id, reaction.name)}\n+          disabled={!hasLogin}>", "created_at": "2018-08-07T13:39:05Z", "last_edited_at": "2018-08-07T13:39:42Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODgwNTYyNw==", "fields": {"body": "you sure you need this?\nit isnt doing anything afaics", "diff": "@@ -0,0 +1,363 @@\n+import logging\n+from os import path\n+\n+from coala_utils.FileUtils import detect_encoding\n+from coala_utils.decorators import (enforce_signature, generate_eq,)\n+\n+\n+class FileNameError(LookupError):\n+    def __init__(self, error_message):", "created_at": "2018-08-09T04:50:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODk2ODExOQ==", "fields": {"body": "I've explained on https://gitlab.com/coala/mobans/issues/84 why I think that is unnecessary.\nIf necessary, we have a check script which verifies that all entry points defined in the yaml have exactly these two lines at end of the file.  That prevents these sequences from being different in multiple entry points, and also ensures they are identical on all repos with entry points.", "diff": "@@ -67,3 +67,4 @@ exclude_lines =\n   pragma ${PLATFORM_SYSTEM}: no cover\n   pragma ${OS_NAME}: no cover\n   pragma Python [0-9.,]*${PYTHON_VERSION}[0-9.,]*: no cover\n+  sys.exit\\(main\\(\\)\\)", "created_at": "2018-08-09T15:10:46Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MDA4OA==", "fields": {"body": "Undefined minimum_similarity_ratio", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:\n+            with open(file_name, 'r') as f:\n+                expected_revert_file_content = f.read()\n+\n+            matcher = SequenceMatcher(\n+                None, revert_file_content, expected_revert_file_content)\n+            similarity_ratio = matcher.real_quick_ratio()\n+            if similarity_ratio < minimum_similarity_ratio:", "created_at": "2018-08-10T14:04:50Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTMzMQ==", "fields": {"body": "I think we might wanna change this function into a private function (by adding _ prefix in front of the function name), since this function probably wouldn't be called neither by the programmer nor user in another source code", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):", "created_at": "2018-08-10T14:08:33Z", "last_edited_at": "2018-08-10T15:40:08Z", "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTY4Nw==", "fields": {"body": "I think we don't need to add this check again, as it's already done in line 142", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:", "created_at": "2018-08-10T14:09:38Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTM5NjYxNw==", "fields": {"body": "I think you have to add a report_year variable as well", "diff": "@@ -0,0 +1,356 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/li-boxuan", "created_at": "2018-08-10T22:14:57Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMTA4Mg==", "fields": {"body": "These files are of the \"expected revert commit\" that we are creating for comparison.\nLine 142 checks files in the reverted commit. So as to check any extra added or deleted files.", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:", "created_at": "2018-08-10T15:38:07Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMjQyMw==", "fields": {"body": "yield from self.check_modified..", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:\n+            with open(file_name, 'r') as f:\n+                expected_revert_file_content = f.read()\n+\n+            matcher = SequenceMatcher(\n+                None, revert_file_content, expected_revert_file_content)\n+            similarity_ratio = matcher.real_quick_ratio()\n+            if similarity_ratio < minimum_similarity_ratio:\n+                yield Result(self, 'Changes in modified file %s of '\n+                             'revert commit are not exactly '\n+                             'revert of changes in reverted '\n+                             'commit.' %\n+                             file_name)\n+\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+\n+        return\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name in reverted_commit_modified_files_list:\n+                    self.check_modified_file_similarity(", "created_at": "2018-08-10T15:42:23Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NDkyOQ==", "fields": {"body": "gitlab --> GitLab, gitter --> Gitter, hackerrank --> HackerRank, openhub --> OpenHub", "diff": "@@ -8,36 +8,41 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+tarball_hash: <shasum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>\n+  - Phase 1 : <phase1 milsetone link>\n+  - Phase 2 : <phase2 milsetone link>\n+  - Phase 3 : <phase3 milsetone link>\n bio: >\n- <your bio goes here>\n+  <your bio goes here>\n social:\n- - GitHub:\n-   - username: <github username>\n-   - link: https://github.com/<github username>\n- - GitLab:\n-   - username: <gitlab username>\n-   - link: https://gitlab.com/<gitlab username>\n- - Gitter:\n-   - username: <gitter username>\n-   - link: https://gitter.im/<gitter username>\n- - HackerRank:\n-   - username: <hackerrank username>\n-   - link: https://hackerrank.com/<hackerrank username>\n+  - GitHub:\n+    - username: <github username>\n+    - link: https://github.com/<github username>\n+  - gitlab:", "created_at": "2018-08-12T06:58:29Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NTA3Mg==", "fields": {"body": "it has become named sha256sum:", "diff": "@@ -8,36 +8,41 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+tarball_hash: <shasum of tarball>", "created_at": "2018-08-12T07:03:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NTE0Ng==", "fields": {"body": "do a few example entries.\nand the link should include a hash which is only 8 long.\nhttps://github.com/coala/cEPs/commit/e9f75878\nnot\nhttps://github.com/coala/cEPs/commit/e9f7587856e1c236d37e96f54a0cb4d72069776d\nto avoid line length errors", "diff": "@@ -8,36 +8,41 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+tarball_hash: <shasum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>\n+  - Phase 1 : <phase1 milsetone link>\n+  - Phase 2 : <phase2 milsetone link>\n+  - Phase 3 : <phase3 milsetone link>\n bio: >\n- <your bio goes here>\n+  <your bio goes here>\n social:\n- - GitHub:\n-   - username: <github username>\n-   - link: https://github.com/<github username>\n- - GitLab:\n-   - username: <gitlab username>\n-   - link: https://gitlab.com/<gitlab username>\n- - Gitter:\n-   - username: <gitter username>\n-   - link: https://gitter.im/<gitter username>\n- - HackerRank:\n-   - username: <hackerrank username>\n-   - link: https://hackerrank.com/<hackerrank username>\n+  - GitHub:\n+    - username: <github username>\n+    - link: https://github.com/<github username>\n+  - gitlab:\n+    - username: <gitlab username>\n+    - link: https://gitlab.com/<gitlab username>\n+  - gitter:\n+    - username: <gitter username>\n+    - link: https://gitter.im/<gitter username>\n+  - hackerrank:\n+    - username: <hackerrank username>\n+    - link: https://hackerrank.com/<hackerrank username>\n+  - openhub:\n+    - username: <openhub username>\n+    - link: https://openhub.net/accounts/<openhub username>\n email: <email>\n blog: <link to your blog>\n activity:\n- - <number>:\n-   - repo: <repo name>\n-   - link: <link>\n-   - details: >\n+  - <number>:", "created_at": "2018-08-12T07:06:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjUwNw==", "fields": {"body": "no space before :. YAMLlintbear will complain about that.", "diff": "@@ -8,36 +8,46 @@ organisation: coala\n organisation_link : https://coala.io", "created_at": "2018-08-12T07:55:52Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0Njc1OA==", "fields": {"body": "There should be 6 spaces before - username, not 4. Otherwise, YAMLlintbear will complain.\nSee https://docs.saltstack.com/en/latest/topics/troubleshooting/yaml_idiosyncrasies.html", "diff": "@@ -8,36 +8,46 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+sha256sum: <sha256sum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>\n+  - Phase 1 : <phase1 milsetone link>\n+  - Phase 2 : <phase2 milsetone link>\n+  - Phase 3 : <phase3 milsetone link>\n bio: >\n- <your bio goes here>\n+  <your bio goes here>\n social:\n- - GitHub:\n-   - username: <github username>\n-   - link: https://github.com/<github username>\n- - GitLab:\n-   - username: <gitlab username>\n-   - link: https://gitlab.com/<gitlab username>\n- - Gitter:\n-   - username: <gitter username>\n-   - link: https://gitter.im/<gitter username>\n- - HackerRank:\n-   - username: <hackerrank username>\n-   - link: https://hackerrank.com/<hackerrank username>\n+  - GitHub:\n+    - username: <github username>", "created_at": "2018-08-12T08:04:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjgwMw==", "fields": {"body": "Same as above.", "diff": "@@ -8,36 +8,46 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+sha256sum: <sha256sum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>\n+  - Phase 1 : <phase1 milsetone link>\n+  - Phase 2 : <phase2 milsetone link>\n+  - Phase 3 : <phase3 milsetone link>\n bio: >\n- <your bio goes here>\n+  <your bio goes here>\n social:\n- - GitHub:\n-   - username: <github username>\n-   - link: https://github.com/<github username>\n- - GitLab:\n-   - username: <gitlab username>\n-   - link: https://gitlab.com/<gitlab username>\n- - Gitter:\n-   - username: <gitter username>\n-   - link: https://gitter.im/<gitter username>\n- - HackerRank:\n-   - username: <hackerrank username>\n-   - link: https://hackerrank.com/<hackerrank username>\n+  - GitHub:\n+    - username: <github username>\n+    - link: https://github.com/<github username>\n+  - GitLab:\n+    - username: <gitlab username>\n+    - link: https://gitlab.com/<gitlab username>\n+  - Gitter:\n+    - username: <gitter username>\n+    - link: https://gitter.im/<gitter username>\n+  - HackerRank:\n+    - username: <hackerrank username>\n+    - link: https://hackerrank.com/<hackerrank username>\n+  - OpenHub:\n+    - username: <openhub username>\n+    - link: https://openhub.net/accounts/<openhub username>\n email: <email>\n blog: <link to your blog>\n activity:\n- - <number>:\n-   - repo: <repo name>\n-   - link: <link>\n-   - details: >\n+  - 1:\n+    - repo: cEPs", "created_at": "2018-08-12T08:05:56Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjgyOQ==", "fields": {"body": "milstone was a typo, and you copied that without detecting typo ;)", "diff": "@@ -8,36 +8,46 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+sha256sum: <sha256sum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>", "created_at": "2018-08-12T08:06:44Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTAyMw==", "fields": {"body": "Move this function definition into the inside of _check_modified_file_similarity() as this function would probably only called there.\nAnd it can be as simple as\ndef clean_inspect_revert_branch():\n    run_shell_command(switch_branch_command)\n    run_shell_command('git branch -D inspectrevertbranch')", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):", "created_at": "2018-08-12T10:56:03Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwMg==", "fields": {"body": ".. not in the reverted ..", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '", "created_at": "2018-08-12T10:59:55Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwNw==", "fields": {"body": ".. not in the reverted ...", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.deleted_files:\n+                if file_path not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '", "created_at": "2018-08-12T11:00:14Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTExNA==", "fields": {"body": "... not in the reverted ...", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.deleted_files:\n+                if file_path not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.modified_files:\n+                if file_path in reverted_commit_modified_files_list:\n+                    yield from self._check_modified_file_similarity(\n+                        file_path, reverted_commit_sha,\n+                        minimum_similarity_ratio)\n+\n+                else:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                 'file %s that is not in reverted '", "created_at": "2018-08-12T11:00:27Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTk3OQ==", "fields": {"body": "This string should be a constant, with substitution variable for \"added\", \"deleted\" & \"modified\"", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.deleted_files:\n+                if file_path not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.modified_files:\n+                if file_path in reverted_commit_modified_files_list:\n+                    yield from self._check_modified_file_similarity(\n+                        file_path, reverted_commit_sha,\n+                        minimum_similarity_ratio)\n+\n+                else:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                 'file %s that is not in reverted '", "created_at": "2018-08-12T11:35:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzA2Ng==", "fields": {"body": "You've created it right? maybe rephrase as-->which has the ability.. ?", "diff": "@@ -0,0 +1,195 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: '2018'\n+student: Vaibhav Kumar Rai\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Debug and Profile Bears\n+project_link: https://summerofcode.withgoogle.com/projects/#6109762077327360\n+tarball: https://rawgit.com/RaiVaibhav/GSoC-Report/master/project.tar.gz\n+sha256sum: d61862f8f8be5ec168b07741c09781ef2dcc991e44d87edc05e6d237044052b0\n+mentors: >\n+  [Mischa Kr\u00fcger](https://github.com/Makman2),\n+  [Fabian Neuschmidt](https://github.com/fneu),\n+  [Arjun Singh Yadav](https://github.com/arjunsinghy96)\n+phase:\n+ - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/18\n+ - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/52\n+ - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/53\n+ - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/54\n+bio: >\n+ I am third year student of B.Tech Computer Science Engineering at Shri Mata\n+ Vaishno Devi Uiversity, Katra, Jammu and Kashmir. I participated in GSoC and\n+ worked with [coala](https://coala.io) to create a better quality Bears by\n+ creating a tool which will have the ability to jump directly into Bear code", "created_at": "2018-08-12T12:12:25Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY0Ng==", "fields": {"body": "A\n---\n\nis needed here", "diff": "@@ -0,0 +1,248 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2>\n+  - Phase 1 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19>\n+  - Phase 2 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43>\n+  - Phase 3 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44>\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+      GitCommitBear: Parse remote with giturlparse\n+  - 2:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/8dfe8376\n+    - details: >\n+      Jinja2.py: Add support for ignore comments\n+  - 3:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/1ec5b92c\n+    - details: >\n+      cEP-0020: Add Newcomer metrics and Gamification system\n+  - 4:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/77f8802e\n+    - details: >\n+      org/cron.py: Use dict.get method to r_json\n+  - 5:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/791baab0\n+    - details: >\n+      Add IGitt Cache mechanism\n+  - 6:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1b8058c0\n+    - details: >\n+      requirements.txt: Use == for installing IGitt\n+  - 7:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/00f3081e\n+    - details: >\n+      Serialize coala issues on GitHub and GitLab\n+  - 8:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/10f622cc\n+    - details: >\n+      Add teams to Contributor Model\n+  - 9:\n+    - repo: IGitt\n+    - link: https://gitlab.com/gitmate/open-source/IGitt/commit/b3caeceb\n+    - details: >\n+      Repository: Add filter_merge_requests method\n+  - 10:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/bafb226b\n+    - details: >\n+      backend/db.sqlite3: Add old database files\n+  - 11:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/29c2fc4c\n+    - details: >\n+      org/: Only pass valid usernames to methods\n+  - 12:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/85372c2d\n+    - details: >\n+      org/cron.py: Fix contributors cron job\n+  - 13:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/d68a6684\n+    - details: >\n+      Serialize coala mrs on GitHub and GitLab\n+  - 14:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/d8e760bf\n+    - details: >\n+      data/tests/: Add tests for data app\n+  - 15:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/baae2218\n+    - details: >\n+      test_management_commands.py: Fix webservices error\n+  - 16:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/e09ae105\n+    - details: >\n+      data/: Fix import_contributors_data command\n+  - 17:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/829ceba7\n+    - details: >\n+      test_models.py: Fix tests\n+  - 18:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/34748e4b\n+    - detials: >\n+      Get 100% test coverage for the data app\n+  - 19:\n+    - repo: webservices.coala.io\n+    - link: https://github.com/sks444/webservices.coala.io/commit/9d263725\n+    - details: >\n+      Generate a fake api similar to coala's webservices\n+  - 20:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/537602ec\n+    - details: >\n+      data/: Import IGitt data\n+  - 21:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/68556ccb\n+    - details: >\n+      data/: Add url field to Issue and MergeRequest model\n+  - 22:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/ef814f6e\n+    - details: >\n+      Add gamification app\n+  - 23:\n+    - repo: igitt-django\n+    - link: https://gitlab.com/sks444/igitt-django/commit/824ced17\n+    - details: >\n+      Switch to sqlite3\n+  - 24:\n+    - repo: community\n+    - link: https://github.com/coala/community/pull/145/commits/b1ca875c\n+    - details: >\n+      [WIP] gitter/: Messages, Analysis and Import\n+  - 25:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/merge_requests/45/diffs?commit_id=993a6825\n+    - details: >\n+      [WIP] Serialize messages on gitter by newcomers\n+  - 26:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/merge_requests/59/diffs?commit_id=0581b4c8\n+    - details: >\n+      [WIP] org/: Use igitt_django models to save igitt data\n+  - 27:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/merge_requests/60/diffs?commit_id=25e750d6\n+    - details: >\n+      [WIP] org/: Make an api to show active newcomers\n+", "created_at": "2018-08-12T12:33:55Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY2MA==", "fields": {"body": "typo in details", "diff": "@@ -0,0 +1,248 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2>\n+  - Phase 1 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19>\n+  - Phase 2 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43>\n+  - Phase 3 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44>\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+      GitCommitBear: Parse remote with giturlparse\n+  - 2:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/8dfe8376\n+    - details: >\n+      Jinja2.py: Add support for ignore comments\n+  - 3:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/1ec5b92c\n+    - details: >\n+      cEP-0020: Add Newcomer metrics and Gamification system\n+  - 4:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/77f8802e\n+    - details: >\n+      org/cron.py: Use dict.get method to r_json\n+  - 5:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/791baab0\n+    - details: >\n+      Add IGitt Cache mechanism\n+  - 6:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1b8058c0\n+    - details: >\n+      requirements.txt: Use == for installing IGitt\n+  - 7:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/00f3081e\n+    - details: >\n+      Serialize coala issues on GitHub and GitLab\n+  - 8:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/10f622cc\n+    - details: >\n+      Add teams to Contributor Model\n+  - 9:\n+    - repo: IGitt\n+    - link: https://gitlab.com/gitmate/open-source/IGitt/commit/b3caeceb\n+    - details: >\n+      Repository: Add filter_merge_requests method\n+  - 10:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/bafb226b\n+    - details: >\n+      backend/db.sqlite3: Add old database files\n+  - 11:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/29c2fc4c\n+    - details: >\n+      org/: Only pass valid usernames to methods\n+  - 12:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/85372c2d\n+    - details: >\n+      org/cron.py: Fix contributors cron job\n+  - 13:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/d68a6684\n+    - details: >\n+      Serialize coala mrs on GitHub and GitLab\n+  - 14:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/d8e760bf\n+    - details: >\n+      data/tests/: Add tests for data app\n+  - 15:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/baae2218\n+    - details: >\n+      test_management_commands.py: Fix webservices error\n+  - 16:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/e09ae105\n+    - details: >\n+      data/: Fix import_contributors_data command\n+  - 17:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/829ceba7\n+    - details: >\n+      test_models.py: Fix tests\n+  - 18:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/34748e4b\n+    - detials: >", "created_at": "2018-08-12T12:34:17Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY4MA==", "fields": {"body": "You'll have to add indents in all descriptions\nWithout an indent jekyll will throw errors", "diff": "@@ -0,0 +1,248 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2>\n+  - Phase 1 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19>\n+  - Phase 2 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43>\n+  - Phase 3 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44>\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+      GitCommitBear: Parse remote with giturlparse", "created_at": "2018-08-12T12:35:00Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1Mzg2Ng==", "fields": {"body": "Also consider removing the < since it might lead to incorrect links", "diff": "@@ -0,0 +1,248 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2>", "created_at": "2018-08-12T12:40:57Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1NDM3MA==", "fields": {"body": "need to submit MRs\nhttps://gitlab.com/gitmate/open-source/igitt-django/merge_requests", "diff": "@@ -0,0 +1,250 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2\n+  - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19\n+  - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43\n+  - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+       GitCommitBear: Parse remote with giturlparse\n+  - 2:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/8dfe8376\n+    - details: >\n+       Jinja2.py: Add support for ignore comments\n+  - 3:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/1ec5b92c\n+    - details: >\n+       cEP-0020: Add Newcomer metrics and Gamification system\n+  - 4:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/77f8802e\n+    - details: >\n+       org/cron.py: Use dict.get method to r_json\n+  - 5:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/791baab0\n+    - details: >\n+       Add IGitt Cache mechanism\n+  - 6:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1b8058c0\n+    - details: >\n+       requirements.txt: Use == for installing IGitt\n+  - 7:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/00f3081e\n+    - details: >\n+       Serialize coala issues on GitHub and GitLab\n+  - 8:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/10f622cc\n+    - details: >\n+       Add teams to Contributor Model\n+  - 9:\n+    - repo: IGitt\n+    - link: https://gitlab.com/gitmate/open-source/IGitt/commit/b3caeceb\n+    - details: >\n+       Repository: Add filter_merge_requests method\n+  - 10:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/bafb226b\n+    - details: >\n+       backend/db.sqlite3: Add old database files\n+  - 11:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/29c2fc4c\n+    - details: >\n+       org/: Only pass valid usernames to methods\n+  - 12:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/85372c2d\n+    - details: >\n+       org/cron.py: Fix contributors cron job\n+  - 13:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/d68a6684\n+    - details: >\n+       Serialize coala mrs on GitHub and GitLab\n+  - 14:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/d8e760bf\n+    - details: >\n+       data/tests/: Add tests for data app\n+  - 15:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/baae2218\n+    - details: >\n+       test_management_commands.py: Fix webservices error\n+  - 16:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/e09ae105\n+    - details: >\n+       data/: Fix import_contributors_data command\n+  - 17:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/829ceba7\n+    - details: >\n+       test_models.py: Fix tests\n+  - 18:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/34748e4b\n+    - details: >\n+       Get 100% test coverage for the data app\n+  - 19:\n+    - repo: webservices.coala.io\n+    - link: https://github.com/sks444/webservices.coala.io/commit/9d263725\n+    - details: >\n+       Generate a fake api similar to coala's webservices\n+  - 20:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/537602ec\n+    - details: >\n+       data/: Import IGitt data\n+  - 21:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/68556ccb\n+    - details: >\n+       data/: Add url field to Issue and MergeRequest model\n+  - 22:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/ef814f6e\n+    - details: >\n+       Add gamification app\n+  - 23:\n+    - repo: igitt-django\n+    - link: https://gitlab.com/sks444/igitt-django/commit/824ced17", "created_at": "2018-08-12T12:56:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDI5MQ==", "fields": {"body": "doesnt count", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585", "created_at": "2018-08-12T16:11:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDM0OQ==", "fields": {"body": "give this a better description, as it does more than just Ignore dist/ , and Ignore dist/ should have been an automated part of setting up a repo", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/", "created_at": "2018-08-12T16:13:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDMwOA==", "fields": {"body": "doesnt count.\nthis should have been automated with cookiecutter or moban", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a", "created_at": "2018-08-12T16:12:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDMyNA==", "fields": {"body": "nothing much done here", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3", "created_at": "2018-08-12T16:12:51Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ0Nw==", "fields": {"body": "doesnt count", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f", "created_at": "2018-08-12T16:15:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ3Nw==", "fields": {"body": "should have been automated; doesnt count", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf", "created_at": "2018-08-12T16:16:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ5NA==", "fields": {"body": "we provide templates for this; doesnt count", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7", "created_at": "2018-08-12T16:17:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQxNg==", "fields": {"body": "wouldnt have made it through any review; should have been squashed into a proper commit", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34", "created_at": "2018-08-12T16:15:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDU1NQ==", "fields": {"body": "this type of addition is being excluded by other students as it didnt involve any additional work", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7\n+   - details: Add setup.cfg\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8de282f0d31fb8e46e2eb96ef93b48004e60ab85", "created_at": "2018-08-12T16:19:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDU3Nw==", "fields": {"body": "should never have been merged with this in it", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7\n+   - details: Add setup.cfg\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8de282f0d31fb8e46e2eb96ef93b48004e60ab85\n+   - details: Support py37\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ec86b525cd9edd8b8eef181dc529e7d53fff3aad", "created_at": "2018-08-12T16:20:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDY0Ng==", "fields": {"body": "not suitable for activity report", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7\n+   - details: Add setup.cfg\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8de282f0d31fb8e46e2eb96ef93b48004e60ab85\n+   - details: Support py37\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ec86b525cd9edd8b8eef181dc529e7d53fff3aad\n+   - details: Debug Travis\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/0eeb52e867c2d01680adba4841a890d282c43e46\n+   - details: \".gitignore: Track MANIFEST.in and remove gibberish\"\n+\n+ - 28:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/34bbf0b780b6ae2b04dad3be5cecbe4100daedbc\n+   - details: \"README.rst: Minor nitpicks and cosmetics\"\n+\n+ - 29:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/234cb936a6f3fa59ca03a810212fbe1bb9e5441c\n+   - details: \"setup.py: mention lxml only in install_requires\"\n+\n+ - 30:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/2e40a6a3c45be434214e4b328fbbd489792ab5f0\n+   - details: \"setup.py: Remove pytest runner and import version correctly\"\n+\n+ - 31:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/e58e15ae7f22c466dd0488cee8d1e9e4a2250d7f\n+   - details: \"tests/__init__.py: TESTS and DIR are same\"\n+\n+ - 32:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/77c172ad74f53cdad29b75db234f1a145faa389d\n+   - details: Use Creator object to register new creators\n+\n+ - 33:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4ef597c5394df9d6cce86b50f9aff1aa33bb10da\n+   - details: \"tests/test_with_vulture.py: Use pytest.fixture\"\n+\n+ - 34:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/5dfd9655e34b73fc759037cb10e0250d4efb8900\n+   - details: \"tests/test_with_vulture.py: Use textwrap.dedent\"\n+\n+ - 35:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c68aa692d8d4b9fb8b15de72d5e9867c48c6023b\n+   - details: Use absolute imports everywhere\n+\n+ - 36:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ff49ab876363a173d7228a84037332009c1b1c1f\n+   - details: \"Use python's logging module.\"\n+\n+ - 37:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/bc3af5a9fe6af88433278b35db5026437a6da861\n+   - details: \"Define __version__ in vulture_whitelist/__main__.py\"\n+\n+ - 38:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d203f12a6f276ac60dab196f1fb2e3b24d1bb8ae\n+   - details: Bump up PyQt versions, update features\n+\n+ - 39:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b3dc28a1502920fd2d824b7b7c3e064bfcb5ed79\n+   - details: Use pytest's tmpdir fixture\n+\n+ - 40:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/aad70ab17bfec8e389292b3c645d0d4b6d931c3a\n+   - details: Single source package version\n+\n+ - 41:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/8efe8af\n+   - details: \"README.rst: Add examples to setup (#114)\"\n+\n+ - 42:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/7987889", "created_at": "2018-08-12T16:22:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDYyMg==", "fields": {"body": "should have been automated", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7\n+   - details: Add setup.cfg\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8de282f0d31fb8e46e2eb96ef93b48004e60ab85\n+   - details: Support py37\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ec86b525cd9edd8b8eef181dc529e7d53fff3aad\n+   - details: Debug Travis\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/0eeb52e867c2d01680adba4841a890d282c43e46", "created_at": "2018-08-12T16:21:50Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ3NTU3Ng==", "fields": {"body": "remove this paragraph.\nWork to be done is not about you doing the work; it is just stuff which is left over.\nWhile we hope you'll continue, this work report is the end of your commitment.", "diff": "@@ -0,0 +1,187 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+report_year: 2018\n+date: 2018-08-12\n+student: Palash Nigam\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Optimize Caching for the NextGen-Core\n+project_link: https://summerofcode.withgoogle.com/projects/#6434190552203264\n+tarball: \n+sha256sum: \n+mentors: >\n+  [Mischa Kr\u00fcger](https://github.com/Makman2),\n+  [Shreyans Doshi](https://github.com/shreyans800755),\n+  [Fabian Neuschmidt](https://github.com/fneu)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/32\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/33\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/34\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/35\n+bio: >\n+  I am second year student of B.Tech Computer Science and Engineering at\n+  International Institute of Information and Technology, Bhubaneswar,\n+  Odisha, India. I worked as a GSoC student under coala to improve coala's\n+  I/O mechanism using `FileFactory` class and adding features to provide\n+  more support for NextGen-Core's caching mechanism.\n+social:\n+  - GitHub:\n+      - username: palash25\n+      - link: https://github.com/palash25\n+  - GitLab:\n+      - username: palash25\n+      - link: https://gitlab.com/palash25\n+  - Gitter:\n+      - username: palash25\n+      - link: https://gitter.im/palash25\n+  - Openhub:\n+      - username: palash25\n+      - link: https://www.openhub.net/accounts/palash25\n+email: npalash25@gmail.com\n+blog: https://medium.com/gsoc-with-coala/\n+activity:\n+  - 1:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/7272ff6b9463a5cff33c431f73a416e5a999f4ac\n+      - details: >\n+         cEP-0026.md: Adds optimize caching cEP.\n+  - 2:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/a228c2b39ef17b3c6d3572853601dfa05b938173\n+      - details: >\n+         Updated the details of Optimize Caching project.\n+  - 3:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/759f74f88206c58ac80dd7acd12cadbae13f28cb\n+      - details: >\n+         optimize_caching.md: Changed primary mentor from adtac to Makman2.\n+  - 4:\n+      - repo: devops\n+      - link: https://github.com/coala/devops/commit/e309383bc5aacb007c4986bd74197238a4fcc96d\n+      - details: >\n+         planet.ini: Add palash25 gsoc blog feed.\n+  - 5:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/b06dfe44fa99ffeb997f6f0a4bf302938fb9734c\n+      - details: >\n+         Added `FileFactory` class. Objects of this class are used\n+         to represent files and replace file contents in the file dict.\n+  - 6:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/77c1dca15dc82d1753aa0962017899392d0033ec\n+      - details: >\n+         Added `Directory` class. This class will act as an interface\n+         to directories providing useful information about them. The\n+         objects of this class can be used by bears that operate only\n+         on directories and perform analysis based on the things like\n+         directory structure.\n+  - 7:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/fc568a01ba489376b4d6efac12ea772cb3cb1573\n+      - details: >\n+         Added `memoized_property`. `memoized_property` is a decorator\n+         that caches the properties of `FileFactory` class.\n+  - 8:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/81bbca42f82319aed22ba7f90781d886d559d4dd\n+      - details: >\n+         NextGen_Core.rst: Update caching section. \n+  - 9:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/7bc5d7f7b84e91da9f6aa2f77d40f92e66c850d5\n+      - details: >\n+         IO.rst: Add FileFactory docs.\n+  - 10:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/7bc5d7f7b84e91da9f6aa2f77d40f92e66c850d5\n+      - details: >\n+         NextGen_Core.rst: Add link to IO docs.\n+  - 11:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/54622c2b03e1b84bb122130af182424d706d3de4\n+      - details: >\n+         `FileFactory`: Use `cached_property` instead of `memoized_property`.\n+  - 12:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/415361f5a4c12cd65dd4cc171d2a8ebbba3bc92c\n+      - details: >\n+         A new attribute `newline` was added to `FileFactory` to force\n+         newlines on the file content.\n+  - 13:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/fbe8452360eb39340ace4334c2df133a1ee6de97\n+      - details: >\n+         Processing: Add middleware `FileDict` that provides the bears\n+         with the actual file contents instead of the `FileFactory` objects.\n+  - 14:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/e138e4875fc6d1474a93758881f550e05df8e329\n+      - details: >\n+         Processing: Modify tests to use actual files instead of hard coded\n+         tuples as file content.\n+  - 15:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/3ae03bec665943aa6173047245ca929a0a754c69\n+      - details: >\n+         Added support for collection types like `dict` and `set` for\n+         `persistent_hash`.\n+---\n+\n+### Optimize Caching for the NextGen-Core\n+\n+#### Work Done\n+\n+1. Improved I/O mechanism for coala.\n+   1. Added a class `FileFactory` to interface with files and to provide file\n+      contents in different forms like string, binary data or as a tuple.\n+   2. Added a `Directory` class to interface with directories and provide\n+      useful information about them such as the directory path, parent\n+      directory and timestamps. This will be later used to implement ignore\n+      directories functionality.\n+   3. Added documentation for `FileFactory` and improved the NextGen-Core\n+      docs.\n+\n+2. Caching support.\n+   1. Cached the properties of `FileFactory` which turned out to be a\n+      significant performance boost in consecutive coala runs.\n+   2. Added support for unordered collection types in `persistent_hash`\n+      which improved the NextGen-Core's ability to hash much more\n+      complex task objects (which are used in NextGen caching).\n+\n+3. Integrated `FileFactory` with the core.\n+   1. Added line endings support for `FileFactory`.\n+   2. Implemented a middleware `FileDict` that mimics a dictionary\n+      and provides the bears in the old core with the actual file\n+      contents instead of the `FileFactory` objects thereby maintaining\n+      backwards compatibility with the old core.\n+   3. Modified the tests to use actual files and the `FileFactory` objects\n+      instead of hard-coded file contents.\n+\n+#### Challenges\n+\n+One of the first challenges I faced was designing the `FileFactory`.\n+But with my mentors help we were able to come up with a design that\n+could be used for the NextGen-Core and also maintained compatibility\n+with the old core.\n+\n+The biggest challenge that I faced these three months for the integration\n+of the aforementioned `FileFactory` with the core. Initially about thirty\n+tests were failing but after discussing the idea of using a middleware\n+(`FileDict`) to maintain backwards compatibilty with the old core the test\n+failures were significantly reduced to just six. After a while I discovered\n+that `FileFactory` was somehow removing line-endings from the file contents\n+which was fixed by adding support for newlines in `FileFactory` which in turn\n+led to a successful integration.\n+\n+#### Work to be done\n+\n+Two major features were left out because of time constraints:\n+1. Ignore directories functionality for the NextGen-Core.\n+2. Cache control flags for the NextGen-Core (which was\n+   already mentioned as a stretch issue in my GSoC proposal).\n+\n+I have started the work on implementing the cache control flags and will", "created_at": "2018-08-13T01:11:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODA5NA==", "fields": {"body": "It would be good to explain motivation/target being flask and other web frameworks (and usable for other-usecases too)", "diff": "@@ -0,0 +1,388 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: 2018\n+title: Rahul Jha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp), [Abdeali Kothari](https://github.com/AbdealiJK), [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/commit/f551a2e\n+   - details: Add automatic whitelist generator for Vulture\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package code in modules and improve documentation\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: \"Ignore dist/; minor improvements to docs\"\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/34bbf0b780b6ae2b04dad3be5cecbe4100daedbc\n+   - details: \"README.rst: Minor nitpicks and cosmetics\"\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/234cb936a6f3fa59ca03a810212fbe1bb9e5441c\n+   - details: \"setup.py: mention lxml only in install_requires\"\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/2e40a6a3c45be434214e4b328fbbd489792ab5f0\n+   - details: \"setup.py: Remove pytest runner and import version correctly\"\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/e58e15ae7f22c466dd0488cee8d1e9e4a2250d7f\n+   - details: \"tests/__init__.py: TESTS and DIR are same\"\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/77c172ad74f53cdad29b75db234f1a145faa389d\n+   - details: Use Creator object to register new creators\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4ef597c5394df9d6cce86b50f9aff1aa33bb10da\n+   - details: \"tests/test_with_vulture.py: Use pytest.fixture\"\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/5dfd9655e34b73fc759037cb10e0250d4efb8900\n+   - details: \"tests/test_with_vulture.py: Use textwrap.dedent\"\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c68aa692d8d4b9fb8b15de72d5e9867c48c6023b\n+   - details: Use absolute imports everywhere\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ff49ab876363a173d7228a84037332009c1b1c1f\n+   - details: \"Use python's logging module.\"\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/bc3af5a9fe6af88433278b35db5026437a6da861\n+   - details: \"Define __version__ in vulture_whitelist/__main__.py\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d203f12a6f276ac60dab196f1fb2e3b24d1bb8ae\n+   - details: Bump up PyQt versions, update features\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b3dc28a1502920fd2d824b7b7c3e064bfcb5ed79\n+   - details: Use pytest's tmpdir fixture\n+\n+ - 28:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/aad70ab17bfec8e389292b3c645d0d4b6d931c3a\n+   - details: Single source package version\n+\n+ - 29:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/8efe8af\n+   - details: \"README.rst: Add examples to setup (#114)\"\n+\n+ - 30:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/f216902\n+   - details: \"Update tests to only pass supported arguments to literal_eval (#118)\"\n+\n+ - 31:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/1c22682\n+   - details: \"Fix PEP8 issues (#120)\"\n+\n+ - 32:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/ade4e44\n+   - details: \"Update TODO file (#122)\"\n+\n+ - 33:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/4cb052a\n+   - details: \"Add coveralls support to track code coverage (#124)\"\n+\n+ - 34:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e0e384e\n+   - details: \"Document exit codes (#123)\"\n+\n+ - 35:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/01a5031\n+   - details: \"Increase test coverage (#126)\"\n+\n+ - 36:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/5f77d81\n+   - details: \"Add coveralls badge to README (#127)\"\n+\n+ - 37:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e3ea074\n+   - details: \"Use argparse instead of optparse (#119)\"\n+\n+ - 38:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e425c9a\n+   - details: \"Test file with non utf-8 encoding (#121)\"\n+\n+ - 39:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/7ff8d68\n+   - details: \"Skip async tests correctly (#128)\"\n+\n+ - 40:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/d135592\n+   - details: \"tests/test_errors.py: Use pytest's tmpdir fixture (#131)\"\n+\n+ - 41:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/544f960\n+   - details: \"Use absolute imports (#132)\"\n+\n+ - 42:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/fcd9df8\n+   - details: \"Single-source package version string (#134)\"\n+\n+ - 43:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/3899b22\n+   - details: \"Whitelists: use non-dynamic objects directly instead of mocking them. (#137)\"\n+\n+ - 44:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/527b93c\n+   - details: \"Add --make-whitelist flag (#135). \"\n+\n+ - 45:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/47116ab\n+   - details: \"Add --ignore-names flag (#139).\"\n+\n+ - 46:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/932e52a28a65286e886d98a4691f9008a5f5e892\n+   - details: Add analysis report for localstack\n+\n+ - 47:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/36f88da77dde12334e97c31d5f5a752e79a3a12c\n+   - details: Pre-format logs\n+\n+ - 48:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e50a54e82f7d63ec2892d5fa28f49ab09d277708\n+   - details: Update localstack_analysis.md\n+\n+ - 49:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/b47fc3691055d618576f9142d36832cd1f94fd8c\n+   - details: Make report conform to the given template\n+\n+ - 50:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/513e41cc4904760196e591602e3356bd1a504a5c\n+   - details: Update localstack_analysis.md\n+\n+ - 51:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/3ab0a800db0c2200f0c666d4e198c8558c5fc325\n+   - details: create analysis report for system design primer\n+\n+ - 52:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e40be61b4e6e9cf97d689a328e8aa27c2637a85c\n+   - details: Organise reports into folders.\n+\n+ - 53:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/85de1d41b14544e634a65fe5cb215dfee31eb2cf\n+   - details: add header for localstack\n+\n+ - 54:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/89bfb08fc7fdcada02389bd4251632140a7da86c\n+   - details: Add report for relational-networks\n+\n+ - 55:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/00a0492071c449ee34e36fec7a59254133be2f1b\n+   - details: Add footer\n+\n+ - 56:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/43253a9384cc655c9e854766714cc3f5240e55bb\n+   - details: \"Add report for qutebrowser (#4)\"\n+\n+ - 57:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/5bfabaca9902017815cc01d3b38e92a21107d86d\n+   - details: \"Add report for Sharppy (#5)\"\n+---\n+\n+### Improving whitelisting infrastructure for Vulture\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) Created a command line tool which takes in sip files as input and spits a\n+whitelist with all the virtual functions defined in the [sip][sip] files. This\n+tool was further used to create a whitelist for PyQt which can hereby be used\n+with any project using PyQt. The tool is now completely tested and documented.\n+\n+<br>\n+\n+2.) Created `--make-whitelist` flag to enable reporting of the results in a\n+format which can be directly used as a whitelist. This significantly eased the\n+process of creating and maintaing a whitelist for a project.\n+\n+<br>\n+\n+3.) Implemented a ignoring mechanism for Vulture (`--ignore-names` and", "created_at": "2018-08-13T04:11:12Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODAwMA==", "fields": {"body": "Grammar: an* ignoring\n:D", "diff": "@@ -0,0 +1,388 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: 2018\n+title: Rahul Jha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp), [Abdeali Kothari](https://github.com/AbdealiJK), [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/commit/f551a2e\n+   - details: Add automatic whitelist generator for Vulture\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package code in modules and improve documentation\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: \"Ignore dist/; minor improvements to docs\"\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/34bbf0b780b6ae2b04dad3be5cecbe4100daedbc\n+   - details: \"README.rst: Minor nitpicks and cosmetics\"\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/234cb936a6f3fa59ca03a810212fbe1bb9e5441c\n+   - details: \"setup.py: mention lxml only in install_requires\"\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/2e40a6a3c45be434214e4b328fbbd489792ab5f0\n+   - details: \"setup.py: Remove pytest runner and import version correctly\"\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/e58e15ae7f22c466dd0488cee8d1e9e4a2250d7f\n+   - details: \"tests/__init__.py: TESTS and DIR are same\"\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/77c172ad74f53cdad29b75db234f1a145faa389d\n+   - details: Use Creator object to register new creators\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4ef597c5394df9d6cce86b50f9aff1aa33bb10da\n+   - details: \"tests/test_with_vulture.py: Use pytest.fixture\"\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/5dfd9655e34b73fc759037cb10e0250d4efb8900\n+   - details: \"tests/test_with_vulture.py: Use textwrap.dedent\"\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c68aa692d8d4b9fb8b15de72d5e9867c48c6023b\n+   - details: Use absolute imports everywhere\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ff49ab876363a173d7228a84037332009c1b1c1f\n+   - details: \"Use python's logging module.\"\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/bc3af5a9fe6af88433278b35db5026437a6da861\n+   - details: \"Define __version__ in vulture_whitelist/__main__.py\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d203f12a6f276ac60dab196f1fb2e3b24d1bb8ae\n+   - details: Bump up PyQt versions, update features\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b3dc28a1502920fd2d824b7b7c3e064bfcb5ed79\n+   - details: Use pytest's tmpdir fixture\n+\n+ - 28:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/aad70ab17bfec8e389292b3c645d0d4b6d931c3a\n+   - details: Single source package version\n+\n+ - 29:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/8efe8af\n+   - details: \"README.rst: Add examples to setup (#114)\"\n+\n+ - 30:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/f216902\n+   - details: \"Update tests to only pass supported arguments to literal_eval (#118)\"\n+\n+ - 31:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/1c22682\n+   - details: \"Fix PEP8 issues (#120)\"\n+\n+ - 32:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/ade4e44\n+   - details: \"Update TODO file (#122)\"\n+\n+ - 33:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/4cb052a\n+   - details: \"Add coveralls support to track code coverage (#124)\"\n+\n+ - 34:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e0e384e\n+   - details: \"Document exit codes (#123)\"\n+\n+ - 35:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/01a5031\n+   - details: \"Increase test coverage (#126)\"\n+\n+ - 36:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/5f77d81\n+   - details: \"Add coveralls badge to README (#127)\"\n+\n+ - 37:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e3ea074\n+   - details: \"Use argparse instead of optparse (#119)\"\n+\n+ - 38:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e425c9a\n+   - details: \"Test file with non utf-8 encoding (#121)\"\n+\n+ - 39:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/7ff8d68\n+   - details: \"Skip async tests correctly (#128)\"\n+\n+ - 40:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/d135592\n+   - details: \"tests/test_errors.py: Use pytest's tmpdir fixture (#131)\"\n+\n+ - 41:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/544f960\n+   - details: \"Use absolute imports (#132)\"\n+\n+ - 42:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/fcd9df8\n+   - details: \"Single-source package version string (#134)\"\n+\n+ - 43:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/3899b22\n+   - details: \"Whitelists: use non-dynamic objects directly instead of mocking them. (#137)\"\n+\n+ - 44:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/527b93c\n+   - details: \"Add --make-whitelist flag (#135). \"\n+\n+ - 45:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/47116ab\n+   - details: \"Add --ignore-names flag (#139).\"\n+\n+ - 46:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/932e52a28a65286e886d98a4691f9008a5f5e892\n+   - details: Add analysis report for localstack\n+\n+ - 47:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/36f88da77dde12334e97c31d5f5a752e79a3a12c\n+   - details: Pre-format logs\n+\n+ - 48:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e50a54e82f7d63ec2892d5fa28f49ab09d277708\n+   - details: Update localstack_analysis.md\n+\n+ - 49:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/b47fc3691055d618576f9142d36832cd1f94fd8c\n+   - details: Make report conform to the given template\n+\n+ - 50:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/513e41cc4904760196e591602e3356bd1a504a5c\n+   - details: Update localstack_analysis.md\n+\n+ - 51:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/3ab0a800db0c2200f0c666d4e198c8558c5fc325\n+   - details: create analysis report for system design primer\n+\n+ - 52:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e40be61b4e6e9cf97d689a328e8aa27c2637a85c\n+   - details: Organise reports into folders.\n+\n+ - 53:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/85de1d41b14544e634a65fe5cb215dfee31eb2cf\n+   - details: add header for localstack\n+\n+ - 54:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/89bfb08fc7fdcada02389bd4251632140a7da86c\n+   - details: Add report for relational-networks\n+\n+ - 55:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/00a0492071c449ee34e36fec7a59254133be2f1b\n+   - details: Add footer\n+\n+ - 56:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/43253a9384cc655c9e854766714cc3f5240e55bb\n+   - details: \"Add report for qutebrowser (#4)\"\n+\n+ - 57:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/5bfabaca9902017815cc01d3b38e92a21107d86d\n+   - details: \"Add report for Sharppy (#5)\"\n+---\n+\n+### Improving whitelisting infrastructure for Vulture\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) Created a command line tool which takes in sip files as input and spits a\n+whitelist with all the virtual functions defined in the [sip][sip] files. This\n+tool was further used to create a whitelist for PyQt which can hereby be used\n+with any project using PyQt. The tool is now completely tested and documented.\n+\n+<br>\n+\n+2.) Created `--make-whitelist` flag to enable reporting of the results in a\n+format which can be directly used as a whitelist. This significantly eased the\n+process of creating and maintaing a whitelist for a project.\n+\n+<br>\n+\n+3.) Implemented a ignoring mechanism for Vulture (`--ignore-names` and", "created_at": "2018-08-13T04:10:27Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODIyMw==", "fields": {"body": "Minor: 100\"%\"\nTo be a bit pedantic: The python3.7 one is not fix-tests (as they were never tested before) but \"ensure support for py3.7 in CI/CD\" or similar\nAnd should probably be merged with the below point", "diff": "@@ -0,0 +1,388 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: 2018\n+title: Rahul Jha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp), [Abdeali Kothari](https://github.com/AbdealiJK), [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/commit/f551a2e\n+   - details: Add automatic whitelist generator for Vulture\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package code in modules and improve documentation\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: \"Ignore dist/; minor improvements to docs\"\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/34bbf0b780b6ae2b04dad3be5cecbe4100daedbc\n+   - details: \"README.rst: Minor nitpicks and cosmetics\"\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/234cb936a6f3fa59ca03a810212fbe1bb9e5441c\n+   - details: \"setup.py: mention lxml only in install_requires\"\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/2e40a6a3c45be434214e4b328fbbd489792ab5f0\n+   - details: \"setup.py: Remove pytest runner and import version correctly\"\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/e58e15ae7f22c466dd0488cee8d1e9e4a2250d7f\n+   - details: \"tests/__init__.py: TESTS and DIR are same\"\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/77c172ad74f53cdad29b75db234f1a145faa389d\n+   - details: Use Creator object to register new creators\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4ef597c5394df9d6cce86b50f9aff1aa33bb10da\n+   - details: \"tests/test_with_vulture.py: Use pytest.fixture\"\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/5dfd9655e34b73fc759037cb10e0250d4efb8900\n+   - details: \"tests/test_with_vulture.py: Use textwrap.dedent\"\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c68aa692d8d4b9fb8b15de72d5e9867c48c6023b\n+   - details: Use absolute imports everywhere\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ff49ab876363a173d7228a84037332009c1b1c1f\n+   - details: \"Use python's logging module.\"\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/bc3af5a9fe6af88433278b35db5026437a6da861\n+   - details: \"Define __version__ in vulture_whitelist/__main__.py\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d203f12a6f276ac60dab196f1fb2e3b24d1bb8ae\n+   - details: Bump up PyQt versions, update features\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b3dc28a1502920fd2d824b7b7c3e064bfcb5ed79\n+   - details: Use pytest's tmpdir fixture\n+\n+ - 28:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/aad70ab17bfec8e389292b3c645d0d4b6d931c3a\n+   - details: Single source package version\n+\n+ - 29:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/8efe8af\n+   - details: \"README.rst: Add examples to setup (#114)\"\n+\n+ - 30:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/f216902\n+   - details: \"Update tests to only pass supported arguments to literal_eval (#118)\"\n+\n+ - 31:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/1c22682\n+   - details: \"Fix PEP8 issues (#120)\"\n+\n+ - 32:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/ade4e44\n+   - details: \"Update TODO file (#122)\"\n+\n+ - 33:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/4cb052a\n+   - details: \"Add coveralls support to track code coverage (#124)\"\n+\n+ - 34:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e0e384e\n+   - details: \"Document exit codes (#123)\"\n+\n+ - 35:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/01a5031\n+   - details: \"Increase test coverage (#126)\"\n+\n+ - 36:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/5f77d81\n+   - details: \"Add coveralls badge to README (#127)\"\n+\n+ - 37:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e3ea074\n+   - details: \"Use argparse instead of optparse (#119)\"\n+\n+ - 38:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e425c9a\n+   - details: \"Test file with non utf-8 encoding (#121)\"\n+\n+ - 39:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/7ff8d68\n+   - details: \"Skip async tests correctly (#128)\"\n+\n+ - 40:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/d135592\n+   - details: \"tests/test_errors.py: Use pytest's tmpdir fixture (#131)\"\n+\n+ - 41:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/544f960\n+   - details: \"Use absolute imports (#132)\"\n+\n+ - 42:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/fcd9df8\n+   - details: \"Single-source package version string (#134)\"\n+\n+ - 43:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/3899b22\n+   - details: \"Whitelists: use non-dynamic objects directly instead of mocking them. (#137)\"\n+\n+ - 44:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/527b93c\n+   - details: \"Add --make-whitelist flag (#135). \"\n+\n+ - 45:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/47116ab\n+   - details: \"Add --ignore-names flag (#139).\"\n+\n+ - 46:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/932e52a28a65286e886d98a4691f9008a5f5e892\n+   - details: Add analysis report for localstack\n+\n+ - 47:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/36f88da77dde12334e97c31d5f5a752e79a3a12c\n+   - details: Pre-format logs\n+\n+ - 48:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e50a54e82f7d63ec2892d5fa28f49ab09d277708\n+   - details: Update localstack_analysis.md\n+\n+ - 49:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/b47fc3691055d618576f9142d36832cd1f94fd8c\n+   - details: Make report conform to the given template\n+\n+ - 50:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/513e41cc4904760196e591602e3356bd1a504a5c\n+   - details: Update localstack_analysis.md\n+\n+ - 51:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/3ab0a800db0c2200f0c666d4e198c8558c5fc325\n+   - details: create analysis report for system design primer\n+\n+ - 52:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e40be61b4e6e9cf97d689a328e8aa27c2637a85c\n+   - details: Organise reports into folders.\n+\n+ - 53:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/85de1d41b14544e634a65fe5cb215dfee31eb2cf\n+   - details: add header for localstack\n+\n+ - 54:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/89bfb08fc7fdcada02389bd4251632140a7da86c\n+   - details: Add report for relational-networks\n+\n+ - 55:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/00a0492071c449ee34e36fec7a59254133be2f1b\n+   - details: Add footer\n+\n+ - 56:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/43253a9384cc655c9e854766714cc3f5240e55bb\n+   - details: \"Add report for qutebrowser (#4)\"\n+\n+ - 57:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/5bfabaca9902017815cc01d3b38e92a21107d86d\n+   - details: \"Add report for Sharppy (#5)\"\n+---\n+\n+### Improving whitelisting infrastructure for Vulture\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) Created a command line tool which takes in sip files as input and spits a\n+whitelist with all the virtual functions defined in the [sip][sip] files. This\n+tool was further used to create a whitelist for PyQt which can hereby be used\n+with any project using PyQt. The tool is now completely tested and documented.\n+\n+<br>\n+\n+2.) Created `--make-whitelist` flag to enable reporting of the results in a\n+format which can be directly used as a whitelist. This significantly eased the\n+process of creating and maintaing a whitelist for a project.\n+\n+<br>\n+\n+3.) Implemented a ignoring mechanism for Vulture (`--ignore-names` and\n+`--ignore-decorators`) - thereby enabling users to omit the result(s) which\n+match with the given argument(s) (a glob pattern).\n+\n+<br>\n+\n+4.) Increased test coverage of Vulture from already excellent 95% to 100. Also,", "created_at": "2018-08-13T04:12:59Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4OTU4NA==", "fields": {"body": "indentation must pass yamllint", "diff": "@@ -0,0 +1,388 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: 2018\n+title: Rahul Jha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp), [Abdeali Kothari](https://github.com/AbdealiJK), [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28", "created_at": "2018-08-13T04:29:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDQ5OQ==", "fields": {"body": "Capitalize VCS as it's an abbreviation", "diff": "@@ -0,0 +1,141 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/KritiRohilla\n+student: Kriti Rohilla\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Git Commit Content Inspection\n+project_link: https://summerofcode.withgoogle.com/projects/#5636421247827968\n+tarball: https://raw.githubusercontent.com/kriti21/GSoC-2018-Report/master/ProjectPatches.tar\n+mentors: >\n+ [Saurav Singh](https://github.com/damngamerz)\n+ [Rafid Aslam](https://github.com/refeed)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/9\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/36\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/41\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/42\n+bio: >\n+ I am in my pre-final year at University Institute of Engineering and Technology,\n+ Panjab University. As part of my GSoC 2018 project, I worked on vcs related bears", "created_at": "2018-08-11T03:03:56Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDU5Ng==", "fields": {"body": "I think markdown syntax for ordered-list is enough (1. .... (without the ))", "diff": "@@ -0,0 +1,141 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/KritiRohilla\n+student: Kriti Rohilla\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Git Commit Content Inspection\n+project_link: https://summerofcode.withgoogle.com/projects/#5636421247827968\n+tarball: https://raw.githubusercontent.com/kriti21/GSoC-2018-Report/master/ProjectPatches.tar\n+mentors: >\n+ [Saurav Singh](https://github.com/damngamerz)\n+ [Rafid Aslam](https://github.com/refeed)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/9\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/36\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/41\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/42\n+bio: >\n+ I am in my pre-final year at University Institute of Engineering and Technology,\n+ Panjab University. As part of my GSoC 2018 project, I worked on vcs related bears\n+ in [coala-bears](https://github.com/coala/coala-bears/) project. The main task was\n+ to detect special git commits like `git revert`, `git merge` and commits that skip\n+ CI build and inspect such commits to see whether they meet the requirements of the\n+ project.\n+social:\n+ - GitHub:\n+   - username: kriti21\n+   - link: https://github.com/kriti21\n+ - GitLab:\n+   - username: kriti21\n+   - link: https://gitlab.com/kriti21\n+ - Gitter:\n+   - username: kriti21\n+   - link: https://gitter.im/kriti21\n+email: kritirohilla567@gmail.com\n+blog: https://kriti21.github.io/\n+activity:\n+ - 0:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/pull/562/commits/52c11a2c85087e705b2a78197aed754d47221174\n+   - details: >\n+      commit-content-checks.md: Add issue link to project description.\n+ - 1:\n+   - repo: cEPs\n+   - link: https://github.com/coala/cEPs/pull/114/commits/ea25f09ae08b4bc7423453460b14cb16eb3a0db6\n+   - details: > \n+      cEP-0016.md: Add cEP for the project.\n+ - 2:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2484/commits/9332d3d1e63f6098ae4e39e53bbf8679dce4c9a3\n+   - details: >\n+      CommitBear.py: Fix regex for issue id in CommitBear.\n+ - 3:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2501/commits/ef0d8e04b55755eccb68219dd61eb28eb0011d83\n+   - details: >\n+      GitCommitBear.py: Add settings to ignore GitHub PR merge commits.\n+ - 4:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/pull/600\n+   - details: >\n+      .travis.yml: Remove GitHub PR merge commit workaround.\n+ - 5:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2543/commits/582e38330d03c696bc7476e102acaa833c9b33af\n+   - details: >\n+      VCSCommitMetadataBear.py: Add new metabear to analyze git commits.\n+ - 6:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2576/commits/b51144b2bcc90bbf8a147c6a9e85cc009869bccb\n+   - details: >\n+      generate_package.py: Replace touch funtion with library function Path.\n+ - 7:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2600/commits/58b2f0743d4aed1fb6eea0ea38d195e51851e9d8\n+   - details: >\n+      GitLinearCommitBear.py: Add new bear to inspect `git merge` commits.\n+ - 8:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2523/commits/c7952afc9b26cb011c154cc303b3aed32ff68211\n+   - details: >\n+      CISkipInspectBear.py: Add bear to inspect commits that disable CI builds.\n+ - 9:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2652\n+   - details: >\n+      GitRevertInspectBear.py: Add new bear to inspect `git revert` commits.\n+---\n+\n+### Git Commit Content Inspection\n+coala has a `GitCommitBear` that is responsible for verifying that commits\n+made to a project are as per the set standards. This project adds some new\n+bears so that coala is more useful in handling the special git commits\n+as well. It includes adding settings to inspect special git commits like\n+`git merge`, `git revert` and commits that disable CI builds. These commits\n+are used only under specific conditions and when certain requirements are met.\n+With the implementation of these new bears, projects can easily configure\n+the `.coafile` to manage such commits according to their requirements.\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) A metadata bear called `VCSCommitMetadataBear` has been implemented which", "created_at": "2018-08-11T03:08:47Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYwOQ==", "fields": {"body": "Travis-CI", "diff": "@@ -0,0 +1,141 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/KritiRohilla\n+student: Kriti Rohilla\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Git Commit Content Inspection\n+project_link: https://summerofcode.withgoogle.com/projects/#5636421247827968\n+tarball: https://raw.githubusercontent.com/kriti21/GSoC-2018-Report/master/ProjectPatches.tar\n+mentors: >\n+ [Saurav Singh](https://github.com/damngamerz)\n+ [Rafid Aslam](https://github.com/refeed)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/9\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/36\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/41\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/42\n+bio: >\n+ I am in my pre-final year at University Institute of Engineering and Technology,\n+ Panjab University. As part of my GSoC 2018 project, I worked on vcs related bears\n+ in [coala-bears](https://github.com/coala/coala-bears/) project. The main task was\n+ to detect special git commits like `git revert`, `git merge` and commits that skip\n+ CI build and inspect such commits to see whether they meet the requirements of the\n+ project.\n+social:\n+ - GitHub:\n+   - username: kriti21\n+   - link: https://github.com/kriti21\n+ - GitLab:\n+   - username: kriti21\n+   - link: https://gitlab.com/kriti21\n+ - Gitter:\n+   - username: kriti21\n+   - link: https://gitter.im/kriti21\n+email: kritirohilla567@gmail.com\n+blog: https://kriti21.github.io/\n+activity:\n+ - 0:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/pull/562/commits/52c11a2c85087e705b2a78197aed754d47221174\n+   - details: >\n+      commit-content-checks.md: Add issue link to project description.\n+ - 1:\n+   - repo: cEPs\n+   - link: https://github.com/coala/cEPs/pull/114/commits/ea25f09ae08b4bc7423453460b14cb16eb3a0db6\n+   - details: > \n+      cEP-0016.md: Add cEP for the project.\n+ - 2:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2484/commits/9332d3d1e63f6098ae4e39e53bbf8679dce4c9a3\n+   - details: >\n+      CommitBear.py: Fix regex for issue id in CommitBear.\n+ - 3:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2501/commits/ef0d8e04b55755eccb68219dd61eb28eb0011d83\n+   - details: >\n+      GitCommitBear.py: Add settings to ignore GitHub PR merge commits.\n+ - 4:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/pull/600\n+   - details: >\n+      .travis.yml: Remove GitHub PR merge commit workaround.\n+ - 5:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2543/commits/582e38330d03c696bc7476e102acaa833c9b33af\n+   - details: >\n+      VCSCommitMetadataBear.py: Add new metabear to analyze git commits.\n+ - 6:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2576/commits/b51144b2bcc90bbf8a147c6a9e85cc009869bccb\n+   - details: >\n+      generate_package.py: Replace touch funtion with library function Path.\n+ - 7:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2600/commits/58b2f0743d4aed1fb6eea0ea38d195e51851e9d8\n+   - details: >\n+      GitLinearCommitBear.py: Add new bear to inspect `git merge` commits.\n+ - 8:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2523/commits/c7952afc9b26cb011c154cc303b3aed32ff68211\n+   - details: >\n+      CISkipInspectBear.py: Add bear to inspect commits that disable CI builds.\n+ - 9:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2652\n+   - details: >\n+      GitRevertInspectBear.py: Add new bear to inspect `git revert` commits.\n+---\n+\n+### Git Commit Content Inspection\n+coala has a `GitCommitBear` that is responsible for verifying that commits\n+made to a project are as per the set standards. This project adds some new\n+bears so that coala is more useful in handling the special git commits\n+as well. It includes adding settings to inspect special git commits like\n+`git merge`, `git revert` and commits that disable CI builds. These commits\n+are used only under specific conditions and when certain requirements are met.\n+With the implementation of these new bears, projects can easily configure\n+the `.coafile` to manage such commits according to their requirements.\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) A metadata bear called `VCSCommitMetadataBear` has been implemented which\n+analyzes the commit at HEAD and returns all relevant information about it\n+as `HiddenResult` to the bear using it.\n+\n+<br>\n+\n+2.) GitHub PR merge commits were responsible for travis build failure. Settings", "created_at": "2018-08-11T03:09:22Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYzMA==", "fields": {"body": "no trailing , if followed by )", "diff": "@@ -0,0 +1,358 @@\n+import logging\n+from os import path\n+\n+from coala_utils.FileUtils import detect_encoding\n+from coala_utils.decorators import (enforce_signature, generate_eq,)", "created_at": "2018-08-11T03:10:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNTgyNg==", "fields": {"body": "This should be put into css file instead.", "diff": "@@ -30,6 +30,17 @@\n   <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n </head>\n \n+<style type=\"text/css\">", "created_at": "2018-08-11T04:11:01Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNzY5NQ==", "fields": {"body": "See changes requested at #615", "diff": "@@ -0,0 +1,268 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/virresh\n+student: Viresh Gupta\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Integrate ANTLR v4 to coala\n+project_link: https://summerofcode.withgoogle.com/projects/#6067962113425408\n+report_year: 2018\n+tarball: https://github.com/virresh/GSoC-18_Report/raw/master/patches.tar\n+mentors: >\n+ [Dong-hee Na](https://github.com/corona10) &\n+ [Udayan Tandon](https://github.com/Udayan12167)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/37\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/38\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/39\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/40\n+bio: >\n+ Hi ! I am Viresh, an undergrad student at Indraprastha Institute of \n+ Information Technology, Delhi, India. I love coding in and out and like to\n+ lay my hands on whatever tech I can find. I also love to read books, observe\n+ nature and star gaze in my free time. I chose coala for my GSoC project\n+ because I think it's awesome to be able to push my friends a friendly reminder\n+ to indent their code properly, and programmatically detect when they went lazy\n+ in doing so, which helps me to focus on the main logic when working on a team\n+ project.\n+social:\n+ - GitHub:\n+   - username: virresh\n+   - link: https://github.com/virresh\n+ - GitLab:\n+   - username: virresh\n+   - link: https://gitlab.com/virresh\n+ - Gitter:\n+   - username: virresh\n+   - link: https://gitter.im/virresh\n+ - Openhub:\n+   - username: virresh\n+   - link: https://www.openhub.net/accounts/virresh\n+email: viresh16118@iiitd.ac.in\n+blog: https://virresh.wordpress.com/\n+activity:\n+ - 0:", "created_at": "2018-08-11T06:04:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNzk3OQ==", "fields": {"body": "just remove this paragraph.  It is described above.  that is enough.  add an issue link if you want", "diff": "@@ -0,0 +1,174 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/VaibhavRai\n+student: Vaibhav Kumar Rai\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Debug and Profile Bears\n+project_link: https://summerofcode.withgoogle.com/projects/#6109762077327360\n+tarball: https://rawgit.com/RaiVaibhav/GSoC-Report/master/project.tar\n+mentors: >\n+ [Mischa Kr\u00fcger](https://github.com/Makman2),\n+ [Fabian Neuschmidt](https://github.com/fneu),\n+ [Arjun Singh Yadav](https://github.com/arjunsinghy96)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/18\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/52\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/53\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/54\n+bio: >\n+ I am third year student of B.Tech Computer Science Engineering at Shri Mata\n+ Vaishno Devi Uiversity, Katra, Jammu and Kashmir. I participated in GSoC and\n+ worked with [coala](https://coala.io) to create a better quality Bears by\n+ creating a tool which will have the ability to jump directly into Bear code\n+ and move through it using a debugger interface such as pdb and make debugging\n+ of Bears as easy as writing the Bear.\n+ A Debugger should also the ability to investigate the settings passed to the\n+ Bear.\n+ I also implemented a Profiler Interface which provides abilities to profile\n+ Bear code to optimize its performance.\n+social:\n+ - GitHub:\n+   - username: RaiVaibhav\n+   - link: https://github.com/RaiVaibhav\n+ - GitLab:\n+   - username: RaiVaibhav\n+   - link: https://gitlab.com/RaiVaibhav\n+ - Gitter:\n+   - username: RaiVaibhav\n+   - link: https://gitter.im/RaiVaibhav\n+email: raivaibhav08@gmail.com\n+blog: https://raivaibhav.github.io\n+activity:\n+ - 0:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/d6186cd1bc3f4e049acac21c657b5a21c55393de\n+   - details: >\n+      Removed the `filter_raising_callables` function and inline it, to decrease\n+      the complexity of code for future modification in Debugger<br>Interface pull\n+      request.\n+ - 1:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/c1184ca58a9cca30afc144e7ad7a1bf7c5fe5f55\n+   - details: >\n+      Added Debugger Interface with `--debug-bears` argument and debug bears\n+      process so that pdb work in single process environment and<br>bear developer\n+      can debug specified bear.\n+ - 2:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/4cb1a6c5bb85bc42a315d118a2f66123465ab4ed\n+   - details: >\n+      Debug_Bears.rst: Added Debugger Interface document with demo.\n+ - 3:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/89833995c1380b813f30bf2048e3f63d495dd71a\n+   - details: >\n+      Prevent bear test from failing, replaced httpstat with Google teapot\n+      because of SSL certification error.\n+ - 4:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/commit/8faa08ef573105a75cf31c57298d6b6ba9201d8e\n+   - details: >\n+      Debugged PySafetyBear to get the cause of upstream problem and failure of\n+      appveyor CI, updated PySafetyBear to support lastest version<br>of safety.\n+ - 5:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/e9e7e3770791b6df41b414a01c5a956c2b8b356f\n+   - details: >\n+      Added Settings inspection toolset through which user can access the\n+      settings of a Bear in Debug environment.\n+ - 6:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/80f8bc955bf4db2892d52262396d824f3050fb71\n+   - details: >\n+      Debug_bears.rst: Added Settings inspection toolset document with demo.\n+ - 7:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/3cb58246351ecbabd9768151cb6b9fe28c3790fc\n+   - details: >\n+      Removed `debugger` flag from `init` of bear Base class because of the API\n+      breakage issue for the existing users.\n+ - 8:\n+   - repo: coala-utils\n+   - link: https://gitlab.com/coala/coala-utils/merge_requests/79/diffs?commit_id=ba2e0789d0f1c405af93e313e692087077b45954\n+   - details: >\n+      Enhance TRUE and FALSE STRINGS in coala-utils `constants` so that\n+      settings like debugger and profiler can be enable and disable with<br>the\n+      value like `ok`, `positive`, `none`, `negative` etc.\n+ - 9:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/fea6e01bd0b5300b0f46c3528981c1e6558e1867\n+   - details: >\n+      Added Profiler Interface on coala with `--profile` argument to profile\n+      execution of bear.\n+ - 10:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/0e075217ea1bc5732d9deac57355431db00ef4ee\n+   - details: >\n+      Profile_Bears.rst: Add Profiling Interface document with demo.\n+---\n+\n+### Debug and Profile Bears\n+\n+#### Work Done\n+\n+1. Debugger Interface added in coala.\n+   1. Step into the `run()` method of a bear move through it using a debugger\n+      interface such as `pdb` and exits as soon as `run()` is left.\n+   2. Pdb's quit-command (`q`) remapped so coala continues its normal execution\n+      without aborting. So, `quit` or `q` will first clear all breakpoints and\n+      then continue execution.\n+   3. Users can specify the bear they want to debug using `--debug-bears`.\n+   4. Users can specify to debug bears using a `.coafile`.\n+\n+2. A new command `settings` is included in coala's Debugging Interface to\n+   inspect Bear settings in the debugging environment. It displays all passed\n+   settings of a Bear and their values so bear developer can quickly inspect\n+   them.\n+\n+3. Profiler Interface added in coala.\n+   1. The profiler will start by profiling the `run()` method of bears because\n+      this is the part where bear writers will spend time on, as rest of the\n+      part like loading the files, collecting the settings, etc. are done by\n+      coala itself.\n+   2. `--profile-bears` or `profile_bears` (using .coafile) is the main argument\n+      to enable profiling.\n+   3. Accept an additional parameter `directory_path` through which bear\n+      developers can specify where to store the profiled data files.\n+\n+#### Challenges\n+\n+I had difficulties with testing of Debugger interface. With the help of `Mock`,\n+test for debugger interface was created, though code coverage was 100% but\n+`mock` test was not the ideal test, so after hours of discussion with Mischa we\n+decided to capture the `pdb stdout` and assert the the output with the real\n+output but problem arised, the ideal tests passes but somehow it didn't showed\n+the code coverage to 100% not only that it also removed the coverage of the\n+previous tests, at first I thought created test have some problem but seems\n+like `pytest-cov` had a problem, so to confirm that I created a\n+[test repo](https://github.com/RaiVaibhav/test_repo) and enable the\n+[CI](https://travis-ci.org/RaiVaibhav/test_repo) on that repo to check the\n+coverage report, it also showed same failure. So, I created a issue on\n+`pytest-cov` repo but actual problem was, both coverage and debugger use the\n+same trace feature, so it was not possible to run coverage and debugger in\n+parallel or say it is not possible to chain the trace functions, so Mischa gave\n+a idea to restore the trace callbacks and then run test, it worked finally so I\n+included both ideal and `Mock` test so that the coverage remain 100, but in all\n+of these I lagged around 3 week from my schedule. So I couldn't implement one of\n+the proposed feature.\n+\n+#### Work to be done\n+\n+A tool which will provide the ability to inspect result instances like\n+`origin`, `diffs`, `file`, `severity`, `message`, `aspects` and several other\n+attributes in debugging environment or in a seperate python console where all\n+where user can easily access there values. Information about result will help\n+bear developer in creating a better performant Bears.\n+\n+Result inspection tool will not only help in debugging the bear results but\n+also help in testing the bear by asserting the various attributes of expected\n+result with actual result.\n+\n+So, after `GSoC` my first task will be to add the inspection tool in the coala", "created_at": "2018-08-11T06:18:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyMjk4MQ==", "fields": {"body": "there are 52 pages in your tarball, but only 49 here.  Some intentionally left out of this list ?  Too small to mention ?\nare these upstream PRs in your tarball ?\nIt isnt work completed, and they are derivatives of your other patches, so listing them here isnt ideal.\nAnd including them in your tarball probably isnt good either.\nI suggest you move these two upstream PRs into the prose below, describing the fact that our enhancements are generic for any gh-board user, and we have been hoping that the upstream gh-board repos will become better maintained.", "diff": "@@ -0,0 +1,371 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/li-boxuan\n+student: Boxuan Li\n+organisation: coala\n+organisation_link : https://coala.io\n+report_year: 2018\n+project: Meta-review\n+project_link: https://summerofcode.withgoogle.com/projects/#5188493739819008\n+tarball: https://github.com/li-boxuan/GSoCReport/raw/master/li-boxuan_coala.tar\n+mentors: >\n+  [Hemang Kumar](https://github.com/hemangsk/) &\n+  [Surya Widi](https://github.com/blazeu) &\n+  [Andrew Dassonville](https://github.com/andrewda)\n+phase:\n+  - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/14\n+  - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/15\n+  - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/16\n+  - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/17\n+bio: >\n+  I am a final year student (expected graduation date: May 2019) of Computer\n+  Science at The University of Hong Kong. I participated in GSoC and worked\n+  with [coala](http://coala.io) to implement a meta-review system, which\n+  collects and tracks GitHub reactions used by coala community to generate\n+  meaningful analysis. I also improved usability of\n+  [gh-board](http://github.com/coala/gh-board), a serverless kanban board,\n+  fixing some issues and extending it to track reviews & meta-reviews.\n+social:\n+  - GitHub:\n+    - username: li-boxuan\n+    - link: https://github.com/li-boxuan\n+  - GitLab:\n+    - username: li-boxuan\n+    - link: https://gitlab.com/li-boxuan\n+  - Gitter:\n+    - username: li-boxuan\n+    - link: https://gitter.im/li-boxuan\n+  - Openhub:\n+    - username: li-boxuan\n+    - link: https://www.openhub.net/accounts/li-boxuan\n+email: liboxuanhk@gmail.com\n+blog: http://li-boxuan.github.io/\n+activity:\n+\n+  - 1:\n+    - repo: projects\n+    - link: https://github.com/coala/projects/commit/6c83d70a8559d1368fba1d80ad412b31ada7dad3\n+    - details: >\n+       [Bonding Period Work] meta_review.md: Add meta review project\n+\n+  - 2:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/e9f7587856e1c236d37e96f54a0cb4d72069776d\n+    - details: >\n+       cEP-0019.md: Meta-review system\n+\n+  - 3:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/2929576df9c20144aad9db8a5e326c1853375158\n+    - details: >\n+       Set up meta_review app\n+\n+  - 4:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/aae015127c96b85a1cd9188199a6e4a46693d9f7\n+    - details: >\n+       Change meta-review models\n+\n+  - 5:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/78e1e3a542a1654982f55cde4e08bbf97ec81c3c\n+    - details: >\n+       Implement meta-review scoring & ranking system\n+\n+  - 6:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/16f8e84036a9ba47d434c60400da021d90a1a740\n+    - details: >\n+       [Bonding Period Work] fetch-issues.js: Build custom generator\n+\n+  - 7:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/46f1ad5ce83d5d72aa95ea00703b92c2fc38b2dc\n+    - details: >\n+       [Bonding Period Work] Remove TODOs in components code\n+\n+  - 8:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/60b8a10f123d2bec71c22c31f3e281ad9609fa07\n+    - details: >\n+       [Bonding Period Work] Modernize existing React component code\n+\n+  - 9:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/e452f41ddda6abe149442d5240675b3ae3333e6a\n+    - details: >\n+       nav.jsx: Fix broken link on header\n+\n+  - 10:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/77830f4146de9d4d29b539740423a0ca43ee219f\n+    - details: >\n+       Pre-fetch pull request review comments & reactions\n+\n+  - 11:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/2a7338b3edff6d1c9f5b019ea07c28640996267a\n+    - details: >\n+       package.json: Add linting on script & test\n+\n+  - 12:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d3c6debe198b369901166be791a9ae53f23b26a0\n+    - details: >\n+       Get test suite working\n+\n+  - 13:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/671f13de1999001e718df9ce5187d7abf278791d\n+    - details: >\n+       Set pre-fetch time limit for pull requests\n+\n+  - 14:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/91fffbbce1713a1d56276122d51cb16c7079b626\n+    - details: >\n+       Fix Travis failure\n+\n+  - 15:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/c33cc70bcab57a4ac13e4f352a255abc213dc874\n+    - details: >\n+       database.js: Fix `closed` filter bug\n+\n+  - 16:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/a2957290794424c6b8a0162ab49694cd771c2445\n+    - details: >\n+       .travis.yml: Enable keep-history\n+\n+  - 17:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/aca0d61832ffe1bac2b2c9d2615ea4219f68d3b6\n+    - details: >\n+       .travis.yml: Let moban task not deploy\n+\n+  - 18:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/4b82e679b83339f500d686967d3b6b843f7e1d40\n+    - details: >\n+       run-test.sh: Verify files exist\n+\n+  - 19:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/0f9f4a45bfdf341c5705d7543688adea7195c5cb\n+    - details: >\n+       Increase test timeout threshold\n+\n+  - 20:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/34c2e6de21ed2933d8f19cca3b6dd177ce32c86f\n+    - details: >\n+       login-modal.jsx: Add exception for default api url\n+\n+  - 21:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/828be376832687373b984df38ca71c1684651aa7\n+    - details: >\n+       Add `meta-review in need` column\n+\n+  - 22:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/ac8b0709b0e82963fd3d6680b37005359225effc\n+    - details: >\n+       Display reactions of reviews\n+\n+  - 23:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/892b87ff808ac188166c9500d1169b1590b8d791\n+    - details: >\n+       dashboard.jsx: Add environment REPOSITORIES\n+\n+  - 24:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/e791bee60bf4af32aec889211d4de63d6418d7ed\n+    - details: >\n+       Setup GraphQL client\n+\n+  - 25:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/5480420793979b9ae4b53117c6d5d757f12013bb\n+    - details: >\n+       Use new graphql client to sync issues\n+\n+  - 26:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/93c842bca04298c8afc2d71d167efe04d432d11f\n+    - details: >\n+       dashboard.jsx: Load repos automatically after login\n+\n+  - 27:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/9eae16877612d21f3ceed99ec23a097ec32e21b3\n+    - details: >\n+       Add review filters functionality\n+\n+  - 28:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d32b25729ee1d9bc7972dce4a898a0bea9146098\n+    - details: >\n+       Refactor pre-fetching\n+\n+  - 29:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/faf793a3679ab32cb4e42c8ac54f174695b6bebc\n+    - details: >\n+       github-graphql.js: Fix several issues\n+\n+  - 30:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/59e9cba6ca38a8fb6396a0864ff43bf749f1d6ec\n+    - details: >\n+       Setup Jest configurations\n+\n+  - 31:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/8a3c49befc2c3d2b68ed11c5f2e217cb177caf57\n+    - details: >\n+       reactions.jsx: Add snapshot test\n+\n+  - 32:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/1f88cfa9c369f5b3f4bd7abafa6c15970196de80\n+    - details: >\n+       Add codecov\n+\n+  - 33:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/3638063072aeea1925bab5f9565d7765bf8d4cf4\n+    - details: >\n+       Separate test logic\n+\n+  - 34:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/10003d073c16c18da669b66f235c0e9abc1230f1\n+    - details: >\n+       netlify.toml: Verify pre-fetched files exist\n+\n+  - 35:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d1a7ea3ea66c7af7a51a9717f67fc635fc35cf41\n+    - details: >\n+       Enhance meta-review UI\n+\n+  - 36:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/b062087825f01c1169accb646f0eaf0d1f0e7cb8\n+    - details: >\n+       Add reaction mutation functionality\n+\n+  - 37:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d4705c5332ecd8e4329f0b62f7df3c9312c35a01\n+    - details: >\n+       repo-kanban.jsx: Use withAuth wrapper\n+\n+  - 38:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d1a9bf25061800510cd9cf7d1c089900d2cbd1f1\n+    - details: >\n+       dashboard.jsx: Use withAuth wrapper\n+\n+  - 39:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/dc2cc6a82f72644da55f509f8d4a50ba8fa694ba\n+    - details: >\n+       Linter: Add option to remove 0 number\n+\n+  - 40:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/dfa92b64435b86b10b9a725ee32267896450e565\n+    - details: >\n+       Meta-review.rst: Add meta-review docs\n+\n+  - 41:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/42a3ffac059f279cd65c9539b8e44bf222782773\n+    - details: >\n+       Newcomers_Guide.rst: Add meta-review process\n+\n+  - 42:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/2f6f58b4afa0b139aa25062c3d3fcb27df3ea0d5\n+    - details: >\n+       PyLintBear: Fix column number convention\n+\n+  - 43:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/1f3325519a72cb98669185149b03b11c1ec25f70\n+    - details: >\n+       CPPLintBear: Fix line number convention\n+\n+  - 44:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/705f9db98d957cc9d27e675b1d58f369feb54255\n+    - details: >\n+       HAMLLintBear: Fix line number convention\n+\n+  - 45:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/e5df6bcac33aa06bec70bf21217972620c34e888\n+    - details: >\n+       WriteGoodLintBear: Fix column number convention\n+\n+  - 46:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/e445c04e28e95b7f21983e9e2dd770e81838aa69\n+    - details: >\n+       StylintBear: Fix column number convention\n+\n+  - 47:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/401fa883ffbe21b78a8a4899160592a293f3d4cd\n+    - details: >\n+       CheckStyleBear: Fix offset convention\n+\n+  - 48:\n+    - repo: philschatz/gh-board (upstream)\n+    - link: https://github.com/philschatz/gh-board/pull/147\n+    - details: >\n+       Modernise React code, update packages, fix warnings and improve build (open)\n+\n+  - 49:", "created_at": "2018-08-11T10:14:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyMzE5OA==", "fields": {"body": "Some ... are too small to mention?\n\n\n\nYes, I have several small commits which just do gitignore sync, so I didn't mention them in the report.\n\n\n\nare these upstream PRs in your tarball\n\n\n\nI didn't put upstream PRs in my tarball.\n\n\n\nI suggest you move these two upstream PRs into the prose below\n\n\n\nSounds good. Will do that.", "diff": "@@ -0,0 +1,371 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/li-boxuan\n+student: Boxuan Li\n+organisation: coala\n+organisation_link : https://coala.io\n+report_year: 2018\n+project: Meta-review\n+project_link: https://summerofcode.withgoogle.com/projects/#5188493739819008\n+tarball: https://github.com/li-boxuan/GSoCReport/raw/master/li-boxuan_coala.tar\n+mentors: >\n+  [Hemang Kumar](https://github.com/hemangsk/) &\n+  [Surya Widi](https://github.com/blazeu) &\n+  [Andrew Dassonville](https://github.com/andrewda)\n+phase:\n+  - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/14\n+  - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/15\n+  - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/16\n+  - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/17\n+bio: >\n+  I am a final year student (expected graduation date: May 2019) of Computer\n+  Science at The University of Hong Kong. I participated in GSoC and worked\n+  with [coala](http://coala.io) to implement a meta-review system, which\n+  collects and tracks GitHub reactions used by coala community to generate\n+  meaningful analysis. I also improved usability of\n+  [gh-board](http://github.com/coala/gh-board), a serverless kanban board,\n+  fixing some issues and extending it to track reviews & meta-reviews.\n+social:\n+  - GitHub:\n+    - username: li-boxuan\n+    - link: https://github.com/li-boxuan\n+  - GitLab:\n+    - username: li-boxuan\n+    - link: https://gitlab.com/li-boxuan\n+  - Gitter:\n+    - username: li-boxuan\n+    - link: https://gitter.im/li-boxuan\n+  - Openhub:\n+    - username: li-boxuan\n+    - link: https://www.openhub.net/accounts/li-boxuan\n+email: liboxuanhk@gmail.com\n+blog: http://li-boxuan.github.io/\n+activity:\n+\n+  - 1:\n+    - repo: projects\n+    - link: https://github.com/coala/projects/commit/6c83d70a8559d1368fba1d80ad412b31ada7dad3\n+    - details: >\n+       [Bonding Period Work] meta_review.md: Add meta review project\n+\n+  - 2:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/e9f7587856e1c236d37e96f54a0cb4d72069776d\n+    - details: >\n+       cEP-0019.md: Meta-review system\n+\n+  - 3:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/2929576df9c20144aad9db8a5e326c1853375158\n+    - details: >\n+       Set up meta_review app\n+\n+  - 4:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/aae015127c96b85a1cd9188199a6e4a46693d9f7\n+    - details: >\n+       Change meta-review models\n+\n+  - 5:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/78e1e3a542a1654982f55cde4e08bbf97ec81c3c\n+    - details: >\n+       Implement meta-review scoring & ranking system\n+\n+  - 6:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/16f8e84036a9ba47d434c60400da021d90a1a740\n+    - details: >\n+       [Bonding Period Work] fetch-issues.js: Build custom generator\n+\n+  - 7:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/46f1ad5ce83d5d72aa95ea00703b92c2fc38b2dc\n+    - details: >\n+       [Bonding Period Work] Remove TODOs in components code\n+\n+  - 8:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/60b8a10f123d2bec71c22c31f3e281ad9609fa07\n+    - details: >\n+       [Bonding Period Work] Modernize existing React component code\n+\n+  - 9:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/e452f41ddda6abe149442d5240675b3ae3333e6a\n+    - details: >\n+       nav.jsx: Fix broken link on header\n+\n+  - 10:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/77830f4146de9d4d29b539740423a0ca43ee219f\n+    - details: >\n+       Pre-fetch pull request review comments & reactions\n+\n+  - 11:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/2a7338b3edff6d1c9f5b019ea07c28640996267a\n+    - details: >\n+       package.json: Add linting on script & test\n+\n+  - 12:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d3c6debe198b369901166be791a9ae53f23b26a0\n+    - details: >\n+       Get test suite working\n+\n+  - 13:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/671f13de1999001e718df9ce5187d7abf278791d\n+    - details: >\n+       Set pre-fetch time limit for pull requests\n+\n+  - 14:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/91fffbbce1713a1d56276122d51cb16c7079b626\n+    - details: >\n+       Fix Travis failure\n+\n+  - 15:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/c33cc70bcab57a4ac13e4f352a255abc213dc874\n+    - details: >\n+       database.js: Fix `closed` filter bug\n+\n+  - 16:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/a2957290794424c6b8a0162ab49694cd771c2445\n+    - details: >\n+       .travis.yml: Enable keep-history\n+\n+  - 17:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/aca0d61832ffe1bac2b2c9d2615ea4219f68d3b6\n+    - details: >\n+       .travis.yml: Let moban task not deploy\n+\n+  - 18:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/4b82e679b83339f500d686967d3b6b843f7e1d40\n+    - details: >\n+       run-test.sh: Verify files exist\n+\n+  - 19:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/0f9f4a45bfdf341c5705d7543688adea7195c5cb\n+    - details: >\n+       Increase test timeout threshold\n+\n+  - 20:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/34c2e6de21ed2933d8f19cca3b6dd177ce32c86f\n+    - details: >\n+       login-modal.jsx: Add exception for default api url\n+\n+  - 21:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/828be376832687373b984df38ca71c1684651aa7\n+    - details: >\n+       Add `meta-review in need` column\n+\n+  - 22:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/ac8b0709b0e82963fd3d6680b37005359225effc\n+    - details: >\n+       Display reactions of reviews\n+\n+  - 23:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/892b87ff808ac188166c9500d1169b1590b8d791\n+    - details: >\n+       dashboard.jsx: Add environment REPOSITORIES\n+\n+  - 24:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/e791bee60bf4af32aec889211d4de63d6418d7ed\n+    - details: >\n+       Setup GraphQL client\n+\n+  - 25:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/5480420793979b9ae4b53117c6d5d757f12013bb\n+    - details: >\n+       Use new graphql client to sync issues\n+\n+  - 26:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/93c842bca04298c8afc2d71d167efe04d432d11f\n+    - details: >\n+       dashboard.jsx: Load repos automatically after login\n+\n+  - 27:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/9eae16877612d21f3ceed99ec23a097ec32e21b3\n+    - details: >\n+       Add review filters functionality\n+\n+  - 28:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d32b25729ee1d9bc7972dce4a898a0bea9146098\n+    - details: >\n+       Refactor pre-fetching\n+\n+  - 29:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/faf793a3679ab32cb4e42c8ac54f174695b6bebc\n+    - details: >\n+       github-graphql.js: Fix several issues\n+\n+  - 30:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/59e9cba6ca38a8fb6396a0864ff43bf749f1d6ec\n+    - details: >\n+       Setup Jest configurations\n+\n+  - 31:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/8a3c49befc2c3d2b68ed11c5f2e217cb177caf57\n+    - details: >\n+       reactions.jsx: Add snapshot test\n+\n+  - 32:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/1f88cfa9c369f5b3f4bd7abafa6c15970196de80\n+    - details: >\n+       Add codecov\n+\n+  - 33:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/3638063072aeea1925bab5f9565d7765bf8d4cf4\n+    - details: >\n+       Separate test logic\n+\n+  - 34:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/10003d073c16c18da669b66f235c0e9abc1230f1\n+    - details: >\n+       netlify.toml: Verify pre-fetched files exist\n+\n+  - 35:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d1a7ea3ea66c7af7a51a9717f67fc635fc35cf41\n+    - details: >\n+       Enhance meta-review UI\n+\n+  - 36:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/b062087825f01c1169accb646f0eaf0d1f0e7cb8\n+    - details: >\n+       Add reaction mutation functionality\n+\n+  - 37:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d4705c5332ecd8e4329f0b62f7df3c9312c35a01\n+    - details: >\n+       repo-kanban.jsx: Use withAuth wrapper\n+\n+  - 38:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d1a9bf25061800510cd9cf7d1c089900d2cbd1f1\n+    - details: >\n+       dashboard.jsx: Use withAuth wrapper\n+\n+  - 39:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/dc2cc6a82f72644da55f509f8d4a50ba8fa694ba\n+    - details: >\n+       Linter: Add option to remove 0 number\n+\n+  - 40:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/dfa92b64435b86b10b9a725ee32267896450e565\n+    - details: >\n+       Meta-review.rst: Add meta-review docs\n+\n+  - 41:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/42a3ffac059f279cd65c9539b8e44bf222782773\n+    - details: >\n+       Newcomers_Guide.rst: Add meta-review process\n+\n+  - 42:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/2f6f58b4afa0b139aa25062c3d3fcb27df3ea0d5\n+    - details: >\n+       PyLintBear: Fix column number convention\n+\n+  - 43:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/1f3325519a72cb98669185149b03b11c1ec25f70\n+    - details: >\n+       CPPLintBear: Fix line number convention\n+\n+  - 44:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/705f9db98d957cc9d27e675b1d58f369feb54255\n+    - details: >\n+       HAMLLintBear: Fix line number convention\n+\n+  - 45:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/e5df6bcac33aa06bec70bf21217972620c34e888\n+    - details: >\n+       WriteGoodLintBear: Fix column number convention\n+\n+  - 46:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/e445c04e28e95b7f21983e9e2dd770e81838aa69\n+    - details: >\n+       StylintBear: Fix column number convention\n+\n+  - 47:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/401fa883ffbe21b78a8a4899160592a293f3d4cd\n+    - details: >\n+       CheckStyleBear: Fix offset convention\n+\n+  - 48:\n+    - repo: philschatz/gh-board (upstream)\n+    - link: https://github.com/philschatz/gh-board/pull/147\n+    - details: >\n+       Modernise React code, update packages, fix warnings and improve build (open)\n+\n+  - 49:", "created_at": "2018-08-11T10:26:23Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyNjY4Nw==", "fields": {"body": "@Vamshi99 please remove this from the list of done 'activities', because it isn't finished yet. Missing migrations and the commits are still marked WIP. Move it down to the work to be done section.", "diff": "@@ -0,0 +1,209 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/VamshiKrishna\n+student: Vamshi Krishna Bommerla\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Implement GitMate automations and plugins for coala\n+project_link: https://summerofcode.withgoogle.com/projects/#5344316227059712\n+tarball: https://rawgit.com/Vamshi99/GSoCReport/master/project.tar\n+mentors: >\n+ [Naveen Kumar Sangi](https://github.com/nkprince007),\n+ [Lasse Schuirmann](https://github.com/sils),\n+ [Manvendra Singh](https://github.com/manu-chroma),\n+ [Hizkia Felix](https://github.com/HizkiFW)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/4\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/5\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/6\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/7\n+bio: >\n+ I am third year student of B.Tech Computer Science Engineering at Amrita\n+ University, Amritapuri, Kerala. I participated in GSoC and worked with\n+ [coala](https://coala.io) and [GitMate](https://gitmate.io) to implement\n+ GitMate plugins and automation which help coala development workflow. I worked\n+ on adding plugins which auto-reject, auto-review, auto-assign PRs and notify\n+ merge conflicts in a PR. I also implemented a assign request plugin to assign\n+ issues to a user if he/she satisfies defined eligibilty conditions.\n+social:\n+ - GitHub:\n+   - username: Vamshi99\n+   - link: https://github.com/Vamshi99\n+ - GitLab:\n+   - username: Vamshi99\n+   - link: https://gitlab.com/Vamshi99\n+ - Gitter:\n+   - username: Vamshi99\n+   - link: https://gitter.im/Vamshi99\n+ - OpenHub:\n+   - username: Vamshi99\n+   - link: https://www.openhub.net/accounts/Vamshi99\n+email: bommvams72@gmail.com\n+blog: https://vamshi99.blogspot.com\n+activity:\n+ - 0:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/225a88e695794535f50996b4997466b72e9d47ea\n+   - details: >\n+      Add gitmate pr rejector plugin\n+ - 1:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/847afeb5460ce2866ecb2cc38593c0c486aa0271\n+   - details: >\n+      Commit.py: Add mentioned_issues, closes_issues propeties\n+ - 2:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/05062b4f9758068291445f87469e4d9d2a4f9707\n+   - details: >\n+      Upgrade IGitt\n+ - 3:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/3d2164d71722e55a6432a8911149c64897851564\n+   - details: >\n+      Add Fixes vs Closes automated checking plugin\n+ - 4:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/4a044453f5d34c9f1b8227b7f57b8a0fd0caba57\n+   - details: >\n+      MergeRequest.py: Add fix_issues, close_issues, resolve_issues properties\n+ - 5:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/ffd554de617d619809f11b0284eaa032c2d9df83\n+   - details: >\n+      Auto assign issue based on commit mention in PR\n+ - 6:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/0eec2ec32e7afd7d017cad4c67a741c688e1bfc4\n+   - details: >\n+      apps.py: Add helper function to fetch plugin settings\n+ - 7:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/e2224d7d1f61a34065f741535e53e676dc51ff4b\n+   - details: >\n+      Add Team class\n+ - 8:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/f9d08c9a88c0b958a4c2ec5eb813fcd124b5300e\n+   - details: >\n+      Mark PR as WIP if coala plugin detects errors\n+ - 9:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/c4abdd4f9367af8ce73f39f525383def68de6b62\n+   - details: >\n+      MergeRequest: Add mergeable property\n+ - 10:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/db76142d3ecb1e6cd9cd10885ae2475cb07c4d3d\n+   - details: >\n+      Notify merge conflicts in a PR\n+ - 11:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/ad5480c9b0a124d98020a4ad3fd3caf20fa1e321\n+   - details: >\n+      pr_rejector: Support regex in branch names\n+ - 12:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/94735ff0f1024d6f293db90516087d8e4d2c353d\n+   - details: >\n+      Organization: Add issues property and filter_issues method\n+ - 13:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/fff0d568f1f2731c5055995ff19bbc93be842d5f\n+   - details: >\n+      Repository: Filter issues by label, assignee\n+ - 14:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/c025311167b07da5e825433a4d4d5e376adfed62\n+   - details: >\n+      GitLabUser: Fetch user id from username\n+ - 15:\n+   - repo: mr-rebaser\n+   - link: https://gitlab.com/gitmate/open-source/mr-rebaser/commit/fad8305823a1058e93cd2397b5239a882b66c3f9\n+   - details: >\n+      Add squash pull request command\n+ - 16:\n+   - repo: mr-rebaser\n+   - link: https://gitlab.com/gitmate/open-source/mr-rebaser/commit/3124c07ca5cd46acf985dc25fe22889e5a4744d0\n+   - details: >\n+      Dockerfile: Install requirements\n+ - 17:\n+   - repo: mr-rebaser\n+   - link: https://gitlab.com/gitmate/open-source/mr-rebaser/commit/68360f3f0fac686907c7eb44c1a70bfa9e276d42\n+   - details: >\n+      run.py: Update squash command\n+ - 18:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/dda98a8ab67d01376d3199bb82260838cebab7b0\n+   - details: >\n+      rebaser: Add squash command\n+ - 19:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/f4ec3c602745bcf08405479a684876cc1080a21f\n+   - details: >\n+      Issue: Add available_assignees property\n+ - 20:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/merge_requests/525\n+   - details: >\n+      Add assign request command\n+ - 21:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/merge_requests/524\n+   - details: >\n+      Add review plugin", "created_at": "2018-08-11T13:31:59Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTUwNTI3Mw==", "fields": {"body": "it needs -", "diff": "@@ -0,0 +1,255 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: 43e4291bf4a8b6d83b004483d260cf2dfdd0d3ae139d598f40e473d05513f9c6\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2\n+  - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19\n+  - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43\n+  - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+       GitCommitBear: Parse remote with giturlparse\n+  - 2:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/8dfe8376\n+    - details: >\n+       Jinja2.py: Add support for ignore comments\n+  - 3:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/1ec5b92c\n+    - details: >\n+       cEP-0020: Add Newcomer metrics and Gamification system\n+  - 4:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/77f8802e\n+    - details: >\n+       org/cron.py: Use dict.get method to r_json\n+  - 5:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/791baab0\n+    - details: >\n+       Add IGitt Cache mechanism\n+  - 6:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1b8058c0\n+    - details: >\n+       requirements.txt: Use == for installing IGitt\n+  - 7:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/00f3081e\n+    - details: >\n+       Serialize coala issues on GitHub and GitLab\n+  - 8:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1398c931\n+      details: >\n+       Implement logging", "created_at": "2018-08-13T06:50:21Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTUyODA5OA==", "fields": {"body": "Sorry I forgot the cEP patch", "diff": "@@ -0,0 +1,184 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+report_year: 2018\n+date: 2018-08-12\n+student: Palash Nigam\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Optimize Caching for the NextGen-Core\n+project_link: https://summerofcode.withgoogle.com/projects/#6434190552203264\n+tarball: https://rawgit.com/palash25/gsoc-18-report/master/project.tar.gz\n+sha256sum: 0af1551d96663f82c5ccf05437008ba00fade628a5a1659bdb78364b3546caf4\n+mentors: >\n+  [Mischa Kr\u00fcger](https://github.com/Makman2),\n+  [Shreyans Doshi](https://github.com/shreyans800755),\n+  [Fabian Neuschmidt](https://github.com/fneu)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/32\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/33\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/34\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/35\n+bio: >\n+  I am second year student of B.Tech Computer Science and Engineering at\n+  International Institute of Information and Technology, Bhubaneswar,\n+  Odisha, India. I worked as a GSoC student under coala to improve coala's\n+  I/O mechanism using `FileFactory` class and adding features to provide\n+  more support for NextGen-Core's caching mechanism.\n+social:\n+  - GitHub:\n+      - username: palash25\n+      - link: https://github.com/palash25\n+  - GitLab:\n+      - username: palash25\n+      - link: https://gitlab.com/palash25\n+  - Gitter:\n+      - username: palash25\n+      - link: https://gitter.im/palash25\n+  - Openhub:\n+      - username: palash25\n+      - link: https://www.openhub.net/accounts/palash25\n+email: npalash25@gmail.com\n+blog: https://medium.com/gsoc-with-coala/\n+activity:\n+  - 1:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/7272ff6b9463a5cff33c431f73a416e5a999f4ac\n+      - details: >\n+         cEP-0026.md: Adds optimize caching cEP.\n+  - 2:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/a228c2b39ef17b3c6d3572853601dfa05b938173\n+      - details: >\n+         Updated the details of Optimize Caching project.\n+  - 3:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/759f74f88206c58ac80dd7acd12cadbae13f28cb\n+      - details: >\n+         optimize_caching.md: Changed primary mentor from adtac to Makman2.\n+  - 4:\n+      - repo: devops\n+      - link: https://github.com/coala/devops/commit/e309383bc5aacb007c4986bd74197238a4fcc96d\n+      - details: >\n+         planet.ini: Add palash25 gsoc blog feed.\n+  - 5:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/b06dfe44fa99ffeb997f6f0a4bf302938fb9734c\n+      - details: >\n+         Added `FileFactory` class. Objects of this class are used\n+         to represent files and replace file contents in the file dict.\n+  - 6:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/77c1dca15dc82d1753aa0962017899392d0033ec\n+      - details: >\n+         Added `Directory` class. This class will act as an interface\n+         to directories providing useful information about them. The\n+         objects of this class can be used by bears that operate only\n+         on directories and perform analysis based on the things like\n+         directory structure.\n+  - 7:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/fc568a01ba489376b4d6efac12ea772cb3cb1573\n+      - details: >\n+         Added `memoized_property`. `memoized_property` is a decorator\n+         that caches the properties of `FileFactory` class.\n+  - 8:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/81bbca42f82319aed22ba7f90781d886d559d4dd\n+      - details: >\n+         NextGen_Core.rst: Update caching section. \n+  - 9:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/87d3dffd1a52c42ac60da0199ee34bd95827b8ff\n+      - details: >\n+         IO.rst: Add FileFactory docs.\n+  - 10:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/7bc5d7f7b84e91da9f6aa2f77d40f92e66c850d5\n+      - details: >\n+         NextGen_Core.rst: Add link to IO docs.\n+  - 11:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/54622c2b03e1b84bb122130af182424d706d3de4\n+      - details: >\n+         `FileFactory`: Use `cached_property` instead of `memoized_property`.\n+  - 12:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/415361f5a4c12cd65dd4cc171d2a8ebbba3bc92c\n+      - details: >\n+         A new attribute `newline` was added to `FileFactory` to force\n+         newlines on the file content.\n+  - 13:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/fbe8452360eb39340ace4334c2df133a1ee6de97\n+      - details: >\n+         Processing: Add middleware `FileDict` that provides the bears\n+         with the actual file contents instead of the `FileFactory` objects.\n+  - 14:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/e138e4875fc6d1474a93758881f550e05df8e329\n+      - details: >\n+         Processing: Modify tests to use actual files instead of hard coded\n+         tuples as file content.\n+  - 15:", "created_at": "2018-08-13T08:31:10Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY0MzQxNw==", "fields": {"body": "alright added some more", "diff": "@@ -0,0 +1,269 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+report_year: 2018\n+date: 2018-08-12\n+student: Saksham Bansal\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Improve installation of coala and coala-bears\n+project_link: https://summerofcode.withgoogle.com/projects/#4642118669172736\n+tarball: https://rawgit.com/anctartica/GSoC-Report/master/work.tar.gz\n+sha256sum: f413963583c7e18a5ccb42f21405290edcf79a0f8c61106ff21671efe0b98238\n+mentors: >\n+  [Muhammad Kaisar Arkhan](https://github.com/yukiisbored),\n+  [Matt Bodenhamer](https://github.com/mbodenhamer),\n+  [Andrey Safonov](https://github.com/xferra)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/10\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/11\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/12\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/13\n+bio: >\n+ I'm a sophomore year student studying Computer Science at Netaji Subhash\n+ Institute of Technology, Dehli. I am always looking for opportunities to\n+ put my programming skill to good use by contributing to open source which also\n+ allows me to improve my own skill.\n+social:\n+  - GitHub:\n+      - username: anctartica\n+      - link: https://github.com/anctartica\n+  - GitLab:\n+      - username: anctartica\n+      - link: https://gitlab.com/anctartica\n+  - Gitter:\n+      - username: anctartica\n+      - link: https://gitter.im/anctartica\n+  - OpenHub:\n+      - username: anctartica\n+      - link: https://www.openhub.net/accounts/anctartica\n+email: sakshamb.co.17@nsit.net.in\n+blog: https://medium.com/@sakshamb.co.17\n+activity:\n+  - 1:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/ca27c58eef778fd7b3aff3b874b0e58f56e4a559\n+      - details: >\n+          Create a proposal regarding the project.\n+  - 2:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/b9f35115b42b105c550cf53c44a01f1257680697\n+      - details: >\n+          Add appveyor CI.\n+  - 3:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/1e2d7170f4f9eb232c48f4d372d957b3c423d05c\n+      - details: >\n+         Use dependency management master\n+  - 4:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/5e8cffc70834ab7263316a7e1648c037b52e2206\n+      - details: >\n+         Fix docopt usage pattern.\n+  - 5:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/aa5e957018331db0d09099963bad1c2b86d147c5\n+      - details: >\n+         Fix incorrect behaviour\n+  - 6:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/437a8e527d2b64d471d3022996ddf24ab754cb5a\n+      - details: >\n+         Clean up code required for 100% coverage\n+  - 7:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/551516fcd5aac2bf46615d6a7827a7a9e8e7505a\n+      - details: >\n+         Add unittests for 100% coverage\n+  - 8:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/df1ffac4e49eead45e56e8649d1378f62330a2a4\n+      - details: >\n+         Mobanise setup.cfg\n+  - 9:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/139490a906645afb704aa083dfbc26727c2a412f\n+      - details: >\n+         Allow showing multiple bears\n+  - 10:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/3f0557bfe4fca5e9bf99ae0226b091f19f5589ab\n+      - details: >\n+         Remove test_pyversion\n+  - 11:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/943e54125c7d354098ee11370251b0eec4ac81ef\n+      - details: >\n+         Add variable for cache dir on appveyor\n+  - 12:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/a7b8f2ff0f3e68bd56afa98a12d88054d6080ab2\n+      - details: >\n+         Add option for Python 3.6 jobs on all repos\n+  - 13:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/dd81996f93b3a48efe18b907fc2190f40ee11bdd\n+      - details: >\n+         Add template for init file for exporting version\n+  - 14:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/8eaac28f36ed8c48ef2462268b764c7d0f484346\n+      - details: >\n+         Remove brackets around string with one item in setup.py template\n+  - 15:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/c3bfe9a235613fd5701cd55f3e2fc5ea4f9f761c\n+      - details: >\n+         Run coala static code analysis from Appveyor\n+  - 16:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/b10ecd5acdfd1c6fc0cb64a696ca8b40ecc8abc2\n+      - details: >\n+         Pin setuptool to 21 for supporting environment markers\n+  - 17:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/7aeb5b7c197cf3d2f5d7a6ed947bed8a1fcf7078\n+      - details: >\n+         Use coala-bears master for coala analysis on Appveyor\n+  - 18:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/431d06caaf60eb45d36688244ed110f90f6a58ec\n+      - details: >\n+         Create coveragerc template to resolve a bug with coverage on cib\n+  - 19:\n+      - repo: coala-utils\n+      - link: https://gitlab.com/coala/coala-utils/commit/43c81871476e14ce0d777129bff8cdfc557be342\n+      - details: >\n+         Remove error handling on import for complete test coverage on Appveyor build\n+  - 20:\n+      - repo: coala-utils\n+      - link: https://gitlab.com/coala/coala-utils/commit/18c91bb2824e6bcb09de14af3ae38ec279b8d9e3\n+      - details: >\n+         use __all__ for exports to prevent failing coala --ci check\n+  - 21:\n+      - repo: coala-utils\n+      - link: https://gitlab.com/coala/coala-utils/commit/25cc5a3178586a1d51d0385eca12a176914a0b8c\n+      - details: >\n+         Use appveyor template for coala-utils\n+  - 22:\n+      - repo: coala-bears\n+      - link: https://github.com/coala/coala-bears/commit/c35a2ed04935fd7665514e6af7828f1bfd931a03\n+      - details: >\n+         Improve and cleanup script for generating bear requirements and generate cabal requirements\n+  - 23:\n+      - repo: coala-bears\n+      - link: https://github.com/coala/coala-bears/commit/26b696969dd38ca1a1ab91163e0154f6c905e252\n+      - details: >\n+         Move the generate_package script from the coala-bears package to .ci directory\n+  - 24:\n+      - repo: coala-bears\n+      - link: https://github.com/coala/coala-bears/commit/efdfbc1cec98db76a5bb2c75fbfa414686be4db8\n+      - details: >\n+         Use CabalRequirement for HaskellLintBear\n+  - 25:\n+      - repo: coala-bears\n+      - link: https://github.com/coala/coala-bears/commit/e62d16f8315e4dcd10c9c57af3ab3e5973b10d73\n+      - details: >\n+         Add language setting for ESLintBear using various plugins for eslint\n+  - 26:\n+      - repo: coala-bears\n+      - link: https://gitlab.com/coala/package_manager/commit/a786450e5cdfd3172caf86c60786c0d1ce6ee10f\n+      - details: >\n+         Add GherkinLintBear\n+  - 27:\n+      - repo: coala-bears\n+      - link: https://gitlab.com/coala/package_manager/commit/868afe0dcdf6ab0c964f1ce72152fedb132f44cb\n+      - details: >\n+         Add BashateBear\n+  - 28:\n+      - repo: dependency_management\n+      - link: https://gitlab.com/coala/package_manager/commit/75b3c37f7ffd7b6c9f693d131bf4f627fd95373d\n+      - details: >\n+         Add PlatformRequirement class for system specific package managers\n+  - 29:\n+      - repo: dependency_management\n+      - link: https://gitlab.com/coala/package_manager/commit/a786450e5cdfd3172caf86c60786c0d1ce6ee10f\n+      - details: >\n+         Return exitcode after running the install command\n+  - 30:\n+      - repo: dependency_management\n+      - link: https://gitlab.com/coala/package_manager/commit/868afe0dcdf6ab0c964f1ce72152fedb132f44cb\n+      - details: >\n+         Add CabalRequirement for backwards compatibility\n+  - 31:\n+      - repo: dependency_management\n+      - link: https://gitlab.com/coala/package_manager/commit/995b50ba1861296d333442be9e16ba2b1c4a47b6\n+      - details: >\n+         Run pip as python module\n+  - 32:\n+      - repo: bear-install-playbook\n+      - link: https://gitlab.com/coala/bear-install-playbook/commit/7ba1c3ef9c29dc58a1c5b0109328317f3b0924df\n+      - details: >\n+         Add playbook for installing individual bears\n+  - 33:\n+      - repo: bear-install-playbook\n+      - link: https://gitlab.com/coala/bear-install-playbook/commit/1b288844aa157ff4e8c80a3179c5d58163a2719f\n+      - details: >\n+         Test playbook using docker + Travic CI\n+  - 34:\n+      - repo: bear-install-playbook\n+      - link: https://gitlab.com/coala/bear-install-playbook/commit/7dee7591927c0883269f5741102b90bfb93f84ff\n+      - details: >\n+         Add instructions on using playbook\n+  - 35:", "created_at": "2018-08-13T15:01:45Z", "last_edited_at": null, "author": "saksham189", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY0NDM5NA==", "fields": {"body": "This was due to BSD tar (on mac) vs. GNU tar.\nShould be fixed now", "diff": "@@ -0,0 +1,269 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+report_year: 2018\n+date: 2018-08-12\n+student: Saksham Bansal\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Improve installation of coala and coala-bears\n+project_link: https://summerofcode.withgoogle.com/projects/#4642118669172736\n+tarball: https://rawgit.com/anctartica/GSoC-Report/master/work.tar.gz", "created_at": "2018-08-13T15:04:24Z", "last_edited_at": null, "author": "saksham189", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTYwMDk0MA==", "fields": {"body": "can stay in your patches, but doesnt belong in the activity report", "diff": "@@ -0,0 +1,444 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Kilari Teja\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: coala language server\n+project_link: https://summerofcode.withgoogle.com/projects/#4971369184362496\n+tarball: https://github.com/ksdme/GSoCReport/raw/master/ksdme_coala.tar.gz\n+sha256sum: 71985d45fbf7648029ac14541b7012d5ff51bcc0e9b2ebf7032a3f69f3ce5b1a\n+mentors: >\n+  [Ce Gao](https://github.com/gaocegege) &\n+  [Nicholas Gates](https://github.com/gatesn) &\n+  [Nalin Bhardwaj](https://github.com/nalinbhardwaj)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/47\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/48\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/49\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/50\n+bio: >\n+  I am Kilari Teja, a final year student of Computer Science Engineering at\n+  Guru Gobind Singh Indraprastha University, located in Delhi, India. I have\n+  been a GSoC'18 student for [coala](http://coala.io) working on bringing\n+  coala to code editors via language server protocol. My projects makes it\n+  possible for linting and fixing code to be performed right from the code\n+  editor using coala.\n+social:\n+  - GitHub:\n+      - username: ksdme\n+      - link: https://github.com/ksdme\n+  - GitLab:\n+      - username: ksdme\n+      - link: https://gitlab.com/ksdme\n+  - Gitter:\n+      - username: ksdme\n+      - link: https://gitter.im/ksdme\n+  - OpenHub:\n+      - username: ksdme\n+      - link: https://www.openhub.net/accounts/ksdme\n+email: ksdme9@gmail.com\n+blog: http://medium.com/ksdme-coala-and-gsoc\n+activity:\n+\n+  - 1:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/10d706aa14325147caacd053e20c4fb77af56376\n+      - details: >\n+         coala_language_server.md: Update project details\n+\n+  - 2:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/07a63ec9661b1d32f7fc7002bf14f74cfc77447e\n+      - details: >\n+         cEP-0028: Optimizing coala for language server\n+\n+  - 3:\n+      - repo: solar/shortlinks\n+      - link: https://gitlab.com/coala/solar/shortlinks/commit/bb881df7bb17ce997de0c37d2ac31b9ee749d745\n+      - details: >\n+         cEP-0028: Fix wiki link template\n+\n+  - 4:\n+      - repo: solar/shortlinks\n+      - link: https://gitlab.com/coala/solar/shortlinks/commit/ebfd0492fc9b424db9af1b635453ea3701b9f097\n+      - details: >\n+         Fix misconfigured endpoints\n+  - 5:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/pull/32/commits/bd12657c67b257ed4b0f498c14cab389f96cc91a\n+      - details: >\n+         [Bonding Period Work] langserver.py: Update to use jsonrpc\n+\n+  - 6:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/305a441742f109166bcae241e10b101ad5d908c9\n+      - details: >\n+         coala_langserver: Drop codebase and tests\n+\n+  - 7:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/b1f5ae490fbafe06a14dcb34fa5578e2fbb118a7\n+      - details: >\n+         .vscode-client: Drop vscode client\n+\n+  - 8:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/6bbad87389004b872affdd6e13e7b079e81b2108\n+      - details: >\n+         tests: Add test helpers and resources\n+\n+  - 9:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/5d4c230cd1a819572d423a5ba90a537d0ca1b91c\n+      - details: >\n+         coalals.utils.log: Add log configuration\n+\n+  - 10:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/3e7defd3b78e2b5a93fedc856cf871bd0f691d52\n+      - details: >\n+         coalals.interface: Add initial coala wrapper\n+\n+  - 11:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/f10159391befe2f184c453183932e5e3747a2c34\n+      - details: >\n+         coalals.results: Add result processing module\n+\n+  - 12:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/9e8473120d2ea998e6b4b1e2e6812e2ff6a56505\n+      - details: >\n+         coalals.langserver: Add language server module\n+\n+  - 13:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/1a5f1c0b71afc1ff0f8455ddc43d89bff20f8436\n+      - details: >\n+         coalals.main: Add main.py\n+\n+  - 14:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/5c5f87f50fe4d61a1fd921a7d03801b669c0ea03\n+      - details: >\n+         test-requirements.txt: Update test requirements\n+\n+  - 15:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8c64f2af8176f1590be6b7d227d0d62bf28912fd\n+      - details: >\n+         requirements.txt: Update requirements\n+\n+  - 16:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/d56adf2e2c7ef5d2a17ecd47748b35d27291f51c\n+      - details: >\n+         Update test configuration\n+\n+  - 17:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/c60a565ef8392bbda571049e29109bdfd231de26\n+      - details: >\n+         coala-ls.sh: Add coala-ls.sh\n+\n+  - 18:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/cee8c2c7c047999d639b03802e0e3c0f029e169e\n+      - details: >\n+         README: Update README.md and assets\n+\n+  - 19:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/ef8dc592c80d629d90c0596bb1a2be3df75c7b40\n+      - details: >\n+         .coafile: Update config and globs\n+\n+  - 20:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8d7f8d05e506b252179c92335f98cb365102a405\n+      - details: >\n+         perf-metrics.md: Add performance metrics\n+\n+  - 21:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/32fe61caa96d8a039cb532bb46eb1ed8e10cbfb4\n+      - details: >\n+         coalals.results: Refactor to submodule\n+\n+  - 22:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/e9745d34b9705787bad41df12a1801eee4cfab7e\n+      - details: >\n+         requirements.txt: coalals.utils.files: Add get_disk_contents()\n+\n+  - 23:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/88d79837106185382d3feadc8c9330f219ea271e\n+      - details: >\n+         requirements.txt: Add whatthepatch\n+\n+  - 24:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/e9745d34b9705787bad41df12a1801eee4cfab7e\n+      - details: >\n+         coalals.results.fixes: Add fixes parsing & lsp models\n+\n+  - 25:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 26:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8e75ead740fac57b461bb12497db4147f78d4d19\n+      - details: >\n+         coalals.langserver: Add support for textDocument/formatting\n+\n+  - 27:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/99c0663b0177bba30a4b8025615530d15e4d441b\n+      - details: >\n+         coalals.langserver: Add support for showMessageRequest\n+\n+  - 28:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 29:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 30:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/6e095ca6c18813878766e9767d99a4bec10ec4a8\n+      - details: >\n+         perf-metrics.md: Update perf-metrics for Phase-2\n+\n+  - 31:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/6648e76bd6374ee826fdbf0a2aafa800d6c101bb\n+      - details: >\n+         Fix single line docstring\n+\n+  - 32:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/de0098b2c7c1b5593fd39fdcdeb98fa24c755a2e\n+      - details: >\n+         .codecov.yml: Increase test coverage target\n+\n+  - 33:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/bd12657c67b257ed4b0f498c14cab389f96cc91a\n+      - details: >\n+         Update to jsonrpc lib\n+\n+  - 34:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/a0b59d36c33ae537b33ffd01d0f1a383ce1cdd57\n+      - details: >\n+         README.md: Update README.md\n+\n+  - 35:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/2618f470e509a129e05f29ebf6cd9a7f300e9867", "created_at": "2018-08-13T13:07:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTYwMTA1MQ==", "fields": {"body": "can stay in your patches, but doesnt belong in the activity report", "diff": "@@ -0,0 +1,444 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Kilari Teja\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: coala language server\n+project_link: https://summerofcode.withgoogle.com/projects/#4971369184362496\n+tarball: https://github.com/ksdme/GSoCReport/raw/master/ksdme_coala.tar.gz\n+sha256sum: 71985d45fbf7648029ac14541b7012d5ff51bcc0e9b2ebf7032a3f69f3ce5b1a\n+mentors: >\n+  [Ce Gao](https://github.com/gaocegege) &\n+  [Nicholas Gates](https://github.com/gatesn) &\n+  [Nalin Bhardwaj](https://github.com/nalinbhardwaj)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/47\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/48\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/49\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/50\n+bio: >\n+  I am Kilari Teja, a final year student of Computer Science Engineering at\n+  Guru Gobind Singh Indraprastha University, located in Delhi, India. I have\n+  been a GSoC'18 student for [coala](http://coala.io) working on bringing\n+  coala to code editors via language server protocol. My projects makes it\n+  possible for linting and fixing code to be performed right from the code\n+  editor using coala.\n+social:\n+  - GitHub:\n+      - username: ksdme\n+      - link: https://github.com/ksdme\n+  - GitLab:\n+      - username: ksdme\n+      - link: https://gitlab.com/ksdme\n+  - Gitter:\n+      - username: ksdme\n+      - link: https://gitter.im/ksdme\n+  - OpenHub:\n+      - username: ksdme\n+      - link: https://www.openhub.net/accounts/ksdme\n+email: ksdme9@gmail.com\n+blog: http://medium.com/ksdme-coala-and-gsoc\n+activity:\n+\n+  - 1:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/10d706aa14325147caacd053e20c4fb77af56376\n+      - details: >\n+         coala_language_server.md: Update project details\n+\n+  - 2:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/07a63ec9661b1d32f7fc7002bf14f74cfc77447e\n+      - details: >\n+         cEP-0028: Optimizing coala for language server\n+\n+  - 3:\n+      - repo: solar/shortlinks\n+      - link: https://gitlab.com/coala/solar/shortlinks/commit/bb881df7bb17ce997de0c37d2ac31b9ee749d745\n+      - details: >\n+         cEP-0028: Fix wiki link template\n+\n+  - 4:\n+      - repo: solar/shortlinks\n+      - link: https://gitlab.com/coala/solar/shortlinks/commit/ebfd0492fc9b424db9af1b635453ea3701b9f097\n+      - details: >\n+         Fix misconfigured endpoints\n+  - 5:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/pull/32/commits/bd12657c67b257ed4b0f498c14cab389f96cc91a\n+      - details: >\n+         [Bonding Period Work] langserver.py: Update to use jsonrpc\n+\n+  - 6:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/305a441742f109166bcae241e10b101ad5d908c9\n+      - details: >\n+         coala_langserver: Drop codebase and tests\n+\n+  - 7:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/b1f5ae490fbafe06a14dcb34fa5578e2fbb118a7\n+      - details: >\n+         .vscode-client: Drop vscode client\n+\n+  - 8:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/6bbad87389004b872affdd6e13e7b079e81b2108\n+      - details: >\n+         tests: Add test helpers and resources\n+\n+  - 9:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/5d4c230cd1a819572d423a5ba90a537d0ca1b91c\n+      - details: >\n+         coalals.utils.log: Add log configuration\n+\n+  - 10:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/3e7defd3b78e2b5a93fedc856cf871bd0f691d52\n+      - details: >\n+         coalals.interface: Add initial coala wrapper\n+\n+  - 11:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/f10159391befe2f184c453183932e5e3747a2c34\n+      - details: >\n+         coalals.results: Add result processing module\n+\n+  - 12:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/9e8473120d2ea998e6b4b1e2e6812e2ff6a56505\n+      - details: >\n+         coalals.langserver: Add language server module\n+\n+  - 13:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/1a5f1c0b71afc1ff0f8455ddc43d89bff20f8436\n+      - details: >\n+         coalals.main: Add main.py\n+\n+  - 14:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/5c5f87f50fe4d61a1fd921a7d03801b669c0ea03\n+      - details: >\n+         test-requirements.txt: Update test requirements\n+\n+  - 15:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8c64f2af8176f1590be6b7d227d0d62bf28912fd\n+      - details: >\n+         requirements.txt: Update requirements\n+\n+  - 16:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/d56adf2e2c7ef5d2a17ecd47748b35d27291f51c\n+      - details: >\n+         Update test configuration\n+\n+  - 17:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/c60a565ef8392bbda571049e29109bdfd231de26\n+      - details: >\n+         coala-ls.sh: Add coala-ls.sh\n+\n+  - 18:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/cee8c2c7c047999d639b03802e0e3c0f029e169e\n+      - details: >\n+         README: Update README.md and assets\n+\n+  - 19:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/ef8dc592c80d629d90c0596bb1a2be3df75c7b40\n+      - details: >\n+         .coafile: Update config and globs\n+\n+  - 20:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8d7f8d05e506b252179c92335f98cb365102a405\n+      - details: >\n+         perf-metrics.md: Add performance metrics\n+\n+  - 21:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/32fe61caa96d8a039cb532bb46eb1ed8e10cbfb4\n+      - details: >\n+         coalals.results: Refactor to submodule\n+\n+  - 22:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/e9745d34b9705787bad41df12a1801eee4cfab7e\n+      - details: >\n+         requirements.txt: coalals.utils.files: Add get_disk_contents()\n+\n+  - 23:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/88d79837106185382d3feadc8c9330f219ea271e\n+      - details: >\n+         requirements.txt: Add whatthepatch\n+\n+  - 24:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/e9745d34b9705787bad41df12a1801eee4cfab7e\n+      - details: >\n+         coalals.results.fixes: Add fixes parsing & lsp models\n+\n+  - 25:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 26:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8e75ead740fac57b461bb12497db4147f78d4d19\n+      - details: >\n+         coalals.langserver: Add support for textDocument/formatting\n+\n+  - 27:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/99c0663b0177bba30a4b8025615530d15e4d441b\n+      - details: >\n+         coalals.langserver: Add support for showMessageRequest\n+\n+  - 28:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 29:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 30:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/6e095ca6c18813878766e9767d99a4bec10ec4a8\n+      - details: >\n+         perf-metrics.md: Update perf-metrics for Phase-2\n+\n+  - 31:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/6648e76bd6374ee826fdbf0a2aafa800d6c101bb\n+      - details: >\n+         Fix single line docstring\n+\n+  - 32:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/de0098b2c7c1b5593fd39fdcdeb98fa24c755a2e\n+      - details: >\n+         .codecov.yml: Increase test coverage target\n+\n+  - 33:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/bd12657c67b257ed4b0f498c14cab389f96cc91a\n+      - details: >\n+         Update to jsonrpc lib\n+\n+  - 34:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/a0b59d36c33ae537b33ffd01d0f1a383ce1cdd57\n+      - details: >\n+         README.md: Update README.md\n+\n+  - 35:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/2618f470e509a129e05f29ebf6cd9a7f300e9867\n+      - details: >\n+         Clean Repository\n+\n+  - 36:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/9a9ace96b7bb498d6521f1e2b8944290ed3d331f", "created_at": "2018-08-13T13:07:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTg4OTk3MA==", "fields": {"body": "Ah I see , they are squashing into one commit.\nOk, then this checks out.  Thanks", "diff": "@@ -266,61 +267,66 @@ activity:\n       - details: \"Add --ignore-names flag (#139).\"\n \n   - 46:\n+      - repo: vulture\n+      - link: https://github.com/jendrikseipp/vulture/commit/3c965e2\n+      - details: \"Add Item.get_whitelist_string. (#144)\"", "created_at": "2018-08-14T09:42:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTk4NzA5OA==", "fields": {"body": "Green Mode", "diff": "@@ -0,0 +1,162 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-14\n+student: Ishan Srivastava\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Quickstart Green Mode\n+project_link: https://summerofcode.withgoogle.com/projects/#5792652830703616\n+tarball: https://cdn.rawgit.com/ishanSrt/ishanSrt.github.io/d859b05e/ishanSrt.tar.gz\n+sha256sum: 4dcee0f017d832965ca44a76d0a8b20f92d68fd2fb820975984a51b4ff34806a\n+mentors: >\n+  [Satwik Kansal](https://github.com/satwikkansal) &\n+  [Adhityaa Chandrasekar](https://github.com/adtac) &\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/46\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/56\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/70\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/72\n+bio: >\n+  I am a third year student (expected graduation date: May 2020) of Computer\n+  Science and Engineering at Indian Institute of Technology Dharwad. I\n+  participated in GSoC and worked with [coala](http://coala.io) to implement\n+  the coala-quickstart Green Mode for the repository\n+  [coala-quickstart](https://github.com/coala/coala-quickstart) to generate\n+  project dependent configuration files for the coala project, which make\n+  coala show no inconsistencies in the code base and are helpful in detecting\n+  inconsistencies in future commits. I also solved and contributed small\n+  patches to other coala repositories during the time period of GSoC.\n+social:\n+  - GitHub:\n+      - username: ishanSrt\n+      - link: https://github.com/ishanSrt\n+  - GitLab:\n+      - username: ishanSrt\n+      - link: https://gitlab.com/ishanSrt\n+  - Gitter:\n+      - username: ishanSrt\n+      - link: https://gitter.im/ishanSrt\n+  - OpenHub:\n+      - username: ishanSrt\n+      - link: https://www.openhub.net/accounts/ishanSrt\n+email: ishan.srt@gmail.com\n+blog: https://www.dowhatucant.com/gsoc_archive.html\n+activity:\n+\n+  - 1:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/e5724fa9b0be71304277e508c2f317318aeed1c4\n+      - details: >\n+         [Bonding Period Work] quickstart_green_mode.md: Add Quickstart Green Mode Project\n+\n+  - 2:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/ea3f0ac7e8d98cdf1afa5d6e99345a760f83dc39\n+      - details: >\n+         [Bonding Period Work] .gitignore: Add .DS_Store\n+\n+  - 3:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/0daa94289919d5dff171ce771b24f057c64f33d5\n+      - details: >\n+         README.md: Add green mode cEP\n+\n+  - 4:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/e58b935be77459b9323a80ef9b47267d445d8c5c\n+      - details: >\n+         cEP-0022.md: Add cEP for quickstart green mode\n+\n+  - 5:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/f423227b4868376496f2280ee5e69aeb2db66724\n+      - details: >\n+         CODEOWNERS: Add a list of developers\n+\n+  - 6:\n+      - repo: coala-quickstart\n+      - link: https://github.com/coala/coala-quickstart/commit/a725f019c898a3422c856e1deae9cca906594883\n+      - details: >\n+         green_mode.py: Run BEAR_DEPS bears while testing\n+\n+  - 7:\n+      - repo: coala-quickstart\n+      - link: https://github.com/coala/coala-quickstart/commit/9e91285ac87cd36ee846743f1c9d891c324f8c18\n+      - details: >\n+         bear_settings.yaml: Fix wrong bear for settings\n+\n+  - 8:\n+      - repo: coala-quickstart\n+      - link: Project.py: Fix bug while printing languages\n+      - details: >\n+         Project.py: Fix bug while printing languages\n+\n+  - 9:\n+      - repo: coala-quickstart\n+      - link: https://github.com/coala/coala-quickstart/commit/8bbd4dab13853e61a1cd1a2634d0c6da72b09716\n+      - details: >\n+         green_mode_core.py: Fix a bug\n+\n+  - 10:\n+      - repo: coala-quickstart\n+      - link: https://github.com/coala/coala-quickstart/commit/94e9eda139234e8b9183ce5462bd7c9a9d97e197\n+      - details: >\n+         Aggregate green mode per file results\n+\n+\n+---\n+\n+### Meta-review", "created_at": "2018-08-14T15:02:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA3MDEwMA==", "fields": {"body": "Yup it works. Thanks :)", "diff": "@@ -776,6 +776,11 @@ a.chip i {\n   cursor: pointer;\n }\n \n+.coala-online .add-bear {", "created_at": "2018-08-18T09:25:13Z", "last_edited_at": null, "author": "Akhelesh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjA3NjY1MA==", "fields": {"body": "An h1 heading on top saying something as 'coala GSoC reports' would be nice", "diff": "@@ -0,0 +1,25 @@\n+---\n+title: Project reports\n+---\n+", "created_at": "2018-08-22T19:19:15Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjUyOTEzNw==", "fields": {"body": "Yes.", "diff": "@@ -43,7 +42,6 @@ requirements:\n   - \"The participant should have at least one patch to\n      [GitMate](https://gitlab.com/gitmate/open-source/gitmate-2) accepted.\"\n   - \"The participant should demonstrate that he can operate Jira from the Python shell in his proposal.\"\n-status: in_progress", "created_at": "2018-08-24T06:08:01Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUxNjU2Mw==", "fields": {"body": "To make python 3.6 section more intuitive and readable, can we consider merging disable_global in this section too and then overriding install?", "diff": "@@ -38,12 +42,15 @@ jobs:\n     # OSX build removed due to long build startup delays\n     # Restore matrix job entry from d2d67fab to test OSX\n     - python: 2.7\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.3\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.4.3\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.6", "created_at": "2018-09-01T15:33:44Z", "last_edited_at": "2018-09-01T15:36:43Z", "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUzNTE5OQ==", "fields": {"body": "Feel free to create a newcomer issue about the bears one; explain it fairly clearly, so domain knowledge isnt needed - only expect yaml skills to complete the task.", "diff": "@@ -38,12 +42,15 @@ jobs:\n     # OSX build removed due to long build startup delays\n     # Restore matrix job entry from d2d67fab to test OSX\n     - python: 2.7\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.3\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.4.3\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.6", "created_at": "2018-09-02T10:06:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTI2MTM2Ng==", "fields": {"body": "This is a linter bear so you should read http://api.coala.io/en/latest/Developers/Writing_Linter_Bears.html and http://api.coala.io/en/latest/Developers/Linter_Bears_Advanced.html. If you cannot find everything you need, read the source code ;)", "diff": "@@ -7,15 +7,14 @@\n \n @linter(executable='csscomb',\n         output_format='corrected',\n-        use_stdin=True,", "created_at": "2018-09-05T13:08:44Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTkzMjgwMQ==", "fields": {"body": "Blank space not needed.", "diff": "@@ -0,0 +1,11 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+", "created_at": "2018-09-07T11:45:51Z", "last_edited_at": null, "author": "shikharvaish28", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkwMzMxMA==", "fields": {"body": "increase the minimum version.\nnice work on reporting the bug upstream.", "diff": "@@ -0,0 +1,30 @@\n+import os\n+\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.PipRequirement import PipRequirement\n+\n+\n+@linter(executable='pyre',\n+        output_format='regex',\n+        output_regex=r'\\s*(?P<filename>.+)\\s*:(?P<line>\\d+):(?P<column>\\d+)'\n+                     r' \\s*(?P<message>.+)',\n+        global_bear=True)\n+class PyreBear:\n+    \"\"\"\n+    Checks Python files for errors using ``pyre``.\n+    Run bear with `` --files=./<MY_DIR>/*``.\n+\n+    See https://pyre-check.org/ for more info.\n+    \"\"\"\n+    LANGUAGES = {'Python', 'Python 3'}\n+    REQUIREMENTS = {PipRequirement('pyre', '0.0.11')}", "created_at": "2018-09-16T06:07:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkxNzYxNA==", "fields": {"body": "First you say make the tuple of this. When I make tuple then you say previous one is right .", "diff": "@@ -0,0 +1,16 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class Haskell:\n+    extensions = ('.hs')", "created_at": "2018-09-16T15:10:28Z", "last_edited_at": null, "author": "rishabhgarg25699", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkzOTUyMQ==", "fields": {"body": "On line 35 (https://github.com/coala/community/pull/190/files#diff-0bee1776ac8d509157f197b459b8b9afR35) you are calling update_participants_data_with_meta_review(participant) but here it is called participants. So should the argument be one participant or many participants?", "diff": "@@ -135,6 +136,29 @@ def get_participant_objects():\n     return participants\n \n \n+def update_participants_data_with_meta_review(participants):", "created_at": "2018-09-17T02:27:38Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODU5NDMwMQ==", "fields": {"body": "I think maybe you're getting confused b/w meta-review Participants and gamification Participants, meta-review system works for all members at coala and gamification system works for only active newcomers at coala.\nparticipants from get_participant_objects() are coming from gamification models, so they do not have fields like pos_in and neg_out etc..so you can't do1 as @li-boxuan mentioned there.\nand where is meta_review_completed field? if you want to do something like participant.meta_review_completed with participant object you need a field of that name to the Participant model. I think you don't need to do something like that, when you find that a participant has completed meta-review, just add the meta-review completed activity for that participant by using add_activity method.\nMaybe rebase this commit on top of #152 so that this pr passes CI and we can see you changes running.\n\nI'm testing these changes on another branch so that while pushing the changes, my PR doesn't gets bad with Travis test failing messages", "diff": "@@ -135,6 +136,29 @@ def get_participant_objects():\n     return participants\n \n \n+def update_participants_data_with_meta_review(participants):", "created_at": "2018-09-18T21:03:48Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODUwNTYwMQ==", "fields": {"body": "One idea is that this method would take list of all the participants objects from the\nmeta-review partcipant model...and then iterate through each of the participant object from the list while filtering out only those participant whose usernames are in active_newcomer_list(as gamifiction system only work for those participant) and then if that participant have completed meta-review then get the object of that participant from the gamification participant model and add the meta-review activity for that participant.", "diff": "@@ -135,6 +136,29 @@ def get_participant_objects():\n     return participants\n \n \n+def update_participants_data_with_meta_review(participants):", "created_at": "2018-09-18T16:34:01Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODk0MTI1NQ==", "fields": {"body": "I think these are all in alphabetical order. So Haskell should come above HTML.", "diff": "@@ -42,6 +42,7 @@\n     'Fortran',\n     'Golang',\n     'Hypertext Markup Language 2.0, 3.2, 4.0, 4.1, 5, 5.1',\n+    'Haskell 1.0, 1.1, 1.2, 1.3, 1.4',", "created_at": "2018-09-19T19:51:38Z", "last_edited_at": null, "author": "Man-Jain", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTczMTk1MA==", "fields": {"body": "In this route, if the user hit the /dashboard path in URL then he will be directed to /.  so in this function, we are not changing any state of the component. so it was used but its value is not used.", "diff": "@@ -27,7 +27,7 @@ import {parseRoute, buildRoute} from './route-utils';\n const routes = [\n   // Redirect from `/dashboard` to `/`\n   { path: '/dashboard',\n-    onEnter: (state, replace) => browserHistory.push('/')", "created_at": "2018-09-24T05:30:21Z", "last_edited_at": null, "author": "aditya81070", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQxODM3NQ==", "fields": {"body": "I think yes because line no. 120 in this program has also the same concept . It has also the gap of one line .", "diff": "@@ -84,13 +85,17 @@ def run(self, filename, file,\n         will not change functionality of the code in any way.\n \n         :param max_line_length:   Maximum number of characters for a line.\n+                                  When set to 0 allows infinite line length.\n         :param indent_size:       Number of spaces per indent level.\n         :param pep_ignore:        A list of errors/warnings to ignore.\n         :param pep_select:        A list of errors/warnings to exclusively\n                                   apply.\n         :param local_pep8_config: Set to true if autopep8 should use a config\n                                   file as if run normally from this directory.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize\n+", "created_at": "2018-09-29T06:43:50Z", "last_edited_at": null, "author": "rishabhgarg25699", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTgxODQ4Mw==", "fields": {"body": "@rishabhgarg25699 That's for you to figure it out :) There won't be much fun left for you if I do tell.\nA little suggestion, which I follow myself. Why not try out your approach in your local computer first, in this way you would not have to wait for someone to look at your approach and tell you if it's right or wrong. This will also help you to eliminate your approaches and arrive at a right solution. And moreover it will also help you to ask the right questions :)", "diff": "@@ -84,13 +85,17 @@ def run(self, filename, file,\n         will not change functionality of the code in any way.\n \n         :param max_line_length:   Maximum number of characters for a line.\n+                                  When set to 0 allows infinite line length.\n         :param indent_size:       Number of spaces per indent level.\n         :param pep_ignore:        A list of errors/warnings to ignore.\n         :param pep_select:        A list of errors/warnings to exclusively\n                                   apply.\n         :param local_pep8_config: Set to true if autopep8 should use a config\n                                   file as if run normally from this directory.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize\n+", "created_at": "2018-10-02T03:41:52Z", "last_edited_at": null, "author": "Naveenaidu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE0NzQ1OA==", "fields": {"body": "Centering the links in small screen does not look good.", "diff": "@@ -152,3 +152,7 @@ img {\n .highlight .nn, .highlight .nc {\n     text-decoration: none;\n }\n+\n+.shorturl {\n+    overflow-x: auto;\n+}", "created_at": "2018-10-05T21:50:21Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE0ODA3Nw==", "fields": {"body": "Not completely sure myself, that's why I just question it ;)", "diff": "@@ -1,6 +1,12 @@\n Welcome to the Newcomers' Guide!\n ================================\n \n+.. container:: shorturl\n+\n+    +-----------+---------------------------+-----------------------------+\n+    | Short-URL | https://coala.io/newcomer | https://coala.io/newcomers  |\n+    +-----------+---------------------------+-----------------------------+", "created_at": "2018-10-05T21:53:46Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE3MjY4Mw==", "fields": {"body": "Actually here: #5788 (comment) makman suggested to change to  Redirect from.", "diff": "@@ -1,6 +1,12 @@\n Welcome to the Newcomers' Guide!\n ================================\n \n+.. container:: shorturl\n+\n+    +-----------------+-------------------------------------------------------+\n+    | Redirects from  | https://coala.io/newcomer  https://coala.io/newcomers |", "created_at": "2018-10-06T05:45:13Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE4MDkzMg==", "fields": {"body": "As per my knowledge the issue is to add infinite line length so use execution_count\": 2, using this cell 2 which is this version will be able to reference the variables at cell 1.\nAlthough i am unaware of what actually you did at :\n \"source\": [\n    \"x = 'int\\nmain ()\\n' +\n         '{\\n' +\n         ' ' * 1000 + 'return 0;\\n' +\n         '}'\"\n   ]\n\nOther reviewers will tell you, most probably maintainers.", "diff": "@@ -22,6 +22,20 @@\n    \"source\": [\n     \"a markdown cell is not a code cell\"\n    ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 1,", "created_at": "2018-10-06T12:18:11Z", "last_edited_at": null, "author": "Dhiraj240", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzIwNTY2NQ==", "fields": {"body": "I am so sorry, if you need my help in any issue I would love to assist you.", "diff": "@@ -461,13 +461,16 @@ def execute(self, *args, debug=False, **kwargs):\n                          .format(name), str(exc))\n \n             if self.kind() == BEAR_KIND.LOCAL:\n-                self.err('Bear {} failed to run on file {}. Take a look '\n-                         'at debug messages (`-V`) for further '\n-                         'information.'.format(name, args[0]))\n+                if self.section['log_level'].value == 'DEBUG':\n+                    pass\n+                else:\n+                    self.err('Bear {} failed to run on file {}. Take a look '\n+                        'at debug messages (`-V`) for further '", "created_at": "2018-10-07T08:46:58Z", "last_edited_at": null, "author": "sladyn98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDcyNDUyMw==", "fields": {"body": "this example uses closes.  why mention 'related to' or 'fixes' here?  It is confusing, and distracting.\nThe same applies to your other changes.\nRadically re-think how you approach solving this problem.", "diff": "@@ -24,7 +24,7 @@ Example of a good commit:\n    in maximum of 72 characters per line.\n \n - `Closes https://github.com/coala/coala/issues/5861`: Mention the URL\n-   of the issue it closes or fixes.\n+   of the issue it is related to or closes or fixes.", "created_at": "2018-10-12T09:26:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDczMDYzMA==", "fields": {"body": "What should be my console message, the earlier one ?", "diff": "@@ -271,9 +271,7 @@ class GraphQLClient {\n         data.repository.pullRequest.comments.nodes);\n     } else {\n       this.warningCount++;\n-      console.log('warning: no available reaction data!',\n-        'owner:', owner, 'name:', name, 'pull request number:', number,\n-        'error:', errors);\n+      console.log('error:', errors);", "created_at": "2018-10-12T09:46:10Z", "last_edited_at": null, "author": "hritikhks", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5Mjc1NQ==", "fields": {"body": "It wont be effective until there is a bear activated on **.js which uses preferred_quotation.\nI think we've decided to use ' for our 'own' JS code anyway.\nIf we have \" in JS instead of ', then we could turn that into GCI tasks.", "diff": "@@ -31,13 +31,13 @@ max_line_length = 120\n [all.links]\n bears = InvalidLinkBear\n \n-[html]\n+[all.html]\n bears = HTMLLintBear\n files = **.html\n htmllint_ignore = optional_tag, concerns_separation\n ignore = public/**\n \n-[javascript]\n+[all.javascript]", "created_at": "2018-10-14T13:24:42Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NDkxNA==", "fields": {"body": "Why not do?\nfrom community.git import (\n    get_config_remote,\n    get_deploy_url,\n    get_org_name,\n    ...\n)", "diff": "@@ -0,0 +1,28 @@\n+import unittest\n+\n+from community.git import get_config_remote\n+from community.git import get_deploy_url\n+from community.git import get_org_name\n+from community.git import get_remote_url", "created_at": "2018-10-14T14:32:31Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NTQyMA==", "fields": {"body": "typo in workflow and accommodate.", "diff": "@@ -207,6 +209,20 @@ The easy issues that will help you get started are labeled as\n ``difficulty/newcomer`` and are only there to give you a glimpse of what\n it's like to work with us and what the workflow is like.\n \n+The coala organisation tries to have ``newcomer`` issues always available\n+for people who are joining the organisation.  These newcomer issues are\n+intentionally very easy.  The only objective is to give you, the newcomer,\n+an opportunity to participate, and learn how to contribute according to\n+the coala organisation development guidelines.\n+\n+coala does **not** follow the GitHub \"flow\" workflow, so be sure to read\n+our guides carefully.  If you do not follow the coala workflow, our team\n+will try to nudge you in the right direction.  If nudging isnt effective,\n+your contributions will be rejected.  coala will not lower its standards,\n+or changes its worflow, to accomodate you.  If you can not complete", "created_at": "2018-10-14T14:47:21Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NTU2NA==", "fields": {"body": "Redundant space after the full stop (and other places in this commit)", "diff": "@@ -207,6 +209,20 @@ The easy issues that will help you get started are labeled as\n ``difficulty/newcomer`` and are only there to give you a glimpse of what\n it's like to work with us and what the workflow is like.\n \n+The coala organisation tries to have ``newcomer`` issues always available\n+for people who are joining the organisation.  These newcomer issues are", "created_at": "2018-10-14T14:51:51Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NTgwOA==", "fields": {"body": "our team sounds a bit ambiguous here. People might think coala has a dedicated full-time team. our community is better IMO.", "diff": "@@ -207,6 +209,20 @@ The easy issues that will help you get started are labeled as\n ``difficulty/newcomer`` and are only there to give you a glimpse of what\n it's like to work with us and what the workflow is like.\n \n+The coala organisation tries to have ``newcomer`` issues always available\n+for people who are joining the organisation.  These newcomer issues are\n+intentionally very easy.  The only objective is to give you, the newcomer,\n+an opportunity to participate, and learn how to contribute according to\n+the coala organisation development guidelines.\n+\n+coala does **not** follow the GitHub \"flow\" workflow, so be sure to read\n+our guides carefully.  If you do not follow the coala workflow, our team", "created_at": "2018-10-14T14:58:56Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAwMDIwNA==", "fields": {"body": "Also imo the last 3-4 lines are aggressive. We can instead do Our community will help you in every way possible to get your PR meged. But if you still can't comply to our standards or you leave it for long then we'll assign it to someone else.", "diff": "@@ -207,6 +209,20 @@ The easy issues that will help you get started are labeled as\n ``difficulty/newcomer`` and are only there to give you a glimpse of what\n it's like to work with us and what the workflow is like.\n \n+The coala organisation tries to have ``newcomer`` issues always available\n+for people who are joining the organisation.  These newcomer issues are\n+intentionally very easy.  The only objective is to give you, the newcomer,\n+an opportunity to participate, and learn how to contribute according to\n+the coala organisation development guidelines.\n+\n+coala does **not** follow the GitHub \"flow\" workflow, so be sure to read\n+our guides carefully.  If you do not follow the coala workflow, our team\n+will try to nudge you in the right direction.  If nudging isnt effective,", "created_at": "2018-10-14T16:58:44Z", "last_edited_at": null, "author": "Man-Jain", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAwMjAxNw==", "fields": {"body": "Instead of rejected we can say will not be accepted Same meaning but different way", "diff": "@@ -207,6 +209,20 @@ The easy issues that will help you get started are labeled as\n ``difficulty/newcomer`` and are only there to give you a glimpse of what\n it's like to work with us and what the workflow is like.\n \n+The coala organisation tries to have ``newcomer`` issues always available\n+for people who are joining the organisation.  These newcomer issues are\n+intentionally very easy.  The only objective is to give you, the newcomer,\n+an opportunity to participate, and learn how to contribute according to\n+the coala organisation development guidelines.\n+\n+coala does **not** follow the GitHub \"flow\" workflow, so be sure to read\n+our guides carefully.  If you do not follow the coala workflow, our team\n+will try to nudge you in the right direction.  If nudging isnt effective,\n+your contributions will be rejected.  coala will not lower its standards,", "created_at": "2018-10-14T17:49:11Z", "last_edited_at": null, "author": "Man-Jain", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAwMjU5Mg==", "fields": {"body": "Maybe, \"We will be having no option other than rejecting your contributions\".", "diff": "@@ -207,6 +209,20 @@ The easy issues that will help you get started are labeled as\n ``difficulty/newcomer`` and are only there to give you a glimpse of what\n it's like to work with us and what the workflow is like.\n \n+The coala organisation tries to have ``newcomer`` issues always available\n+for people who are joining the organisation.  These newcomer issues are\n+intentionally very easy.  The only objective is to give you, the newcomer,\n+an opportunity to participate, and learn how to contribute according to\n+the coala organisation development guidelines.\n+\n+coala does **not** follow the GitHub \"flow\" workflow, so be sure to read\n+our guides carefully.  If you do not follow the coala workflow, our team\n+will try to nudge you in the right direction.  If nudging isnt effective,\n+your contributions will be rejected.  coala will not lower its standards,", "created_at": "2018-10-14T18:07:27Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc4NDIxNg==", "fields": {"body": "IMO errors is not an appropriate word to describe coding style issues. People might not conform to coala's coding style, which needs to be corrected, but that is not an error.", "diff": "@@ -383,6 +383,28 @@ and clicking ``New Pull Request``.\n \n **Congratulations!** You have now created your first ``Pull Request``!\n \n+Now, before having other contributors review your work, the system will do an\n+automated code review and will comment the mistakes (coding style errors,", "created_at": "2018-10-17T05:25:46Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTgxOTU4NQ==", "fields": {"body": "Sorry, only the long list of languages should be re-ordered.\nEach of the languages is a Language instance.\nTherefore loading Language should occur before trying to load an instance of Language.", "diff": "@@ -17,26 +13,31 @@\n from .definitions.html import HTML\n from .definitions.Java import Java\n from .definitions.JavaScript import JavaScript\n+from .definitions.Jinja2 import Jinja2\n from .definitions.JSON import JSON\n from .definitions.JSP import JSP\n from .definitions.KornShell import KornShell\n from .definitions.m4 import m4\n-from .definitions.Matlab import Matlab\n from .definitions.Markdown import Markdown\n+from .definitions.Matlab import Matlab\n from .definitions.ObjectiveC import ObjectiveC\n from .definitions.PHP import PHP\n from .definitions.PLSQL import PLSQL\n from .definitions.PowerShell import PowerShell\n from .definitions.Python import Python\n from .definitions.Ruby import Ruby\n from .definitions.Scala import Scala\n+from .definitions.Shell import Shell\n from .definitions.Swift import Swift\n from .definitions.Tcl import Tcl\n-from .definitions.Vala import Vala\n from .definitions.TypeScript import TypeScript\n-from .definitions.Shell import Shell\n-from .definitions.Jinja2 import Jinja2\n+from .definitions.Unknown import Unknown\n+from .definitions.Vala import Vala\n from .definitions.VisualBasic import VisualBasic\n from .definitions.XML import XML\n+\n+from .Language import Language", "created_at": "2018-10-17T08:08:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk2MTg3OQ==", "fields": {"body": "This implies that people who don't follow the coala workflow are reluctant to learn ...\n\nCorrect. ;-)\nWe have too many drive by PRs, especially from people who attended \"code sprints\" or other similar workshops, who don't approach their first PR with the right mentality, and lack the self-motivation to complete it.\nI hope this new blurb can shock/challenge the reader a bit, without scaring off too many.\nBy informing the reader in advance that a PR will not be auto-merged, it hopefully makes them more ready to see a PR as a process which might take some time, and we dont want them to start it unless they are ready to finish it.\nWe definitely dont want PRs from people who are not interested in learning about 'git' , etc.\nGetting your first patch merged into a repository almost always requires learning, even if the change is very basic.\nWe should be up-front about this, not try to hide behind an overly welcoming sign on the front door, and then kick them around once they have come in the door.  The sign on the front door should say \"You will get kicked around if you don't want to learn.\"  Nicely.", "diff": "@@ -207,6 +209,20 @@ The easy issues that will help you get started are labeled as\n ``difficulty/newcomer`` and are only there to give you a glimpse of what\n it's like to work with us and what the workflow is like.\n \n+The coala organisation tries to have ``newcomer`` issues always available\n+for people who are joining the organisation.  These newcomer issues are\n+intentionally very easy.  The only objective is to give you, the newcomer,\n+an opportunity to participate, and learn how to contribute according to\n+the coala organisation development guidelines.\n+\n+coala does **not** follow the GitHub \"flow\" workflow, so be sure to read\n+our guides carefully.  If you do not follow the coala workflow, our team\n+will try to nudge you in the right direction.  If nudging isnt effective,\n+your contributions will be rejected.  coala will not lower its standards,\n+or changes its worflow, to accomodate you.  If you can not complete\n+your issue according to our standards, it will be re-assigned to the\n+next newcomer who is ready and willing to learn.", "created_at": "2018-10-17T14:46:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjg2NTE3NQ==", "fields": {"body": "maybe can use default=self.DEFAULT_KEYWORDS", "diff": "@@ -0,0 +1,86 @@\n+import argparse\n+from os import environ\n+\n+from django.core.management.base import BaseCommand\n+from termcolor import colored\n+\n+from gci.linter_repos import (\n+  fetch_issues,\n+  get_github,\n+  get_repo_host,\n+  get_repo_name,\n+)\n+\n+\n+class Command(BaseCommand):\n+    help = 'Fetch issues from linter repositories and filter'\n+\n+    DEFAULT_LABELS = [\n+        'easy',\n+        'easy fix',\n+        'first issue',\n+        'good first issue',\n+        'newcomer',\n+        'help wanted',\n+        'beginner',\n+        'up-for-grabs',\n+        'beginner-friendly',\n+        'low-hanging fruit',\n+        'hacktoberfest'\n+    ]\n+\n+    DEFAULT_KEYWORDS = [\n+        'easy fix',\n+        'documentation',\n+        'README',\n+        'pep8',\n+        'simple'\n+    ]\n+\n+    def add_arguments(self, parser):\n+        parser.add_argument('--labels', '-l', nargs='*')\n+        parser.add_argument('--keywords', '-k', nargs='*')", "created_at": "2018-10-21T14:36:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjg2NzMyNw==", "fields": {"body": "I think it will be good to add here that making a new PR for the same issue isn't recommended, or closing a PR to make a new one due to troubles with conflicts or bot complaints.  Instead we should nudge them to seek help from the manual or the community if they are having troubles to reach a resolution.", "diff": "@@ -207,10 +209,34 @@ The easy issues that will help you get started are labeled as\n ``difficulty/newcomer`` and are only there to give you a glimpse of what\n it's like to work with us and what the workflow is like.\n \n+The coala community creates a constant supply of ``newcomer`` issues available\n+for people like you who are joining the organisation, so that you can learn\n+how to contribute according to the coala organisation development guides,\n+while doing a real task at the same time.\n+\n+coala does **not** follow the GitHub \"flow\" workflow, so be sure to read\n+our guides carefully. You will need to use the ``git`` command line.\n+During the newcomer process, we will help you conquer ``git``, so that you\n+can become a part of our super efficient developer team.\n+\n+If you do not follow the coala workflow, our bots will get grumpy, and\n+members of our community will try to help you in every way possible to\n+get your Pull Request merged, the coala way.\n+\n+Your Pull Request will **not** be accepted until it complies with coala\n+standards, even if your solution is amazingly correct.  If you ignore the\n+bots or our developers, or you close your Pull Request, we will have\n+no option except to conclude that you have abandoned the coala newcomer\n+process, and your amazing solution **will** be discarded.  Luckily, all", "created_at": "2018-10-21T15:40:29Z", "last_edited_at": null, "author": "blossomica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgxOTIwNg==", "fields": {"body": "Leave this as it was earlier. I tried\nimport sys\n\n# Start ignoring PyImportSortBear and PycodestyleBear*, we need to assert the\n# version before importing things that could cause an ImportError\nfrom coalib import assert_supported_version\nfrom coalib.coala import main\n\nassert_supported_version()\n\n# Stop ignoring\nlocally. PycodestyleBear is good for my changes. Also, the test got passed in my local repo.", "diff": "@@ -13,16 +13,13 @@\n # You should have received a copy of the GNU Affero General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n-import sys\n-\n # Start ignoring PyImportSortBear and PycodestyleBear*, we need to assert the\n # version before importing things that could cause an ImportError\n from coalib import assert_supported_version\n+from coalib.coala import main\n+import sys", "created_at": "2018-10-20T07:23:49Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgyMTc0MA==", "fields": {"body": "Changes made", "diff": "@@ -1,16 +1,17 @@\n+# Start ignoring PEP8Bear*, PycodestyleBear* as those imports may raise\n+# import warnings\n import os\n import sys\n import json\n \n-# Start ignoring PycodestyleBear* as those imports may raise\n-# import warnings\n sys.path.append(os.path.join(os.path.dirname(__file__),\n                              '..', '..', '..', '..'))\n \n from coalib.results.Result import Result\n from coalib.results.SourceRange import SourceRange\n from coalib.output.JSONEncoder import create_json_encoder\n from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+", "created_at": "2018-10-20T09:28:06Z", "last_edited_at": null, "author": "bkhanale", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgyNzAxNw==", "fields": {"body": "what about defaulting to reading the subdirectories of the current directory, checking each has a .git .\nthat is how most people would arrange all of the coala repos they have contributed to.\nand/or, use multiple --input-dir", "diff": "@@ -0,0 +1,109 @@\n+import argparse\n+import subprocess\n+\n+\n+def patch_collector(dir_path, authors, output):\n+    print(f'\\n**Inside {dir_path}**\\n')\n+    end = ''\n+    begin = ''\n+    patch_count = 1\n+    range_count = 1\n+\n+    author_list = ''\n+    for author in authors:\n+        author_list += f'--author={author} '\n+\n+    get_hashes_cmd = (f'git -C {dir_path} log --pretty=format:\"%h\" '\n+                      f'{author_list}')\n+    hashes = subprocess.check_output(get_hashes_cmd, shell=True)\n+    hashes = hashes.decode(encoding='utf-8')\n+    hashes = hashes.split('\\n')\n+\n+    for hash in hashes:\n+\n+        ancestor_hash_cmd = (f'git -C {dir_path} log --pretty=format:\"%h\" '\n+                             f'{author_list}{hash}^^..{hash}^ --exit-code'\n+                             ' 1>/dev/null')\n+\n+        if subprocess.Popen(ancestor_hash_cmd, shell=True).wait():\n+            if end == \"\":\n+                end = hash\n+            begin = hash\n+            range_count = range_count + 1\n+\n+        else:\n+            subdir_msg = ('\\nPlease enter a subdirectory name for this patch'\n+                          '(leave this empty\\nto leave this patch out, use ./ '\n+                          'for the root directory):')\n+            print('\\n')\n+\n+            if end == \"\":\n+                temp = patch_count-1\n+                print(f'Adding one patch to {temp} existing:')\n+                subprocess.Popen(\n+                    f'git -C {dir_path} log {hash}^..{hash}', shell=True) \\\n+                    .wait()\n+                print(subdir_msg)\n+                subdir = input()\n+\n+                if subdir != '':\n+                    subprocess.Popen(\n+                        f'mkdir -p {output}/{subdir}', shell=True).wait()\n+                    subprocess.Popen(\n+                        f'git -C {dir_path} format-patch {hash}^..{hash} -o '\n+                        f'{output}/{subdir}', shell=True).wait()\n+                    patch_count = patch_count + 1\n+\n+                else:\n+                    print('Omitting patch...')\n+\n+            else:\n+                temp = patch_count-1\n+                print(f'Adding {range_count} patches to {temp} existing')\n+                subprocess.Popen(\n+                    f'git -C {dir_path} log {begin}^^..{end} --oneline',\n+                    shell=True).wait()\n+                print(subdir_msg)\n+                subdir = input()\n+\n+                if subdir != '':\n+                    print(f'mkdir -p {output}/{subdir}')\n+                    subprocess.Popen(\n+                        f'mkdir -p {output}/{subdir}', shell=True).wait()\n+                    subprocess.Popen(\n+                        f'git -C {dir_path} format-patch {begin}^^..{end} '\n+                        f'-o{output}/{subdir}', shell=True).wait()\n+                    patch_count = patch_count + range_count\n+\n+                else:\n+                    print('Omitting patch series...')\n+\n+                end = \"\"\n+                range_count = 1\n+\n+\n+def main():\n+    help_message = \"\"\"This is a simple helper script that allows collecting all\n+        patches from one author in a git repository. It will detect consequent\n+        ranges of patches and ask for each range for a subdirectory so you can\n+        distinguish the patch series.\"\"\"\n+\n+    parser = argparse.ArgumentParser(description=help_message)\n+    parser.add_argument('author_names',\n+                        help=\"Name of contributors separated by ','\")\n+    parser.add_argument('output_root_dir', help='Output directory path')\n+    parser.add_argument('input_dir_paths',", "created_at": "2018-10-20T13:24:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODAxODEyOA==", "fields": {"body": "comment_delimiters are a tuple.", "diff": "@@ -0,0 +1,18 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class TinyBasic:\n+    aliases = 'tb',\n+    extensions = '.tb',\n+    comment_delimiters = 'REM'", "created_at": "2018-10-25T02:35:20Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODAxODMyOA==", "fields": {"body": "Please add a trailing comma", "diff": "@@ -0,0 +1,18 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class TinyBasic:\n+    aliases = 'tb',\n+    extensions = '.tb',\n+    comment_delimiters = 'REM'\n+    string_delimiters = {'\"': '\"'}\n+    encapsulators = {'(': ')'}\n+    keywords = [\n+        'PRINT', 'IF', 'THEN',\n+        'GOTO', 'INPUT', 'LET',\n+        'GOSUB', 'RETURN', 'CLEAR',\n+        'LIST', 'RUN', 'END',\n+        'PR', 'RND', 'USR'", "created_at": "2018-10-25T02:37:15Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODAyMjQ5OQ==", "fields": {"body": "I saw in this one\nhttp://p112.sourceforge.net/tbp112.html\nIt also says that single quotes and double quotes both can be used for character strings. See to this one too.", "diff": "@@ -0,0 +1,18 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class TinyBasic:\n+    aliases = 'tb',\n+    extensions = '.tb',\n+    comment_delimiters = 'REM',", "created_at": "2018-10-25T03:10:08Z", "last_edited_at": "2018-10-25T03:10:34Z", "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc0NzU5NA==", "fields": {"body": "It's not a very typical example IMO. There are cases when JSON object won't be valid for JavaScript, but usually, a JSON object is also a valid JavaScript object.\nMaybe add a bit explanation here, why is it useful to have coala to handle JSON inside JavaScript?\nref: https://stackoverflow.com/questions/23752156/are-all-json-objects-also-valid-javascript-objects", "diff": "@@ -24,16 +24,29 @@ tags:\n   - Core\n   - Bears\n ---\n-Multiple programming languages can coexist in a single source file. coala would\n+Generally, a single source file contains code for exactly one programming language.\n+But multiple programming languages can also coexist in a single source file. coala would\n benefit from the ability to determine the programming language of each part of\n a file. If we have e.g. a PHP file, it is likely that we'd have chunks of html\n inside a few of them. We would like coala to be able to still run meaningful\n analysis on those files.\n Other examples include:\n \n-* awk inside bash\n-* JSON inside Javascript\n-* HTML, LaTeX or others inside Jinja2\n+* JSON inside Javascript.", "created_at": "2018-10-28T12:59:34Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc0NzY2NA==", "fields": {"body": "java -> Java", "diff": "@@ -24,16 +24,29 @@ tags:\n   - Core\n   - Bears\n ---\n-Multiple programming languages can coexist in a single source file. coala would\n+Generally, a single source file contains code for exactly one programming language.\n+But multiple programming languages can also coexist in a single source file. coala would\n benefit from the ability to determine the programming language of each part of\n a file. If we have e.g. a PHP file, it is likely that we'd have chunks of html\n inside a few of them. We would like coala to be able to still run meaningful\n analysis on those files.\n Other examples include:\n \n-* awk inside bash\n-* JSON inside Javascript\n-* HTML, LaTeX or others inside Jinja2\n+* JSON inside Javascript.\n+* Web templating - languages such as PHP or JSP files mix code into HTML.\n+* Cython, it is a superset of the Python language that additionally supports\n+  calling C functions and declaring C types on variables and class attributes.\n+* We can call Python code from java using Jython, which is a Python implementation in Java.", "created_at": "2018-10-28T13:01:09Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc0NzYwMA==", "fields": {"body": "e.g. = for example\nWhat's For e.g.?", "diff": "@@ -24,16 +24,29 @@ tags:\n   - Core\n   - Bears\n ---\n-Multiple programming languages can coexist in a single source file. coala would\n+Generally, a single source file contains code for exactly one programming language.\n+But multiple programming languages can also coexist in a single source file. coala would\n benefit from the ability to determine the programming language of each part of\n a file. If we have e.g. a PHP file, it is likely that we'd have chunks of html\n inside a few of them. We would like coala to be able to still run meaningful\n analysis on those files.\n Other examples include:\n \n-* awk inside bash\n-* JSON inside Javascript\n-* HTML, LaTeX or others inside Jinja2\n+* JSON inside Javascript.\n+* Web templating - languages such as PHP or JSP files mix code into HTML.\n+* Cython, it is a superset of the Python language that additionally supports\n+  calling C functions and declaring C types on variables and class attributes.\n+* We can call Python code from java using Jython, which is a Python implementation in Java.\n+* reStructuredText and markdown language specify different language for codeblock.\n+\n+  For e.g. for documents that have to show snippets in different languages,", "created_at": "2018-10-28T12:59:39Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc5NjkwMw==", "fields": {"body": "our other graphql file uses two space indent.\nif you think four is better, also create an issue to re-indent the existing file, and we'll make it a newcomer task", "diff": "@@ -0,0 +1,6 @@\n+query ($user: String!) {\n+    user(login: $user) {", "created_at": "2018-10-29T04:23:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc5NzQ5NA==", "fields": {"body": "keep this, and keep GH_API_BASE, as I am sure we will want to access some features are not available via Graphql, and we dont want people to need to re-invent this, and possibly pick a new token variable name, etc.\nAdd a note that GH_API_OPTIONS is unused.", "diff": "@@ -53,12 +54,6 @@ const CHAT_IMAGES = {\n   OTHER: 'images/chat.png',\n }\n \n-const GH_API_OPTIONS = {\n-  headers: process.env.GITHUB_TOKEN\n-    ? { Authorization: `token ${process.env.GITHUB_TOKEN}` }", "created_at": "2018-10-29T04:27:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODcxMTMzMA==", "fields": {"body": "You need to do what I requested above - create a new section , because this 'process' is the high level steps , not about behaviour within those steps.", "diff": "@@ -83,10 +83,13 @@ The review process for coala is as follows:\n     .. note::\n \n         Only one acknowledgment is needed per commit i.e ``ack commit_SHA``.\n-\n-4. If the commits are not linearly mergeable into master, rebase and go\n+4. After the PR has been reviewed, don't comment on a review unless", "created_at": "2018-10-27T12:20:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODk0NTg5MQ==", "fields": {"body": "If anyone sees this, he will only see the code itself. No markdown stuff, so showing markdown syntax would be good here.", "diff": "@@ -24,16 +24,29 @@ tags:\n   - Core\n   - Bears\n ---\n-Multiple programming languages can coexist in a single source file. coala would\n+Generally, a single source file contains code for exactly one programming language.\n+But multiple programming languages can also coexist in a single source file. coala would\n benefit from the ability to determine the programming language of each part of\n-a file. If we have e.g. a PHP file, it is likely that we'd have chunks of html\n+a file. If we have example a PHP file, it is likely that we'd have chunks of html\n inside a few of them. We would like coala to be able to still run meaningful\n analysis on those files.\n Other examples include:\n \n-* awk inside bash\n-* JSON inside Javascript\n-* HTML, LaTeX or others inside Jinja2\n+* JSON inside Javascript is valid in some cases, for example JSONFormatBear for coala.\n+* Web templating - languages such as PHP or JSP files mix code into HTML.\n+* Cython, it is a superset of the Python language that additionally supports\n+  calling C functions and declaring C types on variables and class attributes.\n+* We can call Python code from Java using Jython, which is a Python implementation in Java.\n+* reStructuredText and Markdown language specify different language for codeblock.\n+\n+  For example for documents that have to show snippets in different languages,\n+  there\u2019s also a code-block directive that is given the highlighting language directly:\n+\n+```", "created_at": "2018-10-29T14:24:03Z", "last_edited_at": null, "author": "abhishalya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODk3OTgxNA==", "fields": {"body": "check your indentation of the rendered version", "diff": "@@ -24,16 +24,62 @@ tags:\n   - Core\n   - Bears\n ---\n-Multiple programming languages can coexist in a single source file. coala would\n+Generally, a single source file contains code for exactly one programming language.\n+But multiple programming languages can also coexist in a single source file. coala would\n benefit from the ability to determine the programming language of each part of\n a file. If we have e.g. a PHP file, it is likely that we'd have chunks of html\n inside a few of them. We would like coala to be able to still run meaningful\n analysis on those files.\n Other examples include:\n \n-* awk inside bash\n-* JSON inside Javascript\n-* HTML, LaTeX or others inside Jinja2\n+* JSON inside Javascript is valid in some cases, for example JSONFormatBear for coala.\n+* Web templating - languages such as PHP or JSP files mix code into HTML.\n+* Cython, it is a superset of the Python language that additionally supports\n+  calling C functions and declaring C types on variables and class attributes.\n+* We can call Python code from Java using Jython, which is a Python implementation in Java.\n+* reStructuredText and Markdown language specify different language for codeblock.\n+\n+  For example\n+\n+````\n+```python\n+s = \"Python syntax highlighting\"\n+print s\n+```\n+````\n+OUTPUT", "created_at": "2018-10-29T15:38:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODkzNTc3Ng==", "fields": {"body": "The previous version was good.", "diff": "@@ -24,16 +24,50 @@ tags:\n   - Core\n   - Bears\n ---\n-Multiple programming languages can coexist in a single source file. coala would\n+Generally, a single source file contains code for exactly one programming language.\n+But multiple programming languages can also coexist in a single source file. coala would\n benefit from the ability to determine the programming language of each part of\n-a file. If we have e.g. a PHP file, it is likely that we'd have chunks of html\n+a file. If we have example a PHP file, it is likely that we'd have chunks of html", "created_at": "2018-10-29T13:59:36Z", "last_edited_at": null, "author": "bkhanale", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTMxMjE4NA==", "fields": {"body": "A little typo: Python interpreter is correct.", "diff": "@@ -24,16 +24,101 @@ tags:\n   - Core\n   - Bears\n ---\n-Multiple programming languages can coexist in a single source file. coala would\n+Generally, a single source file contains code for exactly one programming language.\n+But multiple programming languages can also coexist in a single source file. coala would\n benefit from the ability to determine the programming language of each part of\n a file. If we have e.g. a PHP file, it is likely that we'd have chunks of html\n inside a few of them. We would like coala to be able to still run meaningful\n analysis on those files.\n Other examples include:\n \n-* awk inside bash\n-* JSON inside Javascript\n-* HTML, LaTeX or others inside Jinja2\n+* Python inside PHP\n+\n+Here written a Python extension for PHP. In short, this extensions allows\n+the Python interpretter to be embedded inside of PHP (think of PHP as the", "created_at": "2018-10-30T13:48:45Z", "last_edited_at": null, "author": "seeeturtle", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTU2NDM2Nw==", "fields": {"body": "Can you rearrange the import a bit? Put django import into the second group and gci import to the third group.\nStandard library imports\n\nThird-party imports\n\nApplication-specific imports", "diff": "@@ -0,0 +1,31 @@\n+import os.path\n+\n+from ruamel.yaml import YAML\n+from gci.gitorg import get_issue\n+\n+from django.core.management.base import BaseCommand", "created_at": "2018-10-31T05:00:10Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTk1MzQ4NA==", "fields": {"body": "could you re-arrange the logging so that earliestDate is always put into the log, i.e. add a log entry after this block of code -- before const ignoreAuthor...\nThen there is always a record of what data set should be found in the deploy.\nHere in this log entry, the output is quite strange.   For this deploy, which doesnt have EARLIEST_DATE or EARLIEST_DATE_PR set, it is:\n\nTo speed up netlify pr build, set earliest date threshold 2018-08-01T05:19:50+00:00\n\nThat log entry sounds like we should set the earliest date threshold to that date, yet .. that is the automatic date now, so it would be useless to set it at that date.\nWe would need to set it at a more recent date , if we wanted less data to be processed.\nSo the log message here needs rewriting now to complement the revised logic.\nIt is more useful to log the value of EARLIEST_DATE and EARLIEST_DATE_PR , and the final selected earliest date.  Then it is a fairly simple logical deduction that setting EARLIEST_DATE and EARLIEST_DATE_PR may be useful to override the automatically computed default.", "diff": "@@ -14,7 +14,7 @@ let earliestDate = process.env.EARLIEST_DATE || '2017-01-01T00:00:00Z';\n \n if (isDeployPreview) {\n   const earliestDateForPr = process.env.EARLIEST_DATE_PR ||\n-    '2018-04-01T00:00:00Z';\n+    moment().subtract(3, 'months').format('YYYY-MM-DDThh:mm:ssZ');\n   if (getTime(earliestDate) < getTime(earliestDateForPr)) {\n     earliestDate = earliestDateForPr;\n     console.log('To speed up netlify pr build, set earliest date threshold',", "created_at": "2018-11-01T06:55:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDEwOTU2MQ==", "fields": {"body": "file_factory_test_dir --> file_test_dir?", "diff": "@@ -12,19 +15,17 @@ def get_path_components(filepath):\n     return os.path.normpath(filepath).split(os.sep)\n \n \n-class FileFactoryTest(unittest.TestCase):\n+class FileTest(unittest.TestCase):\n \n     def setUp(self):\n-        file_factory_test_dir = os.path.join(os.path.split(__file__)[0],\n-                                             'FileFactoryTestFiles')\n-\n+        file_factory_test_dir = TEST_FILE_DIR", "created_at": "2018-11-01T16:37:54Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDEwOTY5Mw==", "fields": {"body": "other_file_factory --> other_file?", "diff": "@@ -12,19 +15,17 @@ def get_path_components(filepath):\n     return os.path.normpath(filepath).split(os.sep)\n \n \n-class FileFactoryTest(unittest.TestCase):\n+class FileTest(unittest.TestCase):\n \n     def setUp(self):\n-        file_factory_test_dir = os.path.join(os.path.split(__file__)[0],\n-                                             'FileFactoryTestFiles')\n-\n+        file_factory_test_dir = TEST_FILE_DIR\n         self.test_file = os.path.join(file_factory_test_dir, 'test1.txt')\n         self.other_test_file = os.path.join(file_factory_test_dir, 'test2.txt')\n-        self.uut = FileFactory(self.test_file)\n-        self.other_file_factory = FileFactory(self.other_test_file)\n+        self.uut = File(self.test_file)\n+        self.other_file_factory = File(self.other_test_file)", "created_at": "2018-11-01T16:38:19Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDI3NjE5Nw==", "fields": {"body": "The intention is to reduce the amount of change occurring in the tests, so that any functional changes are more obvious.  Any change to tests is a possible breakage.\nThe focus is on our docs and code which people read all the time.\nThe name of a variable in a test can be done as a newcomer issue later.", "diff": "@@ -12,19 +15,17 @@ def get_path_components(filepath):\n     return os.path.normpath(filepath).split(os.sep)\n \n \n-class FileFactoryTest(unittest.TestCase):\n+class FileTest(unittest.TestCase):\n \n     def setUp(self):\n-        file_factory_test_dir = os.path.join(os.path.split(__file__)[0],\n-                                             'FileFactoryTestFiles')\n-\n+        file_factory_test_dir = TEST_FILE_DIR\n         self.test_file = os.path.join(file_factory_test_dir, 'test1.txt')\n         self.other_test_file = os.path.join(file_factory_test_dir, 'test2.txt')\n-        self.uut = FileFactory(self.test_file)\n-        self.other_file_factory = FileFactory(self.other_test_file)\n+        self.uut = File(self.test_file)\n+        self.other_file_factory = File(self.other_test_file)", "created_at": "2018-11-02T05:57:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDI4ODU2MA==", "fields": {"body": "Should be array", "diff": "@@ -1,9 +1,20 @@\n from django.shortcuts import render\n \n from openhub.models import PortfolioProject\n+from openhub.oh_token import OH_TOKEN\n \n \n def index(request):\n-    projects = PortfolioProject.objects.all()\n-    args = {'projects': projects}\n+    error = ''\n+    projects = ''", "created_at": "2018-11-02T07:30:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDYyMzI1OQ==", "fields": {"body": "Change this.\nhint: I already said once on #176 (comment)", "diff": "@@ -207,11 +208,11 @@ Just specify a GitHub repository in the URL and off you go!\n - [ ] add GitHub search\n \n \n-[gh-board-image]: https://img.shields.io/github/issues/philschatz/gh-board.svg?label=Issues%20%28gh-board%29\n+[gh-board-image]: https://img.shields.io/github/issues/coala/gh-board.svg?label=Issues%20%28gh-board%29\n [gh-board-url]: http://philschatz.com/gh-board/", "created_at": "2018-11-05T02:51:38Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDc1MDEwMg==", "fields": {"body": "This needs to be our repo's url, https://github.com/coala/gh-board/issues", "diff": "@@ -207,11 +208,11 @@ Just specify a GitHub repository in the URL and off you go!\n - [ ] add GitHub search\n \n \n-[gh-board-image]: https://img.shields.io/github/issues/philschatz/gh-board.svg?label=Issues%20%28gh-board%29\n-[gh-board-url]: http://philschatz.com/gh-board/\n-[travis-image]: https://img.shields.io/travis/philschatz/gh-board.svg\n-[travis-url]: https://travis-ci.org/philschatz/gh-board\n-[dependency-image]: https://img.shields.io/david/philschatz/gh-board.svg\n-[dependency-url]: https://david-dm.org/philschatz/gh-board\n-[dev-dependency-image]: https://img.shields.io/david/dev/philschatz/gh-board.svg\n-[dev-dependency-url]: https://david-dm.org/philschatz/gh-board?type=dev\n+[issues-image]: https://img.shields.io/github/issues/coala/gh-board.svg?label=Issues%20%28gh-board%29\n+[issues-url]: http://philschatz.com/gh-board/", "created_at": "2018-11-05T13:34:51Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDc2MTExOQ==", "fields": {"body": "wow ... this aint right .. :P\nI believe you are on Windows, and this is a bug in the moban program.\nTalk to the moban mentors / developers, so they can create a bug report.\nThen you need to undo this change.  They can help you with that too.", "diff": "@@ -1,3 +1 @@\n-[build]\n-  publish = \"docs/_build/html\"\n-  command = \"pip install -r docs-requirements.txt && export PYTHONPATH=$(pwd) && python setup.py docs\"\n+../../templates/docs/netlify.toml.jj2", "created_at": "2018-11-05T14:08:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTIxOTEyMQ==", "fields": {"body": "here add that this will open a text editor to write commit message.", "diff": "@@ -393,7 +393,19 @@ Step 4. Sending Your Changes\n    is no asterisk next to the master branch.\n \n Now that you've fixed the issue, you've tested it, and you think it is ready\n-to be merged, create a commit and push it to your fork, using:\n+to be merged, add your updated file to the staging area:\n+\n+::\n+\n+    $ git add <file/folder_name>\n+\n+Create a commit using the following command:\n+\n+::\n+\n+    $ git commit\n+", "created_at": "2018-11-06T17:31:10Z", "last_edited_at": null, "author": "akshatkarani", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTM2MzE3Mg==", "fields": {"body": "Add a blank line before this line, and instead of\n\nAfter writing ...\n\nuse something like\n\nAfter saving the commit, you can check your commit message using\n\ngit show\n\n\n\nIf you made a mistake in the commit message, edit the commit message again:\n\ngit commit --amend\n\n\n\nOnce you are happy that the commit message is correct, push it to your fork using:", "diff": "@@ -393,7 +393,20 @@ Step 4. Sending Your Changes\n    is no asterisk next to the master branch.\n \n Now that you've fixed the issue, you've tested it, and you think it is ready\n-to be merged, create a commit and push it to your fork, using:\n+to be merged, add your updated file to the staging area:\n+\n+::\n+\n+    $ git add <file/folder_name>\n+\n+Create a commit using the following command:\n+\n+::\n+\n+    $ git commit\n+\n+This will open a text editor to write commit message.\n+After writing the message, push it to your fork, using:", "created_at": "2018-11-07T02:27:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTM3NTAwOA==", "fields": {"body": "you can do\n- mkdir -p node_modules/jquery.i18n/libs`\n- cd node_modules/jquery.i18n/libs\n- git clone ...\n- cd -\n- pnpm install", "diff": "@@ -2,15 +2,24 @@ language: python\n python: 3.6\n \n before_install:\n-  - nvm install\n-  - npm install\n+  - npm i pnpm -g\n+  - pnpm install\n+  - cd node_modules\n+  - cd jquery.i18n\n+  - mkdir libs", "created_at": "2018-11-07T04:02:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYyNjIzOA==", "fields": {"body": "ahh its .gv", "diff": "@@ -0,0 +1,17 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class dot:\n+    aliases = 'DOT'\n+    extensions = '.dot'", "created_at": "2018-11-07T18:33:30Z", "last_edited_at": null, "author": "Dhiraj240", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTc2NTI4OQ==", "fields": {"body": "I don't think u need to include multiline_string_delimiters if there isn't any.", "diff": "@@ -0,0 +1,31 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class Verilog:\n+    aliases = 'verilog',\n+    extensions = '.v',\n+    comment_delimiters = '//',\n+    multiline_comment_delimiters = {'/*': '*/'}\n+    string_delimiters = {'\"': '\"'}\n+    multiline_string_delimiters = {}", "created_at": "2018-11-08T04:57:34Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTg0MTgwMg==", "fields": {"body": "labelloc, port these two are missing only. \ud83d\ude03", "diff": "@@ -0,0 +1,19 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class DOT:\n+    aliases = 'DOT'\n+    extensions = '.gv'\n+    comment_delimiters = '//',\n+    multiline_comment_delimiters = {'/*': '*/'}\n+    string_delimiters = {\"'\": \"'\"}\n+    indent_types = {'{': '}'}\n+    encapsulators = {'(': ')', '[': ']'}\n+    keywords = [\n+        'node', 'edge', 'graph',\n+        'digraph', 'subgraph', 'strict',\n+        'shape', 'rank', 'parent',\n+        'label',", "created_at": "2018-11-08T10:51:09Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTg0OTA4MQ==", "fields": {"body": "Well, IMO it is invalid to have other characters following line continuation delimiter, so it might be fine.", "diff": "@@ -0,0 +1,32 @@\n+import logging\n+\n+from coalib.bears.LocalBear import LocalBear\n+from coalib.results.Result import Result\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+class LineContinuationBear(LocalBear):\n+    def run(self,\n+            filename,\n+            file,\n+            language,\n+            ):\n+        try:\n+            lang = Language[language]\n+            line_continuation = lang.get_default_version().line_continuation\n+        except Exception:\n+            logging.error('Language {} is not yet supported.'.format(language))\n+            return\n+\n+        for line_number, line in enumerate(file):\n+            if len(line) - 1:\n+                if line[-2] in line_continuation:", "created_at": "2018-11-08T11:13:56Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTkzMDkyNA==", "fields": {"body": "Please remove unnecessary change \ud83d\ude09", "diff": "@@ -69,7 +69,6 @@\n                                 <div class=\"col m3\"><i class=\"fa fa-envelope-o\"></i></div>\n                                 <div class=\"col m9\"><a href=\"mailto:{{ page.email }}\">{{ page.email }}</a></div>\n                             </div>\n-", "created_at": "2018-11-08T15:21:03Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjA0NjYyNA==", "fields": {"body": "Umm, no since you see my triple \" start from line 1 and the line continuation delimiter is on line 2.", "diff": "@@ -0,0 +1,48 @@\n+import logging\n+from queue import Queue\n+\n+from bears.general.LineContinuationBear import LineContinuationBear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.results.Result import Result\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+\n+\n+good_file = \"\"\"\n+a = some_function(\n+    '1' + '2')\n+\"\"\"\n+\n+bad_file = r\"\"\"\n+a = '1' \\\n+    '2'\n+\"\"\"\n+\n+\n+class LineContinuationBearTest(LocalBearTestHelper):\n+\n+    def setUp(self):\n+        self.section = Section('name')\n+        self.uut = LineContinuationBear(self.section, Queue())\n+\n+    def test_run(self):\n+        self.section.append(Setting('language', 'Python'))\n+        self.check_results(\n+            self.uut, bad_file.splitlines(),\n+            [Result.from_values('LineContinuationBear',\n+                                'Explicit line continuation is not allowed.',\n+                                line=2, column=9, end_line=2, end_column=10,", "created_at": "2018-11-08T20:18:23Z", "last_edited_at": null, "author": "abhishalya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjE4NjI5Mg==", "fields": {"body": "I don't know how you changed all this but you can easily add all these again. Click on Files changed to see all your changes and just copy paste whatever unnecessary things you have removed.", "diff": "@@ -209,44 +197,10 @@ The easy issues that will help you get started are labeled as\n ``difficulty/newcomer`` and are only there to give you a glimpse of what\n it's like to work with us and what the workflow is like.\n \n-The coala community creates a constant supply of ``newcomer`` issues available\n-for people like you who are joining the organisation, so that you can learn\n-how to contribute according to the coala organisation development guides,\n-while doing a real task at the same time.\n-\n-coala does **not** follow the GitHub \"flow\" workflow, so be sure to read\n-our guides carefully. You will need to use the ``git`` command line.\n-During the newcomer process, we will help you conquer ``git``, so that you\n-can become a part of our super efficient developer team.\n-\n-If you do not follow the coala workflow, our bots will get grumpy, and\n-members of our community will try to help you in every way possible to\n-get your Pull Request merged, the coala way.\n-\n-**Never** create a second Pull Request for your newcomer issue.\n-Instead, if you have troubles on your first Pull Request, seek help from\n-the manual or ask for guidance on `gitter chat <https://coala.io/chat>`_\n-to reach a resolution for your troubles.\n-\n-Your Pull Request will **not** be accepted until it complies with coala\n-standards, even if your solution is amazingly correct. If you ignore the\n-bots or our developers, or if you close any Pull Request, we will have\n-no option except to conclude that you have abandoned the coala newcomer\n-process, and your amazing solution **will** be discarded.\n-We may nudge you to finish your Pull Request, but eventually a maintainer\n-will close incomplete Pull Request, and your newcomer issue will be returned\n-to the available queue, ready for the next person learning the coala workflow.\n-\n Now pick an issue which isn't assigned and which you would like to fix.\n Leave a comment that you would like to be assigned to the issue. This way\n we don't have multiple people working on the same issue at the same time.\n-\n-Remember that all newcomer issues should be very simple to fix, after you\n-have understood the problem.\n-Choose one of the newcomer issues that you really understand.\n-If you have spent more than an hour debugging or coding, maybe your\n-newcomer issue was incorrectly classified as a newcomer issue.\n-Ask a developer to check if it should be reclassified as `low` difficulty.", "created_at": "2018-11-09T09:21:17Z", "last_edited_at": null, "author": "akshatkarani", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjI2NTY1MQ==", "fields": {"body": "also alpha order the properties", "diff": "@@ -85,3 +85,40 @@\n   border: 0;\n   z-index: 9;\n }\n+.sha256sum_hash {\n+    display: flex;", "created_at": "2018-11-09T14:14:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjIyODYwMA==", "fields": {"body": "never use this as a link anchor in technical documetnation.  Describe what it is.  When printed, the link may not be shown at all, and instead be a footnote.", "diff": "@@ -58,11 +58,23 @@ in your current directory, as coala only works for Python >= 3.4.4\n     $ virtualenv coala-venv -p $(which python3)\n \n - Run coala-venv :\n+    + If you are a Linux or Mac user:\n+\n     ::\n \n         $ source coala-venv/bin/activate\n         (coala-venv)$ deactivate # to exit the environment\n \n+    + And if you are a Windows user:\n+\n+    ::\n+\n+        > coala-venv\\Scripts\\activate\n+        (coala-venv)> deactivate # to exit the environment\n+\n+    If you run into any hiccups refer to\n+    `this <https://virtualenv.pypa.io/en/stable/userguide/#activate-script>`__.", "created_at": "2018-11-09T11:52:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjIzNTI3OQ==", "fields": {"body": "On hovering over icon, the cursor changes to a pointer and a hint text is being displayed. Looks Good to me", "diff": "@@ -82,6 +82,14 @@\n                             <div class=\"center\"><h5 class=\"light no-margin\">Patches Tarball</h5></div>\n                             <br>\n                             <div class=\"center\"><a href=\"{{ page.tarball }}\">Download</a></div>\n+                            <br>\n+                            <div class=\"center sha256sum_hash\">\n+                                <strong>SHA-256</strong>:\n+                                <p id=\"sha256sum_hash_value\">\n+                                    {{page.sha256sum}}\n+                                </p>\n+                                <i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i>", "created_at": "2018-11-09T12:22:37Z", "last_edited_at": null, "author": "KVGarg", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjIzOTcxOQ==", "fields": {"body": "Looks good, can you push your changes \ud83d\udc4d", "diff": "@@ -82,6 +82,14 @@\n                             <div class=\"center\"><h5 class=\"light no-margin\">Patches Tarball</h5></div>\n                             <br>\n                             <div class=\"center\"><a href=\"{{ page.tarball }}\">Download</a></div>\n+                            <br>\n+                            <div class=\"center sha256sum_hash\">\n+                                <strong>SHA-256</strong>:\n+                                <p id=\"sha256sum_hash_value\">\n+                                    {{page.sha256sum}}\n+                                </p>\n+                                <i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i>", "created_at": "2018-11-09T12:41:07Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjUzNjQyMg==", "fields": {"body": "Put it between if result.code and if options['strip_ansi']?\nSince map(strip_ansi, output)) work becomes unnecessary if condition is true here.", "diff": "@@ -676,18 +676,50 @@ def run(self, filename=None, file=None, **kwargs):\n                 self.debug(\"Running '{}'\".format(\n                     ' '.join(str(arg) for arg in arguments)))\n \n-                output = run_shell_command(\n+                result = run_shell_command(\n                     arguments,\n                     stdin=''.join(file) if options['use_stdin'] else None,\n                     cwd=self.get_config_dir())\n \n-                output = tuple(compress(\n-                    output,\n-                    (options['use_stdout'], options['use_stderr'])))\n+                stdout, stderr = result\n+\n+                output = []\n+\n+                if options['use_stdout']:\n+                    output.append(stdout)\n+                elif stdout:\n+                    logging.warning(\n+                        '{}: Discarded stdout: {}'.format(\n+                            self.__class__.__name__, stdout))\n+                    stdout = ''\n+\n+                if options['use_stderr']:\n+                    output.append(stderr)\n+                elif stderr:\n+                    logging.warning(\n+                        '{}: Discarded stderr: {}'.format(\n+                            self.__class__.__name__, stderr))\n+                    stderr = ''\n+\n+                if result.code:\n+                    logging.warning(\n+                        '{}: Exit code {}'.format(\n+                            self.__class__.__name__, result.code))\n+\n                 if options['strip_ansi']:\n                     output = tuple(map(strip_ansi, output))\n+                else:\n+                    output = tuple(output)\n+\n                 if len(output) == 1:\n                     output = output[0]\n+\n+                if not any([stdout, stderr]):", "created_at": "2018-11-12T05:13:17Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjk0ODA3Mw==", "fields": {"body": "'split into test_good_file and test_bad_file , so when these fail we have a better idea of what has happened'\norigin: #2759 (comment)", "diff": "@@ -0,0 +1,65 @@\n+import os\n+import unittest\n+from queue import Queue\n+\n+from bears.python.PyreBear import PyreBear\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from coalib.settings.Section import Section\n+\n+\n+def get_absolute_test_path(file):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'pyre_test_files', file)\n+\n+\n+@generate_skip_decorator(PyreBear)\n+class PyreBearTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.section = Section('pyre')\n+        self.queue = Queue()\n+        test_folder = os.path.join(os.path.dirname(__file__),\n+                                   'pyre_test_files')\n+        self.test_good_file = os.path.join(test_folder,\n+                                           'pyre_test_good/pyre_good.py')\n+        self.test_bad_file = os.path.join(test_folder,\n+                                          'pyre_test_bad/pyre_bad.py')\n+\n+    def get_results(self, file):\n+        file_dict = {}\n+        with open(file, 'r', encoding='utf-8') as content:\n+            file_dict[file] = tuple(content.readlines())\n+        self.uut = PyreBear(file_dict,\n+                            self.section,\n+                            self.queue)\n+        if self.uut.run_bear_from_section([], {}) is None:\n+            return []\n+        return list(self.uut.run_bear_from_section([], {}))\n+\n+    def test_results(self):\n+        # Test Bad File\n+        results = self.get_results(self.test_bad_file)\n+        # Check Result Message(s)\n+        messages = [result.message for result in results]\n+        self.assertEqual(len(messages), 2)\n+        self.assertEqual(messages[0], 'Incompatible return type [7]: '\n+                         'Expected `int` but got `str`.')\n+        self.assertEqual(messages[1], 'Incompatible return type [7]: '\n+                         'Expected `str` but got `int`.')\n+        # Check Result Lines & Columns\n+        lines = [result.affected_code[0] for result in results]\n+        # For Message #1\n+        self.assertEqual(lines[0].end.column, 4)\n+        self.assertEqual(lines[0].start.column, 4)\n+        self.assertEqual(lines[0].end.line, 2)\n+        self.assertEqual(lines[0].start.line, 2)\n+        # For Message #2\n+        self.assertEqual(lines[1].end.column, 4)\n+        self.assertEqual(lines[1].start.column, 4)\n+        self.assertEqual(lines[1].end.line, 6)\n+        self.assertEqual(lines[1].start.line, 6)\n+\n+        # Test Good File", "created_at": "2018-11-13T09:06:27Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjk1MzE5Nw==", "fields": {"body": "I suspect this indicates that your bear is wrong. From the test file, it looks like their column number start from 0. So this should be 5 instead. Can you confirm if they use 0-based offset?", "diff": "@@ -0,0 +1,65 @@\n+import os\n+import unittest\n+from queue import Queue\n+\n+from bears.python.PyreBear import PyreBear\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from coalib.settings.Section import Section\n+\n+\n+def get_absolute_test_path(file):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'pyre_test_files', file)\n+\n+\n+@generate_skip_decorator(PyreBear)\n+class PyreBearTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.section = Section('pyre')\n+        self.queue = Queue()\n+        test_folder = os.path.join(os.path.dirname(__file__),\n+                                   'pyre_test_files')\n+        self.test_good_file = os.path.join(test_folder,\n+                                           'pyre_test_good/pyre_good.py')\n+        self.test_bad_file = os.path.join(test_folder,\n+                                          'pyre_test_bad/pyre_bad.py')\n+\n+    def get_results(self, file):\n+        file_dict = {}\n+        with open(file, 'r', encoding='utf-8') as content:\n+            file_dict[file] = tuple(content.readlines())\n+        self.uut = PyreBear(file_dict,\n+                            self.section,\n+                            self.queue)\n+        if self.uut.run_bear_from_section([], {}) is None:\n+            return []\n+        return list(self.uut.run_bear_from_section([], {}))\n+\n+    def test_results(self):\n+        # Test Bad File\n+        results = self.get_results(self.test_bad_file)\n+        # Check Result Message(s)\n+        messages = [result.message for result in results]\n+        self.assertEqual(len(messages), 2)\n+        self.assertEqual(messages[0], 'Incompatible return type [7]: '\n+                         'Expected `int` but got `str`.')\n+        self.assertEqual(messages[1], 'Incompatible return type [7]: '\n+                         'Expected `str` but got `int`.')\n+        # Check Result Lines & Columns\n+        lines = [result.affected_code[0] for result in results]\n+        # For Message #1\n+        self.assertEqual(lines[0].end.column, 4)", "created_at": "2018-11-13T09:21:04Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzMwNTI1OQ==", "fields": {"body": "If there is no value for tslint_config , tslint may find tslint.json in the top level directory where coala is run.  If there is no tslint.json, there are no rules being used, especially not any custom rules which might reside in a custom directory.\nIf there is a tslint.json, why wouldnt it include rulesDirectory ?  It seems silly to not use rulesDirectory.\nIt would seem to me that a rules_dir setting only makes sense if the bear also had a setting for custom rule names to enforce, in which case a directory to get the rules from is needed.\nBut more analysis may expose a reason for rules_dir.", "diff": "@@ -37,7 +37,7 @@ def create_arguments(filename, file, config_file,\n         args = ('--format', 'json')\n         if tslint_config:\n             args += ('--config', tslint_config)\n-        if rules_dir:\n+        if rules_dir:  # pragma: no cover", "created_at": "2018-11-14T03:39:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDIzMjEyMg==", "fields": {"body": "@bhawesh96 Remove this condition; the restriction is not valuable now, especially after your change", "diff": "@@ -14,7 +14,7 @@ let earliestDate = process.env.EARLIEST_DATE || '2017-01-01T00:00:00Z';\n \n if (isDeployPreview) {\n   const earliestDateForPr = process.env.EARLIEST_DATE_PR ||\n-    '2018-04-01T00:00:00Z';\n+    moment().subtract(3, 'months').format('YYYY-MM-DDThh:mm:ssZ');\n   if (getTime(earliestDate) < getTime(earliestDateForPr)) {", "created_at": "2018-11-16T14:55:23Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQ3NjQwNw==", "fields": {"body": "You shouldn't remove this line.", "diff": "@@ -14,14 +14,11 @@ let earliestDate = process.env.EARLIEST_DATE || '2017-01-01T00:00:00Z';\n \n if (isDeployPreview) {\n   const earliestDateForPr = process.env.EARLIEST_DATE_PR ||\n-    '2018-04-01T00:00:00Z';\n-  if (getTime(earliestDate) < getTime(earliestDateForPr)) {\n-    earliestDate = earliestDateForPr;", "created_at": "2018-11-19T01:51:23Z", "last_edited_at": "2018-11-19T01:51:44Z", "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDYzMTYxNg==", "fields": {"body": "It works but is not ideal. Instead of an alert, I would be happier to see an error message displayed on the modal. Besides, the modal shouldn't be closed and then reopened.", "diff": "@@ -63,7 +63,9 @@ class AppNav extends Component {\n       // }\n       this.setState({info});\n     }).catch(() => {\n-      this.setState({info: null});\n+      alert(\"Invalid user token\");", "created_at": "2018-11-19T14:12:49Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDczOTA2OQ==", "fields": {"body": "version v3.6 is a bit redundant, since the v in v3.6 already means version.", "diff": "@@ -4,6 +4,8 @@\n \n \n if __name__ == '__main__':\n+    if (sys.version_info[0], sys.version_info[1]) < (3, 6):\n+        raise Exception('Minimum python version v3.6 is required.')", "created_at": "2018-11-19T18:52:36Z", "last_edited_at": null, "author": "CLiu13", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTg1NDE2Ng==", "fields": {"body": "I think so, unless there is any other exception such that you have to use regex to match.", "diff": "@@ -42,7 +42,7 @@ class Login extends Component {\n       let tld = hostname.split('.').slice(-2).join('.');\n       if (tld == 'github.io') return null;\n       if (tld == 'netlify.com') return null;\n-      if (tld == 'localhost') return null;\n+      if (tld == 'localhost' || hostname.match(/^127|^0/)) return null;", "created_at": "2018-11-23T06:36:08Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjA4MjE4Ng==", "fields": {"body": "This line (as well as others) is too long. We don't have 80 max characters limit per line in this repository, so CI doesn't complain, but please break down into multiple lines.", "diff": "@@ -0,0 +1,12 @@\n+---\n+question: \"What is a cEP and why it is so important to do analysis pre-gsoc and design as early as possible, to be finalized in the cEP?\"", "created_at": "2018-11-25T17:20:14Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjEyNzczOA==", "fields": {"body": "IMO that line should be there\n\nI disagree. Everyone applying for gsoc know the possible outcome of either getting selected or rejected. The way @KVGarg has mentioned it would make us seem like a community that is too hard to get into which is far from what this community is actually like. I have not seen a community where the maintainers and the admin try so hard to select every good student for GSoC and even advise them to submit multiple proposals to other organizations.\nSo I am with @utkarsh2102 on this. It should be rephrased like an interested student must do enough research about their project to be able to express their ideas, timeline, etc clearly in their GSoC proposal which will increase their chances of success.\nWhat you ( @KVGarg  ) wrote is absolutely correct but I just don't find it very welcoming towards newcomers.", "diff": "@@ -0,0 +1,12 @@\n+---\n+question: \"What is a cEP and why it is so important to do analysis pre-gsoc and design as early as possible, to be finalized in the cEP?\"\n+---\n+A **cEP (coala Enhancement Proposal)** is proposed to the coala community to discuss the new major features that the contributor intends to implement during GSoC.\n+\n+**cEP's** are designed before implementation. Implementing major features usually happens from a technical perspective and may lead to poorly designed content - developer and user wise. This can essentially save a lot of coding work and also makes sure that major features are properly documented.\n+\n+Experience tells us that the best GSoC students are the ones who heavily contributed to the project ideas website, created projects from the issues, and expanded on existing ***.md*** files.\n+\n+So, if you are planning to do GSoC with coala, you should be starting to write detailed project ideas in our [projects](https://github.com/coala/projects) repository. Also, you should learn how to express complex technical ideas in the markup because if you can't explain your idea, and how you will achieve it, we probably won't be able to mentor you.", "created_at": "2018-11-26T05:46:37Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjM2MTM1Nw==", "fields": {"body": "Why?\nThe HTML files would include this piece of html. Adding another html tag would break the inheritor file as there can't be two header tags.", "diff": "@@ -0,0 +1,10 @@\n+<div class=\"ribbon\">", "created_at": "2018-11-26T17:54:16Z", "last_edited_at": "2018-11-26T17:59:53Z", "author": "siddhpant", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjM2MTk2MA==", "fields": {"body": "Maybe I should add it directly in the file, since a new file is not achieving anything in this directory.", "diff": "@@ -0,0 +1,10 @@\n+<div class=\"ribbon\">", "created_at": "2018-11-26T17:55:47Z", "last_edited_at": null, "author": "siddhpant", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjMzOTA0OQ==", "fields": {"body": "It's a HTML file, so I guess more appropriate would be to put some HTML tags first and maybe put this class into a body?", "diff": "@@ -0,0 +1,10 @@\n+<div class=\"ribbon\">", "created_at": "2018-11-26T16:56:31Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjYxNDIxMg==", "fields": {"body": "True is not a valid output for which command. '/bin/bash' is better IMO.", "diff": "@@ -67,3 +68,14 @@ def test_unsupported_language(self):\n             self.uut.message_queue.queue[0].log_level, logging.ERROR)\n         self.assertIn('Hypertext Markup Language',\n                       self.uut.message_queue.queue[0].message)\n+\n+    def test_check_prerequisites(self):\n+        with mock.patch('bears.general.CPDBear.which') as mock_which:\n+            mock_which.side_effect = [None, None, None]\n+            self.assertEqual(CPDBear.check_prerequisites(),\n+                             'bash is not installed.')\n+\n+            mock_which.side_effect = [True, None, None]", "created_at": "2018-11-27T11:02:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODEyOTYyOQ==", "fields": {"body": "use self.assert*", "diff": "@@ -230,3 +232,29 @@ def test_bad_language(self):\n                 break\n         else:\n             assert False, 'Message not found'\n+\n+\n+@generate_skip_decorator(ESLintBear)\n+class ESLintBearLegacyErrorTest(LocalBearTestHelper):\n+\n+    def setUp(self):\n+        self.section = Section('name')\n+        self.queue = Queue()\n+        self.uut = ESLintBear(self.section, self.queue)\n+\n+    @mock.patch('coalib.misc.Shell.Popen')\n+    def test_eslint2_error(self, mock_popen):\n+        expected_error = 'foo'\n+        mock_popen.return_value.communicate.return_value = ('output',\n+                                                            expected_error)\n+\n+        get_results(self.uut, '',\n+                    filename=None,\n+                    force_linebreaks=True,\n+                    create_tempfile=True,\n+                    tempfile_kwargs={},\n+                    settings={},\n+                    aspects=None,\n+                    )\n+\n+        assert any(expected_error in msg.message for msg in self.queue.queue)", "created_at": "2018-12-03T02:15:51Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODEzMDIzNA==", "fields": {"body": "The ignore comments are needed until the bear has these features.", "diff": "@@ -227,6 +227,7 @@ def __ne__(cls, other):\n \n \n class Language(metaclass=LanguageMeta):\n+    # Start ignoring LineContinuationBear", "created_at": "2018-12-03T02:22:51Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTc4MDQ5", "fields": {"created_at": "2017-03-19T16:49:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sahilarora535", "review": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjMxMTg2", "fields": {"created_at": "2017-04-22T20:51:21Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjQ5Nw==", "fields": {"created_at": "2017-07-05T13:22:42Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjUwMw==", "fields": {"created_at": "2017-07-05T13:22:50Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwOTE4NQ==", "fields": {"created_at": "2017-07-05T15:51:33Z", "content": "HOORAY", "giver": "IpshitaC", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNTE2MQ==", "fields": {"created_at": "2017-07-29T17:10:49Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDI1NQ==", "fields": {"created_at": "2017-08-10T15:40:20Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDU1MA==", "fields": {"created_at": "2017-08-10T15:46:20Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNjc1OA==", "fields": {"created_at": "2017-08-10T16:34:26Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwMDE3Nw==", "fields": {"created_at": "2017-08-12T15:45:34Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc0OTQwNA==", "fields": {"created_at": "2017-11-03T08:20:43Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2MDc1OA==", "fields": {"created_at": "2017-11-03T13:58:18Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2Mjk2NQ==", "fields": {"created_at": "2017-11-03T14:42:36Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4MzEwOA==", "fields": {"created_at": "2017-11-03T23:47:35Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "troublemagnet", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4ODI1Nw==", "fields": {"created_at": "2017-11-04T09:51:09Z", "content": "THUMBS_UP", "giver": "yashasingh", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc5NjEwMg==", "fields": {"created_at": "2017-11-04T21:39:41Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkyOTY1MA==", "fields": {"created_at": "2017-11-08T12:10:03Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA2NDE0Ng==", "fields": {"created_at": "2017-11-11T12:00:39Z", "content": "THUMBS_UP", "giver": "troublemagnet", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIyMTI4Mg==", "fields": {"created_at": "2017-11-15T17:54:51Z", "content": "THUMBS_UP", "giver": "acashmkj", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDUwNA==", "fields": {"created_at": "2017-11-18T18:59:45Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMQ==", "fields": {"created_at": "2017-11-17T17:41:24Z", "content": "HOORAY", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMg==", "fields": {"created_at": "2017-11-17T17:41:27Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMTgxNQ==", "fields": {"created_at": "2017-11-27T05:39:45Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjM2Nw==", "fields": {"created_at": "2017-11-27T06:14:40Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjQ4MQ==", "fields": {"created_at": "2017-11-27T06:21:01Z", "content": "THUMBS_UP", "giver": "0x48piraj", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjc0NQ==", "fields": {"created_at": "2017-11-27T06:34:18Z", "content": "THUMBS_UP", "giver": "khanchi97", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMzY2Mw==", "fields": {"created_at": "2017-11-27T07:19:24Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "0x48piraj", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0ODQwMw==", "fields": {"created_at": "2017-12-05T17:19:46Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk1MjM1NA==", "fields": {"created_at": "2017-12-05T18:47:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2MTQyNA==", "fields": {"created_at": "2017-12-05T22:27:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2NDgyNA==", "fields": {"created_at": "2017-12-06T00:15:50Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2ODI4OQ==", "fields": {"created_at": "2017-12-06T02:41:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3MTQxNg==", "fields": {"created_at": "2017-12-06T05:30:17Z", "content": "LAUGH", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg2NQ==", "fields": {"created_at": "2017-12-06T08:29:06Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg5OA==", "fields": {"created_at": "2017-12-06T08:30:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkxODU1MA==", "fields": {"created_at": "2017-12-05T03:36:41Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "indmind", "review": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzU3OA==", "fields": {"created_at": "2017-12-05T07:48:42Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzg2NA==", "fields": {"created_at": "2017-12-05T07:58:40Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MDAwNg==", "fields": {"created_at": "2017-12-08T04:21:56Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MTg0Mw==", "fields": {"created_at": "2017-12-08T06:15:44Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MjcyMQ==", "fields": {"created_at": "2017-12-08T07:00:40Z", "content": "HEART", "giver": "synicalsyntax", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzA0OQ==", "fields": {"created_at": "2017-12-08T07:14:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzE1MQ==", "fields": {"created_at": "2017-12-08T07:18:57Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA5MzI2Mg==", "fields": {"created_at": "2017-12-08T17:00:48Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAzMDc5NA==", "fields": {"created_at": "2017-12-07T10:17:48Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE4NjMwMg==", "fields": {"created_at": "2017-12-12T04:35:25Z", "content": "HEART", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNTY1Nw==", "fields": {"created_at": "2017-12-10T13:20:53Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "Grox-Ni", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjI2Mg==", "fields": {"created_at": "2017-12-10T14:22:11Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjM5Mg==", "fields": {"created_at": "2017-12-10T14:33:36Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjMyMw==", "fields": {"created_at": "2017-12-10T14:26:52Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjk2MA==", "fields": {"created_at": "2017-12-10T15:22:18Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Ng==", "fields": {"created_at": "2017-12-10T16:45:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Nw==", "fields": {"created_at": "2017-12-10T16:45:25Z", "content": "HEART", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMTgyNQ==", "fields": {"created_at": "2017-12-10T22:39:57Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMzY2OA==", "fields": {"created_at": "2017-12-11T01:19:09Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzNzM1MQ==", "fields": {"created_at": "2017-12-11T05:24:19Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mg==", "fields": {"created_at": "2017-12-11T06:36:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mw==", "fields": {"created_at": "2017-12-11T06:36:03Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk1Ng==", "fields": {"created_at": "2017-12-11T06:47:31Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk4Nw==", "fields": {"created_at": "2017-12-11T06:48:35Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNQ==", "fields": {"created_at": "2017-12-11T06:46:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNw==", "fields": {"created_at": "2017-12-11T06:46:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MDQ3NQ==", "fields": {"created_at": "2017-12-13T07:34:04Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MTkyMQ==", "fields": {"created_at": "2017-12-13T08:24:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MjE0OQ==", "fields": {"created_at": "2017-12-13T08:30:29Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI4ODUzNw==", "fields": {"created_at": "2017-12-14T05:40:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNjk2NA==", "fields": {"created_at": "2017-12-12T22:08:24Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNzUxNg==", "fields": {"created_at": "2017-12-12T22:22:46Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM4Mg==", "fields": {"created_at": "2017-12-13T02:42:18Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM5OQ==", "fields": {"created_at": "2017-12-13T02:42:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNjc4MA==", "fields": {"created_at": "2017-12-13T04:52:17Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzOTU3Mw==", "fields": {"created_at": "2017-12-13T06:56:58Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3MzczOA==", "fields": {"created_at": "2017-12-16T03:40:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA1OQ==", "fields": {"created_at": "2017-12-16T09:26:26Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA2Mg==", "fields": {"created_at": "2017-12-16T09:27:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3NA==", "fields": {"created_at": "2017-12-16T22:16:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3Ng==", "fields": {"created_at": "2017-12-16T22:16:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4Mzg4MA==", "fields": {"created_at": "2017-12-16T22:36:00Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "margobra8", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4NjE4OQ==", "fields": {"created_at": "2017-12-17T04:08:37Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjg4Ng==", "fields": {"created_at": "2017-12-17T17:37:51Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjk0Mw==", "fields": {"created_at": "2017-12-17T17:41:56Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5MzA4MQ==", "fields": {"created_at": "2017-12-17T17:54:58Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzMxMDMzNg==", "fields": {"created_at": "2017-12-14T15:45:12Z", "content": "THUMBS_UP", "giver": "myfrom", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNDIwNQ==", "fields": {"created_at": "2017-12-18T07:43:12Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNzA0Ng==", "fields": {"created_at": "2017-12-18T09:18:14Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQxMDU3Nw==", "fields": {"created_at": "2017-12-18T10:49:42Z", "content": "THUMBS_UP", "giver": "Rahmeen14", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MDU4Ng==", "fields": {"created_at": "2017-12-21T04:33:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MjI3MQ==", "fields": {"created_at": "2017-12-21T06:13:45Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0NDMwOA==", "fields": {"created_at": "2017-12-21T07:45:42Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NDEyMQ==", "fields": {"created_at": "2017-12-22T04:47:28Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NTM5NA==", "fields": {"created_at": "2017-12-22T06:06:15Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4ODExNg==", "fields": {"created_at": "2017-12-22T08:20:27Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzU0NzAxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTI3Mw==", "fields": {"created_at": "2017-12-20T10:45:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTU4Mw==", "fields": {"created_at": "2017-12-20T10:54:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUxMDM0NA==", "fields": {"created_at": "2017-12-20T13:18:28Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYwNg==", "fields": {"created_at": "2017-12-20T17:26:03Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYzNw==", "fields": {"created_at": "2017-12-20T17:26:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTc2Ng==", "fields": {"created_at": "2017-12-20T17:30:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMjA1Mg==", "fields": {"created_at": "2017-12-20T17:37:29Z", "content": "LAUGH", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUzMDIwNA==", "fields": {"created_at": "2017-12-20T21:08:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc2OQ==", "fields": {"created_at": "2017-12-25T15:06:32Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3MA==", "fields": {"created_at": "2017-12-25T15:06:34Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3Mg==", "fields": {"created_at": "2017-12-25T15:06:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQyMw==", "fields": {"created_at": "2017-12-25T21:04:23Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQzNg==", "fields": {"created_at": "2017-12-25T21:06:08Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0OTAzNg==", "fields": {"created_at": "2017-12-26T05:33:40Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY1NTYzMA==", "fields": {"created_at": "2017-12-26T12:00:10Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY4Mzk3Nw==", "fields": {"created_at": "2017-12-27T13:03:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYwMjcxMA==", "fields": {"created_at": "2017-12-22T16:39:35Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNg==", "fields": {"created_at": "2017-12-24T02:00:01Z", "content": "HEART", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNw==", "fields": {"created_at": "2017-12-24T02:00:25Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNDEyOA==", "fields": {"created_at": "2017-12-24T02:47:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQ2OQ==", "fields": {"created_at": "2017-12-24T07:02:47Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQwOQ==", "fields": {"created_at": "2017-12-24T06:52:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQxMA==", "fields": {"created_at": "2017-12-24T06:52:44Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzMjI4MQ==", "fields": {"created_at": "2017-12-24T23:35:38Z", "content": "HEART", "giver": "dob9601", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzOTI2NA==", "fields": {"created_at": "2017-12-25T10:45:55Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc2NTEzMg==", "fields": {"created_at": "2017-12-31T10:10:34Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDExNw==", "fields": {"created_at": "2017-12-28T06:33:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDMzNA==", "fields": {"created_at": "2017-12-28T06:48:01Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNTYyNg==", "fields": {"created_at": "2017-12-28T07:58:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNjE4Nw==", "fields": {"created_at": "2017-12-28T08:24:19Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDE0MQ==", "fields": {"created_at": "2017-12-29T09:31:03Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDQ3OA==", "fields": {"created_at": "2017-12-29T09:50:54Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MjY5NQ==", "fields": {"created_at": "2018-01-04T04:48:24Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk1MzY0Nw==", "fields": {"created_at": "2018-01-06T15:55:07Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "dob9601", "review": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODEzNDI0Nw==", "fields": {"created_at": "2018-01-11T08:05:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM5MDg1NA==", "fields": {"created_at": "2018-01-17T18:57:28Z", "content": "THUMBS_UP", "giver": "vipuldcoder", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODQ1NDg5NA==", "fields": {"created_at": "2018-01-18T22:12:14Z", "content": "THUMBS_UP", "giver": "ShivamSinghania", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1NzgyNA==", "fields": {"created_at": "2018-01-22T12:58:45Z", "content": "THUMBS_DOWN", "giver": "realslimshanky", "receiver": "saksham189", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1ODE2MQ==", "fields": {"created_at": "2018-01-22T13:06:57Z", "content": "THUMBS_DOWN", "giver": "saksham189", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwNg==", "fields": {"created_at": "2018-01-22T13:43:34Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "saksham189", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwOQ==", "fields": {"created_at": "2018-01-22T13:43:36Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM4Nw==", "fields": {"created_at": "2018-01-22T13:57:59Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM5MQ==", "fields": {"created_at": "2018-01-22T13:58:07Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDU1Ng==", "fields": {"created_at": "2018-01-22T14:02:36Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2ODkyNg==", "fields": {"created_at": "2018-01-22T16:30:41Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2OTM3OA==", "fields": {"created_at": "2018-01-22T16:39:13Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODc1MDQwOQ==", "fields": {"created_at": "2018-01-25T20:00:07Z", "content": "THUMBS_UP", "giver": "Kagamihime", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE0NDcyNw==", "fields": {"created_at": "2018-02-05T05:40:04Z", "content": "THUMBS_UP", "giver": "mvinoba", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE5OTYwMw==", "fields": {"created_at": "2018-02-06T06:52:29Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "mvinoba", "review": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyMDYzOQ==", "fields": {"created_at": "2018-02-13T11:28:23Z", "content": "HOORAY", "giver": "realslimshanky", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTY5MzcwNw==", "fields": {"created_at": "2018-02-16T14:44:19Z", "content": "LAUGH", "giver": "Makman2", "receiver": "nguptaa", "review": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Mw==", "fields": {"created_at": "2018-02-23T01:52:50Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Nw==", "fields": {"created_at": "2018-02-23T01:52:56Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY4OQ==", "fields": {"created_at": "2018-02-23T01:54:31Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYxMA==", "fields": {"created_at": "2018-02-23T01:51:52Z", "content": "LAUGH", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzMw==", "fields": {"created_at": "2018-02-23T01:52:33Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzNQ==", "fields": {"created_at": "2018-02-23T01:52:38Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTY0MTUwNA==", "fields": {"created_at": "2018-03-31T20:58:53Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "saksham189", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzNjk1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTcxNDEyNw==", "fields": {"created_at": "2018-04-03T08:05:46Z", "content": "THUMBS_DOWN", "giver": "Vamshi99", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM3ODE0NTU0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTcyMDgwMQ==", "fields": {"created_at": "2018-04-03T10:23:57Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM3ODE5NDUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg0NjYyMw==", "fields": {"created_at": "2018-04-05T12:13:47Z", "content": "HOORAY", "giver": "sangamcse", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTAyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg0NjYyOA==", "fields": {"created_at": "2018-04-05T12:13:51Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTAyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk1ODkzOA==", "fields": {"created_at": "2018-04-08T11:05:46Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzE1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk2MTUzMw==", "fields": {"created_at": "2018-04-08T14:21:29Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3OTUzMTczMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk5NDI2Ng==", "fields": {"created_at": "2018-04-09T13:20:25Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MDc3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk5NDUwMA==", "fields": {"created_at": "2018-04-09T13:24:50Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MjEzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTkxMzAyMA==", "fields": {"created_at": "2018-04-06T14:49:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM3ODE5NDUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2Njc3MA==", "fields": {"created_at": "2018-04-17T05:50:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjMyNjAyMw==", "fields": {"created_at": "2018-04-16T13:06:39Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MDc3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ1NzA0Mw==", "fields": {"created_at": "2018-04-18T14:57:42Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ0OA==", "fields": {"created_at": "2018-04-19T07:10:40Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ3MQ==", "fields": {"created_at": "2018-04-19T07:11:14Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQxOA==", "fields": {"created_at": "2018-04-19T07:09:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU0OA==", "fields": {"created_at": "2018-04-19T07:13:08Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU1NQ==", "fields": {"created_at": "2018-04-19T07:13:22Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU2MA==", "fields": {"created_at": "2018-04-19T07:13:38Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUwMQ==", "fields": {"created_at": "2018-04-19T07:11:50Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUzMQ==", "fields": {"created_at": "2018-04-19T07:12:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1MA==", "fields": {"created_at": "2018-04-19T07:34:34Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1Mw==", "fields": {"created_at": "2018-04-19T07:34:36Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ3Nw==", "fields": {"created_at": "2018-04-19T07:35:04Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ4NQ==", "fields": {"created_at": "2018-04-19T07:35:18Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzY5Nw==", "fields": {"created_at": "2018-04-19T07:40:01Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjU0OTM2OA==", "fields": {"created_at": "2018-04-20T02:55:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjY5NTQwOA==", "fields": {"created_at": "2018-04-24T04:41:19Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "manankalra", "review": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYwNzA1Nw==", "fields": {"created_at": "2018-04-21T14:45:52Z", "content": "THUMBS_UP", "giver": "saksham189", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIwOTkxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjczNTM4OQ==", "fields": {"created_at": "2018-04-24T16:30:57Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "prnvdixit", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NTA0OA==", "fields": {"created_at": "2018-05-01T15:58:43Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0OTA4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NTAwNA==", "fields": {"created_at": "2018-05-01T15:57:32Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NjI2MA==", "fields": {"created_at": "2018-05-01T16:27:43Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA1MDY1OQ==", "fields": {"created_at": "2018-05-01T18:01:36Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA3ODk3OA==", "fields": {"created_at": "2018-05-02T09:10:01Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkxMzE0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA4MTE3Mw==", "fields": {"created_at": "2018-05-02T09:58:04Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkyNTc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE4Nzk0NA==", "fields": {"created_at": "2018-05-04T07:38:28Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NjUxMjg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzEwMjAyNg==", "fields": {"created_at": "2018-05-02T16:31:40Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI1NTYyOA==", "fields": {"created_at": "2018-05-06T15:54:45Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NDQyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI1Njc4Mw==", "fields": {"created_at": "2018-05-06T17:21:38Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NTkzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI2NDk2MA==", "fields": {"created_at": "2018-05-07T03:09:08Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTY0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI4MzE0OQ==", "fields": {"created_at": "2018-05-07T12:47:55Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQwOTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI4NDczOA==", "fields": {"created_at": "2018-05-07T13:21:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI5NTUwOA==", "fields": {"created_at": "2018-05-07T16:42:02Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM4NzA5ODQ4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMDgyNQ==", "fields": {"created_at": "2018-05-05T01:21:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM4NjUyODExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTI5MQ==", "fields": {"created_at": "2018-05-05T02:11:42Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTI5OA==", "fields": {"created_at": "2018-05-05T02:12:17Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MTc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM1OA==", "fields": {"created_at": "2018-05-05T02:19:08Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTcwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM2OQ==", "fields": {"created_at": "2018-05-05T02:20:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM4Ng==", "fields": {"created_at": "2018-05-05T02:21:54Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTkzOA==", "fields": {"created_at": "2018-05-05T03:20:17Z", "content": "HEART", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjMyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMjc1NQ==", "fields": {"created_at": "2018-05-05T04:59:31Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI1MTIwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzNzEyMg==", "fields": {"created_at": "2018-05-05T11:54:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI4OTY1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNTMxNw==", "fields": {"created_at": "2018-05-08T00:54:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQ0NDY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNTMyMg==", "fields": {"created_at": "2018-05-08T00:54:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNzI2OA==", "fields": {"created_at": "2018-05-08T02:06:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU5NjQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIxNw==", "fields": {"created_at": "2018-05-10T12:39:54Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "lilithxxx", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIzMw==", "fields": {"created_at": "2018-05-10T12:40:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ3ODY5Mw==", "fields": {"created_at": "2018-05-10T20:29:45Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "nemaniarjun", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzUwOTc4MA==", "fields": {"created_at": "2018-05-11T12:48:51Z", "content": "CONFUSED", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Nzc3MDEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk2MTY4Mw==", "fields": {"created_at": "2018-05-22T08:36:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MDUwMTM5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4NDc1OA==", "fields": {"created_at": "2018-05-22T15:19:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTA0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc0Mw==", "fields": {"created_at": "2018-05-22T16:02:53Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc2Mw==", "fields": {"created_at": "2018-05-22T16:03:14Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkzNDgzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc4Mw==", "fields": {"created_at": "2018-05-22T16:03:34Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTk0MzQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzkwMjk1MQ==", "fields": {"created_at": "2018-05-21T05:16:51Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ5NTM3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzkyNDcwNw==", "fields": {"created_at": "2018-05-21T15:14:51Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5MDY2MjUzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDA1MTcyOQ==", "fields": {"created_at": "2018-05-23T16:06:17Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM5MTM2ODYwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxNTU3Mg==", "fields": {"created_at": "2018-05-23T03:33:35Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAxMDkyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxNTYxNQ==", "fields": {"created_at": "2018-05-23T03:35:00Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAyNDQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5NzIyNg==", "fields": {"created_at": "2018-05-26T11:48:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjU2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODc4MQ==", "fields": {"created_at": "2018-05-26T13:59:44Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjgzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODcyNA==", "fields": {"created_at": "2018-05-26T13:56:37Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0Njc4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODg0NA==", "fields": {"created_at": "2018-05-26T14:03:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjkyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5OTA1OA==", "fields": {"created_at": "2018-05-26T14:19:28Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0OTM2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI1Mzc2MA==", "fields": {"created_at": "2018-05-28T18:03:24Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI1MzY3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI2MDI3OA==", "fields": {"created_at": "2018-05-28T22:48:33Z", "content": "THUMBS_UP", "giver": "utkarsh2102", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MjUyMTU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI3MDI0NA==", "fields": {"created_at": "2018-05-29T06:57:41Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM5MjY3MTg2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NDEzMQ==", "fields": {"created_at": "2018-06-01T04:24:20Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jsecrest", "review": "MDEyOklzc3VlQ29tbWVudDM5MzY3ODY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NDI3OQ==", "fields": {"created_at": "2018-06-01T04:32:02Z", "content": "HOORAY", "giver": "jsecrest", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5Mzc0ODM1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNTE0MQ==", "fields": {"created_at": "2018-06-05T14:08:19Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM5NDcyMTc1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNjc0MQ==", "fields": {"created_at": "2018-06-05T14:29:28Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM5NDczMDM2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc2MzQ1Ng==", "fields": {"created_at": "2018-06-07T14:49:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3NDY2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc5OTQ1OQ==", "fields": {"created_at": "2018-06-08T05:50:48Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MjQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDgzNTYyMg==", "fields": {"created_at": "2018-06-08T18:36:00Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczMzcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzM4NQ==", "fields": {"created_at": "2018-06-16T02:01:14Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "bekicot", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTA0NzExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzQ4OQ==", "fields": {"created_at": "2018-06-16T02:16:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "bekicot", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY5MDIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzUxMw==", "fields": {"created_at": "2018-06-16T02:19:22Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE1NDgzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzUyNg==", "fields": {"created_at": "2018-06-16T02:20:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTEwMTE5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4MzU0Mw==", "fields": {"created_at": "2018-06-16T13:09:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM5NzUxNzU5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4NTQyNQ==", "fields": {"created_at": "2018-06-16T15:49:55Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE5NTUzOQ==", "fields": {"created_at": "2018-06-17T10:39:55Z", "content": "CONFUSED", "giver": "ishanSrt", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNDk2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTIyOTY5Mg==", "fields": {"created_at": "2018-06-18T13:40:04Z", "content": "THUMBS_UP", "giver": "ananyaarun", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5ODA0Mjc4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM0NzQ3Mw==", "fields": {"created_at": "2018-06-20T10:59:01Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5ODcwOTYxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MDk5Mw==", "fields": {"created_at": "2018-06-21T02:01:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MzQ3Nw==", "fields": {"created_at": "2018-06-21T03:38:52Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5ODA0MQ==", "fields": {"created_at": "2018-06-21T06:37:11Z", "content": "THUMBS_UP", "giver": "chhabrabhishek", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ1ODYzMw==", "fields": {"created_at": "2018-06-22T06:05:41Z", "content": "LAUGH", "giver": "harshhx17", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ1ODYzNQ==", "fields": {"created_at": "2018-06-22T06:05:44Z", "content": "THUMBS_UP", "giver": "harshhx17", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ2Mzk2NQ==", "fields": {"created_at": "2018-06-22T08:24:45Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQwODY0MA==", "fields": {"created_at": "2018-06-21T10:06:37Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyNzcwNw==", "fields": {"created_at": "2018-06-21T15:48:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM5NzUxNzU5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyODIyMw==", "fields": {"created_at": "2018-06-21T15:55:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2MjkxMQ==", "fields": {"created_at": "2018-06-25T14:46:50Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDA5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2MzAwMw==", "fields": {"created_at": "2018-06-25T14:48:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2NTAxMQ==", "fields": {"created_at": "2018-06-25T15:18:06Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMTU3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNDkzMg==", "fields": {"created_at": "2018-06-23T02:18:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNjUwNw==", "fields": {"created_at": "2018-06-23T05:39:31Z", "content": "THUMBS_UP", "giver": "bekicot", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNzEyMw==", "fields": {"created_at": "2018-06-23T06:56:10Z", "content": "THUMBS_UP", "giver": "starkblaze01", "receiver": "chhabrabhishek", "review": "MDEyOklzc3VlQ29tbWVudDM5OTYyOTU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUxNTA4NA==", "fields": {"created_at": "2018-06-23T18:47:34Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2ODk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUxODk1OA==", "fields": {"created_at": "2018-06-24T02:28:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUyMjA5NA==", "fields": {"created_at": "2018-06-24T09:22:04Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM5OTczMTEzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4NDI1Ng==", "fields": {"created_at": "2018-06-27T14:12:13Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc0MDA1Mw==", "fields": {"created_at": "2018-06-28T12:55:49Z", "content": "THUMBS_UP", "giver": "starkblaze01", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwMTAwNzI3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc3OTkwNA==", "fields": {"created_at": "2018-06-29T04:40:39Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc5NTI3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc4MDIzNQ==", "fields": {"created_at": "2018-06-29T04:58:09Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc4MTI0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg0Mzg1MA==", "fields": {"created_at": "2018-07-01T05:58:05Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDQwMTUzNDgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg0NDkyOQ==", "fields": {"created_at": "2018-07-01T08:11:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NTgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzA1OQ==", "fields": {"created_at": "2018-07-02T02:09:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTE4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzA3MQ==", "fields": {"created_at": "2018-07-02T02:10:13Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzE0MA==", "fields": {"created_at": "2018-07-02T02:13:44Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzMwNw==", "fields": {"created_at": "2018-07-02T02:23:07Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg2NzQyNA==", "fields": {"created_at": "2018-07-02T08:54:49Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDQwMTUzNDgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTgxNDA2Ng==", "fields": {"created_at": "2018-06-29T17:54:50Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMjkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NTYwMA==", "fields": {"created_at": "2018-07-04T06:06:51Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNzQ3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NTYyMQ==", "fields": {"created_at": "2018-07-04T06:07:26Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0MjI2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NTYyNQ==", "fields": {"created_at": "2018-07-04T06:07:34Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDA2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NzQ3Mg==", "fields": {"created_at": "2018-07-04T07:04:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDAyMzk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4NDYzOA==", "fields": {"created_at": "2018-07-04T09:25:07Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQwNjAzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk5ODI5Mw==", "fields": {"created_at": "2018-07-04T14:10:28Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDY5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjA1Mjk2Nw==", "fields": {"created_at": "2018-07-05T16:13:49Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDM5NTk0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjA5NTg5Mg==", "fields": {"created_at": "2018-07-06T12:34:32Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0MzU1NA==", "fields": {"created_at": "2018-07-08T13:09:12Z", "content": "HOORAY", "giver": "Makman2", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQwMzA3MzQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0MzU1NQ==", "fields": {"created_at": "2018-07-08T13:09:14Z", "content": "LAUGH", "giver": "Makman2", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQwMzA3MzQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0NDQ4OA==", "fields": {"created_at": "2018-07-08T14:33:26Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MTU3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0ODAyMg==", "fields": {"created_at": "2018-07-08T19:19:33Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0NDM1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE5MDA3Ng==", "fields": {"created_at": "2018-07-09T17:06:37Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3NzE3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyODM5Mg==", "fields": {"created_at": "2018-07-07T09:45:40Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkwMjYwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyOTUyNw==", "fields": {"created_at": "2018-07-07T11:36:22Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDAyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjAyOA==", "fields": {"created_at": "2018-07-07T15:23:10Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjE4NA==", "fields": {"created_at": "2018-07-07T15:36:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI3MDUzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjE4OA==", "fields": {"created_at": "2018-07-07T15:37:05Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTkwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjMwMA==", "fields": {"created_at": "2018-07-07T15:44:55Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTE3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI2MzkwMg==", "fields": {"created_at": "2018-07-10T20:29:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3MDU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI2NDAxMQ==", "fields": {"created_at": "2018-07-10T20:30:51Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2ODEyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI3ODYzNQ==", "fields": {"created_at": "2018-07-11T04:13:07Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNDAwMTU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI5NTAxNA==", "fields": {"created_at": "2018-07-11T10:50:11Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI5NTAxOQ==", "fields": {"created_at": "2018-07-11T10:50:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMDY4Nw==", "fields": {"created_at": "2018-07-10T07:15:58Z", "content": "THUMBS_DOWN", "giver": "ksdme", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMTQ0NQ==", "fields": {"created_at": "2018-07-10T07:34:45Z", "content": "THUMBS_DOWN", "giver": "palash25", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzA2Ng==", "fields": {"created_at": "2018-07-10T08:10:17Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzk3Mg==", "fields": {"created_at": "2018-07-10T08:27:49Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjM2NzMxNg==", "fields": {"created_at": "2018-07-12T13:41:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjAzNjY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjM4MzExMA==", "fields": {"created_at": "2018-07-12T17:41:07Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc2MDM3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjQxNTUxMA==", "fields": {"created_at": "2018-07-13T08:57:37Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0NTE4Ng==", "fields": {"created_at": "2018-07-18T18:08:43Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MDYxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0OTY4OQ==", "fields": {"created_at": "2018-07-18T19:32:47Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0OTY5MQ==", "fields": {"created_at": "2018-07-18T19:32:53Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTU0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0OTYwNg==", "fields": {"created_at": "2018-07-18T19:31:11Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTI2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2OTE0OQ==", "fields": {"created_at": "2018-07-19T05:50:30Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjYwOTQzMg==", "fields": {"created_at": "2018-07-18T07:14:31Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2NTg1MQ==", "fields": {"created_at": "2018-07-20T18:20:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyMjc1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2ODE5NA==", "fields": {"created_at": "2018-07-20T19:11:13Z", "content": "LAUGH", "giver": "saksham189", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2ODIwNA==", "fields": {"created_at": "2018-07-20T19:11:21Z", "content": "HOORAY", "giver": "saksham189", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4MDkzOQ==", "fields": {"created_at": "2018-07-21T06:34:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4MzY2Ng==", "fields": {"created_at": "2018-07-21T11:09:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjYzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NTIwNA==", "fields": {"created_at": "2018-07-21T13:25:56Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTM0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NjQyOA==", "fields": {"created_at": "2018-07-21T15:10:03Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NjQzMQ==", "fields": {"created_at": "2018-07-21T15:10:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTk4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NDAzNQ==", "fields": {"created_at": "2018-07-22T04:28:56Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NDAzNg==", "fields": {"created_at": "2018-07-22T04:29:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NTE3Mg==", "fields": {"created_at": "2018-07-22T06:48:32Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDQwNjgxMTM5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NTY0Nw==", "fields": {"created_at": "2018-07-22T07:49:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDQwNjg0NzU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5ODMwOQ==", "fields": {"created_at": "2018-07-22T11:48:10Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5ODQxNQ==", "fields": {"created_at": "2018-07-22T11:57:51Z", "content": "CONFUSED", "giver": "li-boxuan", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjcxNzM3NA==", "fields": {"created_at": "2018-07-19T21:00:26Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg4ODk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjczMDg1MA==", "fields": {"created_at": "2018-07-20T05:24:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2Nzc2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg0NjU4OA==", "fields": {"created_at": "2018-07-23T16:58:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1MDg2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg1MTQxNg==", "fields": {"created_at": "2018-07-23T18:25:47Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg3MjE4OA==", "fields": {"created_at": "2018-07-24T04:25:21Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTIwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxNTg1MQ==", "fields": {"created_at": "2018-07-23T07:04:40Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyMzkzMA==", "fields": {"created_at": "2018-07-23T09:54:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMDQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyNDUxNg==", "fields": {"created_at": "2018-07-23T10:06:21Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyNDgyMg==", "fields": {"created_at": "2018-07-23T10:12:57Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDM5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgzMTcyMw==", "fields": {"created_at": "2018-07-23T12:55:35Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgzNDgyMQ==", "fields": {"created_at": "2018-07-23T13:50:33Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzA3NjY5NA==", "fields": {"created_at": "2018-07-27T11:33:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2ODEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAxNTAyMw==", "fields": {"created_at": "2018-07-26T10:45:40Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM5OTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAyNDkzNQ==", "fields": {"created_at": "2018-07-26T14:00:42Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjE1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAyNzY4NA==", "fields": {"created_at": "2018-07-26T14:42:24Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQwODA5NzgyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE1OTc2OA==", "fields": {"created_at": "2018-07-30T11:22:18Z", "content": "THUMBS_UP", "giver": "gutsytechster", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODgyMDU2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDQxOQ==", "fields": {"created_at": "2018-07-30T11:39:09Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDQwODY5MTkwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDY0MA==", "fields": {"created_at": "2018-07-30T11:44:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NjI3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDgxMQ==", "fields": {"created_at": "2018-07-30T11:48:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDgyMA==", "fields": {"created_at": "2018-07-30T11:48:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDk5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2NDkxNw==", "fields": {"created_at": "2018-07-30T13:14:31Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2NDkyMQ==", "fields": {"created_at": "2018-07-30T13:14:35Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2Nzg2OA==", "fields": {"created_at": "2018-07-30T14:02:59Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODY3NTIxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE3MDY5OA==", "fields": {"created_at": "2018-07-30T14:43:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE3MDc4OA==", "fields": {"created_at": "2018-07-30T14:45:20Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyMjkxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE3NzIzMA==", "fields": {"created_at": "2018-07-30T16:26:35Z", "content": "LAUGH", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODkyNDA0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE5OTYwMA==", "fields": {"created_at": "2018-07-31T00:53:39Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODkxNTY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMDgwMA==", "fields": {"created_at": "2018-07-28T02:31:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczMjE2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExNzkxMQ==", "fields": {"created_at": "2018-07-28T14:31:32Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NDM5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjQ5OA==", "fields": {"created_at": "2018-07-29T05:05:47Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDc2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjc5NQ==", "fields": {"created_at": "2018-07-29T05:49:39Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "HemabhKamboj", "review": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjk2NQ==", "fields": {"created_at": "2018-07-29T06:14:20Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyODA1MA==", "fields": {"created_at": "2018-07-29T08:23:21Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "HemabhKamboj", "review": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyODUxNg==", "fields": {"created_at": "2018-07-29T09:09:17Z", "content": "LAUGH", "giver": "kriti21", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODY2MjgwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyOTAxMg==", "fields": {"created_at": "2018-07-29T09:53:42Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMDc2Mw==", "fields": {"created_at": "2018-07-29T12:28:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDk0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMDgzMA==", "fields": {"created_at": "2018-07-29T12:37:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTMwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzNjUxNw==", "fields": {"created_at": "2018-07-29T19:52:37Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI1OTI0Mw==", "fields": {"created_at": "2018-07-31T21:56:51Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTgwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI1OTIzNw==", "fields": {"created_at": "2018-07-31T21:56:46Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTk5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI5MTg4Mw==", "fields": {"created_at": "2018-08-01T13:13:43Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NDk5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI5ODkzOA==", "fields": {"created_at": "2018-08-01T14:53:39Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjcyNzAwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzIyOTAzNg==", "fields": {"created_at": "2018-07-31T13:29:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjQ5NTUxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzIyOTg2NQ==", "fields": {"created_at": "2018-07-31T13:42:30Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3ODk1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzM5NzA1Nw==", "fields": {"created_at": "2018-08-03T05:37:50Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MjA3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODQ5NQ==", "fields": {"created_at": "2018-08-04T08:03:02Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDQxMDEzNjQwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODUwNw==", "fields": {"created_at": "2018-08-04T08:03:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDQxMDEzNjE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODUxMA==", "fields": {"created_at": "2018-08-04T08:03:45Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMDEwOTMzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODUyNA==", "fields": {"created_at": "2018-08-04T08:05:39Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMxMTU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODUyOQ==", "fields": {"created_at": "2018-08-04T08:06:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA3MzYxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MDc4MQ==", "fields": {"created_at": "2018-08-04T12:00:39Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjg5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MTMxOA==", "fields": {"created_at": "2018-08-04T12:45:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNzg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MjEwNg==", "fields": {"created_at": "2018-08-04T13:52:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2MzUzMQ==", "fields": {"created_at": "2018-08-05T09:24:11Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2MzUzNA==", "fields": {"created_at": "2018-08-05T09:24:18Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NjM1Mw==", "fields": {"created_at": "2018-08-05T13:51:06Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjkyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2Nzg0NA==", "fields": {"created_at": "2018-08-05T15:43:20Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2Nzg1NA==", "fields": {"created_at": "2018-08-05T15:44:01Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NzgzOA==", "fields": {"created_at": "2018-08-05T15:42:57Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NzgzOQ==", "fields": {"created_at": "2018-08-05T15:43:09Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDM1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4MTAyMw==", "fields": {"created_at": "2018-08-06T06:12:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2MDE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4NDc1MA==", "fields": {"created_at": "2018-08-06T07:54:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMDA0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4NTE0Ng==", "fields": {"created_at": "2018-08-06T08:03:06Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMDYxNjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4NTkzMQ==", "fields": {"created_at": "2018-08-06T08:19:07Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ5NDg1MQ==", "fields": {"created_at": "2018-08-06T11:33:29Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gaocegege", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2OTAxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQxODc5OQ==", "fields": {"created_at": "2018-08-03T14:16:34Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU0MTM5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzU0MDIwMA==", "fields": {"created_at": "2018-08-07T06:00:22Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjI0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzU0MDIyOA==", "fields": {"created_at": "2018-08-07T06:01:04Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MDI2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzU0MDM0Mw==", "fields": {"created_at": "2018-08-07T06:04:06Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUxMDE4Nw==", "fields": {"created_at": "2018-08-06T16:06:25Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUxMTg4NA==", "fields": {"created_at": "2018-08-06T16:36:47Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyMDM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUyNzAxOA==", "fields": {"created_at": "2018-08-06T21:48:44Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTA0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUyNzIyNw==", "fields": {"created_at": "2018-08-06T21:53:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUzODY0OA==", "fields": {"created_at": "2018-08-07T04:59:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAzOTExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUzOTkxNQ==", "fields": {"created_at": "2018-08-07T05:50:37Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0NDM1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY2OTk3OQ==", "fields": {"created_at": "2018-08-09T05:34:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMzE2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3MDAwOQ==", "fields": {"created_at": "2018-08-09T05:35:58Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyOTUxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3MDE2MQ==", "fields": {"created_at": "2018-08-09T05:41:10Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwMzIwOTMyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3MDE4Mw==", "fields": {"created_at": "2018-08-09T05:42:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDQwMzIwODY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4MjA4NA==", "fields": {"created_at": "2018-08-09T09:52:40Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODgwNTYyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzYzMjUyOQ==", "fields": {"created_at": "2018-08-08T14:59:16Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjkyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc0MjI4Mg==", "fields": {"created_at": "2018-08-10T09:25:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwODgwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc1MjkyNQ==", "fields": {"created_at": "2018-08-10T13:30:01Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzA1NA==", "fields": {"created_at": "2018-08-11T04:29:34Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMjI0OTk3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzA3Mw==", "fields": {"created_at": "2018-08-11T04:31:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTM5NjYxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzMzNg==", "fields": {"created_at": "2018-08-11T05:06:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNTgyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzUwNA==", "fields": {"created_at": "2018-08-11T05:30:01Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4Mzg4Mw==", "fields": {"created_at": "2018-08-11T06:19:32Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNzk3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4NjM1Mw==", "fields": {"created_at": "2018-08-11T10:27:58Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyMzE5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4NjMyMQ==", "fields": {"created_at": "2018-08-11T10:24:30Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyMjk4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4ODY2MQ==", "fields": {"created_at": "2018-08-11T13:59:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyNjY4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1MA==", "fields": {"created_at": "2018-08-11T15:58:34Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTMzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1Mw==", "fields": {"created_at": "2018-08-11T15:58:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MDA4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1Nw==", "fields": {"created_at": "2018-08-11T15:59:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMTA4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1OQ==", "fields": {"created_at": "2018-08-11T15:59:08Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTY4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE2MQ==", "fields": {"created_at": "2018-08-11T15:59:16Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMjQyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5Nzk4OA==", "fields": {"created_at": "2018-08-12T07:03:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NDkyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODA4Nw==", "fields": {"created_at": "2018-08-12T07:14:00Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NTA3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODExMw==", "fields": {"created_at": "2018-08-12T07:16:26Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NTE0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODEyNQ==", "fields": {"created_at": "2018-08-12T07:18:21Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NDkyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODg0Mw==", "fields": {"created_at": "2018-08-12T08:35:28Z", "content": "LAUGH", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjgyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODgyNQ==", "fields": {"created_at": "2018-08-12T08:33:17Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjUwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODgyOQ==", "fields": {"created_at": "2018-08-12T08:33:36Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjgwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODgzMA==", "fields": {"created_at": "2018-08-12T08:33:39Z", "content": "LAUGH", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0Njc1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5OTA2NQ==", "fields": {"created_at": "2018-08-12T08:56:41Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxMjMyODUyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5OTQ0Mg==", "fields": {"created_at": "2018-08-12T09:31:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxMjMyNjcwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5OTQ0NA==", "fields": {"created_at": "2018-08-12T09:31:28Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDQxMjMyODMwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5OTQ0OA==", "fields": {"created_at": "2018-08-12T09:31:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxMjMyODUyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzcwMTAxMw==", "fields": {"created_at": "2018-08-09T15:33:48Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODk2ODExOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzcwNDIwNw==", "fields": {"created_at": "2018-08-09T16:24:54Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDQxMTc3MjMxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzg0Mjc4Mw==", "fields": {"created_at": "2018-08-13T15:33:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "saksham189", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY0MzQxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzg0MjkxMg==", "fields": {"created_at": "2018-08-13T15:35:19Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "saksham189", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY0NDM5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzg4NjA5Ng==", "fields": {"created_at": "2018-08-14T09:55:13Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTg4OTk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDc0MA==", "fields": {"created_at": "2018-08-12T11:34:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDc0Mg==", "fields": {"created_at": "2018-08-12T11:35:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTExNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDczMw==", "fields": {"created_at": "2018-08-12T11:34:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDczNg==", "fields": {"created_at": "2018-08-12T11:34:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDg5NQ==", "fields": {"created_at": "2018-08-12T11:47:30Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTk3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTMxNg==", "fields": {"created_at": "2018-08-12T12:25:03Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTQ0NQ==", "fields": {"created_at": "2018-08-12T12:36:55Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTQ1NA==", "fields": {"created_at": "2018-08-12T12:37:22Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTUyMw==", "fields": {"created_at": "2018-08-12T12:42:10Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTUyNg==", "fields": {"created_at": "2018-08-12T12:42:43Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1Mzg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTcxMg==", "fields": {"created_at": "2018-08-12T13:00:55Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1NDM3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMzQ0NQ==", "fields": {"created_at": "2018-08-12T15:13:59Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNzY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTI5Ng==", "fields": {"created_at": "2018-08-12T17:36:21Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ4Ng==", "fields": {"created_at": "2018-08-12T17:52:49Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDY0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ4OA==", "fields": {"created_at": "2018-08-12T17:52:51Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDYyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ4OQ==", "fields": {"created_at": "2018-08-12T17:52:58Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDU3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ5Mg==", "fields": {"created_at": "2018-08-12T17:53:49Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDU1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ5NQ==", "fields": {"created_at": "2018-08-12T17:53:53Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ5Ng==", "fields": {"created_at": "2018-08-12T17:53:55Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUxMg==", "fields": {"created_at": "2018-08-12T17:55:22Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUxMw==", "fields": {"created_at": "2018-08-12T17:55:26Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUxOA==", "fields": {"created_at": "2018-08-12T17:55:40Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDM0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUyNw==", "fields": {"created_at": "2018-08-12T17:56:31Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDMyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUzMA==", "fields": {"created_at": "2018-08-12T17:56:41Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDI5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNDA5Mg==", "fields": {"created_at": "2018-08-13T04:31:42Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4OTU4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNDAzMg==", "fields": {"created_at": "2018-08-13T04:27:50Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODA5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNDAzNA==", "fields": {"created_at": "2018-08-13T04:27:53Z", "content": "LAUGH", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODAwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNDAzNw==", "fields": {"created_at": "2018-08-13T04:28:08Z", "content": "HOORAY", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODIyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNjUyMQ==", "fields": {"created_at": "2018-08-13T06:22:36Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ3NTU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNzM4Mw==", "fields": {"created_at": "2018-08-13T06:50:56Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTUwNTI3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgyMTY5Mw==", "fields": {"created_at": "2018-08-13T08:40:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTUyODA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzMzg0NQ==", "fields": {"created_at": "2018-08-13T13:15:03Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTYwMTA1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzMzg0Nw==", "fields": {"created_at": "2018-08-13T13:15:05Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTYwMDk0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzOTE0Ng==", "fields": {"created_at": "2018-08-13T14:35:59Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzOTE1Ng==", "fields": {"created_at": "2018-08-13T14:36:09Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDU5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzOTE2Ng==", "fields": {"created_at": "2018-08-13T14:36:17Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzk0NjQ0Mg==", "fields": {"created_at": "2018-08-15T09:41:20Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMzA0MzM5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzk1OTc2NQ==", "fields": {"created_at": "2018-08-15T14:40:02Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDQxMzEzMTE2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzkwMzA0OA==", "fields": {"created_at": "2018-08-14T15:11:05Z", "content": "LAUGH", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTk4NzA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODEwODM5Mw==", "fields": {"created_at": "2018-08-18T06:50:03Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxNDAxMjMxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODEwODQxMw==", "fields": {"created_at": "2018-08-18T06:53:16Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDQxMzk5OTEwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODExMDE5Mg==", "fields": {"created_at": "2018-08-18T10:00:34Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "Akhelesh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA3MDEwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODM0MDAwNQ==", "fields": {"created_at": "2018-08-23T01:27:16Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjA3NjY1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODQxODc3Ng==", "fields": {"created_at": "2018-08-24T09:41:07Z", "content": "THUMBS_UP", "giver": "123vivekr", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjUyOTEzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODg0NzAwMw==", "fields": {"created_at": "2018-09-03T09:29:53Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "mach64", "review": "MDEyOklzc3VlQ29tbWVudDQxODA1NzE0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODg0NzYyMA==", "fields": {"created_at": "2018-09-03T09:41:31Z", "content": "THUMBS_UP", "giver": "Mah1ndra", "receiver": "mach64", "review": "MDEyOklzc3VlQ29tbWVudDQxODA1NzE0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgwNzUwNg==", "fields": {"created_at": "2018-09-01T12:59:24Z", "content": "LAUGH", "giver": "mach64", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxNzg1ODA0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgyMDUyOQ==", "fields": {"created_at": "2018-09-02T09:04:14Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxNzg5NjUxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgyMTE3NQ==", "fields": {"created_at": "2018-09-02T09:57:07Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUxNjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgyMTY5Ng==", "fields": {"created_at": "2018-09-02T10:41:36Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUzNTE5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgyNzY1OA==", "fields": {"created_at": "2018-09-02T18:05:46Z", "content": "THUMBS_UP", "giver": "atb00ker", "receiver": "shikharvaish28", "review": "MDEyOklzc3VlQ29tbWVudDQxNzk0ODM1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgzNDEwNg==", "fields": {"created_at": "2018-09-03T02:22:24Z", "content": "THUMBS_UP", "giver": "Mah1ndra", "receiver": "shikharvaish28", "review": "MDEyOklzc3VlQ29tbWVudDQxNzk0ODM1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgzODQ0NQ==", "fields": {"created_at": "2018-09-03T06:09:56Z", "content": "THUMBS_UP", "giver": "Mah1ndra", "receiver": "mach64", "review": "MDEyOklzc3VlQ29tbWVudDQxODAwMTg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgzODQ0Ng==", "fields": {"created_at": "2018-09-03T06:10:05Z", "content": "THUMBS_UP", "giver": "Mah1ndra", "receiver": "mach64", "review": "MDEyOklzc3VlQ29tbWVudDQxODAwNTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODk1NjcwNA==", "fields": {"created_at": "2018-09-05T10:05:33Z", "content": "LAUGH", "giver": "Utkarsh1308", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxODY2ODAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODk2NTc4Mw==", "fields": {"created_at": "2018-09-05T13:11:17Z", "content": "THUMBS_UP", "giver": "atb00ker", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTI2MTM2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTA5MDk2NQ==", "fields": {"created_at": "2018-09-07T12:54:47Z", "content": "LAUGH", "giver": "AdeshAtole", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxODY2ODAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTE1NDUzOA==", "fields": {"created_at": "2018-09-10T01:32:16Z", "content": "THUMBS_DOWN", "giver": "li-boxuan", "receiver": "shikharvaish28", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTkzMjgwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTE3Njk2NA==", "fields": {"created_at": "2018-09-10T12:15:49Z", "content": "LAUGH", "giver": "atb00ker", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxODY2ODAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTEyMTM3MQ==", "fields": {"created_at": "2018-09-08T03:00:26Z", "content": "HEART", "giver": "abeerzz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxNzg2MjI5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTM3NDQ3MA==", "fields": {"created_at": "2018-09-13T14:17:58Z", "content": "HOORAY", "giver": "corona10", "receiver": "haeungun", "review": "MDEyOklzc3VlQ29tbWVudDQyMTAxNjI1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTQ4MzMzOA==", "fields": {"created_at": "2018-09-16T15:26:21Z", "content": "THUMBS_DOWN", "giver": "li-boxuan", "receiver": "rishabhgarg25699", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkxNzYxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTQ4NDczNw==", "fields": {"created_at": "2018-09-16T17:22:06Z", "content": "THUMBS_UP", "giver": "123vivekr", "receiver": "PrajwalM2212", "review": "MDEyOklzc3VlQ29tbWVudDQyMTc5OTE0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTUyMTMyNw==", "fields": {"created_at": "2018-09-17T15:48:07Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkzOTUyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTY3NzE3MQ==", "fields": {"created_at": "2018-09-19T23:30:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Man-Jain", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODk0MTI1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTYxNzQ2Ng==", "fields": {"created_at": "2018-09-19T04:23:29Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODU5NDMwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTYxNzQxNw==", "fields": {"created_at": "2018-09-19T04:21:23Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODUwNTYwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTYxNzc4MQ==", "fields": {"created_at": "2018-09-19T04:39:36Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODU5NDMwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTYxNzgyMw==", "fields": {"created_at": "2018-09-19T04:41:16Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODUwNTYwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg1MzEwMw==", "fields": {"created_at": "2018-09-24T13:39:15Z", "content": "HEART", "giver": "joenash", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg2MDk2NQ==", "fields": {"created_at": "2018-09-24T15:37:17Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAxNjM2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg2MTc1Mw==", "fields": {"created_at": "2018-09-24T15:48:27Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg2MTc1Nw==", "fields": {"created_at": "2018-09-24T15:48:32Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg2NTg1NA==", "fields": {"created_at": "2018-09-24T16:58:00Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg4ODA0Mw==", "fields": {"created_at": "2018-09-25T01:38:30Z", "content": "THUMBS_UP", "giver": "haxzie", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg4ODAyNw==", "fields": {"created_at": "2018-09-25T01:38:08Z", "content": "HEART", "giver": "haxzie", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg5MzA0NA==", "fields": {"created_at": "2018-09-25T05:14:53Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg5MzI2MQ==", "fields": {"created_at": "2018-09-25T05:22:43Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTk2MzgyMA==", "fields": {"created_at": "2018-09-26T07:31:28Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "aditya81070", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTczMTk1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTkwNjgxNw==", "fields": {"created_at": "2018-09-25T10:10:20Z", "content": "HEART", "giver": "joenash", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDQyNDIxMjcyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE0MTg5Ng==", "fields": {"created_at": "2018-09-29T08:18:40Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "rishabhgarg25699", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQxODM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE3Nzc0Mg==", "fields": {"created_at": "2018-10-01T07:08:05Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE3Nzk4MA==", "fields": {"created_at": "2018-10-01T07:15:55Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE3ODE2NA==", "fields": {"created_at": "2018-10-01T07:21:16Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQyNTc3ODA5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE3ODU0Mg==", "fields": {"created_at": "2018-10-01T07:31:41Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "rishabhgarg25699", "review": "MDEyOklzc3VlQ29tbWVudDQyNTgxMTI5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE4MTM1Ng==", "fields": {"created_at": "2018-10-01T08:37:21Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "Daronion", "review": "MDEyOklzc3VlQ29tbWVudDQyNTgxNzM3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE5NDk0MQ==", "fields": {"created_at": "2018-10-01T13:32:41Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDEzOTM2OA==", "fields": {"created_at": "2018-09-29T03:55:46Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDEzOTM3NA==", "fields": {"created_at": "2018-09-29T03:56:01Z", "content": "HEART", "giver": "yashovardhanagrawal", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDI5OTQzOQ==", "fields": {"created_at": "2018-10-03T05:13:03Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "bhawesh96", "review": "MDEyOklzc3VlQ29tbWVudDQyNjUwNzMzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDIyNjM0NQ==", "fields": {"created_at": "2018-10-01T23:31:29Z", "content": "THUMBS_UP", "giver": "Utkarsh1308", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDQyNTk2Mjk5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDIyNjMyNA==", "fields": {"created_at": "2018-10-01T23:30:30Z", "content": "THUMBS_UP", "giver": "Utkarsh1308", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDMyODQ4MQ==", "fields": {"created_at": "2018-10-03T15:18:58Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "rishabhgarg25699", "review": "MDEyOklzc3VlQ29tbWVudDQyNjQwNDQ4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ1MjAyOA==", "fields": {"created_at": "2018-10-05T14:36:46Z", "content": "THUMBS_UP", "giver": "ayan-b", "receiver": "shikharvaish28", "review": "MDEyOklzc3VlQ29tbWVudDQyNzM4NjA4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ2MTg3Nw==", "fields": {"created_at": "2018-10-05T17:38:54Z", "content": "THUMBS_UP", "giver": "ayan-b", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyNzQ0MTkyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ2MTg4MQ==", "fields": {"created_at": "2018-10-05T17:38:58Z", "content": "THUMBS_UP", "giver": "ayan-b", "receiver": "srivama", "review": "MDEyOklzc3VlQ29tbWVudDQyNzQ0Mjk5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3Mjc5MQ==", "fields": {"created_at": "2018-10-05T21:52:52Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "ayan-b", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE0NzQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3Mjk2Ng==", "fields": {"created_at": "2018-10-05T21:57:56Z", "content": "THUMBS_UP", "giver": "ayan-b", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE0ODA3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3NjY3Mw==", "fields": {"created_at": "2018-10-06T01:44:07Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDQyNzQ5MzAzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3NjY3NQ==", "fields": {"created_at": "2018-10-06T01:44:10Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDQyNzQ5MjY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3NzQ5MA==", "fields": {"created_at": "2018-10-06T03:07:34Z", "content": "HOORAY", "giver": "Utkarsh1308", "receiver": "shikharvaish28", "review": "MDEyOklzc3VlQ29tbWVudDQyNDA5MTYxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3ODcxNg==", "fields": {"created_at": "2018-10-06T05:46:58Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "ayan-b", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE3MjY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ5NTAyNw==", "fields": {"created_at": "2018-10-07T07:51:20Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "ayan-b", "review": "MDEyOklzc3VlQ29tbWVudDQyNzYyNDk5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ5NTU1Mw==", "fields": {"created_at": "2018-10-07T08:43:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "sladyn98", "review": "MDEyOklzc3VlQ29tbWVudDQyNzYzNjA4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ5NTY0MA==", "fields": {"created_at": "2018-10-07T08:49:29Z", "content": "HEART", "giver": "RaiVaibhav", "receiver": "sladyn98", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzIwNTY2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDU0ODIxNg==", "fields": {"created_at": "2018-10-08T18:51:44Z", "content": "THUMBS_UP", "giver": "richardson-souza", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQyNzkwNjU5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDUwMDQ2Mg==", "fields": {"created_at": "2018-10-07T15:28:09Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "Dhiraj240", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE4MDkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDUwMzQ5MA==", "fields": {"created_at": "2018-10-07T19:07:52Z", "content": "THUMBS_UP", "giver": "haxzie", "receiver": "ayan-b", "review": "MDEyOklzc3VlQ29tbWVudDQyNzY3ODIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDUzODU4NA==", "fields": {"created_at": "2018-10-08T15:41:13Z", "content": "THUMBS_UP", "giver": "richardson-souza", "receiver": "sourabh1031", "review": "MDEyOklzc3VlQ29tbWVudDQyNzcyNjk1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDY3MDQ3OQ==", "fields": {"created_at": "2018-10-10T16:59:31Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "AkshJain99", "review": "MDEyOklzc3VlQ29tbWVudDQyODY0NjMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDY3Mjg4NA==", "fields": {"created_at": "2018-10-10T17:39:39Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "AkshJain99", "review": "MDEyOklzc3VlQ29tbWVudDQyODY0NjMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDY3ODgwMw==", "fields": {"created_at": "2018-10-10T19:23:46Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "AkshJain99", "review": "MDEyOklzc3VlQ29tbWVudDQyODY5ODEyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDc4MTc1OQ==", "fields": {"created_at": "2018-10-12T12:37:09Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "hritikhks", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDczMDYzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDc4NjE1MA==", "fields": {"created_at": "2018-10-12T14:03:33Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "Naveenaidu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTgxODQ4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDg0MjAyMg==", "fields": {"created_at": "2018-10-14T21:00:47Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5Mjc1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDg2NTk0Ng==", "fields": {"created_at": "2018-10-15T11:34:16Z", "content": "THUMBS_UP", "giver": "ManthanKeim", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyOTgxMzA4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDgxNzI0Ng==", "fields": {"created_at": "2018-10-13T09:17:24Z", "content": "THUMBS_UP", "giver": "atb00ker", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkwMzMxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDgxNzI4MQ==", "fields": {"created_at": "2018-10-13T09:21:43Z", "content": "THUMBS_UP", "giver": "atb00ker", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDcyNDUyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDgzNTYwNA==", "fields": {"created_at": "2018-10-14T13:38:16Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQyOTYyNjk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDgzNjQ4NA==", "fields": {"created_at": "2018-10-14T14:44:48Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NDkxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDgzODk0NA==", "fields": {"created_at": "2018-10-14T17:35:11Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NTgwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDk4NTIyOA==", "fields": {"created_at": "2018-10-17T08:12:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc4NDIxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDk4NjMwMg==", "fields": {"created_at": "2018-10-17T08:30:26Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTgxOTU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDkyMjE0Nw==", "fields": {"created_at": "2018-10-16T09:10:14Z", "content": "THUMBS_UP", "giver": "srivama", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQzMDE2MDk1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTA0NTM1MQ==", "fields": {"created_at": "2018-10-18T04:55:18Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQzMDgyODkxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTA1NTkyNA==", "fields": {"created_at": "2018-10-18T09:09:58Z", "content": "LAUGH", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk2MTg3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTA1NjExMA==", "fields": {"created_at": "2018-10-18T09:12:52Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk2MTg3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTA2NzcyMg==", "fields": {"created_at": "2018-10-18T13:00:57Z", "content": "THUMBS_UP", "giver": "Ananthavijay", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQzMDk5ODY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTA4NTY1Mg==", "fields": {"created_at": "2018-10-18T17:22:42Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQzMDkzOTc2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTAwMTgyNw==", "fields": {"created_at": "2018-10-17T13:13:28Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NTU2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTAwMzE1MQ==", "fields": {"created_at": "2018-10-17T13:33:53Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ayan-b", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAwMjU5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTAwMzEwNw==", "fields": {"created_at": "2018-10-17T13:33:19Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Man-Jain", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAwMjAxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTAwMzU5Mg==", "fields": {"created_at": "2018-10-17T13:39:54Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk5NTQyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTAwNjg5NA==", "fields": {"created_at": "2018-10-17T14:27:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Man-Jain", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAwMDIwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTAxMjM5MQ==", "fields": {"created_at": "2018-10-17T15:45:06Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk2MTg3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE2MjQ1OQ==", "fields": {"created_at": "2018-10-20T01:14:02Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "AkshJain99", "review": "MDEyOklzc3VlQ29tbWVudDQzMTI0MDQxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE2NTQyNw==", "fields": {"created_at": "2018-10-20T07:11:21Z", "content": "HOORAY", "giver": "AkshJain99", "receiver": "AkshJain99", "review": "MDEyOklzc3VlQ29tbWVudDQzMTI0MDQxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE2NjgzNw==", "fields": {"created_at": "2018-10-20T09:30:01Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "bkhanale", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgyMTc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE2Njk3MA==", "fields": {"created_at": "2018-10-20T09:40:19Z", "content": "THUMBS_UP", "giver": "Dhiraj240", "receiver": "bkhanale", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgyMTc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE2NzMwNA==", "fields": {"created_at": "2018-10-20T10:10:23Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgxOTIwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE2NzgxOQ==", "fields": {"created_at": "2018-10-20T10:55:35Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQzMTU2OTk3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE2ODgwNw==", "fields": {"created_at": "2018-10-20T12:20:09Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQzMTU3NTMxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE2OTA5Nw==", "fields": {"created_at": "2018-10-20T12:42:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "AkshJain99", "review": "MDEyOklzc3VlQ29tbWVudDQzMTU3MTgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE3MDQyOA==", "fields": {"created_at": "2018-10-20T14:25:16Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgyNzAxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE3NDQ0NQ==", "fields": {"created_at": "2018-10-20T19:25:00Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "blossomica", "review": "MDEyOklzc3VlQ29tbWVudDQzMTYwODkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE4NzE0Mg==", "fields": {"created_at": "2018-10-21T15:54:30Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blossomica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjg2NzMyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTE5NTAxNA==", "fields": {"created_at": "2018-10-22T01:45:03Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "subhaminion", "review": "MDEyOklzc3VlQ29tbWVudDQzMTY5Nzg2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTI0MTkxNQ==", "fields": {"created_at": "2018-10-23T01:17:24Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjg2NTE3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTIxODI0Nw==", "fields": {"created_at": "2018-10-22T16:15:05Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "sourabh1031", "review": "MDEyOklzc3VlQ29tbWVudDQzMTg4MzA4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTIxODM4Mw==", "fields": {"created_at": "2018-10-22T16:17:38Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "ayan-b", "review": "MDEyOklzc3VlQ29tbWVudDQzMTg4MzYyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTM4Mzg2MA==", "fields": {"created_at": "2018-10-25T02:48:30Z", "content": "THUMBS_UP", "giver": "CLiu13", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODAxODMyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTM4Mzk4Mw==", "fields": {"created_at": "2018-10-25T02:52:53Z", "content": "THUMBS_UP", "giver": "CLiu13", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDQzMjg5NTg0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTM4MzkwOQ==", "fields": {"created_at": "2018-10-25T02:50:09Z", "content": "THUMBS_UP", "giver": "CLiu13", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODAxODEyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTM4NDU1MQ==", "fields": {"created_at": "2018-10-25T03:12:34Z", "content": "THUMBS_UP", "giver": "CLiu13", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODAyMjQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTQ1MTU3OQ==", "fields": {"created_at": "2018-10-26T02:23:29Z", "content": "THUMBS_UP", "giver": "CLiu13", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQzMzI2NDk4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTQyMjEzMg==", "fields": {"created_at": "2018-10-25T15:42:42Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "SerekKiri", "review": "MDEyOklzc3VlQ29tbWVudDQzMzEwMTE5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTU0Njk4MQ==", "fields": {"created_at": "2018-10-29T04:35:48Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc5NzQ5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTU0ODUwMQ==", "fields": {"created_at": "2018-10-29T05:56:27Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc5NzQ5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTU0ODUwOA==", "fields": {"created_at": "2018-10-29T05:56:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc5NjkwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTU0OTg2NQ==", "fields": {"created_at": "2018-10-29T06:54:37Z", "content": "THUMBS_UP", "giver": "ashwini0529", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc5NzQ5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTU0OTgzMw==", "fields": {"created_at": "2018-10-29T06:53:23Z", "content": "THUMBS_UP", "giver": "ashwini0529", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc5NjkwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTU1MDA2Ng==", "fields": {"created_at": "2018-10-29T07:01:39Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDQzMzgwNjgxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTU3MDUxNg==", "fields": {"created_at": "2018-10-29T14:03:35Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "bkhanale", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODkzNTc3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTU3NjczMw==", "fields": {"created_at": "2018-10-29T15:31:23Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "abhishalya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODk0NTg5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTU4MzM2NA==", "fields": {"created_at": "2018-10-29T17:07:39Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODk3OTgxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTUyMDc0Ng==", "fields": {"created_at": "2018-10-27T18:20:06Z", "content": "THUMBS_UP", "giver": "aquatiko", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODcxMTMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTUzMTMyNA==", "fields": {"created_at": "2018-10-28T12:26:48Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "shikharvaish28", "review": "MDEyOklzc3VlQ29tbWVudDQzMzY5NzE2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTUzMTc2NA==", "fields": {"created_at": "2018-10-28T13:02:27Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc0NzU5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTUzMjA5NQ==", "fields": {"created_at": "2018-10-28T13:22:09Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc0NzYwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTUzMjI4OQ==", "fields": {"created_at": "2018-10-28T13:36:15Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc0NzY2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTY1MzA0OQ==", "fields": {"created_at": "2018-10-30T17:21:26Z", "content": "THUMBS_UP", "giver": "aquatiko", "receiver": "mach64", "review": "MDEyOklzc3VlQ29tbWVudDQzNDI3ODYzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTYzNzYzMQ==", "fields": {"created_at": "2018-10-30T13:55:23Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "seeeturtle", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTMxMjE4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTc2MjUxNg==", "fields": {"created_at": "2018-11-01T11:47:12Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTU2NDM2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTc4MDM0OQ==", "fields": {"created_at": "2018-11-01T17:11:14Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDEwOTU2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTg3NzYyNQ==", "fields": {"created_at": "2018-11-04T11:00:29Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "sourabh1031", "review": "MDEyOklzc3VlQ29tbWVudDQzNTY1ODkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTg4NDE1OA==", "fields": {"created_at": "2018-11-04T18:41:55Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "sourabh1031", "review": "MDEyOklzc3VlQ29tbWVudDQzNTY2OTQ0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTgwOTA0Mw==", "fields": {"created_at": "2018-11-02T05:54:57Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDEwOTU2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTgwOTA1MQ==", "fields": {"created_at": "2018-11-02T05:55:23Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDEwOTY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTgxMTc2NQ==", "fields": {"created_at": "2018-11-02T07:32:24Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDI3NjE5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTgxOTk3OA==", "fields": {"created_at": "2018-11-02T10:43:04Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDI4ODU2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTk5OTY5NQ==", "fields": {"created_at": "2018-11-06T17:39:32Z", "content": "THUMBS_UP", "giver": "SerekKiri", "receiver": "akshatkarani", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTIxOTEyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTkxNTQzMQ==", "fields": {"created_at": "2018-11-05T13:25:13Z", "content": "THUMBS_UP", "giver": "amalrajan", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDYyMzI1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTkxNjI1MQ==", "fields": {"created_at": "2018-11-05T13:40:33Z", "content": "THUMBS_UP", "giver": "amalrajan", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDc1MDEwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMTkxOTE4OQ==", "fields": {"created_at": "2018-11-05T14:28:32Z", "content": "THUMBS_UP", "giver": "SerekKiri", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDc2MTExOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjA3MDg3Mg==", "fields": {"created_at": "2018-11-07T18:34:40Z", "content": "THUMBS_UP", "giver": "SerekKiri", "receiver": "Dhiraj240", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYyNjIzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjAwMDgwMA==", "fields": {"created_at": "2018-11-06T17:58:23Z", "content": "THUMBS_UP", "giver": "rajdeepbharati", "receiver": "akshatkarani", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTIxOTEyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjAyNjIwMw==", "fields": {"created_at": "2018-11-07T03:52:40Z", "content": "THUMBS_UP", "giver": "akshatkarani", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTM2MzE3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjAzNjU5NA==", "fields": {"created_at": "2018-11-07T09:12:15Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTM3NTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjAzODc2NQ==", "fields": {"created_at": "2018-11-07T09:48:49Z", "content": "THUMBS_UP", "giver": "SerekKiri", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTM3NTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjE0NDY3NQ==", "fields": {"created_at": "2018-11-08T20:18:36Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTg0OTA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjE0NTM5Mw==", "fields": {"created_at": "2018-11-08T20:31:47Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "abhishalya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjA0NjYyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjE2NDQzNA==", "fields": {"created_at": "2018-11-09T06:05:43Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTk1MzQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjE3ODcxNA==", "fields": {"created_at": "2018-11-09T11:48:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "akshatkarani", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjE4NjI5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjE4MDg1NA==", "fields": {"created_at": "2018-11-09T12:40:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "KVGarg", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjIzNTI3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjE4MTI4NA==", "fields": {"created_at": "2018-11-09T12:50:22Z", "content": "THUMBS_UP", "giver": "KVGarg", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjIzOTcxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjE4NjUzNw==", "fields": {"created_at": "2018-11-09T14:35:15Z", "content": "THUMBS_UP", "giver": "Divi09112", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjIyODYwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjE5MTc2Mg==", "fields": {"created_at": "2018-11-09T15:57:30Z", "content": "THUMBS_UP", "giver": "KVGarg", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjI2NTY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjEwMTE2OA==", "fields": {"created_at": "2018-11-08T07:42:53Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTc2NTI4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjExMTMyNg==", "fields": {"created_at": "2018-11-08T10:56:39Z", "content": "THUMBS_UP", "giver": "SerekKiri", "receiver": "ayan-b", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTg0MTgwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjEyNjk5Ng==", "fields": {"created_at": "2018-11-08T15:37:24Z", "content": "THUMBS_UP", "giver": "KVGarg", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTkzMDkyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjI1NjIyMg==", "fields": {"created_at": "2018-11-12T07:07:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjUzNjQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjM0NTg2OQ==", "fields": {"created_at": "2018-11-13T15:27:14Z", "content": "THUMBS_UP", "giver": "atb00ker", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjk1MzE5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjM0NTgxNQ==", "fields": {"created_at": "2018-11-13T15:26:22Z", "content": "THUMBS_UP", "giver": "atb00ker", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjk0ODA3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjM4MjUxMA==", "fields": {"created_at": "2018-11-14T03:41:17Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzMwNTI1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjM4ODQ5Nw==", "fields": {"created_at": "2018-11-14T07:21:54Z", "content": "HEART", "giver": "li-boxuan", "receiver": "abhishalya", "review": "MDEyOklzc3VlQ29tbWVudDQzODU2Mjc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjMyMjU4NQ==", "fields": {"created_at": "2018-11-13T08:49:52Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "atb00ker", "review": "MDEyOklzc3VlQ29tbWVudDQyMDM3ODI1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjMzMzg1NQ==", "fields": {"created_at": "2018-11-13T12:13:12Z", "content": "THUMBS_UP", "giver": "bhawesh96", "receiver": "KVGarg", "review": "MDEyOklzc3VlQ29tbWVudDQzODIwMjAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjU3MzQ5OQ==", "fields": {"created_at": "2018-11-17T02:30:02Z", "content": "THUMBS_UP", "giver": "bhawesh96", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDIzMjEyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjY5Mzc2NQ==", "fields": {"created_at": "2018-11-20T12:37:00Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDYzMTYxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjY5ODE2NQ==", "fields": {"created_at": "2018-11-20T13:59:45Z", "content": "THUMBS_UP", "giver": "bhawesh96", "receiver": "CLiu13", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDczOTA2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjYwNjI2Mw==", "fields": {"created_at": "2018-11-19T01:57:51Z", "content": "THUMBS_UP", "giver": "bhawesh96", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQ3NjQwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjg1Mzg1OQ==", "fields": {"created_at": "2018-11-23T06:38:03Z", "content": "THUMBS_UP", "giver": "bhawesh96", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTg1NDE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjg4MjYyNw==", "fields": {"created_at": "2018-11-23T19:45:18Z", "content": "THUMBS_UP", "giver": "CLiu13", "receiver": "KVGarg", "review": "MDEyOklzc3VlQ29tbWVudDQ0MTMwODI0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjg4MjYyOQ==", "fields": {"created_at": "2018-11-23T19:45:21Z", "content": "THUMBS_UP", "giver": "CLiu13", "receiver": "KVGarg", "review": "MDEyOklzc3VlQ29tbWVudDQ0MTMwMjcwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjg4MzM1MA==", "fields": {"created_at": "2018-11-23T20:18:11Z", "content": "THUMBS_UP", "giver": "CLiu13", "receiver": "KVGarg", "review": "MDEyOklzc3VlQ29tbWVudDQ0MTMxMjgxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjgzNzc0Mw==", "fields": {"created_at": "2018-11-22T16:46:11Z", "content": "THUMBS_UP", "giver": "SerekKiri", "receiver": "CLiu13", "review": "MDEyOklzc3VlQ29tbWVudDQ0MTA4MTE1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjk0MTY1Ng==", "fields": {"created_at": "2018-11-26T12:53:52Z", "content": "THUMBS_UP", "giver": "utkarsh2102", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjEyNzczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjk0MjQ0Nw==", "fields": {"created_at": "2018-11-26T13:08:48Z", "content": "THUMBS_UP", "giver": "KVGarg", "receiver": "utkarsh2102", "review": "MDEyOklzc3VlQ29tbWVudDQ0MTYyOTUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjk1ODE2NA==", "fields": {"created_at": "2018-11-26T17:02:39Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "KVGarg", "review": "MDEyOklzc3VlQ29tbWVudDQ0MTY0MjgyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjk2Mjg1Mw==", "fields": {"created_at": "2018-11-26T17:59:11Z", "content": "CONFUSED", "giver": "siddhpant", "receiver": "siddhpant", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjM2MTk2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjk2MzAwMw==", "fields": {"created_at": "2018-11-26T18:01:01Z", "content": "CONFUSED", "giver": "siddhpant", "receiver": "siddhpant", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjM2MTM1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjk5NzEyNA==", "fields": {"created_at": "2018-11-27T02:34:38Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "siddhpant", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjM2MTM1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjk5NzI3OQ==", "fields": {"created_at": "2018-11-27T02:38:37Z", "content": "THUMBS_DOWN", "giver": "sks444", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjMzOTA0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjkxMDgyMA==", "fields": {"created_at": "2018-11-25T16:59:41Z", "content": "THUMBS_UP", "giver": "KVGarg", "receiver": "bharatpurohit97", "review": "MDEyOklzc3VlQ29tbWVudDQ0MTQ1MzQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjkxMTgyMA==", "fields": {"created_at": "2018-11-25T18:09:43Z", "content": "THUMBS_UP", "giver": "KVGarg", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjA4MjE4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMjkyNTM4Nw==", "fields": {"created_at": "2018-11-26T06:59:34Z", "content": "THUMBS_UP", "giver": "KVGarg", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjEyNzczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMzA3NDQzOA==", "fields": {"created_at": "2018-11-28T00:16:21Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjYxNDIxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMzMxODU2OQ==", "fields": {"created_at": "2018-12-03T02:28:44Z", "content": "THUMBS_UP", "giver": "CLiu13", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODEyOTYyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMzMxODg4Nw==", "fields": {"created_at": "2018-12-03T02:42:31Z", "content": "THUMBS_UP", "giver": "Kiy4h", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODEzMDIzNA=="}}]