[{"model": "meta_review.participant", "pk": "0x48piraj", "fields": {"name": "Piyush Raj", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-11-27T07:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AMR-KELEG", "fields": {"name": "Amr Mohamed ", "score": 0.35000000000000003, "rank": 125, "trend": 0, "last_active_at": "2017-08-07T14:56:27Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10338729036286913, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AbdealiJK", "fields": {"name": "AbdealiJK", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2018-05-13T05:29:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Adrianzatreanu", "fields": {"name": "Zatreanu Adrian-Gabriel", "score": 2.925239107332622, "rank": 56, "trend": 0, "last_active_at": "2017-08-24T14:10:44Z", "pos_in": 10, "weighted_pos_in": 2.5752391073326217, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12831038353530194, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Alexander-N", "fields": {"name": null, "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2017-12-27T23:33:49Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10897449391419342, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Arsfiqball", "fields": {"name": "Iqbal Mohammad Abdul Ghoni", "score": 4.094314558979797, "rank": 44, "trend": 0, "last_active_at": "2017-07-18T16:10:12Z", "pos_in": 19, "weighted_pos_in": 4.0443145589797975, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13962466356624867, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Asalle", "fields": {"name": "Asalle Mirzaieva", "score": 1.5429330499468639, "rank": 79, "trend": 0, "last_active_at": "2017-11-21T07:54:10Z", "pos_in": 2, "weighted_pos_in": 0.4429330499468638, "pos_out": 22, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11493246357324938, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AsnelChristian", "fields": {"name": "Christian Asnel Ngoulla Sob", "score": 4.504303931987234, "rank": 40, "trend": 0, "last_active_at": "2017-07-21T06:52:13Z", "pos_in": 15, "weighted_pos_in": 3.754303931987234, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1435925294292968, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CCInCharge", "fields": {"name": "Charles Chen", "score": 0.20095642933049948, "rank": 156, "trend": 0, "last_active_at": "2018-06-09T22:24:25Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10194485078979369, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CleanCut", "fields": {"name": "Nathan Stocks", "score": 1.0, "rank": 95, "trend": 0, "last_active_at": "2017-04-09T08:02:04Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10967797246534036, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Crphang", "fields": {"name": "Phang Chun Rong", "score": 0.9773113708820408, "rank": 96, "trend": 0, "last_active_at": "2018-04-22T03:43:34Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10945839253746044, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Elgayar", "fields": {"name": "Mostafa Elgayar", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2016-12-31T09:57:53Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "EverWinter23", "fields": {"name": "rishabh", "score": 1.3492029755579165, "rank": 82, "trend": 0, "last_active_at": "2018-06-21T15:48:01Z", "pos_in": 3, "weighted_pos_in": 1.3492029755579165, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1130575492476048, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "FosterSamuel", "fields": {"name": "Samuel Foster", "score": 0.15000000000000002, "rank": 173, "trend": 0, "last_active_at": "2017-08-12T15:45:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10145169586980106, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Grox-Ni", "fields": {"name": "GroxNi", "score": 0.4250265674814016, "rank": 117, "trend": 0, "last_active_at": "2017-12-18T09:18:14Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10411339541712314, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HarshKhatore", "fields": {"name": "Harsh Khatore", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-11-04T01:32:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Harshish", "fields": {"name": "Harshish Yadav", "score": 0.3468650371944737, "rank": 126, "trend": 0, "last_active_at": "2017-02-28T16:55:27Z", "pos_in": 1, "weighted_pos_in": 0.1468650371944737, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10335695027915738, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HemabhKamboj", "fields": {"name": "Hemabh Kamboj", "score": 0.3185765777593346, "rank": 127, "trend": 0, "last_active_at": "2018-07-29T08:23:21Z", "pos_in": 2, "weighted_pos_in": 0.3185765777593346, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10308317534765721, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HitRam", "fields": {"name": "Hitesh Ramchandani", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-01-23T17:54:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Hsankesara", "fields": {"name": "Heet Sankesara", "score": 0.15000000000000002, "rank": 173, "trend": 0, "last_active_at": "2017-07-18T08:34:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10145169586980106, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HyungKun", "fields": {"name": "HyungKun Jung", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-03-31T12:39:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IamRaviTejaG", "fields": {"name": "Ravi Teja Gannavarapu", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-10-27T15:46:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IpshitaC", "fields": {"name": "Ipshita Chatterjee", "score": 1.5447396386822505, "rank": 78, "trend": 0, "last_active_at": "2018-06-07T17:54:23Z", "pos_in": 6, "weighted_pos_in": 1.0447396386822505, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11494994768928665, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JoeSiew", "fields": {"name": null, "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-07-19T05:18:10Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnMoutafis", "fields": {"name": "John Moutafis", "score": 0.15000000000000002, "rank": 173, "trend": 0, "last_active_at": "2017-07-17T12:05:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10145169586980106, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnS-01", "fields": {"name": null, "score": 0.27502656748140175, "rank": 132, "trend": 0, "last_active_at": "2017-05-08T19:17:17Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10266169954732209, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Kagamihime", "fields": {"name": "Eisha Chen-yen-su", "score": 0.7311902231668423, "rank": 102, "trend": 0, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 3, "weighted_pos_in": 0.5811902231668423, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10707643884673478, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "KevinHock", "fields": {"name": "", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-04-11T21:42:17Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LappleApple", "fields": {"name": "Lauri Apple", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-06-08T17:44:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LeafyLi", "fields": {"name": null, "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-01-15T18:18:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LenaAn", "fields": {"name": null, "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2018-02-26T15:56:46Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10897449391419342, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Logan1x", "fields": {"name": "Khushal Sharma", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-09-17T10:03:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Lyrenhex", "fields": {"name": "Damian Heaton", "score": 0.20425079702444154, "rank": 155, "trend": 0, "last_active_at": "2017-11-28T20:58:50Z", "pos_in": 1, "weighted_pos_in": 0.20425079702444154, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10197673358962638, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MacBox7", "fields": {"name": "Ankit Joshi", "score": 6.207332624867159, "rank": 29, "trend": 0, "last_active_at": "2018-07-29T05:49:39Z", "pos_in": 15, "weighted_pos_in": 5.707332624867159, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1600743942266733, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Makman2", "fields": {"name": "Mischa Kr\u00fcger", "score": 92.02026547474642, "rank": 2, "trend": 0, "last_active_at": "2018-08-04T08:06:22Z", "pos_in": 378, "weighted_pos_in": 85.97026547474643, "pos_out": 117, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.9905695955179064, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mariatta", "fields": {"name": "", "score": 1.0757173219978733, "rank": 93, "trend": 0, "last_active_at": "2017-12-12T08:00:26Z", "pos_in": 8, "weighted_pos_in": 1.0257173219978732, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1104107626227851, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MariosPanag", "fields": {"name": "Marios Panagopoulos", "score": 0.5500531349628035, "rank": 106, "trend": 0, "last_active_at": "2017-05-07T21:48:37Z", "pos_in": 2, "weighted_pos_in": 0.5500531349628035, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10532339909464417, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MikeTheReader", "fields": {"name": "Mike Lundin", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-05-24T17:18:50Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mixih", "fields": {"name": "mixih", "score": 13.817640807651394, "rank": 13, "trend": 0, "last_active_at": "2017-12-29T20:29:44Z", "pos_in": 43, "weighted_pos_in": 13.421466524973392, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.23372674727241358, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mohit17067", "fields": {"name": "Mohit Juneja", "score": 0.4214665249734319, "rank": 118, "trend": 0, "last_active_at": "2018-04-10T05:39:26Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10407894142375557, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Monal5031", "fields": {"name": "Monal Shadi", "score": 4.19867162592986, "rank": 43, "trend": 0, "last_active_at": "2018-04-10T12:56:57Z", "pos_in": 5, "weighted_pos_in": 3.4486716259298604, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14063462838675506, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Naveenaidu", "fields": {"name": "Naveen Naidu", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2018-03-04T05:26:23Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nickatak", "fields": {"name": "", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-02-14T19:34:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "NiklasMM", "fields": {"name": "Niklas", "score": 11.478055260361305, "rank": 15, "trend": 0, "last_active_at": "2018-06-13T23:49:49Z", "pos_in": 41, "weighted_pos_in": 10.728055260361305, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.21108430276543183, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nosferatul", "fields": {"name": "Alexandru-Sorin Maxim", "score": 3.1732199787460154, "rank": 54, "trend": -1, "last_active_at": "2017-08-28T19:37:32Z", "pos_in": 6, "weighted_pos_in": 2.373219978746015, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13071033558077189, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nshul", "fields": {"name": "Anshul Mittal", "score": 1.6474495217853333, "rank": 76, "trend": 0, "last_active_at": "2018-04-18T22:34:33Z", "pos_in": 4, "weighted_pos_in": 1.5974495217853333, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11594397110987661, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PierceAndy", "fields": {"name": "Pierce Fu", "score": 0.5020722635494147, "rank": 110, "trend": 0, "last_active_at": "2017-04-04T04:11:31Z", "pos_in": 2, "weighted_pos_in": 0.3520722635494147, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10485904154224235, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PlentyMore", "fields": {"name": "PlentyMore", "score": 0.15929861849096674, "rank": 166, "trend": 0, "last_active_at": "2017-11-09T17:41:24Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10154168764352234, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Prabhat-IIT", "fields": {"name": "Prabhat", "score": 0.3758235919234855, "rank": 122, "trend": 0, "last_active_at": "2018-01-15T18:09:46Z", "pos_in": 3, "weighted_pos_in": 0.32582359192348553, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10363721037446082, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Pradhvan", "fields": {"name": "Pradhvan Bisht ", "score": 0.18837538892599412, "rank": 159, "trend": 0, "last_active_at": "2018-03-04T17:04:18Z", "pos_in": 1, "weighted_pos_in": 0.18837538892599412, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10182309182717356, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PrajwalM2212", "fields": {"name": "PRAJWAL M", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2018-05-08T04:55:07Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RJ722", "fields": {"name": "Rahul Jha", "score": 5.073007438894791, "rank": 36, "trend": 0, "last_active_at": "2018-07-09T12:48:29Z", "pos_in": 8, "weighted_pos_in": 2.9730074388947907, "pos_out": 42, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14909642631009062, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Rahmeen14", "fields": {"name": "Rahmeen Habib", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-12-18T10:49:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RaiVaibhav", "fields": {"name": "Vaibhav Rai", "score": 13.606676368361898, "rank": 14, "trend": 0, "last_active_at": "2018-08-06T08:03:06Z", "pos_in": 25, "weighted_pos_in": 10.663320592186812, "pos_out": 89, "neg_in": 5, "weighted_neg_in": 1.8066442238249174, "neg_out": 4, "offset": 0.5, "weight_factor": 0.23168503923780384, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "Raman1121", "fields": {"name": "Raman Dutt", "score": 0.18225292242295388, "rank": 161, "trend": 0, "last_active_at": "2017-09-02T18:12:11Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295388, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10176383876493716, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RohanVB", "fields": {"name": "Rohan", "score": 4.547077577045693, "rank": 39, "trend": 0, "last_active_at": "2017-04-28T16:22:19Z", "pos_in": 16, "weighted_pos_in": 3.9470775770456923, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1440064915884148, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "S2606", "fields": {"name": "Shagun Khemka", "score": 0.428427205100956, "rank": 116, "trend": 0, "last_active_at": "2017-07-20T07:39:17Z", "pos_in": 3, "weighted_pos_in": 0.378427205100956, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10414630669436979, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SanketDG", "fields": {"name": "Sanket Dasgupta", "score": 15.109723698193388, "rank": 10, "trend": 0, "last_active_at": "2018-02-27T08:55:23Z", "pos_in": 40, "weighted_pos_in": 13.159723698193389, "pos_out": 39, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2462314899100164, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Sanny26", "fields": {"name": "Santhoshini ", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-02-10T16:27:28Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shade5", "fields": {"name": "George Joseph", "score": 1.1057385759829967, "rank": 92, "trend": 0, "last_active_at": "2017-03-25T17:05:36Z", "pos_in": 2, "weighted_pos_in": 1.1057385759829967, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11070130749222812, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ShivamSinghania", "fields": {"name": "Shivam Singhania", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-01-18T22:12:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shruti9520", "fields": {"name": "Shruti Singh", "score": 0.6628586609989368, "rank": 103, "trend": 0, "last_active_at": "2017-02-05T19:51:42Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1064151278695601, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SiddharthKumar02", "fields": {"name": "Siddharth Kumar", "score": 0.21285866099893672, "rank": 151, "trend": 0, "last_active_at": "2017-01-22T12:51:10Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10206004026015693, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Siddhartha1234", "fields": {"name": "Siddhartha Mishra", "score": 1.573379383634431, "rank": 77, "trend": 0, "last_active_at": "2017-04-13T15:21:34Z", "pos_in": 4, "weighted_pos_in": 1.4233793836344308, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11522712235234822, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Stropek", "fields": {"name": "Przemys\u0142aw Curzytek", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-09-05T12:13:36Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SubbulakshmiRS", "fields": {"name": "R S Subbulakshmi", "score": 0.17364505844845868, "rank": 163, "trend": 0, "last_active_at": "2018-06-15T15:55:05Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10168053209440661, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Techievena", "fields": {"name": "Abinash Senapati", "score": 5.320563230605731, "rank": 34, "trend": 0, "last_active_at": "2017-12-07T11:28:19Z", "pos_in": 21, "weighted_pos_in": 4.370563230605731, "pos_out": 19, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15149226444590463, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "The-Compiler", "fields": {"name": "Florian Bruhin", "score": 0.15547290116896886, "rank": 167, "trend": 0, "last_active_at": "2018-05-13T15:15:13Z", "pos_in": 1, "weighted_pos_in": 0.15547290116896886, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10150466245661988, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Udayan12167", "fields": {"name": "Udayan Tandon", "score": 14.813496280552588, "rank": 11, "trend": 0, "last_active_at": "2017-07-19T19:08:09Z", "pos_in": 33, "weighted_pos_in": 14.817321997874586, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.24336460911860985, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "UnimaginaryUnit", "fields": {"name": "Alexander Voronkov", "score": 0.10860786397449518, "rank": 176, "trend": 0, "last_active_at": "2017-12-03T07:10:37Z", "pos_in": 1, "weighted_pos_in": 0.10860786397449518, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10105110391706461, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vamshi99", "fields": {"name": "Vamshi Krishna", "score": 4.276301806588733, "rank": 41, "trend": 0, "last_active_at": "2018-06-12T19:05:29Z", "pos_in": 12, "weighted_pos_in": 3.5145589798087116, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.13825717321997855, "neg_out": 2, "offset": 0.0, "weight_factor": 0.14138593113765102, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vedarth", "fields": {"name": "Vedarth Sharma", "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2017-12-10T17:48:03Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10897449391419342, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Warewolf96", "fields": {"name": "Parth Verma", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-02-15T03:42:58Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Yashwanthv21", "fields": {"name": "Yashwanth Reddy", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-03-04T17:26:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Zimmerman", "fields": {"name": "Martin Zimmerman", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-05-10T10:07:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aalind0", "fields": {"name": "Aalind Singh", "score": 0.26285866099893673, "rank": 135, "trend": 0, "last_active_at": "2017-02-08T17:34:24Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10254393888342395, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashraybhandar1", "fields": {"name": null, "score": 2.8158873538788507, "rank": 57, "trend": 0, "last_active_at": "2018-04-02T14:07:50Z", "pos_in": 7, "weighted_pos_in": 2.765887353878851, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12725208027633966, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashutoshrathi", "fields": {"name": "Aashutosh Rathi", "score": 2.4815621679064774, "rank": 62, "trend": 0, "last_active_at": "2017-11-24T10:30:37Z", "pos_in": 8, "weighted_pos_in": 1.7315621679064774, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12401649033202923, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "abhsag24", "fields": {"name": "Abhay Raizada", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-01-29T06:17:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "acashmkj", "fields": {"name": "acash mkj", "score": 2.3260892667375135, "rank": 64, "trend": 0, "last_active_at": "2017-11-15T17:54:51Z", "pos_in": 3, "weighted_pos_in": 2.0760892667375135, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12251182787540942, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adhikasp", "fields": {"name": "Adhika Setya Pramudita", "score": 8.034112646121137, "rank": 21, "trend": 0, "last_active_at": "2018-07-23T04:23:31Z", "pos_in": 23, "weighted_pos_in": 5.80913921360254, "pos_out": 50, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.17775392097260317, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adi23arora", "fields": {"name": "Aditya Arora", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-12-29T18:22:08Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adrienverge", "fields": {"name": "Adrien Verg\u00e9", "score": 1.0, "rank": 95, "trend": 0, "last_active_at": "2017-02-06T20:17:25Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10967797246534036, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adtac", "fields": {"name": "Adhityaa", "score": 5.435349951468151, "rank": 32, "trend": 0, "last_active_at": "2018-03-24T16:32:16Z", "pos_in": 16, "weighted_pos_in": 4.785349951468151, "pos_out": 13, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15260316716979785, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alisianoi", "fields": {"name": "Alexander Lisianoi", "score": 1.2738575982996783, "rank": 86, "trend": 0, "last_active_at": "2018-04-26T10:02:38Z", "pos_in": 7, "weighted_pos_in": 2.173857598299678, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1123283587611089, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alphadose", "fields": {"name": "Anish Mukherjee", "score": 2.1046227417640813, "rank": 70, "trend": 0, "last_active_at": "2018-03-04T18:18:37Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12036848094472193, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amalrajan", "fields": {"name": "Amal Rajan", "score": 0.1528692879914984, "rank": 170, "trend": 0, "last_active_at": "2018-01-19T13:24:25Z", "pos_in": 1, "weighted_pos_in": 0.1028692879914984, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10147946475997792, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amitsin6h", "fields": {"name": "Amit singh", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-11-15T15:53:07Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ananyaarun", "fields": {"name": "Ananya Arun", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2018-06-18T13:40:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anctartica", "fields": {"name": "", "score": 3.705951115834216, "rank": 49, "trend": 0, "last_active_at": "2018-07-20T19:11:21Z", "pos_in": 11, "weighted_pos_in": 3.411689691817213, "pos_out": 4, "neg_in": 1, "weighted_neg_in": 0.10573857598299678, "neg_out": 1, "offset": 0.0, "weight_factor": 0.13586609285694096, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "andrewda", "fields": {"name": "Andrew Dassonville", "score": 17.208182784272033, "rank": 7, "trend": 0, "last_active_at": "2018-07-29T19:52:37Z", "pos_in": 33, "weighted_pos_in": 14.908182784272032, "pos_out": 46, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2665403191647288, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ankurg22", "fields": {"name": "Ankur Gupta", "score": 0.24373007438894745, "rank": 141, "trend": 0, "last_active_at": "2018-02-01T15:18:15Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1023588129489116, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anshumanv", "fields": {"name": "Anshuman Verma", "score": 0.2239107332624866, "rank": 145, "trend": 0, "last_active_at": "2018-03-19T12:25:28Z", "pos_in": 1, "weighted_pos_in": 0.12391073326248658, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10216700191120852, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aptrishu", "fields": {"name": "Rishav Kumar", "score": 4.235653560042503, "rank": 42, "trend": 0, "last_active_at": "2018-05-14T21:16:42Z", "pos_in": 11, "weighted_pos_in": 2.885653560042503, "pos_out": 27, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14099253852681223, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arjunsinghy96", "fields": {"name": "Arjun Singh Yadav", "score": 4.036928799149839, "rank": 45, "trend": 0, "last_active_at": "2017-04-28T06:55:34Z", "pos_in": 7, "weighted_pos_in": 3.686928799149839, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1390692857627117, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arnab1896", "fields": {"name": null, "score": 0.6147715196599357, "rank": 104, "trend": 0, "last_active_at": "2017-02-24T10:21:12Z", "pos_in": 2, "weighted_pos_in": 0.31477151965993566, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10594974183974432, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arpit7714", "fields": {"name": "ARPIT VARSHNEY", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-02-18T16:04:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arrayslayer", "fields": {"name": "Aditya Lahiri", "score": 0.26285866099893673, "rank": 135, "trend": 0, "last_active_at": "2017-06-27T11:07:04Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10254393888342395, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arush0311", "fields": {"name": "Arush Goyal", "score": 2.241126461211477, "rank": 67, "trend": 0, "last_active_at": "2017-02-12T19:30:48Z", "pos_in": 3, "weighted_pos_in": 2.141126461211477, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12168956018295037, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ashwini0529", "fields": {"name": "Ashwini Purohit", "score": 0.3138150903294362, "rank": 129, "trend": 0, "last_active_at": "2017-12-16T06:15:38Z", "pos_in": 2, "weighted_pos_in": 0.3138150903294362, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1030370938034166, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "attilanagy", "fields": {"name": "Attila Nagy", "score": 0.2841657810839528, "rank": 131, "trend": 0, "last_active_at": "2018-05-07T19:26:59Z", "pos_in": 2, "weighted_pos_in": 0.2841657810839528, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10275014860492243, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "atultherajput", "fields": {"name": "Atul Krishna", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-09-26T13:54:51Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "avirlrma", "fields": {"name": "Aviral Verma", "score": 0.18225292242295385, "rank": 162, "trend": 0, "last_active_at": "2017-12-14T11:27:06Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295385, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10176383876493716, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush1999", "fields": {"name": "Ayush Shridhar", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-08-03T10:15:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush9398", "fields": {"name": "Ayush Mittal", "score": 0.4972901168969174, "rank": 111, "trend": 0, "last_active_at": "2018-02-15T08:16:08Z", "pos_in": 3, "weighted_pos_in": 0.520935175345376, "pos_out": 3, "neg_in": 1, "weighted_neg_in": 0.17364505844845868, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10481276005861426, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayushin78", "fields": {"name": "Ayushi Negi", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-02-24T06:18:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bekicot", "fields": {"name": "Yana Agun Siswanto", "score": 0.2554729011689688, "rank": 138, "trend": 0, "last_active_at": "2018-06-23T05:39:31Z", "pos_in": 2, "weighted_pos_in": 1.1554729011689688, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10247245970315391, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bhavishyagopesh", "fields": {"name": "BHAVISHYA", "score": 0.5437300743889475, "rank": 107, "trend": 0, "last_active_at": "2017-12-29T11:09:57Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1052622046885137, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "biscuitsnake", "fields": {"name": "biscuitsnake", "score": 0.15069075451647157, "rank": 172, "trend": 0, "last_active_at": "2018-05-01T03:13:16Z", "pos_in": 1, "weighted_pos_in": 0.15069075451647157, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10145838097299179, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "blazeu", "fields": {"name": "Surya Widi", "score": 29.48915717295176, "rank": 3, "trend": 0, "last_active_at": "2018-08-09T05:35:58Z", "pos_in": 84, "weighted_pos_in": 28.13915717295176, "pos_out": 37, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.375717278680581, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "cRAN-cg", "fields": {"name": "Chiranjeev Gupta", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-06-12T07:59:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chetasr", "fields": {"name": "Chetas Murali", "score": 0.10573857598299678, "rank": 177, "trend": 0, "last_active_at": "2018-02-23T11:18:05Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102333502688775, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chhabrabhishek", "fields": {"name": "Abhishek Chhabra", "score": 0.15382571732199785, "rank": 169, "trend": 0, "last_active_at": "2018-06-23T06:56:10Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10148872105670353, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "clarammdantas", "fields": {"name": "Clara Moraes Dantas", "score": 0.20956429330499465, "rank": 152, "trend": 0, "last_active_at": "2018-01-17T12:48:39Z", "pos_in": 1, "weighted_pos_in": 0.10956429330499463, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10202815746032426, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cornu-ammonis", "fields": {"name": "Andrew Jones", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-10-20T21:15:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cristianossd", "fields": {"name": "Cristiano Santos", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-10-19T23:32:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cypher-naman", "fields": {"name": "Naman Sharma", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-07-25T12:56:23Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "d3db0t", "fields": {"name": "Shady Tantawy", "score": 0.5092986184909668, "rank": 109, "trend": 0, "last_active_at": "2017-03-17T07:27:27Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10492897800639146, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damian1996", "fields": {"name": "Damian Stachura", "score": 0.39373007438894747, "rank": 121, "trend": 0, "last_active_at": "2018-04-17T22:34:07Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10381050881871265, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damngamerz", "fields": {"name": "Saurav Singh", "score": 7.708395324123271, "rank": 22, "trend": 0, "last_active_at": "2018-06-08T18:36:00Z", "pos_in": 12, "weighted_pos_in": 5.208395324123271, "pos_out": 50, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.17460163769882342, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "danes44", "fields": {"name": "Frume44", "score": 0.2561636556854405, "rank": 137, "trend": 0, "last_active_at": "2017-12-25T03:02:06Z", "pos_in": 1, "weighted_pos_in": 0.20616365568544046, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10247914480634462, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "devshiva619", "fields": {"name": "Devesh Verma", "score": 0.15000000000000002, "rank": 173, "trend": 0, "last_active_at": "2018-04-30T09:59:22Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10145169586980106, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dhishan", "fields": {"name": "Dhishan", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-01-06T22:08:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "diveshuttam", "fields": {"name": "Divesh Uttamchandani", "score": 0.4523379383634426, "rank": 114, "trend": 0, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 2, "weighted_pos_in": 0.3023379383634426, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10437771411251023, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "djokester", "fields": {"name": "Samriddhi Sinha", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-04-11T22:55:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dob9601", "fields": {"name": "Daniel O'Brien", "score": 1.4791710945802308, "rank": 80, "trend": 0, "last_active_at": "2018-01-06T15:55:07Z", "pos_in": 5, "weighted_pos_in": 1.8791710945802307, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.11431537712487484, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "dorothykiz1", "fields": {"name": null, "score": 0.18225292242295388, "rank": 161, "trend": 0, "last_active_at": "2018-05-30T10:29:50Z", "pos_in": 2, "weighted_pos_in": 0.36450584484590776, "pos_out": 0, "neg_in": 1, "weighted_neg_in": 0.18225292242295388, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10176383876493716, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dracarys09", "fields": {"name": "Abhijeet Dubey", "score": 1.3006907545164714, "rank": 83, "trend": 0, "last_active_at": "2017-02-15T10:40:45Z", "pos_in": 3, "weighted_pos_in": 1.2506907545164714, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1125880493081332, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "etotientz", "fields": {"name": "Satrap Rathore", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-02-02T14:26:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "fatma-mohamed", "fields": {"name": "Fatma Mohamed", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2018-05-23T18:45:13Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "firesans", "fields": {"name": "Sanjana Gunna", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-02-28T02:00:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gabru-md", "fields": {"name": "Manish Devgan", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-11-14T05:24:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gaocegege", "fields": {"name": "Ce Gao", "score": 2.228895961472242, "rank": 68, "trend": 0, "last_active_at": "2018-08-06T11:33:29Z", "pos_in": 7, "weighted_pos_in": 1.8788959614722418, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1215711937432367, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gatesn", "fields": {"name": "Nicholas Gates", "score": 0.5619022316684372, "rank": 105, "trend": 0, "last_active_at": "2018-05-18T08:07:47Z", "pos_in": 3, "weighted_pos_in": 0.4119022316684372, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10543807432630044, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "girishramnani", "fields": {"name": "girish ramnani", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-05-03T17:41:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gkrishnan724", "fields": {"name": "GopalaKrishnan P", "score": 2.6393198724760856, "rank": 61, "trend": 0, "last_active_at": "2017-06-26T15:23:19Z", "pos_in": 8, "weighted_pos_in": 2.4393198724760854, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1255432650530492, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gokberksahin", "fields": {"name": "G\u00f6kberk \u015eahin", "score": 0.1286928799149839, "rank": 175, "trend": 0, "last_active_at": "2017-12-27T19:27:08Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10124548614830257, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gopalgoel19", "fields": {"name": "Gopal Goel", "score": 0.35000000000000003, "rank": 125, "trend": 0, "last_active_at": "2018-05-13T17:04:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10338729036286913, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "guilherme-p", "fields": {"name": "Guilherme Peixoto", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2018-03-14T19:24:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gureks", "fields": {"name": "Gurek Singh", "score": 1.2214665249734318, "rank": 87, "trend": 0, "last_active_at": "2017-11-12T12:23:52Z", "pos_in": 2, "weighted_pos_in": 1.2214665249734318, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11182131939602785, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gurpreetsingh00885", "fields": {"name": null, "score": 0.25, "rank": 140, "trend": 0, "last_active_at": "2017-09-26T18:48:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1024194931163351, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gutsytechster", "fields": {"name": "Prashant Sharma", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-07-30T11:22:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshhx17", "fields": {"name": "Harsh Kumar Bhartiya", "score": 0.25, "rank": 140, "trend": 0, "last_active_at": "2018-06-22T06:05:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1024194931163351, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshit890", "fields": {"name": null, "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2017-01-16T20:38:31Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10897449391419342, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "hemangsk", "fields": {"name": "Hemang Kumar", "score": 10.134112646121137, "rank": 18, "trend": 0, "last_active_at": "2018-06-10T02:15:49Z", "pos_in": 31, "weighted_pos_in": 7.334112646121137, "pos_out": 56, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.19807766314981795, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "himanshu1603", "fields": {"name": "", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2018-02-22T18:31:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsavru", "fields": {"name": "Urvashi Verma", "score": 0.2605207226354941, "rank": 136, "trend": 0, "last_active_at": "2017-07-23T17:27:24Z", "pos_in": 2, "weighted_pos_in": 0.2105207226354941, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10252131238031689, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsraham", "fields": {"name": "Maharshi Mishra", "score": 0.3162592986184909, "rank": 128, "trend": 0, "last_active_at": "2017-11-18T19:16:03Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10306074878393762, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "impmihai", "fields": {"name": "Mihai Ionut", "score": 2.0, "rank": 73, "trend": 0, "last_active_at": "2017-04-29T21:12:36Z", "pos_in": 2, "weighted_pos_in": 2.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11935594493068073, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "incorrectusername", "fields": {"name": "Yogesh Gupta", "score": 0.4, "rank": 120, "trend": 0, "last_active_at": "2017-08-13T02:03:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10387118898613615, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "indmind", "fields": {"name": "Indmind", "score": 0.3750265674814016, "rank": 123, "trend": 0, "last_active_at": "2017-12-07T10:17:48Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10362949679385612, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ishanSrt", "fields": {"name": "Ishan Srivastava", "score": 6.946227417640803, "rank": 25, "trend": 0, "last_active_at": "2018-07-21T13:25:56Z", "pos_in": 26, "weighted_pos_in": 6.761424017003182, "pos_out": 8, "neg_in": 2, "weighted_neg_in": 0.4151965993623793, "neg_out": 1, "offset": 0.0, "weight_factor": 0.16722539768591999, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jack17529", "fields": {"name": "JACK_1729", "score": 0.35000000000000003, "rank": 125, "trend": 0, "last_active_at": "2017-03-26T17:53:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10338729036286913, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jackthepirate6", "fields": {"name": "Ajinkya Narnaware", "score": 1.9773113708820407, "rank": 74, "trend": 0, "last_active_at": "2018-05-12T15:32:01Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11913636500280081, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jayvdb", "fields": {"name": "John Vandenberg", "score": 92.99468491186165, "rank": 1, "trend": 0, "last_active_at": "2018-08-09T05:42:01Z", "pos_in": 425, "weighted_pos_in": 86.61843475893303, "pos_out": 183, "neg_in": 5, "weighted_neg_in": 4.97374984707137, "neg_out": 11, "offset": 0.0, "weight_factor": 1.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jckw", "fields": {"name": "Jack W", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-03-23T17:08:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jendrikseipp", "fields": {"name": "Jendrik Seipp", "score": 2.332093517534533, "rank": 63, "trend": 0, "last_active_at": "2017-08-28T07:45:46Z", "pos_in": 15, "weighted_pos_in": 2.332093517534533, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12256993684929797, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jsecrest", "fields": {"name": "Jason Secrest", "score": 0.21381509032943616, "rank": 150, "trend": 0, "last_active_at": "2018-06-01T04:32:02Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10206929655688256, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "k4ni5h", "fields": {"name": "Kanish", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-12-22T10:09:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kartikeys98", "fields": {"name": "Kartikey", "score": 0.21625929861849089, "rank": 149, "trend": 0, "last_active_at": "2017-10-25T06:31:30Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10209295153740358, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kaustubhhiware", "fields": {"name": "Kaustubh Hiware", "score": 0.765621679064823, "rank": 100, "trend": 0, "last_active_at": "2017-05-09T10:22:07Z", "pos_in": 3, "weighted_pos_in": 0.615621679064823, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10740966552885702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khanchi97", "fields": {"name": "Sushil khanchi", "score": 1.2997874601487758, "rank": 84, "trend": 0, "last_active_at": "2018-02-12T20:28:41Z", "pos_in": 8, "weighted_pos_in": 1.1997874601487757, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11257930725011454, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khushmeeet", "fields": {"name": "Khushmeet Singh", "score": 0.7428267800212515, "rank": 101, "trend": 0, "last_active_at": "2017-04-12T07:41:07Z", "pos_in": 3, "weighted_pos_in": 0.7428267800212515, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10718905712356312, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kriti21", "fields": {"name": "Kriti Rohilla", "score": 3.8232731137088183, "rank": 48, "trend": 0, "last_active_at": "2018-08-01T02:52:33Z", "pos_in": 12, "weighted_pos_in": 3.3232731137088183, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13700153192195005, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksangam68", "fields": {"name": "Sangam Kumar", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-02-19T15:10:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksdme", "fields": {"name": "Kilari Teja", "score": 5.980605738575982, "rank": 30, "trend": 0, "last_active_at": "2018-08-07T06:04:06Z", "pos_in": 9, "weighted_pos_in": 4.4306057385759825, "pos_out": 27, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.15788013766399495, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lalitmee", "fields": {"name": "Lalit Kumar", "score": 0.22364505844845867, "rank": 146, "trend": 0, "last_active_at": "2018-04-11T21:31:49Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10216443071767363, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "li-boxuan", "fields": {"name": "Boxuan Li", "score": 14.275210884019135, "rank": 12, "trend": 0, "last_active_at": "2018-08-08T14:59:16Z", "pos_in": 24, "weighted_pos_in": 10.225210884019132, "pos_out": 81, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.23815509787246425, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lilithxxx", "fields": {"name": "Rishav Chakraborty", "score": 0.13730074388947908, "rank": 174, "trend": 0, "last_active_at": "2018-05-10T12:39:54Z", "pos_in": 1, "weighted_pos_in": 0.13730074388947908, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10132879281883313, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lshobith", "fields": {"name": "sai shobith", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-03-10T14:42:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lucas03", "fields": {"name": "Lukas Vojt", "score": 0.22077577045696029, "rank": 148, "trend": 0, "last_active_at": "2017-06-18T15:25:10Z", "pos_in": 1, "weighted_pos_in": 0.1707757704569603, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10213666182749677, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "madhukar01", "fields": {"name": "Madhukar S Holla", "score": 3.424601487778958, "rank": 52, "trend": -1, "last_active_at": "2017-04-10T16:11:59Z", "pos_in": 6, "weighted_pos_in": 3.3746014877789583, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1331431989034884, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "manankalra", "fields": {"name": "Manan Kalra", "score": 1.147980871413389, "rank": 90, "trend": 0, "last_active_at": "2018-07-20T15:46:39Z", "pos_in": 4, "weighted_pos_in": 0.597980871413389, "pos_out": 31, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11111012726427621, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mani87", "fields": {"name": "Mani Kumar", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-08-30T03:25:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mansiagarwal451", "fields": {"name": "Mansi Agarwal", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-10-16T20:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "margobra8", "fields": {"name": "Marcos G\u00f3mez", "score": 1.9773113708820407, "rank": 74, "trend": 0, "last_active_at": "2018-01-15T17:06:39Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11913636500280081, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "marian-ald", "fields": {"name": "", "score": 0.2714665249734317, "rank": 133, "trend": 0, "last_active_at": "2016-12-04T17:59:51Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10262724555395451, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "maweki", "fields": {"name": "Mario Wenzel", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-02-07T18:27:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "meetmangukiya", "fields": {"name": "Meet Mangukiya", "score": 15.919234856535589, "rank": 9, "trend": 0, "last_active_at": "2018-07-25T23:03:20Z", "pos_in": 41, "weighted_pos_in": 11.800212539851206, "pos_out": 88, "neg_in": 4, "weighted_neg_in": 1.0809776833156182, "neg_out": 4, "offset": 0.0, "weight_factor": 0.254065916610838, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mohit2872", "fields": {"name": "Mohit Gupta", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-11-14T09:48:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mohitkyadav", "fields": {"name": "Mohit Kumar Yadav", "score": 0.8475557917109453, "rank": 98, "trend": 0, "last_active_at": "2017-12-15T13:06:08Z", "pos_in": 4, "weighted_pos_in": 1.3975557917109453, "pos_out": 9, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10820262161501829, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "monsij", "fields": {"name": "Monsij Biswal", "score": 0.4547821466524974, "rank": 113, "trend": 0, "last_active_at": "2018-05-10T16:23:03Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10440136909303126, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mridubhatnagar", "fields": {"name": "Mridu Bhatnagar", "score": 4.983315621679066, "rank": 38, "trend": 0, "last_active_at": "2017-12-14T10:46:03Z", "pos_in": 10, "weighted_pos_in": 4.483315621679066, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1482283913727105, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mrtes", "fields": {"name": null, "score": 2.742401700318808, "rank": 58, "trend": 0, "last_active_at": "2017-11-12T12:33:42Z", "pos_in": 6, "weighted_pos_in": 2.742401700318808, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12654088814458803, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mvinoba", "fields": {"name": "Vin\u00edcius Figueiredo", "score": 0.24373007438894745, "rank": 141, "trend": 0, "last_active_at": "2018-02-06T06:52:29Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1023588129489116, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myfrom", "fields": {"name": "Wiktor Olejniczak", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-12-14T15:45:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myint", "fields": {"name": "Steven Myint", "score": 0.21625929861849089, "rank": 149, "trend": 0, "last_active_at": "2017-03-25T11:58:13Z", "pos_in": 2, "weighted_pos_in": 0.21625929861849089, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10209295153740358, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nalinbhardwaj", "fields": {"name": "Nalin Bhardwaj", "score": 2.6726886291179595, "rank": 59, "trend": 0, "last_active_at": "2018-04-19T05:18:22Z", "pos_in": 5, "weighted_pos_in": 2.372688629117959, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1258662069610319, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namantw", "fields": {"name": "Naman Tiwari", "score": 0.20095642933049948, "rank": 156, "trend": 0, "last_active_at": "2018-01-07T17:19:37Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10194485078979369, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namanyadav12", "fields": {"name": "Naman Yadav", "score": 0.24017003188097746, "rank": 142, "trend": 0, "last_active_at": "2017-01-16T17:45:30Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10232435895554402, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "naveentata", "fields": {"name": "Naveen Tata", "score": 0.10382571732199786, "rank": 178, "trend": 0, "last_active_at": "2017-11-18T13:39:12Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10100482243343652, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nealkarpe", "fields": {"name": "Neal Karpe", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-11-12T09:50:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "neelanshsahai", "fields": {"name": "Neelansh Sahai", "score": 0.8163124335812947, "rank": 99, "trend": 0, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 4, "weighted_pos_in": 0.7663124335812946, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10790024925531476, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nemaniarjun", "fields": {"name": "Arjun Nemani", "score": 3.230765143464399, "rank": 53, "trend": -1, "last_active_at": "2018-05-10T20:29:45Z", "pos_in": 11, "weighted_pos_in": 3.080765143464399, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13126725610042989, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "netman92", "fields": {"name": "Stanislav Komanec", "score": 0.31381509032943616, "rank": 130, "trend": 0, "last_active_at": "2017-05-29T08:39:39Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1030370938034166, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "newbazz", "fields": {"name": null, "score": 7.5072263549415466, "rank": 23, "trend": 0, "last_active_at": "2018-05-10T12:40:12Z", "pos_in": 23, "weighted_pos_in": 4.907226354941546, "pos_out": 44, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.17265472995420178, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nguptaa", "fields": {"name": "Nikhil Gupta", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2018-02-16T14:44:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikhil-seth", "fields": {"name": "Nikhil Seth", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-12-08T13:18:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikita1412", "fields": {"name": null, "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-03-14T08:25:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nitinkgp23", "fields": {"name": "Nitin Choudhary", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-01-27T23:54:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityanandagohain", "fields": {"name": "Nityananda Gohain", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-04-28T15:40:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityeshaga", "fields": {"name": "Nityesh Agarwal", "score": 1.9207757704569604, "rank": 75, "trend": 0, "last_active_at": "2018-04-14T17:36:15Z", "pos_in": 5, "weighted_pos_in": 1.4707757704569602, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11858921501857539, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nkprince007", "fields": {"name": "Naveen Kumar Sangi", "score": 5.682303242128645, "rank": 31, "trend": 0, "last_active_at": "2018-07-30T11:48:21Z", "pos_in": 13, "weighted_pos_in": 5.582303242128646, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1549931743170353, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nvzard", "fields": {"name": "Nitanshu", "score": 5.384781599671661, "rank": 33, "trend": 0, "last_active_at": "2018-08-05T14:09:47Z", "pos_in": 5, "weighted_pos_in": 1.8355964802020375, "pos_out": 90, "neg_in": 2, "weighted_neg_in": 1.150814880530375, "neg_out": 1, "offset": 0.0, "weight_factor": 0.15211376805349378, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "paavininanda", "fields": {"name": "Paavini Nanda", "score": 0.24373007438894745, "rank": 141, "trend": 0, "last_active_at": "2018-01-23T12:07:14Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1023588129489116, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "palash25", "fields": {"name": "Palash Nigam", "score": 8.18544102019128, "rank": 20, "trend": 0, "last_active_at": "2018-07-10T08:27:49Z", "pos_in": 19, "weighted_pos_in": 5.785441020191281, "pos_out": 40, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.17921847281007874, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pareksha", "fields": {"name": "Pareksha Manchanda", "score": 6.806323060573857, "rank": 27, "trend": 0, "last_active_at": "2018-08-07T04:59:38Z", "pos_in": 11, "weighted_pos_in": 4.956323060573857, "pos_out": 37, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16587140717044496, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parimatrix", "fields": {"name": "Parikansh Ahluwalia", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-12-15T11:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parthboricha", "fields": {"name": null, "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-11-01T17:22:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prachi1210", "fields": {"name": "Prachi Manchanda", "score": 0.15155001112871574, "rank": 171, "trend": 0, "last_active_at": "2017-06-21T12:11:03Z", "pos_in": 1, "weighted_pos_in": 0.15155001112871574, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10146669683482575, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pradeepgangwar", "fields": {"name": "Pradeep Gangwar", "score": 2.285653560042508, "rank": 65, "trend": 0, "last_active_at": "2018-01-15T17:40:31Z", "pos_in": 4, "weighted_pos_in": 2.1856535600425078, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12212049221939858, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prashant0598", "fields": {"name": "Prashant Nigam", "score": 1.1847502656748123, "rank": 88, "trend": 0, "last_active_at": "2017-11-30T07:03:00Z", "pos_in": 4, "weighted_pos_in": 0.7347502656748123, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11146598044950552, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pratyushprakash", "fields": {"name": "Pratyush Prakash", "score": 5.201700318809775, "rank": 35, "trend": 0, "last_active_at": "2017-04-24T19:26:51Z", "pos_in": 14, "weighted_pos_in": 4.501700318809775, "pos_out": 14, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15034191245839318, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "priyanshsaxena", "fields": {"name": "Priyansh Saxena", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-01-28T10:54:01Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prnvdixit", "fields": {"name": "Pranav Dixit", "score": 6.53639744952178, "rank": 28, "trend": 0, "last_active_at": "2018-07-23T08:03:02Z", "pos_in": 24, "weighted_pos_in": 5.48639744952178, "pos_out": 21, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16325907453899277, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "proishan11", "fields": {"name": "Ishan Singh", "score": 0.5401700318809775, "rank": 108, "trend": 0, "last_active_at": "2017-03-24T11:54:16Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10522775069514613, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pushkalkatara", "fields": {"name": "Pushkal Katara", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-02-12T19:39:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raduklb", "fields": {"name": null, "score": 1.1506907545164715, "rank": 89, "trend": 0, "last_active_at": "2018-07-19T05:08:35Z", "pos_in": 2, "weighted_pos_in": 1.1506907545164715, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11113635343833214, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raghavmittal101", "fields": {"name": "Raghav Mittal", "score": 0.21285866099893672, "rank": 151, "trend": 0, "last_active_at": "2017-07-05T15:51:33Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10206004026015693, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rahulkrishnan98", "fields": {"name": "Rahul Krishnan", "score": 0.2691285866099893, "rank": 134, "trend": 0, "last_active_at": "2017-02-08T10:22:43Z", "pos_in": 1, "weighted_pos_in": 0.11912858660998926, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10260461905084745, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raj-maurya", "fields": {"name": "Raj Maurya", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-02-08T20:43:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "random-access7", "fields": {"name": "Aabhaas Vaish", "score": 1.4155685441020194, "rank": 81, "trend": 0, "last_active_at": "2018-03-01T07:59:09Z", "pos_in": 2, "weighted_pos_in": 1.0655685441020193, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1136998333926213, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rattandeep1998", "fields": {"name": "RATTANDEEP SINGH", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-12-18T14:24:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "realslimshanky", "fields": {"name": "Shashank Kumar", "score": 0.18618490967056384, "rank": 160, "trend": 0, "last_active_at": "2018-02-13T11:28:23Z", "pos_in": 1, "weighted_pos_in": 0.10669500531349625, "pos_out": 4, "neg_in": 2, "weighted_neg_in": 0.3205100956429324, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10180189242925361, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refactormyself", "fields": {"name": "Bolarinwa Saheed Olayemi", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-04-12T08:45:21Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refeed", "fields": {"name": "Rafid Aslam", "score": 3.4663124335812947, "rank": 51, "trend": 4, "last_active_at": "2018-07-11T04:13:07Z", "pos_in": 5, "weighted_pos_in": 2.666312433581295, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12870789005579655, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rhemon", "fields": {"name": "Ridhwanul Haque", "score": 3.904357066950049, "rank": 47, "trend": 0, "last_active_at": "2018-05-08T09:23:07Z", "pos_in": 13, "weighted_pos_in": 3.904357066950049, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13778626018879964, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "richer6605", "fields": {"name": "Dean Lin", "score": 0.27502656748140175, "rank": 132, "trend": 0, "last_active_at": "2017-11-27T21:08:43Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10266169954732209, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "robbyoconnor", "fields": {"name": "Robby O'Connor", "score": 0.2714665249734317, "rank": 133, "trend": 0, "last_active_at": "2017-10-23T06:16:26Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10262724555395451, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanbanerjee", "fields": {"name": "Rohan Banerjee", "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2018-01-16T19:52:50Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10897449391419342, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanraju97", "fields": {"name": "Rohan Raju", "score": 0.15478214665249734, "rank": 168, "trend": 0, "last_active_at": "2017-03-28T16:55:43Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10149797735342915, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanrk", "fields": {"name": "Rohan", "score": 0.36354941551540826, "rank": 124, "trend": 0, "last_active_at": "2018-05-07T10:39:40Z", "pos_in": 2, "weighted_pos_in": 0.36354941551540826, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10351842123314871, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rpanczer", "fields": {"name": "Bobby Panczer", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-10-17T00:31:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rubdos", "fields": {"name": "Ruben De Smet", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-03-07T03:13:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rupav", "fields": {"name": "rupav jain", "score": 0.25, "rank": 140, "trend": 0, "last_active_at": "2017-10-03T17:34:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1024194931163351, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sadovnychyi", "fields": {"name": "Dmytro Sadovnychyi", "score": 0.2, "rank": 157, "trend": 0, "last_active_at": "2017-06-14T11:01:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10193559449306808, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sahilarora535", "fields": {"name": "Sahil Arora", "score": 0.44102019128586484, "rank": 115, "trend": 0, "last_active_at": "2017-03-19T16:49:09Z", "pos_in": 2, "weighted_pos_in": 0.44102019128586484, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10426818126792374, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sangamcse", "fields": {"name": "Sangam Kumar", "score": 10.644721118174969, "rank": 17, "trend": 0, "last_active_at": "2018-08-09T05:42:01Z", "pos_in": 21, "weighted_pos_in": 8.79472111817497, "pos_out": 33, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.20301931788292443, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sanjeethboddi", "fields": {"name": "Sanjeeth", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2018-05-21T03:55:15Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sarthakchakerverty", "fields": {"name": "Sarthak Chakerverty", "score": -0.21955366631243298, "rank": 184, "trend": 0, "last_active_at": "2018-07-13T08:57:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 2, "weighted_neg_in": 0.319553666312433, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "satwikkansal", "fields": {"name": "Satwik Kansal", "score": 10.68698193411264, "rank": 16, "trend": 0, "last_active_at": "2018-04-07T15:38:12Z", "pos_in": 18, "weighted_pos_in": 9.63698193411264, "pos_out": 21, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.20342831689593205, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sgsh123", "fields": {"name": null, "score": 0.10573857598299678, "rank": 177, "trend": 0, "last_active_at": "2017-02-20T03:35:34Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10102333502688775, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shaipranesh11", "fields": {"name": null, "score": 0.2, "rank": 157, "trend": 0, "last_active_at": "2017-12-02T09:48:06Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10193559449306808, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shashank-b", "fields": {"name": "Shashank Batra", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-01-08T18:17:29Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shikharvaish28", "fields": {"name": "Shikhar Vaish", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-06-21T17:43:50Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreab373", "fields": {"name": "shreab373", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-04-08T16:45:09Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyans800755", "fields": {"name": "Shreyans", "score": 20.641155917035732, "rank": 5, "trend": 0, "last_active_at": "2018-08-06T21:53:21Z", "pos_in": 40, "weighted_pos_in": 19.166182484517133, "pos_out": 35, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2997645386178691, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyateeza", "fields": {"name": "Shreya", "score": 1.276780021253985, "rank": 85, "trend": 0, "last_active_at": "2018-01-14T18:09:18Z", "pos_in": 4, "weighted_pos_in": 1.3841657810839527, "pos_out": 1, "neg_in": 1, "weighted_neg_in": 0.15738575982996783, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11235664188999275, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shrutishrm512", "fields": {"name": "Shruti Sharma", "score": 0.25, "rank": 140, "trend": 0, "last_active_at": "2017-03-28T08:50:11Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1024194931163351, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sibasish14", "fields": {"name": "Sibasish Ghosh", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-12-14T12:59:16Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "siddhant-curious", "fields": {"name": "Siddhant Chhabra", "score": 0.22773645058448444, "rank": 144, "trend": 0, "last_active_at": "2018-05-08T04:55:07Z", "pos_in": 2, "weighted_pos_in": 0.22773645058448444, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.102204027098111, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sidharthskumar", "fields": {"name": "sidharth sk", "score": 0.42104144527098825, "rank": 119, "trend": 0, "last_active_at": "2017-07-18T10:13:56Z", "pos_in": 1, "weighted_pos_in": 0.1210414452709882, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10407482751409974, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sils", "fields": {"name": "Lasse Schuirmann", "score": 17.284856535600408, "rank": 6, "trend": 0, "last_active_at": "2018-01-03T08:40:29Z", "pos_in": 60, "weighted_pos_in": 16.934856535600407, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2672823656188992, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sims1253", "fields": {"name": "Maximilian Scholz", "score": 6.859936238044619, "rank": 26, "trend": 0, "last_active_at": "2017-11-02T17:21:01Z", "pos_in": 34, "weighted_pos_in": 6.759936238044619, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16639027402578638, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "singhYash123", "fields": {"name": "Yash", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-10-29T13:43:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sks444", "fields": {"name": "Shrikrishna Singh", "score": 9.290928534005793, "rank": 19, "trend": 0, "last_active_at": "2018-08-09T05:01:30Z", "pos_in": 15, "weighted_pos_in": 5.890928534005793, "pos_out": 78, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.18991735052955316, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "snakevenom04", "fields": {"name": "Sir Cheshire", "score": 0.2547821466524973, "rank": 139, "trend": 0, "last_active_at": "2017-08-25T07:26:44Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10246577459996319, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "solutusimmensus", "fields": {"name": "SolutusImmensus", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-11-09T02:37:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sonali0901", "fields": {"name": "sonali0901", "score": 0.10095642933049948, "rank": 179, "trend": 0, "last_active_at": "2017-10-18T17:04:10Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10097705354325966, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sopelj", "fields": {"name": "Jesse Sopel", "score": 0.2, "rank": 157, "trend": 0, "last_active_at": "2018-05-05T13:35:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10193559449306808, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "soumya-ranjan7", "fields": {"name": "Soumya Ranjan", "score": 0.10382571732199786, "rank": 178, "trend": 0, "last_active_at": "2017-10-19T11:28:17Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10100482243343652, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sourojit", "fields": {"name": "Sourojit Bhaduri", "score": 1.135919234856536, "rank": 91, "trend": 0, "last_active_at": "2018-01-02T20:21:03Z", "pos_in": 3, "weighted_pos_in": 1.135919234856536, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11099339507779205, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "srikanth100", "fields": {"name": "Srikanth Kini", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-02-13T12:59:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "starkblaze01", "fields": {"name": "MAYANK PATHELA", "score": 0.2286928799149839, "rank": 143, "trend": 0, "last_active_at": "2018-06-28T12:56:00Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10221328339483661, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "stellargo", "fields": {"name": "Sumit Sarin", "score": 0.4702444208289045, "rank": 112, "trend": 0, "last_active_at": "2018-04-22T10:08:32Z", "pos_in": 2, "weighted_pos_in": 0.3702444208289045, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10455101255676207, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supergr35", "fields": {"name": "Grant Parajuli", "score": 7.251859723698191, "rank": 24, "trend": 0, "last_active_at": "2017-11-14T19:07:24Z", "pos_in": 25, "weighted_pos_in": 6.65185972369819, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.17018329872846188, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supriyanta", "fields": {"name": "Supriyanta Poddar", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-11-19T19:37:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "susg", "fields": {"name": "sushant gupta", "score": 1.0, "rank": 95, "trend": 0, "last_active_at": "2018-04-18T22:25:59Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10967797246534036, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "swapagarwal", "fields": {"name": "Swapnil Agarwal", "score": 0.16599362380446298, "rank": 164, "trend": 0, "last_active_at": "2017-10-18T06:50:39Z", "pos_in": 1, "weighted_pos_in": 0.16599362380446298, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10160648172060166, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "synicalsyntax", "fields": {"name": "Cynthia Lin", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-12-08T07:18:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "tabias", "fields": {"name": null, "score": 0.1633900106269925, "rank": 165, "trend": 0, "last_active_at": "2017-03-02T07:57:36Z", "pos_in": 1, "weighted_pos_in": 0.11339001062699249, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1015812840239597, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "theOriginalMuktaka", "fields": {"name": "", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-12-27T12:40:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "thisch", "fields": {"name": "Thomas Hisch", "score": 2.6401700318809724, "rank": 60, "trend": 0, "last_active_at": "2017-06-12T21:21:05Z", "pos_in": 8, "weighted_pos_in": 2.6401700318809724, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12555149287236084, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "traff", "fields": {"name": "Dmitry Trofimov", "score": 0.0, "rank": 183, "trend": 0, "last_active_at": "2017-01-26T00:50:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "troublemagnet", "fields": {"name": "Gunjan Karamchandani", "score": 2.155738575982997, "rank": 69, "trend": 0, "last_active_at": "2017-11-11T12:00:39Z", "pos_in": 3, "weighted_pos_in": 2.105738575982997, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12086317858083549, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "twinone", "fields": {"name": "Luuk W.", "score": 0.19277364505844796, "rank": 158, "trend": 0, "last_active_at": "2017-03-20T14:45:54Z", "pos_in": 1, "weighted_pos_in": 0.19277364505844796, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10186565802891896, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "umeshksingla", "fields": {"name": "Umesh Singla", "score": 2.0046227417640816, "rank": 72, "trend": 0, "last_active_at": "2017-09-04T17:38:53Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11940068369818789, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "underyx", "fields": {"name": "Bence Nagy", "score": 0.10382571732199786, "rank": 178, "trend": 0, "last_active_at": "2017-05-28T03:21:13Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10100482243343652, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "urohit011", "fields": {"name": "Rohit Upadhyay", "score": 1.0273113708820407, "rank": 94, "trend": 0, "last_active_at": "2017-11-23T03:10:16Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10994229116072746, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "userzimmermann", "fields": {"name": "Stefan Zimmermann", "score": 15.993251859723685, "rank": 8, "trend": 0, "last_active_at": "2018-01-06T09:09:24Z", "pos_in": 46, "weighted_pos_in": 11.443251859723684, "pos_out": 83, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.2547822511296594, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "utkarsh2102", "fields": {"name": "Utkarsh Gupta", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-05-28T22:48:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaibhavsingh97", "fields": {"name": "Vaibhav Singh", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-10-29T20:38:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaishnavm217", "fields": {"name": "Vaishnav Murali", "score": 0.20451647183846944, "rank": 154, "trend": 0, "last_active_at": "2017-03-01T11:58:41Z", "pos_in": 1, "weighted_pos_in": 0.15451647183846942, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10197930478316126, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vddesai1998", "fields": {"name": "Vishal Desai", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2017-12-21T12:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vibhanshuvaibhav", "fields": {"name": "Vibhanshu Vaibhav", "score": 0.20738575982996782, "rank": 153, "trend": 0, "last_active_at": "2018-01-19T13:24:25Z", "pos_in": 1, "weighted_pos_in": 0.15738575982996783, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10200707367333813, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vijeth-aradhya", "fields": {"name": "euleram", "score": 2.080446333687567, "rank": 71, "trend": 0, "last_active_at": "2017-03-26T12:34:47Z", "pos_in": 3, "weighted_pos_in": 1.980446333687567, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1201345023330466, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vipuldcoder", "fields": {"name": "vipul Aggarwal", "score": 0.1, "rank": 180, "trend": 0, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10096779724653404, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "virresh", "fields": {"name": "Viresh Gupta", "score": 3.6842189160467567, "rank": 50, "trend": 0, "last_active_at": "2018-08-06T16:06:25Z", "pos_in": 11, "weighted_pos_in": 3.334218916046757, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13565576922578665, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wisn", "fields": {"name": "Wisnu Adi Nurcahyo", "score": 3.9312585305114545, "rank": 46, "trend": 0, "last_active_at": "2018-07-30T11:39:09Z", "pos_in": 13, "weighted_pos_in": 3.5812585305114544, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13804661181242428, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wyj1026", "fields": {"name": "Wang Yijie", "score": 0.2214665249734319, "rank": 147, "trend": 0, "last_active_at": "2017-12-19T16:43:19Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1021433469306875, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "xferra", "fields": {"name": "Andrey", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yash-nisar", "fields": {"name": "Yash Nisar", "score": 21.023113708820397, "rank": 4, "trend": 0, "last_active_at": "2017-09-03T12:50:43Z", "pos_in": 33, "weighted_pos_in": 14.273113708820395, "pos_out": 135, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.3034611156096833, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashLadha", "fields": {"name": "Yash Ladha", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-03-02T12:08:38Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashasingh", "fields": {"name": "Yasha", "score": -0.4513283740701395, "rank": 185, "trend": 0, "last_active_at": "2017-12-12T17:28:20Z", "pos_in": 2, "weighted_pos_in": 0.3759829968119013, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.9273113708820407, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashovardhanagrawal", "fields": {"name": "Yashovardhan Agrawal", "score": 2.268862911795962, "rank": 66, "trend": 0, "last_active_at": "2017-11-27T07:58:27Z", "pos_in": 11, "weighted_pos_in": 2.0688629117959616, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12195799278799328, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yukiisbored", "fields": {"name": "Muhammad Kaisar Arkhan", "score": 5.021625929861844, "rank": 37, "trend": 0, "last_active_at": "2018-05-18T17:39:46Z", "pos_in": 27, "weighted_pos_in": 4.771625929861844, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14859915748044214, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yzgyyang", "fields": {"name": "Guangyuan (Charlie) Yang", "score": 3.1009564293304996, "rank": 55, "trend": -1, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 4, "weighted_pos_in": 3.1009564293304996, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13001097093928077, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zenara", "fields": {"name": "Chathurika Senani", "score": 0.05, "rank": 181, "trend": 0, "last_active_at": "2017-04-06T19:27:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10048389862326702, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zwliew", "fields": {"name": "Zhao Wei Liew", "score": 0.04871011885228427, "rank": 182, "trend": 0, "last_active_at": "2017-12-28T06:48:01Z", "pos_in": 2, "weighted_pos_in": 0.5487101188522843, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.10047141518903586, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDEwODM3Nw==", "fields": {"body": "now we can use rultor \ud83c\udf89", "diff": null, "created_at": "2017-01-20T16:01:54Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDMyODkzMQ==", "fields": {"body": "@hemangsk I made the necessary changes. Is it alright now?", "diff": null, "created_at": "2017-01-22T12:48:14Z", "last_edited_at": null, "author": "SiddharthKumar02", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDU2Mjg5OQ==", "fields": {"body": "could you also formulate why coala needs/wants a gui in a nice paragraph? I guess I know your Idea behind it but considering who the target audience of coala is(devs) why would a gui be a nice thing?", "diff": null, "created_at": "2017-01-23T17:47:50Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTI1NjQ1Ng==", "fields": {"body": "Hi, I am PyCharm team lead. I can be a co-mentor for this project. The idea behind the support of mypy and pylint along with the coala is that it's better to have a general mechanism of highlighting code analysis results from external tools. (By the way, we already have something similar for PEP8) Of course the primary goal can be to support coala, but the API should be done in a way to be able to support others.", "diff": null, "created_at": "2017-01-25T22:43:00Z", "last_edited_at": null, "author": "traff", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTI5MjU4MA==", "fields": {"body": "Hi, I'm a newcomer to coala and I'm interested in this project.\nSo jetbrains IDEs don't have a good support to static analysis and the community want students to find a general way to write static analysis plugin?\nCould we reference https://github.com/Microsoft/language-server-protocol?", "diff": null, "created_at": "2017-01-26T02:20:11Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NjAyNzk0MQ==", "fields": {"body": "@NiklasMM don't worry I'll always be there for you ;)", "diff": null, "created_at": "2017-01-30T10:30:29Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ==", "fields": {"body": "In the future, please develop on a new branch rather than master. Here's a link to explain how :)\nhttp://api.coala.io/en/latest/Developers/Git_Basics.html#creating-a-new-branch", "diff": null, "created_at": "2017-02-01T20:29:09Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3Njk3MDY0Mw==", "fields": {"body": "Hey, this is your first contribution, right? Congrats and welcome to the coalaians! :) You've done your first step to become a coala developer.\nYour changes are auomatically released and live already.\nWe would really appreciate it if you could help us with\n\ntelling us about your experience\nsome code reviews for other newcomers\nfixing at least a difficulty/low issue\nfill our usability survey\n\nIf you've done those and tell us about it so we can promote you to a coala developer!\nWe're all volunteers and we're currently struggling to keep this up. Helping all those newcomers is a lot of work and we do need your help so we can continue this for others!", "diff": null, "created_at": "2017-02-02T14:22:47Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI2MzkwNw==", "fields": {"body": "Ya the Left align solution sounds better \ud83d\udc4d", "diff": null, "created_at": "2017-02-03T14:44:29Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI3NTQ4NA==", "fields": {"body": "your commits need squashing and please read coala.io/commits carefully", "diff": null, "created_at": "2017-02-03T15:24:32Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI4MTA4NQ==", "fields": {"body": "credits to @impmihai for the solution :)", "diff": null, "created_at": "2017-02-03T15:43:14Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw==", "fields": {"body": "Yup, not possible. No problem, i will get onto another isuue.", "diff": null, "created_at": "2017-02-03T11:50:29Z", "last_edited_at": null, "author": "aalind0", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzM0MTE0OQ==", "fields": {"body": "@Mariatta Here is the screenshot-", "diff": null, "created_at": "2017-02-03T19:35:30Z", "last_edited_at": null, "author": "Shruti9520", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzMzOTEyOQ==", "fields": {"body": "Can you also post a screenshot of how the new page will look like after these changes you make?\nThanks.", "diff": null, "created_at": "2017-02-03T19:27:39Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzQ2OTcyNw==", "fields": {"body": "Looks good in the screenshot, tested locally as well \ud83d\udc4d  \ud83c\udf89", "diff": null, "created_at": "2017-02-04T19:36:44Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzU0MTkzOQ==", "fields": {"body": "Sorry this is getting a bit tedious for you \ud83d\ude05  but we get the hang of the drill after some time \ud83d\ude03  \ud83d\udc4d\n\nYou need to squash your commits coala.io/git\nAnd then rebase your branch", "diff": null, "created_at": "2017-02-05T19:19:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzU1NDUzOA==", "fields": {"body": "There's typo:\nwining -> winning", "diff": null, "created_at": "2017-02-05T22:18:45Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODA4MDE4Nw==", "fields": {"body": "we are not as strict on the projects repo so I'll just grab everything when it's done and make it nice ;)", "diff": null, "created_at": "2017-02-07T17:44:49Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODA4NTg5OQ==", "fields": {"body": "you have quite some typos in there, consider putting your text into https://languagetool.org/ before you submit it :)", "diff": null, "created_at": "2017-02-07T18:01:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw==", "fields": {"body": "There :)", "diff": null, "created_at": "2017-02-07T14:55:02Z", "last_edited_at": null, "author": "rahulkrishnan98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODIyMzgxNg==", "fields": {"body": "@gkrishnan724 @rahulkde Do you guys feel we need a little margin left (1em/2em) on the search icon ?", "diff": null, "created_at": "2017-02-08T04:06:55Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM4MDIyMQ==", "fields": {"body": "I did... now it works so maybe just had to wait 5 minutes :)", "diff": null, "created_at": "2017-02-08T16:32:58Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTI5NA==", "fields": {"body": "@arnab1896 Looks nice! there is one more inconsistency in generic_bears.md that the headings are not in uppercase like in the other projects, can you fix those too while we're at it  \ud83d\ude03", "diff": null, "created_at": "2017-02-08T16:59:06Z", "last_edited_at": "2017-02-08T16:59:40Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTc5Mg==", "fields": {"body": "Thats ok. I will make a huge PR fixing all the remaining Projects now as we're running out of time", "diff": null, "created_at": "2017-02-08T17:00:35Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM5MTI4MA==", "fields": {"body": "@hemangsk Done with the changes ! :D", "diff": null, "created_at": "2017-02-08T17:04:57Z", "last_edited_at": null, "author": "aalind0", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODQ0MDQ1MQ==", "fields": {"body": "@raj-maurya the deadline is in 17 hours... can you address this issues like ASAP...", "diff": null, "created_at": "2017-02-08T19:47:13Z", "last_edited_at": null, "author": "dracarys09", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODQxOTcyNw==", "fields": {"body": "@raj-maurya ; need any help with editing your commit message? Do let me know.\nmeanwhile; carefully read this if you still haven't-----> http://api.coala.io/en/latest/Developers/Git_Basics.html", "diff": null, "created_at": "2017-02-08T18:33:55Z", "last_edited_at": null, "author": "arnab1896", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDY2MTY3Ng==", "fields": {"body": "@yukiisbored @gkrishnan724  Yeah I'm testing it locally \ud83d\ude03  looks all awesome so far", "diff": null, "created_at": "2017-02-17T14:19:27Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4Njc0NDA3OQ==", "fields": {"body": "@supergr35 I checked it before commiting ^^ The issue was labeled bug so I wrote Fixes.\nI will change (:", "diff": null, "created_at": "2017-03-15T13:40:43Z", "last_edited_at": "2017-03-15T13:54:51Z", "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzA4Nzg1NQ==", "fields": {"body": "@hemangsk thanks, I've been tinkering with this for the last 20 minutes :D", "diff": null, "created_at": "2017-03-16T15:10:21Z", "last_edited_at": null, "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzYxNTIzMA==", "fields": {"body": "Could you show the contents of your .coafile? @vimcoffee", "diff": null, "created_at": "2017-03-19T13:02:44Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ==", "fields": {"body": "@meetmangukiya I'm looking into them :)", "diff": null, "created_at": "2017-03-19T15:20:51Z", "last_edited_at": null, "author": "sahilarora535", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTA3Mzc4Mw==", "fields": {"body": "This PR is ready to be merged. The requested changes have been made.", "diff": null, "created_at": "2017-03-24T16:33:22Z", "last_edited_at": null, "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTAwNzQ0Mw==", "fields": {"body": "@kaustubhhiware You'll have to amend the commit message with,\ngit commit --amend and then force push.", "diff": null, "created_at": "2017-03-24T12:14:57Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDk5MzE2MQ==", "fields": {"body": "thx @hemangsk you're gorgeous!", "diff": null, "created_at": "2017-04-02T15:22:10Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTE0NTg1OQ==", "fields": {"body": "Yeah, primarily the concept is that one commit should have only one atomic/nuclear change. So we can have two about adding the indentation bear and about correcting indentation.", "diff": null, "created_at": "2017-04-03T13:40:45Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTE4NDc3MQ==", "fields": {"body": "@hemangsk All the suggested changes have been made. Line 272 has been corrected.\n2 separate commits have been made to keep the changes atomic. Open for review.", "diff": null, "created_at": "2017-04-03T15:48:58Z", "last_edited_at": "2017-04-03T15:49:19Z", "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTIwNjgzMA==", "fields": {"body": "The changes have been made. Please see.", "diff": null, "created_at": "2017-04-03T17:03:54Z", "last_edited_at": null, "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ==", "fields": {"body": "@Techievena Pro-tip: Use a different branch on your fork so you can update it easily without issues with \"merging\" from the origin remote when pulling.", "diff": null, "created_at": "2017-04-22T15:57:12Z", "last_edited_at": "2017-04-22T15:57:19Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg==", "fields": {"body": "@hemangsk works good locally!\nbut why do we have the status for high-involvement as 'crowded'?  why don't we keep it as high_involvement? because if people search for high-involvement projects, they will probably input high-involvement in the search bar, not crowded since the label indicates high involvement.", "diff": null, "created_at": "2017-04-24T14:50:00Z", "last_edited_at": "2017-04-24T14:50:42Z", "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NzY3MzYzMg==", "fields": {"body": "can we support multiple statuses on one project? Right now we don't need it but might in the future.", "diff": null, "created_at": "2017-04-27T10:16:20Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5Nzk2Nzk3Ng==", "fields": {"body": "done @jayvdb", "diff": null, "created_at": "2017-04-28T10:47:38Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NzkyMDkzMg==", "fields": {"body": "@RohanVB, can you undo the change as @sims1253 requested, rebase, and then we can ack and get this merged.\nThey are only minor changes, but they are good changes.", "diff": null, "created_at": "2017-04-28T06:44:50Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDY4MjcxMg==", "fields": {"body": "@Monal5031 please see if things are in place. \ud83d\udc4d", "diff": null, "created_at": "2017-10-31T07:32:35Z", "last_edited_at": null, "author": "anshumanv", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDc4MDU1NA==", "fields": {"body": "@aashutoshrathi Please follow http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nfileName: Mention changes summary\nChanges\n\nCloses #{issue number}", "diff": null, "created_at": "2017-10-31T14:32:02Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDgyNjgzNQ==", "fields": {"body": "Umm... The Shortlog is still not in imperative mood. Actually, you changed the title of your PR \ud83d\ude04.\nIdeally, Shortlog should be index.html: Fix spacing issues as drop-down issue has been solved in another PR already \ud83d\ude03. You can amend your Shortlog by git commit -a --amend \ud83d\udc4d.\nAlso, the spacing issue seems to be fixed now - Good work \ud83d\udc4d", "diff": null, "created_at": "2017-10-31T16:50:14Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw==", "fields": {"body": "@ai-coder , you have done one newcomer issue.  Fixing individual spelling mistakes are newcomer issues.\nThe bug you are solving was low because it was about adding a spell checker bear, which is not what you are doing in this PR.", "diff": null, "created_at": "2017-11-03T08:19:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw==", "fields": {"body": "The content of your patch is fine; please amend your commit message\nhttp://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nThis type of change is \"Closes\", not a \"Fixes\", as the current version is not broken.", "diff": null, "created_at": "2017-11-03T14:00:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkxODYyNw==", "fields": {"body": "@yashovardhanagrawal one way is that u can add members that are in core development groups and omit those who are in pending removal group and list cannot be a static number.", "diff": null, "created_at": "2017-11-04T18:16:42Z", "last_edited_at": null, "author": "prashant0598", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkyMDEyOQ==", "fields": {"body": "@prashant0598 Rather than using APIs or any specific number, I am just thinking to add a counter to count the number of cards displayed. I am studying the backend for this, let's see \ud83d\ude04", "diff": null, "created_at": "2017-11-04T18:39:16Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg==", "fields": {"body": "I would rather recommend to write it lowercase, because it's not referring to a name or title. Do it then for both, inside the commit body and in the .rst", "diff": null, "created_at": "2017-11-04T20:26:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ==", "fields": {"body": "@Grox-Ni You missed a full stop at the end of commit description \ud83d\ude09.", "diff": null, "created_at": "2017-11-07T15:42:01Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjgzNTQwOQ==", "fields": {"body": "@prashant0598 that issue if for a different task, this PR remains and I think the proposed work for this PR is also completed by me. \ud83d\ude1c\nAbout the issue, it is yet unlabelled and unlabelled issue are not meant to be assigned to newcomers so corobo cannot assign it to me.\nYou might view the whole conversation here, if you want to know more about what is the progress \ud83d\ude04", "diff": null, "created_at": "2017-11-08T14:34:39Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ==", "fields": {"body": "@troublemagnet done thanks!!", "diff": null, "created_at": "2017-11-11T11:55:28Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE0OTkzMw==", "fields": {"body": "You need to rebase your patches before you submit a PR. :/", "diff": null, "created_at": "2017-11-14T05:22:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE4OTY5MQ==", "fields": {"body": "Umm... @yashovardhanagrawal I think you already have one PR in queue (the GIF one?).... Please, try not to solve more newcomer issues \ud83d\ude09 \ud83d\udc4d", "diff": null, "created_at": "2017-11-14T09:02:00Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE5NDk5OQ==", "fields": {"body": "@prnvdixit I did this as the process was blocked for that GIF PR\nwill not do any newcomer PR now", "diff": null, "created_at": "2017-11-14T09:22:08Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE5ODY2Nw==", "fields": {"body": "Also, please refrain from pushing commits from your \"master\" branch.", "diff": null, "created_at": "2017-11-14T09:35:02Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw==", "fields": {"body": "Also, again - try not to make changes to your \"master\" branch, the consequences of doing so are well documented here \ud83d\ude09 \ud83d\udc4d", "diff": null, "created_at": "2017-11-15T13:05:46Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQwOA==", "fields": {"body": "Also first get the issue assigned to yourself via corobo in gitter chat using\ncorobo assign <issue link>\nfollow the commit guidelines\nI have mentioned an example in your other PR", "diff": null, "created_at": "2017-11-15T15:39:22Z", "last_edited_at": "2017-11-15T15:39:36Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQxOA==", "fields": {"body": "First get an issue assigned to yourself via corobo in gitter chat\nthen only start to work on a PR\nremember this while contributing in coala \ud83d\ude04", "diff": null, "created_at": "2017-11-15T15:39:24Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA==", "fields": {"body": "@neelanshsahai You don't need to unack just to request changes, use GitHub's feature or just make it a comment.\nOf course, unack is used when you disagree that this is acceptable and has been ack'd by someone else.", "diff": null, "created_at": "2017-11-16T11:02:09Z", "last_edited_at": "2017-11-16T11:02:48Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDgyMTIzOA==", "fields": {"body": "@Makman2 I feel it's not a duplicate, he has addressed two different issues in these two PRs\njust the thing is he has added extra commit related to that PR also", "diff": null, "created_at": "2017-11-16T05:37:25Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA==", "fields": {"body": "Yes, the documentation should focus on describing .coarc , rather than default_coafile, but I think this example is good enough for this PR/issue.  The problem with default_coafile is in core, not the documentation, and further improvements of docs dont help users a great deal.", "diff": null, "created_at": "2017-11-17T17:39:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjAwNw==", "fields": {"body": "first, read our commit guidelines\nyou shortlog is wrong and also you have not added a commit description the main reason why the last PR for this issue was closed", "diff": null, "created_at": "2017-11-18T18:40:46Z", "last_edited_at": "2017-11-18T18:45:48Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjQ0NA==", "fields": {"body": "A better shortlog can be:\ncoala_will_apply_for_gsoc_2018.md: Add new FAQ\nDescription:\n\nThis adds a new FAQ related to coala applying for\nGoogle Summer of Code - 2018\nAlso adds GSoC timeline is in the answer\nCloses issue link", "diff": null, "created_at": "2017-11-18T18:48:03Z", "last_edited_at": "2017-11-18T18:50:04Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjcyMg==", "fields": {"body": "Also forgot to mention, rebase your commit to update the changes\nyou might read http://api.coala.io/en/latest/Developers/Git_Basics.html for more information about how to do it", "diff": null, "created_at": "2017-11-18T18:52:23Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg==", "fields": {"body": "@prashant0598 please insert a line break between the description and Closes #128\nas I had suggested", "diff": null, "created_at": "2017-11-18T18:55:51Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2NDE1OQ==", "fields": {"body": "@prashant0598 will keep that in mind from the next time, in this PR I cannot change the branch and I think closing a PR would not be good.\n@yashovardhanagrawal I have again updated a few changes\nYou both may review it", "diff": null, "created_at": "2017-11-18T19:13:58Z", "last_edited_at": null, "author": "ihsraham", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTYzNzE4MQ==", "fields": {"body": "You need to rebase.", "diff": null, "created_at": "2017-11-20T09:22:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ==", "fields": {"body": "Also, fix your commit to adhere to https://coala.io/commit \ud83d\ude04", "diff": null, "created_at": "2017-11-26T05:35:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg==", "fields": {"body": "@0x48piraj, please follow the instructions given to you by our developers.  We have good reasons for why and how we do things, which you will learn if you proceed through the newcomer process.\nOur newcomer process exists only to ensure you know how to use git correctly.\nIf you dont follow our processes, we discard your PR.\nThank you.", "diff": null, "created_at": "2017-11-27T05:39:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA4OTQ5OQ==", "fields": {"body": "This PR is ghosted.", "diff": null, "created_at": "2017-11-27T06:23:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng==", "fields": {"body": "Also, it's a great first PR \ud83d\ude04 - you needn't start a new PR, just go through the suggested changes and associated guides \ud83d\ude03.\n\nI was talking about setting up the project in git \ud83d\ude1b\nAnd \"I never said anything\" was for that this was just a request to accept this PR, and from next issue, I will do it via git.\nAnyways, you all are right! I read the guidelines, but of my laziness I did it via web-interface.\nI know I'm assigned \ud83d\ude09\nThanks @prnvdixit for such a positive comment.\nFrom now, I will do as it is done in coala \ud83d\ude0a", "diff": null, "created_at": "2017-11-27T06:48:31Z", "last_edited_at": null, "author": "0x48piraj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzY2MTM4OA==", "fields": {"body": "Alright, sorry. Addressed. :)", "diff": null, "created_at": "2017-11-28T20:58:29Z", "last_edited_at": null, "author": "Lyrenhex", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzcyODE2OA==", "fields": {"body": "I checked on Netlify , using https://deploy-preview-430--coala-projects.netlify.com/gsoc/2017/statusreport/hemangkumar , and functionally the code is good. (surprise!)\nNow just need to tidy it up", "diff": null, "created_at": "2017-11-29T02:02:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODY5ODQ0MQ==", "fields": {"body": "Also make sure to include the new migrations, using makemigrations", "diff": null, "created_at": "2017-12-02T15:15:39Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA==", "fields": {"body": "Done :)", "diff": null, "created_at": "2017-12-05T03:33:08Z", "last_edited_at": null, "author": "indmind", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg==", "fields": {"body": "Also, it's not labelled \"bug\" - So, use \"Closes\" instead of \"Fixes\" in commit. \ud83d\udc4d", "diff": null, "created_at": "2017-12-05T07:48:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng==", "fields": {"body": "If #37 is merged shortly, it'll still be good to add static/js/*.js to the linted JavaScript files.", "diff": null, "created_at": "2017-12-06T08:28:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw==", "fields": {"body": "Comment on a3bbb6d, file scrap.js, line 10.\nBroken link - unable to connect to https://codein.withgoogle.com/api/program/2017/organization/?status=2 (HTTP Error: 503)\nOrigin: InvalidLinkBear, Section: all.links.", "diff": null, "created_at": "2017-12-06T05:25:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw==", "fields": {"body": "You might need run this 2 line inside the project folder\nexport PATH=$PATH:./node_modules/.bin\nexport NODE_PATH=$NODE_PATH:./node_modules\n\nTo let coala use the local eslint.", "diff": null, "created_at": "2017-12-07T10:15:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg==", "fields": {"body": "Could you modify this as well as part of your folder restructuring?\n\n  \n    \n      gci-leaders/.coafile\n    \n    \n         Line 2\n      in\n      df44130\n    \n    \n    \n    \n\n        \n          \n           files = *.js, static/js/*.js", "diff": null, "created_at": "2017-12-08T06:09:21Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw==", "fields": {"body": "This is so awesome \u2764\ufe0f", "diff": null, "created_at": "2017-12-08T06:58:37Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA==", "fields": {"body": "#49 and #50 should use Closes\nThe rest is good enough, however try to keep to our 'one commit for one issue' guideline next time.", "diff": null, "created_at": "2017-12-08T07:07:31Z", "last_edited_at": "2017-12-08T07:14:48Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng==", "fields": {"body": "LGTM = looks good to me. ack tells the bot to accept the patch", "diff": null, "created_at": "2017-12-08T16:41:11Z", "last_edited_at": "2017-12-08T16:41:29Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw==", "fields": {"body": "I think we should have a strong horizontal line between each org, and a much less visually distracting separator between icons and participants.", "diff": null, "created_at": "2017-12-11T06:45:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA==", "fields": {"body": "Oh, one last thing, it might be better to use the Wikipedia and Wikimedia logos without text, because it's not readable anyways when the logo is so small. Using just the icon without text will help it fit in more.", "diff": null, "created_at": "2017-12-12T22:05:57Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ==", "fields": {"body": "how do we determine the parent repo of the fork?\n\nThat would be another GitHub API call .. ;)\nBut I meant that it would be OK to just hard code https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nI dont feel particularly inclined to help someone create an alternative version without sending their improvements to this repo.  I am more concerned about the ability for development forks of this repo to build correctly, so newcomers can easily participate in this repo.\nThe problem is that if you use https://raw.githubusercontent.com/andrewda/gh-pages/data.min.json , and dont use https://raw.githubusercontent.com/coala/gh-pages/data.min.json , the build on the fork will be 'reset' , and will need to have several builds before it catches up to the data which has been found in https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nSo if you do use https://raw.githubusercontent.com/xxxx/gh-pages/data.min.json , you should also fall back to https://raw.githubusercontent.com/coala/gh-pages/data.min.json (and IMO , just hard-code it).", "diff": null, "created_at": "2017-12-13T08:23:52Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng==", "fields": {"body": "That would be one option, but adding a CACHE_VERSION would allow us to avoid this problem entirely in the future, such as if a new key were added or an existing one were taken away.", "diff": null, "created_at": "2017-12-14T03:21:12Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjE2MzUwNA==", "fields": {"body": "@Monal5031 , common gitignore entries can be done using moban.  Setting that up is my next project after getting the GCI app here working.", "diff": null, "created_at": "2017-12-16T05:55:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjE2NDE1Mg==", "fields": {"body": "Sure.  You could do code review of other peoples patches... :P", "diff": null, "created_at": "2017-12-16T06:13:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ==", "fields": {"body": "Also the expected results says to use yeah but you have changed it to true", "diff": null, "created_at": "2017-12-17T17:16:16Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw==", "fields": {"body": "@ishanSrt\n\nAlso the expected results says to use yeah but you have changed it to true\n\nthat is the expected results it depends what we passed , but on Tutorial we passed True :)", "diff": null, "created_at": "2017-12-17T17:54:01Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg==", "fields": {"body": "If you want to use var = arr.map then you need to return the whole object, not just mutating them.\nBut let's just use forEach", "diff": null, "created_at": "2017-12-18T07:56:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ==", "fields": {"body": "http://coala.io/newcomer tells you not to do that, twice.  Please read it carefully.", "diff": null, "created_at": "2017-12-18T09:46:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA==", "fields": {"body": "Would be good to have the RSS mentioned in the index.html", "diff": null, "created_at": "2017-12-20T10:41:27Z", "last_edited_at": "2017-12-20T10:41:36Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw==", "fields": {"body": "@blazeu Is it?", "diff": null, "created_at": "2017-12-21T06:07:46Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA==", "fields": {"body": "Ignoring the line is probably the best way.", "diff": null, "created_at": "2017-12-21T00:37:25Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzQ0MjMzMg==", "fields": {"body": "@k4ni5h I am not talking about #432 (comment).\nYou have to change your commit message here - https://github.com/coala/projects/pull/432/commits.\nUse command git commit --amend and then change your commit message there and then do git push --force branch_name\nTake help from http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html to write a good commit", "diff": null, "created_at": "2017-12-21T19:51:29Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg==", "fields": {"body": "Please squash your rss commits.  There is no need to create a file in one commit and then modify it in another , within one PR.  It is one code addition.", "diff": null, "created_at": "2017-12-22T05:47:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ==", "fields": {"body": "Ideally a PR shouldn't come from your master branch it can complicate things.\nBut don't worry, do not close this one. You can discuss about it in our chat.", "diff": null, "created_at": "2017-12-22T15:31:46Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA==", "fields": {"body": "In general, it's let for reassignable variable or const for unassignable.\nSee our backend js.\nWe have Babel so browser support is pretty good.", "diff": null, "created_at": "2017-12-24T00:53:38Z", "last_edited_at": "2017-12-24T00:54:23Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mzc3Nzg3Ng==", "fields": {"body": "Here is the preview:  https://deploy-preview-68--coala-community.netlify.com/\nCould you reduce the height and width of the logo in the HTML/CSS.  Leave the image file with its current dimensions.\nOptional, you can also remove the logo from gci/ page.", "diff": null, "created_at": "2017-12-24T10:53:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw==", "fields": {"body": "According to the Best Practices doc mentioned in the original issue, the image size has to be at least 200x200 pixels for smaller sharing posts, or 600x315 pixels for larger sharing posts.\nThe current image is 72x72 pixels (after commit f95ffaf214f529b69de444760653ce75f2621410, so I decided to re-add the previous image instead.", "diff": null, "created_at": "2017-12-28T06:31:41Z", "last_edited_at": "2017-12-28T06:35:40Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ==", "fields": {"body": "I believe an image with a white background works and looks fine.\nExample using an image with a white background:", "diff": null, "created_at": "2017-12-28T06:40:15Z", "last_edited_at": "2017-12-28T06:40:25Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng==", "fields": {"body": "@blazeu That was actually caused by my padding: 10px instead of padding: 10px 0. I just fixed the padding instead.", "diff": null, "created_at": "2017-12-29T08:17:08Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQyNDEwOQ==", "fields": {"body": "@adi23arora apparently my commit message had a trailing period. I have updated the commit \ud83d\ude03 . Please review.\n\nShortlog\nExample:\nsetup.py: Change bears' entrypoint\nMaximum of 50 characters.\nKeeping subject lines at this length ensures that they are readable, and explains the change in a concise way.\nShould describe the change - the action being done in the commit.\nShould have a tag and a short description separated by a colon (:)\nTag\n\nThe file or class or package being modified.\nNot mandatory.\n\nShort Description\n\nStarts with a capital letter.\nWritten in imperative present tense (i.e. Add something, not Adding something or Added something).\nNo trailing period.", "diff": null, "created_at": "2017-12-29T09:52:46Z", "last_edited_at": null, "author": "namantw", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDU1Njg0NA==", "fields": {"body": "Ah! Just forgot about that, my bad. Thanks for clearing it for me though, @namantw  \ud83d\udcaf", "diff": null, "created_at": "2017-12-30T17:09:18Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA==", "fields": {"body": "@blazeu I've mentioned it above. See here.", "diff": null, "created_at": "2017-12-31T10:04:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA==", "fields": {"body": "Note that this was working way back before @dob9601 added a bunch of new codes, so I accepted the task in GCI.", "diff": null, "created_at": "2018-01-03T14:30:35Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng==", "fields": {"body": "done", "diff": null, "created_at": "2018-01-06T15:10:14Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Njg4MTQ5Mg==", "fields": {"body": "Done @nalinbhardwaj", "diff": null, "created_at": "2018-01-11T09:47:12Z", "last_edited_at": null, "author": "Prabhat-IIT", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ==", "fields": {"body": "and make sure in your commit message you are using only present tense \ud83d\ude09", "diff": null, "created_at": "2018-01-18T22:11:34Z", "last_edited_at": null, "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng==", "fields": {"body": "@Kagamihime Oh forgot to change the comment here. Had already changed the commit by looking at another PR.", "diff": null, "created_at": "2018-01-22T14:01:03Z", "last_edited_at": null, "author": "diveshuttam", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng==", "fields": {"body": "coala says:\n|    | [NORMAL] GitCommitBear:\n|    | No newline found between shortlog and body at HEAD commit. Please add one.\n\nYour commit needs to be like this\nMain.css: Fix broken social link\n\nFixes https://github.com/coala/gci-leaders/issues/73\n\n1 newline between shortlog and body.", "diff": null, "created_at": "2018-02-04T14:53:15Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA==", "fields": {"body": "I implemented wisn's suggestion, the one that made the issue a newcomer one, but perhaps there are better ways to solve this issue.", "diff": null, "created_at": "2018-02-06T06:49:20Z", "last_edited_at": null, "author": "mvinoba", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg==", "fields": {"body": "Now we are talking, looks good :D", "diff": null, "created_at": "2018-02-13T11:24:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw==", "fields": {"body": "Sure @Makman2 This won't repeat again :)", "diff": null, "created_at": "2018-02-15T14:41:19Z", "last_edited_at": null, "author": "nguptaa", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NjQ5MjE5Ng==", "fields": {"body": "Please actually import the data into the data model.\nI'll probably need to add a key to netlify & travis , etc so that your import process works.", "diff": null, "created_at": "2018-02-18T04:40:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NzA4Mjg1MQ==", "fields": {"body": "Please don't close PRs just because of gitmate issues. You can always fix them up in the same PR.", "diff": null, "created_at": "2018-02-20T19:02:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Nzc1NDczOA==", "fields": {"body": "I think it should be correct now. Please check it.", "diff": null, "created_at": "2018-02-22T17:21:23Z", "last_edited_at": null, "author": "himanshu1603", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDcwOA==", "fields": {"body": "Thanks a lot for helping me so much!", "diff": null, "created_at": "2018-02-22T18:26:52Z", "last_edited_at": null, "author": "himanshu1603", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODU0MjI0MA==", "fields": {"body": "Most of them are dependencies of html-proofer. I updated html-proofer because the version we used to use depends on nokogiri (~> 1.7)", "diff": null, "created_at": "2018-02-26T15:34:50Z", "last_edited_at": null, "author": "LenaAn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MTcyNTU2NA==", "fields": {"body": "first work of commit message shortlog should be runtime.txt", "diff": null, "created_at": "2018-03-09T06:28:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDE5MTc4MA==", "fields": {"body": "https://deploy-preview-486--coala-projects.netlify.com/#/projects?project=improve_lint_bear_quality looks good", "diff": null, "created_at": "2018-03-19T12:14:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDE5MzY4OA==", "fields": {"body": "You'll see it creates a nice git log, without a messy commit list full of merge commits.", "diff": null, "created_at": "2018-03-19T12:22:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDI4MDgwNA==", "fields": {"body": "@virresh Could you explain the second part of point 1 above. I am slightly confused with this one.\nAnd regarding the 2nd point,\n\n@kriti21 , from my understanding, it is always possible to determine the shortlog prefix, since always the prefix in the shortlog is the file name which has the maximum changes\nfor example if in a patch, the file PEP8Bear.py has the most changes, the shortlog prefix should be PEP8Bear ideally", "diff": null, "created_at": "2018-03-19T16:43:49Z", "last_edited_at": "2018-03-19T16:45:01Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NTczMTQxMg==", "fields": {"body": "I've notified @GitMate; hopefully they fix it soon.", "diff": null, "created_at": "2018-03-23T16:54:57Z", "last_edited_at": "2018-03-23T16:55:34Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTk0Njg5NA==", "fields": {"body": "5:30:08 PM: CommandError: Failed to render view: 'total_count'\n\nNo doubt you are aware that this is the problem atm.\n@sks444 , here is an example of the problem in distill.  It doesnt say which view caused the error.", "diff": null, "created_at": "2018-04-10T01:43:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MDUwMzM5Ng==", "fields": {"body": "it should pass if you make the HTML changes before the coala config changes I think?\n\nYeah, but doesn't sound good, right? At first, we are adding the bear then we are finding what changes to make.\nGoing for the multi: then. :)", "diff": null, "created_at": "2018-04-11T15:54:18Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng==", "fields": {"body": "I notice that JBoss has two linked on https://gci-leaders.netlify.com/ , but none on https://deploy-preview-148--gci-leaders.netlify.com/ .", "diff": null, "created_at": "2018-04-17T04:57:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA==", "fields": {"body": "fwiw, a part of the problem was that 92a68a2 cleared out all of the data in the deploy.\nWe dont need a special case for JBoss.  The link in GCI is old, but a head request will give us the new URL.\nThat is needed for any github/gitter URL which changes.\nThat should be a new PR which just fixes master.", "diff": null, "created_at": "2018-04-20T02:18:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA==", "fields": {"body": "#551 (comment) kind of comments can be disabled by turning on travis-buddy only if the tests fail.", "diff": null, "created_at": "2018-04-22T20:56:04Z", "last_edited_at": null, "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM0OTM4MQ==", "fields": {"body": "No you are not following the guidelines\nThis is your commit message Spelling mistake correct\nNow read this http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nDo you think it follows the guidelines? This is the reason why travis is failing too.\nGive it another try if you still can't figure it out I'll tell you what to do. \ud83d\udc4d", "diff": null, "created_at": "2018-04-30T09:24:04Z", "last_edited_at": "2018-04-30T09:24:34Z", "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM1MjY3NQ==", "fields": {"body": "No, change your commit message not your PR title.\nCommit message is the one you enter when you do git commit -m \"Spelling mistake correct\"", "diff": null, "created_at": "2018-04-30T09:41:04Z", "last_edited_at": "2018-04-30T09:41:19Z", "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM1NTQyNw==", "fields": {"body": "You clearly have not read the guides and jumped to the issue straight. Go and checkout the guides and the git tutorial.", "diff": null, "created_at": "2018-04-30T09:55:07Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDA5NjMxMQ==", "fields": {"body": "I agree that it is better to reuse the code in python language server. I think we could refer to the arch of python language server.\nRunning coala as a subprocess is a temporary solution. We are investigating call coala from python while it needs some changes from coala side.", "diff": null, "created_at": "2018-05-18T05:11:28Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDk5NDI1NQ==", "fields": {"body": "/LGTM\nThanks for the detail!", "diff": null, "created_at": "2018-05-22T13:41:17Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTQxMzgzNg==", "fields": {"body": "Looks good to me @fatma-mohamed \ud83d\udc4d", "diff": null, "created_at": "2018-05-23T16:32:52Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDA1MjA4MQ==", "fields": {"body": "@RJ722 yea, after the change, it is weird :).\nThe fix itself looks good to me.\nEdit:\nI think we can keep http://github.com/summerofcode/gsoc-prep-tasks . It is already redirected. So, wasn't an Issue.", "diff": null, "created_at": "2018-06-02T02:46:04Z", "last_edited_at": "2018-06-02T02:50:34Z", "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NTM2MTcwOQ==", "fields": {"body": "Okay, I thought it was ready for review \ud83d\ude05", "diff": null, "created_at": "2018-06-07T09:49:40Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODQ5MzA5OQ==", "fields": {"body": "@li-boxuan Travis runs the build on the result of a merge between your branch and the branch it's merging into if possible. If you update your branch to be in-sync with master, you'll see the python manage.py test.\nhttps://github.com/coala/community/blame/d8e760bf8abd555ef643652bdcdf652fda5575ee/.ci/build.sh#L18\nMight help you debug the failing build a little more.", "diff": null, "created_at": "2018-06-19T18:08:43Z", "last_edited_at": "2018-06-19T18:09:20Z", "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ==", "fields": {"body": "Any opinion on if we should should have a wrapped link - If you believe someone is violating the code of conduct <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>__ to maintain line length?", "diff": null, "created_at": "2018-06-21T07:12:04Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMTA4NDU5NQ==", "fields": {"body": "@NiklasMM Noticed one of my mentor's name is not here \ud83d\ude22 (yours \ud83d\ude1b )\nAdding the same with another commit.", "diff": null, "created_at": "2017-05-12T14:01:04Z", "last_edited_at": null, "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTc0MTc0Ng==", "fields": {"body": "i think that italicizing it may be a little overkill. however, me and my student had a better idea: checkboxes. what do you think? https://github.com/coala/projects/blob/master/data/projects/coala_cli.md check here and let me know your thoughts", "diff": null, "created_at": "2017-06-02T09:47:15Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDk2MTQ1Ng==", "fields": {"body": "This is what comes up.", "diff": null, "created_at": "2017-06-26T04:31:20Z", "last_edited_at": null, "author": "arrayslayer", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ==", "fields": {"body": "Thank you so much.. this is my first ever PR accepted in an opensource project. hooray!! \ud83d\ude03", "diff": null, "created_at": "2017-07-05T13:20:36Z", "last_edited_at": null, "author": "raghavmittal101", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzI4NDM2Ng==", "fields": {"body": "@IpshitaC updated :)", "diff": null, "created_at": "2017-07-06T03:17:31Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTU5NTQwOQ==", "fields": {"body": "Thank you! It seems the same.", "diff": null, "created_at": "2017-07-16T08:59:35Z", "last_edited_at": null, "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTU5OTk2OA==", "fields": {"body": "@Tecbeast-com Hey, your second commit message doesn't follow the commit guidelines, could you please fix it.", "diff": null, "created_at": "2017-07-16T10:27:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTUzODQ0Mw==", "fields": {"body": "Works great so far, I play with it. \ud83d\udc4d\nMaybe we need to put intstruction to run this stuff locally in readme or somewhere...\nsupercool!", "diff": null, "created_at": "2017-07-15T14:43:50Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTYwNjU4Mg==", "fields": {"body": "Sure, here it is http://api.coala.io/en/latest/Developers/Git_Basics.html#follow-up, you have to amend the second commit message updated coala-quickstart on both the CI projects to follow the specified commit message format", "diff": null, "created_at": "2017-07-16T12:39:29Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg==", "fields": {"body": "Sorry to just echo what you said @hemangsk \ud83d\ude1b  Didn't read through the whole thread after seeing the commit message \ud83d\ude1c .", "diff": null, "created_at": "2017-07-17T17:34:00Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg==", "fields": {"body": "@Arsfiqball I have done the required changes, please take a look :)", "diff": null, "created_at": "2017-07-17T23:01:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzU3MjAyNQ==", "fields": {"body": "@hemangsk added Hindi in the menu. Also rebased it. I think it's good to go?\nPlease let me know if anything else is required.", "diff": null, "created_at": "2017-07-24T22:22:13Z", "last_edited_at": null, "author": "ashwini0529", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTA1Njg2Ng==", "fields": {"body": "@Nosferatul you would also want add the language in this array https://github.com/coala/projects/blob/master/resources/js/app.js#L5", "diff": null, "created_at": "2017-07-31T12:46:25Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTEwNzcyMg==", "fields": {"body": "done", "diff": null, "created_at": "2017-07-31T15:37:57Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTEyNjIxNA==", "fields": {"body": "@hemangsk rultor is not responding because of the github outage, probably", "diff": null, "created_at": "2017-07-31T16:37:18Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg==", "fields": {"body": "Hello,\nIt looks like your commit doesn't follow our guidelines. Please take a look at https://coala.io/commit for the commit guidelines.\nI suggest using your current PR title as the commit shortlog and describe what you did on the commit description. Don't forget to mention the issue on the bottom with Fixes!\nThanks!", "diff": null, "created_at": "2017-08-10T02:53:12Z", "last_edited_at": "2017-08-10T02:53:32Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ==", "fields": {"body": "Yeah definitely :) yukiisbored already provided you the link where you can read commit guidelines, Let us know if you need any help :)", "diff": null, "created_at": "2017-08-10T16:01:49Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw==", "fields": {"body": "One thing, you don't have to create a new PR or branch to fix stuff/rewriting history. Just do it on the same branch and do a force push.", "diff": null, "created_at": "2017-08-11T23:43:03Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMzMxODIwOQ==", "fields": {"body": "@userzimmermann Yeah its an angular plugin https://github.com/btford/angular-markdown-directive to convert the markdown to html. Its being used at https://github.com/coala/landing-frontend/blob/master/partials/tabs/languages.html#L79 as well.\n@sils I was trying to follow this https://www.uplabs.com/posts/profile-card-albert-einstein for bio and name, but <p> looks better. fixed it", "diff": null, "created_at": "2017-08-18T10:24:11Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTI4Mjg4MA==", "fields": {"body": "Can you give me push access to your repo, so I can make some minor changes, please?", "diff": null, "created_at": "2017-08-28T07:39:10Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTMwMDc0NA==", "fields": {"body": "@hemangsk thank you !", "diff": null, "created_at": "2017-08-28T09:03:11Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTUzODU5OQ==", "fields": {"body": "Thanks @jendrikseipp and @hemangsk! \ud83c\udf89", "diff": null, "created_at": "2017-08-29T02:42:15Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNjE0ODYwNw==", "fields": {"body": "", "diff": null, "created_at": "2017-08-30T23:39:36Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODMyMzk4MQ==", "fields": {"body": "@prnvdixit Thanks for helping a newbie \ud83d\udc4d", "diff": null, "created_at": "2017-10-20T21:15:17Z", "last_edited_at": null, "author": "cornu-ammonis", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjk0NzE4OQ==", "fields": {"body": "@prnvdixit, not as of now.\n\nissue being closed without a MR getting merged for it\n\nThe reason is we don't have the data of those mrs who are not opened by newcomers.\nYes, if we can identify the closer of the issue, we can deduct points for the newcomers who closes their own issues, as it clearly indicates that the mrs for those issues aren't merged. But IGitt doesn't provide the details of the issue or mr closer yet.\nBut another way of doing it is to check the labels on the issues, and in case the labels are invalid or duplicate then deduct points of the newcomer who opened the issue.", "diff": null, "created_at": "2018-07-23T05:55:06Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNzAxNjY4MQ==", "fields": {"body": "@cypher-naman don't give up. All are here to learn. Ask your doubts in chat we are here to support. Let's get this done together.", "diff": null, "created_at": "2018-07-23T10:47:01Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODYyNjk5Nw==", "fields": {"body": "we need to refine the list of newcomers to only those who should be in our newcomers system. there are too many people in newcomers who are doing nothing, going nowhere, not worth tracking.\nCreating the filtered list of newcomers can be done weekly or nightly as a separate process, hosted on webservices (or your fake version atm), and produces a much smaller list of people. Then community repo gets that list, and only fetches data about them\n\"newcomers active in the last three months\" could be a simple algorithm to start with\nThe hard part is defining 'active' -- MRs updated could be a bot, but the newcomer has long disappeared, so we should exclude those bot actions. I'm not sure if we have a better way of identifying activity... ?", "diff": null, "created_at": "2018-07-28T18:35:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwOTQyNzkzNg==", "fields": {"body": "@kriti21 , we can re-organise the tasks and milestones later. ;-)", "diff": null, "created_at": "2018-08-01T02:23:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwOTkwNDAxMw==", "fields": {"body": "If I deploy all the affiliated_committers, portfolio_projects breaks Netlify after 23 pages, it means that the Netlify is able to deploy 282 pages, And when I deploy all the portfolio_projects, affiliated_committers breaks Netlify after 11 pages, it means that Netlify is able to deploy 284 pages in this case.", "diff": null, "created_at": "2018-08-02T12:08:15Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDQ0OTI1OQ==", "fields": {"body": "I have written a blog about the work done in this pr. https://sks444.github.io/gsoc/pinned/2018/07/25/GSoC'18-CodingPhase3-Part-I.html", "diff": null, "created_at": "2018-08-04T13:23:59Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjMzNTU5Nw==", "fields": {"body": "@Makman2 yes docker compresses data. The actual amount of data that\u2019s pushed will be compressed before sending,", "diff": "@@ -1,3 +1,44 @@\n+What is Docker ?\n+================\n+\n+Docker is a tool designed to make it easier to create, deploy, and run\n+applications by using containers. Containers allow a developer to package\n+up an application with all of the parts it needs, like libraries and other\n+dependencies, and ship it all out as a single package.\n+\n+With the help of containers, the developer can rest assured that\n+the application will run on other machine regardless of any\n+customized settings that machine might have that could differ from the\n+machine used for writing and testing the code.\n+\n+Unlike a virtual machine, rather than creating a whole virtual operating\n+system, Docker allows applications to use the same kernel as the system\n+that they're running on and only requires applications be shipped\n+with things not already running on the host computer. This gives a\n+significant performance boost and reduces the size of the application.", "created_at": "2017-10-23T17:20:42Z", "last_edited_at": null, "author": "acashmkj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ==", "fields": {"body": "Please make it to  https://coala.io instead https://coala.io/", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T12:19:56Z", "last_edited_at": "2017-11-03T14:42:32Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg==", "fields": {"body": "That is irrelevant", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T13:58:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA==", "fields": {"body": "This can be a bit misleading. I suggest you, write it in the form minified files (*.min.js) and backup files (*.orig).", "diff": "@@ -39,6 +39,15 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n+It can be used to define the type of files you usually\n+don't want to lint like minified files\n+and backup files (e.g. ``*.min.js``, ``*.orig``)", "created_at": "2017-11-03T14:36:02Z", "last_edited_at": "2017-11-03T14:41:58Z", "author": "troublemagnet", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkyODgyOA==", "fields": {"body": "What is 288 ?", "diff": "@@ -31,6 +31,13 @@ app.directive('getinvolved', ['$http', function ($http) {\n             $scope.loadMore = function () {\n                 $scope.totalDisplayed += 20;\n             };\n+\n+            $scope.nomoreItems = function () {\n+                if($scope.totalDisplayed > 288 ) {", "created_at": "2017-11-04T12:04:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkwODkzNA==", "fields": {"body": "an* issue template", "diff": "@@ -0,0 +1,114 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Add a ISSUE_TEMPLATE.md file to a GitHub repository.\"\n+difficulty: low\n+initiatives:\n+  - GCI\n+issues:\n+  - \"https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md\"\n+markdown: add_issue_template.md\n+mentors:\n+  - Monal5031\n+  - yashovardhanagrawal\n+  - prashant0598\n+name: \"Add a ISSUE_TEMPLATE.md file to GitHub repository\"\n+requirements:\n+  - \"Joined http://coala.io/chat .\"\n+tags:\n+  - github\n+  - markdown\n+  - standard templates\n+---\n+This is a repeatable task for Google Code-in.\n+\n+## Task\n+\n+Add a ISSUE_TEMPLATE.md file to a GitHub repository mentioned in the\n+issue's wiki, so that a standard template appears whenever someone\n+will try to create a new issue.\n+\n+## Requirements\n+\n+This task only requires use of the GitHub web interface.\n+\n+## Process\n+\n+There are three steps for this task:\n+\n+1. Select a repository with open issue from wiki link.\n+2. Determine a suitable standard issue template for the repository.\n+3. Create a pull request adding a `ISSUE_TEMPLATE.md` file.\n+\n+----\n+\n+## Step 1\n+\n+Go through the [issue wiki](https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md)\n+and select an issue which is not yet completed or taken by someone else.\n+\n+Check that GitHub does not show anything while opening an issue\n+directly from GitHub UI, (You will have to check this manually).\n+\n+Check that the repository does not have a `ISSUE_TEMPLATE.md` file.\n+Maybe GitHub does not recognise the contents of the file.\n+\n+Check the pull requests for the repository.\n+Maybe someone has already proposed a `ISSUE_TEMPLATE.md` file.\n+Do not send another pull request to add a `ISSUE_TEMPLATE.md` file.\n+\n+## Step 2\n+\n+### Does the repository already have a issue template selected?", "created_at": "2017-11-09T09:48:35Z", "last_edited_at": null, "author": "neelanshsahai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkxMDE3MA==", "fields": {"body": "Make sure you are not missing out* any points which must be there* in the file.", "diff": "@@ -0,0 +1,114 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Add a ISSUE_TEMPLATE.md file to a GitHub repository.\"\n+difficulty: low\n+initiatives:\n+  - GCI\n+issues:\n+  - \"https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md\"\n+markdown: add_issue_template.md\n+mentors:\n+  - Monal5031\n+  - yashovardhanagrawal\n+  - prashant0598\n+name: \"Add a ISSUE_TEMPLATE.md file to GitHub repository\"\n+requirements:\n+  - \"Joined http://coala.io/chat .\"\n+tags:\n+  - github\n+  - markdown\n+  - standard templates\n+---\n+This is a repeatable task for Google Code-in.\n+\n+## Task\n+\n+Add a ISSUE_TEMPLATE.md file to a GitHub repository mentioned in the\n+issue's wiki, so that a standard template appears whenever someone\n+will try to create a new issue.\n+\n+## Requirements\n+\n+This task only requires use of the GitHub web interface.\n+\n+## Process\n+\n+There are three steps for this task:\n+\n+1. Select a repository with open issue from wiki link.\n+2. Determine a suitable standard issue template for the repository.\n+3. Create a pull request adding a `ISSUE_TEMPLATE.md` file.\n+\n+----\n+\n+## Step 1\n+\n+Go through the [issue wiki](https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md)\n+and select an issue which is not yet completed or taken by someone else.\n+\n+Check that GitHub does not show anything while opening an issue\n+directly from GitHub UI, (You will have to check this manually).\n+\n+Check that the repository does not have a `ISSUE_TEMPLATE.md` file.\n+Maybe GitHub does not recognise the contents of the file.\n+\n+Check the pull requests for the repository.\n+Maybe someone has already proposed a `ISSUE_TEMPLATE.md` file.\n+Do not send another pull request to add a `ISSUE_TEMPLATE.md` file.\n+\n+## Step 2\n+\n+### Does the repository already have a issue template selected?\n+\n+It is quite common for a repository to not have a `ISSUE_TEMPLATE.md`\n+file, but still have already selected a template which they want to use or\n+even have some points which need be added.\n+\n+If the repository has already chosen a template and/or points, simply create the\n+`ISSUE_TEMPLATE.md` file with that template and/or points.\n+\n+Check the issues in the repository.\n+Maybe an issue already contains a discussion about template or points to use.\n+\n+A good approach is to search the repository for the words `ISSUE_TEMPLATE` or \n+`issue template`, and read each search result for hints of existing template\n+and/or points.\n+\n+If you are confident that you have found the template and/or points that is implicitly\n+chosen by the project team members, skip to Step 3.\n+\n+### Or, discuss suitable points for the issue template with project team members.\n+\n+It is always good to consult a mentor or project team member for suitable points for\n+the template.\n+\n+It is recommended that beginners go back to step 1 and find a different repository that\n+already mentions a specific issue template.\n+\n+It maybe possible that issue template is going to be same for multiple repositories,\n+in such case it is mentioned in issue description which existing template to use.\n+\n+## Step 3\n+\n+You can read more about the standard templates [here](https://github.com/blog/2111-issue-and-pull-request-templates)\n+\n+1. Copy the templates and/or points in a file temporarily.\n+2. Fork the repository\n+3. Add a `ISSUE_TEMPLATE.md` file to the repository, committing the new file to a branch.\n+   1. Make sure you paste all the contents properly in the file.\n+   2. Make sure you don't miss out on any points which need to be in the file.", "created_at": "2017-11-09T09:53:34Z", "last_edited_at": "2017-11-09T09:57:41Z", "author": "neelanshsahai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDMzNjMwMg==", "fields": {"body": "https://rubygems.org/gems/jekyll-netlify\nhttps://github.com/jayvdb/jekyll-netlify\n(my first Ruby gem)", "diff": "@@ -1,4 +1,5 @@\n source \"https://rubygems.org\"\n \n gem \"jekyll\"\n+gem \"jekyll-netlify\"", "created_at": "2017-11-10T20:59:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDcwMzk4MQ==", "fields": {"body": "I think that's a bit redundant since it's already on the PR template...", "diff": "@@ -0,0 +1,76 @@\n+---\n+collaborating_projects:\n+  - docker-coala-base\n+desc: \"Find creative ways to decrease the coala Docker image size\"\n+issues:\n+  - https://github.com/coala/docker-coala-base/issues/55\n+difficulty: \"hard\"\n+initiatives:\n+  - GCI\n+markdown: decrease_docker_image_size.md\n+mentors:\n+  - yukiisbored\n+name: \"Decrease Docker image size\"\n+tags:\n+  - coala\n+  - docker\n+  - linux\n+---\n+\n+## Task\n+\n+Submit a Pull Request to the [docker-coala-base][repo] project which decreases\n+the image size.\n+\n+## Objective\n+\n+This task is considerably hard which requires creativity and knowledge for\n+Docker and Linux to decrease the Docker Image size.\n+\n+## Background\n+\n+The Docker image for coala is huge (around ~2G!) which makes it a huge drawback\n+to be used especially for those who are with limited Internet access.\n+\n+Decreasing it isn't easy because a lot of linters requires a lot of dependencies\n+and some weird edge cases as well.\n+\n+Since this is Docker where images are compose of layers, deleting stuff from\n+other layers (like the openSUSE base image) doesn't change much.\n+\n+## Finding bloat\n+\n+To find bloat, we can start by seeing the size generated by each layer. We can\n+do this by running `docker history <image name>` which will give us each layers'\n+size.\n+\n+Some of these layers are probably outdated since `docker history` also shows\n+previous versions as well, so make sure you're looking at a layer which is a\n+part of the latest image.\n+\n+Finding the actual files within the layer can be challenging and requires\n+knowing what the command which makes the layer does.\n+\n+For example, when installing a program it may contain some documentations since\n+this is a Docker image which sole purpose is to run coala the documentation\n+isn't really helpful or even important.\n+\n+## Removing bloat\n+\n+Removing bloat for a layer can be done just by adding another command to the\n+layer's command. This should be done **not** by adding another `RUN` command but\n+appending it's `RUN` command with `&&`.\n+\n+Example:\n+```Dockerfile\n+RUN zypper in kirisame && \\\n+    rm -rf /usr/share/man/man1/kirisame.gz \\\n+           /usr/share/man/man6/kirisamectl.gz\n+```\n+\n+## Submit a PR\n+\n+If you've decreased any amount of the Docker Image, please create a PR and\n+submit it to the [repo][repo].", "created_at": "2017-11-14T00:10:15Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA==", "fields": {"body": "Hmm that reads bad as a first sentence. Rather I would make some kind of citation at the end^^\nAlso:\n\nThe layout needs to be very clear that it is an unmodified copy only, and no editing of the text is desirable.\n\nNot sure that this intention gets to the reader here^^", "diff": "@@ -1,6 +1,8 @@\n What is Docker?\n ===============\n \n+According to `opensource.com <https://opensource.com/resources/what-docker>`__:", "created_at": "2017-11-15T17:21:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTg0NDA2Nw==", "fields": {"body": "and a positive message\nlike\n\nYes, coala will apply for Google Summer of Code - 2018. You might read the GSoC Timeline to get an idea of how things will proceed.", "diff": "@@ -0,0 +1,3 @@\n+---\n+question: \"coala will apply to GSOC 2018\"\n+---", "created_at": "2017-11-18T18:44:21Z", "last_edited_at": "2017-11-18T18:46:09Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzY3NzIyMg==", "fields": {"body": "Please do not modify lines that doesn't relate to the commit, so the diff will look nicer ;)", "diff": "@@ -22,7 +22,7 @@\n                     <h4 class=\"left light\">Google Summer of Code 2017 Work Product Submission </h4>\n                 </div>\n                 <br>\n-            </div> \n+            </div>", "created_at": "2017-11-29T02:01:47Z", "last_edited_at": "2017-11-29T02:05:44Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ5NjE1MA==", "fields": {"body": "Well, if we're moving to use of multiple orgs, it'd be better to have a separate model for orgs too.", "diff": "@@ -1 +1,27 @@\n-# Create your models here.\n+import json\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    id = models.IntegerField(default=0, primary_key=True)\n+    display_name = models.CharField(max_length=100, default='')\n+    organization_id = models.IntegerField(default=0)", "created_at": "2017-12-02T13:14:11Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ5NjMwOA==", "fields": {"body": "Why?  This value is like a series .  We'll want to do > and < comparisons, but I cant see date comparisons occurring.\nWe could build a separate structure for GCI programs, because we'll no doubt participate again the future, and we can manually add the start & end dates for each GCI (i.e. Nov 28 - Jan 18?), and date comparisons on them would be sensible.\nThen program_year here is a foreign key.", "diff": "@@ -1 +1,27 @@\n-# Create your models here.\n+import json\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    id = models.IntegerField(default=0, primary_key=True)\n+    display_name = models.CharField(max_length=100, default='')\n+    organization_id = models.IntegerField(default=0)\n+    organization_name = models.CharField(max_length=100, default='')\n+    program_year = models.IntegerField(default=0)", "created_at": "2017-12-02T13:21:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDU3MTE1NQ==", "fields": {"body": "sprinkle with CSS classes so that other ppl can make it prettier without fiddling here.", "diff": "@@ -28,4 +30,26 @@ def index(request):\n                  '<a href=\"https://github.com/{username}\">{username}</a>'\n                  .format(student_url=student_url, student_id=student_id,\n                          username=username))\n+    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n+    s.append('</ul><i id=\"time\" data-time=\"{unix}\">'", "created_at": "2017-12-04T07:11:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDc2MDY5MA==", "fields": {"body": "put all of this into two function.\nThe first function should be a HTML unaware utility function which takes a timestamp and ago value, and returns the timestring.\nThe function second should be a function which is given two HTML element objects, one for the time and the other for ago, and this section function would call the first function to get the computed value and would put that value into the ago element.\nOptionally add a third function which takes no arguments, fetches the desired elements, and calls the second function.\nThe second or third function should be invoked from inside the HTML ; worse case, use body.onload to invoke it.", "diff": "@@ -0,0 +1,20 @@\n+var timestamp = document.getElementById('time').getAttribute('data-time');", "created_at": "2017-12-04T20:06:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw==", "fields": {"body": "base url is a constant that may be needed again in future enhancements.", "diff": "@@ -17,20 +17,78 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n-async function fetchOrgsWithLeaders() {\n+async function searchGitHubOrgs(query) {\n+  const token = process.env.GITHUB_TOKEN\n+  const res = await fetch(\n+    `https://api.github.com/search/users?q=${query}%20type:org`,", "created_at": "2017-12-05T16:05:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTA5NDAwMQ==", "fields": {"body": "I think we're using django-distill (static site generator) exclusively, so it'll only get generated once.", "diff": "@@ -14,6 +15,11 @@ def index(request):\n     org_id = linked_students[0]['organization_id']\n     org_name = linked_students[0]['organization_name']\n     s = []\n+\n+    get_logo()", "created_at": "2017-12-05T22:23:11Z", "last_edited_at": "2017-12-05T22:32:00Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAwMTE3Ng==", "fields": {"body": "@nkprince007 most modern browsers support pngs\nhttps://en.wikipedia.org/wiki/Favicon#File_format_support\n(every one on wikipedia listed does)", "diff": "@@ -0,0 +1,27 @@\n+import os\r\n+import requests\r\n+\r\n+\r\n+def get_logo():\r\n+    # Obtain the org name from the Travis environment variables\r\n+    org_name = os.environ['TRAVIS_REPO_SLUG'].split('/')[0]\r\n+\r\n+    image_url_short_max_res = 'http://github.com/%s.png' % (org_name)\r\n+\r\n+    # Follow the redirect to the page containing the image and\r\n+    # store it in the response variable\r\n+    response_max_res = requests.get(image_url_short_max_res)\r\n+\r\n+    # Write the image to a file and save\r\n+    image = open('images/org_logo.png', 'wb')\r\n+    image.write(response_max_res.content)\r\n+    image.close()\r\n+\r\n+    # Run the same code again but download a 16x16 version for favicon\r\n+    image_url_short_favicon = 'http://github.com/%s.png?size=16' % (org_name)\r\n+\r\n+    response_favicon = requests.get(image_url_short_favicon)\r\n+\r\n+    image = open('favicon.png', 'wb')\r", "created_at": "2017-12-05T16:29:23Z", "last_edited_at": "2017-12-05T16:30:36Z", "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA==", "fields": {"body": "Remove one of the spaces after the equals sign.\nWe should get coala working ASAP", "diff": "@@ -1,6 +1,7 @@\n const fs = require('fs')\n const Mustache = require('mustache')\n const orgs = require('./out/data.json')\n+const timestamp =  new Date(fs.statSync('./out/data.json').mtime).getTime()", "created_at": "2017-12-05T17:38:31Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE0MjM5OA==", "fields": {"body": "And please change the name of the field. The class name is already Mentors", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100, default='')\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100, default='')\n+    org_logo = models.ImageField(upload_to='', blank=True, default='')\n+    org_url = models.URLField(default='', blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200, default='')\n+    description = models.TextField(max_length=500, default='')\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80, default='')\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)\n+    status = models.IntegerField()\n+    completion_date = models.DateField()\n+    deadline = models.DateField()\n+    modified = models.DateField()\n+\n+class ProgramYear(models.Model):\n+    start_date = models.DateField()\n+    last_date = models.DateField()\n+\n+class Mentors(models.Model):\n+    mentors_email_id = models.EmailField(default='')", "created_at": "2017-12-06T04:04:15Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ==", "fields": {"body": "Weird, ok. I can look into that more in a while, but for now adding both seems fine \ud83d\udc4d", "diff": "@@ -1,8 +1,15 @@\n ---\n+env:\n+  node: true", "created_at": "2017-12-06T08:27:32Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw==", "fields": {"body": "eslint-config-prettier is for turning off eslint rules that conflict with prettier\nhttps://github.com/prettier/eslint-plugin-prettier should be used instead", "diff": "@@ -12,5 +12,9 @@\n   \"dependencies\": {\n     \"mustache\": \"^2.3.0\",\n     \"node-fetch\": \"^1.7.3\"\n+  },\n+  \"devDependencies\": {\n+    \"eslint\": \"^4.12.1\",\n+    \"eslint-config-prettier\": \"^2.9.0\"", "created_at": "2017-12-05T23:51:12Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA==", "fields": {"body": "you can add node_modules/.bin to PATH\nand set NODE_PATH (see our dockerfile)\nhttps://github.com/coala/docker-coala-base/blob/master/Dockerfile#L10\nhttps://github.com/coala/coala-atom/blob/master/circle.yml#L32", "diff": "@@ -1,7 +1,15 @@\n-sudo: false\n-language: node_js\n+sudo: required\n+language: python\n+python: 3.6\n+\n+before_install:\n+  - nvm install 8\n+  - npm install\n+  - npm install -g eslint prettier eslint-plugin-prettier", "created_at": "2017-12-06T01:58:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMjkyMg==", "fields": {"body": "You could rather rename these fields to task, student and organization. Because a ForeignKey attribute actually only holds the primary key of the related members. Check the docs here for more on its internal representation.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100, default='')\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100, default='')\n+    org_logo = models.ImageField(upload_to='', blank=True, default='')\n+    org_url = models.URLField(default='', blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200, default='')\n+    description = models.TextField(max_length=500, default='')\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80, default='')\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)", "created_at": "2017-12-06T11:39:52Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzA4OA==", "fields": {"body": "And please use models.CASCADE for the on_delete keyword argument for ForeignKeys.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100, default='')\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100, default='')\n+    org_logo = models.ImageField(upload_to='', blank=True, default='')\n+    org_url = models.URLField(default='', blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200, default='')\n+    description = models.TextField(max_length=500, default='')\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80, default='')\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)", "created_at": "2017-12-06T11:40:43Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzk0MQ==", "fields": {"body": "Please avoid using fields names similar to the Model class. If it represents the name of a tag, rather use name than tags.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100)\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100)\n+    org_logo = models.ImageField(upload_to='', blank=True)\n+    org_url = models.URLField(blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200)\n+    description = models.TextField(max_length=500)\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80)\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)\n+    status = models.IntegerField()\n+    completion_date = models.DateField()\n+    deadline = models.DateField()\n+    modified = models.DateField()\n+\n+class ProgramYear(models.Model):\n+    start_date = models.DateField()\n+    last_date = models.DateField()\n+\n+class Mentors(models.Model):\n+    email_id = models.EmailField()\n+\n+    def __str__(self):\n+        return self.mentors_email_id\n+\n+class Tags(models.Model):\n+    tags = models.CharField(max_length=100)", "created_at": "2017-12-06T11:45:26Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzk3Ng==", "fields": {"body": "Same thing goes here.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100)\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100)\n+    org_logo = models.ImageField(upload_to='', blank=True)\n+    org_url = models.URLField(blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200)\n+    description = models.TextField(max_length=500)\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80)\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class TaskInstance(models.Model):\n+    task_definition_name = models.ForeignKey(Tasks)\n+    student_display_name = models.ForeignKey(Students)\n+    organization_name = models.ForeignKey(Organizations)\n+    status = models.IntegerField()\n+    completion_date = models.DateField()\n+    deadline = models.DateField()\n+    modified = models.DateField()\n+\n+class ProgramYear(models.Model):\n+    start_date = models.DateField()\n+    last_date = models.DateField()\n+\n+class Mentors(models.Model):\n+    email_id = models.EmailField()\n+\n+    def __str__(self):\n+        return self.mentors_email_id\n+\n+class Tags(models.Model):\n+    tags = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.tags\n+\n+class Categories(models.Model):\n+    categories = models.CharField(max_length=100)", "created_at": "2017-12-06T11:45:38Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxNDA5Ng==", "fields": {"body": "Never use private variable names for model fields.", "diff": "@@ -1 +1,70 @@\n-# Create your models here.\n+from django.db import models\n+\n+\n+class Students(models.Model):\n+    student_id = models.IntegerField(default=0, primary_key=True)\n+    student_name = models.CharField(max_length=100)\n+    program_year = models.ForeignKey('ProgramYear', null=True)\n+\n+    def __str__(self):\n+        return self.student_name\n+\n+class Organizations(models.Model):\n+    org_id = models.IntegerField(default=0, primary_key=True)\n+    org_name = models.CharField(max_length=100)\n+    org_logo = models.ImageField(upload_to='', blank=True)\n+    org_url = models.URLField(blank=True)\n+    org_summary = models.TextField(max_length=300, default='')\n+    students = models.ManyToManyField(Students)\n+\n+    def __str__(self):\n+        return self.org_name\n+\n+class Tasks(models.Model):\n+    name = models.CharField(max_length=200)\n+    description = models.TextField(max_length=500)\n+    status = models.IntegerField(default=1)\n+    max_instances = models.IntegerField(default=1)\n+    mentors = models.ManyToManyField('Mentors')\n+    tags = models.ManyToManyField('Tags')\n+    is_beginner = models.BooleanField(default=False)\n+    categories = models.ManyToManyField('Categories')\n+    time_to_complete_in_days = models.IntegerField(default=3)\n+    external_url = models.URLField()\n+    private_metadata = models.CharField(max_length=80)\n+    last_modified = models.DateField()\n+    _orgs = models.ForeignKey(Organizations)", "created_at": "2017-12-06T11:46:17Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTQ5NTAwMQ==", "fields": {"body": "Though I am not sure about this. I think this would be rather // 7. We need the floor value for the number of weeks right.", "diff": "@@ -0,0 +1,80 @@\n+import requests\n+import json\n+import datetime\n+from dateutil import parser, relativedelta\n+\n+issuesurl = \"https://coala.github.io/gh-board/issues.json\"\n+today = datetime.datetime.today()\n+\n+def diff_month(d1, d2):\n+\treturn (d1.year - d2.year) * 12 + d1.month - d2.month\n+\n+def diff_week(d1, d2):\n+\tmonday1 = (d1 - datetime.timedelta(days=d1.weekday()))\n+\tmonday2 = (d2 - datetime.timedelta(days=d2.weekday()))\n+\treturn (monday1 - monday2).days / 7", "created_at": "2017-12-07T11:23:54Z", "last_edited_at": null, "author": "Techievena", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTY5MTYyMg==", "fields": {"body": "EOL", "diff": "@@ -0,0 +1,7 @@\n+.student {\n+    padding-bottom: 20px;\n+}\n+\n+.students {\n+    list-style: none;\n+}", "created_at": "2017-12-08T02:19:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTYzMjgxMg==", "fields": {"body": "data-height=\"\" attribute is not needed, right?", "diff": "@@ -26,8 +26,9 @@ def index(request):\n         student_url = STUDENT_URL.format(org_id=org_id,\n                                          student_id=student_id,\n                                          )\n-        s.append('<li><a href=\"{student_url}\">{student_id}</a>: '\n-                 '<a href=\"https://github.com/{username}\">{username}</a>'\n+        s.append('<li><a href=\"{student_url}\">{student_id}</a>:<br />'\n+                 '<div class=\"github-card\" data-github=\"{username}\" '\n+                 'data-width=\"400\" data-height=\"\" data-theme=\"default\"></div>'", "created_at": "2017-12-07T20:32:01Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTYzMzQ5MA==", "fields": {"body": "Also mention that these {student_id} are student ids, otherwise they'll look like just arbitrary numbers.\nSomething like\n<span>STUDENT ID: </span> {student_id}", "diff": "@@ -26,8 +26,9 @@ def index(request):\n         student_url = STUDENT_URL.format(org_id=org_id,\n                                          student_id=student_id,\n                                          )\n-        s.append('<li><a href=\"{student_url}\">{student_id}</a>: '\n-                 '<a href=\"https://github.com/{username}\">{username}</a>'\n+        s.append('<li><a href=\"{student_url}\">{student_id}</a>:<br />'", "created_at": "2017-12-07T20:34:40Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ==", "fields": {"body": "The <script> tag can be put on the bottom of the body, after app.js", "diff": "@@ -21,6 +21,13 @@ <h1>Google Code-in 2017 Current Leaders</h1>\n     <i>\n       The leading participants for each organization are listed randomly. \n     </i>\n+    <div class=\"twitter\">\n+      <a class=\"twitter-timeline\"  href=\"https://twitter.com/hashtag/googlecodein\"\n+         data-widget-id=\"938830025809432577\">Tweets about GCI\n+      </a>\n+      <script src=\"static/js/twitter.js\"></script>", "created_at": "2017-12-08T04:04:21Z", "last_edited_at": "2017-12-08T04:15:53Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA==", "fields": {"body": "Otherwise it would have so many digits, so maybe not readable?", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen)/(24*3600*1000)\n+const timeLeft = (noClaims-today)/(24*3600*1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100-(timeLeft/totalTime)*100)", "created_at": "2017-12-10T13:19:40Z", "last_edited_at": null, "author": "Grox-Ni", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw==", "fields": {"body": "I prefer this to be in the frontend, because we might not do build everyday.\nUse and modify timeDifference function inside static/js/app.js.", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen) / (24 * 3600 * 1000)\n+const timeLeft = (noClaims - today) / (24 * 3600 * 1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100 - timeLeft / totalTime * 100)", "created_at": "2017-12-10T13:26:14Z", "last_edited_at": "2017-12-10T13:31:14Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw==", "fields": {"body": "As this is invalid on a fork, I think these should be in Travis environment variables. (also COMMIT_*).", "diff": "@@ -1,6 +1,11 @@\n language: python\n python: 3.6\n \n+env:\n+  global:\n+    - ENCRYPTION_LABEL: \"b7c548322a41\"", "created_at": "2017-12-10T14:15:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA==", "fields": {"body": "In my version, the build is not in the deploy script.  The deploy script should take a built version, and overlay it on the previous built version.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN\n+    npm run build\n+    return\n+fi\n+\n+# Save some useful information\n+REPO=`git config remote.origin.url`\n+SSH_REPO=${REPO/https:\\/\\/github.com\\//git@github.com:}\n+SHA=`git rev-parse --verify HEAD`\n+\n+# Clone the existing gh-pages for this repo into out/\n+# Create a new empty branch if gh-pages doesn't exist yet (should only happen on first deploy)\n+rm -r out\n+git clone $REPO out\n+cd out\n+git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH\n+cd ..\n+\n+# Clean out existing contents\n+rm -rf out/*\n+\n+# Run our compile script\n+npm run build", "created_at": "2017-12-10T14:17:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA==", "fields": {"body": "the PR wont get an env var on Travis, or any other sane system (Netlify isnt sane/safe), so this is useless on Travis.\nbut more importantly, this is useless.  If the token is available here, a malicious person could modify this script to emit it to the log , or send it via email to themselves, or anything.\nHowever this isnt such a large problem if the token in GITHUB_TOKEN has no scopes which allow greater access than the malicious person could obtain themselves.  The worst they can do is abuse the token so that GitHub cancels it, breaking the builds.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN", "created_at": "2017-12-10T14:23:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA==", "fields": {"body": "maybe condition: \"$ENCRYPTION_LABEL\" = \"\" ?", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:21:08Z", "last_edited_at": "2017-12-10T15:21:19Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ==", "fields": {"body": "^ Yup, tested on my fork.", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:52:27Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg==", "fields": {"body": "I'd prefer the chat platform type to be included also, to give a bit of clarity in the JSON.", "diff": "@@ -84,13 +95,19 @@ async function fetchOrgsWithData() {\n   const orgs = await fetchOrgs()\n   const fetchingLeaders = orgs.map(org => fetchLeaders(org.id))\n   const fetchingGitHub = orgs.map(org => findOrganization(org))\n+  const fetchingChat = orgs.map(org => chattie(org.irc_channel))\n   const orgLeaders = await Promise.all(fetchingLeaders)\n   const orgGitHub = await Promise.all(fetchingGitHub)\n+  const orgChats = await Promise.all(fetchingChat)\n \n   return orgs.map((org, index) =>\n     Object.assign(org, {\n       leaders: orgLeaders[index],\n       github: orgGitHub[index],\n+      chat: {\n+        url: orgChats[index].url,\n+        image: CHAT_IMAGES[chattie.CHAT[orgChats[index].type]],", "created_at": "2017-12-10T22:29:03Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw==", "fields": {"body": "ESLint wants this all on one line", "diff": "@@ -127,6 +128,18 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n-  fs.writeFileSync(`${__dirname}/../out/data.json`, JSON.stringify(data))\n+  // readable JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.json`,\n+    JSON.stringify(data, null, 2)\n+  )\n+  // minified JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.min.json`,\n+    JSON.stringify(data)\n+  )", "created_at": "2017-12-11T05:23:50Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ==", "fields": {"body": "EOF", "diff": "@@ -128,4 +157,4 @@ <h3>\n     <script src=\"static/js/app.js\"></script>\n     <script src=\"static/js/twitter.js\"></script>\n   </body>\n-</html>\n+</html>", "created_at": "2017-12-11T06:19:53Z", "last_edited_at": "2017-12-11T06:25:53Z", "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA==", "fields": {"body": "Don't use the org's image for their website prompt. Usually a globe is used, similar to https://image.flaticon.com/icons/png/128/12/12195.png (you might need to find one from somewhere else or give proper attribution for that one).", "diff": "@@ -92,26 +107,40 @@ <h3>\n                 {{name}}\n               </a>\n             </h3>\n-            <p>Tasks Completed: {{completed_task_instance_count}}\n-              {{#github}}\n+            <p>Tasks Completed: {{completed_task_instance_count}}</p>\n+            {{#github}}\n               <a href=\"https://github.com/{{github}}\">\n                 <img\n                   src=\"https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\"\n                   class=\"github\"\n                 />\n               </a>\n-              {{/github}}\n-              {{#mailing_list}}\n+            {{/github}}\n+            {{#mailing_list}}\n               <a href=\"{{mailing_list}}\">\n                 <img src=\"static/images/mail.png\" class=\"chat\" />\n               </a>\n-              {{/mailing_list}}\n-              {{#chat}}\n+            {{/mailing_list}}\n+            {{#chat}}\n               <a href=\"{{chat.url}}\">\n                 <img src=\"{{chat.image}}\" class=\"chat\" />\n               </a>\n-              {{/chat}}\n-            </p>\n+            {{/chat}}\n+            {{#twitter_url}}\n+              <a href=\"{{twitter_url}}\">\n+                <img src=\"static/images/logos/twitter.png\" class=\"chat\" />\n+              </a>\n+            {{/twitter_url}}\n+            {{#gplus_url}}\n+              <a href=\"{{gplus_url}}\">\n+                <img src=\"static/images/logos/gplus.png\" class=\"chat\" />\n+              </a>\n+            {{/gplus_url}}\n+            {{#website_url}}\n+              <a href=\"{{website_url}}\">\n+                <img src=\"https://{{image_url}}\" class=\"chat\" />", "created_at": "2017-12-11T06:23:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkyODAzNg==", "fields": {"body": "What do you mean? The repo requirements.txt doesn't contain it.\nEdit: This is the same PR, I have just modified it to include the other changes.", "diff": "@@ -2,3 +2,4 @@ django<2.0\n django-distill\n IGitt\n requests\n+python-dateutil", "created_at": "2017-12-09T17:49:05Z", "last_edited_at": "2017-12-09T17:49:35Z", "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA==", "fields": {"body": "fyi, there is a flag to turn off creation of .orig files.", "diff": "@@ -3,3 +3,4 @@ out/*\n !out/.keep\n yarn.lock\n .DS_Store\n+**.orig", "created_at": "2017-12-12T04:32:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ==", "fields": {"body": "could this be JavaScript, so it can be incorporated into the npm build process ?", "diff": "@@ -11,6 +11,7 @@ before_install:\n script:\n   - coala --non-interactive -V\n   - npm run build\n+  - ./.ci/gather_data.sh", "created_at": "2017-12-13T04:30:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw==", "fields": {"body": "Remove the contents instead of the folder\ni.e. rm -rf out/*\nand if you do that you don't need to recreate the .keep file", "diff": "@@ -4,7 +4,12 @@\n   \"description\": \"\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n-    \"build\": \"node ./lib/scrape.js && node ./lib/generate.js\"\n+    \"scrape\": \"node ./lib/scrape.js\",\n+    \"generate\": \"node ./lib/generate.js\",\n+    \"gather\": \"node ./lib/gather.js\",\n+    \"clean\": \"rm -rf out && mkdir -p out && touch out/.keep\",", "created_at": "2017-12-13T06:50:20Z", "last_edited_at": "2017-12-13T06:52:46Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA==", "fields": {"body": "Shhh... \ud83d\ude0b", "diff": "@@ -210,11 +220,14 @@ async function findWiki(name) {\n }\n \n async function findGitHubUser({ display_name }, org) {\n+=======\n+async function findGitHubUser(displayName, org) {\n+>>>>>>> scrape.js: Reduce number of API calls", "created_at": "2017-12-13T07:20:39Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA==", "fields": {"body": "Maybe in that case https:${wikidataurl}?", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {\n+      const wikipediaurl = wdk.getSitelinkUrl(sitelink['enwiki'])\n+      return {\n+        url: wikipediaurl,\n+        type: 'wikipedia',\n+      }\n+    } else {\n+      return {\n+        url: 'https:' + wikidataurl,", "created_at": "2017-12-12T22:03:28Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg==", "fields": {"body": "In future(with i18n) this should become language_code + 'wiki'. So that'd probably bring us back to this way...", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {", "created_at": "2017-12-12T22:06:35Z", "last_edited_at": null, "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA==", "fields": {"body": "IMO we should remove all translation for now and only keep en or 2.", "diff": "@@ -0,0 +1,21 @@\n+{\n+  \"page-title\": \"Google Code-in 2017 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0928\u0947\u0924\u093e\",\n+  \"last-updated\": \"\u0906\u0916\u0930\u0940 \u0905\u092a\u0921\u0947\u091f\",", "created_at": "2017-12-14T06:10:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA==", "fields": {"body": "Yep, seems to not be working. But in that case just skip over it and only use working XML feeds. That'll be encouragement to get the coala feed fixed \ud83d\ude09", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',\n+]", "created_at": "2017-12-15T03:21:22Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ==", "fields": {"body": "Make it so that when the parser failed it's skipping instead of \"breaking\".", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',", "created_at": "2017-12-15T03:23:31Z", "last_edited_at": "2017-12-15T03:23:40Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg==", "fields": {"body": "if (blog_url) is enough, I think.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(\n+    data.map(org => {\n+      const { blog_url } = org\n+      if (blog_url != null && blog_url != '') {", "created_at": "2017-12-16T13:19:29Z", "last_edited_at": "2017-12-16T13:45:03Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA==", "fields": {"body": "Probably looks neater if you put it inside variable first and then use Promise.all().\nAlso, async function please, instead of then.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(", "created_at": "2017-12-16T13:24:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ==", "fields": {"body": "JSON doesn't have linebreaks and the translations for some strings are too long for the linelength limit.", "diff": "@@ -9,7 +9,7 @@ bears = SpaceConsistencyBear\n default_actions = *: ApplyPatchAction\n \n [all.linelength]\n-ignore += **.html\n+ignore += **.html, static/js/i18n/**.json", "created_at": "2017-12-16T15:25:06Z", "last_edited_at": null, "author": "margobra8", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNjYzOQ==", "fields": {"body": "Should this be returned as an HttpResponse?", "diff": "@@ -129,20 +133,20 @@ def get_data(self):\n         return self.data\n \n \n-if __name__ == '__main__':\n+def activity_json(request):\n \n-    org_name = open('org_name.txt').readline()\n+    org_name = get_remote_owner()\n \n     # URL to grab all issues from\n     issues_url = 'http://' + org_name + '.github.io/gh-board/issues.json'\n \n     content = requests.get(issues_url)\n-    content.raise_for_status()\n-    parsed_json = content.json()\n+    try:\n+        parsed_json = content.json()\n+    except Exception:\n+        return '{}'", "created_at": "2017-12-16T07:42:27Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNjgyNg==", "fields": {"body": "but if someone has done REPOSITORY_URL='' ... :P", "diff": "@@ -0,0 +1,61 @@\n+import os\n+import os.path\n+\n+from git.config import GitConfigParser\n+import giturlparse\n+\n+REPO_DIR = os.path.join(\n+    os.path.dirname(__file__),\n+    '..',\n+)\n+GIT_CONFIG = os.path.join(\n+    REPO_DIR,\n+    '.git',\n+    'config',\n+)\n+\n+_config = None\n+\n+\n+def get_config():\n+    global _config\n+    if not _config:\n+        _config = GitConfigParser(GIT_CONFIG)\n+    return _config\n+\n+\n+def get_config_remote(name='origin'):\n+    config = get_config()\n+\n+    print(config.sections())\n+\n+    has_remote = False\n+\n+    for key in config.sections():\n+        if key == 'remote \"%s\"' % name:\n+            return config.items(key)\n+        elif key.startswith('remote'):\n+            has_remote = True\n+\n+    if has_remote:\n+        raise KeyError('No git remote called \"%s\"' % name)\n+\n+    raise KeyError('No git remotes found')\n+\n+\n+def get_remote_url():\n+    url = os.environ.get('REPOSITORY_URL')\n+    if not url:", "created_at": "2017-12-16T07:56:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzODM5MA==", "fields": {"body": "No, the try/except was to workaround retr0h/git-url-parse#2", "diff": "@@ -0,0 +1,61 @@\n+import os\n+import os.path\n+\n+from git.config import GitConfigParser\n+import giturlparse\n+\n+REPO_DIR = os.path.join(\n+    os.path.dirname(__file__),\n+    '..',\n+)\n+GIT_CONFIG = os.path.join(\n+    REPO_DIR,\n+    '.git',\n+    'config',\n+)\n+\n+_config = None\n+\n+\n+def get_config():\n+    global _config\n+    if not _config:\n+        _config = GitConfigParser(GIT_CONFIG)\n+    return _config\n+\n+\n+def get_config_remote(name='origin'):\n+    config = get_config()\n+\n+    print(config.sections())\n+\n+    has_remote = False\n+\n+    for key in config.sections():\n+        if key == 'remote \"%s\"' % name:\n+            return config.items(key)\n+        elif key.startswith('remote'):\n+            has_remote = True\n+\n+    if has_remote:\n+        raise KeyError('No git remote called \"%s\"' % name)\n+\n+    raise KeyError('No git remotes found')\n+\n+\n+def get_remote_url():\n+    url = os.environ.get('REPOSITORY_URL')\n+    if not url:\n+        remote = get_config_remote()\n+        url = remote[0][1]\n+\n+    try:\n+        url = giturlparse.parse(url)\n+    except Exception:\n+        url = giturlparse.parse(url + '.git')", "created_at": "2017-12-16T09:37:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng==", "fields": {"body": "Maybe create a new file that holds the last updated time.\nWe have many generated files (org data, blog planet, dates) and that'll give the last updated time to all of that data.", "diff": "@@ -369,14 +377,19 @@ async function fetchDates() {\n }\n \n ;(async () => {\n-  const data = await fetchOrgsWithData()\n+  const orgs = await fetchOrgsWithData()\n   const dates = await fetchDates()\n \n   // sort data by completed_task_instance_count\n-  data.sort(\n+  orgs.sort(\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  const data = {\n+    orgs: sortKeys({ orgs }, { deep: true }).orgs,\n+    lastUpdated: new Date(),", "created_at": "2017-12-20T10:49:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw==", "fields": {"body": "The rss module does this automatically for me. See the output: https://deploy-preview-95--gci-leaders.netlify.com/feed.xml", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,", "created_at": "2017-12-20T17:25:53Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ==", "fields": {"body": "Do we need this? or is this for debugging, we might want a fancier log message or just throw this away completely.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)", "created_at": "2017-12-20T11:47:18Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg==", "fields": {"body": "We might want to fetch this like data.json or the file will not be available on every build.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()", "created_at": "2017-12-20T11:48:36Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg==", "fields": {"body": "Might want to add description.\nThe value can be a readable form of property:old and property:new", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,", "created_at": "2017-12-20T12:01:09Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw==", "fields": {"body": "Every new .js is loading this file again.  And creating a new script , and a longer build command.\nIf these .js are modularised, the data can be parsed once and passed around .", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()", "created_at": "2017-12-20T12:38:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ==", "fields": {"body": "@andrewda went afk, still isn't finished yet. Have yet to remove debug lines", "diff": "@@ -0,0 +1,24 @@\n+function twitter_filter() {\r\n+  var twitter_handles = [];\r\n+  for(var i=0; i<document.getElementsById(\"org-info\"); i++) {\r\n+    var org_info = document.getElementsById(\"org-info\");\r\n+    for(var j=0; i<org_info.children.length; i++) {\r\n+      if(org_info.children[j].href.startsWith(\"https://twitter.com/\")) {\r\n+        twitter_handles.push(org_info.children[j].href.substr(20));\r\n+      }\r\n+    }\r\n+  }\r\n+  console.log(twitter_handles);\r", "created_at": "2017-12-20T21:07:08Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ==", "fields": {"body": "So we can run array function like filter ;)\nYou can use Array.from() instead, more readable.", "diff": "@@ -8,5 +8,40 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('load', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode\n+  var twitter_prefix = 20\n+  var twitter_handles = []\n+  var orgs = document.getElementsByClassName('org-info')\n+  for (var i = 0; i < orgs.length; i++) {\n+    var org_info = orgs[i]\n+    for (var j = 0; j < org_info.children.length; j++) {\n+      if (org_info.children[j].href) {", "created_at": "2017-12-21T22:33:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg==", "fields": {"body": "@dob9601 If you do rebase, you can use import and put that in utils file.", "diff": "@@ -8,5 +8,43 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode", "created_at": "2017-12-24T00:50:58Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ==", "fields": {"body": "store in a repo_info.graphql ?\nthe variables are part of the language.", "diff": "@@ -0,0 +1,30 @@\n+module.exports.REPO_INFO_QUERY = `", "created_at": "2017-12-24T02:30:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA==", "fields": {"body": "Can we remove all of these rulers? They look annoying.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***", "created_at": "2017-12-24T04:31:51Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw==", "fields": {"body": "Better to use === instead of ==. See https://github.com/airbnb/javascript#comparison--eqeqeq.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks\n+          .map(u => {\n+            const createdAt = new Date(u.createdAt)\n+            if (createdAt.getTime() > COMPETITION_OPEN.getTime()) {\n+              return u.owner.login.toLowerCase()\n+            }\n+          })\n+          .filter(login => login)\n+      )\n+\n+    repo.watchers.forEach(watcher => {\n+      if (watcher.name) {\n+        names[watcher.name.toLowerCase()] = watcher.login\n+      }\n+    })\n+  })\n+\n+  logins = logins.filter((item, pos, self) => self.indexOf(item) == pos)", "created_at": "2017-12-24T06:38:05Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw==", "fields": {"body": "Group that let and const. See https://github.com/airbnb/javascript#variables--const-let-group.", "diff": "@@ -1,16 +1,22 @@\n const fetch = require('node-fetch')\n+const GraphQL = require('graphql-client')\n const chattie = require('chattie')\n const fs = require('fs')\n const json2yaml = require('json2yaml')\n const validUsername = require('valid-github-username')\n const wdk = require('wikidata-sdk')\n \n+const { REPO_INFO_QUERY } = require('./queries')\n+\n const GH_BASE = 'https://github.com'\n const GH_USER_BASE = `${GH_BASE}/users`\n const GH_ORG_BASE = `${GH_BASE}/orgs`\n const GH_API_BASE = 'https://api.github.com'\n+const GH_GQL_BASE = 'https://api.github.com/graphql'\n const GCI_API_BASE = 'https://codein.withgoogle.com/api'\n \n+let COMPETITION_OPEN", "created_at": "2017-12-24T06:35:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA==", "fields": {"body": "An issue is a very noticable action.  It is a new thing, and the malicious person is the creator.\nA review is not quite as noticeable, but it would need to be done on an obscure open PR in order to not be noticed.\nEither would likely be seen as intentional confusion, maybe suitable for GitHub to investigate as 'abuse'.\nstars/watches/forks are almost invisible.  And it is very hard to file 'abuse' with GitHub for doing those actions.\nYour issue is a specific attempt to do #8 .\nThe biggest problem is that so far this algorithm has a lower confidence level than the previous algorithms, but it is being used first.  This could be used to override the existing algorithms, which are more reliable.\nOnce you have a potential match, which wasnt found using the existing more reliable algorithms, you need to look at the match profiles to determine how you can increase the confidence level of your match.  The more effort you require of the abuser, the more likely their abuse can only be viewed as intentional or at least highly suspicious.\nProbably also a good idea to annotate each match with the matching method used.\nAPI hits isn't relevant now, as the hits can grow over time.  You can include probable matches in the yaml which are not included in the rendered page, as they are needing more analysis deferred until a subsequent build has extra API calls to use.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks", "created_at": "2017-12-24T06:46:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NzYzOA==", "fields": {"body": "Thanks for review my task :)", "diff": "@@ -1,5 +1,7 @@\n <title>Community website</title>\n+", "created_at": "2017-12-24T09:24:38Z", "last_edited_at": null, "author": "danes44", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg==", "fields": {"body": "And it can be autodetected using shields.io, so may as well do that instead of hardcoding it.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***\n+This is a website to show the current leaders from all organizations in GCI.\n+***\n+ * [Installation](#installation)\n+ * [Languages](#languages)\n+ * [Usage](#usage)\n+ * [Getting Involved](#getting-involved)\n+ * [Support](#support)\n+ * [Authors](#authors)\n+ * [License](#license)\n+***\n+### Installation\n+```\n+npm install\n+```\n+***\n+### Languages:\n+* Node.js\n+* JSON\n+***\n+### Usage:\n+```\n+npm run build\n+```\n+***\n+### Getting Involved\n+If you would like to be a part of the coala community, you can check out our [Getting In Touch](http://coala.readthedocs.io/en/latest/Help/Getting_In_Touch.html) page or ask us at our active Gitter channel, where we have maintainers from all over the world. We appreciate any help!\n+\n+We also have a [newcomer guide](http://api.coala.io/en/latest/Developers/Newcomers_Guide.html) to help you get started by fixing an issue yourself! If you get stuck anywhere or need some help, feel free to contact us on Gitter or drop a mail at our [newcomer mailing list](https://groups.google.com/forum/#!forum/coala-newcomers).\n+***\n+### Support\n+Feel free to contact us at our [Gitter channel](https://gitter.im/coala/coala), we'd be happy to help!\n+\n+If you are interested in commercial support, please contact us on the Gitter channel as well.\n+\n+You can also drop an email at our [mailing list](https://github.com/coala/coala/wiki/Mailing-Lists).\n+***\n+### Authors\n+You can contact to author for more information.\n+[blazeu](mailto:neversleepman@tfwno.gf)\n+***\n+### License\n+[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)", "created_at": "2017-12-25T14:34:47Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ==", "fields": {"body": "Use !== please.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {", "created_at": "2017-12-25T14:42:41Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng==", "fields": {"body": "Use let or const instead.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {\n+      const twitter_account = twitter_url[0].pathname.substr(1)\n+      twitter_handles.push(twitter_account)\n+    }\n+  }\n+  \n+  if (document.getElementById(twitter_id) !== null) {\n+    const tweet_authors = document\n+      .getElementById(twitter_id)\n+      .contentWindow.document.getElementsByClassName(\n+        'TweetAuthor-screenName Identity-screenName'\n+      )\n+      \n+    if (tweet_authors.length > 0) {\n+      for (var k = 0; k < tweet_authors.length; k++) {\n+        if (\n+          twitter_handles.indexOf(tweet_authors[k].innerHTML.substr(1)) > -1\n+        ) {\n+          var tweet = getNodesDeep(tweet_authors[k], 5)", "created_at": "2017-12-25T14:43:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA==", "fields": {"body": "Makes it import { getNodesDeep } from 'utils' please.", "diff": "@@ -1,3 +1,5 @@\n+import {getNodesDeep} from 'utils.js'", "created_at": "2017-12-25T14:42:21Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg==", "fields": {"body": "a README in that directory would be useful.  Also for CC licenses, the full text of the license isnt necessary.  A link is acceptable, and a link to the license file in their repo is really good, as it allows the reader to find the original, which is the intent of CC.", "diff": "@@ -57,6 +57,15 @@ <h3>\n                 />\n               </a>\n             {{/github}}\n+            {{#gitlab}}\n+              <a href=\"https://gitlab.com/{{gitlab}}\">\n+                <img\n+                  src=\"images/logos/gitlab.png\"", "created_at": "2017-12-26T05:29:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA==", "fields": {"body": "Can you please update the color? Somebody will be blind. Update the font color to white for example.", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T07:42:35Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng==", "fields": {"body": "Also, crimson or orangered is better than red", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T08:21:51Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg==", "fields": {"body": "No need, honestly. It's just one line.", "diff": "@@ -55,5 +56,8 @@\n \t\t</TMPL_LOOP>\n \t</ul>\n </div>\n+<script>\n+twemoji.parse(document.body);", "created_at": "2017-12-29T06:28:56Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE5ODYxMg==", "fields": {"body": "This should return a MergeRequest , which has a .author added in https://gitlab.com/gitmate/open-source/IGitt/merge_requests/159 ?\nBut also, this function should be in IGitt. (as part of the same task, as this is the core of the problem of the original task, and making sure it works on gitlab and github with tests is crucial)", "diff": "@@ -129,6 +130,39 @@ def get_issue_related_students():\n                     break\n \n \n+def get_pr_closing_issue(url):\n+    r = requests.get(url)\n+    result = re.search(\n+        'closed this(?:\\n| )+in(?:\\n| )+<a href=\\\"/(.+)/pull/(?:[0-9]+)\\\">#' +\n+        '([0-9]+)</a>',\n+        r.text\n+    )\n+\n+    if result is not None:\n+        return {", "created_at": "2018-01-02T10:08:14Z", "last_edited_at": "2018-01-02T10:18:12Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE5OTE2Ng==", "fields": {"body": "this seems to be unrelated to your issue.  I assume it is caused by the updated IGitt version, in which case you need a separate commit for the IGitt update and these fixes", "diff": "@@ -160,9 +194,18 @@ def get_linked_students():\n                     elif len(issue.assignees) > 1:\n                         logger.info('task %d: Many assignees for %s: %s' %\n                                     (task_id, url, ', '.join(issue.assignees)))\n+\n+                    if len(issue.assignees) != 1:\n+                        user = get_closing_pr_author(url)\n+                        if user is not None:\n+                            student['username'] = user\n+                            print('student %s is %s because of %s (from PR)' %\n+                                  (student['id'], user, url))\n+                            yield student\n+                            break\n                     else:\n-                        student['username'] = issue.assignees[0]\n+                        student['username'] = list(issue.assignees)[0]", "created_at": "2018-01-02T10:12:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODAxOQ==", "fields": {"body": "I think this file may not be needed", "diff": "@@ -0,0 +1,3 @@\n+from django.contrib import admin", "created_at": "2018-01-03T03:40:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODQ0NQ==", "fields": {"body": "likewise, can we avoid creating this file here, as it will be created in the other PR.", "diff": "@@ -0,0 +1,3 @@\n+from django.shortcuts import render", "created_at": "2018-01-03T03:47:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODQxNw==", "fields": {"body": "I think we shouldnt have this file if we dont have any tests written", "diff": "@@ -0,0 +1,3 @@\n+from django.test import TestCase", "created_at": "2018-01-03T03:47:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTQ5MjI5NA==", "fields": {"body": "Mentor and Student models can appear above the Project model, so that they are hard references to the model instead of string references to the model.", "diff": "@@ -0,0 +1,222 @@\n+from django.db import models\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open_starts = models.DateField()\n+    org_signup_open_ends = models.DateField()\n+    org_approval_starts = models.DateField()\n+    org_approval_ends = models.DateField()\n+    orgs_published_starts = models.DateField()\n+    orgs_published_ends = models.DateField()\n+    student_signup_open_starts = models.DateField()\n+    student_signup_open_ends = models.DateField()\n+    slot_request_starts = models.DateField()\n+    slot_request_ends = models.DateField()\n+    slot_allocation_grace_period_starts = models.DateField()\n+    slot_allocation_grace_period_ends = models.DateField()\n+    project_acceptance_starts = models.DateField()\n+    project_acceptance_ends = models.DateField()\n+    project_decisions_finalization_starts = models.DateField()\n+    project_decisions_finalization_ends = models.DateField()\n+    first_work_period_starts = models.DateField()\n+    first_work_period_ends = models.DateField()\n+    first_evaluations_start = models.DateField()\n+    first_evaluations_ends = models.DateField()\n+    second_work_period_starts = models.DateField()\n+    second_work_period_ends = models.DateField()\n+    second_evaluations_starts = models.DateField()\n+    second_evaluations_ends = models.DateField()\n+    third_work_period_starts = models.DateField()\n+    third_work_period_ends = models.DateField()\n+    final_week_starts = models.DateField()\n+    final_week_ends = models.DateField()\n+    final_evaluations_mentor_starts = models.DateField()\n+    final_evaluations_mentor_ends = models.DateField()\n+    post_program_starts = models.DateField()\n+    post_program_ends = models.DateField()\n+    community_bonding_period_starts = models.DateField()\n+    community_bonding_period_ends = models.DateField()\n+    coding_period_starts = models.DateField()\n+    coding_period_ends = models.DateField()\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.homepage_start_button\n+\n+\n+class Organization(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    logo = models.ImageField(upload_to='', blank=True)\n+    url = models.URLField(blank=True)\n+    summary = models.TextField(max_length=300, default='')\n+    technologies = models.ManyToManyField('Technology')\n+    topics = models.ManyToManyField('Topic')\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Technology(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Topic(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Project(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    summary = models.TextField(max_length=300, default='')\n+    org = models.ForeignKey(Organization, on_delete=models.CASCADE)\n+    student = models.OneToOneField('Student')\n+    mentor = models.ForeignKey('Mentor', on_delete=models.CASCADE)", "created_at": "2018-01-03T18:19:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTU4OTY5NQ==", "fields": {"body": "You should now change this to Mentor instead of 'Mentor'", "diff": "@@ -0,0 +1,222 @@\n+from django.db import models\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open_starts = models.DateField()\n+    org_signup_open_ends = models.DateField()\n+    org_approval_starts = models.DateField()\n+    org_approval_ends = models.DateField()\n+    orgs_published_starts = models.DateField()\n+    orgs_published_ends = models.DateField()\n+    student_signup_open_starts = models.DateField()\n+    student_signup_open_ends = models.DateField()\n+    slot_request_starts = models.DateField()\n+    slot_request_ends = models.DateField()\n+    slot_allocation_grace_period_starts = models.DateField()\n+    slot_allocation_grace_period_ends = models.DateField()\n+    project_acceptance_starts = models.DateField()\n+    project_acceptance_ends = models.DateField()\n+    project_decisions_finalization_starts = models.DateField()\n+    project_decisions_finalization_ends = models.DateField()\n+    first_work_period_starts = models.DateField()\n+    first_work_period_ends = models.DateField()\n+    first_evaluations_start = models.DateField()\n+    first_evaluations_ends = models.DateField()\n+    second_work_period_starts = models.DateField()\n+    second_work_period_ends = models.DateField()\n+    second_evaluations_starts = models.DateField()\n+    second_evaluations_ends = models.DateField()\n+    third_work_period_starts = models.DateField()\n+    third_work_period_ends = models.DateField()\n+    final_week_starts = models.DateField()\n+    final_week_ends = models.DateField()\n+    final_evaluations_mentor_starts = models.DateField()\n+    final_evaluations_mentor_ends = models.DateField()\n+    post_program_starts = models.DateField()\n+    post_program_ends = models.DateField()\n+    community_bonding_period_starts = models.DateField()\n+    community_bonding_period_ends = models.DateField()\n+    coding_period_starts = models.DateField()\n+    coding_period_ends = models.DateField()\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.homepage_start_button\n+\n+\n+class Organization(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    logo = models.ImageField(upload_to='', blank=True)\n+    url = models.URLField(blank=True)\n+    summary = models.TextField(max_length=300, default='')\n+    technologies = models.ManyToManyField('Technology')\n+    topics = models.ManyToManyField('Topic')\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Technology(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Topic(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Project(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    summary = models.TextField(max_length=300, default='')\n+    org = models.ForeignKey(Organization, on_delete=models.CASCADE)\n+    student = models.OneToOneField('Student')\n+    mentor = models.ForeignKey('Mentor', on_delete=models.CASCADE)", "created_at": "2018-01-04T07:04:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTU4OTc4OA==", "fields": {"body": "Like \"Mentor\", put the GsocEvent and GsocOccurence above Program, so you can refer to the object instead of the name.", "diff": "@@ -0,0 +1,205 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField('GsocEvent', related_name='org_signup_open')", "created_at": "2018-01-04T07:05:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTUwMjU5NQ==", "fields": {"body": "I think we need to use an existing django app or library to provide the data fields, and thus also hold the data.\nhttps://djangopackages.org/grids/g/calendar/ shows the main options.\ndjango-scheduler looks like it has the most features built in, while django-eventtools looks like the most raw & re-usable with fewer features.\nAssuming django-eventtools is our best option, we would need a custom GsocEvent(BaseEvent) and GsocOccurrence(BaseOccurrence), and the Program model would then need to have either\n\nan array of GsocOccurrence , and all of these start/end are pushed into it as events with the event name derived from the prefix (e.g. org_signup_open -> title=\"Org signup open\")\nfields for each event, like org_signup_open = GsocOccurrence()\n\nthe later feels like the better option, at least initially.", "diff": "@@ -0,0 +1,222 @@\n+from django.db import models\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Result(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open_starts = models.DateField()", "created_at": "2018-01-03T19:06:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTUwMjgwMA==", "fields": {"body": "these should be GsocEvent/ GsocOccurrence - they are the same events that are found in the Program json", "diff": "@@ -0,0 +1,222 @@\n+from django.db import models\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open_starts = models.DateField()\n+    org_signup_open_ends = models.DateField()\n+    org_approval_starts = models.DateField()\n+    org_approval_ends = models.DateField()\n+    orgs_published_starts = models.DateField()\n+    orgs_published_ends = models.DateField()\n+    student_signup_open_starts = models.DateField()\n+    student_signup_open_ends = models.DateField()\n+    slot_request_starts = models.DateField()\n+    slot_request_ends = models.DateField()\n+    slot_allocation_grace_period_starts = models.DateField()\n+    slot_allocation_grace_period_ends = models.DateField()\n+    project_acceptance_starts = models.DateField()\n+    project_acceptance_ends = models.DateField()\n+    project_decisions_finalization_starts = models.DateField()\n+    project_decisions_finalization_ends = models.DateField()\n+    first_work_period_starts = models.DateField()\n+    first_work_period_ends = models.DateField()\n+    first_evaluations_start = models.DateField()\n+    first_evaluations_ends = models.DateField()\n+    second_work_period_starts = models.DateField()\n+    second_work_period_ends = models.DateField()\n+    second_evaluations_starts = models.DateField()\n+    second_evaluations_ends = models.DateField()\n+    third_work_period_starts = models.DateField()\n+    third_work_period_ends = models.DateField()\n+    final_week_starts = models.DateField()\n+    final_week_ends = models.DateField()\n+    final_evaluations_mentor_starts = models.DateField()\n+    final_evaluations_mentor_ends = models.DateField()\n+    post_program_starts = models.DateField()\n+    post_program_ends = models.DateField()\n+    community_bonding_period_starts = models.DateField()\n+    community_bonding_period_ends = models.DateField()\n+    coding_period_starts = models.DateField()\n+    coding_period_ends = models.DateField()\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.homepage_start_button\n+\n+\n+class Organization(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    logo = models.ImageField(upload_to='', blank=True)\n+    url = models.URLField(blank=True)\n+    summary = models.TextField(max_length=300, default='')\n+    technologies = models.ManyToManyField('Technology')\n+    topics = models.ManyToManyField('Topic')\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Technology(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Topic(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Project(models.Model):\n+    name = models.CharField(max_length=100, primary_key=True)\n+    summary = models.TextField(max_length=300, default='')\n+    org = models.ForeignKey(Organization, on_delete=models.CASCADE)\n+    student = models.OneToOneField('Student')\n+    mentor = models.ForeignKey('Mentor', on_delete=models.CASCADE)\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Student(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Mentor(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+# for 2018 events\n+\n+\n+class UpcomingEvent(models.Model):", "created_at": "2018-01-03T19:07:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTYwMzgxMw==", "fields": {"body": "shit got confused between 2017 and 18 \ud83e\udd2a.  You are all good", "diff": "@@ -74,13 +74,13 @@ can be used to help select a repository that meets those criteria.\n To filter out repositories that do not meet the first two requirements, combine\n \n 1. [`stars:>99`](https://github.com/search?o=desc&q=stars%3A%3E%3D99&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93), and\n-2. [`pushed:>2016-09-30`](https://github.com/search?utf8=%E2%9C%93&q=pushed%3A%3E2016-09-30&type=Repositories&ref=searchresults)\n+2. [`pushed:>2017-09-30`](https://github.com/search?utf8=%E2%9C%93&q=pushed%3A%3E2017-09-30&type=Repositories&ref=searchresults)\n \n-The [combined query](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A>2016-09-30&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)\n+The [combined query](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A>2017-09-30&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)\n has more than 28,000 repository results, so there are many to choose from.\n \n An optional additional search term is\n-[`forks:>100`](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A%3E2016-09-30+forks%3A%3E%3D100&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)\n+[`forks:>100`](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A%3E2017-09-30+forks%3A%3E%3D100&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)", "created_at": "2018-01-04T08:59:59Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg3ODIyNw==", "fields": {"body": "move these two int fields to the top.", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()", "created_at": "2018-01-05T13:44:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg4MDAyMA==", "fields": {"body": "foriegn key at top", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)", "created_at": "2018-01-05T13:53:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg4MDMxMQ==", "fields": {"body": "there is no good attribute to use for the str().  can we use the program year ; it is the foreign key ??", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.program)\n+\n+\n+class ProgramStatistic(models.Model):\n+    number_of_lines_of_code = models.IntegerField()\n+    homepage_start_button = models.CharField(max_length=100)\n+    homepage_intro_paragraph = models.TextField()\n+    number_of_mentors = models.IntegerField()\n+    number_of_student_and_mentor_countries = models.IntegerField()\n+    number_of_years = models.IntegerField()\n+    homepage_orgs_paragraph = models.TextField()\n+    homepage_students_paragraph = models.TextField()\n+    number_of_organizations = models.IntegerField()\n+    number_of_student_countries = models.IntegerField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return self.homepage_start_button", "created_at": "2018-01-05T13:54:52Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5MTM0MA==", "fields": {"body": "the bool doesnt need to exist; it can be derived.", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()", "created_at": "2018-01-05T14:40:50Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5MTU5MQ==", "fields": {"body": "as a 1-1 , it should be at the top, as it is also the primary key", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):\n+    student_finals_can_be_submitted = models.BooleanField()\n+    org_payment_details_can_be_changed = models.BooleanField()\n+    admins_can_register = models.BooleanField()\n+    mentor_first_evals_can_be_submitted = models.BooleanField()\n+    students_can_edit_project = models.BooleanField()\n+    tax_forms_can_be_uploaded = models.BooleanField()\n+    accepted_projects_published = models.BooleanField()\n+    student_first_evals_can_be_submitted = models.BooleanField()\n+    second_enrollment_forms_can_be_submitted = models.BooleanField()\n+    enrollments_can_be_reviewed = models.BooleanField()\n+    mentor_second_evals_can_be_submitted = models.BooleanField()\n+    slots_can_be_assigned = models.BooleanField()\n+    second_eval_emails_can_be_sent = models.BooleanField()\n+    orgs_can_be_edited = models.BooleanField()\n+    mentor_finals_can_be_submitted = models.BooleanField()\n+    slot_allocation_emails_can_be_sent = models.BooleanField()\n+    projects_can_be_accepted = models.BooleanField()\n+    enrollments_can_undergo_second_review = models.BooleanField()\n+    orgs_can_be_accepted = models.BooleanField()\n+    students_can_register = models.BooleanField()\n+    second_enrollments_can_be_reviewed = models.BooleanField()\n+    second_enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    org_members_can_edit_proposal = models.BooleanField()\n+    evaluations_in_progress = models.BooleanField()\n+    proposal_can_be_deleted = models.BooleanField()\n+    accepted_orgs_published = models.BooleanField()\n+    results_published = models.BooleanField()\n+    send_assignee_emails = models.BooleanField()\n+    org_members_can_view_final_proposals = models.BooleanField()\n+    orgs_can_register = models.BooleanField()\n+    student_second_evals_can_be_submitted = models.BooleanField()\n+    enrollment_forms_can_be_submitted = models.BooleanField()\n+    project_decisions_emails_can_be_sent = models.BooleanField()\n+    orgs_can_see_enrollment_status = models.BooleanField()\n+    proposal_in_progress = models.BooleanField()\n+    orgs_have_been_accepted = models.BooleanField()\n+    mentors_can_register = models.BooleanField()\n+    final_evaluations_emails_can_be_sent = models.BooleanField()\n+    slots_can_be_requested = models.BooleanField()\n+    org_accept_reject_emails_can_be_sent = models.BooleanField()\n+    org_payment_details_visible = models.BooleanField()\n+    students_can_submit_proposals = models.BooleanField()\n+    student_withdrawals_trigger_email = models.BooleanField()\n+    enrollment_forms_can_be_re_submitted = models.BooleanField()\n+    tax_forms_can_be_reviewed = models.BooleanField()\n+    first_eval_emails_can_be_sent = models.BooleanField()\n+    second_review_status_visible = models.BooleanField()\n+    project_decisions_can_be_finalized = models.BooleanField()\n+    student_home_address_is_editable = models.BooleanField()\n+    program = models.ForeignKey(Program, on_delete=models.CASCADE)", "created_at": "2018-01-05T14:42:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwMzA1Mw==", "fields": {"body": "put this with the other django req, insert roughly in alpha order", "diff": "@@ -8,3 +8,4 @@ pillow\n ruamel.yaml\n markdown2\n python_dateutil\n+django-eventtools", "created_at": "2018-01-05T15:30:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwNDY0OA==", "fields": {"body": "@jayvdb, Django will automatically add a 's' in the end of the model names.", "diff": "@@ -0,0 +1,204 @@\n+from django.db import models\n+from eventtools.models import BaseEvent, BaseOccurrence\n+\n+\n+class Gsoc(models.Model):\n+    count = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.count)\n+\n+\n+class GsocEvent(BaseEvent):\n+    title = models.TextField()\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class GsocOccurrence(BaseOccurrence):\n+    event = models.ForeignKey(GsocEvent)\n+\n+    def __str__(self):\n+        return self.event\n+\n+\n+class Program(models.Model):\n+    year = models.IntegerField(primary_key=True)\n+    state = models.CharField(max_length=100)\n+    is_current = models.BooleanField()\n+    org_signup_open = models.BooleanField()\n+    org_approval = models.BooleanField()\n+    orgs_published = models.BooleanField()\n+    student_signup_open = models.BooleanField()\n+    slot_request = models.BooleanField()\n+    slot_allocation_grace_period = models.BooleanField()\n+    project_acceptance = models.BooleanField()\n+    project_decisions_finalization = models.BooleanField()\n+    first_work_period = models.BooleanField()\n+    first_evaluations = models.BooleanField()\n+    second_work_period = models.BooleanField()\n+    second_evaluations = models.BooleanField()\n+    third_work_period = models.BooleanField()\n+    final_week = models.BooleanField()\n+    final_evaluations_mentor = models.BooleanField()\n+    post_program = models.BooleanField()\n+    org_signup_open = models.OneToOneField(GsocEvent, related_name='org_signup_open')\n+    org_approval = models.OneToOneField(GsocEvent, related_name='org_approval')\n+    orgs_published = models.OneToOneField(GsocEvent, related_name='org_published')\n+    student_signup_open = models.OneToOneField(GsocEvent, related_name='student_signup_open')\n+    slot_request = models.OneToOneField(GsocEvent, related_name='slot_request')\n+    slot_allocation_grace_period = models.OneToOneField(GsocEvent, related_name='slot_allocation_grace_period')\n+    project_acceptance = models.OneToOneField(GsocEvent, related_name='project_acceptance')\n+    project_decisions_finalization = models.OneToOneField(GsocEvent, related_name='project_decisions_finalization')\n+    first_work_period = models.OneToOneField(GsocEvent, related_name='first_work_period')\n+    first_evaluations = models.OneToOneField(GsocEvent, related_name='first_evaluations')\n+    second_work_period = models.OneToOneField(GsocEvent, related_name='second_work_period')\n+    second_evaluations = models.OneToOneField(GsocEvent, related_name='second_evaluations')\n+    third_work_period = models.OneToOneField(GsocEvent, related_name='third_work_period')\n+    final_week = models.OneToOneField(GsocEvent, related_name='final_week')\n+    final_evaluations_mentor = models.OneToOneField(GsocEvent, related_name='final_evaluations_mentor')\n+    post_program = models.OneToOneField(GsocEvent, related_name='post_program')\n+    community_bonding_period = models.OneToOneField(GsocEvent, related_name='community_bonding_period')\n+    coding_period = models.OneToOneField(GsocEvent, related_name='coding_period')\n+    results_announced = models.DateField()\n+    tax_forms_deadline = models.DateField()\n+    first_payments = models.DateField()\n+    second_payments = models.DateField()\n+    final_payments = models.DateField()\n+    first_evaluations_finalized = models.DateField()\n+    second_evaluations_finalized = models.DateField()\n+    final_evaluations_finalized = models.DateField()\n+    projects_accepted_count = models.IntegerField()\n+    org_accepted_count = models.IntegerField()\n+    slot_allocation_finalized = models.DateField()\n+    second_enrollment_form_upload_deadline = models.DateField()\n+    gsoc = models.ForeignKey(Gsoc, on_delete=models.CASCADE)\n+\n+    def __str__(self):\n+        return str(self.year)\n+\n+\n+class Feature(models.Model):", "created_at": "2018-01-05T15:37:19Z", "last_edited_at": "2018-01-05T15:52:55Z", "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ==", "fields": {"body": "@andrewda While some hr elements not using backslash, there is some img elements using backslash. We need to fix this later. Consistency is important.", "diff": "@@ -209,7 +209,8 @@ <h3>\n     </div>\n     <footer>\n       <small data-i18n=\"gci-copyright\">Google Code-in and the Google Code-in logo are trademarks of Google Inc.</small><br />\n-      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small>\n+      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small><br />", "created_at": "2018-01-11T08:00:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM5MTY0Mw==", "fields": {"body": "Actually, &gteq; \ud83d\ude1b", "diff": "@@ -33,6 +33,11 @@ <h5 class=\"light\">simply install coala</h5>\n                     </p>\n                 </div>\n                 <div class=\"col m6 s12\">\n+                    <p>In order to use coala, you should have\n+                        <a href=\"https://www.python.org/downloads/\">Python >= 3.4</a> and\n+                        <a href=\"https://pip.pypa.io/en/stable/installing/\">pip >= 8</a> Installed", "created_at": "2018-01-14T09:19:45Z", "last_edited_at": "2018-01-14T09:22:59Z", "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng==", "fields": {"body": "we probably don't want this as venv is created here only for using coala whereas in the development setup notes coala-venv is created for the purpose of development.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T09:54:17Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA==", "fields": {"body": "Since it's venv in the rest documentation, use venv only. Didn't note that before. ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:03Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ==", "fields": {"body": "@diveshuttam yea i just had a look and IMO you can carry on withvenv and later on file an issue to change it after asking a maintainer ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:36Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ==", "fields": {"body": "@pareksha @newbazz @diveshuttam I agree with you guys on being consistent with the naming convention. However my comment was only regarding functionality either way \ud83d\ude0a", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T16:32:11Z", "last_edited_at": null, "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA==", "fields": {"body": "@pareksha  @anctartica actually, naming the virtual environment doesn't change its functionality. Using either venv or coala-venv is correct.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:00:41Z", "last_edited_at": "2018-01-22T13:01:01Z", "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA==", "fields": {"body": "yes, i know.. was referring to the context in which the name is used in the documentation", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:06:51Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA==", "fields": {"body": "I have already mentioned that the user will not see a version number if virtualenv is not installed and I think the output message would be pretty obvious to know that its not installed yet", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:\n+", "created_at": "2018-01-31T16:45:40Z", "last_edited_at": null, "author": "lilithxxx", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ==", "fields": {"body": "You need to explain the use of --user flag.", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:", "created_at": "2018-02-05T07:31:55Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw==", "fields": {"body": "till -> until\nRather avoid slang ;)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular\n+section in them (you have not specified any particular sections till", "created_at": "2018-02-22T20:44:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ==", "fields": {"body": "You could actually say \"This special section\" (because it really is special in coala's setting system)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:44:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw==", "fields": {"body": "Maybe say that \"This section groups all the settings that are entered via ...\", because the purpose of sections are their grouping-ability.", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:45:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA==", "fields": {"body": "--> \"that don't belong to a particular section\", I think this one is better :)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular", "created_at": "2018-02-22T20:47:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg==", "fields": {"body": "Ah :3 Regarding \u261d\ufe0f  edf0dae#r170088538\nSo this is what should come earlier, in the Configuration Files - coafiles-paragraph.", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng==", "fields": {"body": "Hm not sure we should encourage people to name it \"all\". But yeah, maybe a good convention in future? Not sure :3", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:28Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDQ2NQ==", "fields": {"body": "this blank line is necessary", "diff": "@@ -11,7 +11,6 @@\n \"\"\"\n \n import os\n-", "created_at": "2018-03-11T01:30:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDU0NA==", "fields": {"body": "use logging", "diff": "@@ -0,0 +1,71 @@\n+import sys\n+import json\n+import requests\n+import xmltodict\n+from openhub.models import MostCommit, MostRecentCommit, AffiliatedCommitter\n+from django.core.management.base import BaseCommand\n+from community.git import get_owner\n+from openhub.oh_token import OH_TOKEN\n+\n+\n+org_name = get_owner()\n+class Command(BaseCommand):\n+    def import_data(self, affiliator):\n+        org = org_name\n+        name = affiliator.get('name', None)\n+        kudos = affiliator.get('kudos', None)\n+        level = affiliator.get('level', None)\n+        project1 = affiliator.get('most_commits', None).get('project')\n+        commits = affiliator.get('most_commits', None).get('commits', None)\n+        project2 = affiliator.get('most_recent_commit', None).get('project', None)\n+        date = affiliator.get('most_recent_commit', None).get('date', None)\n+\n+        try:\n+            cr1, create1 = MostCommit.objects.get_or_create(\n+                project1 = project1,\n+                commits = commits\n+                )\n+            if create1:\n+                cr1.save()\n+            cr2, create2 = MostRecentCommit.objects.get_or_create(\n+                project2 = project2,\n+                date = date\n+                )\n+            if create2:\n+                cr2.save()\n+            c, created = AffiliatedCommitter.objects.get_or_create(\n+                name = name,\n+                org = org,\n+                kudos = kudos,\n+                level = level,\n+                most_commits = cr1,\n+                most_recent_commit = cr2\n+                )\n+            if created:\n+                c.save()\n+                print (\"\\nAffiliatedCommitter, {}, has been saved.\".format(c))", "created_at": "2018-03-11T01:35:30Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDUxNg==", "fields": {"body": "blank line separates std libs and custom packages", "diff": "@@ -0,0 +1,71 @@\n+import sys\n+import json\n+import requests", "created_at": "2018-03-11T01:33:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY1ODA5Mw==", "fields": {"body": "get the token here, and catch the exception, and exit the function.  do not try to run without a token.", "diff": "@@ -0,0 +1,71 @@\n+from github import Github\n+#from inactiveIssue.github_token import GITHUB_TOKEN\n+from dateutil.parser import parse\n+import time\n+from datetime import date\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+import requests,json\n+\n+try:\n+    GH_TOKEN = get_api_key('GH')\n+except:\n+    print(\"Unable to get the token\")\n+    pass\n+\n+\n+\n+def run(request):\n+    g1 = Github(GH_TOKEN)", "created_at": "2018-03-11T15:15:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxODA5Mw==", "fields": {"body": "OpenHub* ?", "diff": "@@ -0,0 +1,8 @@\n+# -*- coding: utf-8 -*-\n+from __future__ import unicode_literals\n+\n+from django.apps import AppConfig\n+\n+\n+class OpenhubConfig(AppConfig):", "created_at": "2018-03-10T10:14:30Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxODAxNw==", "fields": {"body": "should be upper case, and named like the others, so maybe OH_TOKEN", "diff": "@@ -122,3 +123,4 @@\n MEDIA_URL = '/media/'\n MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n STATICFILES_DIRS = ['static/']\n+openhub_api_key = 'enter_your_key'", "created_at": "2018-03-10T10:13:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzc5NjMyOA==", "fields": {"body": "please re-order your imports to comply with PEP8.\nalso use snake_case for filenames", "diff": "@@ -0,0 +1,64 @@\n+from github import Github", "created_at": "2018-03-12T13:32:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDAxNzUzNw==", "fields": {"body": "function names must comply with PEP8: snake case.  no upper case.\nfilenames also must not be upper case.\nand IMO call your app 'inactive_issues', based on only a little reading like https://stackoverflow.com/questions/3098681/is-there-a-naming-convention-for-django-apps", "diff": "@@ -0,0 +1,64 @@\n+import time\n+import json\n+\n+from github import Github\n+from dateutil.parser import parse\n+from datetime import date\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+\n+\n+def run(issue1):\n+    issues_number_list = []\n+    for j in issue1:\n+        issue_no = j.number\n+        events = j.get_events()\n+        myevent = []\n+        data = []\n+        for i in events:\n+            myevent.append(str(i.event))\n+        for i in events:\n+            if i.commit_id is not None:\n+                data.append(str(i.created_at))\n+        for i, myevents in reversed(list(enumerate(myevent))):\n+            if myevents == 'unassigned':\n+                break\n+            elif myevents == 'assigned':\n+                a = events[i].created_at\n+                c = (date.fromtimestamp(time.time()) - a.date()).days\n+                if c >= 60:  # for checking assigned duration\n+\n+                    mydata = list(reversed(data))\n+                    if len(mydata) != 0:\n+                        commit1 = parse(mydata[0])\n+                        calculated_days = (date.fromtimestamp(\n+                            time.time()) - commit1.date()).days\n+                        if calculated_days >= 60:\n+                            # for checking last commit update\n+                            issues_number_list.append(issue_no)\n+                    else:\n+                        issues_number_list.append(issue_no)\n+                break\n+    return issues_number_list\n+\n+\n+def inactiveIssue(request):", "created_at": "2018-03-13T05:05:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDk5MDAyOA==", "fields": {"body": "This is not negotiable.  you need to not use the word coala.  use get_owner , and luckily you can use the owner name as the repo name, which will fetch coala/coala.  That is good enough for the first version of this.", "diff": "@@ -0,0 +1,64 @@\n+import time\n+import json\n+\n+from github import Github\n+from dateutil.parser import parse\n+from datetime import date\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+\n+\n+def run(issue1):\n+    issues_number_list = []\n+    for j in issue1:\n+        issue_no = j.number\n+        events = j.get_events()\n+        myevent = []\n+        data = []\n+        for i in events:\n+            myevent.append(str(i.event))\n+        for i in events:\n+            if i.commit_id is not None:\n+                data.append(str(i.created_at))\n+        for i, myevents in reversed(list(enumerate(myevent))):\n+            if myevents == 'unassigned':\n+                break\n+            elif myevents == 'assigned':\n+                a = events[i].created_at\n+                c = (date.fromtimestamp(time.time()) - a.date()).days\n+                if c >= 60:  # for checking assigned duration\n+\n+                    mydata = list(reversed(data))\n+                    if len(mydata) != 0:\n+                        commit1 = parse(mydata[0])\n+                        calculated_days = (date.fromtimestamp(\n+                            time.time()) - commit1.date()).days\n+                        if calculated_days >= 60:\n+                            # for checking last commit update\n+                            issues_number_list.append(issue_no)\n+                    else:\n+                        issues_number_list.append(issue_no)\n+                break\n+    return issues_number_list\n+\n+\n+def inactiveIssue(request):\n+    try:\n+        GH_TOKEN = get_api_key('GH')\n+    except:\n+        return HttpResponse('[]')\n+    g1 = Github(GH_TOKEN)\n+    org = g1.get_organization('coala')  # Ignore KeywordBear", "created_at": "2018-03-16T03:28:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI2NDYxOA==", "fields": {"body": "Okay sure. I'll just modify the milestones and scooch write new actions in there. :-)", "diff": "@@ -0,0 +1,43 @@\n+---\n+name: \"Nextgen action system\"\n+desc: \"Actions in coala should be improved to allow for more dynamic actions\"\n+requirements:\n+ - \"The applicant must understand how results and actions work in coala.\"\n+ - \"The proposal needs to contain a clear concept.\"\n+difficulty: \"medium\"\n+mentors:\n+ - Makman2\n+ - jayvdb\n+initiatives:\n+ - GSoC\n+tags:\n+ - core\n+---\n+\n+Currently, `Result` objects are passed to action objects as parameters when coala tries to apply an action. This is a bit restrictive as this means that coala needs to have a global set of actions that it tries to apply on all `Result` objects. Sure, coala checks if an action `is_applicable()` before it tries to apply it but it needs to do that for every `Result` that every bear ever generates.\n+\n+We need a way allow results to define actions by themselves, like result = Result(actions=[AmendCommitAction, ...]). Here are the benefits of such an approach:\n+1. More control inside actions over the interaction process.\n+2. Bears can specify their own actions, for example the GitCommitBear would highly benefit from this (actions could be added for amending commits). Then, the bear writers could get much more creative and generate even more useful bears.\n+\n+#### Milestones\n+\n+##### COMMUNITY BONDING\n+\n+* Student should have a clear plan and conceptual work must be finished.\n+* The applicant should know how to work with the community.\n+\n+##### CODING PHASE 1 \n+\n+* Changes to the `Result` class must be finished including writing tests and documentation\n+\n+##### CODING PHASE 2\n+\n+* Action classes have been revamped so that they allow the above mentioned benefits\n+* Refactoring of the existing action classes in order to comply with the above plan must be partially complete\n+\n+##### CODING PHASE 3\n+\n+* All existing action classes have been refactored, tested and changes merged\n+* Any other functions/modules that are affected by changes have been refactored\n+* coala tutorials and bear writing tutorials have been updated", "created_at": "2018-03-17T17:35:11Z", "last_edited_at": null, "author": "nityeshaga", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI3NjAwNg==", "fields": {"body": "What should a django Command.handle do when there is an error ?", "diff": "@@ -37,13 +39,19 @@ def handle(self, *args, **options):\n         \"\"\"\n         Makes a GET request to the  API.\n         \"\"\"\n+        logger = logging.getLogger(__name__)\n         headers = {'Content-Type': 'application/json'}\n-        response = requests.get(\n-            url=IMPORT_URL,\n-            headers=headers,\n-        )\n \n-        response.raise_for_status()\n+        try:\n+            response = requests.get(\n+                url=IMPORT_URL,\n+                headers=headers,\n+            )\n+            response.raise_for_status()\n+        except Exception as e:\n+            logger.error(e)\n+            return", "created_at": "2018-03-18T03:03:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTg3NDU2OA==", "fields": {"body": "I am allocated on too many project ideas as it is. :P", "diff": "@@ -0,0 +1,86 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"This project is about updating bear to use aspect feature.\"\n+developers_involved: []\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+  - RGSoC\n+issues: []\n+markdown: convert_bear_to_aspects.md\n+mentors:\n+  - jayvdb", "created_at": "2018-03-20T18:21:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTQ0NA==", "fields": {"body": "enocouraged - spelling... but, use stronger language, and gender neutral when possible:\n\nCandidate is expected to incorporate their own ideas and designs.", "diff": "@@ -41,11 +37,108 @@ corrections or gramatical corrections.\n In addition Bears will be able to offer templated patches, e.g. to offer\n variable renamings while the user should be asked for the new variable name.\n \n+#### Sample mockups\n+\n+Source: https://docs.google.com/document/d/1BLZO2tD93yKdO7XhMb5NgJvytu-pWDtPMRidGmjQ8EY/edit?usp=sharing (You are free to use ideas discussed in the proposal).\n+\n+Candidates can take help of following sample mockups to understand the use cases better. The mockups discussed below however need not be strictly followed. Candidate is enocouraged than welcome to incorporate his ideas and designs.", "created_at": "2018-03-21T02:54:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTY5OA==", "fields": {"body": "blank line after :", "diff": "@@ -15,24 +15,20 @@ mentors:\n   - jayvdb\n name: \"Improve Diff Handling\"\n requirements:\n-  - \"The proposal has to contain a clear concept.\"\n+  - \"The proposal has to contain a clear concept and implementation approach.\"\n   - \"The applicant should have one patch accepted to the coala core.\"\n tags:\n   - Core\n   - CLI\n ---\n-One advantage of using coala is that some Bears offer automatically generated\n-diffs to fix the problems they detect. This mechanism works smoothly as of now\n-and even applies the proposed diff automatically to the problematic file if the\n-user so desires. This is very helpful to the users. At the same time, not\n-every issue in the code can have just a single correct solution. The fix can\n-and should also be modifiable by the preferences of the user. Thus the\n-following improvements can be incorporated giving coala the ability to:\n-\n-1. Offer multiple diffs, i.e. multiple different fixes to the same issue.\n+coala provides static analysis routines in the form of bears that have capabilities to detect or even fix the problematic code. coala converts the fixes provided by different bears to its own `Diff` class instance which is later used to display the fix along with the analysis results to the users and let the users choose appropriate actions. This mechanism works smoothly as of now and even applies the proposed diff automatically to the problematic file if the user so desires. This is very helpful to the users. At the same time, not every issue in the code can have just a single correct solution. The fix can and should also be modifiable by the preferences of the user.\n+\n+The primary objective of the project is to improve the existing diff handling capability of coala so that it is possible for the bears to do things like:", "created_at": "2018-03-21T02:57:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTYzNg==", "fields": {"body": "grammar issue with for the enhance features  enhanced?", "diff": "@@ -65,3 +158,4 @@ variable renamings while the user should be asked for the new variable name.\n * The feature of templated patches is merged and fully tested.\n * The new API is fully documented on <https://api.coala.io/>.\n * At least one Bear exists that makes use of this.\n+* Output formats for the enhance features are added and their processing functions are implemented in the `Linter` class.", "created_at": "2018-03-21T02:56:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTczOA==", "fields": {"body": "split lines at 80cpl", "diff": "@@ -15,24 +15,20 @@ mentors:\n   - jayvdb\n name: \"Improve Diff Handling\"\n requirements:\n-  - \"The proposal has to contain a clear concept.\"\n+  - \"The proposal has to contain a clear concept and implementation approach.\"\n   - \"The applicant should have one patch accepted to the coala core.\"\n tags:\n   - Core\n   - CLI\n ---\n-One advantage of using coala is that some Bears offer automatically generated\n-diffs to fix the problems they detect. This mechanism works smoothly as of now\n-and even applies the proposed diff automatically to the problematic file if the\n-user so desires. This is very helpful to the users. At the same time, not\n-every issue in the code can have just a single correct solution. The fix can\n-and should also be modifiable by the preferences of the user. Thus the\n-following improvements can be incorporated giving coala the ability to:\n-\n-1. Offer multiple diffs, i.e. multiple different fixes to the same issue.\n+coala provides static analysis routines in the form of bears that have capabilities to detect or even fix the problematic code. coala converts the fixes provided by different bears to its own `Diff` class instance which is later used to display the fix along with the analysis results to the users and let the users choose appropriate actions. This mechanism works smoothly as of now and even applies the proposed diff automatically to the problematic file if the user so desires. This is very helpful to the users. At the same time, not every issue in the code can have just a single correct solution. The fix can and should also be modifiable by the preferences of the user.", "created_at": "2018-03-21T02:58:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk4Mjc3Nw==", "fields": {"body": "I think it depends on the students. For me, linting feature is enough.", "diff": "@@ -0,0 +1,63 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Offer coala languager server.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+  - RGSoC\n+issues:\n+  - \"https://github.com/coala/coala-vs-code/issues/3\"\n+  - \"https://github.com/coala/coala-vs-code/issues/4\"\n+markdown: coala_language_server.md\n+mentors:\n+  - gaocegege\n+name: \"coala Language Server\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala.\"\n+  - \"The applicant shoule be familiar with language server protocol\"\n+tags:\n+  - Language Server\n+  - Plugins\n+---\n+\n+The [Language Server Protocol](https://langserver.org/) was created by Microsoft to define a common language for programming language analyzers to speak. Today, several companies have come together to support its growth, including Codenvy, Red Hat, and Sourcegraph, and the protocol is becoming supported by a rapidly growing list of editor and language communities:\n+\n+- VS Code\n+- Eclipse Che\n+- Eclipse IDE(Eclipse LSP4E)\n+- IntelliJ / JetBrains IDEs\n+- Vim\n+- Atom (WIP)\n+- Emacs (WIP)\n+- Sublime (WIP)\n+\n+We have a state-of-art implementation in [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed for VS Code only. We need to design and implement a general mechanism for multiple editors/IDEs support.\n+\n+The project is divided into two parts:\n+\n+1. Offer a basic languager server.\n+2. Implement a plugin based on the language server.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- An official repository exists with CI.\n+- An mock language server exists.\n+\n+##### CODING PHASE 1\n+\n+- A basic language server for coala exists.", "created_at": "2018-03-21T04:27:28Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI4MDY1MA==", "fields": {"body": "Do not ignore it, see openhub app on how to handle long urls, please never use \\.", "diff": "@@ -0,0 +1,66 @@\n+import json\n+import requests\n+\n+from github import Github\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+\n+from community.git import get_org_name\n+\n+\n+def run(issues, GH_TOKEN, reponame):\n+    issues_number_list = []\n+    for j in issues:\n+        issue_no = j.number\n+        events = j.get_events()\n+        data = []\n+        for i in events:\n+            if i.commit_id is not None:\n+                data.append(str(i.commit_id))\n+        extracted_data = data[-1:]\n+        if len(extracted_data) == 1:\n+            commit_id = extracted_data[0]\n+            url = 'https://api.github.com/search/issues?q='+commit_id + \\\n+                '+type:pr+repo:'+reponame  # Ignore PycodestyleBear (E501)", "created_at": "2018-04-10T02:18:13Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxNTE1NA==", "fields": {"body": "@refactormyself\nWe are using coala's docker image to run coala on this repository, so we are not installing coala using pip over here.\nYou should consider removing these pip statements, and rather putting the if condition above the docker line, so that the GitCommitBear is ignored before running coala from docker", "diff": "@@ -10,7 +10,14 @@ cache: bundler\n script:\n   - .ci/build.sh\n   - docker run -v=$(pwd):/app --workdir=/app coala/base coala --ci\n-\n+  - pip install ./dist/coala-*.whl", "created_at": "2018-04-11T22:19:59Z", "last_edited_at": "2018-04-11T22:24:20Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw==", "fields": {"body": "Just do multiple variable on a single destructuring line { a, b, c }", "diff": "@@ -9,17 +9,16 @@ const wdk = require('wikidata-sdk')\n const cheerio = require('cheerio')\n \n const { GITHUB_REPO_INFO_QUERY } = require('./queries')\n+const { GITHUB_SEARCH_ORG_QUERY } = require('./queries')\n+const { GITHUB_USER_INFO_QUERY } = require('./queries')", "created_at": "2018-04-17T11:51:49Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA==", "fields": {"body": "since rultor died pre tag hasn't been updated for coala. Hardly likely it's done for coala quick start. You must remove this.", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre", "created_at": "2018-04-19T06:45:05Z", "last_edited_at": "2018-04-19T06:47:36Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw==", "fields": {"body": "coala-quickstart coala Quickstart\n\"Generating a .coafile using coala-quickstart\" sounds better", "diff": "@@ -27,6 +27,7 @@ Welcome to the coala documentation!\n    Installing coala <Users/Install>\n    Getting Started with coala <Users/Tutorial>\n    Writing a coala Configuration File (coafile and coarc) <Users/coafile>\n+   Using coala Quickstart to Generate a .coafile <Users/coala_quickstart.rst>", "created_at": "2018-04-19T06:50:10Z", "last_edited_at": "2018-04-19T06:50:27Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA==", "fields": {"body": "this tool called", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called", "created_at": "2018-04-19T06:54:42Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw==", "fields": {"body": "use it, to", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.", "created_at": "2018-04-19T06:55:14Z", "last_edited_at": "2018-04-19T06:56:51Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ==", "fields": {"body": "this doesn't seem much of a feature, you can add automatic detection of bear settings instead of this", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your", "created_at": "2018-04-19T06:58:02Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA==", "fields": {"body": "then", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages", "created_at": "2018-04-19T07:02:44Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA==", "fields": {"body": "After that you will --> You will now", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears", "created_at": "2018-04-19T07:02:27Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ==", "fields": {"body": "good to go --> done!", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are good to go.", "created_at": "2018-04-19T07:03:52Z", "last_edited_at": "2018-04-19T07:07:54Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA==", "fields": {"body": "cli -> CLI", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with", "created_at": "2018-04-19T07:25:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ==", "fields": {"body": "new paragraph for \"It ...\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages", "created_at": "2018-04-19T07:25:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA==", "fields": {"body": "\"fire up\" -> \"execute\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's", "created_at": "2018-04-19T07:27:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA==", "fields": {"body": "shouldnt editing .coafile be done before running coala?", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's\n+root:\n+\n+::\n+\n+    $ coala\n+\n+You can also open the .coafile in your favorite editor and edit the settings", "created_at": "2018-04-19T07:27:28Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA==", "fields": {"body": "you add the clone, cd and then pip install . method for latest development version", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+", "created_at": "2018-04-19T07:32:45Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyMjkyMg==", "fields": {"body": "We do not need this comment repeated everywhere.  The code is ridiculously simple and obvious.", "diff": "@@ -24,8 +44,61 @@ def get_index():\n     return None\n \n \n-urlpatterns = [\n+def get_all_contributors():\n+    # This function needs to return an iterable of dictionaries. Dictionaries", "created_at": "2018-04-19T03:02:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyNDMwOA==", "fields": {"body": "the base layout of these html pages should be one template that other the other templates re-use", "diff": "@@ -0,0 +1,24 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">", "created_at": "2018-04-19T03:16:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjAzNQ==", "fields": {"body": "Actually it 'gets` included somehow (not gone that much in the implementation detail of IGitt issue but) see this PR coala/coala#3806 make irritated me at that time.\nJohn closed this 3 days algo but previously it was in the list of output.", "diff": "@@ -0,0 +1,37 @@\n+import json\n+\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+from IGitt.GitHub import GitHubToken\n+from IGitt.GitHub.GitHubRepository import GitHubRepository\n+\n+from community.git import get_org_name\n+\n+\n+def run(mr_requests):\n+    issues_number_list = []\n+    for pr in mr_requests:\n+        if pr.state._name_ == 'OPEN':\n+            for commit in pr.commits:\n+                mystatus = commit.combined_status._name_\n+                break\n+            if mystatus == 'SUCCESS' or mystatus == 'PENDING':\n+                for issue in pr.closes_issues:\n+                    if str(pr.number) != issue.number:", "created_at": "2018-04-22T05:41:05Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjUzOA==", "fields": {"body": "Yeah, that's what I was telling \ud83d\ude04 , file an issue there.", "diff": "@@ -0,0 +1,37 @@\n+import json\n+\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+from IGitt.GitHub import GitHubToken\n+from IGitt.GitHub.GitHubRepository import GitHubRepository\n+\n+from community.git import get_org_name\n+\n+\n+def run(mr_requests):\n+    issues_number_list = []\n+    for pr in mr_requests:\n+        if pr.state._name_ == 'OPEN':\n+            for commit in pr.commits:\n+                mystatus = commit.combined_status._name_\n+                break\n+            if mystatus == 'SUCCESS' or mystatus == 'PENDING':\n+                for issue in pr.closes_issues:\n+                    if str(pr.number) != issue.number:", "created_at": "2018-04-22T06:14:57Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjYyMQ==", "fields": {"body": "one more problem is there \ud83d\ude05  issue.number is not int check this https://github.com/coala/community/pull/128/files#diff-04e5b4c73d360e0cd6a4955ddd3b2998R20", "diff": "@@ -0,0 +1,37 @@\n+import json\n+\n+from django.http import HttpResponse\n+from gci.config import get_api_key\n+from IGitt.GitHub import GitHubToken\n+from IGitt.GitHub.GitHubRepository import GitHubRepository\n+\n+from community.git import get_org_name\n+\n+\n+def run(mr_requests):\n+    issues_number_list = []\n+    for pr in mr_requests:\n+        if pr.state._name_ == 'OPEN':\n+            for commit in pr.commits:\n+                mystatus = commit.combined_status._name_\n+                break\n+            if mystatus == 'SUCCESS' or mystatus == 'PENDING':\n+                for issue in pr.closes_issues:\n+                    if str(pr.number) != issue.number:", "created_at": "2018-04-22T06:20:26Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg==", "fields": {"body": "@manankalra Looks good. \ud83d\udc4d\nI also agree with you that adding \"on_success: never\" should be there as well. Gitmate automatically approves the PR if all CI passes, so there should ideally be no message in that case. \ud83d\ude04", "diff": "@@ -11,6 +11,7 @@ script:\n \n notifications:\n   email: false\n+  webhooks: https://www.travisbuddy.com/", "created_at": "2018-04-24T04:40:15Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNjg3NQ==", "fields": {"body": "Just a thought, so github also provides confused, laugh, heart and tada emojis. We can use the confused to find out if the comments are descriptive enough.\nFor example a common advice given to a newcomer PR is to follow coala guidelines for commit and amend the commit message.\nNow there are various ways in which reviewers can express this, some can be descriptive enough, some can be very descriptive with links and stuff, also some can be non descriptive comprising of our internal workflow lingo and hence non newcomer friendly. So maybe this is one of instances where we can exploit the confused emoji.", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.", "created_at": "2018-04-26T08:58:21Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNzU4OA==", "fields": {"body": "So I'd suggest that during this phase,\n\nwe can make some mockups for the frontend you can get feedback\nget acquainted with css designing a bit (materialize css) and data viz library like d3 (?)", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and analyzed. By tracking reactions, a nice feedback loop would be created for both senior and junior reviewers. Also, this information can be used as newcomer metrics.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be tracked and handled.", "created_at": "2018-04-26T09:00:44Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzMzgzMQ==", "fields": {"body": "is this a mistype in THUMBS_UP and THUMBS_DOWN (should be B instead of P)?", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.", "created_at": "2018-04-26T09:57:06Z", "last_edited_at": null, "author": "alisianoi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ==", "fields": {"body": "Also fix coala/gh-board#13 ?\nSee coala/gh-board#10 (comment)\nWe're currently running the app on the browser on CI to fetch the issues from coala repositories and that isn't the most elegant thing https://github.com/coala/gh-board/blob/master/script/fetch-issues.js\nI believe that'll help you in the long run.\nAlso see the React code a bit, you'll notice that it's still using React.createClass which is deprecated, a small refactor to convert that into class component would be nice, and while we're at it might as well upgrade it to React v16.3 and further remove all the deprecations. But, I think all the refactoring is quite big, and not that really important/necessary for achieving this project. It is up to you.", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and analyzed. By tracking reactions, a nice feedback loop would be created for both senior and junior reviewers. Also, this information can be used as newcomer metrics.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be tracked and handled.", "created_at": "2018-04-26T10:00:14Z", "last_edited_at": "2018-04-26T10:00:28Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNTczMA==", "fields": {"body": "The refactoring will help you get familiar with the project and React in general (if you haven't already).", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and analyzed. By tracking reactions, a nice feedback loop would be created for both senior and junior reviewers. Also, this information can be used as newcomer metrics.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be tracked and handled.", "created_at": "2018-04-26T10:04:10Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDU2MTkwNQ==", "fields": {"body": "Note that this project is also about encouraging people to do meta-review of PR comments, systematically.\nCurrently, we do not do this systematically, or even occasionally.  emoji use is currently hap-hazard, and probably the currently implied meaning of :+1: is \"OK, I will do this\", not \"I agree\"+\"I found your communication style appropriate\".\nThis actually presents a problem for gh-board, as its UI is currently centric to the issue/PR, and it does not display issue comments. The granularity of gh-board is wrong.  How then do we use gh-board to show which PR reviews have not been meta-reviewed yet.  Worst case is that the tracking stores in the json which PR do not have meta-reviews, and gh-board shows only a list of those PRs (and the user must then find the reviews in GitHub PR webapp, and do meta-review there).  An improvement is to store the identifier of the PR comments which do not have meta-reviews, and gh-board links to the PR review comment in GitHub PR webapp.  In the ultimate version, gh-board would show the review comments.", "diff": "@@ -0,0 +1,57 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks and provides meaningful analysis of reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch merged to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to a meta-moderation system that can track emoji responses to review comments. These responses are to be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.", "created_at": "2018-04-26T23:54:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDY3NTQ1NA==", "fields": {"body": "I've been thinking, maybe \"Modernize existing React component code in gh-board project\" makes it more clear here.", "diff": "@@ -0,0 +1,95 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks and provides meaningful analysis of reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch merged to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and JavaScript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The meta-review project is about building a meta-review system,\n+similar to a meta-moderation system, that can track emoji responses to\n+review comments. These responses are to be collected, processed and displayed\n+on [gh-board][https://github.com/coala/gh-board], which is a nice serverless\n+kanban board.\n+\n+People including the author of pull request respond to comments by attaching\n+emojis. Those emojis are called meta-review, or\n+[reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMBS_UP\n+and THUMBS_DOWN, together with other reactions, are used by people especially\n+the author of pull request to publicly acknowledge or reject review comments.\n+This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and\n+analyzed. By tracking reactions, a nice feedback loop would be created\n+for both senior and junior reviewers. Also, this information can be used\n+as newcomer metrics.\n+\n+One goal of this project is to encourage people to do meta-reviews,\n+systematically. Worst case is that the tracking stores in the json which\n+PR do not have meta-reviews, and gh-board shows only a list of those PRs\n+(and the user must then find the reviews in GitHub PR webapp, and do\n+meta-review there). An improvement is to store the identifier of the PR\n+comments which do not have meta-reviews, and gh-board links to the PR\n+review comment in GitHub PR webapp. In the ultimate version, gh-board\n+would show the review comments.\n+\n+Also, to encourage people to do more meta-reviews, statistics of meta-reviews\n+are to be collected and analysed. People who do meta-reviews will get scores\n+according to some metrics. A ranking list is to be displayed on gh-board.\n+\n+The scope of this project would exclude non-public meta-reviews. That is,\n+there would not be any anonymous meta-reviews as that introduces too many\n+additional complexities. The public only version would be used for\n+long time before adding support for non-public meta-reviews.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be\n+  tracked and handled.\n+- The applicant has created mockups for the frontend.\n+- The applicant gets acquainted with materialize CSS.\n+- The applicant gets acquainted with data visualization\n+  library (e.g. d3.js).\n+- The applicant gets\n+  [gh-board#13][https://github.com/coala/gh-board/issues/13] fixed.\n+- The applicant refactors React code a bit.", "created_at": "2018-04-27T12:42:20Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA==", "fields": {"body": "umm, https://raivaibhav.github.io./GSoC.xml or  https://raivaibhav.github.io/GSoC.xml", "diff": "@@ -125,3 +125,6 @@ name = Saksham Bansal\n \n [https://charlieyang.me/feed_gsoc.xml]\n name = Guangyuan Yang\n+\n+[https://raivaibhav.github.io./GSoC.xml]", "created_at": "2018-05-10T20:24:53Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUxODc4Mg==", "fields": {"body": "gracefully documented :) \ud83d\udc4d", "diff": "@@ -0,0 +1,77 @@\n+---\n+name: \"Automate Whitelist creation for vulture\"\n+collaborating_projects:\n+  - coala\n+  - vulture\n+desc: \"Automatically create whitelists and detect falsely positive results for vulture.\"\n+developers_involved:\n+  - RJ722\n+mentors:\n+  - AbdealiJK\n+  - jendrikseipp\n+  - The-Compiler\n+difficulty: medium\n+status: in_progress\n+initiatives:\n+  - GSoC\n+issues: []\n+markdown: automate_vulture_whitelist.md\n+requirements:\n+  - \"Familiarity with vulture and how whitelists work.\"\n+tags:\n+  - Vulture\n+  - AST\n+  - coverage\n+---\n+\n+The aim of this project is to automatically create whitelists (to be utilized by\n+[vulture](https://github.com/jendrikseipp/vulture)) for projects using sip files to\n+communicate between C++ level API and Python programs, most significant of them being\n+PyQt projects.\n+\n+#### IDEAS\n+\n+* Create a script which takes sip files as input and spits a whitelist with all\n+  the virtual functions defined in the sip files. (Add Documentation and tests)\n+* Use that script for generating a whitelist for popular projects using PyQt\n+  (like [qutebrowser](https://github.com/qutebrowser/qutebrowser)).\n+* Allow passing coverage.xml to vulture via `--make-whitelist` and let it find\n+  the list of false-positive functions. (Add Documentation and tests as well)\n+* Write a whitelist generator for shiboken, the binding\n+  generator used for PySide2\n+\n+#### MILESTONES\n+\n+##### COMMUNITY BONDING\n+* Discussion on whether to implement a new Tracer or to directly consume `xml`\n+  output from coverage.py\n+* Get familiar with coverage.xml\n+* Take up small tasks from\n+  [TODO](https://github.com/jendrikseipp/vulture/tree/master/TODO.rst)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28)\n+\n+##### CODING PHASE 1\n+* The script for creating a whitelist from sip files should be implemented.\n+* It should reside in it's own repository, with CI enabled for testing on both\n+  the GNU/Linux and Windows platforms.\n+* It should be gracefully documented.", "created_at": "2018-05-11T04:38:49Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4OTU3NA==", "fields": {"body": "Split into two items:\n\nMaintain 100% test code coverage.\nUpdate documentation for the whitelist generator", "diff": "@@ -0,0 +1,78 @@\n+---\n+name: \"Automate Whitelist creation for vulture\"\n+collaborating_projects:\n+  - coala\n+  - vulture\n+desc: \"Automatically create whitelists and detect false positives for vulture.\"\n+developers_involved:\n+  - RJ722\n+mentors:\n+  - AbdealiJK\n+  - jendrikseipp\n+  - The-Compiler\n+difficulty: medium\n+status: in_progress\n+initiatives:\n+  - GSoC\n+issues: []\n+markdown: automate_vulture_whitelist.md\n+requirements:\n+  - \"Familiarity with vulture and how whitelists work.\"\n+tags:\n+  - Vulture\n+  - AST\n+  - coverage\n+---\n+\n+The aim of this project is to automatically create whitelists (to be utilized\n+by [vulture](https://github.com/jendrikseipp/vulture)) for projects using sip\n+files to communicate between C++ level API and Python programs, most\n+significant of them being PyQt projects.\n+\n+#### IDEAS\n+\n+* Create a script which takes sip files as input and spits a whitelist with all\n+  the virtual functions defined in the sip files. (Add Documentation and tests)\n+* Use that script for generating a whitelist for popular projects using PyQt\n+  (like [qutebrowser](https://github.com/qutebrowser/qutebrowser)).\n+* Allow passing coverage.xml to vulture via `--make-whitelist` and let it find\n+  the list of false-positive functions. (Add Documentation and tests as well)\n+* Write a whitelist generator for shiboken, the binding\n+  generator used for PySide2\n+\n+#### MILESTONES\n+\n+##### COMMUNITY BONDING\n+* Discussion on whether to implement a new Tracer or to directly consume `xml`\n+  output from coverage.py\n+* Get familiar with coverage.xml\n+* Take up small tasks from\n+  [TODO](https://github.com/jendrikseipp/vulture/tree/master/TODO.rst)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28)\n+\n+##### CODING PHASE 1\n+* The script for creating a whitelist from sip files should be implemented.\n+* It should reside in it's own repository, with CI enabled for testing on both\n+  the GNU/Linux and Windows platforms.\n+* It should be gracefully documented.\n+* Use this script to create a whitelist for\n+  [qutebrowser](https://github.com/qutebrowser/qutebrowser).\n+* Look at methods to increase coverage for vulture from it's already excellent\n+  95%+ coverage.\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29)\n+\n+##### CODING PHASE 2\n+* `--make-whitelist`: Vulture should be able to find a list of false positives\n+  (for functions and methods) from `coverage.xml`.\n+* Maintain code coverage, robust tests should be written.\n+* Add documentation, how-to, examples and use cases in\n+  [README](https://github.com/jendrikseipp/vulture/tree/master/README.rst).\n+* Research and planning about how to generate whitelists for\n+  [`shiboken`](https://pypi.org/project/Shiboken/)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30)\n+\n+##### CODING PHASE 3\n+* Implement whitelist generator for\n+  [`shiboken`](https://pypi.org/project/Shiboken/).\n+* Add tests and documentation for the generator.", "created_at": "2018-05-13T05:49:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc5MzU0NQ==", "fields": {"body": "I expect that this means that in milestone 1 you are supplying a PR to qutebrowser which replaces their whitelist generator with your own.\n\nThat whitelist generator would still need to stay, because it has many things in it which are qutebrowser specific. What it'd replace is the current horrible heuristic which ignores any functions which have a capital letter in them (because Qt/PyQt use camelCase for methods).", "diff": "@@ -0,0 +1,78 @@\n+---\n+name: \"Automate Whitelist creation for vulture\"\n+collaborating_projects:\n+  - coala\n+  - vulture\n+desc: \"Automatically create whitelists and detect false positives for vulture.\"\n+developers_involved:\n+  - RJ722\n+mentors:\n+  - AbdealiJK\n+  - jendrikseipp\n+  - The-Compiler\n+difficulty: medium\n+status: in_progress\n+initiatives:\n+  - GSoC\n+issues: []\n+markdown: automate_vulture_whitelist.md\n+requirements:\n+  - \"Familiarity with vulture and how whitelists work.\"\n+tags:\n+  - Vulture\n+  - AST\n+  - coverage\n+---\n+\n+The aim of this project is to automatically create whitelists (to be utilized\n+by [vulture](https://github.com/jendrikseipp/vulture)) for projects using sip\n+files to communicate between C++ level API and Python programs, most\n+significant of them being PyQt projects.\n+\n+#### IDEAS\n+\n+* Create a script which takes sip files as input and spits a whitelist with all\n+  the virtual functions defined in the sip files. (Add Documentation and tests)\n+* Use that script for generating a whitelist for popular projects using PyQt\n+  (like [qutebrowser](https://github.com/qutebrowser/qutebrowser)).\n+* Allow passing coverage.xml to vulture via `--make-whitelist` and let it find\n+  the list of false-positive functions. (Add Documentation and tests as well)\n+* Write a whitelist generator for shiboken, the binding\n+  generator used for PySide2\n+\n+#### MILESTONES\n+\n+##### COMMUNITY BONDING\n+* Discussion on whether to implement a new Tracer or to directly consume `xml`\n+  output from coverage.py\n+* Get familiar with coverage.xml\n+* Take up small tasks from\n+  [TODO](https://github.com/jendrikseipp/vulture/tree/master/TODO.rst)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28)\n+\n+##### CODING PHASE 1\n+* The script for creating a whitelist from sip files should be implemented.", "created_at": "2018-05-13T09:00:50Z", "last_edited_at": null, "author": "The-Compiler", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNzMyOQ==", "fields": {"body": "break lines at 80cpl.\npossibly convert this to a sub-list.", "diff": "@@ -44,15 +44,16 @@ We have a state-of-art implementation in\n for VS Code only. We need to design and implement a general mechanism for\n multiple editors/IDEs support.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n 1. Offer a basic languager server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- Support at least 'textDocument/didOpen', 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.", "created_at": "2018-05-13T17:01:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzkyNjYzOA==", "fields": {"body": "Replace 'basic' with a reference to the request types mentioned in features.", "diff": "@@ -61,29 +69,41 @@ The project is divided into two parts:\n \n - Design documentation about the language server exists.\n   - Architecture of the language server\n-  - Mechanism to support multiple languages.\n+  - Mechanism to support multiple languages and requests.\n \n ##### CODING PHASE 1\n \n - A basic language server for coala exists.\n   - Support linting for python.\n-- Basic test suite exists.\n+  - Supports basic request types:\n+    - 'textDocument/didSave'\n+    - 'textDocument/publishDiagnostics'\n+- Test suite exists with 100% coverage.\n - Basic Documentation exists including asciinema showing the\n   functionality working in any LS editor client.\n+- Performance metrics of the standalone language server against\n+  basic request types exist.", "created_at": "2018-05-14T12:02:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODI5NTQ4MA==", "fields": {"body": "Generally, agree with @ksdme.", "diff": "@@ -42,17 +42,25 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of", "created_at": "2018-05-15T13:54:07Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODUxMTU0MQ==", "fields": {"body": "also indicate that this project needs to do performance metrics using a few different types of usage, e.g. using various .coafile, especially an isolated perf run which has one a python GlobalBear, to see how it performs.\nI suspect global bears are going to be a large headache for this project.", "diff": "@@ -42,48 +42,86 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n 1. Offer a basic languager server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n - Design documentation about the language server exists.\n   - Architecture of the language server\n-  - Mechanism to support multiple languages.\n+  - Mechanism to support multiple languages and requests.\n \n ##### CODING PHASE 1\n \n - A basic language server for coala exists.\n   - Support linting for python.\n-- Basic test suite exists.\n-- Basic Documentation exists including asciinema showing the\n+  - Supports primary request types:\n+    - 'textDocument/didOpen'\n+    - 'textDocument/didSave'\n+    - 'textDocument/didClose'\n+    - 'textDocument/publishDiagnostics'\n+- Test suite exists with 100% coverage.\n+- Basic Documentation exists including video showing the\n   functionality working in any LS editor client.\n+- Performance metrics of the standalone language server against\n+  all the primary request types exist.", "created_at": "2018-05-16T06:10:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA1NDU4MA==", "fields": {"body": "This project isn't part of RGSoC afaik.", "diff": "@@ -0,0 +1,57 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Explore improvements to coala's dependency management through having Go Linter installed in *BSD system automatially.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+  - RGSoC", "created_at": "2018-05-17T18:18:23Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4NjEwMw==", "fields": {"body": "Some bears in coala are long running and some run on entire projects (GlobalBears or ProjectBears). By filtering the coala configuration at runtime and only allowing the certain sections of the configuration to run which are logical to the request type performance can be massively improved. The first two ideas can help with this by allowing a global blacklist for bears not to run in response to some particular request type and by allowing custom configuration of the bears per request type basis in the coafile.\nA custom entry point into coala refers to the idea of having a custom pipeline into coala. This way we could prevent the overhead by preprocessing the configuration files, gathering the bears, checking for dependencies and then initializing them. The entire setup can then be reused for subsequent calls.", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n+\n+#### Interface Optimizations\n+\n+The current implementation suffers from massive performance\n+problems. This is primarily due to the mode in which lang\n+server interacts with coala. Currently it works by executing\n+coala via cli and redirecting stdout to language server. This\n+is not an efficient mechanism because of all the involved overhead.\n+This projects aims to provide a practical language server with\n+performance improvements. Some ideas currently under consideration\n+to achieve the said improvements are:\n+\n+  - Runtime coala configurations\n+  - Language Server specific parameters in coafiles\n+  - Custom entry point into coala", "created_at": "2018-05-18T07:40:55Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4Nzc0OA==", "fields": {"body": "Yes, support for multiple languages is more about configuring the clients to handle multiple file types. coala Language Server only depends on the coafile configuration to handle it. I do not think there should be any significant problem with the server.", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n+\n+#### Interface Optimizations\n+\n+The current implementation suffers from massive performance\n+problems. This is primarily due to the mode in which lang\n+server interacts with coala. Currently it works by executing\n+coala via cli and redirecting stdout to language server. This\n+is not an efficient mechanism because of all the involved overhead.\n+This projects aims to provide a practical language server with\n+performance improvements. Some ideas currently under consideration\n+to achieve the said improvements are:\n+\n+  - Runtime coala configurations\n+  - Language Server specific parameters in coafiles\n+  - Custom entry point into coala\n+\n+Specific details about each method will be expanded upon\n+once they are discussed with the community.\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n - Design documentation about the language server exists.\n-  - Architecture of the language server\n-  - Mechanism to support multiple languages.\n+  - Architecture of the language server.\n+  - Mechanism to support multiple languages and requests.", "created_at": "2018-05-18T07:48:43Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNDgwMw==", "fields": {"body": "This is textDocument/formatting not workspace", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'", "created_at": "2018-05-17T22:03:26Z", "last_edited_at": null, "author": "gatesn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTA2Mw==", "fields": {"body": "Might be worth being explicit about support for initialize, shutdown and exit", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'", "created_at": "2018-05-17T22:04:52Z", "last_edited_at": null, "author": "gatesn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTE0Mw==", "fields": {"body": "lang server -> the language server", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n+\n+#### Interface Optimizations\n+\n+The current implementation suffers from massive performance\n+problems. This is primarily due to the mode in which lang", "created_at": "2018-05-17T22:05:19Z", "last_edited_at": null, "author": "gatesn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTMzODg5Nw==", "fields": {"body": "These changes depend on the cEP being accepted.", "diff": "@@ -40,10 +43,12 @@ this greatly improved coala's startup speed.\n Performance is key to usability - with faster runtimes, users can get on\n with their work quicker. And it's fun looking for performance bottlenecks!\n \n-In this project, you're to improve on the current strategies. Some enhancements\n-such as section-level caching, globbing improvements to not expand on\n-unmodified directories, and others have been preliminarily explored. Please\n-refer to the related issues to learn more about these.\n+In this project, you're to come up with improved versions of the current caching\n+strategies used by coala's core and integrate these with the NextGen-Core.\n+Some enhancements such as ignoring unmodified directories and use of\n+`FileFactory` and `Directory` classes have been already explored and are to be", "created_at": "2018-05-18T17:25:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTc3Mzk4NA==", "fields": {"body": "Could you consider renaming id to identifier ? id would interfere with python's built-in function.", "diff": "@@ -0,0 +1,77 @@\n+from django.db import models\n+\n+\n+class Participant(models.Model):\n+    login = models.TextField(default=None, primary_key=True)\n+    name = models.TextField(default=None, null=True)\n+    score = models.FloatField(default=0, null=True)\n+    rank = models.IntegerField(default=None, null=True)\n+\n+    # ranking trend compared to last iteration\n+    trend = models.IntegerField(default=None, null=True)\n+\n+    # time of latest action\n+    last_active_at = models.DateTimeField(default=None, null=True)\n+\n+    # number of positive reactions received\n+    pos_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted positive reactions received\n+    weighted_pos_in = models.FloatField(default=0, null=True)\n+\n+    # number of positive reactions give away\n+    pos_out = models.IntegerField(default=0, null=True)\n+\n+    # number of negative reactions received\n+    neg_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted negative reactions received\n+    weighted_neg_in = models.FloatField(default=0, null=True)\n+\n+    # number of negative reactions give away\n+    neg_out = models.IntegerField(default=0, null=True)\n+\n+    # punishment points\n+    punishment = models.FloatField(default=0, null=True)\n+\n+    # weight factor\n+    weight_factor = models.FloatField(default=0.1, null=True)\n+\n+    def __str__(self):\n+        return 'Meta-reviewer: ' + self.login\n+\n+    class Meta:\n+        ordering = ['rank']\n+\n+\n+class Comment(models.Model):\n+    id = models.TextField(default=None, primary_key=True)", "created_at": "2018-05-22T04:19:07Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDU5OTI4NA==", "fields": {"body": "I believe this partially lies in @nemaniarjun 's project scope which is to implement Repology as a service. What I'd like to do is to make use of the infrastructure provided by that project and specifically implement and ensure the dependencies required for my project has correct data from Repology.", "diff": "@@ -0,0 +1,102 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Explore improvements to coala's dependency management through having Go Linters installed in *BSD systems automatically.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://gitlab.com/coala/package_manager/issues/149\"\n+  - \"https://github.com/coala/coala-bears/issues/2481\"\n+markdown: go_bears_on_bsd.md\n+mentors:\n+  - xferra\n+  - yukiisbored\n+name: \"Linter Dependency Management from a Bare-Metal System\"\n+requirements:\n+  - \"At least one patch to the coala core should be accepted and merged.\"\n+  - \"The proposal needs to show familiarity with coala's dependency management implementation.\"\n+status: in_progress\n+tags:\n+  - Automation\n+  - Installation\n+  - Dependency\n+---\n+\n+`coala-bears` are of two types, Native Bears which implement all the business\n+logic themselves and Linter Bears which wrap existing linters and checkers.\n+Dependencies of bears are mostly language runtimes, language-specific packages\n+(e.g. python:nltk) or command line tools (e.g. git). Both Native Bears and\n+Linter Bears have dependencies which need to be installed before they can be\n+executed.\n+\n+`dependency_management` aims to provide Python APIs for dependency management on\n+various languages and different systems. It is used extensively by coala,\n+however, it lacks most of the key implementation and documentation in its\n+current state.\n+\n+coala now has [several bears written in\n+Go](https://github.com/coala/coala-bears/search?q=GoRequirement), [7 of\n+which](https://github.com/coala/coala-bears/blob/master/bears/go/) are for\n+validating Go files. They need specific versions of Go and some externally\n+supplied packages, and currently Go linter bears just assume they are all in\n+place and work. Go language dependencies are currently managed unversioned in\n+coala-bears. There is no official way provided for versioning, and though there\n+are other commonly used mechanisms for installing specific versions of Go repos,\n+a lot more investigation is needed.\n+\n+The end goal is to be able to bootstrap and recursively install all dependencies\n+on any systems without anything installed other than a base system, but the\n+scope of a complete solution is too large. A proposal has been made with\n+suitable scope, which is to automate the installation of Go linter bears onto\n+bare-metal BSDs.\n+\n+Features will mainly be implemented to coala's `dependency_management`. It\n+should be able to operate system and language-specific package managers to\n+handle dependencies. It should also resolve package names and versions\n+automatically using Repology on multiple operating systems.", "created_at": "2018-05-24T14:07:39Z", "last_edited_at": null, "author": "yzgyyang", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA1MzEwMQ==", "fields": {"body": "Nice job on adding the comments!", "diff": "@@ -0,0 +1,77 @@\n+from django.db import models\n+\n+\n+class Participant(models.Model):\n+    login = models.TextField(default=None, primary_key=True)\n+    name = models.TextField(default=None, null=True)\n+    score = models.FloatField(default=0, null=True)\n+    rank = models.IntegerField(default=None, null=True)\n+\n+    # ranking trend compared to last iteration\n+    trend = models.IntegerField(default=None, null=True)\n+\n+    # time of latest action\n+    last_active_at = models.DateTimeField(default=None, null=True)\n+\n+    # number of positive reactions received\n+    pos_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted positive reactions received\n+    weighted_pos_in = models.FloatField(default=0, null=True)\n+\n+    # number of positive reactions give away\n+    pos_out = models.IntegerField(default=0, null=True)\n+\n+    # number of negative reactions received\n+    neg_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted negative reactions received\n+    weighted_neg_in = models.FloatField(default=0, null=True)\n+\n+    # number of negative reactions give away\n+    neg_out = models.IntegerField(default=0, null=True)\n+\n+    # punishment points\n+    punishment = models.FloatField(default=0, null=True)\n+\n+    # weight factor\n+    weight_factor = models.FloatField(default=0.1, null=True)\n+", "created_at": "2018-05-26T16:22:54Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0MDk3OA==", "fields": {"body": "snake_case is a bit unusual for url.", "diff": "@@ -127,6 +128,12 @@ def get_organization():\n         distill_func=get_index,\n         distill_file='contributors/index.html',\n     ),\n+    distill_url(\n+        r'meta-review/$', meta_review_index,", "created_at": "2018-05-29T14:16:09Z", "last_edited_at": "2018-05-29T14:20:52Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0ODc2Ng==", "fields": {"body": "I would like to hear more voice.\nI have thought it for a while and tried finding some evidence to support my original idea. I did find some, very weak though.\nAs https://docs.djangoproject.com/en/2.0/topics/db/models/#automatic-primary-key-fields points out,\nBy default, Django gives each model the following field:\n\nid = models.AutoField(primary_key=True)\n\nAlso, from https://github.com/django/django/blob/f1f4aeb22e7bc9b504f69f7cb111ac9bdedb5f1e/django/db/models/base.py#L1298-L1312 we can see that they allow the usage of id field as long as it has primary_key=True", "diff": "@@ -0,0 +1,77 @@\n+from django.db import models\n+\n+\n+class Participant(models.Model):\n+    login = models.TextField(default=None, primary_key=True)\n+    name = models.TextField(default=None, null=True)\n+    score = models.FloatField(default=0, null=True)\n+    rank = models.IntegerField(default=None, null=True)\n+\n+    # ranking trend compared to last iteration\n+    trend = models.IntegerField(default=None, null=True)\n+\n+    # time of latest action\n+    last_active_at = models.DateTimeField(default=None, null=True)\n+\n+    # number of positive reactions received\n+    pos_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted positive reactions received\n+    weighted_pos_in = models.FloatField(default=0, null=True)\n+\n+    # number of positive reactions give away\n+    pos_out = models.IntegerField(default=0, null=True)\n+\n+    # number of negative reactions received\n+    neg_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted negative reactions received\n+    weighted_neg_in = models.FloatField(default=0, null=True)\n+\n+    # number of negative reactions give away\n+    neg_out = models.IntegerField(default=0, null=True)\n+\n+    # punishment points\n+    punishment = models.FloatField(default=0, null=True)\n+\n+    # weight factor\n+    weight_factor = models.FloatField(default=0.1, null=True)\n+\n+    def __str__(self):\n+        return 'Meta-reviewer: ' + self.login\n+\n+    class Meta:\n+        ordering = ['rank']\n+\n+\n+class Comment(models.Model):\n+    id = models.TextField(default=None, primary_key=True)", "created_at": "2018-05-29T14:35:23Z", "last_edited_at": "2018-05-29T14:35:39Z", "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ1MDUxMg==", "fields": {"body": "Nope, it doesn't cause any error \ud83d\ude1b The name of template passed in to render method doesn't matter, as long as there is a corresponding file under template directory.\nIn this case, since templates/meta_review.html exists, return render(request, 'meta_review.html', args) is fine.", "diff": "@@ -0,0 +1,15 @@\n+from meta_review.models import Participant\n+from django.shortcuts import render\n+from django.db.models import Q\n+\n+\n+def index(request):\n+    participants = Participant.objects.all().exclude(\n+        Q(pos_in=0),\n+        Q(neg_in=0),\n+        Q(pos_out=0),\n+        Q(neg_out=0),\n+        Q(punishment=0)\n+    )\n+    args = {'participants': participants}\n+    return render(request, 'meta_review.html', args)", "created_at": "2018-05-29T14:39:34Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQzNTEzNw==", "fields": {"body": "meta_review_data, maybe? :)", "diff": "@@ -127,6 +128,12 @@ def get_organization():\n         distill_func=get_index,\n         distill_file='contributors/index.html',\n     ),\n+    distill_url(\n+        r'meta-review/$', meta_review_index,\n+        name='meta-review-data',", "created_at": "2018-05-29T14:01:12Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTUyMzYyMw==", "fields": {"body": "Yeah, I've been naming the PK id for a long while and it doesn't create any issues. As @li-boxuan posted from django docs that Django by default creates the PK as id when we don't specify a model field to be PK.", "diff": "@@ -0,0 +1,77 @@\n+from django.db import models\n+\n+\n+class Participant(models.Model):\n+    login = models.TextField(default=None, primary_key=True)\n+    name = models.TextField(default=None, null=True)\n+    score = models.FloatField(default=0, null=True)\n+    rank = models.IntegerField(default=None, null=True)\n+\n+    # ranking trend compared to last iteration\n+    trend = models.IntegerField(default=None, null=True)\n+\n+    # time of latest action\n+    last_active_at = models.DateTimeField(default=None, null=True)\n+\n+    # number of positive reactions received\n+    pos_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted positive reactions received\n+    weighted_pos_in = models.FloatField(default=0, null=True)\n+\n+    # number of positive reactions give away\n+    pos_out = models.IntegerField(default=0, null=True)\n+\n+    # number of negative reactions received\n+    neg_in = models.IntegerField(default=0, null=True)\n+\n+    # weighted negative reactions received\n+    weighted_neg_in = models.FloatField(default=0, null=True)\n+\n+    # number of negative reactions give away\n+    neg_out = models.IntegerField(default=0, null=True)\n+\n+    # punishment points\n+    punishment = models.FloatField(default=0, null=True)\n+\n+    # weight factor\n+    weight_factor = models.FloatField(default=0.1, null=True)\n+\n+    def __str__(self):\n+        return 'Meta-reviewer: ' + self.login\n+\n+    class Meta:\n+        ordering = ['rank']\n+\n+\n+class Comment(models.Model):\n+    id = models.TextField(default=None, primary_key=True)", "created_at": "2018-05-29T18:16:38Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTY1MzAwOQ==", "fields": {"body": "I see that you created another Model called Team in https://gitlab.com/coala/landing/blob/86203d6a9b5b840bc851804858744a4281240286/backend/org/models.py and use teams = models.ManyToManyField(Team) in Contributor model. Is there any reason for the use of JSONField here?", "diff": "@@ -8,6 +10,7 @@ class Contributor(models.Model):\n     num_commits = models.IntegerField(default=None, null=True)\n     reviews = models.IntegerField(default=None, null=True)\n     issues_opened = models.IntegerField(default=None, null=True)\n+    teams = JSONField(default=None, null=True)", "created_at": "2018-05-30T06:21:27Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTY1NDI5OQ==", "fields": {"body": "Is there any reason for the use of JSONField here?\n\nActually, I was using JSONField there; But, yesterday I update that to ManyToManyField, and I still have to update it here.\nWaiting for that to be merged anyway; Could you please review that one :)", "diff": "@@ -8,6 +10,7 @@ class Contributor(models.Model):\n     num_commits = models.IntegerField(default=None, null=True)\n     reviews = models.IntegerField(default=None, null=True)\n     issues_opened = models.IntegerField(default=None, null=True)\n+    teams = JSONField(default=None, null=True)", "created_at": "2018-05-30T06:29:03Z", "last_edited_at": "2018-05-30T06:29:16Z", "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NTc2OA==", "fields": {"body": "Nice catch!", "diff": "@@ -22,19 +22,19 @@ tags:\n   - community\n   - web\n ---\n-The basic idea is an extended version of [GSOC Task List](http://github.com/summerofcode/gsoc-prep-tasks).\n+The basic idea is an extended version of [GSOC Task List](https://github.com/coala/git-task-list)", "created_at": "2018-06-02T10:02:36Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5NTA2Ng==", "fields": {"body": "Okay with me", "diff": "@@ -1,25 +1,29 @@\n ---\n collaborating_projects:\n   - coala\n-desc: \"Improve coala's performance by improving file caching and other performance bottlenecks.\"\n+desc: \"Improve coala's performance by improving file loading using factory\n+      classes and other performance bottlenecks.\"\n difficulty: medium\n initiatives:\n   - GSoC\n   - RGSoC\n issues:\n-  - \"https://github.com/coala/coala/issues/2541\"\n-  - \"https://github.com/coala/coala/issues/2699\"\n+  - \"https://github.com/coala/coala/issues/3530\"\n   - \"https://github.com/coala/coala/issues/2912\"\n+  - \"https://github.com/coala/coala/issues/2541\"", "created_at": "2018-06-05T19:35:34Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzEwOTc5MQ==", "fields": {"body": "Then dont run moban.  :P  It does give a semi-decent error message.\nfyi this is what we have done for coala & coala-bears.  .travis.yml clones https://gitlab.com/coala/mobans to that location.\nMedium term goal is for moban to manage these dependencies moremoban/moban#35 .  The logic has mostly been written in yehua (https://github.com/moremoban/yehua/blob/master/yehua/project.py#L29)", "diff": "@@ -0,0 +1,15 @@\n+overrides: coala.yaml\n+\n+language: ruby\n+gitignore_language: Jekyll\n+gitignore_extra_rulesets:\n+  - GitBook\n+\n+configuration:\n+  template_dir:\n+    - ../coala-mobans/templates/\n+    - ../coala-mobans/assets/", "created_at": "2018-06-05T15:09:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzY2OTM5Ng==", "fields": {"body": "postagged -> pos_tagged maybe?", "diff": "@@ -0,0 +1,66 @@\n+import yaml\n+\n+\n+class DictionaryTagger(object):\n+    def __init__(self, dictionary_paths):\n+        files = [open(path, 'r') for path in dictionary_paths]\n+        dictionaries = [yaml.load(dict_file) for dict_file in files]\n+        map(lambda x: x.close(), files)\n+        self.dictionary = {}\n+        self.max_key_size = 0\n+        for curr_dict in dictionaries:\n+            for key in curr_dict:\n+                if key in self.dictionary:\n+                    self.dictionary[key].extend(curr_dict[key])\n+                else:\n+                    self.dictionary[key] = curr_dict[key]\n+                    self.max_key_size = max(self.max_key_size, len(key))\n+\n+    def tag(self, postagged_sentences):", "created_at": "2018-06-07T08:43:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzY3MjI4Ng==", "fields": {"body": "Missing space before on room", "diff": "@@ -0,0 +1,23 @@\n+from django.db import models\n+\n+\n+class Question(models.Model):\n+    identifier = models.CharField(max_length=500, primary_key=True)\n+    room = models.CharField(max_length=300)\n+    text = models.TextField()\n+    sent_at = models.DateTimeField()\n+    sent_by = models.CharField(max_length=300)\n+\n+    def __str__(self):\n+        return ('sent_by: ' + self.sent_by + 'on room: ' + self.room)", "created_at": "2018-06-07T08:53:14Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzYyNjEwMw==", "fields": {"body": "Old error; this file is now ignored", "diff": "@@ -0,0 +1,9 @@\n+{% extends 'gitignore.jj2' %}\n+{% block extra %}\n+# Django distill\n+/private/\n+_site/\n+/public/\n+\n+{% include 'gitignore/coala.gitignore' %}", "created_at": "2018-06-07T05:00:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3Nzk2NA==", "fields": {"body": "I think it's worth adding a comment with a link to the issue, or just explain it in the commit.", "diff": "@@ -22,9 +22,9 @@ before_install:\n   - npm i -g jshint\n \n script:\n+  - coala --non-interactive -V\n   - ./.ci/build.sh\n   - rm -rf private/\n-  - coala --non-interactive -V", "created_at": "2018-06-07T14:56:29Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI0OTIwNg==", "fields": {"body": "Im doing #132 ..\nBut .. this is not desirable\nIt is better to let them be separate args.\nIf you want to use allow_failure, call it on the cli like --allow_failure", "diff": "@@ -13,12 +13,15 @@ class Command(BaseCommand):\n \n     def add_arguments(self, parser):\n         parser.add_argument('output_dir', nargs='?', type=str)\n-        parser.add_argument('filenames', nargs='+', type=str)\n+        parser.add_argument('filenames', nargs='?', type=str)\n+        parser.add_argument('allow_failure', nargs='?', type=bool,\n+                            default=False)\n \n     def handle(self, *args, **options):\n         logger = logging.getLogger(__name__)\n         output_dir = options.get('output_dir')\n-        filenames = options.get('filenames')\n+        filenames = options.get('filenames').split(' ')", "created_at": "2018-06-10T08:01:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI0OTU5Ng==", "fields": {"body": "The fetch operation should be in a separate management command, so that people can fetch once and then load many times while attempting to debug problems.\nThis could probably be an enhancement to fetch_deployed_data (and community.git) to fetch deployed data from a different repo.", "diff": "@@ -0,0 +1,440 @@\n+from dateutil import parser\n+import json\n+import logging\n+\n+from django.utils import timezone\n+import requests\n+\n+from community.git import get_org_name\n+from meta_review.dump_to_db import dump_all\n+from meta_review.load_from_db import load_all\n+from meta_review.models import Participant\n+\n+\n+def parse_time(time):\n+    \"\"\"\n+    parse string to datetime\n+    :param time: a string represents time, e.g. 2018-05-09T11:19:26Z\n+    :return: an offset-aware datetime object\n+    \"\"\"\n+    if time is None:\n+        return None\n+\n+    return parser.parse(time)\n+\n+\n+class MetaReviewHandler:\n+    \"\"\"\n+    This is the class responsible for scraping provided information (reviews,\n+    reactions), processing them and dumping into Django database\n+    \"\"\"\n+\n+    def __init__(self, content, date):\n+        \"\"\"\n+        Constructs a new ``MetaReviewHandler``\n+\n+        :param content: Parsed JSON data\n+        :param date: The update date\n+        \"\"\"\n+        self.logger = logging.getLogger(__name__)\n+        self.logger.info('this package is alive')\n+\n+        self.date = date\n+\n+        # save comments in memory\n+        self.comments = dict()\n+        for issue in content:\n+            issue = issue['issue']\n+            if not issue.get('pullRequest'):\n+                continue\n+            for comment in issue['pullRequest']['comments']:\n+                # parse time\n+                comment['createdAt'] = parse_time(comment['createdAt'])\n+                comment['lastEditedAt'] = parse_time(comment['lastEditedAt'])\n+                self.comments[comment['id']] = comment\n+\n+        # save reactions in memory\n+        self.reactions = dict()\n+        for key, comment in self.comments.items():\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # record receiver\n+                reaction['receiver'] = {\n+                    'login': comment['author']['login']\n+                }\n+                # record comment id\n+                reaction['comment_id'] = comment['id']\n+                # parse time\n+                reaction['createdAt'] = parse_time(reaction['createdAt'])\n+                self.reactions[reaction['id']] = reaction\n+\n+        # save participants in memory\n+        self.participants = dict()\n+        for key, comment in self.comments.items():\n+            # get author of each comment\n+            author = comment['author']\n+\n+            # skip if user does not exist\n+            # this happens when account is deleted from GitHub\n+            if author['login']:\n+                self.participants[author['login']] = author\n+\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # get user of each reaction\n+                user = reaction['user']\n+\n+                # skip if user does not exist\n+                if author['login']:\n+                    self.participants[user['login']] = user\n+\n+    def handle(self):\n+        \"\"\"\n+        Scrape data, process and store in database\n+        \"\"\"\n+        load_all(self.participants, self.comments, self.reactions)\n+\n+        self.__check_comment_update()\n+        self.__update_score()\n+        self.__update_weight_factors()\n+\n+        # dump first to make use of built-in sort method\n+        dump_all(self.participants, self.comments, self.reactions)\n+        self.__update_rankings()\n+\n+        # dump first to make use of reverse query\n+        dump_all(self.participants, self.comments, self.reactions)\n+        self.__update_time()\n+\n+        dump_all(self.participants, self.comments, self.reactions)\n+\n+        self.logger.info('Meta Review System finishes.')\n+\n+    def __check_comment_update(self):\n+        \"\"\"\n+        If reviewer updates their review comment after it has\n+        been meta-reviewed, they will be slightly punished.\n+        \"\"\"\n+        for key, comment in self.comments.items():\n+            last_edited_at = comment.last_edited_at\n+            author = comment.author\n+\n+            # skip if author does not exist\n+            if not author:\n+                continue\n+\n+            # if already punished during last iteration, don't punish again\n+            # `last_active_at` attribute records time of last iteration\n+            if (author.last_active_at and last_edited_at\n+                    and author.last_active_at >= last_edited_at):\n+                continue\n+\n+            reactions = comment.reaction_set.all()\n+\n+            need_punishment = False\n+\n+            # get reactions createdTime\n+            for reaction in reactions:\n+                if last_edited_at and last_edited_at > reaction.created_at:\n+                    need_punishment = True\n+\n+            if need_punishment:\n+                self.logger.info('%s updates review comment after it has been'\n+                                 'meta-reviewed. 0.5 point deducted for'\n+                                 'punishment. comment id: %s'\n+                                 % (author.login, comment.id))\n+                author.punishment += 0.5\n+                author.score -= 0.5\n+\n+    def __update_time(self):\n+        \"\"\"\n+        Update last_active_at attribute of each participant\n+\n+        Note this does not accurately reflect the last time they were\n+        active in the community.\n+\n+        First, it relies on the accuracy of issues.json fetched from\n+        gh-board repo.\n+\n+        Second, this field should instead be interpreted as 'the last\n+        time the participant had impact on the meta-review system'. This\n+        is the last time among three things: the last time they created/edited\n+        a comment, the last time they did a meta-review, the last time\n+        their review received a meta-review.\n+        \"\"\"\n+        self.logger.info('start updating last active time of all participants')\n+\n+        # load participants from database to make use of reverse query\n+        participants_all = Participant.objects.all()\n+\n+        for participant in participants_all:\n+            old_active_time = participant.last_active_at\n+\n+            # check last time they created/edited a comment\n+            for comment in participant.comment_set.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = comment.created_at\n+                if comment.created_at > participant.last_active_at:\n+                    participant.last_active_at = comment.created_at\n+                if (comment.last_edited_at and\n+                        comment.last_edited_at > participant.last_active_at):\n+                    participant.last_active_at = comment.last_edited_at\n+\n+            # check last time they did a meta-review\n+            for reaction in participant.give.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            # check last time they received a meta-review\n+            for reaction in participant.receive.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            if participant.last_active_at != old_active_time:\n+                self.logger.debug('%s last active time changed from %s to %s'\n+                                  % (participant.login, old_active_time,\n+                                     participant.last_active_at))\n+\n+            self.participants[participant.login] = participant\n+\n+    def __update_score(self):\n+        \"\"\"\n+        Calculate and update score of each participant using\n+        the following formula:\n+\n+        Define:\n+\n+        P1 = total points (weighted) of THUMBS_UP a person gets for all\n+             reviews he did.\n+        P2 = total number of THUMBS_UP a person gives to other\n+             people for their reviews.\n+        N1 = total points (weighted) of THUMBS_DOWN a person gets for all\n+             reviews he did.\n+        N2 = total number of THUMBS_DOWN a person gives to other people for\n+             their reviews.\n+\n+        Then final score, denote by S, is as follows:\n+\n+        S =  P1 - N1 + c1 * P2 + c2 * N2\n+\n+        where c1 = 0.05, c2 = 0.2. One will get at least 0.1 point for a\n+        positive reaction they received, so we want c1 be smaller than that.\n+        c2 is larger because people are reluctant to give negative reactions.\n+        In all, bonus points (P2 and N2) aim to encourage people to do\n+        meta-reviews, but we don't want them to dominate.\n+\n+        Also update score of each review comment.\n+        \"\"\"\n+        self.logger.info('update scores of all participants')\n+        # coefficients of the formula\n+        c1, c2 = 0.05, 0.2\n+        for key, participant in self.participants.items():\n+            # parameters to be used in the formula\n+            p1, p2, n1, n2 = 0, 0, 0, 0\n+            # number of positive/negative reactions received\n+            pos_cnt, neg_cnt = 0, 0\n+\n+            # get reactions received\n+            reactions_in = participant.receive.all()\n+            for reaction in reactions_in:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, receiver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                # get weight factor of the reaction giver\n+                weight_factor = reaction.giver.weight_factor\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction received is %s, positive'\n+                                      % reaction.content)\n+                    p1 += weight_factor\n+                    pos_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.pos += 1\n+                    reaction.review.weighted_pos += weight_factor\n+                    reaction.review.score += weight_factor\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction received is %s, negative'\n+                                      % reaction.content)\n+                    n1 += weight_factor\n+                    neg_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.neg += 1\n+                    reaction.review.weighted_neg += weight_factor\n+                    reaction.review.score -= weight_factor\n+                else:\n+                    self.logger.debug('reaction received is %s, ignore'\n+                                      % reaction.content)\n+\n+            # get reactions give away\n+            reactions_out = participant.give.all()\n+            for reaction in reactions_out:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, giver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction give away is %s, positive'\n+                                      % reaction.content)\n+                    p2 += 1\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction give away is %s, negative'\n+                                      % reaction.content)\n+                    n2 += 1\n+                else:\n+                    self.logger.debug('reaction give away is %s, ignore'\n+                                      % reaction.content)\n+\n+            # update information\n+            participant.pos_in += pos_cnt\n+            participant.weighted_pos_in += p1\n+            participant.pos_out += p2\n+            participant.neg_in += neg_cnt\n+            participant.weighted_neg_in += n1\n+            participant.neg_out += n2\n+            self.logger.debug('update %s info, pos_in += %d, '\n+                              'weighted_pos_in += %.3f, pos_out += %d, '\n+                              'neg_in += %d, weighted_neg_in += %.3f, '\n+                              'neg_out += %d'\n+                              % (participant.login, pos_cnt, p1, p2,\n+                                 neg_cnt, n1, n2))\n+\n+            # update score\n+            s = p1 - n1 + c1 * p2 + c2 * n2\n+            self.logger.debug('update %s score, before: %.3f, after: %.3f'\n+                              % (participant.login, participant.score,\n+                                 participant.score + s))\n+            participant.score += s\n+\n+    def __update_rankings(self):\n+        \"\"\"\n+        Calculate and update rankings based on scores by making\n+        use of Django built-in sorting method\n+        \"\"\"\n+        self.logger.info('update rankings of all participants')\n+\n+        # make use of built-in order_by method to sort participants\n+        participants_all = Participant.objects.order_by('-score', '-pos_in')\n+        rank = 0\n+        last_score = -float('inf')\n+        for participant in participants_all:\n+            if rank == 0 or last_score != participant.score:\n+                rank += 1\n+                last_score = participant.score\n+\n+            # update trend = rank (last time) - rank (this time)\n+            if participant.rank:\n+                if participant.trend:\n+                    self.logger.debug('update %s trend, before: %d, after: %d'\n+                                      % (participant.login, participant.trend,\n+                                         participant.rank - rank))\n+                else:\n+                    # if last time was the first time they get a rank, then\n+                    # they don't have trend last time\n+                    self.logger.debug('update %s trend, before: N/A, after: %d'\n+                                      % (participant.login,\n+                                         participant.rank - rank))\n+                participant.trend = participant.rank - rank\n+            else:\n+                self.logger.debug('%s has no rank before, thus no trend'\n+                                  % participant.login)\n+\n+            # update rank\n+            if participant.rank:\n+                self.logger.debug('update %s rank, before: %d, after: %d'\n+                                  % (participant.login, participant.rank, rank))\n+            else:\n+                self.logger.debug('update %s rank, before: N/A, after: %d'\n+                                  % (participant.login, rank))\n+            participant.rank = rank\n+\n+            # save in memory\n+            self.participants[participant.login] = participant\n+\n+    def __update_weight_factors(self):\n+        \"\"\"\n+        Based on history data and the current iteration, recalculate weight\n+        factors (to be used in the next iteration)\n+\n+        The higher score a person has, the more impacts he has, thus his\n+        meta-reviews are more valuable.\n+\n+        For example, in a previous iteration, Alice got 2 marks, Bob got\n+        0.8 marks and Charlie got 10 marks. The calculation demo would\n+        be as follows:\n+\n+        >>> c = [2, 0.8, 10]\n+        >>> max_score = float(max(c))\n+        >>> result = [i / max_score for i in c]\n+        >>> print(result)\n+        [0.2, 0.08, 1.0]\n+        >>> result_adjust = [i * 0.9 + 0.1 for i in result]  # adjust\n+        >>> result_rounded = [round(i, 3) for i in result_adjust]\n+        >>> print(result_rounded)\n+        [0.28, 0.172, 1.0]\n+\n+        Anyone who gets negative marks from previous run will have weight\n+        factor of 0.\n+\n+        To conclude, the weight factor is a float number ranging from 0 to 1.\n+        \"\"\"\n+        max_score = 1.0\n+        # find max score\n+        for key, participant in self.participants.items():\n+            if participant.score > max_score:\n+                max_score = float(participant.score)\n+\n+        # calculate weight factors\n+        for key, participant in self.participants.items():\n+            if participant.score < 0:\n+                participant.weight_factor = 0\n+            else:\n+                participant.weight_factor = participant.score / max_score\n+                participant.weight_factor *= 0.9\n+                participant.weight_factor += 0.1\n+\n+\n+def handle():\n+    # load data from gh-board repo\n+    org_name = get_org_name()\n+\n+    # URL to grab all issues from\n+    issues_url = 'http://' + org_name + '.github.io/gh-board/issues.json'", "created_at": "2018-06-10T08:20:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxMzg5OA==", "fields": {"body": "separate std libs and custom packages; and do some reordering, see other apps for example.", "diff": "@@ -0,0 +1,667 @@\n+import requests\n+from requests.exceptions import ReadTimeout\n+import json\n+import logging", "created_at": "2018-06-09T04:35:57Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxMzkwMw==", "fields": {"body": "extra line not required.", "diff": "@@ -0,0 +1,667 @@\n+import requests\n+from requests.exceptions import ReadTimeout\n+import json\n+import logging\n+from dateutil import parser\n+\n+from django.utils import timezone\n+\n+from community.git import get_org_name\n+", "created_at": "2018-06-09T04:36:24Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNjY2OQ==", "fields": {"body": "Might want to lump these two lines into the try above so that you don't get an UnboundLocalError if the above fails (see: Travis failure).", "diff": "@@ -0,0 +1,666 @@\n+from dateutil import parser\n+import json\n+import logging\n+\n+from django.utils import timezone\n+import requests\n+from requests.exceptions import ReadTimeout\n+\n+from community.git import get_org_name\n+from meta_review.models import Participant, Comment, Reaction\n+\n+\n+def parse_time(time):\n+    \"\"\"\n+    parse string to datetime\n+    :param time: a string represents time, e.g. 2018-05-09T11:19:26Z\n+    :return: an offset-aware datetime object\n+    \"\"\"\n+    if time is None:\n+        return None\n+\n+    return parser.parse(time)\n+\n+\n+class MetaReviewHandler:\n+    \"\"\"\n+    This is the class responsible for scraping provided information (reviews,\n+    reactions), processing them and dumping into Django database\n+    \"\"\"\n+\n+    def __init__(self, content, date):\n+        \"\"\"\n+        Constructs a new ``MetaReviewHandler``\n+\n+        :param content: Parsed JSON data\n+        :param date: The update date\n+        \"\"\"\n+        self.logger = logging.getLogger(__name__)\n+        self.logger.info('this package is alive')\n+\n+        self.date = date\n+\n+        # save comments in memory\n+        self.comments = dict()\n+        for issue in content:\n+            issue = issue['issue']\n+            if not issue.get('pullRequest'):\n+                continue\n+            for comment in issue['pullRequest']['comments']:\n+                # parse time\n+                comment['createdAt'] = parse_time(comment['createdAt'])\n+                comment['lastEditedAt'] = parse_time(comment['lastEditedAt'])\n+                self.comments[comment['id']] = comment\n+\n+        # save reactions in memory\n+        self.reactions = dict()\n+        for key, comment in self.comments.items():\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # record receiver\n+                reaction['receiver'] = {\n+                    'login': comment['author']['login']\n+                }\n+                # record comment id\n+                reaction['comment_id'] = comment['id']\n+                # parse time\n+                reaction['createdAt'] = parse_time(reaction['createdAt'])\n+                self.reactions[reaction['id']] = reaction\n+\n+        # save participants in memory\n+        self.participants = dict()\n+        for key, comment in self.comments.items():\n+            # get author of each comment\n+            author = comment['author']\n+\n+            # skip if user not exist\n+            # this happens when account is deleted from GitHub\n+            if author['login']:\n+                self.participants[author['login']] = author\n+\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # get user of each reaction\n+                user = reaction['user']\n+\n+                # skip if user not exist\n+                if author['login']:\n+                    self.participants[user['login']] = user\n+\n+    def handle(self):\n+        \"\"\"\n+        Scrape data, process and store in database\n+        \"\"\"\n+        print('load participants to memory')\n+        self.__load_participants_to_memory()\n+        print('load comments to memory')\n+        self.__load_comments_to_memory()\n+        print('load reactions to memory')\n+        self.__load_reactions_to_memory()\n+\n+        print('dump participants to database')\n+        self.__dump_participants_to_database()\n+        print('dump comments to database')\n+        self.__dump_comments_to_database()\n+        print('dump reactions to database')\n+        self.__dump_reactions_to_database()\n+\n+        print('update score')\n+        self.__update_score()\n+        print('update ranking')\n+        self.__update_rankings()\n+        print('update weight factors')\n+        self.__update_weight_factors()\n+        print('update time')\n+        self.__update_time()\n+\n+        print('dump participants to database')\n+        self.__dump_participants_to_database()\n+        print('dump comments to database')\n+        self.__dump_comments_to_database()\n+        print('dump reactions to database')\n+        self.__dump_reactions_to_database()\n+\n+        self.logger.info('Meta Review System finishes.')\n+\n+    def __check_comment_update(self, last_edited_at, comment):\n+        \"\"\"\n+        If reviewer updates their review comment after it has\n+        been meta-reviewed, they will be slightly punished.\n+\n+        :param last_edited_at: Datetime\n+        :param comment: Comment object\n+        \"\"\"\n+        author = comment.author\n+        reactions = comment.reaction_set.all()\n+\n+        need_punishment = False\n+\n+        # get reactions createdTime\n+        for reaction in reactions:\n+            if last_edited_at and last_edited_at > reaction.created_at:\n+                need_punishment = True\n+\n+        if need_punishment:\n+            self.logger.info('%s updates review comment after it has been'\n+                             'meta-reviewed. 0.5 point deducted for punishment.'\n+                             'comment id: %s' % (author.login, comment.id))\n+            author.punishment += 0.5\n+            author.score -= 0.5\n+\n+    def __load_participants_to_memory(self):\n+        \"\"\"\n+        Load participants into memory\n+        a) create Participant objects if not exist in database\n+           fetch history data if exist in database and also in memory\n+        b) fetch history data if exist in database but not in memory yet\n+        \"\"\"\n+        self.logger.info('get or create participants')\n+        created_cnt = 0\n+        existing_cnt = 0\n+        load_cnt = 0\n+        # There are lots of participants and we'd better use bulk_create\n+        # to accelerate deploy process\n+        old_participants = Participant.objects.all()\n+        old_participants_set = set()\n+        for old_participant in old_participants:\n+            old_participants_set.add(old_participant.login)\n+\n+        new_participants = []\n+        for key, participant in self.participants.items():\n+            # if it is an old participant, we skip it\n+            if participant['login'] in old_participants_set:\n+                self.logger.debug('participant %s exists'\n+                                  % participant['login'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('participant %s is new'\n+                                  % participant['login'])\n+                new_participants.append(\n+                    Participant(login=participant['login']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Participant.objects.bulk_create(new_participants)\n+\n+        # load all participants again (old + new)\n+        all_participants = Participant.objects.all()\n+\n+        for p in all_participants:\n+            if self.participants.get(p.login):\n+                # participants recently active\n+                participant = self.participants[p.login]\n+                p.name = participant['name']\n+                # save into memory\n+                self.participants[p.login] = p\n+            else:\n+                # participants recently inactive\n+                # they are not in self.participants, but their ranks need\n+                # update, so we also save them in memory\n+                self.participants[p.login] = p\n+                load_cnt += 1\n+\n+        self.logger.info('number of newly created participants: %d '\n+                         'number of existing active participants: %d '\n+                         'number of existing inactive participants: %d'\n+                         % (created_cnt, existing_cnt, load_cnt))\n+\n+        self.logger.info('load participants into memory done, '\n+                         'total number = %d'\n+                         % (created_cnt + existing_cnt + load_cnt))\n+\n+    def __load_comments_to_memory(self):\n+        \"\"\"\n+        Load reviews into memory\n+        a) create Review objects if not exist in database\n+        b) fetch history data if exist in database\n+        \"\"\"\n+        self.logger.info('get or create reviews')\n+        created_cnt = 0\n+        existing_cnt = 0\n+        # There are lots of comments and we have to use bulk_create\n+        # to accelerate deploy process\n+        old_comments = Comment.objects.all()\n+        old_commments_set = set()\n+        for old_comment in old_comments:\n+            old_commments_set.add(old_comment.id)\n+\n+        new_comments = []\n+        for key, comment in self.comments.items():\n+            # if it is an old comment, we skip it\n+            if comment['id'] in old_commments_set:\n+                self.logger.debug('review comment %s exists'\n+                                  % comment['id'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('review comment %s is new'\n+                                  % comment['id'])\n+                new_comments.append(\n+                    Comment(id=comment['id']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Comment.objects.bulk_create(new_comments)\n+\n+        # load all comments again (old + new)\n+        all_comments = Comment.objects.all()\n+\n+        for c in all_comments:\n+            if not self.comments.get(c.id):\n+                # no need to load history comments\n+                continue\n+            comment = self.comments[c.id]\n+            c.body = comment['bodyText']\n+            c.diff = comment['diffHunk']\n+            c.created_at = comment['createdAt']\n+            c.last_edited_at = comment['lastEditedAt']\n+            login = comment['author']['login']\n+            if login:\n+                c.author = self.participants[login]\n+\n+            # check comment update after meta-review\n+            self.__check_comment_update(c.last_edited_at, c)\n+\n+            # save into memory\n+            self.comments[c.id] = c\n+\n+        self.logger.info('number of newly created comment objects: %d '\n+                         'number of existing comment objects: %d'\n+                         % (created_cnt, existing_cnt))\n+\n+    def __load_reactions_to_memory(self):\n+        \"\"\"\n+        Load reactions into memory\n+        a) create Reaction objects if not exist in database\n+        b) fetch history data if exist in database\n+        \"\"\"\n+        self.logger.info('get or create reactions')\n+        created_cnt = 0\n+        existing_cnt = 0\n+\n+        # There are lots of reactions and we have to use bulk_create\n+        # to accelerate deploy process\n+        old_reactions = Reaction.objects.all()\n+        old_reactions_set = set()\n+        for old_reaction in old_reactions:\n+            old_reactions_set.add(old_reaction.id)\n+\n+        new_reactions = []\n+        for key, reaction in self.reactions.items():\n+            # if it is an old reaction, we skip it\n+            if reaction['id'] in old_reactions_set:\n+                self.logger.debug('reaction %s exists' % reaction['id'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('reaction %s is new' % reaction['id'])\n+                new_reactions.append(\n+                    Reaction(id=reaction['id']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Reaction.objects.bulk_create(new_reactions)\n+\n+        # laod all reactions again (old + new)\n+        all_reactions = Reaction.objects.all()\n+\n+        for r in all_reactions:\n+            if not self.reactions.get(r.id):\n+                # no need to load history reactions\n+                continue\n+            reaction = self.reactions[r.id]\n+            r.created_at = reaction['createdAt']\n+            r.content = reaction['content']\n+            giver_login = reaction['user']['login']\n+            if giver_login:\n+                r.giver = self.participants[giver_login]\n+            receiver_login = reaction['receiver']['login']\n+            if receiver_login:\n+                r.receiver = self.participants[receiver_login]\n+            comment_id = reaction['comment_id']\n+            r.review = self.comments[comment_id]\n+\n+            # save into memory\n+            self.reactions[r.id] = r\n+\n+        self.logger.info('number of newly created reaction objects: %d '\n+                         'number of existing reaction objects: %d'\n+                         % (created_cnt, existing_cnt))\n+\n+    def __update_time(self):\n+        \"\"\"\n+        Update last_active_at attribute of each participant\n+\n+        Note this does not accurately reflect the last time they were\n+        active in the community.\n+\n+        First, it relies on the accuracy of issues.json fetched from\n+        gh-board repo.\n+\n+        Second, this field should instead be interpreted as 'the last\n+        time the participant had impact on the meta-review system'. This\n+        is the last time among three things: the last time they created/edited\n+        a comment, the last time they did a meta-review, the last time\n+        their review received a meta-review.\n+        \"\"\"\n+        self.logger.info('start updating last active time of all participants')\n+        for key, participant in self.participants.items():\n+            old_active_time = participant.last_active_at\n+\n+            # check last time they created/edited a comment\n+            for comment in participant.comment_set.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = comment.created_at\n+                if comment.created_at > participant.last_active_at:\n+                    participant.last_active_at = comment.created_at\n+                if (comment.last_edited_at and\n+                        comment.last_edited_at > participant.last_active_at):\n+                    participant.last_active_at = comment.last_edited_at\n+\n+            # check last time they did a meta-review\n+            for reaction in participant.give.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            # check last time they received a meta-review\n+            for reaction in participant.receive.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            if participant.last_active_at != old_active_time:\n+                self.logger.debug('%s last active time changed from %s to %s'\n+                                  % (participant.login, old_active_time,\n+                                     participant.last_active_at))\n+\n+    def __update_score(self):\n+        \"\"\"\n+        Calculate and update score of each participant using\n+        the following formula:\n+\n+        Define:\n+\n+        P1 = total points (weighted) of THUMBS_UP a person gets for all\n+             reviews he did.\n+        P2 = total number of THUMBS_UP a person gives to other\n+             people for their reviews.\n+        N1 = total points (weighted) of THUMBS_DOWN a person gets for all\n+             reviews he did.\n+        N2 = total number of THUMBS_DOWN a person gives to other people for\n+             their reviews.\n+\n+        Then final score, denote by S, is as follows:\n+\n+        S =  P1 - N1 + c1 * P2 + c2 * N2\n+\n+        where c1 = 0.05, c2 = 0.2. One will get at least 0.1 point for a\n+        positive reaction they received, so we want c1 be smaller than that.\n+        c2 is larger because people are reluctant to give negative reactions.\n+        In all, bonus points (P2 and N2) aim to encourage people to do\n+        meta-reviews, but we don't want them to dominate.\n+\n+        Also update score of each review comment.\n+        \"\"\"\n+        self.logger.info('update scores of all participants')\n+        # coefficients of the formula\n+        c1, c2 = 0.05, 0.2\n+        for key, participant in self.participants.items():\n+            # parameters to be used in the formula\n+            p1, p2, n1, n2 = 0, 0, 0, 0\n+            # number of positive/negative reactions received\n+            pos_cnt, neg_cnt = 0, 0\n+\n+            # get reactions received\n+            reactions_in = participant.receive.all()\n+            for reaction in reactions_in:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, receiver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                # get weight factor of the reaction giver\n+                weight_factor = reaction.giver.weight_factor\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction received is %s, positive'\n+                                      % reaction.content)\n+                    p1 += weight_factor\n+                    pos_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.pos += 1\n+                    reaction.review.weighted_pos += weight_factor\n+                    reaction.review.score += weight_factor\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction received is %s, negative'\n+                                      % reaction.content)\n+                    n1 += weight_factor\n+                    neg_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.neg += 1\n+                    reaction.review.weighted_neg += weight_factor\n+                    reaction.review.score -= weight_factor\n+                else:\n+                    self.logger.debug('reaction received is %s, ignore'\n+                                      % reaction.content)\n+\n+            # get reactions give away\n+            reactions_out = participant.give.all()\n+            for reaction in reactions_out:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, giver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction give away is %s, positive'\n+                                      % reaction.content)\n+                    p2 += 1\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction give away is %s, negative'\n+                                      % reaction.content)\n+                    n2 += 1\n+                else:\n+                    self.logger.debug('reaction give away is %s, ignore'\n+                                      % reaction.content)\n+\n+            # update information\n+            participant.pos_in += pos_cnt\n+            participant.weighted_pos_in += p1\n+            participant.pos_out += p2\n+            participant.neg_in += neg_cnt\n+            participant.weighted_neg_in += n1\n+            participant.neg_out += n2\n+            self.logger.debug('update %s info, pos_in += %d, '\n+                              'weighted_pos_in += %.3f, pos_out += %d, '\n+                              'neg_in += %d, weighted_neg_in += %.3f, '\n+                              'neg_out += %d'\n+                              % (participant.login, pos_cnt, p1, p2,\n+                                 neg_cnt, n1, n2))\n+\n+            # update score\n+            s = p1 - n1 + c1 * p2 + c2 * n2\n+            self.logger.debug('update %s score, before: %.3f, after: %.3f'\n+                              % (participant.login, participant.score,\n+                                 participant.score + s))\n+            participant.score += s\n+\n+    def __update_rankings(self):\n+        \"\"\"\n+        Calculate and update rankings based on scores by making\n+        use of Django built-in sorting method\n+        \"\"\"\n+        self.logger.info('update rankings of all participants')\n+\n+        # save participants data into database first\n+        self.__dump_participants_to_database()\n+\n+        # make use of built-in order_by method to sort participants\n+        participants_all = Participant.objects.order_by('-score', '-pos_in')\n+        rank = 0\n+        last_score = -float('inf')\n+        for participant in participants_all:\n+            if rank == 0 or last_score != participant.score:\n+                rank += 1\n+                last_score = participant.score\n+\n+            # update trend = rank (last time) - rank (this time)\n+            if participant.rank:\n+                if participant.trend:\n+                    self.logger.debug('update %s trend, before: %d, after: %d'\n+                                      % (participant.login, participant.trend,\n+                                         participant.rank - rank))\n+                else:\n+                    # if last time was the first time they get a rank, then\n+                    # they don't have trend last time\n+                    self.logger.debug('update %s trend, before: N/A, after: %d'\n+                                      % (participant.login,\n+                                         participant.rank - rank))\n+                participant.trend = participant.rank - rank\n+            else:\n+                self.logger.debug('%s has no rank before, thus no trend'\n+                                  % participant.login)\n+\n+            # update rank\n+            if participant.rank:\n+                self.logger.debug('update %s rank, before: %d, after: %d'\n+                                  % (participant.login, participant.rank, rank))\n+            else:\n+                self.logger.debug('update %s rank, before: N/A, after: %d'\n+                                  % (participant.login, rank))\n+            participant.rank = rank\n+\n+            # save in memory\n+            self.participants[participant.login] = participant\n+\n+    def __update_weight_factors(self):\n+        \"\"\"\n+        Based on history data and the current iteration, recalculate weight\n+        factors (to be used in the next iteration)\n+\n+        The higher score a person has, the more impacts he has, thus his\n+        meta-reviews are more valuable.\n+\n+        For example, in a previous iteration, Alice got 2 marks, Bob got\n+        0.8 marks and Charlie got 10 marks. The calculation demo would\n+        be as follows:\n+\n+        >>> c = [2, 0.8, 10]\n+        >>> max_score = float(max(c))\n+        >>> result = [i / max_score for i in c]\n+        >>> print(result)\n+        [0.2, 0.08, 1.0]\n+        >>> result_adjust = [i * 0.9 + 0.1 for i in result]  # adjust\n+        >>> result_rounded = [round(i, 3) for i in result_adjust]\n+        >>> print(result_rounded)\n+        [0.28, 0.172, 1.0]\n+\n+        Anyone who gets negative marks from previous run will have weight\n+        factor of 0.\n+\n+        To conclude, the weight factor is a float number ranging from 0 to 1.\n+        \"\"\"\n+        max_score = 1.0\n+        # find max score\n+        for key, participant in self.participants.items():\n+            if participant.score > max_score:\n+                max_score = float(participant.score)\n+\n+        # calculate weight factors\n+        for key, participant in self.participants.items():\n+            if participant.score < 0:\n+                participant.weight_factor = 0\n+            else:\n+                participant.weight_factor = participant.score / max_score\n+                participant.weight_factor *= 0.9\n+                participant.weight_factor += 0.1\n+\n+    def __dump_participants_to_database(self):\n+        \"\"\"\n+        Dump participants data into Django database\n+        \"\"\"\n+        self.logger.info('dump participants data into database')\n+        participants = []\n+        for key, participant in self.participants.items():\n+            participants.append(participant)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all participants\n+            Participant.objects.all().delete()\n+            # bulk create all participants\n+            Participant.objects.bulk_create(participants)\n+        except Exception as ex:\n+            self.logger.error(\n+                '\\n\\nSomething went wrong saving participants: %s' % ex)\n+\n+    def __dump_comments_to_database(self):\n+        \"\"\"\n+        Dump comments data into Django database\n+        \"\"\"\n+        self.logger.info('dump review comments data into database')\n+        comments = []\n+        for key, comment in self.comments.items():\n+            comments.append(comment)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all comments\n+            Comment.objects.all().delete()\n+            # bulk create all comments\n+            Comment.objects.bulk_create(comments)\n+        except Exception as ex:\n+            self.logger.error(\n+                '\\n\\nSomething went wrong saving comments: %s' % ex)\n+\n+    def __dump_reactions_to_database(self):\n+        \"\"\"\n+        Dump reactions data into Django database\n+        \"\"\"\n+        self.logger.info('dump reactions data into database')\n+        reactions = []\n+        for key, reaction in self.reactions.items():\n+            reactions.append(reaction)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all reactions\n+            Reaction.objects.all().delete()\n+            # bulk create all reactions\n+            Reaction.objects.bulk_create(reactions)\n+        except Exception as ex:\n+            self.logger.error(\n+                '\\n\\nSomething went wrong saving reactions: %s' % ex)\n+\n+\n+def handle():\n+    # load data from gh-board repo\n+    org_name = get_org_name()\n+\n+    # URL to grab all issues from\n+    issues_url = 'http://' + org_name + '.github.io/gh-board/issues.json'\n+\n+    logger = logging.getLogger(__name__)\n+\n+    try:\n+        content = requests.get(issues_url, timeout=10)\n+    except ReadTimeout:\n+        logger.warning('Get issues from ' + issues_url +\n+                       ' failed. Try backup url.')\n+        issues_url = 'https://' + org_name + '-gh-board.netlify.com/issues.json'\n+        content = requests.get(issues_url, timeout=10)\n+\n+    try:\n+        parsed_json = content.json()\n+    except json.JSONDecodeError:\n+        logger.error('JSON decode error')\n+\n+    handler = MetaReviewHandler(parsed_json['issues'], timezone.now())\n+    handler.handle()", "created_at": "2018-06-09T06:32:00Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIzODI2OA==", "fields": {"body": "Consider breaking this down to three files, one for handlers, one for all the update functions and one for all the loader functions ?", "diff": "@@ -0,0 +1,657 @@\n+from dateutil import parser\n+import json\n+import logging\n+\n+from django.utils import timezone\n+import requests\n+\n+from community.git import get_org_name\n+from meta_review.models import Participant, Comment, Reaction\n+\n+\n+def parse_time(time):\n+    \"\"\"\n+    parse string to datetime\n+    :param time: a string represents time, e.g. 2018-05-09T11:19:26Z\n+    :return: an offset-aware datetime object\n+    \"\"\"\n+    if time is None:\n+        return None\n+\n+    return parser.parse(time)\n+\n+\n+class MetaReviewHandler:\n+    \"\"\"\n+    This is the class responsible for scraping provided information (reviews,\n+    reactions), processing them and dumping into Django database\n+    \"\"\"\n+\n+    def __init__(self, content, date):\n+        \"\"\"\n+        Constructs a new ``MetaReviewHandler``\n+\n+        :param content: Parsed JSON data\n+        :param date: The update date\n+        \"\"\"\n+        self.logger = logging.getLogger(__name__)\n+        self.logger.info('this package is alive')\n+\n+        self.date = date\n+\n+        # save comments in memory\n+        self.comments = dict()\n+        for issue in content:\n+            issue = issue['issue']\n+            if not issue.get('pullRequest'):\n+                continue\n+            for comment in issue['pullRequest']['comments']:\n+                # parse time\n+                comment['createdAt'] = parse_time(comment['createdAt'])\n+                comment['lastEditedAt'] = parse_time(comment['lastEditedAt'])\n+                self.comments[comment['id']] = comment\n+\n+        # save reactions in memory\n+        self.reactions = dict()\n+        for key, comment in self.comments.items():\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # record receiver\n+                reaction['receiver'] = {\n+                    'login': comment['author']['login']\n+                }\n+                # record comment id\n+                reaction['comment_id'] = comment['id']\n+                # parse time\n+                reaction['createdAt'] = parse_time(reaction['createdAt'])\n+                self.reactions[reaction['id']] = reaction\n+\n+        # save participants in memory\n+        self.participants = dict()\n+        for key, comment in self.comments.items():\n+            # get author of each comment\n+            author = comment['author']\n+\n+            # skip if user does not exist\n+            # this happens when account is deleted from GitHub\n+            if author['login']:\n+                self.participants[author['login']] = author\n+\n+            if not comment.get('reactions'):\n+                continue\n+            for reaction in comment['reactions']:\n+                # get user of each reaction\n+                user = reaction['user']\n+\n+                # skip if user does not exist\n+                if author['login']:\n+                    self.participants[user['login']] = user\n+\n+    def handle(self):\n+        \"\"\"\n+        Scrape data, process and store in database\n+        \"\"\"\n+        self.__load_participants_to_memory()\n+        self.__load_comments_to_memory()\n+        self.__load_reactions_to_memory()\n+\n+        self.__dump_participants_to_database()\n+        self.__dump_comments_to_database()\n+        self.__dump_reactions_to_database()\n+\n+        self.__update_score()\n+        self.__update_rankings()\n+        self.__update_weight_factors()\n+        self.__update_time()\n+\n+        self.__dump_participants_to_database()\n+        self.__dump_comments_to_database()\n+        self.__dump_reactions_to_database()\n+\n+        self.logger.info('Meta Review System finishes.')\n+\n+    def __check_comment_update(self, last_edited_at, comment):\n+        \"\"\"\n+        If reviewer updates their review comment after it has\n+        been meta-reviewed, they will be slightly punished.\n+\n+        :param last_edited_at: Datetime\n+        :param comment: Comment object\n+        \"\"\"\n+        author = comment.author\n+        reactions = comment.reaction_set.all()\n+\n+        need_punishment = False\n+\n+        # get reactions createdTime\n+        for reaction in reactions:\n+            if last_edited_at and last_edited_at > reaction.created_at:\n+                need_punishment = True\n+\n+        if need_punishment:\n+            self.logger.info('%s updates review comment after it has been'\n+                             'meta-reviewed. 0.5 point deducted for punishment.'\n+                             'comment id: %s' % (author.login, comment.id))\n+            author.punishment += 0.5\n+            author.score -= 0.5\n+\n+    def __load_participants_to_memory(self):\n+        \"\"\"\n+        Load participants into memory\n+        a) create Participant objects if not exist in database\n+           fetch history data if exist in database and also in memory\n+        b) fetch history data if exist in database but not in memory yet\n+        \"\"\"\n+        self.logger.info('get or create participants')\n+        created_cnt = 0\n+        existing_cnt = 0\n+        load_cnt = 0\n+        # There are lots of participants and we'd better use bulk_create\n+        # to accelerate deploy process\n+        old_participants = Participant.objects.all()\n+        old_participants_set = set()\n+        for old_participant in old_participants:\n+            old_participants_set.add(old_participant.login)\n+\n+        new_participants = []\n+        for key, participant in self.participants.items():\n+            # if it is an old participant, we skip it\n+            if participant['login'] in old_participants_set:\n+                self.logger.debug('participant %s exists'\n+                                  % participant['login'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('participant %s is new'\n+                                  % participant['login'])\n+                new_participants.append(\n+                    Participant(login=participant['login']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Participant.objects.bulk_create(new_participants)\n+\n+        # load all participants again (old + new)\n+        all_participants = Participant.objects.all()\n+\n+        for p in all_participants:\n+            if self.participants.get(p.login):\n+                # participants recently active\n+                participant = self.participants[p.login]\n+                p.name = participant['name']\n+                # save into memory\n+                self.participants[p.login] = p\n+            else:\n+                # participants recently inactive\n+                # they are not in self.participants, but their ranks need\n+                # update, so we also save them in memory\n+                self.participants[p.login] = p\n+                load_cnt += 1\n+\n+        self.logger.info('number of newly created participants: %d '\n+                         'number of existing active participants: %d '\n+                         'number of existing inactive participants: %d'\n+                         % (created_cnt, existing_cnt, load_cnt))\n+\n+        self.logger.info('load participants into memory done, '\n+                         'total number = %d'\n+                         % (created_cnt + existing_cnt + load_cnt))\n+\n+    def __load_comments_to_memory(self):\n+        \"\"\"\n+        Load reviews into memory\n+        a) create Review objects if not exist in database\n+        b) fetch history data if exist in database\n+        \"\"\"\n+        self.logger.info('get or create reviews')\n+        created_cnt = 0\n+        existing_cnt = 0\n+        # There are lots of comments and we have to use bulk_create\n+        # to accelerate deploy process\n+        old_comments = Comment.objects.all()\n+        old_commments_set = set()\n+        for old_comment in old_comments:\n+            old_commments_set.add(old_comment.id)\n+\n+        new_comments = []\n+        for key, comment in self.comments.items():\n+            # if it is an old comment, we skip it\n+            if comment['id'] in old_commments_set:\n+                self.logger.debug('review comment %s exists'\n+                                  % comment['id'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('review comment %s is new'\n+                                  % comment['id'])\n+                new_comments.append(\n+                    Comment(id=comment['id']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Comment.objects.bulk_create(new_comments)\n+\n+        # load all comments again (old + new)\n+        all_comments = Comment.objects.all()\n+\n+        for c in all_comments:\n+            if not self.comments.get(c.id):\n+                # no need to load history comments\n+                continue\n+            comment = self.comments[c.id]\n+            c.body = comment['bodyText']\n+            c.diff = comment['diffHunk']\n+            c.created_at = comment['createdAt']\n+            c.last_edited_at = comment['lastEditedAt']\n+            login = comment['author']['login']\n+            if login:\n+                c.author = self.participants[login]\n+\n+            # check comment update after meta-review\n+            self.__check_comment_update(c.last_edited_at, c)\n+\n+            # save into memory\n+            self.comments[c.id] = c\n+\n+        self.logger.info('number of newly created comment objects: %d '\n+                         'number of existing comment objects: %d'\n+                         % (created_cnt, existing_cnt))\n+\n+    def __load_reactions_to_memory(self):\n+        \"\"\"\n+        Load reactions into memory\n+        a) create Reaction objects if not exist in database\n+        b) fetch history data if exist in database\n+        \"\"\"\n+        self.logger.info('get or create reactions')\n+        created_cnt = 0\n+        existing_cnt = 0\n+\n+        # There are lots of reactions and we have to use bulk_create\n+        # to accelerate deploy process\n+        old_reactions = Reaction.objects.all()\n+        old_reactions_set = set()\n+        for old_reaction in old_reactions:\n+            old_reactions_set.add(old_reaction.id)\n+\n+        new_reactions = []\n+        for key, reaction in self.reactions.items():\n+            # if it is an old reaction, we skip it\n+            if reaction['id'] in old_reactions_set:\n+                self.logger.debug('reaction %s exists' % reaction['id'])\n+                existing_cnt += 1\n+            else:\n+                self.logger.debug('reaction %s is new' % reaction['id'])\n+                new_reactions.append(\n+                    Reaction(id=reaction['id']))\n+                created_cnt += 1\n+\n+        # use bulk create to speed up create process\n+        Reaction.objects.bulk_create(new_reactions)\n+\n+        # laod all reactions again (old + new)\n+        all_reactions = Reaction.objects.all()\n+\n+        for r in all_reactions:\n+            if not self.reactions.get(r.id):\n+                # no need to load history reactions\n+                continue\n+            reaction = self.reactions[r.id]\n+            r.created_at = reaction['createdAt']\n+            r.content = reaction['content']\n+            giver_login = reaction['user']['login']\n+            if giver_login:\n+                r.giver = self.participants[giver_login]\n+            receiver_login = reaction['receiver']['login']\n+            if receiver_login:\n+                r.receiver = self.participants[receiver_login]\n+            comment_id = reaction['comment_id']\n+            r.review = self.comments[comment_id]\n+\n+            # save into memory\n+            self.reactions[r.id] = r\n+\n+        self.logger.info('number of newly created reaction objects: %d '\n+                         'number of existing reaction objects: %d'\n+                         % (created_cnt, existing_cnt))\n+\n+    def __update_time(self):\n+        \"\"\"\n+        Update last_active_at attribute of each participant\n+\n+        Note this does not accurately reflect the last time they were\n+        active in the community.\n+\n+        First, it relies on the accuracy of issues.json fetched from\n+        gh-board repo.\n+\n+        Second, this field should instead be interpreted as 'the last\n+        time the participant had impact on the meta-review system'. This\n+        is the last time among three things: the last time they created/edited\n+        a comment, the last time they did a meta-review, the last time\n+        their review received a meta-review.\n+        \"\"\"\n+        self.logger.info('start updating last active time of all participants')\n+        for key, participant in self.participants.items():\n+            old_active_time = participant.last_active_at\n+\n+            # check last time they created/edited a comment\n+            for comment in participant.comment_set.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = comment.created_at\n+                if comment.created_at > participant.last_active_at:\n+                    participant.last_active_at = comment.created_at\n+                if (comment.last_edited_at and\n+                        comment.last_edited_at > participant.last_active_at):\n+                    participant.last_active_at = comment.last_edited_at\n+\n+            # check last time they did a meta-review\n+            for reaction in participant.give.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            # check last time they received a meta-review\n+            for reaction in participant.receive.all():\n+                if participant.last_active_at is None:\n+                    participant.last_active_at = reaction.created_at\n+                if reaction.created_at > participant.last_active_at:\n+                    participant.last_active_at = reaction.created_at\n+\n+            if participant.last_active_at != old_active_time:\n+                self.logger.debug('%s last active time changed from %s to %s'\n+                                  % (participant.login, old_active_time,\n+                                     participant.last_active_at))\n+\n+    def __update_score(self):\n+        \"\"\"\n+        Calculate and update score of each participant using\n+        the following formula:\n+\n+        Define:\n+\n+        P1 = total points (weighted) of THUMBS_UP a person gets for all\n+             reviews he did.\n+        P2 = total number of THUMBS_UP a person gives to other\n+             people for their reviews.\n+        N1 = total points (weighted) of THUMBS_DOWN a person gets for all\n+             reviews he did.\n+        N2 = total number of THUMBS_DOWN a person gives to other people for\n+             their reviews.\n+\n+        Then final score, denote by S, is as follows:\n+\n+        S =  P1 - N1 + c1 * P2 + c2 * N2\n+\n+        where c1 = 0.05, c2 = 0.2. One will get at least 0.1 point for a\n+        positive reaction they received, so we want c1 be smaller than that.\n+        c2 is larger because people are reluctant to give negative reactions.\n+        In all, bonus points (P2 and N2) aim to encourage people to do\n+        meta-reviews, but we don't want them to dominate.\n+\n+        Also update score of each review comment.\n+        \"\"\"\n+        self.logger.info('update scores of all participants')\n+        # coefficients of the formula\n+        c1, c2 = 0.05, 0.2\n+        for key, participant in self.participants.items():\n+            # parameters to be used in the formula\n+            p1, p2, n1, n2 = 0, 0, 0, 0\n+            # number of positive/negative reactions received\n+            pos_cnt, neg_cnt = 0, 0\n+\n+            # get reactions received\n+            reactions_in = participant.receive.all()\n+            for reaction in reactions_in:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, receiver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                # get weight factor of the reaction giver\n+                weight_factor = reaction.giver.weight_factor\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction received is %s, positive'\n+                                      % reaction.content)\n+                    p1 += weight_factor\n+                    pos_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.pos += 1\n+                    reaction.review.weighted_pos += weight_factor\n+                    reaction.review.score += weight_factor\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction received is %s, negative'\n+                                      % reaction.content)\n+                    n1 += weight_factor\n+                    neg_cnt += 1\n+                    # also update score of review comment\n+                    reaction.review.neg += 1\n+                    reaction.review.weighted_neg += weight_factor\n+                    reaction.review.score -= weight_factor\n+                else:\n+                    self.logger.debug('reaction received is %s, ignore'\n+                                      % reaction.content)\n+\n+            # get reactions give away\n+            reactions_out = participant.give.all()\n+            for reaction in reactions_out:\n+                # skip old reactions since they were counted before\n+                last_active_at = participant.last_active_at\n+                if last_active_at and reaction.created_at < last_active_at:\n+                    self.logger.debug('reaction created at %s, giver '\n+                                      'last active at %s, skip'\n+                                      % (reaction.created_at,\n+                                         participant.last_active_at))\n+                    continue\n+\n+                if reaction.content.find('THUMBS_UP') != -1:\n+                    self.logger.debug('reaction give away is %s, positive'\n+                                      % reaction.content)\n+                    p2 += 1\n+                elif reaction.content.find('THUMBS_DOWN') != -1:\n+                    self.logger.debug('reaction give away is %s, negative'\n+                                      % reaction.content)\n+                    n2 += 1\n+                else:\n+                    self.logger.debug('reaction give away is %s, ignore'\n+                                      % reaction.content)\n+\n+            # update information\n+            participant.pos_in += pos_cnt\n+            participant.weighted_pos_in += p1\n+            participant.pos_out += p2\n+            participant.neg_in += neg_cnt\n+            participant.weighted_neg_in += n1\n+            participant.neg_out += n2\n+            self.logger.debug('update %s info, pos_in += %d, '\n+                              'weighted_pos_in += %.3f, pos_out += %d, '\n+                              'neg_in += %d, weighted_neg_in += %.3f, '\n+                              'neg_out += %d'\n+                              % (participant.login, pos_cnt, p1, p2,\n+                                 neg_cnt, n1, n2))\n+\n+            # update score\n+            s = p1 - n1 + c1 * p2 + c2 * n2\n+            self.logger.debug('update %s score, before: %.3f, after: %.3f'\n+                              % (participant.login, participant.score,\n+                                 participant.score + s))\n+            participant.score += s\n+\n+    def __update_rankings(self):\n+        \"\"\"\n+        Calculate and update rankings based on scores by making\n+        use of Django built-in sorting method\n+        \"\"\"\n+        self.logger.info('update rankings of all participants')\n+\n+        # save participants data into database first\n+        self.__dump_participants_to_database()\n+\n+        # make use of built-in order_by method to sort participants\n+        participants_all = Participant.objects.order_by('-score', '-pos_in')\n+        rank = 0\n+        last_score = -float('inf')\n+        for participant in participants_all:\n+            if rank == 0 or last_score != participant.score:\n+                rank += 1\n+                last_score = participant.score\n+\n+            # update trend = rank (last time) - rank (this time)\n+            if participant.rank:\n+                if participant.trend:\n+                    self.logger.debug('update %s trend, before: %d, after: %d'\n+                                      % (participant.login, participant.trend,\n+                                         participant.rank - rank))\n+                else:\n+                    # if last time was the first time they get a rank, then\n+                    # they don't have trend last time\n+                    self.logger.debug('update %s trend, before: N/A, after: %d'\n+                                      % (participant.login,\n+                                         participant.rank - rank))\n+                participant.trend = participant.rank - rank\n+            else:\n+                self.logger.debug('%s has no rank before, thus no trend'\n+                                  % participant.login)\n+\n+            # update rank\n+            if participant.rank:\n+                self.logger.debug('update %s rank, before: %d, after: %d'\n+                                  % (participant.login, participant.rank, rank))\n+            else:\n+                self.logger.debug('update %s rank, before: N/A, after: %d'\n+                                  % (participant.login, rank))\n+            participant.rank = rank\n+\n+            # save in memory\n+            self.participants[participant.login] = participant\n+\n+    def __update_weight_factors(self):\n+        \"\"\"\n+        Based on history data and the current iteration, recalculate weight\n+        factors (to be used in the next iteration)\n+\n+        The higher score a person has, the more impacts he has, thus his\n+        meta-reviews are more valuable.\n+\n+        For example, in a previous iteration, Alice got 2 marks, Bob got\n+        0.8 marks and Charlie got 10 marks. The calculation demo would\n+        be as follows:\n+\n+        >>> c = [2, 0.8, 10]\n+        >>> max_score = float(max(c))\n+        >>> result = [i / max_score for i in c]\n+        >>> print(result)\n+        [0.2, 0.08, 1.0]\n+        >>> result_adjust = [i * 0.9 + 0.1 for i in result]  # adjust\n+        >>> result_rounded = [round(i, 3) for i in result_adjust]\n+        >>> print(result_rounded)\n+        [0.28, 0.172, 1.0]\n+\n+        Anyone who gets negative marks from previous run will have weight\n+        factor of 0.\n+\n+        To conclude, the weight factor is a float number ranging from 0 to 1.\n+        \"\"\"\n+        max_score = 1.0\n+        # find max score\n+        for key, participant in self.participants.items():\n+            if participant.score > max_score:\n+                max_score = float(participant.score)\n+\n+        # calculate weight factors\n+        for key, participant in self.participants.items():\n+            if participant.score < 0:\n+                participant.weight_factor = 0\n+            else:\n+                participant.weight_factor = participant.score / max_score\n+                participant.weight_factor *= 0.9\n+                participant.weight_factor += 0.1\n+\n+    def __dump_participants_to_database(self):\n+        \"\"\"\n+        Dump participants data into Django database\n+        \"\"\"\n+        self.logger.info('dump participants data into database')\n+        participants = []\n+        for key, participant in self.participants.items():\n+            participants.append(participant)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all participants\n+            Participant.objects.all().delete()\n+            # bulk create all participants\n+            Participant.objects.bulk_create(participants)\n+        except Exception as ex:\n+            self.logger.error(\n+                'Something went wrong saving participants: %s' % ex)\n+\n+    def __dump_comments_to_database(self):\n+        \"\"\"\n+        Dump comments data into Django database\n+        \"\"\"\n+        self.logger.info('dump review comments data into database')\n+        comments = []\n+        for key, comment in self.comments.items():\n+            comments.append(comment)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all comments\n+            Comment.objects.all().delete()\n+            # bulk create all comments\n+            Comment.objects.bulk_create(comments)\n+        except Exception as ex:\n+            self.logger.error(\n+                'Something went wrong saving comments: %s' % ex)\n+\n+    def __dump_reactions_to_database(self):\n+        \"\"\"\n+        Dump reactions data into Django database\n+        \"\"\"\n+        self.logger.info('dump reactions data into database')\n+        reactions = []\n+        for key, reaction in self.reactions.items():\n+            reactions.append(reaction)\n+        try:\n+            # there's no way to do bulk update, so we delete and then create\n+            # bulk delete all reactions\n+            Reaction.objects.all().delete()\n+            # bulk create all reactions\n+            Reaction.objects.bulk_create(reactions)\n+        except Exception as ex:\n+            self.logger.error(\n+                'Something went wrong saving reactions: %s' % ex)\n+\n+\n+def handle():\n+    # load data from gh-board repo\n+    org_name = get_org_name()\n+\n+    # URL to grab all issues from\n+    issues_url = 'http://' + org_name + '.github.io/gh-board/issues.json'\n+\n+    logger = logging.getLogger(__name__)\n+\n+    try:\n+        content = requests.get(issues_url, timeout=10)\n+        content.raise_for_status()\n+    except Exception as ex:\n+        logger.warning('Get issues from %s failed: %s Try backup url'\n+                       % (issues_url, ex))\n+        issues_url = 'https://' + org_name + '-gh-board.netlify.com/issues.json'\n+        try:\n+            content = requests.get(issues_url, timeout=10)\n+            content.raise_for_status()\n+        except Exception as ex:\n+            logger.error('Get issues from %s failed: %s'\n+                         % (issues_url, ex))\n+\n+    try:\n+        parsed_json = content.json()\n+        handler = MetaReviewHandler(parsed_json['issues'], timezone.now())\n+        handler.handle()\n+    except json.JSONDecodeError as ex:\n+        logger.error('JSON decode error: %s' % ex)", "created_at": "2018-06-09T20:30:17Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg==", "fields": {"body": "These copy from docs/docs-requirements.txt to docs-requirements.txt.\nPlease re-review @kriti21 .", "diff": "@@ -0,0 +1,24 @@\n+overrides: coala.yaml\n+\n+name: documentation\n+\n+dependencies:\n+  - coala\n+  - '-r docs-requirements.txt'\n+\n+configuration:\n+  template_dir:\n+    - ../coala-mobans/templates/\n+    - ../coala-mobans/assets/\n+  configuration: .moban.yaml\n+  configuration_dir: ../coala-mobans/\n+targets:\n+  - requirements.txt: requirements.txt.jj2\n+copy:\n+  - docs-requirements.txt: docs/docs-requirements.txt", "created_at": "2018-06-16T06:38:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwMzcyNw==", "fields": {"body": "Hmm, I'm not sure, but IMO it's not the best way to fix this problem. Under which circumstance is data a dict? data = get_affiliated_committers_data(json_object), data = get_outside_committers_data(json_object), data = get_outside_projects_data(json_object), or data = get_portfolio_projects_data(json_object)? Maybe fix the problem in the corresponding try catch section. It could be better to fix the problem in function implementation and add docstring to indicate that return type should be a list.", "diff": "@@ -51,5 +51,7 @@ def get_data(for_what):\n             except Exception as ex:\n                 logger.error(ex)\n                 break\n+        if type(data) is not list:\n+            data = [data]", "created_at": "2018-06-16T14:00:58Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkzMjg5NQ==", "fields": {"body": "committer = AffiliatedCommitter.objects.get(name='John Vandenberg')\nThis looks better to me, and is consistent with what you do in test_import_organization_data.py", "diff": "@@ -0,0 +1,16 @@\n+from django.core.management import call_command\n+from django.test import TestCase\n+\n+from openhub.models import AffiliatedCommitter\n+\n+\n+class ImportAffiliatedCommitterDataTest(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        call_command('import_affiliated_committers_data')\n+\n+    def test_command_import_affiliated_committers_data(self):\n+        a_committers = AffiliatedCommitter.objects.all()", "created_at": "2018-06-17T15:23:38Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkzMjkzMQ==", "fields": {"body": "Could be\nself.assertIsNotNone(org)", "diff": "@@ -0,0 +1,15 @@\n+from django.core.management import call_command\n+from django.test import TestCase\n+\n+from openhub.models import Organization\n+\n+\n+class ImportOrganizationDataTest(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        call_command('import_organization_data')\n+\n+    def test_command_import_organization_data(self):\n+        org = Organization.objects.get(name='coala')\n+        self.assertIn('coala', org.name)", "created_at": "2018-06-17T15:25:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA==", "fields": {"body": "We could use ternary if we really want it short\nconst oldOrgs = oldData ? createOrgHash(oldData) : newOrgs\nbut, maybe, it's clearer if we use explicit conditional.", "diff": "@@ -25,8 +25,11 @@ module.exports = ({\n   feed_items: current,\n   data_updated: dataUpdated,\n }) => {\n-  const oldOrgs = createOrgHash(oldData)\n   const newOrgs = createOrgHash(newData)\n+  let oldOrgs = newOrgs\n+  if (oldData) {\n+    oldOrgs = createOrgHash(oldData)\n+  }", "created_at": "2018-06-20T11:32:42Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ==", "fields": {"body": "Missing newline", "diff": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" version=\"2.0\" xmlns:org=\"https://g.co/gci\" xmlns:property=\"https://g.co/gci\"><channel><title><![CDATA[Google Code-in Leaders]]></title><description><![CDATA[A feed for Google Code-in updates]]></description><link>https://gci-leaders.netlify.com</link><generator>RSS for Node</generator><lastBuildDate>Sun, 24 Dec 2017 03:04:35 GMT</lastBuildDate><atom:link href=\"https://gci-leaders.netlify.com/feed.xml\" rel=\"self\" type=\"application/rss+xml\"/><pubDate>Sun, 24 Dec 2017 03:04:35 GMT</pubDate></channel></rss>", "created_at": "2018-06-20T11:41:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg==", "fields": {"body": "This page is about contacting people.\nThis should be after \"- Give us feedback\", as a new item,\n\n\nReport any Code of Conduct violations to ....", "diff": "@@ -24,3 +24,6 @@ Modularity, clean good code as well as a high usability for both users\n and developers of analyse routines (called bears) stand in the\n foreground of the development. We will not speed up our development if\n it needs sacrificing any aspect of quality.\n+\n+\n+Please follow our Code Of Conduct, you can find it `here <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>`__.", "created_at": "2018-06-20T23:59:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIxMzc2OQ==", "fields": {"body": "there is always the option of using unittest.SkipTest it is mentioned in that section.", "diff": "@@ -12,5 +12,7 @@ def setUpTestData(cls):\n \n     def test_command_import_contributors_data(self):\n         contributors = Contributor.objects.all()\n+        if not contributors:\n+            return", "created_at": "2018-06-21T17:21:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5MzM3NA==", "fields": {"body": "move this to a different file.\nWe should have one file which is only the gamification configuration, and no other stuff.", "diff": "@@ -0,0 +1,301 @@\n+from gamification.models import (\n+    Level,\n+    Newcomer,\n+    Badge,\n+    BadgeActivity,\n+    )\n+from gamification.newcomers import get_newcomers\n+\n+\n+def create_levels():\n+    \"\"\"\n+    Create levels which will be used in the gamification system.\n+    \"\"\"\n+    level_objects_list = [\n+        Level(number=1, min_score=0, max_score=5, name='newbie'),\n+        Level(number=2, min_score=5, max_score=10, name='beginner'),\n+        Level(number=3, min_score=10, max_score=15, name='learner'),\n+        Level(number=4, min_score=15, max_score=20, name='intermediate'),\n+        Level(number=5, min_score=20, max_score=25, name='cool'),\n+        Level(number=6, min_score=25, max_score=30, name='awesome'),\n+        Level(number=7, min_score=30, max_score=35, name='master'),\n+        Level(number=8, min_score=35, max_score=40, name='legend'),\n+        Level(number=9, min_score=40, max_score=45, name='expert'),\n+    ]\n+    Level.objects.bulk_create(level_objects_list)\n+\n+\n+def create_newcomers():", "created_at": "2018-07-04T02:16:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5MzUzNw==", "fields": {"body": "create a function in a more global place which provides 'https://webservices.' + get_org_name() + '.io'", "diff": "@@ -0,0 +1,90 @@\n+import logging\n+\n+import requests\n+\n+from gamification.models import (\n+    Issue,\n+    Label,\n+    )\n+from gamification.newcomers import get_newcomers\n+from data.models import Contributor\n+from community.git import get_org_name\n+\n+\n+def get_issues(hoster):\n+    \"\"\"\n+    Get issues opened by newcomers\n+\n+    :param hoster: a string representing hoster, e.g. 'github'\n+    :return: a json of issues data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    if hoster == 'github':\n+        IMPORT_URL = ('https://webservices.' + get_org_name() +\n+                      '.io/issues/github/all')", "created_at": "2018-07-04T02:17:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5Mzk3MA==", "fields": {"body": "Git repo data should be in a different app.\nI think you already have a PR for that.", "diff": "@@ -0,0 +1,202 @@\n+from django.db import models\n+\n+from data.models import Contributor\n+\n+\n+class Label(models.Model):\n+    name = models.CharField(max_length=300)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Issue(models.Model):", "created_at": "2018-07-04T02:23:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5NDMwOQ==", "fields": {"body": "dont mention newcomers anywhere except where the component can only be possibly applicable to a newcomer.", "diff": "@@ -0,0 +1,202 @@\n+from django.db import models\n+\n+from data.models import Contributor\n+\n+\n+class Label(models.Model):\n+    name = models.CharField(max_length=300)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Issue(models.Model):\n+    number = models.IntegerField()\n+    title = models.TextField()\n+    author = models.ForeignKey(Contributor,\n+                               on_delete=models.CASCADE,\n+                               related_name='issue_author')\n+    state = models.CharField(max_length=100)\n+    repo = models.CharField(max_length=200)\n+    labels = models.ManyToManyField(Label, blank=True)\n+    assignees = models.ManyToManyField(Contributor,\n+                                       related_name='issue_assignees',\n+                                       blank=True)\n+    hoster = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return str(self.title)\n+\n+\n+class IssueNumber(models.Model):\n+    number = models.IntegerField(primary_key=True)\n+\n+    def __str__(self):\n+        return str(self.number)\n+\n+\n+class MergeRequest(models.Model):\n+    number = models.IntegerField()\n+    title = models.TextField()\n+    repo = models.CharField(max_length=200)\n+    closes_issues = models.ManyToManyField(IssueNumber, blank=True)\n+    state = models.CharField(max_length=100)\n+    author = models.ForeignKey(Contributor,\n+                               on_delete=models.CASCADE,\n+                               related_name='mr_author')\n+    assignees = models.ManyToManyField(Contributor,\n+                                       related_name='mr_assignees',\n+                                       blank=True)\n+    ci_status = models.BooleanField()\n+    labels = models.ManyToManyField(Label, blank=True)\n+    hoster = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+class Activity(models.Model):\n+    name = models.TextField()\n+    points = models.IntegerField()\n+\n+    # Number of times this activity has been performed by the\n+    # same newcomer\n+    number_of_times = models.IntegerField(default=1, null=True)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Level(models.Model):\n+    number = models.IntegerField(primary_key=True)\n+    min_score = models.BigIntegerField()\n+    max_score = models.BigIntegerField()\n+    name = models.TextField()\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class BadgeActivity(models.Model):\n+    name = models.TextField()\n+\n+    # Number of times a newcomer have to perform this activity\n+    # to get this badge.\n+    number_of_times = models.IntegerField(default=1, null=True)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Badge(models.Model):\n+    number = models.IntegerField(primary_key=True)\n+    name = models.CharField(max_length=200)\n+    details = models.TextField(null=True)\n+\n+    # Activities a newcomer have to perform to get this badge\n+    b_activities = models.ManyToManyField(BadgeActivity)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Newcomer(models.Model):\n+    username = models.CharField(max_length=100, primary_key=True)\n+\n+    # Total points earned by the newcomer\n+    score = models.IntegerField(default=0, null=True)\n+\n+    # Current level\n+    level = models.ForeignKey(Level, on_delete=models.CASCADE,\n+        default=1, null=True)  # Ignore PycodestyleBear (E128)\n+\n+    # All the activities performed\n+    activities = models.ManyToManyField(Activity)\n+    badges = models.ManyToManyField(Badge)\n+\n+    def __str__(self):\n+        return self.username\n+\n+    class Meta:\n+        ordering = ['-score']\n+\n+    def add_points(self, points, activity_string):\n+        \"\"\"\n+        Update score, level and add activities peformed.\n+\n+        :param points: an integer value representing the\n+                       points earned by the newcomer\n+                       for performing an activity\n+        :param activity_string: represents the activity\n+                                performed by the newcomer\n+        \"\"\"\n+        self.update_score_and_level(points)\n+        self.add_activity(points, activity_string)\n+\n+    def deduct_points(self, points_to_deduct, activity_string):\n+        \"\"\"\n+        Deduct points for performing some specific activities.\n+        \"\"\"\n+        self.add_points(-points_to_deduct, activity_string)\n+\n+    def find_level_for_score(self, score):\n+        \"\"\"\n+        Find suitable level based on the total score earned.\n+        \"\"\"\n+        level = Level.objects.get(min_score__lte=score, max_score__gt=score)\n+        return level\n+\n+    def update_score_and_level(self, points):\n+        \"\"\"\n+        Update score and level based on points.\n+        \"\"\"\n+        if points < 0 and self.score < abs(points):\n+            new_score = self.score = 0\n+        else:\n+            self.score += points\n+            new_score = self.score\n+\n+        new_level = self.find_level_for_score(new_score)\n+        if new_level.number > self.level.number:\n+            self.level = new_level\n+\n+    def add_activity(self, points, activity_string):\n+        \"\"\"\n+        Add activity to the newcomer.\n+\n+        This methof checks if the current activity is\n+        already peformed by the user, if yes, then it\n+        increase the 'number_of_times' field with one.\n+        If not then it adds a new activity to the newcomer.\n+        \"\"\"\n+        activity, created = Activity.objects.get_or_create(\n+            name=activity_string, points=points)\n+        if created:\n+            activity.save()\n+            self.activities.add(activity)\n+        else:\n+            activity.number_of_times += 1\n+            activity.save()\n+\n+    def find_badges_for_activity(self, activities):\n+        \"\"\"\n+        Find the badge based on the activities peformed by the newcomer.\n+\n+        :param activities: a QuerySet dict containing the 'name'\n+                           as key and 'name of the activity' as value\n+        :return: a badge object\n+        \"\"\"\n+        activities = [activity['name'] for activity in activities]\n+        badge = Badge.objects.filter(\n+            b_activities__name__in=activities).distinct()\n+        return badge\n+\n+    def add_badge(self, activities):\n+        \"\"\"\n+        Add badge to newcomer based on the activities performed.", "created_at": "2018-07-04T02:25:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAxNjQ2MQ==", "fields": {"body": "id=\"search\" class=\"validate\" can you remove those suplimentar spaces there?", "diff": "@@ -1,8 +1,9 @@\n <section>\n <div class=\"main-content container\">\n \n-    <div class=\"col-md-8 col-md-offset-2\">\n-        <input ng-model=\"searchText\" placeholder=\"Search for a bear or a language\" id=\"search\" type=\"text\" class=\"validate\">\n+    <div class=\"col-md-8 col-md-offset-2 input-field\">\n+      <input ng-model=\"searchText\" placeholder=\"Search for a bear or a language\" id=\"search\"   class=\"validate\" type=\"search\" required>", "created_at": "2017-02-08T08:54:21Z", "last_edited_at": null, "author": "impmihai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAyODE4Mg==", "fields": {"body": "@gkrishnan724  I think this will help text centering  to be backwards compatible as its in -moz-placeholder (firefox 18-)", "diff": "@@ -223,19 +227,19 @@ textarea.materialize-textarea {\n }\n :-moz-placeholder {\n   /* Firefox 18- */\n-\n+  text-align: center;", "created_at": "2017-02-08T09:56:30Z", "last_edited_at": "2017-02-08T09:57:35Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0MzQzMg==", "fields": {"body": "Can we have \"This helps devs whose favourite tools were not supported\"?", "diff": "@@ -1,39 +1,48 @@\n-This project enhances our linter framework and creates a number\n-of third party tool integrations.\n-\n A very easy way to cover a broad spectrum of analysis routines\n is wrapping linters into coala. Currently we have the `@linter` decorator\n which simplifies this integration. Based on this decorator, a large selection\n-of linters can be implemented rapidly. A tutorial on writing linter bears is\n+of linters can be implemented rapidly. \n+\n+This project would widen the range of existing linters coala supports and makes \n+them available for usage in coala. This helps devs that had their favourite tools\n+not supported before. It also enhances the testing API of linter bears, which are", "created_at": "2017-02-08T19:05:26Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NDQ0Ng==", "fields": {"body": "most students dont know what a cEP is. Maybe link to https://coala.io/cep", "diff": "@@ -1,28 +1,57 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. With it, coala runs\n+code analysis only on files that had changed since the last run, giving a\n+huge amortized performance improvement compared to simply running coala on\n+everything regardless. But it is still rather slow and there is still\n+room for improvement.\n \n-Own performance optimization ideas are highly encouraged!\n+For example, we recently discovered that we have been importing all\n+the required modules irrespective of the conditional branch the program\n+takes - some branches do not require some modules. We improved this\n+by lazy-loading only the required modules as and when they are required - and\n+this greatly improved coala's startup speed.\n \n+Performance is key to usability - with faster runtimes, users can get on\n+with their work quicker. And it's fun looking for performance bottlenecks!\n+\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n+\n+The student is also highly encouraged to come up with new solutions that may\n+increase performance even further.\n \n #### Milestones\n \n-##### GSOC 2017 COMMUNITY BONDING\n+##### PREPARATION/BONDING\n+\n+* The applicant has identified at least 3 other performance bottlenecks that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  ", "created_at": "2017-02-08T19:09:55Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NTU4Nw==", "fields": {"body": "they are in the .js file and displayed next to the text", "diff": "@@ -1,28 +1,57 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. With it, coala runs\n+code analysis only on files that had changed since the last run, giving a\n+huge amortized performance improvement compared to simply running coala on\n+everything regardless. But it is still rather slow and there is still\n+room for improvement.\n \n-Own performance optimization ideas are highly encouraged!\n+For example, we recently discovered that we have been importing all\n+the required modules irrespective of the conditional branch the program\n+takes - some branches do not require some modules. We improved this\n+by lazy-loading only the required modules as and when they are required - and\n+this greatly improved coala's startup speed.\n \n+Performance is key to usability - with faster runtimes, users can get on\n+with their work quicker. And it's fun looking for performance bottlenecks!\n+\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.", "created_at": "2017-02-08T19:15:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3ODM3NA==", "fields": {"body": "Two spaces before extracted to make it inline with the above point, also do the same with the other points", "diff": "@@ -0,0 +1,53 @@\n+[coala-quickstart](https://github.com/coala/coala-quickstart) is a tool that\n+helps users to quickly get started with coala. It generates a `.coafile`\n+(coala's configuration file) that is tailored to the project. Currently,\n+coala-quickstart automatically identifies relevant bears for the project\n+based on the languages used and has a clean and simple command-line interface \n+for taking user\u2019s input when required.\n+\n+However, there\u2019s scope for improvement in the following areas:\n+\n+- Utilizing information from common configuration files: Some projects have\n+  configuration files like `Gruntfile.js`, `Gulpfile.js`, `rakefile`,\n+  `package.json`, etc which may contain useful data that's relevant to\n+  coala-quickstart. For example, if a project's Gulpfile.js specifies which\n+  files are to be linted with csslint, we could use this information to target\n+  CSSLintBear at exactly these files.\n+- Improving the interface: \n+\t- Removing non user-friendly warnings.\n+\t- Increasing automation.\n+\t- Validate user input before writing to the generated coafile.\n+- Continuous Integration: Like other coala repositories, add Appveyor \n+  (Windows) and Travis (OSX) integartions.\n+\n+In addition to the above changes the applicants are encouraged to come up with\n+their own ideas.\n+\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+* The applicant has identified all the kinds configuration files to be worked\n+on in the project.\n+* The applicant has figured out all the useful information that could be\n+extracted from these files.\n+\n+##### CODING PHASE 1\n+\n+* The basic structure of the information extraction and filtering relevant\n+bears system is implemented.\n+* coala-quickstart is able to utilize information from at leaset one of the", "created_at": "2017-02-25T12:56:40Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MTg2OQ==", "fields": {"body": "Change an ->a so it would be a universal DistributionRequirement.", "diff": "@@ -18,30 +18,72 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.", "created_at": "2017-03-26T04:55:04Z", "last_edited_at": null, "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MjcxOA==", "fields": {"body": "\"Find dependencies for each bear in all platforms, and add them to the REQUIREMENTS tuple of that bear.\"", "diff": "@@ -18,30 +18,72 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.\n+\n+How this will work: Each requirement class will have an \"install_command\" and\n+an \"install\" method. We will just call requirement.install() and this will\n+run the command on its' own, not caring which platform you're on. Ideally,\n+requirement.install() will use \"install_command\" to generate the command and\n+run it with \"sarge\". For the DistributionRequirement class, the\n+\"install_command\" method will check on which platform you are, and it will\n+generate the according command.\n+If the package is named differently on each platform, it shall be specified\n+in the constructor. Take a mock example for a random bear:\n+\n+REQUIREMENTS=(DistributionRequirement(\n+  apt-get='csslint', dnf='csslinter', brew='csslt')\n+\n+If you're on Ubuntu, it will run \"apt-get install csslint\". If you're on\n+Fedora, it will run \"dnf install csslinter\", and so on.\n+If your package manager is not on the list, we should just print a warning\n+message so that the user tries to install it manually.\n+\n+So cib should not care what kind of requirement each is, it should just\n+iterate through requirement instances and run \"install_command()\" on each,\n+the requirement class handling the rest.\n+\n+Another special case is made of bears which hold different installations\n+for each distribution. A good example is DartLintBear: it has different\n+installation options for Linux (a wget script), Windows and Mac.\n+https://www.dartlang.org/install\n+\n+A good idea to treat these is Conda: a conda package contains a script\n+for each operating system (a .sh for Mac/Linux and a .bat for Windows).\n+When you try to install the conda package, it will run the according script.\n+\n+The last special case is made out of bears which have bear dependencies.\n+We have quite a few (the Clang bears). For these, we should have a\n+BearRequirement class which handles them.\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n * A cEP that describes cib is merged.\n * https://github.com/coala/coala-bears/issues/845 is solved.\n+* cib should be tested with full coverage.\n \n ##### CODING PHASE 1\n \n * All bears should have dependencies sorted out.\n+* The requirement classes should be rewritten so that most of the work is\n+  done within them, cib only having to run their methods and to gather the\n+  bears.\n * Tests should be written for all the dependencies and the classes.\n * All requirement classes shall be properly documented.\n \n ##### CODING PHASE 2\n \n * Platform dependencies should be working.", "created_at": "2017-03-26T06:13:05Z", "last_edited_at": null, "author": "vijeth-aradhya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1NDczNA==", "fields": {"body": "Isn't that repetetion of what he has explained earlier in the file?", "diff": "@@ -18,30 +18,72 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.\n+\n+How this will work: Each requirement class will have an \"install_command\" and\n+an \"install\" method. We will just call requirement.install() and this will\n+run the command on its' own, not caring which platform you're on. Ideally,\n+requirement.install() will use \"install_command\" to generate the command and\n+run it with \"sarge\". For the DistributionRequirement class, the\n+\"install_command\" method will check on which platform you are, and it will\n+generate the according command.\n+If the package is named differently on each platform, it shall be specified\n+in the constructor. Take a mock example for a random bear:\n+\n+REQUIREMENTS=(DistributionRequirement(\n+  apt-get='csslint', dnf='csslinter', brew='csslt')\n+\n+If you're on Ubuntu, it will run \"apt-get install csslint\". If you're on\n+Fedora, it will run \"dnf install csslinter\", and so on.\n+If your package manager is not on the list, we should just print a warning\n+message so that the user tries to install it manually.\n+\n+So cib should not care what kind of requirement each is, it should just\n+iterate through requirement instances and run \"install_command()\" on each,\n+the requirement class handling the rest.\n+\n+Another special case is made of bears which hold different installations\n+for each distribution. A good example is DartLintBear: it has different\n+installation options for Linux (a wget script), Windows and Mac.\n+https://www.dartlang.org/install\n+\n+A good idea to treat these is Conda: a conda package contains a script\n+for each operating system (a .sh for Mac/Linux and a .bat for Windows).\n+When you try to install the conda package, it will run the according script.\n+\n+The last special case is made out of bears which have bear dependencies.\n+We have quite a few (the Clang bears). For these, we should have a\n+BearRequirement class which handles them.\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n * A cEP that describes cib is merged.\n * https://github.com/coala/coala-bears/issues/845 is solved.\n+* cib should be tested with full coverage.\n \n ##### CODING PHASE 1\n \n * All bears should have dependencies sorted out.\n+* The requirement classes should be rewritten so that most of the work is\n+  done within them, cib only having to run their methods and to gather the\n+  bears.\n * Tests should be written for all the dependencies and the classes.\n * All requirement classes shall be properly documented.\n \n ##### CODING PHASE 2\n \n * Platform dependencies should be working.\n+* Conda packages should be created for all bears which need such deps.", "created_at": "2017-03-26T08:13:33Z", "last_edited_at": null, "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2MTk4NQ==", "fields": {"body": "its' -> its", "diff": "@@ -18,30 +18,73 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.\n+\n+How this will work: Each requirement class will have an \"install_command\" and\n+an \"install\" method. We will just call requirement.install() and this will\n+run the command on its' own, not caring which platform you're on. Ideally,", "created_at": "2017-03-26T14:29:42Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyODQwOA==", "fields": {"body": "But that could cause problems with all newcomers pinging for reviews.", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.", "created_at": "2017-03-29T16:49:36Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyOTA0Mg==", "fields": {"body": "Gamification could be a problem. Many people pinging for reviews. People complaining that they did not get reviews on time and hence were delayed. People fighting over badges depending on the weight they carry. We had this in the uni system for a while with assignment submissions and the gamification turned into an absolute nightmare. We could have newcomers fighting to get things merged rather than actually focusing on the process of learning. Statistics are okay as a motivator but gamification should be given a rethink.", "diff": "@@ -561,5 +561,26 @@ coala should support generating metrics for your code.\",\n \t  \"tags\" : [\"Information Extraction\", \"CLI\", \"CI\"],\n \t  \"markdown\" : \"enhance_coala_quickstart.md\",\n \t  \"collaborating_projects\" : [\"coala\"]\n+\t},\n+\t{\n+\t\t\"name\" : \"Newcomer metrics and gamification\",", "created_at": "2017-03-29T16:52:16Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjE5Ng==", "fields": {"body": "Irrelevant change :)", "diff": "@@ -561,5 +561,26 @@ coala should support generating metrics for your code.\",\n \t  \"tags\" : [\"Information Extraction\", \"CLI\", \"CI\"],\n \t  \"markdown\" : \"enhance_coala_quickstart.md\",\n \t  \"collaborating_projects\" : [\"coala\"]\n+\t},\n+\t{\n+\t\t\"name\" : \"Newcomer metrics and gamification\",\n+\t\t\"desc\" : \"Provide public metrics about newcomers and the newcomer process.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"At least one patch to each of coala-landing and coala-html should \\\n+\t\t\tbe accepted and merged.\",\n+\t\t\t\"The student should be familiar with web design tools & trends.\",\n+\t\t],\n+\t\t\"difficulty\" : \"medium\",\n+\t\t\"issues\" : [\n+\t\t\t\"https://github.com/coala/coala-quickstart/issues/22\",\n+\t\t\t\"https://github.com/coala/coala-quickstart/issues/42\"", "created_at": "2017-04-01T10:04:30Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjI4MQ==", "fields": {"body": "I think \"Number of gitter messages by the newcomer\" should not be considered, because either it will motivate them to spam or prevent them from asking/giving help for even the genuine problems (if large no. messages are penalized)\nimo it should be the quality of their questions/replies on the gitter that should be measured.", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer", "created_at": "2017-04-01T10:10:52Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4MjE3Ng==", "fields": {"body": "leaves.  koalas eat leaves ;P", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer\n+\n+All of those can be improved by considering the size (bytes, etc) in addition to the 'number'.", "created_at": "2017-04-03T10:17:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMjcyOA==", "fields": {"body": "\"large no. messages are penalized\" would be penalised, like all the others.  quality cant be measured, easily ;-)\nThe penalty for gitter messages would be lower than penalty for gitmate errors, and PR iterations.  Smart people decide to ask for help rather than screw up a PR. ;-)", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer", "created_at": "2017-04-02T16:14:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMzc2Mw==", "fields": {"body": "I've an idea to measure the quality of messages. We can have the weekly/monthly feed of all the messages of the contributor and have let every maintainer submit a rating (on scale of 10 maybe) of the feed. The quality is the averaged rating given by the maintainers.", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer", "created_at": "2017-04-02T16:55:54Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDU0NzU3NA==", "fields": {"body": "why do you make a new class, doesn't p do the job?", "diff": "@@ -3,8 +3,16 @@\n         <div class=\"col-md-8 col-md-offset-2\">\n             <div class=\"title-get-involved\">about</div>\n             <br>\n-            <div class=\"get-description\">\n-                \n+            <div class=\"about-description\">", "created_at": "2017-04-09T17:14:52Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTAxMQ==", "fields": {"body": "You could add use vulture to report dead code for popular Python projects on github to the preparation phase (see jendrikseipp/vulture#38).", "diff": "@@ -42,16 +42,19 @@ References:\n ", "created_at": "2017-05-10T21:47:13Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTUwNw==", "fields": {"body": "Another point: refine default whitelist", "diff": "@@ -42,16 +42,19 @@ References:\n \n - Vulture offers its functionality as a library\n - The VultureBear uses the new vulture library\n-\n-##### CODING PHASE 2\n-\n - Confidence values are implemented for vulture results\n \n-##### CODING PHASE 3\n+##### CODING PHASE 2\n \n+- Configuring vulture so as to subsume a whitelist file by default.", "created_at": "2017-05-10T21:49:46Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTcxMA==", "fields": {"body": "Also: create whitelist files for popular Python frameworks like Django", "diff": "@@ -42,16 +42,19 @@ References:\n \n - Vulture offers its functionality as a library\n - The VultureBear uses the new vulture library\n-\n-##### CODING PHASE 2\n-\n - Confidence values are implemented for vulture results\n \n-##### CODING PHASE 3\n+##### CODING PHASE 2\n \n+- Configuring vulture so as to subsume a whitelist file by default.", "created_at": "2017-05-10T21:50:52Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTkzMDQ1NA==", "fields": {"body": "Yes, I think this is feasible. The default whitelist (like all whitelist files) will always be a work-in-progress, but I think we can lay a solid foundation here.", "diff": "@@ -42,16 +42,19 @@ References:\n \n - Vulture offers its functionality as a library\n - The VultureBear uses the new vulture library\n-\n-##### CODING PHASE 2\n-\n - Confidence values are implemented for vulture results\n \n-##### CODING PHASE 3\n+##### CODING PHASE 2\n \n+- Configuring vulture so as to subsume a whitelist file by default.\n - If a way was found to offer source ranges, the removal of dead code is\n   implemented for the VultureBear using a confidence value as threshold.\n - If no way was found, additional detection cases for vulture are implemented.\n   In this case the last milestone has to be reimplemented during the Bonding and\n   coding phase 1 in cooperation with the coala and vulture mentors.", "created_at": "2017-05-11T08:22:07Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0NzQzMw==", "fields": {"body": "I think you should try to not change vulture at all for this part. Try to change VultureBear to use vulture as a library without changing vulture. If we notice that vulture is missing some function, we can implement it later.", "diff": "@@ -1,57 +1,105 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. Strategy here would be to:\n+\n+\t* Parse all files straight away from dict(filename: filecontent)  - This would highly improve the performance of the bear later due to the time we save of memory copying.\n+\t* Return a sorted list of tuples [(item.filename, item.lineno, item.typ, item)...] - which would be easily configurable.", "created_at": "2017-05-24T13:11:15Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0OTExNw==", "fields": {"body": "remove second \"default\"", "diff": "@@ -1,57 +1,105 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. Strategy here would be to:\n+\n+\t* Parse all files straight away from dict(filename: filecontent)  - This would highly improve the performance of the bear later due to the time we save of memory copying.\n+\t* Return a sorted list of tuples [(item.filename, item.lineno, item.typ, item)...] - which would be easily configurable.\n+\t*  This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed) \n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence the API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist default", "created_at": "2017-05-24T13:18:24Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQ2NDcyNA==", "fields": {"body": "you are missing a files statement here.", "diff": "@@ -13,3 +13,13 @@ max_lines_per_file = 200\n bears = FilenameBear\n files = **.yml, **.html, **.md, **.js, **.css\n ignore = vendors/**, data/projects/integrate-pyflakes-AST.md\n+\n+[spacing]\n+bears = SpaceConsistencyBear\n+ignore = vendors/**\n+use_spaces = True", "created_at": "2017-05-25T11:08:06Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0NzU4NQ==", "fields": {"body": "remove \"the suitable\"", "diff": "@@ -1,57 +1,128 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed)\n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence the API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist\n+The first step here would be to make the whitelist default. The important thing would be to identify possible cases which might cause vulture to report a false positive. This can be achieved through extensive testing with major projects - trending python projects on github would cater to our need for the purpose. This approach would serve us many benefits:\n+\n+- We can identify instances of what should ideally be in our whitelist file - as we may find any lesser known constructs.\n+- We can test vulture for any unreported bugs.\n+- We can find many projects which use/might want to use vulture - they may further collaborate with us in making the whitelists together. (As proposed by [@jendrikseipp](https://github.com/jendrikseipp))\n+- We can also make whitelists for popular python frameworks like Django, etc.\n+\n+\n+##### 3.) Acquiring source range and implementing auto-removal\n+Analyse and discuss with the community the utilities of ast or enhanced pyflake ast for what would better cater to our problem and would offer simplicity for source-range acquisition and arrive at a concrete conclusion. Also, there was another proposal by [@m0hawk](https://bitbucket.org/m0hawk) to get everything until the next node starts. Dialogue here - [#25](https://github.com/jendrikseipp/vulture/issues/25)\n+\n+Also, if able to fetch the source range successfully, implement the pathway through which  the metadata flows in and out of API, this would not require much work because  we can easily change item.lineno (int) to item.dead_range (tuple of ints) and can parse them over in the VultureBear.\n+\n+##### 4.) Detecting unreachable code\n+We would first need to identify cases where code cannot be reached. Some of the common ones are:\n+\n+- `If False`\n+- `If True; else`\n+- Any code after `return` statement in the block containing return itself.\n+- `raise` statement  in `try` block.\n+\n+Similar constructs would have to be looked onto. The crude form of this would be:\n+\n+- Analyse the ast\u2019s\n+- Look for the if nodes\n+- Check the boolean affiliated to it, tracking previous arguments.\n+\n+\n+##### 5.) Implementing a confidence value for  results\n+We would need to analyse every construct individually on a case by case basis. For example, we already know that import statements can be predicted with 100% surety (except for * imports, where it would be 0%), but functions often have false-positives.\n+\n+The confidence value will be alike the ones given below: (The finer grained distinctions will need further discussion)\n+\n+- `import` -->  `100%`\n+- `from foo import *` --> `0%`\n+- `variable` --> `<100%`\n+- `function` --> `<100%`\n+- `class` --> `<100%`\n+- `if False` --> `100%`\n \n References:\n \n-- [vulture](https://bitbucket.org/jendrikseipp/vulture)\n+- [vulture](https://github.com/jendrikseipp/vulture)\n+- [Project Proposal](https://docs.google.com/document/d/1gzRH-rdJsiAD-TOEB0O4OqtcnTp0zotcNl6agAuXGHw/edit?usp=sharing)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### Pre - Community Bonding Period ( Up Till  May 4)\n+- Initial investigation and discussion on what features to be added to API, and start implementing them on the go.\n+- Continue discussion with the community on ast and enhanced pyflakes ast - What are the underlying differences, and what can be possible implementations for source range acquisition.\n+- Diagnose possible cases which would render the code unreachable.\n+- Inculcate a habit of downloading the trending project of the day, running vulture on it, analyzing the results and adding anything suitable to whitelist file. This would help us in maintaining a rich whitelist file.\n+- Prioritize all the goals and targets\n+\n+##### Community Bonding (May 5 - 30)\n+- Finalize what should be implemented for source range acquisition on the basis of discussions during pre - community bonding period.\n+- Implement API - At this point, we would have a fully functioning API, and we would be ready to incorporate these changes into the VultureBear.\n+- Refactor VultureBear to incorporate API - This would be relatively easy as the API would have had until now respected it\u2019s usage in the VultureBear.\n+\n+##### Week 1 & 2 (May 31 - June 13)\n+- Implement API - At this point, we would have a fully functioning API, and we would be ready to incorporate these changes into the VultureBear.\n+- Refactor VultureBear to incorporate API - This would be relatively easy as the API would have had until now respected it\u2019s usage in the VultureBear.\n+\n+##### Week 3 (June 14 - 20)\n+- Realize VultureBear completely - At this point, it should be able to execute vulture, parse output, produce the patch file for removing the dead code what so ever found.\n+Review the tests written so far and add relevant test cases.\n+- Document Bear\n+- API documentation including, but not limited to possible use cases, example code snippets\n+- See that code is completely documented in place\n+- Buffer time to finish pending work.\n \n-- A concept for the source range acquisition is finalized.\n+##### Week 4 (June 20 - 26)\n+- Develop an analysis report on what all constructs can we detect with complete surety,  partial surety and the ones we cannot detect for the sake of implementing a confidence value with results. (A crude version is here in this thread).\n+- Discuss on the levels of certainty we would need to have (perhaps four for highly accurate (100%), accurate (>80%), medium (70 - 80%) and can\u2019t say)\n \n-##### CODING PHASE 1\n+##### Week 5 (June 27 - July 4)\n+- Create whitelist files for popular Python frameworks like Django\n+- Configure vulture in order to ensure that whitelist is taken into account by default.\n+- Updating docs and writing tests.\n \n-- Vulture offers its functionality as a library\n-- The VultureBear uses the new vulture library\n+##### Week 6 (July 4 - 15)\n+- Adapt to the strategy worked during community bonding period for obtaining source range.\n \n-##### CODING PHASE 2\n+##### Week 7 & 8 (July 15 - 29)\n+- Diagnose the instances of unreachable code, our concern here would be to identify all such cases which would render the code unreachable, like the if False; if True: else; code after return statements, etc. - Adding this to the dead code classes, under a new category: get_unreachable\n \n-- Confidence values are implemented for vulture results\n+##### Week 9 (August 1 - 7)\n+- Integrate these results with the VultureBear, which would primarily consist of:\n+- Transmitting source range, and unreachable code instances through API\n+- Yielding the results of Bear in the new format.\n \n-##### CODING PHASE 3\n+##### Week 11 (August 8 - 17)\n+- Adding the suitable documentation for the new changes incorporated in the API, Bear and vulture itself.", "created_at": "2017-05-28T19:26:59Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzMjQzNA==", "fields": {"body": "Why not use checkboxes? I don't know if the website will render it though.", "diff": "@@ -14,27 +14,30 @@ coala. The specific areas and points to focus on are:\n 5. Make the implementation of ApplyPatchAction log the applied patch.\n 6. Reprompt after running actions only if the action says so.\n \n-The end goal of the project is to make coala easier to use, hence the\n-project is going to rely heavily upon mockups and feedback from the\n-community. Also, in addition to the above changes the applicant is encouraged\n-to come up with their own ideas to improve the CLI.\n+The end goal of the project is to:\n+* _Make coala easier to use_\n+* _Adds new functionality so the user could have multiple options when he uses coala_", "created_at": "2017-05-28T03:38:45Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTA5Njc4NQ==", "fields": {"body": "minor typo prioritization *", "diff": "@@ -38,33 +40,64 @@ The difference between this project and \"Convert Bears to Aspects\" is that the\n other project focuses on defining aspects on *each bears* while this project\n implements how the coala core is handling bears that use aspects.\n \n-References\n+**Implementation**\n+\n+This project could be divided into 3 main step, which is:\n+\n+1. aspect based configuration\n+\n+Define new option and variable that could be used on coafile to define list\n+of aspect and taste that user want to run over the project.\n+\n+2. Bear picking strategy\n+\n+Implement required algorithm to pick list of bear based on required aspect on\n+coafile. This involve collecting all bears metadata to read its capability and\n+prioritizing picking by few criteria like choosing bear that could fix the\n+problem (not only detect), minimizing number of individual bears, and\n+minimizing different runtime environment of external linter bear.\n+\n+3. Documentation, depreciation, and testing\n+\n+Writing or updating documentation on how aspect work and how to write new\n+configuration file. Also I plan to do an integration test that will run coala\n+with new aspect based configuration and the old one over an example project\n+and compare the result.\n+\n+**References**\n \n-* Aspects concept based on\n+* aspects concept based on\n   [cEP-0005](https://github.com/coala/cEPs/blob/master/cEP-0005.md)\n * Proposal on how new bears could be designed\n   [cEP-0002](https://github.com/coala/cEPs/blob/master/cEP-0002.md)\n-* Current aspects prototype\n-  [coala/aspect-docs](https://github.com/coala/aspect-docs)\n+* Current aspects code on\n+  [coala/coala](https://github.com/coala/coala/tree/master/coalib/bearlib/aspects)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### [PREPARATION/BONDING](https://gitlab.com/coala/GSoC-2017/milestones/36)\n \n * A solid plan for the implementation and the exact features exist.\n * Any needed changes to [cEP-0005](https://coala.io/cep5) have been merged.\n \n-##### CODING PHASE 1\n+##### [CODING PHASE 1](https://gitlab.com/coala/GSoC-2017/milestones/37)\n \n * coala understands the new aspect-based configuration file.\n * The new aspect-based configuration file is documented properly.\n+* Fix one issue on autoflake\n \n-##### CODING PHASE 2\n+##### [CODING PHASE 2](https://gitlab.com/coala/GSoC-2017/milestones/38)\n \n-* coala can choose the right bears for an aspect.\n+* coala can pick the right bears to resolve an aspect.\n+* coala use few prioritazion criteria to pick those bear.", "created_at": "2017-05-30T13:22:45Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MjQ1Mg==", "fields": {"body": "could you keep the phases section in the document, and put the relevant weeks inside them", "diff": "@@ -1,57 +1,126 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed)\n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence the API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist\n+The first step here would be to make the whitelist default. The important thing would be to identify possible cases which might cause vulture to report a false positive. This can be achieved through extensive testing with major projects - trending python projects on github would cater to our need for the purpose. This approach would serve us many benefits:\n+\n+- We can identify instances of what should ideally be in our whitelist file - as we may find any lesser known constructs.\n+- We can test vulture for any unreported bugs.\n+- We can find many projects which use/might want to use vulture - they may further collaborate with us in making the whitelists together. (As proposed by [@jendrikseipp](https://github.com/jendrikseipp))\n+- We can also make whitelists for popular python frameworks like Django, etc.\n+\n+\n+##### 3.) Acquiring source range and implementing auto-removal\n+Analyse and discuss with the community the utilities of ast or enhanced pyflake ast for what would better cater to our problem and would offer simplicity for source-range acquisition and arrive at a concrete conclusion. Also, there was another proposal by [@m0hawk](https://bitbucket.org/m0hawk) to get everything until the next node starts. Dialogue here - [#25](https://github.com/jendrikseipp/vulture/issues/25)\n+\n+Also, if able to fetch the source range successfully, implement the pathway through which  the metadata flows in and out of API, this would not require much work because  we can easily change item.lineno (int) to item.dead_range (tuple of ints) and can parse them over in the VultureBear.\n+\n+##### 4.) Detecting unreachable code\n+We would first need to identify cases where code cannot be reached. Some of the common ones are:\n+\n+- `If False`\n+- `If True; else`\n+- Any code after `return` statement in the block containing return itself.\n+- `raise` statement  in `try` block.\n+\n+Similar constructs would have to be looked onto. The crude form of this would be:\n+\n+- Analyse the ast\u2019s\n+- Look for the if nodes\n+- Check the boolean affiliated to it, tracking previous arguments.\n+\n+\n+##### 5.) Implementing a confidence value for  results\n+We would need to analyse every construct individually on a case by case basis. For example, we already know that import statements can be predicted with 100% surety (except for * imports, where it would be 0%), but functions often have false-positives.\n+\n+The confidence value will be alike the ones given below: (The finer grained distinctions will need further discussion)\n+\n+- `import` -->  `100%`\n+- `from foo import *` --> `0%`\n+- `variable` --> `<100%`\n+- `function` --> `<100%`\n+- `class` --> `<100%`\n+- `if False` --> `100%`\n \n References:\n \n-- [vulture](https://bitbucket.org/jendrikseipp/vulture)\n+- [vulture](https://github.com/jendrikseipp/vulture)\n+- [Project Proposal](https://docs.google.com/document/d/1gzRH-rdJsiAD-TOEB0O4OqtcnTp0zotcNl6agAuXGHw/edit?usp=sharing)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### Pre - Community Bonding Period ( Up Till  May 4)\n+- Initial investigation and discussion on what features to be added to API, and start implementing them on the go.\n+- Continue discussion with the community on ast and enhanced pyflakes ast - What are the underlying differences, and what can be possible implementations for source range acquisition.\n+- Diagnose possible cases which would render the code unreachable.\n+- Inculcate a habit of downloading the trending project of the day, running vulture on it, analyzing the results and adding anything suitable to whitelist file. This would help us in maintaining a rich whitelist file.\n+- Prioritize all the goals and targets\n+\n+##### Community Bonding (May 5 - 30)\n+- Finalize what should be implemented for source range acquisition on the basis of discussions during pre - community bonding period.\n+\n+##### Week 1 & 2 (May 31 - June 13)\n+- Implement API - At this point, we would have a fully functioning API, and we would be ready to incorporate these changes into the VultureBear.\n+- Refactor VultureBear to incorporate API - This would be relatively easy as the API would have had until now respected it\u2019s usage in the VultureBear.\n+\n+##### Week 3 (June 14 - 20)\n+- Realize VultureBear completely - At this point, it should be able to execute vulture, parse output, produce the patch file for removing the dead code what so ever found.\n+Review the tests written so far and add relevant test cases.\n+- Document Bear\n+- API documentation including, but not limited to possible use cases, example code snippets\n+- See that code is completely documented in place\n+- Buffer time to finish pending work.\n \n-- A concept for the source range acquisition is finalized.\n+##### Week 4 (June 20 - 26)\n+- Develop an analysis report on what all constructs can we detect with complete surety,  partial surety and the ones we cannot detect for the sake of implementing a confidence value with results. (A crude version is here in this thread).\n+- Discuss on the levels of certainty we would need to have (perhaps four for highly accurate (100%), accurate (>80%), medium (70 - 80%) and can\u2019t say)\n \n-##### CODING PHASE 1", "created_at": "2017-05-30T17:22:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mjg1OA==", "fields": {"body": "please reformat/lint your markdown with remark or the MarkdownBear.\nWe will activate this bear soon.", "diff": "@@ -1,57 +1,126 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API", "created_at": "2017-05-30T17:24:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MzY3MA==", "fields": {"body": "trailing blank line.", "diff": "@@ -0,0 +1,113 @@\n+This project is about cobot, the automation chat bot that is used at coala.\n+Currently cobot is used for several things:\n+\n+- Assign issues\n+- Invite people\n+- Create issues\n+- Unassign issues\n+- label PRs\n+\n+etc. And cobot has proved as an extremely useful tool for the community and\n+convenient to the maintainers. But current cobot is based on the [hubot\n+framework](https://hubot.github.com) which requires the developers to write\n+plugins/scripts in coffeescript. coala is a python inclined community and\n+porting cobot to a python based chat bot framework will help cobot to grow. In\n+this project, the current cobot with current functionalities will be ported to\n+[errbot](http://errbot.io).\n+\n+Also the hubot scripts that are currently being used aren't tested. There are no\n+unit tests, no integrity tests which has lead to buggy scripts merged earlier\n+and required more human resources. Another goal of this project is to have all\n+the plugins tested, unit tests for each plugin.\n+\n+Another interesting feature that will be developed during this project is\n+auto-replying cobot when a question is triggered. So, next time, when a newcomer\n+asks \"What is rebase :/ ?\" cobot will automatically answer it after\n+intelligently searching/matching with the user, developer docs and newcomer\n+guide. That is this feature will be fueled by our existing documentation that\n+many people don't seem to respect/ignore knowingly or unknowingly not making it\n+worthwile having good up-to-date docs. We aim at using topic modeling i.e. take\n+help of machine learning and natural language processing(NLP) for this one.\n+\n+Repository: https://github.com/coala/corobo\n+Proposal PDF: https://meetmangukiya.github.io/GSoC_cobot_enhancement.pdf\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/2\n+\n+* The applicant has made a cEP of how the new plugins will be implemented, how\n+  will it be tested, etc.\n+\n+\n+##### CODING PHASE 1\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/23\n+\n+* Port all the plugins to errbot.\n+* Write half of the new features proposed.\n+* Write the test helper and all the merged plugins should have unit tests.\n+\n+##### CODING PHASE 2\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/24\n+\n+* Write the other half of the new features proposed.\n+* Start implementing the topic modeling functions, etc.\n+\n+##### CODING PHASE 3\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/25\n+\n+* Topic modeling should be implemented completely and should also be able to\n+  trace back to the related document in the training data.\n+* Document all the bot commands and the topic modeling process used, for future\n+  references.\n+\n+#### Process\n+\n+##### CODING PHASE 1\n+\n+In week 1 and 2: All the existing scripts in gitlab/coala/cobot should be\n+ported to github/coala/corobo. All the plugins should be tested with 100%\n+coverage.\n+\n+In week 3 and 4: At least two new plugins from\n+https://github.com/coala/corobo/milestone/5 should be written and tested.\n+\n+##### CODING PHASE 2\n+\n+In week 5 and 6:\n+1. Get all the PRs from CODING PHASE 1 merged.\n+2. Write the WSDL file for coala webservices. Generate coala-api-wrapper from\n+   the WSDL file and publish to PyPI.\n+3. Write all the plugins from https://github.com/coala/corobo/milestone/5 and\n+   use coala-api-wrapper instead of making raw API calls.\n+\n+In week 7 and 8:\n+1. Merge all the PRs from week 5 and 6.\n+2. Review all the plugin commands and fix any bugs that were detected during\n+   this period. Do a UX survey from the coala community about the commands.\n+   Do the necessary changes from the insights of the UX survey.\n+3. Lay the foundation of topic-modeling and create sane data sets from coala\n+   documentation.\n+\n+##### CODING PHASE 3\n+\n+In week 9 and 10:\n+1. Have least functionality that does the pre-processing and can retrieve topic\n+   from the given question, i.e. figuring out what is the expected answer.\n+2. Start working on the passage retrieval part to _get_ the answers from the\n+   documentation.\n+3. Working functionality to get answers from the docs and summarize the doc to\n+   answer in concise manner.\n+\n+In week 11 and 12:\n+1. Based on the scores determine if the question can be answered from our docs,\n+   if not just return a google result for the same question.\n+2. Buffer.\n+3. Documentation(particularly about the algorithm used for retrieving the\n+   answers).\n+", "created_at": "2017-05-30T17:27:18Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzc1NA==", "fields": {"body": "space before (", "diff": "@@ -0,0 +1,113 @@\n+This project is about cobot, the automation chat bot that is used at coala.\n+Currently cobot is used for several things:\n+\n+- Assign issues\n+- Invite people\n+- Create issues\n+- Unassign issues\n+- label PRs\n+\n+etc. And cobot has proved as an extremely useful tool for the community and\n+convenient to the maintainers. But current cobot is based on the [hubot\n+framework](https://hubot.github.com) which requires the developers to write\n+plugins/scripts in coffeescript. coala is a python inclined community and\n+porting cobot to a python based chat bot framework will help cobot to grow. In\n+this project, the current cobot with current functionalities will be ported to\n+[errbot](http://errbot.io).\n+\n+Also the hubot scripts that are currently being used aren't tested. There are no\n+unit tests, no integrity tests which has lead to buggy scripts merged earlier\n+and required more human resources. Another goal of this project is to have all\n+the plugins tested, unit tests for each plugin.\n+\n+Another interesting feature that will be developed during this project is\n+auto-replying cobot when a question is triggered. So, next time, when a newcomer\n+asks \"What is rebase :/ ?\" cobot will automatically answer it after\n+intelligently searching/matching with the user, developer docs and newcomer\n+guide. That is this feature will be fueled by our existing documentation that\n+many people don't seem to respect/ignore knowingly or unknowingly not making it\n+worthwile having good up-to-date docs. We aim at using topic modeling i.e. take\n+help of machine learning and natural language processing(NLP) for this one.\n+\n+Repository: https://github.com/coala/corobo\n+Proposal PDF: https://meetmangukiya.github.io/GSoC_cobot_enhancement.pdf\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/2\n+\n+* The applicant has made a cEP of how the new plugins will be implemented, how\n+  will it be tested, etc.\n+\n+\n+##### CODING PHASE 1\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/23\n+\n+* Port all the plugins to errbot.\n+* Write half of the new features proposed.\n+* Write the test helper and all the merged plugins should have unit tests.\n+\n+##### CODING PHASE 2\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/24\n+\n+* Write the other half of the new features proposed.\n+* Start implementing the topic modeling functions, etc.\n+\n+##### CODING PHASE 3\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/25\n+\n+* Topic modeling should be implemented completely and should also be able to\n+  trace back to the related document in the training data.\n+* Document all the bot commands and the topic modeling process used, for future\n+  references.\n+\n+#### Process\n+\n+##### CODING PHASE 1\n+\n+In week 1 and 2: All the existing scripts in gitlab/coala/cobot should be\n+ported to github/coala/corobo. All the plugins should be tested with 100%\n+coverage.\n+\n+In week 3 and 4: At least two new plugins from\n+https://github.com/coala/corobo/milestone/5 should be written and tested.\n+\n+##### CODING PHASE 2\n+\n+In week 5 and 6:\n+1. Get all the PRs from CODING PHASE 1 merged.\n+2. Write the WSDL file for coala webservices. Generate coala-api-wrapper from\n+   the WSDL file and publish to PyPI.\n+3. Write all the plugins from https://github.com/coala/corobo/milestone/5 and\n+   use coala-api-wrapper instead of making raw API calls.\n+\n+In week 7 and 8:\n+1. Merge all the PRs from week 5 and 6.\n+2. Review all the plugin commands and fix any bugs that were detected during\n+   this period. Do a UX survey from the coala community about the commands.\n+   Do the necessary changes from the insights of the UX survey.\n+3. Lay the foundation of topic-modeling and create sane data sets from coala\n+   documentation.\n+\n+##### CODING PHASE 3\n+\n+In week 9 and 10:\n+1. Have least functionality that does the pre-processing and can retrieve topic\n+   from the given question, i.e. figuring out what is the expected answer.\n+2. Start working on the passage retrieval part to _get_ the answers from the\n+   documentation.\n+3. Working functionality to get answers from the docs and summarize the doc to\n+   answer in concise manner.\n+\n+In week 11 and 12:\n+1. Based on the scores determine if the question can be answered from our docs,\n+   if not just return a google result for the same question.\n+2. Buffer.\n+3. Documentation(particularly about the algorithm used for retrieving the", "created_at": "2017-05-30T17:27:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzk4OQ==", "fields": {"body": "I think you need a blank line after this, to be proper markdown syntax.", "diff": "@@ -0,0 +1,113 @@\n+This project is about cobot, the automation chat bot that is used at coala.\n+Currently cobot is used for several things:\n+\n+- Assign issues\n+- Invite people\n+- Create issues\n+- Unassign issues\n+- label PRs\n+\n+etc. And cobot has proved as an extremely useful tool for the community and\n+convenient to the maintainers. But current cobot is based on the [hubot\n+framework](https://hubot.github.com) which requires the developers to write\n+plugins/scripts in coffeescript. coala is a python inclined community and\n+porting cobot to a python based chat bot framework will help cobot to grow. In\n+this project, the current cobot with current functionalities will be ported to\n+[errbot](http://errbot.io).\n+\n+Also the hubot scripts that are currently being used aren't tested. There are no\n+unit tests, no integrity tests which has lead to buggy scripts merged earlier\n+and required more human resources. Another goal of this project is to have all\n+the plugins tested, unit tests for each plugin.\n+\n+Another interesting feature that will be developed during this project is\n+auto-replying cobot when a question is triggered. So, next time, when a newcomer\n+asks \"What is rebase :/ ?\" cobot will automatically answer it after\n+intelligently searching/matching with the user, developer docs and newcomer\n+guide. That is this feature will be fueled by our existing documentation that\n+many people don't seem to respect/ignore knowingly or unknowingly not making it\n+worthwile having good up-to-date docs. We aim at using topic modeling i.e. take\n+help of machine learning and natural language processing(NLP) for this one.\n+\n+Repository: https://github.com/coala/corobo\n+Proposal PDF: https://meetmangukiya.github.io/GSoC_cobot_enhancement.pdf\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/2\n+\n+* The applicant has made a cEP of how the new plugins will be implemented, how\n+  will it be tested, etc.\n+\n+\n+##### CODING PHASE 1\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/23\n+\n+* Port all the plugins to errbot.\n+* Write half of the new features proposed.\n+* Write the test helper and all the merged plugins should have unit tests.\n+\n+##### CODING PHASE 2\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/24\n+\n+* Write the other half of the new features proposed.\n+* Start implementing the topic modeling functions, etc.\n+\n+##### CODING PHASE 3\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/25\n+\n+* Topic modeling should be implemented completely and should also be able to\n+  trace back to the related document in the training data.\n+* Document all the bot commands and the topic modeling process used, for future\n+  references.\n+\n+#### Process\n+\n+##### CODING PHASE 1\n+\n+In week 1 and 2: All the existing scripts in gitlab/coala/cobot should be\n+ported to github/coala/corobo. All the plugins should be tested with 100%\n+coverage.\n+\n+In week 3 and 4: At least two new plugins from\n+https://github.com/coala/corobo/milestone/5 should be written and tested.\n+\n+##### CODING PHASE 2\n+\n+In week 5 and 6:", "created_at": "2017-05-30T17:28:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTI1MDYyMQ==", "fields": {"body": "why do you have a tab here?\nAnd please use a consistent line length\nno more than 120 please.", "diff": "@@ -1,57 +1,148 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: `get_unused_code`. This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed)", "created_at": "2017-05-31T01:00:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzM0OQ==", "fields": {"body": "this is still a tab character.  Dont mix tabs and spaces.", "diff": "@@ -1,57 +1,175 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all\n+metadata through the API and then to harness this utility in VultureBear for auto removing dead code,\n+which would greatly optimise the bear. The second part of this project focuses on offering the source\n+range of the dead code which would make auto-removal much easier. As of now, vulture only supplies the\n+beginning of the dead code. Also, it proposes to enhance vulture in order to detect unreachable code(like `if False`, `if True else`, any code written after return statements, etc). - this shall helpthe user in trimming down their codebase without affecting usability. Also, the third part would beto implement a confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract\n+  layer: `get_unused_code`. This can be easily implemented, given the already existing Vulture.scan(),\n+  Vulture.report(),  Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient-", "created_at": "2017-06-01T06:37:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzQ1Mg==", "fields": {"body": "( Up Till May 4) -> (Up Till May 4)", "diff": "@@ -1,57 +1,175 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all\n+metadata through the API and then to harness this utility in VultureBear for auto removing dead code,\n+which would greatly optimise the bear. The second part of this project focuses on offering the source\n+range of the dead code which would make auto-removal much easier. As of now, vulture only supplies the\n+beginning of the dead code. Also, it proposes to enhance vulture in order to detect unreachable code(like `if False`, `if True else`, any code written after return statements, etc). - this shall helpthe user in trimming down their codebase without affecting usability. Also, the third part would beto implement a confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract\n+  layer: `get_unused_code`. This can be easily implemented, given the already existing Vulture.scan(),\n+  Vulture.report(),  Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient-\n+\twe would have memory files passing (An extra layer of parsing would then be removed)\n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence\n+\tthe API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist\n+\n+The first step here would be to make the whitelist default. The important thing would be to identify possible\n+cases which might cause vulture to report a false positive. This can be achieved through extensive testing with\n+major projects - trending python projects on github would cater to our need for the purpose. This approach would\n+serve us many benefits:\n+\n+- We can identify instances of what should ideally be in our whitelist file - as we may find any lesser known\n+  constructs.\n+- We can test vulture for any unreported bugs.\n+- We can find many projects which use/might want to use vulture - they may further collaborate with us in making\n+  the whitelists together. (As proposed by [@jendrikseipp](https://github.com/jendrikseipp))\n+- We can also make whitelists for popular python frameworks like Django, etc.\n+\n+##### 3.) Acquiring source range and implementing auto-removal\n+\n+Analyse and discuss with the community the utilities of ast or enhanced pyflake ast for what would better cater to\n+our problem and would offer simplicity for source-range acquisition and arrive at a concrete conclusion. Also,\n+there was another proposal by [@m0hawk](https://bitbucket.org/m0hawk) to get everything until the next node\n+starts. Dialogue here - [#25](https://github.com/jendrikseipp/vulture/issues/25)\n+\n+Also, if able to fetch the source range successfully, implement the pathway through which  the metadata flows in\n+and out of API, this would not require much work because  we can easily change item.lineno (int) to\n+item.dead_range (tuple of ints) and can parse them over in the VultureBear.\n+\n+##### 4.) Detecting unreachable code\n+\n+We would first need to identify cases where code cannot be reached. Some of the common ones are:\n+\n+- `If False`\n+- `If True; else`\n+- Any code after `return` statement in the block containing return itself.\n+- `raise` statement  in `try` block.\n+\n+Similar constructs would have to be looked onto. The crude form of this would be:\n+\n+- Analyse the ast\u2019s\n+- Look for the if nodes\n+- Check the boolean affiliated to it, tracking previous arguments.\n+\n+##### 5.) Implementing a confidence value for results\n+\n+We would need to analyse every construct individually on a case by case basis. For example, we already know that\n+import statements can be predicted with 100% surety (except for \\* imports, where it would be 0%), but functions\n+often have false-positives.\n+\n+The confidence value will be alike the ones given below: (The finer grained distinctions will need further\n+discussion)\n+\n+- `import` -->  `100%`\n+- `from foo import *` --> `0%`\n+- `variable` --> `<100%`\n+- `function` --> `<100%`\n+- `class` --> `<100%`\n+- `if False` --> `100%`\n \n References:\n \n-- [vulture](https://bitbucket.org/jendrikseipp/vulture)\n+- [vulture](https://github.com/jendrikseipp/vulture)\n+- [Project Proposal](https://docs.google.com/document/d/1gzRH-rdJsiAD-TOEB0O4OqtcnTp0zotcNl6agAuXGHw/edit?usp=sharing)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### Pre - Community Bonding Period ( Up Till  May 4)", "created_at": "2017-06-01T06:37:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU4NjcwNA==", "fields": {"body": "; Please :P", "diff": "@@ -21,11 +21,11 @@ app.directive('languages',  ['$http',  '$timeout' ,function ($http, $timeout) {\n                 $http.get(api_link + '/list/bears')\n                     .then(function(data){\n                         arr = []", "created_at": "2017-06-18T09:49:11Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDA1ODM0Ng==", "fields": {"body": "A comma missing after [\"coala\", \"vulture\"], therefore no projects are visible on #312 (comment)", "diff": "@@ -212,6 +215,7 @@ projects = [\n         \"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n         \"markdown\": \"vulture.md\",\n         \"collaborating_projects\" : [\"coala\", \"vulture\"]", "created_at": "2017-06-26T16:35:47Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDAzMjY4OQ==", "fields": {"body": "being a semi-colon nazi :P", "diff": "@@ -21,11 +21,11 @@ app.directive('languages',  ['$http',  '$timeout' ,function ($http, $timeout) {\n                 $http.get(api_link + '/list/bears')\n                     .then(function(data){\n                         arr = []", "created_at": "2017-06-26T14:58:25Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDI0MTIwMA==", "fields": {"body": "Here's the screenshot you requested earlier with the developer's involved field modified for a project.", "diff": "@@ -212,6 +215,7 @@ projects = [\n         \"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n         \"markdown\": \"vulture.md\",\n         \"collaborating_projects\" : [\"coala\", \"vulture\"]", "created_at": "2017-06-27T10:53:54Z", "last_edited_at": null, "author": "arrayslayer", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkyODU0OQ==", "fields": {"body": "oh boy, we need to split this file \ud83d\ude1f", "diff": "@@ -680,5 +680,57 @@ coala should support generating metrics for your code.\",\n         \"markdown\": \"cobot_enhancement.md\",\n         \"collaborating_projects\": [\"coala\"],\n         \"in_progress\": true\n+    },\n+    {\n+        \"name\": \"Use coala CI on a popular GitHub repository\",\n+        \"desc\": \"Use coala CI on a popular GitHub project, of your choice, using a Docker image on Travis CI, and report the results to the coala developers.\",\n+        \"requirements\" : [\n+            \"Joined http://coala.io/chat .\",\n+        ],\n+        \"difficulty\": \"beginner\",\n+        \"issues\": [\n+            \"https://github.com/coala/meta/issues/58\",\n+            \"https://github.com/coala/meta/issues/81\"\n+        ],\n+        \"mentors\" : [\n+            \"jayvdb\",\n+            \"sils\"\n+        ],\n+        \"initiatives\": [\"GCI\"],\n+        \"tags\": [\"community\", \"docker\"],\n+        \"markdown\": \"use_coala.md\",\n+        \"collaborating_projects\": [\"docker-coala-base\"]\n+    },\n+    {\n+        \"name\": \"Use coala CI on a popular GitHub repository - Advanced\",\n+        \"desc\": \"Fix a popular GitHub project so that the repository contents conform to linter rules that are verified by coala CI on each commit using Travis CI.\",\n+        \"requirements\" : [\n+            \"Completed task 'use_coala'.\",\n+        ],\n+        \"difficulty\": \"medium\",\n+        \"mentors\" : [\n+            \"jayvdb\",\n+            \"sils\"\n+        ],\n+        \"initiatives\": [\"GCI\"],\n+        \"tags\": [\"community\", \"docker\"],\n+        \"markdown\": \"use_coala_2.md\",\n+        \"collaborating_projects\": [\"docker-coala-base\"]\n+    },\n+    {\n+        \"name\": \"Use coala CI on a popular GitHub repository\",\n+        \"desc\": \"Use coala CI on a popular GitHub project, of your choice, using a Docker image on Travis CI, and report the results to the coala developers.\",\n+        \"requirements\" : [\n+            \"Completed task 'use_coala_2'.\",\n+        ],\n+        \"difficulty\": \"medium\",\n+        \"mentors\" : [\n+            \"jayvdb\",\n+            \"sils\"\n+        ],\n+        \"initiatives\": [\"GCI\"],\n+        \"tags\": [\"community\", \"docker\"],\n+        \"markdown\": \"use_coala_3.md\",\n+        \"collaborating_projects\": [\"docker-coala-base\"]", "created_at": "2017-06-29T22:34:46Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkzODk4OA==", "fields": {"body": "We can remove the headings from individual files as the heading will be already visible in the left side pane.", "diff": "@@ -0,0 +1,463 @@\n+# Use coala CI on a popular GitHub repository", "created_at": "2017-06-29T23:57:01Z", "last_edited_at": "2017-06-30T00:35:13Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjc5NQ==", "fields": {"body": "better written like this:\n$scope.$watch( function () {\n    return Languages.getData();\n}, function () {\n    $scope.setLanguage(Languages.getData());\n}, true);", "diff": "@@ -29,26 +68,69 @@\n         }\n     })\n \n-    app.directive('projects',  ['$http',  '$timeout', '$location', function ($http, $timeout, $location) {\n+    app.directive('projects',  ['$http',  '$timeout', '$location', 'Languages', function ($http, $timeout, $location, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/projects.html',\n-            controller: function ($scope, $location) {\n+            controller: function ($scope, $location, Languages) {\n                 self = this\n-                lang = $location.search().lang || window.localStorage.getItem('lang');\n-                $scope.projectList = projects\n+\n+                $scope.getDefaultProjectsMetadata = function () {\n+                    $http.get('data/projects.json')\n+                    .then(function (res) {\n+                        $scope.projectList = res.data;\n+                    })\n+                }\n+\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultProjectsMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);", "created_at": "2017-07-15T01:21:29Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjk4NQ==", "fields": {"body": "better written like this:\nif (selected_language.code) {\n    return selected_language.code;\n} else {\n    return $location.search().lang || window.localStorage.getItem('lang');\n}", "diff": "@@ -1,6 +1,37 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+        setData: function (val) {\n+            angular.forEach(langs, function(v, k){\n+                if (v.code == val){\n+                    window.localStorage.setItem('lang', val);\n+                    selected_language = v;\n+                }\n+            });\n+        },\n+        getData: function () {\n+            if(selected_language.code)\n+                return selected_language.code;\n+            else return $location.search().lang || window.localStorage.getItem('lang');", "created_at": "2017-07-15T01:28:14Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTA2MQ==", "fields": {"body": "this } should have same indentation level with getAllLanguages:... doesn't it?", "diff": "@@ -1,6 +1,37 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+        setData: function (val) {\n+            angular.forEach(langs, function(v, k){\n+                if (v.code == val){\n+                    window.localStorage.setItem('lang', val);\n+                    selected_language = v;\n+                }\n+            });\n+        },\n+        getData: function () {\n+            if(selected_language.code)\n+                return selected_language.code;\n+            else return $location.search().lang || window.localStorage.getItem('lang');\n+        },\n+        getAllLanguages: function () {\n+            return langs;\n+            }", "created_at": "2017-07-15T14:08:34Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTEzNw==", "fields": {"body": "this should be new indent.\nreturn {\n    setData: function (val) {\n        angular.....\n        ....\n    }\n}", "diff": "@@ -1,6 +1,37 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+        setData: function (val) {", "created_at": "2017-07-15T14:12:32Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTI3OA==", "fields": {"body": "Same here...\nShould be\n$http.get('data/faq.json')\n    .then(function (res) {\n        ....", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {", "created_at": "2017-07-15T14:21:55Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTIxMA==", "fields": {"body": "better like this\n$http.get('data/projects.json')\n    .then(function (res) {\n        $scope.projectList = res.data;\n    });", "diff": "@@ -29,26 +68,69 @@\n         }\n     })\n \n-    app.directive('projects',  ['$http',  '$timeout', '$location', function ($http, $timeout, $location) {\n+    app.directive('projects',  ['$http',  '$timeout', '$location', 'Languages', function ($http, $timeout, $location, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/projects.html',\n-            controller: function ($scope, $location) {\n+            controller: function ($scope, $location, Languages) {\n                 self = this\n-                lang = $location.search().lang || window.localStorage.getItem('lang');\n-                $scope.projectList = projects\n+\n+                $scope.getDefaultProjectsMetadata = function () {\n+                    $http.get('data/projects.json')\n+                    .then(function (res) {\n+                        $scope.projectList = res.data;\n+                    })", "created_at": "2017-07-15T14:18:17Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQ5MQ==", "fields": {"body": "its ok to make it in single line\n$http.get('data/locale/' + $scope.lang + '/faq/' + faq.markdown).then(function (res) {", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {", "created_at": "2017-07-15T14:33:45Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQyNw==", "fields": {"body": "Here \ud83d\ude04\n$scope.$watch( function () {\n    return Languages.getData();\n}, function () {\n    $scope.setLanguage(Languages.getData());\n}, true);", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);", "created_at": "2017-07-15T14:29:19Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU0MA==", "fields": {"body": "this }) should have same indentation level with .then", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {\n+                                $scope.faqs[key].answer = res.data\n+                            }, function (error) {\n+                                $http.get($scope.faqs[key].url)\n+                                    .then(function (res) {\n+                                        $scope.faqs[key].answer = res.data;\n+                                })", "created_at": "2017-07-15T14:36:05Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU3MA==", "fields": {"body": "again \ud83d\ude04\n$http....\n    .then....", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {\n+                                $scope.faqs[key].answer = res.data\n+                            }, function (error) {\n+                                $http.get($scope.faqs[key].url)\n+                                    .then(function (res) {\n+                                        $scope.faqs[key].answer = res.data;\n+                                })\n+                            });\n+                        })\n+                    } else {\n+                        $scope.faqs.forEach(function (f, k) {\n+                            $http.get($scope.faqs[k].url)\n+                            .then(function (res) {\n+                                $scope.faqs[k].answer = res.data\n+                            });", "created_at": "2017-07-15T14:37:15Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU4OA==", "fields": {"body": "same as above ;)", "diff": "@@ -240,27 +343,36 @@\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/mentors.html',\n-            controller: function ($scope) {\n+            controller: function ($scope, $rootScope) {\n                 self = this\n                 self.mentorsList = {}\n                 self.adminsList = {}\n-                angular.forEach(projects, function(value, key){\n-                    angular.forEach(value.mentors, function(value, key){\n-                        self.mentorsList[value] =  {\n+\n+                $http.get('data/projects.json')\n+                .then(function (res) {", "created_at": "2017-07-15T14:38:14Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTUxNw==", "fields": {"body": "this }) should have same indentation level with .then", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {\n+                                $scope.faqs[key].answer = res.data\n+                            }, function (error) {\n+                                $http.get($scope.faqs[key].url)\n+                                    .then(function (res) {\n+                                        $scope.faqs[key].answer = res.data;\n+                                })", "created_at": "2017-07-15T14:35:02Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NTk4Mg==", "fields": {"body": "usually\n} else {", "diff": "@@ -1,6 +1,40 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+            setData: function (val) {\n+                angular.forEach(langs, function(v, k){\n+                    if (v.code == val){\n+                        window.localStorage.setItem('lang', val);\n+                        selected_language = v;\n+                    }\n+                });\n+            },\n+            getData: function () {\n+                if(selected_language.code) {\n+                    return selected_language.code;\n+                }\n+                else {", "created_at": "2017-07-16T00:37:32Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA3MQ==", "fields": {"body": "$scope.setLanguage should have same indentation level with that return ....", "diff": "@@ -29,26 +71,71 @@\n         }\n     })\n \n-    app.directive('projects',  ['$http',  '$timeout', '$location', function ($http, $timeout, $location) {\n+    app.directive('projects',  ['$http',  '$timeout', '$location', 'Languages', function ($http, $timeout, $location, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/projects.html',\n-            controller: function ($scope, $location) {\n+            controller: function ($scope, $location, Languages) {\n                 self = this\n-                lang = $location.search().lang || window.localStorage.getItem('lang');\n-                $scope.projectList = projects\n+\n+                $scope.getDefaultProjectsMetadata = function () {\n+                    $http.get('data/projects.json')\n+                        .then(function (res) {\n+                            $scope.projectList = res.data;\n+                        })\n+                }\n+\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultProjectsMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData();\n+                }, function () {\n+                        $scope.setLanguage(Languages.getData());", "created_at": "2017-07-16T00:46:01Z", "last_edited_at": "2017-07-16T03:16:34Z", "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA4MA==", "fields": {"body": "as above", "diff": "@@ -182,46 +251,83 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                        .then(function (res) {\n+                            $scope.faqs = res.data;\n+                            $scope.generateMarkdown();\n+                        })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData();\n+                }, function () {\n+                        $scope.setLanguage(Languages.getData());", "created_at": "2017-07-16T00:46:48Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk5ODExMQ==", "fields": {"body": "or change the ng-init?", "diff": "@@ -45,19 +44,17 @@\n       </div>\n       <div ng-view=\"\"></div>\n     </div>\n+    <div ng-controller=\"LanguageController as langCtrl\" style=\"position: fixed; left: 60px; bottom: 20px;\">\n+    <select ng-init=\"language=langs[0]\" ng-options=\"l as l.name for l in langs\" ng-model=\"language\" ng-change=\"update()\">", "created_at": "2017-07-18T14:49:46Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNzc3OA==", "fields": {"body": "console.log?", "diff": "@@ -16,8 +48,32 @@\n             }).\n             otherwise({\n                 redirectTo: '/projects'\n-                    });\n-        }]);\n+            });\n+    }]);\n+\n+    app.controller('LanguageController', function ($scope, Languages) {\n+        $scope.langs = Languages.getAllLanguages();\n+        $scope.update = function () {\n+            Languages.setData($scope.language.code);\n+        }\n+        $scope.init_language = Languages.getLanguageObject();\n+        console.log('OBJECT')\n+        console.log($scope.init_language)", "created_at": "2017-07-18T15:20:12Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYyMw==", "fields": {"body": "vendore ?", "diff": "@@ -1,27 +1,27 @@\n [global]\n bears = coalaBear\n files = **.yml, **.html, **.md, **.js, **.css, **.json\n-ignore = vendors/**, _site/**\n+ignore = resources/vendors/**, _site/**\n \n [linecount]\n files = **.yml, **.html, **.md, **.js\n bears = LineCountBear\n-ignore = vendors/**, data/projects.js, _site/**\n+ignore = resources/vendors/**, data/projects.js, _site/**\n max_lines_per_file = 500\n \n [filenames]\n bears = FilenameBear\n files = **.yml, **.html, **.md, **.js, **.css\n-ignore = vendors/**, _projects/integrate-pyflakes-AST.md, _site/**\n+ignore = resources/vendors/**, _projects/integrate-pyflakes-AST.md, _site/**\n \n [spacing]\n bears = SpaceConsistencyBear\n files = **.html, **.css, **.js, **.json\n-ignore = vendors/**, _site/**\n+ignore = resources/vendors/**, _site/**\n use_spaces = True\n \n [html]\n bears = HTMLLintBear\n files = **.html\n htmllint_ignore = optional_tag, protocol, indentation,  concerns_separation, capitalization\n-ignore = vendore/**, _site/**\n+ignore = resources/vendore/**, _site/**", "created_at": "2017-07-22T13:08:20Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYzMg==", "fields": {"body": "This change should be in the other commit, right? c579dc9", "diff": "@@ -51,7 +51,7 @@\n   </main>\n   <footer class=\"page-footer footer-light transparent\">\n     <div class=\"row\">\n-      <div class=\"col m6 offset-m3 center\"> <img class=\"footer-logo\" src=\"https://api.coala.io/en/latest/_static/images/coala_logo.svg\"> <span class=\"footer-title\">{{ site.organization }}</span> </div>\n+      <div class=\"col m6 offset-m3 center\"> <img class=\"footer-logo\" src=\"https://api.coala.io/en/latest/_static/images/coala_logo.svg\" alt=\"coala\"> <span class=\"footer-title\">{{ site.organization }}</span> </div>", "created_at": "2017-07-22T13:09:19Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw==", "fields": {"body": "Any reasons for migrating to materializecss? Please mention that in the commit message.", "diff": "@@ -11,15 +11,15 @@\n     <link rel=\"stylesheet\"\n           href=\"https://fonts.googleapis.com/css?family=Roboto:100,200,300,400,500,600,800,900\">\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n-    <link rel=\"stylesheet\"\n           href=\"bower_components/google-code-prettify/src/prettify.css\">\n-    <!-- Bootstrap Material Design -->\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap-material-design/dist/css/bootstrap-material-design.css\">\n+          href=\"bower_components/materialize/dist/css/materialize.min.css\">", "created_at": "2017-07-29T16:25:25Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzc4MQ==", "fields": {"body": "Same, see above comment", "diff": "@@ -0,0 +1,228 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/ProjectReport/HemangKumar\n+student: Hemang Kumar\n+organisation: coala\n+organisation_link : https://coala.io", "created_at": "2017-08-26T12:05:35Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzk4Mg==", "fields": {"body": "Yeah I think its better to have it configurable. Making it a default will require adding it in markup in _layout/reports.md file as I understand. But it'll be good to have just one configuration file (that is this file) and only file governing the layout  (_layouts/report.md , which just has the design and no config defaults)", "diff": "@@ -0,0 +1,228 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/ProjectReport/HemangKumar\n+student: Hemang Kumar\n+organisation: coala", "created_at": "2017-08-26T12:23:41Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4NzkyOA==", "fields": {"body": "Yeah thats the reason, no filter by author in GitLab", "diff": "@@ -0,0 +1,228 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/ProjectReport/HemangKumar\n+student: Hemang Kumar\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve coala Website & Supporting Tools\n+project_link: https://summerofcode.withgoogle.com/projects/#6012382913495040\n+tarball: https://github.com/hemangsk/GSoCReport/raw/master/hemangsk_coala.tar\n+mentors: >\n+ [Lasse Schuirmann](https://github.com/sils) & [Fabian Neuschmidt](https://github.com/fneu)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC-2017/milestones/3\n+ - Phase 1 : https://gitlab.com/coala/GSoC-2017/milestones/7\n+ - Phase 2 : https://gitlab.com/coala/GSoC-2017/milestones/8\n+ - Phase 3 : https://gitlab.com/coala/GSoC-2017/milestones/9\n+bio: >\n+ I'm a final year student of Computer Science & Engineering at University School of Information,\n+ Communication & Technology, GGS IP University. I participated in GSoC and worked with [coala](https://coala.io) to facilitate users to use coala online and functionality for one click Git Repository linting. I also worked on a bot to generate coafile, worked on improving UI of coala-html and configurability of coala-projects. I also worked on adding Notification and Thread support in the IGitt library.  \n+social:\n+ - GitHub:\n+   - username: hemangsk\n+   - link: https://github.com/hemangsk\n+ - GitLab:\n+   - username: hemangsk\n+   - link: https://gitlab.com/hemangsk\n+ - Gitter:\n+   - username: hemangsk\n+   - link: https://gitter.im/hemangsk\n+ - HackerRank:\n+   - username: hemangsk\n+   - link: https://hackerrank/hemang\n+email: hemangsk@gmail.com\n+blog: http://hemangsk.github.io/stories.html\n+activity:\n+ - 0:\n+   - repo: coala-quickstart \n+   - link: https://github.com/coala/coala-quickstart/commits/master?author=hemangsk\n+   - details: > \n+      Add --allow-incomplete-sections mode and bump coala version.\n+ - 1:\n+   - repo: coalaCSS\n+   - link: https://github.com/coala/coalaCSS/commits/master?author=hemangsk\n+   - details: >\n+      Create a CSS library to have consistency throughout coala web projects.\n+ - 2:\n+   - repo: coala Projects\n+   - link: https://github.com/coala/projects/commits/master?author=hemangsk\n+   - details: > \n+       Commits **f26ae52** through **6497def** were part of GSoC.\n+ - 3:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/718603aa2294a55206cfaa8806aa624791757ec4\n+   - details: Add put method\n+ - 4:\n+   - repo: IGitt", "created_at": "2017-08-26T12:19:31Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQ0Nw==", "fields": {"body": "Same here as Add action: is interpreted as a key by jekyll.", "diff": "@@ -0,0 +1,135 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/StatusReport/AlexMaxim\n+student: Alexandru-Sorin Maxim\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve the coala CLI\n+project_link: https://summerofcode.withgoogle.com/projects/#4940869170888704\n+tarball:\n+mentors: >\n+ [Adrian Zatreanu](https://github.com/Adrianzatreanu) & [Muhammad Kaisar Arkhan](https://github.com/yukiisbored)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC-2017/milestones/16\n+ - Phase 1 : https://gitlab.com/coala/GSoC-2017/milestones/17\n+ - Phase 2 : https://gitlab.com/coala/GSoC-2017/milestones/18\n+ - Phase 3 : https://gitlab.com/coala/GSoC-2017/milestones/19\n+bio: >\n+ I'm a 3rd year student of Computer Science & Engineering at Politehnica University of Bucharest. I participated in GSoC and worked with [coala](https://coala.io) to improve coala CLI experience. Most of the people who use a CLI program do not read the whole output, only a small part of it. Also, a large output from a command could tire them and could make them stop using our application. Remove the redundant information, keeping only the necessary information.  \n+social:\n+ - GitHub:\n+   - username: Nosferatul\n+   - link: https://github.com/Nosferatul\n+ - GitLab:\n+   - username: Nosferatul\n+   - link: https://gitlab.com/Nosferatul\n+ - Gitter:\n+   - username: Nosferatul\n+   - link: https://gitter.im/Nosferatul\n+email: alexandrus.maxim@gmail.com\n+blog: https://gsocsite.wordpress.com/category/gsoc/\n+activity:\n+ - 0:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4369/commits/d75d10ab7bb9be4abe7d14f201afc748fb1b96d6\n+   - details: >\n+      Change output for user.\n+ - 1:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4370/commits/3e590f5e34f019103f98f0ea9b32c94d01e05472\n+   - details: >\n+      Change the coafile warning/output.\n+ - 2:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/2f0f3116aea7e2933322d4cc2a44a9fef61981a4\n+   - details: >\n+       Change the actions name.\n+ - 3:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/8a25983187966a60a810756c200ece1d9bb59607\n+   - details: Change the input: Numbers to letters\n+ - 4:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4420/commits/0eb0be9e7bf4765dd829d0aeb5a6918fb00d05e1\n+   - details: Fix the ouput\n+ - 5:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4429/commits/45a7369dfcc7af78c0844f0203a1deb1a17a3c75\n+   - details: Add Chain Action\n+ - 6:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4462/commits/65feb308706c77ca5aac10123f757600cc639c1a\n+   - details: Add apply-single-action\n+ - 7:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4481/commits/149d59d28318954d4035c7e8f639cc344af061c0\n+   - details: Add Show Applied Action\n+ - 8:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4603/commits/0911078532a49c42afb06effec750be24a7b4139\n+   - details: Make Chain Action default\n+ - 9:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4626/commits/360a6245d88260631c8a9019de026e835e43df3d\n+   - details: Add line number for the diff ouput\n+ - 10:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4626/commits/2bd16a5d44d93edc211da3faf4cb17e93296cd70\n+   - details: Change Severity line from the ouput\n+ - 11:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4627/commits/377585d14cac6522546c9dc0a94f2890304eb7a5\n+   - details: Add line number inside \u201c[ ]\u201d in diffs\n+ - 12:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4627/commits/d03303c00d5e6afa543cb173288b3908a8945428\n+   - details: Fix color from the ouput\n+ - 13:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4629/commits/a6c376f054da150e2d29a90997a03ddd3ec7dba0\n+   - details: Add Do (N)othing action\n+ - 14:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4638/commits/f43bd5e7cb908c5d3a7b384924bc5f282a2e625a\n+   - details: Fix --no-color flag\n+ - 15:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4634/commits/25e019cdd944532f969d5cf1079afd7d62f41e19\n+   - details: Add Action: Generate Patches", "created_at": "2017-08-27T20:25:20Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQyOQ==", "fields": {"body": "Minor change, this throws an error because it interprets \"Change the input\" as a key because of the \":\" after it.\n\ndetails : Change the input numbers to letters\nor\ndetails: Change the input from numbers to letters will work perfect", "diff": "@@ -0,0 +1,135 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/StatusReport/AlexMaxim\n+student: Alexandru-Sorin Maxim\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve the coala CLI\n+project_link: https://summerofcode.withgoogle.com/projects/#4940869170888704\n+tarball:\n+mentors: >\n+ [Adrian Zatreanu](https://github.com/Adrianzatreanu) & [Muhammad Kaisar Arkhan](https://github.com/yukiisbored)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC-2017/milestones/16\n+ - Phase 1 : https://gitlab.com/coala/GSoC-2017/milestones/17\n+ - Phase 2 : https://gitlab.com/coala/GSoC-2017/milestones/18\n+ - Phase 3 : https://gitlab.com/coala/GSoC-2017/milestones/19\n+bio: >\n+ I'm a 3rd year student of Computer Science & Engineering at Politehnica University of Bucharest. I participated in GSoC and worked with [coala](https://coala.io) to improve coala CLI experience. Most of the people who use a CLI program do not read the whole output, only a small part of it. Also, a large output from a command could tire them and could make them stop using our application. Remove the redundant information, keeping only the necessary information.  \n+social:\n+ - GitHub:\n+   - username: Nosferatul\n+   - link: https://github.com/Nosferatul\n+ - GitLab:\n+   - username: Nosferatul\n+   - link: https://gitlab.com/Nosferatul\n+ - Gitter:\n+   - username: Nosferatul\n+   - link: https://gitter.im/Nosferatul\n+email: alexandrus.maxim@gmail.com\n+blog: https://gsocsite.wordpress.com/category/gsoc/\n+activity:\n+ - 0:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4369/commits/d75d10ab7bb9be4abe7d14f201afc748fb1b96d6\n+   - details: >\n+      Change output for user.\n+ - 1:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4370/commits/3e590f5e34f019103f98f0ea9b32c94d01e05472\n+   - details: >\n+      Change the coafile warning/output.\n+ - 2:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/2f0f3116aea7e2933322d4cc2a44a9fef61981a4\n+   - details: >\n+       Change the actions name.\n+ - 3:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/8a25983187966a60a810756c200ece1d9bb59607\n+   - details: Change the input: Numbers to letters", "created_at": "2017-08-27T20:24:53Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA==", "fields": {"body": "Why not just 'coala' like: a bear is a set of rules used by coala or a bear is a routine used by coala to check ...", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:34:38Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw==", "fields": {"body": "@sangamcse would 'libraries' be a better replacement for 'packages' ?", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:09:08Z", "last_edited_at": null, "author": "sarthakchakerverty", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM4OTIxOQ==", "fields": {"body": "https://gitter.im/coala/coala-bears?at=5b44c27a3c5abf52b64b54b8 will solve this problem", "diff": "@@ -1,20 +1,35 @@\n-services: docker\n+dist: \"trusty\"\n+sudo: required\n+\n+matrix:\n+  include:\n+    - language: python", "created_at": "2018-07-10T15:30:17Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM5MjgzNQ==", "fields": {"body": "gitmate went nuts on #593 , so we may need to wait a bit.", "diff": "@@ -1,20 +1,35 @@\n-services: docker\n+dist: \"trusty\"\n+sudo: required\n+\n+matrix:\n+  include:\n+    - language: python", "created_at": "2018-07-10T15:40:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ==", "fields": {"body": "for your code sounds redundant, but I think it is acceptable.", "diff": "@@ -55,6 +55,16 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by coala to check your code\n+for lint issues. A group of these routines(bears) is used for defining\n+certain quality requirements in various languages. A bear can analyse code\n+for potential problems, calculate metrics and even provide corrections for\n+your code. While many of these bears for various languages are shipped along", "created_at": "2018-07-11T20:21:42Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5MjIyMg==", "fields": {"body": "@kriti21 , it would be helpful to indicate what features of IGitt would be useful for the VCS bears .\nOne helpful enhancement is https://gitlab.com/gitmate/open-source/IGitt/issues/111 , or similar, to convert a VCS remote string (e.g. git@github.com/...) to an object which includes identifying the hoster from the domain name in the VCS.", "diff": "@@ -0,0 +1,58 @@\n+---\n+name: \"IGitt SCM support\"\n+desc: \"Add support for git hosters in IGitt and convert coala VCS bears to\n+       use IGitt\"\n+requirements:\n+  - \"An enhancement to the coala VCS bears\"\n+  - \"An enhancement to IGitt\"\n+initiatives:\n+  - GSoC\n+collaborating_projects:\n+  - \"coala\"\n+  - \"IGitt\"\n+---\n+\n+[IGitt](https://gitlab.com/gitmate/open-source/IGitt) is a simple library\n+that allows you to access various git hosting services like GitHub, GitLab\n+and so on via one unified python interface.\n+\n+The coala bears project provides support for git and mercurial VCS but it\n+does not use IGitt. With this project, VCS in coala-bears should be\n+simplified using IGitt.\n+\n+However, there are some git hosters that are not yet supported by IGitt.\n+One such hoster is BitBucket. So it is necessary to add BitBucket support to\n+IGitt before using it to convert the VCS bears in coala-bears.\n+\n+Other git hosters like Gerrit and Phabricator are important for IGitt adoption \n+into large OSS organizations. So are some other non-git SCM, such as Fossil\n+and Launchpad. \n+\n+Support for all these git hosters should be added to IGitt.\n+\n+A recommended preparation task in addition to already mentioned requirements\n+for this project is to make an enhancement to https://github.com/guyzmo/git-repo\n+\n+#### Milestones\n+\n+##### GSOC 2018 COMMUNITY/BONDING\n+\n+* Create a cEP describing the details of how support for additional git\n+  hosters will be added to IGitt.\n+* Understand how bears for VCS are implemented in coala bears and describe\n+  details of how IGitt will be used to improve them.\n+* The participant has a merged enhancement to IGitt.\n+* The participant has completed the newcomer process.\n+\n+##### CODING PHASE 1\n+\n+* Add BitBucket (git & mecurial) support to IGitt.", "created_at": "2018-07-16T19:13:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MjgzOQ==", "fields": {"body": "just checking .. these are commented because they dont work?", "diff": "@@ -0,0 +1,18 @@\n+from django.core.management.base import BaseCommand\n+\n+from data.issues import fetch_issues, import_issue\n+\n+\n+class Command(BaseCommand):\n+    help = 'Import issues opened by newcomers'\n+\n+    COLLECTIONS = staticmethod(fetch_issues)\n+    IMPORT_DATA = staticmethod(import_issue)\n+\n+    def handle(self, *args, **options):\n+        # for data in self.COLLECTIONS('github'):", "created_at": "2018-07-19T15:04:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MzI3NQ==", "fields": {"body": "this is not \"web\".  it is \"webservices\"\nand refer to the get_upstream_remote_url discussion on li-boxuan 's patch", "diff": "@@ -0,0 +1,6 @@\n+from community.git import get_org_name\n+\n+\n+def web_url():", "created_at": "2018-07-19T15:06:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI3ODc0OA==", "fields": {"body": "Yes, I would have to add an if condition for it to work on the empty data.\nOtherwise, we would get the error:\nTypeError: 'NoneType' object is not iterable", "diff": "@@ -0,0 +1,18 @@\n+from django.core.management.base import BaseCommand\n+\n+from data.mrs import fetch_mrs, import_mr\n+\n+\n+class Command(BaseCommand):\n+    help = 'Import mrs opened by newcomers'\n+\n+    COLLECTIONS = staticmethod(fetch_mrs)\n+    IMPORT_DATA = staticmethod(import_mr)\n+\n+    def handle(self, *args, **options):\n+        # for data in self.COLLECTIONS('github'):", "created_at": "2018-07-23T04:18:26Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI4MDAyMg==", "fields": {"body": "But I think it would be good to left it commented because the data at https://webservices.coala.io/mrs/gitlab/all is not empty, when we go to that url, it just keeps loading, which lead to our import command hanging for a while.\nI will un-comment these when we get some data from the webservices.", "diff": "@@ -0,0 +1,18 @@\n+from django.core.management.base import BaseCommand\n+\n+from data.mrs import fetch_mrs, import_mr\n+\n+\n+class Command(BaseCommand):\n+    help = 'Import mrs opened by newcomers'\n+\n+    COLLECTIONS = staticmethod(fetch_mrs)\n+    IMPORT_DATA = staticmethod(import_mr)\n+\n+    def handle(self, *args, **options):\n+        # for data in self.COLLECTIONS('github'):", "created_at": "2018-07-23T04:34:09Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDk2NDUyMw==", "fields": {"body": "So, if we get a list, we assert it has more than one member", "diff": "@@ -51,5 +51,7 @@ def get_data(for_what):\n             except Exception as ex:\n                 logger.error(ex)\n                 break\n+        if type(data) is not list:\n+            data = [data]", "created_at": "2018-07-25T02:18:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMyNjIxNA==", "fields": {"body": "This needs a comment, and you need to add an assert to verify the contents of the dict is what you expect: a single record.", "diff": "@@ -5,8 +5,14 @@\n \n \n def get_affiliated_committers_data(json_object):\n+    \"\"\"\n+    :param json_object: json data of affiliated committers\n+    :return: a list of affiliated committers dict\n+    \"\"\"\n     data = json_object['response']['result'\n                                    ]['affiliated_committers']['affiliator']\n+    if isinstance(data, dict):", "created_at": "2018-07-26T04:06:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMyNzAxOQ==", "fields": {"body": "Dump these files into a github repo which looks like the webservices API , and use rawgit as discussed in meeting.", "diff": "@@ -0,0 +1,89 @@\n+import logging\n+\n+import requests\n+\n+from data.models import (\n+    Issue,\n+    Label,\n+    )\n+from data.newcomers import get_newcomers\n+from data.models import Contributor\n+from data.webservices import webservices_url\n+# from community.git import get_org_name\n+\n+\n+def fetch_issues(hoster):\n+    \"\"\"\n+    Get issues opened by newcomers\n+\n+    :param hoster: a string representing hoster, e.g. 'github'\n+    :return: a json of issues data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    hoster = hoster.lower()\n+    if hoster == 'github':\n+        IMPORT_URL = webservices_url() + 'issues/github/all'\n+    elif hoster == 'gitlab':\n+        IMPORT_URL = webservices_url() + 'issues/gitlab/all'\n+\n+    # Only a test hoster for testing, it will be removed when we\n+    # will get data from the other hosters\n+    elif hoster == 'test':\n+        IMPORT_URL = 'https://pastebin.com/raw/GDMvzGjc'", "created_at": "2018-07-26T04:12:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NjQ5Ng==", "fields": {"body": "this doesnt make sense in this context.\nIt was only appropriate for OpenHub app commands, where there were many commands which were all identical.  And it would only have made sense if you had used inheritence, which you didnt.\nIt makes no sense at all when the handle() are not exactly the same. (which is where inheritance could be used, but you are not doing that).", "diff": "@@ -0,0 +1,20 @@\n+from django.core.management.base import BaseCommand\n+\n+from data.issues import fetch_issues, import_issue\n+\n+\n+class Command(BaseCommand):\n+    help = 'Import issues opened by newcomers'\n+\n+    COLLECTIONS = staticmethod(fetch_issues)", "created_at": "2018-07-29T14:40:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NjQwNw==", "fields": {"body": "and if hoster isnt either of these ... ?\nuse:\nIMPORT_URL = webservices_url('issues/%s/all' % hoster)\nthen an unexpected value will cause a failure.", "diff": "@@ -0,0 +1,87 @@\n+import logging\n+\n+import requests\n+\n+from data.models import (\n+    Issue,\n+    Label,\n+    )\n+from data.newcomers import active_newcomers\n+from data.models import Contributor\n+from data.webservices import webservices_url\n+from data.convert import convert\n+\n+\n+def fetch_issues(hoster):\n+    \"\"\"\n+    Get issues opened by newcomers\n+\n+    :param hoster: a string representing hoster, e.g. 'github'\n+    :return: a json of issues data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    hoster = hoster.lower()\n+    if hoster == 'github':\n+        IMPORT_URL = webservices_url('issues/github/all')\n+    elif hoster == 'gitlab':", "created_at": "2018-07-29T14:38:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3Njc3MQ==", "fields": {"body": "there is no benefit in putting ** style args on this line, as nothing can be added after this line.  Put it all on one line.", "diff": "@@ -0,0 +1,99 @@\n+import logging\n+\n+import requests\n+\n+from data.models import (\n+    MergeRequest,\n+    Label,\n+    IssueNumber,\n+    )\n+from data.newcomers import active_newcomers\n+from data.models import Contributor\n+from data.webservices import webservices_url\n+from data.convert import convert\n+\n+\n+def fetch_mrs(hoster):\n+    \"\"\"\n+    Get mrs opened by newcomers\n+\n+    :param hoster: a string representing hoster, e.g. 'github'\n+    :return: a json of mrs data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    if hoster == 'github':\n+        IMPORT_URL = webservices_url('mrs/github/all')\n+    elif hoster == 'gitlab':\n+        IMPORT_URL = webservices_url('mrs/gitlab/all')\n+\n+    headers = {'Content-Type': 'application/json'}\n+    try:\n+        response = requests.get(\n+            url=IMPORT_URL,\n+            headers=headers,\n+        )\n+        response.raise_for_status()\n+    except Exception as e:\n+        logger.error(e)\n+        return\n+    mrs = response.json()\n+\n+    # Removing mrs which are not opened by newcomers\n+    _mrs = []\n+    for mr in mrs:\n+        if mr['author'] in active_newcomers():\n+            _mrs.append(mr)\n+    return _mrs\n+\n+\n+def import_mr(hoster, mr):\n+    \"\"\"\n+    Import mr data to database\n+\n+    :param hoster: a string representing hoster\n+    :param mr: a dict containing mr's data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    number = mr.get('number')\n+    assignees = mr.pop('assignees')\n+    labels = mr.pop('labels')\n+    author = mr.pop('author')\n+    repo_id = mr['repo_id']\n+    closes_issues = mr.pop('closes_issues')\n+    mr['created_at'] = convert(mr['created_at'])\n+    mr['updated_at'] = convert(mr['updated_at'])\n+    try:\n+        c = Contributor.objects.get(login=author)\n+        mr['author'] = c\n+        mr['hoster'] = hoster\n+        m, created = MergeRequest.objects.get_or_create(\n+            **mr", "created_at": "2018-07-29T14:47:52Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NjkxMA==", "fields": {"body": "_ prefix denotes private.\na local variable is already private, so do not use _ prefixes for local variables.\ncreate a proper variable name which distinguishes this from issues above.", "diff": "@@ -0,0 +1,87 @@\n+import logging\n+\n+import requests\n+\n+from data.models import (\n+    Issue,\n+    Label,\n+    )\n+from data.newcomers import active_newcomers\n+from data.models import Contributor\n+from data.webservices import webservices_url\n+from data.convert import convert\n+\n+\n+def fetch_issues(hoster):\n+    \"\"\"\n+    Get issues opened by newcomers\n+\n+    :param hoster: a string representing hoster, e.g. 'github'\n+    :return: a json of issues data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    hoster = hoster.lower()\n+    if hoster == 'github':\n+        IMPORT_URL = webservices_url('issues/github/all')\n+    elif hoster == 'gitlab':\n+        IMPORT_URL = webservices_url('issues/gitlab/all')\n+\n+    headers = {'Content-Type': 'application/json'}\n+    try:\n+        response = requests.get(\n+            url=IMPORT_URL,\n+            headers=headers,\n+        )\n+        response.raise_for_status()\n+    except Exception as e:\n+        logger.error(e)\n+        return\n+    issues = response.json()\n+\n+    # Removing issues which are not opened by newcomers\n+    _issues = []", "created_at": "2018-07-29T14:51:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NzAxNQ==", "fields": {"body": "this end point should be called active_newcomers or newcomers/active", "diff": "@@ -0,0 +1,21 @@\n+from functools import lru_cache\n+\n+import requests\n+\n+from data.webservices import webservices_url\n+\n+\n+@lru_cache(maxsize=32)\n+def active_newcomers():\n+    \"\"\"\n+    Get the list of newcomers active in the last three months\n+\n+    :return: the list of newcomer usernames\n+    \"\"\"\n+    NEWCOMERS_URL = webservices_url('newcomers')", "created_at": "2018-07-29T14:55:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTM3NA==", "fields": {"body": "get_contrib_data() is called and does some work ... then you delete it by not storing it in a variable!!", "diff": "@@ -10,5 +10,6 @@ class Command(BaseCommand):\n     IMPORT_DATA = staticmethod(import_data)\n \n     def handle(self, *args, **options):\n-        for contributor in self.CONTRIBUTORS():\n-            self.IMPORT_DATA(contributor)\n+        if get_contrib_data():", "created_at": "2018-07-28T03:39:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTQzNQ==", "fields": {"body": "The point was you are calling self.CONTRIBUTORS() twice.\nIt does work.\nDont waste precious computation time by doing it twice.", "diff": "@@ -10,5 +10,6 @@ class Command(BaseCommand):\n     IMPORT_DATA = staticmethod(import_data)\n \n     def handle(self, *args, **options):\n-        for contributor in self.CONTRIBUTORS():\n-            self.IMPORT_DATA(contributor)\n+        if self.CONTRIBUTORS():", "created_at": "2018-07-28T03:41:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc0MjgwMA==", "fields": {"body": "upper case is for constants only.", "diff": "@@ -0,0 +1,17 @@\n+from django.core.management.base import BaseCommand\n+\n+from data.issues import fetch_issues, import_issue\n+\n+\n+class Command(BaseCommand):\n+    help = 'Import issues opened by newcomers'\n+\n+    def handle(self, *args, **options):\n+        GITHUB_DATA = fetch_issues('GitHub')", "created_at": "2018-08-01T02:58:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc5NDA2MA==", "fields": {"body": "Another improper uppercasing", "diff": "@@ -0,0 +1,82 @@\n+import logging\n+\n+import requests\n+\n+from data.models import (\n+    Issue,\n+    Label,\n+    )\n+from data.newcomers import active_newcomers\n+from data.models import Contributor\n+from data.webservices import webservices_url\n+from data.convert import convert\n+\n+\n+def fetch_issues(hoster):\n+    \"\"\"\n+    Get issues opened by newcomers\n+\n+    :param hoster: a string representing hoster, e.g. 'github'\n+    :return: a json of issues data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    hoster = hoster.lower()\n+    IMPORT_URL = webservices_url('issues/%s/all' % hoster)", "created_at": "2018-08-01T08:27:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc5NDQxNA==", "fields": {"body": "What is i. Meaningful names pls.", "diff": "@@ -0,0 +1,82 @@\n+import logging\n+\n+import requests\n+\n+from data.models import (\n+    Issue,\n+    Label,\n+    )\n+from data.newcomers import active_newcomers\n+from data.models import Contributor\n+from data.webservices import webservices_url\n+from data.convert import convert\n+\n+\n+def fetch_issues(hoster):\n+    \"\"\"\n+    Get issues opened by newcomers\n+\n+    :param hoster: a string representing hoster, e.g. 'github'\n+    :return: a json of issues data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    hoster = hoster.lower()\n+    IMPORT_URL = webservices_url('issues/%s/all' % hoster)\n+\n+    headers = {'Content-Type': 'application/json'}\n+    try:\n+        response = requests.get(\n+            url=IMPORT_URL,\n+            headers=headers,\n+        )\n+        response.raise_for_status()\n+    except Exception as e:\n+        logger.error(e)\n+        return\n+    issues = response.json()\n+\n+    # Removing issues which are not opened by newcomers\n+    issues_list = []\n+    for issue in issues:\n+        if issue['author'] in active_newcomers():\n+            issues_list.append(issue)\n+    return issues_list\n+\n+\n+def import_issue(hoster, issue):\n+    \"\"\"\n+    Import issue data to database\n+\n+    :param hoster: a string representing hoster\n+    :param issue: a dict containing issue's data\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    number = issue.get('number')\n+    assignees = issue.pop('assignees')\n+    labels = issue.pop('labels')\n+    author = issue.pop('author')\n+    issue['created_at'] = convert(issue['created_at'])\n+    issue['updated_at'] = convert(issue['updated_at'])\n+    try:\n+        c = Contributor.objects.get(login=author)\n+        issue['author'] = c\n+        issue['hoster'] = hoster\n+        i, created = Issue.objects.get_or_create(**issue)", "created_at": "2018-08-01T08:28:18Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc5NDcyOA==", "fields": {"body": "Use a meaningful module name", "diff": "@@ -0,0 +1,95 @@\n+import logging", "created_at": "2018-08-01T08:29:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MjA4Nw==", "fields": {"body": "all nlp files should go in gitter/nlp/, and nlp training data files in gitter/nlp/training_data/", "diff": "@@ -0,0 +1,28 @@\n+import nltk\n+", "created_at": "2018-08-04T00:05:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MjI2NA==", "fields": {"body": "We need one Splitter, one POSTagger and one DictionaryTagger.\nDo not recreate these objects every time you want to do some nlp on a fragment.\nCreate another class which creates and uses those objects internally, and instantiate only one instance of our class.", "diff": "@@ -0,0 +1,62 @@\n+from gitter.splitter import Splitter\n+from gitter.pos_tagger import POSTagger\n+from gitter.dict_tagger import DictionaryTagger\n+\n+\n+def tagged_sentences(text):\n+    \"\"\"\n+    Tag a message with dict_tagged_sentence.\n+\n+    This method takes a string parameter which is the message\n+    send by the newcomer and then it split it into list of lists\n+    of words using the Splitter class, and it uses POSTagger class\n+    to tag each word with pos. And then it uses the DictionaryTagger\n+    class and the two dict 'gitter/question.yml' and 'gitter/ignore.yml'\n+    and tag the pos tagged word with 'question' or 'ignore'.\n+\n+    :param text: a string representing the message.\n+                 e.g. 'How to solve this issue?'\n+    :return: a list of words tagged with DictTagger and POSTagger.\n+             e.g. [[('how', 'how', ['question', 'WRB']),\n+                    ('can', 'can', ['MD']),\n+                    ('I', 'I', ['PRP']),\n+                    ('solve', 'solve', ['VB']),\n+                    ('this', 'this', ['DT']),\n+                    ('issue', 'issue', ['NN']),\n+                    ('?', '?', ['question', '.'])]]\n+    \"\"\"\n+    splitter = Splitter()\n+    postagger = POSTagger()\n+    splitted_sentences = splitter.split(text)\n+    pos_tagged_sentences = postagger.pos_tag(splitted_sentences)\n+    dicttagger = DictionaryTagger(['gitter/question.yml', 'gitter/ignore.yml'])", "created_at": "2018-08-04T00:08:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MzE1MQ==", "fields": {"body": "there is no message scoring in https://github.com/coala/cEPs/blob/master/cEP-0020.md#gitter , so this method name is not appropriate.\nYou can use score terminology in the gitter/nlp namespace, but in the main app code there is only 'question', 'answer', and 'not known'.", "diff": "@@ -0,0 +1,74 @@\n+import logging\n+\n+import requests\n+\n+from data.webservices import webservices_url\n+from gitter.score import sentiment_score\n+from gitter.models import Question, Answer\n+\n+\n+def get_messages():\n+    \"\"\"\n+    Get all the messages send by newcomers on the gitter rooms.\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    IMPORT_URL = webservices_url('messages')\n+    headers = {'Content-Type': 'application/json'}\n+    try:\n+        response = requests.get(\n+            url=IMPORT_URL,\n+            headers=headers,\n+        )\n+        response.raise_for_status()\n+    except Exception as e:\n+        logger.error(e)\n+        return\n+\n+    data = response.json()\n+    return data\n+\n+\n+def message_score(message):", "created_at": "2018-08-04T00:21:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MzE1OQ==", "fields": {"body": "bad indentation and missing trailing comma.", "diff": "@@ -0,0 +1,74 @@\n+import logging\n+\n+import requests\n+\n+from data.webservices import webservices_url\n+from gitter.score import sentiment_score\n+from gitter.models import Question, Answer\n+\n+\n+def get_messages():\n+    \"\"\"\n+    Get all the messages send by newcomers on the gitter rooms.\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    IMPORT_URL = webservices_url('messages')\n+    headers = {'Content-Type': 'application/json'}\n+    try:\n+        response = requests.get(\n+            url=IMPORT_URL,\n+            headers=headers,\n+        )\n+        response.raise_for_status()\n+    except Exception as e:\n+        logger.error(e)\n+        return\n+\n+    data = response.json()\n+    return data\n+\n+\n+def message_score(message):\n+    \"\"\"\n+    Get the score for a message dict.\n+\n+    :param message: a message dict of type:\n+                    {\n+                       \"identifier\": \"5b588269c0fa8016e7379191\",\n+                       \"room\": \"offtopic\",\n+                       \"sent_at\": \"2018-07-25 14:00:09.456000+00:00\",\n+                       \"sent_by\": \"Naveenaidu\",\n+                        \"text\": \"How can I solve this issue?\"", "created_at": "2018-08-04T00:21:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MzI3OQ==", "fields": {"body": "no use of word 'score' anywhere in the main app logic.  The nlp layer should spit out a 'message classification'.\nmaybe create an enum MessageCategory / MessageType or something like that.", "diff": "@@ -0,0 +1,74 @@\n+import logging\n+\n+import requests\n+\n+from data.webservices import webservices_url\n+from gitter.score import sentiment_score\n+from gitter.models import Question, Answer\n+\n+\n+def get_messages():\n+    \"\"\"\n+    Get all the messages send by newcomers on the gitter rooms.\n+    \"\"\"\n+    logger = logging.getLogger(__name__)\n+    IMPORT_URL = webservices_url('messages')\n+    headers = {'Content-Type': 'application/json'}\n+    try:\n+        response = requests.get(\n+            url=IMPORT_URL,\n+            headers=headers,\n+        )\n+        response.raise_for_status()\n+    except Exception as e:\n+        logger.error(e)\n+        return\n+\n+    data = response.json()\n+    return data\n+\n+\n+def message_score(message):\n+    \"\"\"\n+    Get the score for a message dict.\n+\n+    :param message: a message dict of type:\n+                    {\n+                       \"identifier\": \"5b588269c0fa8016e7379191\",\n+                       \"room\": \"offtopic\",\n+                       \"sent_at\": \"2018-07-25 14:00:09.456000+00:00\",\n+                       \"sent_by\": \"Naveenaidu\",\n+                        \"text\": \"How can I solve this issue?\"\n+                    },\n+    :return: an integer reperesenting score of the message text,\n+             if it's positive the message should be ignored, if it's\n+             negative the message should be saved into Question model,\n+             and if it's zero, the message should be saved into Answer model.\n+\n+    \"\"\"\n+    text = message['text']\n+    return (sentiment_score(text))\n+\n+\n+def import_messages(message):\n+    logger = logging.getLogger(__name__)\n+    sent_by = message.get('sent_by')\n+    score = message_score(message)", "created_at": "2018-08-04T00:23:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MzMyMg==", "fields": {"body": "the identifier and text are more useful\nalso add __repr__ to be more helpful thant __str__ for debugging", "diff": "@@ -0,0 +1,23 @@\n+from django.db import models\n+\n+\n+class Question(models.Model):\n+    identifier = models.CharField(max_length=500, primary_key=True)\n+    room = models.CharField(max_length=300)\n+    text = models.TextField()\n+    sent_at = models.DateTimeField()\n+    sent_by = models.CharField(max_length=300)\n+\n+    def __str__(self):\n+        return ('sent_by: ' + self.sent_by + ' on room: ' + self.room)\n+\n+\n+class Answer(models.Model):\n+    identifier = models.CharField(max_length=500, primary_key=True)\n+    room = models.CharField(max_length=300)\n+    text = models.TextField()\n+    sent_at = models.DateTimeField()\n+    sent_by = models.CharField(max_length=300)\n+\n+    def __str__(self):\n+        return ('sent_by: ' + self.sent_by + ' on room: ' + self.room)", "created_at": "2018-08-04T00:24:07Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzg1OTQ2Mg==", "fields": {"body": "more tests coming soon..", "diff": "@@ -0,0 +1,230 @@\n+from django.test import TestCase\n+\n+from gitter.messages import message_type\n+\n+\n+class MessgeTypeTest(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        pass\n+\n+    def test_ignore_message(self):\n+        \"\"\"\n+        This method is responsible for testing the positive\n+        sentiment score. It means that the message should be ignored.\n+        \"\"\"\n+        message1s = {'text': 'Please assign me this issue'}\n+        m_type1 = message_type(message1s)\n+        self.assertEqual(m_type1, 'ignore')\n+\n+        message2s = {'text': 'Thank you.'}\n+        m_type2 = message_type(message2s)\n+        self.assertEqual(m_type2, 'ignore')\n+\n+        message3s = {'text': 'Okay thank you so much :)'}\n+        m_type3 = message_type(message3s)\n+        self.assertEqual(m_type3, 'ignore')\n+\n+        message4s = {'text': 'I have replied to your comment'}\n+        m_type4 = message_type(message4s)\n+        self.assertEqual(m_type4, 'ignore')\n+\n+        message5s = {'text': 'OK thanks i got it'}\n+        m_type5 = message_type(message5s)\n+        self.assertEqual(m_type5, 'ignore')\n+\n+        message6s = {'text': 'ok Cool'}\n+        m_type6 = message_type(message6s)\n+        self.assertEqual(m_type6, 'ignore')\n+\n+        message7s = {'text': 'I have made the PR'}\n+        m_type7 = message_type(message7s)\n+        self.assertEqual(m_type7, 'ignore')\n+\n+        message8s = {'text': 'Yes, pushing the commit.'}\n+        m_type8 = message_type(message8s)\n+        self.assertEqual(m_type8, 'ignore')\n+\n+        message9s = {'text': 'Thanks a lot! Its working now :D'}\n+        m_type9 = message_type(message9s)\n+        self.assertEqual(m_type9, 'ignore')\n+\n+        message10s = {'text': 'I\\'ll check them again.'}\n+        m_type10 = message_type(message10s)\n+        self.assertEqual(m_type10, 'ignore')\n+\n+        message11s = {'text': 'I tried it locally and it works'}\n+        m_type11 = message_type(message11s)\n+        self.assertEqual(m_type11, 'ignore')\n+\n+        message12s = {'text': 'I\\'ll try never to repeat these mistakes again.'}\n+        m_type12 = message_type(message12s)\n+        self.assertEqual(m_type12, 'ignore')\n+\n+        message13s = {'text': 'It still doesnt open up the pr'}\n+        m_type13 = message_type(message13s)\n+        self.assertEqual(m_type13, 'ignore')\n+\n+        message14s = {'text': 'Cool ill do that'}\n+        m_type14 = message_type(message14s)\n+        self.assertEqual(m_type14, 'ignore')\n+\n+        message15s = {'text': 'Okay .....then I will wait.Anyways thank you'}\n+        m_type15 = message_type(message15s)\n+        self.assertEqual(m_type15, 'ignore')\n+\n+        message16s = {'text': 'Ok thank you, sorry for the multipost'}\n+        m_type16 = message_type(message16s)\n+        self.assertEqual(m_type16, 'ignore')\n+\n+        message17s = {'text': 'Okay thanks! And I saw it, will fix it quick.'}\n+        m_type17 = message_type(message17s)\n+        self.assertEqual(m_type17, 'ignore')\n+\n+        message18s = {\n+            'text': 'Thanks. I read first I have to run on a project.'}\n+        m_type18 = message_type(message18s)\n+        self.assertEqual(m_type18, 'ignore')\n+\n+        message22s = {\n+            'text': 'Please @jayvdb can help me with solving this issue.'}\n+        m_type22 = message_type(message22s)\n+        self.assertEqual(m_type22, 'ignore')\n+\n+    def test_question_message(self):\n+        \"\"\"\n+        This method is responsible for testing the positive\n+        sentiment score. It means that the message should be ignored.\n+        \"\"\"\n+        message1s = {'text': 'I\\'ve got a question can i use the corobo '\n+                             'commands in any channel or is there a '\n+                             'special channel?'}\n+        m_type1 = message_type(message1s)\n+        self.assertEqual(m_type1, 'question')\n+\n+        message2s = {'text': 'Can someone tell me if this pr is okay '\n+                     'or it needs more changes? '}\n+        m_type2 = message_type(message2s)\n+        self.assertEqual(m_type2, 'question')\n+\n+        message3s = {'text': 'Can I work on this?'}\n+        m_type3 = message_type(message3s)\n+        self.assertEqual(m_type3, 'question')\n+\n+        message4s = {'text': 'Can someone assign to me?'}\n+        m_type4 = message_type(message4s)\n+        self.assertEqual(m_type4, 'question')\n+\n+        message5s = {'text': 'How did you put a tickmark on a commit ?'}\n+        m_type5 = message_type(message5s)\n+        self.assertEqual(m_type5, 'question')\n+\n+        message6s = {'text': 'what to do after rebase?'}\n+        m_type6 = message_type(message6s)\n+        self.assertEqual(m_type6, 'question')\n+\n+        message7s = {'text': 'how to Use github interface for review?'}\n+        m_type7 = message_type(message7s)\n+        self.assertEqual(m_type7, 'question')\n+\n+        message8s = {'text': 'But dont i have to wait for my previous '\n+                     'PR to get merged?'}\n+        m_type8 = message_type(message8s)\n+        self.assertEqual(m_type8, 'question')\n+\n+        message9s = {'text': 'is there a separate bears room?'}\n+        m_type9 = message_type(message9s)\n+        self.assertEqual(m_type9, 'question')\n+\n+        message10s = {\n+            'text': 'What does invoking with a single option mean?'}\n+        m_type10 = message_type(message10s)\n+        self.assertEqual(m_type10, 'question')\n+\n+        message11s = {'text': 'Any hint in which file should i add this test?'}\n+        m_type11 = message_type(message11s)\n+        self.assertEqual(m_type11, 'question')\n+\n+        message12s = {'text': 'Should i click on the create pull request?'}\n+        m_type12 = message_type(message12s)\n+        self.assertEqual(m_type12, 'question')\n+\n+        message13s = {'text': 'is the bot down?'}\n+        m_type13 = message_type(message13s)\n+        self.assertEqual(m_type13, 'question')\n+\n+        message14s = {'text': 'can someone tell me which is the docstring '\n+                      'file in -utils'}\n+        m_type14 = message_type(message14s)\n+        self.assertEqual(m_type14, 'question')\n+\n+        message15s = {'text': 'I have done a newcomer issue, and also '\n+                      'reviewed a newcomer issue, What furthere '\n+                      'steps for becoming a developer?'}\n+        m_type15 = message_type(message15s)\n+        self.assertEqual(m_type15, 'question')\n+\n+        message16s = {\n+            'text': 'ok, can you give me some more time to work on this?'}\n+        m_type16 = message_type(message16s)\n+        self.assertEqual(m_type16, 'question')\n+\n+        message17s = {'text': 'I had a question why is corobo down?'}\n+        m_type17 = message_type(message17s)\n+        self.assertEqual(m_type17, 'question')\n+\n+        message18s = {'text': 'ok, so what should I do now?'}\n+        m_type18 = message_type(message18s)\n+        self.assertEqual(m_type18, 'question')\n+\n+        message19s = {'text': 'Okay I will stick to it but why will '\n+                              'he won\\'t approve it?'}\n+        m_type19 = message_type(message19s)\n+        self.assertEqual(m_type19, 'question')\n+\n+        message20s = {'text': 'How do you squash a commit? I\\'m '\n+                              'sorry I\\'m new to this.'}\n+        m_type20 = message_type(message20s)\n+        self.assertEqual(m_type20, 'question')\n+\n+        message21s = {\n+            'text': 'I actually used that guide, did I do something wrong?'}\n+        m_type21 = message_type(message21s)\n+        self.assertEqual(m_type21, 'question')\n+\n+        message23s = {'text': 'Do i need to wait for it to be merged?'}\n+        m_type23 = message_type(message23s)\n+        self.assertEqual(m_type23, 'question')\n+\n+        message24s = {'text': 'Hi, may i know why the bot check for '\n+                      'failed for continuous-integration?'}\n+        m_type24 = message_type(message24s)\n+        self.assertEqual(m_type24, 'question')\n+\n+        message25s = {'text': 'Should i add the file , commit and push?'}\n+        m_type25 = message_type(message25s)\n+        self.assertEqual(m_type25, 'question')\n+\n+        message26s = {'text': 'so how to go about it?'}\n+        m_type26 = message_type(message26s)\n+        self.assertEqual(m_type26, 'question')\n+\n+        message18s = {'text': 'does bear support python 3.7?'}\n+        m_type18 = message_type(message18s)\n+        self.assertEqual(m_type17, 'question')\n+\n+    def test_answer_message(self):\n+        \"\"\"\n+        This method is responsible for testing the positive\n+        sentiment score. It means that the message should be ignored.\n+        \"\"\"\n+        message1s = {'text': 'The commit looks good to me .You can '\n+                     'wait for it to get merged.'}\n+        m_type1 = message_type(message1s)\n+        self.assertEqual(m_type1, 'answer')\n+\n+        message2s = {'text': 'No create a pull request.The Travis CI '\n+                     'build will continue its checking.'}\n+        m_type2 = message_type(message2s)\n+        self.assertEqual(m_type2, 'answer')", "created_at": "2018-08-06T11:31:29Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTQzMzg4", "fields": {"body": "sounds good. atm I have no idea how to edit the js file with rebase edit as it creates conflicts\nwill do later :)", "diff": "@@ -147,5 +147,133 @@ coala should support generating metrics for your code.\",\n \t\t\"initiatives\" : [\"GSoC\"],\n \t\t\"tags\" : [\"Web\", \"Blog\"],\n \t\t\"markdown\": \"coala_web.md\"\n+\t},\n+\t{\n+\t\t\"name\" : \"Optimize Caching\",\n+\t\t\"desc\" : \"Improve coala's performance by implementing caching strategies.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"At least one patch to the coala core should be accepted and merged.\",\n+\t\t\t\"The student should be familiar with ongoing technical cEPs.\",\n+\t\t\t\"The proposal needs to show some familiarity with coala's caching \\\n+\t\t\timplementation.\",\n+\t\t\t\"The student should have understanding of the current caching mechanism\"\n+\t\t],\n+\t\t\"difficulty\" : \"medium\",\n+\t\t\"issues\" : [\n+\t\t\t\"https://github.com/coala/coala/issues/2541\",\n+\t\t\t\"https://github.com/coala/coala/issues/2699\",\n+\t\t\t\"https://github.com/coala/coala/issues/2912\"\n+\t\t],\n+\t\t\"mentors\" : [\n+\t\t\t\"adtac\",\n+\t\t\t\"sils\"\n+\t\t],\n+\t\t\"initiatives\" : [\"GSoC\"],\n+\t\t\"tags\" : [\"Core\", \"Bears\"],\n+\t\t\"markdown\": \"optimize_caching.md\"\n+\t},\n+\t{\n+\t\t\"name\" : \"Cohesive Editor Support\",\n+\t\t\"desc\" : \"\",", "created_at": "2017-01-19T19:53:25Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3OTM5NjQ2", "fields": {"body": "I'm against this addition, getting stuff merged is mandantory. Period. If there's a problem with the goals that can be adjusted but this is not negotiable.", "diff": "@@ -4,6 +4,12 @@ We expect you to:\n * Blog at least once per week (this will be aggregated on\n [blog.coala.io](https://blog.coala.io)).\n * Participate in weekly meetings with your mentor.\n-* Get stuff merged, before the deadlines!\n-* Get in contact with your mentors or the admins if any even remotely\n-potential problems arise.\n+* Get stuff merged, before the deadlines! If this, for whatever reason, looks\n+to be problematic, talk to your mentor or an admin!", "created_at": "2017-01-26T07:10:20Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3", "fields": {"body": "@hemang \ud83d\udc4d  This solves the page refresh problem", "diff": "@@ -12,16 +32,17 @@\n \t\t})\n \t})\n \n-\tapp.controller('TabController', function () {\n-\t\tthis.tab = 1\n-\t\tthis.setTab = function (stab) {\n-\t\t\tthis.tab = stab\n-\t\t\t$(\".button-collapse\").sideNav('hide');\n-\t\t}\n-\t\tthis.isSet = function (stab) {\n-\t\t\treturn this.tab == stab\n-\t\t}\n-\t})\n+    app.controller('TabController', function ($location) {\n+        this.tab = \"/home\";", "created_at": "2017-01-27T09:48:19Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MzM0Mzcw", "fields": {"body": "I'd say \"Half of the choosen issues\" or so", "diff": "@@ -0,0 +1,28 @@\n+The Project is about fixing issues with Generic Bears.\n+\n+Generic Bears have the potential to be awesome, and they have started to get\n+their, but still require a some issues to be fixed. For eg: QuotesBear is not\n+reliable, AnnotationBear needs to give a better more detailed API, \n+IndentationBear looks cool but is not usable yet. These bears can be found \n+[here](https://github.com/coala/coala-bears/tree/master/bears/general).\n+\n+The task is to fix as many issues with these bears and make them as usable\n+as possible.\n+\n+### Milestones\n+\n+##### GSoC 2017 Coding Starts\n+\n+ * All issues are disccused, and a general idea behind the algorithm of\n+ most generic bears is developed.\n+ * New changes to these algorithms(if required) are proposed.\n+\n+##### GSoC 2017 Midterm\n+\n+ * A given set of issues defined in the proposal are resolved.", "created_at": "2017-01-28T16:42:48Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4NDEzODUy", "fields": {"body": "why not just apply the center-block class? Should be avail by default in bootstrap", "diff": "@@ -47,7 +47,7 @@\n             <div  ng-repeat=\"member in gic.adminsList\" class=\"card card-main showcase-card-gi\">\n                 <div class=\"empty\"></div>\n                 <div class=\"card-action profile-data\" >\n-                  <center><img class=\"profile-img\" height=\"100\" ng-src=\"{{ member.github_avatar_url }}\"></center>\n+                  <img class=\"profile-img\" height=\"100\" ng-src=\"{{ member.github_avatar_url }}\">", "created_at": "2017-01-30T10:36:12Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MzczMzU4", "fields": {"body": "maybe add pyflakes?", "diff": "@@ -419,5 +419,24 @@ coala should support generating metrics for your code.\",\n \t\t\"tags\" : [\"Jetbrains IDEs\", \"Plugins\"],\n \t\t\"markdown\": \"jetbrains-ide-plugin.md\",\n \t\t\"collaborating_projects\" : [\"coala\", \"jetbrains\"]\n+\t},\n+\t{\n+\t\t\"name\" : \"Integrate pyflakes-enhanced AST into coala \",\n+\t\t\"desc\" : \"Integrate pyflakes-enhanced AST into coala \\\n+\t\tso that bears can access it.\",\n+\t\t\"requirements\" : [\n+                                \"Integrate pyflakes-enhanced AST into coala by creating \\\n+                                a meta-bear i.e PyflakesASTBear\",\n+\t\t\t\t\"Create two bears that wrap the flake8 AST plugins \\\n+\t\t\t\t'flake8-future-import' and 'flake8-string-format' \\\n+                                using the PyflakesASTBear.\"\n+\t\t],\n+\t\t\"difficulty\" : \"medium\",\n+\t\t\"issues\" : [],\n+\t\t\"mentors\" : [\"jayvdb\", \"srisankethu\"],\n+\t\t\"initiatives\" : [\"GSoC\", \"RGSoC\"],\n+\t\t\"tags\" : [\"Bears\"],", "created_at": "2017-02-03T16:37:36Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx", "fields": {"body": "space before justify", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align:justify;", "created_at": "2017-02-03T19:23:58Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0", "fields": {"body": "space after .description and before {", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{", "created_at": "2017-02-03T19:24:25Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MjEw", "fields": {"body": "space before {", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align:justify;\n+  font-weight: 300;    \n+}\n+.container .gi-container-title{\n+  font-size: 5em;\n+  font-weight: 300;\n+}\n+.description a:hover{", "created_at": "2017-02-03T19:25:13Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMTkw", "fields": {"body": "@Shruti9520 There is extra whitespace on Line 55 after font-weight:300, so you'll have to remove that extra whitespace. And a new PR shouldn't be created after every review iteration, you can follow the newcomer guide to see how to amend your commit and to push the changes in this PR itself \ud83d\ude03", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description {\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align: justify;\n+  font-weight: 300;    ", "created_at": "2017-02-04T07:59:51Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMjk3", "fields": {"body": "\ud83d\udc4d I'll work on it", "diff": "@@ -4,18 +4,19 @@\n \tapp.config(['$routeProvider',\n \t\tfunction($routeProvider) {\n \t\t\t$routeProvider.\n-\t\t\twhen('/', {\n-\t\t\t\tredirectTo: '/projects'\n-\t\t\t}).\n \t\t\twhen('/projects', {\n-\t\t\t\ttemplate: '<projects></projects>'\n+\t\t\t\ttemplate: '<projects></projects>',\n+\t\t\t\treloadOnSearch: false\n \t\t\t}).\n \t\t\twhen('/mentors', {\n \t\t\t\ttemplate: '<mentors></mentors>'\n \t\t\t}).\n \t\t\twhen('/faq', {\n \t\t\t\ttemplate: '<faq></faq>'\n-\t\t\t})\n+\t\t\t}).\n+\t\t\totherwise({\n+                redirectTo: '/projects'", "created_at": "2017-02-04T08:09:16Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzY0", "fields": {"body": "hey, your shortlog isnt according to our standards. It should be \"Improve\" instead of \"Improved\"..see the imperative form :) ?\nalso, enclose \"Get Involved\" in double backticks: ``", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;", "created_at": "2017-02-04T09:58:42Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzcz", "fields": {"body": "you can also run \"coala\" and it fixes everything for you automatically, if you have it installed :)", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description {\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align: justify;\n+  font-weight: 300;    ", "created_at": "2017-02-04T09:59:12Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NTg4OTk0", "fields": {"body": "Can you link these frameworks?", "diff": "@@ -13,6 +13,28 @@ plugins. For some editors like sublime and gedit, running tests is not easy and\n there is no api to do it. In such cases we  would want to use dogtail\n (a GUI tester) or a similar tool to do this.\n \n+Other details (for testing): \n+\n+For sublime, we'll be using the unittest plugin which is a plugin by itself. ", "created_at": "2017-02-06T13:58:32Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcwNTY4", "fields": {"body": "\"rely heavily upon\" sounds better imo", "diff": "@@ -1,24 +1,53 @@\n-[cEP-0004](https://github.com/coala/cEPs/pull/29/files) was meant to improve\n-the usability of coala. It is a very important proposal that never got the time\n-and love it deserved.\n+coala has come a long way from it's early days in terms of it's usability. But\n+all the changes that have been made are improvisations. A proper and planned\n+overhaul of the user interface would help coala become much more user\n+friendly and intuitive. At it's core any software is as good as it's\n+interface with the user and this project aims to improve that.\n+\n+In this project we are going to focus on the command line interface(CLI) of\n+coala. The specific areas and points to focus on are:\n+\n+1. Remove most of the text from the action selection screen.\n+2. Use letters instead of numbers for selecting actions.\n+3. Allow chaining actions in a single input.\n+4. Add a 'select action for all results' operator.\n+5. Make ApplyPatchAction log the applied patch.\n+6. Reprompt after running actions only if the action says so.\n+7. Set 'Do nothing' as the default action.\n+\n+The end goal of the project is to make coala easier to use and hence the\n+project is going to be heavy on mockups and feedback from the community.", "created_at": "2017-02-07T08:51:39Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNTQ2", "fields": {"body": "I think the second sentence is general to all projects of coala, and can be removed.", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.", "created_at": "2017-02-07T09:02:55Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNzM3", "fields": {"body": "\"Priliminary\" -> \"Preliminary\"", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Priliminary tests have been performed to validate the proposed changes'  ", "created_at": "2017-02-07T09:04:01Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyOTA5", "fields": {"body": "\"implmented\" -> \"implemented\"\n\"Section based\" -> \"Section-based\"", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Priliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL\n+\n+* Section based caching has been implmented.", "created_at": "2017-02-07T09:04:51Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1NzMz", "fields": {"body": "PREPARATION/BONDING", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING", "created_at": "2017-02-07T10:09:52Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODAz", "fields": {"body": "CODING PHASE 3", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL\n+\n+* Section-based caching has been implemented.\n+* The corresponding code has been thoroughly tested, documented, reviewed, and  \n+  merged.\n \n ##### GSOC 2017 FINAL", "created_at": "2017-02-07T10:10:13Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODQx", "fields": {"body": "CODING PHASE 1", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM", "created_at": "2017-02-07T10:10:27Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1OTM4", "fields": {"body": "This and midterm are CODING PHASE 2\nMilestones probably have to me moved around a little bit", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL", "created_at": "2017-02-07T10:10:57Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg2NjEy", "fields": {"body": "one other -> an additional", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL\n+\n+* Section-based caching has been implemented.\n+* The corresponding code has been thoroughly tested, documented, reviewed, and  \n+  merged.\n \n ##### GSOC 2017 FINAL\n \n-* At least two more cases have been 'solved' in a similar fashion.\n-* The respective code has been properly tested, documented and merged.\n+* At least one other proposed performance hotspot improvement has been  ", "created_at": "2017-02-07T10:13:27Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMjM5", "fields": {"body": "this sentence sounds not right to me...\nmaybe \"With it, coala only runs on files that changes since the last run, potentially giving huge performance improvements compared to simply running coala on everything regardless.\"", "diff": "@@ -1,28 +1,46 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files", "created_at": "2017-02-07T10:42:43Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMzU0", "fields": {"body": "this is especially important for large projects. Add some story to this maybe.", "diff": "@@ -1,28 +1,46 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run. But coala is still rather slow and could be\n+much faster.", "created_at": "2017-02-07T10:43:25Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MTYy", "fields": {"body": "an -> a", "diff": "@@ -441,5 +441,24 @@ coala should support generating metrics for your code.\",\n \t\t\"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n \t\t\"markdown\": \"vulture.md\",\n \t\t\"collaborating_projects\" : [\"coala\", \"vulture\"]\n+    },\n+    {\n+\t\t\"name\" : \"Documentation Extraction and Parsing\",\n+\t\t\"desc\" : \"The Project is about writing language independent \\\n+\t\t\t\t  documentation extraction and parsing algorithms.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"The participant should have one bugfix patch to any bear accepted.\",\n+\t\t\t\"The participant should have an basic understanding of the algorithms \\", "created_at": "2017-02-07T22:31:05Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MzEx", "fields": {"body": "This is true for all proposals and can be removed", "diff": "@@ -441,5 +441,24 @@ coala should support generating metrics for your code.\",\n \t\t\"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n \t\t\"markdown\": \"vulture.md\",\n \t\t\"collaborating_projects\" : [\"coala\", \"vulture\"]\n+    },\n+    {\n+\t\t\"name\" : \"Documentation Extraction and Parsing\",\n+\t\t\"desc\" : \"The Project is about writing language independent \\\n+\t\t\t\t  documentation extraction and parsing algorithms.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"The participant should have one bugfix patch to any bear accepted.\",\n+\t\t\t\"The participant should have an basic understanding of the algorithms \\\n+\t\t\tbehind existing documentation extraction routines.\",\n+\t\t\t\"The proposal timeline should contain issues which are planned to be \\", "created_at": "2017-02-07T22:31:55Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NTE3", "fields": {"body": "This needs a little story as motivation. What Problem are we trying to fix? How would coala and its users benefit from the project?", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.", "created_at": "2017-02-07T22:33:06Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3Njc1", "fields": {"body": "rename to PREPARATION/BONDING", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING", "created_at": "2017-02-07T22:33:52Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzMx", "fields": {"body": "rename to CODING PHASE 1", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM", "created_at": "2017-02-07T22:34:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzU3", "fields": {"body": "rename to CODING PHASE 3", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.\n+* Create a base class that does the extraction and parsing for us. \n+  [#2659](https://github.com/coala/coala/issues/2659)\n+* Fix [#2143](https://github.com/coala/coala/issues/2143)\n+\n+##### GSOC 2017 FINAL", "created_at": "2017-02-07T22:34:19Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MDU5", "fields": {"body": "Does this need a cEP? or just a concept?\nThe first two milestones are not realy measurable. So maybe just have \"A concept for the design of an efficient parsing system exists\", which implies the first two points", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.", "created_at": "2017-02-07T22:35:45Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MzM3", "fields": {"body": "atleast -> at least", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.", "created_at": "2017-02-07T22:37:13Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4NjIw", "fields": {"body": "Milestones should describe a state that is/has to be reached.\nSo this could be:!A base class, that does the extraction and parsing, is implemented. Fixing \nand the one below could be:\" is fixed. with context what it is about.", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.\n+* Create a base class that does the extraction and parsing for us. ", "created_at": "2017-02-07T22:38:49Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4Njg5", "fields": {"body": "Again make these states not orders.", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.\n+* Create a base class that does the extraction and parsing for us. \n+  [#2659](https://github.com/coala/coala/issues/2659)\n+* Fix [#2143](https://github.com/coala/coala/issues/2143)\n+\n+##### GSOC 2017 FINAL\n+\n+* Implement a DocumentationGrammarBear that fixes grammar inside documentation.", "created_at": "2017-02-07T22:39:08Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDYxNDQx", "fields": {"created_at": "2017-01-19T20:10:44Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTQzMzg4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDg3MDg2", "fields": {"created_at": "2017-01-20T16:09:58Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NDEwODM3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTEzNDEx", "fields": {"created_at": "2017-01-22T12:51:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "SiddharthKumar02", "review": "MDEyOklzc3VlQ29tbWVudDI3NDMyODkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTQxMDE2", "fields": {"created_at": "2017-01-23T17:54:34Z", "content": "THUMBS_UP", "giver": "HitRam", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3NDU2Mjg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjI0NjU4", "fields": {"created_at": "2017-01-26T00:50:56Z", "content": "HOORAY", "giver": "gaocegege", "receiver": "traff", "review": "MDEyOklzc3VlQ29tbWVudDI3NTI1NjQ1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjI5NTEz", "fields": {"created_at": "2017-01-26T07:27:21Z", "content": "THUMBS_UP", "giver": "sils", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDI3NTI5MjU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjUzMjAy", "fields": {"created_at": "2017-01-26T21:10:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3OTM5NjQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY0NDI0", "fields": {"created_at": "2017-01-27T08:30:50Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3OTM5NjQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY2MTk0", "fields": {"created_at": "2017-01-27T09:51:40Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY2MjEz", "fields": {"created_at": "2017-01-27T09:52:33Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzAxMjEy", "fields": {"created_at": "2017-01-29T06:17:33Z", "content": "THUMBS_UP", "giver": "abhsag24", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MzM0Mzcw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzE3NjQz", "fields": {"created_at": "2017-01-30T10:40:17Z", "content": "LAUGH", "giver": "NiklasMM", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NjAyNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzE5MzI0", "fields": {"created_at": "2017-01-30T11:52:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4NDEzODUy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzIwNzI4", "fields": {"created_at": "2017-01-30T12:58:58Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4NDEzODUy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODE5Mzk3", "fields": {"created_at": "2017-02-02T04:02:45Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODIzMzMx", "fields": {"created_at": "2017-02-02T08:17:23Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODM0NDg4", "fields": {"created_at": "2017-02-02T14:26:00Z", "content": "THUMBS_UP", "giver": "etotientz", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3Njk3MDY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY1NjYx", "fields": {"created_at": "2017-02-03T10:02:00Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY4NzI4", "fields": {"created_at": "2017-02-03T11:56:59Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY4NzMx", "fields": {"created_at": "2017-02-03T11:57:05Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc1Mjc0", "fields": {"created_at": "2017-02-03T15:43:33Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI4MTA4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc3NTkz", "fields": {"created_at": "2017-02-03T16:46:11Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI3NTQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODczMTI5", "fields": {"created_at": "2017-02-03T14:45:35Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI2MzkwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODg0MjAw", "fields": {"created_at": "2017-02-03T20:10:00Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Shruti9520", "review": "MDEyOklzc3VlQ29tbWVudDI3NzM0MTE0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODM3", "fields": {"created_at": "2017-02-03T19:26:53Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODQx", "fields": {"created_at": "2017-02-03T19:26:57Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODU0", "fields": {"created_at": "2017-02-03T19:27:13Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODU4", "fields": {"created_at": "2017-02-03T19:27:17Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyOTg2", "fields": {"created_at": "2017-02-03T19:30:46Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MjEw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgzMTM4", "fields": {"created_at": "2017-02-03T19:35:54Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDEyOklzc3VlQ29tbWVudDI3NzMzOTEyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTQ0", "fields": {"created_at": "2017-02-04T15:34:32Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMTkw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTQx", "fields": {"created_at": "2017-02-04T15:34:26Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzcz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTUx", "fields": {"created_at": "2017-02-04T15:35:35Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzY0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk5Mzgz", "fields": {"created_at": "2017-02-04T19:40:23Z", "content": "THUMBS_UP", "giver": "aalind0", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzQ2OTcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODkxMzUy", "fields": {"created_at": "2017-02-04T02:48:51Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MzczMzU4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODkzMzgx", "fields": {"created_at": "2017-02-04T08:14:28Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMjk3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTEwNTU5", "fields": {"created_at": "2017-02-05T19:51:42Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzU0MTkzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTI3NTEy", "fields": {"created_at": "2017-02-06T14:00:53Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NTg4OTk0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTMyNDc1", "fields": {"created_at": "2017-02-06T16:22:14Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "Mariatta", "review": "MDEyOklzc3VlQ29tbWVudDI3NzU1NDUzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2MjAx", "fields": {"created_at": "2017-02-07T09:11:18Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcwNTY4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2NTQ0", "fields": {"created_at": "2017-02-07T09:23:13Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNzM3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2NTY5", "fields": {"created_at": "2017-02-07T09:23:53Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyOTA5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2NTcx", "fields": {"created_at": "2017-02-07T09:23:55Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNTQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTM1", "fields": {"created_at": "2017-02-07T10:25:38Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1NzMz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTM4", "fields": {"created_at": "2017-02-07T10:25:41Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODQx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTQ3", "fields": {"created_at": "2017-02-07T10:25:51Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODAz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTQz", "fields": {"created_at": "2017-02-07T10:25:47Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1OTM4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTU1", "fields": {"created_at": "2017-02-07T10:26:04Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg2NjEy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4ODQx", "fields": {"created_at": "2017-02-07T10:36:03Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNTQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU5Mjkx", "fields": {"created_at": "2017-02-07T10:51:28Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMjM5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTY2NzI3", "fields": {"created_at": "2017-02-07T14:56:53Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "rahulkrishnan98", "review": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTc0NDI0", "fields": {"created_at": "2017-02-07T18:14:31Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODA4NTg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTc0OTgx", "fields": {"created_at": "2017-02-07T18:27:41Z", "content": "THUMBS_UP", "giver": "maweki", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODA4MDE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0Nzk2", "fields": {"created_at": "2017-02-07T23:03:01Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MTYy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0Nzk3", "fields": {"created_at": "2017-02-07T23:03:04Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MzEx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODA5", "fields": {"created_at": "2017-02-07T23:03:24Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NTE3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODE2", "fields": {"created_at": "2017-02-07T23:03:34Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzMx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODE4", "fields": {"created_at": "2017-02-07T23:03:37Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MzM3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODE5", "fields": {"created_at": "2017-02-07T23:03:40Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4NjIw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODEx", "fields": {"created_at": "2017-02-07T23:03:28Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3Njc1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODEz", "fields": {"created_at": "2017-02-07T23:03:31Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MDU5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODIx", "fields": {"created_at": "2017-02-07T23:03:43Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzU3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODIy", "fields": {"created_at": "2017-02-07T23:03:47Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4Njg5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTk2MzI5", "fields": {"created_at": "2017-02-08T08:59:04Z", "content": "THUMBS_UP", "giver": "rahulkrishnan98", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3ODIyMzgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTk4OTQy", "fields": {"created_at": "2017-02-08T10:22:43Z", "content": "THUMBS_UP", "giver": "rahulkrishnan98", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAyODE4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTkxODM0", "fields": {"created_at": "2017-02-08T05:29:08Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "rahulkrishnan98", "review": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDA0NjUw", "fields": {"created_at": "2017-02-08T13:37:04Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODA4NTg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE2Nzk0", "fields": {"created_at": "2017-02-08T18:58:39Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMzU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3Mjc4", "fields": {"created_at": "2017-02-08T19:11:51Z", "content": "THUMBS_UP", "giver": "sims1253", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0MzQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3NDQ1", "fields": {"created_at": "2017-02-08T19:17:00Z", "content": "THUMBS_UP", "giver": "sims1253", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NDQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3NTMy", "fields": {"created_at": "2017-02-08T19:19:33Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NTU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3NzYz", "fields": {"created_at": "2017-02-08T19:25:25Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NDQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDExNzQz", "fields": {"created_at": "2017-02-08T16:38:40Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4MDIyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEyNjE5", "fields": {"created_at": "2017-02-08T17:01:22Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEyNzQ3", "fields": {"created_at": "2017-02-08T17:04:10Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTI5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEyNzU3", "fields": {"created_at": "2017-02-08T17:04:22Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEzODU4", "fields": {"created_at": "2017-02-08T17:34:24Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM5MTI4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDIwMjk2", "fields": {"created_at": "2017-02-08T20:36:57Z", "content": "THUMBS_UP", "giver": "raj-maurya", "receiver": "dracarys09", "review": "MDEyOklzc3VlQ29tbWVudDI3ODQ0MDQ1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDIwNTEz", "fields": {"created_at": "2017-02-08T20:43:42Z", "content": "THUMBS_UP", "giver": "raj-maurya", "receiver": "arnab1896", "review": "MDEyOklzc3VlQ29tbWVudDI3ODQxOTcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Mjk5Mzk5", "fields": {"created_at": "2017-02-17T15:49:25Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI4MDY2MTY3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NTI3MDE1", "fields": {"created_at": "2017-02-25T13:14:06Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3ODM3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDg2Mzc5", "fields": {"created_at": "2017-03-15T23:44:47Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDI4Njc0NDA3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTA4NzYw", "fields": {"created_at": "2017-03-16T15:19:43Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDI4NzA4Nzg1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTc4MDQ5", "fields": {"created_at": "2017-03-19T16:49:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sahilarora535", "review": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTkyMzk1", "fields": {"created_at": "2017-03-20T11:46:02Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDI4NzYxNTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzU1OTQ5", "fields": {"created_at": "2017-03-24T12:18:36Z", "content": "THUMBS_UP", "giver": "kaustubhhiware", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI4OTAwNzQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzY2MzY0", "fields": {"created_at": "2017-03-24T16:59:59Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI4OTA3Mzc4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzY2MzYy", "fields": {"created_at": "2017-03-24T16:59:57Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI4OTA3Mzc4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzkzMDA0", "fields": {"created_at": "2017-03-26T12:33:50Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "madhukar01", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1NDczNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzkzMDE4", "fields": {"created_at": "2017-03-26T12:34:47Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "vijeth-aradhya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MjcxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTM5NDQy", "fields": {"created_at": "2017-03-30T13:40:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyOTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTM5NTYw", "fields": {"created_at": "2017-03-30T13:43:08Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyODQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE0MTQ5", "fields": {"created_at": "2017-04-02T15:35:08Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjE5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE0MjE1", "fields": {"created_at": "2017-04-02T15:41:04Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI5MDk5MzE2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE0ODgz", "fields": {"created_at": "2017-04-02T16:51:38Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMjcyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzM4", "fields": {"created_at": "2017-04-02T19:19:07Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjI4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzMw", "fields": {"created_at": "2017-04-02T19:18:39Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMjcyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzQ0", "fields": {"created_at": "2017-04-02T19:19:30Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMzc2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjI5MDEw", "fields": {"created_at": "2017-04-03T10:16:30Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMzc2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjM0NTE5", "fields": {"created_at": "2017-04-03T13:41:02Z", "content": "THUMBS_UP", "giver": "kaustubhhiware", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI5MTE0NTg1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjMwNjQ0", "fields": {"created_at": "2017-04-03T11:20:37Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4MjE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjMxODc3", "fields": {"created_at": "2017-04-03T12:09:45Z", "content": "LAUGH", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4MjE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjQ1MTgz", "fields": {"created_at": "2017-04-03T18:27:53Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI5MTIwNjgzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjQxOTY3", "fields": {"created_at": "2017-04-03T16:55:24Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI5MTE4NDc3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI1MDAy", "fields": {"created_at": "2017-04-09T06:50:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "impmihai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAxNjQ2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI5ODQz", "fields": {"created_at": "2017-04-09T17:15:54Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDU0NzU3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODU2NDQ5", "fields": {"created_at": "2017-04-10T16:11:45Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2MTk4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODU2NDU3", "fields": {"created_at": "2017-04-10T16:11:59Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "madhukar01", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MTg2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjMxMTg2", "fields": {"created_at": "2017-04-22T20:51:21Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjY1Mzky", "fields": {"created_at": "2017-04-24T15:53:29Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzI2MjI3", "fields": {"created_at": "2017-04-26T04:30:51Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzIzOTA4", "fields": {"created_at": "2017-04-26T02:07:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzgxODMw", "fields": {"created_at": "2017-04-27T13:31:54Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI5NzY3MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDE1Mjg3", "fields": {"created_at": "2017-04-28T10:51:24Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NzkyMDkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDE1Mjg5", "fields": {"created_at": "2017-04-28T10:51:28Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI5Nzk2Nzk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDExNDE3", "fields": {"created_at": "2017-04-28T08:27:38Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI5NzY3MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDI1NjEx", "fields": {"created_at": "2017-04-28T16:22:19Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NzkyMDkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Nzc5MDU1", "fields": {"created_at": "2017-05-11T06:45:21Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTAxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Nzc5MDc4", "fields": {"created_at": "2017-05-11T06:46:13Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTUwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Nzc5ODQ3", "fields": {"created_at": "2017-05-11T07:17:07Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTcxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NzgzNDEx", "fields": {"created_at": "2017-05-11T09:05:52Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTkzMDQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245ODM0MTI4", "fields": {"created_at": "2017-05-12T14:09:04Z", "content": "HEART", "giver": "NiklasMM", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMwMTA4NDU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE5ODMyOQ==", "fields": {"created_at": "2017-05-24T13:15:51Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0NzQzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIxMTAzNg==", "fields": {"created_at": "2017-05-24T18:19:50Z", "content": "LAUGH", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0OTExNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIzNTIzMw==", "fields": {"created_at": "2017-05-25T11:15:08Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQ2NDcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM2MzI5MQ==", "fields": {"created_at": "2017-05-30T14:41:01Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTA5Njc4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM3MjA0OA==", "fields": {"created_at": "2017-05-30T18:00:17Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MjQ1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM3MjA0OQ==", "fields": {"created_at": "2017-05-30T18:00:22Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mjg1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4NzM1OQ==", "fields": {"created_at": "2017-05-31T03:21:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzk4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4NzM2MQ==", "fields": {"created_at": "2017-05-31T03:21:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzc1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4NzM2Mg==", "fields": {"created_at": "2017-05-31T03:21:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MzY3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwNTU5Mg==", "fields": {"created_at": "2017-05-28T06:55:13Z", "content": "HEART", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzMjQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwNTU5Mw==", "fields": {"created_at": "2017-05-28T06:55:15Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzMjQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMzNDczMg==", "fields": {"created_at": "2017-05-29T16:43:01Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0NzU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4Mjg0Nw==", "fields": {"created_at": "2017-06-02T10:54:48Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Adrianzatreanu", "review": "MDEyOklzc3VlQ29tbWVudDMwNTc0MTc0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQwODc2MA==", "fields": {"created_at": "2017-05-31T15:26:34Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTI1MDYyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzNTEwMQ==", "fields": {"created_at": "2017-06-01T08:01:57Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzM0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzNTEwNw==", "fields": {"created_at": "2017-06-01T08:02:04Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzQ1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI0OTAzNQ==", "fields": {"created_at": "2017-06-27T10:51:22Z", "content": "THUMBS_UP", "giver": "arrayslayer", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDA1ODM0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI0OTQyOA==", "fields": {"created_at": "2017-06-27T11:07:04Z", "content": "HEART", "giver": "hemangsk", "receiver": "arrayslayer", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDI0MTIwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODI3OQ==", "fields": {"created_at": "2017-06-26T15:22:28Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDAzMjY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODI4MA==", "fields": {"created_at": "2017-06-26T15:22:31Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU4NjcwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODMxNg==", "fields": {"created_at": "2017-06-26T15:23:19Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU4NjcwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODMxOA==", "fields": {"created_at": "2017-06-26T15:23:23Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDAzMjY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIyMTE0OQ==", "fields": {"created_at": "2017-06-26T16:36:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "arrayslayer", "review": "MDEyOklzc3VlQ29tbWVudDMxMDk2MTQ1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTM2MTYwOA==", "fields": {"created_at": "2017-06-29T22:45:48Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkyODU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTM2MTYwOQ==", "fields": {"created_at": "2017-06-29T22:45:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkyODU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU4MzEwNQ==", "fields": {"created_at": "2017-07-07T10:56:56Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkzODk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjQ5Nw==", "fields": {"created_at": "2017-07-05T13:22:42Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjUwMw==", "fields": {"created_at": "2017-07-05T13:22:50Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwOTE4NQ==", "fields": {"created_at": "2017-07-05T15:51:33Z", "content": "HOORAY", "giver": "IpshitaC", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUzMTU1Mw==", "fields": {"created_at": "2017-07-06T05:48:35Z", "content": "HOORAY", "giver": "IpshitaC", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxMzI4NDM2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4Mw==", "fields": {"created_at": "2017-07-15T15:00:26Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4NQ==", "fields": {"created_at": "2017-07-15T15:00:29Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4Nw==", "fields": {"created_at": "2017-07-15T15:00:36Z", "content": "HEART", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxNTUzODQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4OQ==", "fields": {"created_at": "2017-07-15T15:00:38Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxNTUzODQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5MA==", "fields": {"created_at": "2017-07-15T15:00:43Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5Mg==", "fields": {"created_at": "2017-07-15T15:00:46Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTUxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5NQ==", "fields": {"created_at": "2017-07-15T15:00:49Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5OA==", "fields": {"created_at": "2017-07-15T15:00:52Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwMg==", "fields": {"created_at": "2017-07-15T15:00:55Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTI3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwMw==", "fields": {"created_at": "2017-07-15T15:00:59Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwNQ==", "fields": {"created_at": "2017-07-15T15:01:02Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTIxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwNg==", "fields": {"created_at": "2017-07-15T15:01:06Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwNw==", "fields": {"created_at": "2017-07-15T15:01:09Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjk4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcxMA==", "fields": {"created_at": "2017-07-15T15:01:16Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTEzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDA1MQ==", "fields": {"created_at": "2017-07-16T09:55:59Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDMxNTU5NTQwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDM1Nw==", "fields": {"created_at": "2017-07-16T10:31:41Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NTk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDM1OQ==", "fields": {"created_at": "2017-07-16T10:31:45Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDM2MA==", "fields": {"created_at": "2017-07-16T10:31:47Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDU1NA==", "fields": {"created_at": "2017-07-16T11:00:19Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTU5OTk2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg4NzExMg==", "fields": {"created_at": "2017-07-17T17:32:11Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTYwNjU4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg4NzM1NA==", "fields": {"created_at": "2017-07-17T17:37:51Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg4NzM1Ng==", "fields": {"created_at": "2017-07-17T17:37:53Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2NQ==", "fields": {"created_at": "2017-07-18T06:06:07Z", "content": "HOORAY", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2Ng==", "fields": {"created_at": "2017-07-18T06:06:07Z", "content": "THUMBS_UP", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2Nw==", "fields": {"created_at": "2017-07-18T06:06:08Z", "content": "LAUGH", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2OQ==", "fields": {"created_at": "2017-07-18T06:06:13Z", "content": "HEART", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxNDcxNw==", "fields": {"created_at": "2017-07-18T10:13:56Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNTc4OA==", "fields": {"created_at": "2017-07-18T15:03:48Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk5ODExMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNzEwNQ==", "fields": {"created_at": "2017-07-18T15:29:42Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNzc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNzEwOA==", "fields": {"created_at": "2017-07-18T15:29:45Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNzc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA3OTg0OQ==", "fields": {"created_at": "2017-07-22T13:22:07Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA3OTg3NQ==", "fields": {"created_at": "2017-07-22T13:25:50Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjE1OTAxNQ==", "fields": {"created_at": "2017-07-25T12:25:22Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "ashwini0529", "review": "MDEyOklzc3VlQ29tbWVudDMxNzU3MjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjE1OTAxNg==", "fields": {"created_at": "2017-07-25T12:25:22Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "ashwini0529", "review": "MDEyOklzc3VlQ29tbWVudDMxNzU3MjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2MjI1MA==", "fields": {"created_at": "2017-07-31T15:38:49Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMxOTEwNzcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2MjIwNQ==", "fields": {"created_at": "2017-07-31T15:37:49Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxOTA1Njg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2NDYwNw==", "fields": {"created_at": "2017-07-31T16:44:05Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDMxOTEyNjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNTE2MQ==", "fields": {"created_at": "2017-07-29T17:10:49Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDI1NQ==", "fields": {"created_at": "2017-08-10T15:40:20Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDU1MA==", "fields": {"created_at": "2017-08-10T15:46:20Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNjc1OA==", "fields": {"created_at": "2017-08-10T16:34:26Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwMDE3Nw==", "fields": {"created_at": "2017-08-12T15:45:34Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk5NjkyNQ==", "fields": {"created_at": "2017-08-18T10:32:38Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyMzMxODIwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njc4OA==", "fields": {"created_at": "2017-08-26T12:34:40Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njc5MA==", "fields": {"created_at": "2017-08-26T12:34:58Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzc4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njc5Mw==", "fields": {"created_at": "2017-08-26T12:35:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4NzkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI4MjA0Mg==", "fields": {"created_at": "2017-08-27T20:56:42Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI4MjA0Mw==", "fields": {"created_at": "2017-08-27T20:56:45Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQ0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI5MDQ3Nw==", "fields": {"created_at": "2017-08-28T07:45:46Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDEyOklzc3VlQ29tbWVudDMyNTI4Mjg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI5MzA3MQ==", "fields": {"created_at": "2017-08-28T09:06:51Z", "content": "HEART", "giver": "hemangsk", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMyNTMwMDc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzM0MTA2Mw==", "fields": {"created_at": "2017-08-29T11:08:23Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMyNTUzODU5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQ0MjMwNA==", "fields": {"created_at": "2017-08-31T14:22:14Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDEyOklzc3VlQ29tbWVudDMyNjE0ODYwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTI1MDAyMg==", "fields": {"created_at": "2017-10-20T21:15:39Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "cornu-ammonis", "review": "MDEyOklzc3VlQ29tbWVudDMzODMyMzk4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTMxNjY0OA==", "fields": {"created_at": "2017-10-23T18:08:08Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "acashmkj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjMzNTU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYwNjk5Mg==", "fields": {"created_at": "2017-10-31T07:36:30Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "anshumanv", "review": "MDEyOklzc3VlQ29tbWVudDM0MDY4MjcxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYyMjY0OA==", "fields": {"created_at": "2017-10-31T14:34:18Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "mohitkyadav", "review": "MDEyOklzc3VlQ29tbWVudDM0MDc4MDU1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYyOTk0Mg==", "fields": {"created_at": "2017-10-31T16:51:19Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MDgyNjgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc0OTQwNA==", "fields": {"created_at": "2017-11-03T08:20:43Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2MDc1OA==", "fields": {"created_at": "2017-11-03T13:58:18Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2Mjk2NQ==", "fields": {"created_at": "2017-11-03T14:42:36Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4MzEwOA==", "fields": {"created_at": "2017-11-03T23:47:35Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "troublemagnet", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4ODI1Nw==", "fields": {"created_at": "2017-11-04T09:51:09Z", "content": "THUMBS_UP", "giver": "yashasingh", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4OTU2OA==", "fields": {"created_at": "2017-11-04T12:07:59Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkyODgyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc5NDAzMw==", "fields": {"created_at": "2017-11-04T18:33:57Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkxODYyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc5NjEwMg==", "fields": {"created_at": "2017-11-04T21:39:41Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk5OTE0Mg==", "fields": {"created_at": "2017-11-09T17:42:35Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "neelanshsahai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkwODkzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk5OTE0OA==", "fields": {"created_at": "2017-11-09T17:42:40Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "neelanshsahai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkxMDE3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkxMzkzNA==", "fields": {"created_at": "2017-11-08T03:14:25Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkyMDEyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkyOTY1MA==", "fields": {"created_at": "2017-11-08T12:10:03Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkzNjc4Mg==", "fields": {"created_at": "2017-11-08T14:50:21Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0MjgzNTQwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA1Mzk3Mg==", "fields": {"created_at": "2017-11-10T21:19:59Z", "content": "HOORAY", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDMzNjMwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA2NDE0Ng==", "fields": {"created_at": "2017-11-11T12:00:39Z", "content": "THUMBS_UP", "giver": "troublemagnet", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE0NTQ5NQ==", "fields": {"created_at": "2017-11-14T09:16:08Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE4OTY5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE0NjA3OQ==", "fields": {"created_at": "2017-11-14T09:30:08Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE5NDk5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE0NzAxNg==", "fields": {"created_at": "2017-11-14T09:51:33Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE5ODY2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE3Mjc4MA==", "fields": {"created_at": "2017-11-14T19:07:24Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE5ODY2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjEzMjUzOQ==", "fields": {"created_at": "2017-11-14T00:29:51Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDcwMzk4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjEzOTAzNA==", "fields": {"created_at": "2017-11-14T05:24:02Z", "content": "THUMBS_UP", "giver": "gabru-md", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE0OTkzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjI1Nzc3MQ==", "fields": {"created_at": "2017-11-16T12:19:59Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDgyMTIzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIwNzI3OA==", "fields": {"created_at": "2017-11-15T13:06:13Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIwNzg4OA==", "fields": {"created_at": "2017-11-15T13:21:19Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIxNTE3Mg==", "fields": {"created_at": "2017-11-15T15:50:10Z", "content": "THUMBS_UP", "giver": "amitsin6h", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIxNTM2NA==", "fields": {"created_at": "2017-11-15T15:53:07Z", "content": "THUMBS_UP", "giver": "amitsin6h", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIyMTI4Mg==", "fields": {"created_at": "2017-11-15T17:54:51Z", "content": "THUMBS_UP", "giver": "acashmkj", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3MQ==", "fields": {"created_at": "2017-11-18T18:57:32Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTg0NDA2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3NQ==", "fields": {"created_at": "2017-11-18T18:57:41Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3OA==", "fields": {"created_at": "2017-11-18T18:57:57Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3OQ==", "fields": {"created_at": "2017-11-18T18:58:02Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDUwNA==", "fields": {"created_at": "2017-11-18T18:59:45Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDcwMw==", "fields": {"created_at": "2017-11-18T19:16:03Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "ihsraham", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2NDE1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM3MTY2Mg==", "fields": {"created_at": "2017-11-20T09:23:57Z", "content": "THUMBS_UP", "giver": "neelanshsahai", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTYzNzE4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMQ==", "fields": {"created_at": "2017-11-17T17:41:24Z", "content": "HOORAY", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMg==", "fields": {"created_at": "2017-11-17T17:41:27Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY4Nzk3MA==", "fields": {"created_at": "2017-11-28T20:58:50Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Lyrenhex", "review": "MDEyOklzc3VlQ29tbWVudDM0NzY2MTM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY5Nzg3NQ==", "fields": {"created_at": "2017-11-29T02:04:43Z", "content": "HOORAY", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzcyODE2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMTgxNQ==", "fields": {"created_at": "2017-11-27T05:39:45Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjM2Nw==", "fields": {"created_at": "2017-11-27T06:14:40Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjQ4MQ==", "fields": {"created_at": "2017-11-27T06:21:01Z", "content": "THUMBS_UP", "giver": "0x48piraj", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjc0NQ==", "fields": {"created_at": "2017-11-27T06:34:18Z", "content": "THUMBS_UP", "giver": "khanchi97", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMzY2Mw==", "fields": {"created_at": "2017-11-27T07:19:24Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "0x48piraj", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwNDU4OA==", "fields": {"created_at": "2017-11-27T07:58:27Z", "content": "LAUGH", "giver": "yashovardhanagrawal", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4OTQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcxODM2NQ==", "fields": {"created_at": "2017-11-29T13:34:02Z", "content": "THUMBS_UP", "giver": "yukiisbored", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzY3NzIyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0Njg0OQ==", "fields": {"created_at": "2017-12-02T13:24:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ5NjE1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0Nzg4OQ==", "fields": {"created_at": "2017-12-02T15:07:12Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQ5NjMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0ODE3Mw==", "fields": {"created_at": "2017-12-02T15:34:19Z", "content": "HOORAY", "giver": "yukiisbored", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDM0ODY5ODQ0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg3Mzk3OA==", "fields": {"created_at": "2017-12-04T07:25:06Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDU3MTE1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0NjAyMg==", "fields": {"created_at": "2017-12-05T16:29:47Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAwMTE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0Nzc1NA==", "fields": {"created_at": "2017-12-05T17:05:37Z", "content": "THUMBS_UP", "giver": "nkprince007", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAwMTE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0ODQwMw==", "fields": {"created_at": "2017-12-05T17:19:46Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0OTg0Nw==", "fields": {"created_at": "2017-12-05T17:50:39Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAwMTE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk1MjM1NA==", "fields": {"created_at": "2017-12-05T18:47:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2MTQyNA==", "fields": {"created_at": "2017-12-05T22:27:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2MTU3MQ==", "fields": {"created_at": "2017-12-05T22:31:22Z", "content": "THUMBS_UP", "giver": "nkprince007", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTA5NDAwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2NDgyNA==", "fields": {"created_at": "2017-12-06T00:15:50Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2ODI4OQ==", "fields": {"created_at": "2017-12-06T02:41:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3MTQxNg==", "fields": {"created_at": "2017-12-06T05:30:17Z", "content": "LAUGH", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3MTkwNA==", "fields": {"created_at": "2017-12-06T05:54:17Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE0MjM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg2NQ==", "fields": {"created_at": "2017-12-06T08:29:06Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg5OA==", "fields": {"created_at": "2017-12-06T08:30:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkwNDkxNg==", "fields": {"created_at": "2017-12-04T20:08:50Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDc2MDY5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkxODU1MA==", "fields": {"created_at": "2017-12-05T03:36:41Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "indmind", "review": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzU3OA==", "fields": {"created_at": "2017-12-05T07:48:42Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzg2NA==", "fields": {"created_at": "2017-12-05T07:58:40Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA2MTg0MA==", "fields": {"created_at": "2017-12-07T22:25:10Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTYzMjgxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA2MTg0Mg==", "fields": {"created_at": "2017-12-07T22:25:14Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTYzMzQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA2Nzg2MA==", "fields": {"created_at": "2017-12-08T02:26:26Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTY5MTYyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MDAwNg==", "fields": {"created_at": "2017-12-08T04:21:56Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MTg0Mw==", "fields": {"created_at": "2017-12-08T06:15:44Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MjcyMQ==", "fields": {"created_at": "2017-12-08T07:00:40Z", "content": "HEART", "giver": "synicalsyntax", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzA0OQ==", "fields": {"created_at": "2017-12-08T07:14:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzE1MQ==", "fields": {"created_at": "2017-12-08T07:18:57Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA5MzI2Mg==", "fields": {"created_at": "2017-12-08T17:00:48Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDI4NA==", "fields": {"created_at": "2017-12-06T17:50:09Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzA4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDI5Mw==", "fields": {"created_at": "2017-12-06T17:50:13Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMjkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDc3Mg==", "fields": {"created_at": "2017-12-06T18:00:39Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDc3Ng==", "fields": {"created_at": "2017-12-06T18:00:45Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxMzk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAwMDc5Mg==", "fields": {"created_at": "2017-12-06T18:01:02Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTIxNDA5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAzMDc5NA==", "fields": {"created_at": "2017-12-07T10:17:48Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAzMzQ1OQ==", "fields": {"created_at": "2017-12-07T11:28:19Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "Techievena", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTQ5NTAwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE4NjMwMg==", "fields": {"created_at": "2017-12-12T04:35:25Z", "content": "HEART", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzExNjMwMA==", "fields": {"created_at": "2017-12-09T17:58:52Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkyODAzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNTY1Nw==", "fields": {"created_at": "2017-12-10T13:20:53Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "Grox-Ni", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjI2Mg==", "fields": {"created_at": "2017-12-10T14:22:11Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjM5Mg==", "fields": {"created_at": "2017-12-10T14:33:36Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjMyMw==", "fields": {"created_at": "2017-12-10T14:26:52Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjk2MA==", "fields": {"created_at": "2017-12-10T15:22:18Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Ng==", "fields": {"created_at": "2017-12-10T16:45:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Nw==", "fields": {"created_at": "2017-12-10T16:45:25Z", "content": "HEART", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMTgyNQ==", "fields": {"created_at": "2017-12-10T22:39:57Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMzY2OA==", "fields": {"created_at": "2017-12-11T01:19:09Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzNzM1MQ==", "fields": {"created_at": "2017-12-11T05:24:19Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mg==", "fields": {"created_at": "2017-12-11T06:36:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mw==", "fields": {"created_at": "2017-12-11T06:36:03Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk1Ng==", "fields": {"created_at": "2017-12-11T06:47:31Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk4Nw==", "fields": {"created_at": "2017-12-11T06:48:35Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNQ==", "fields": {"created_at": "2017-12-11T06:46:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNw==", "fields": {"created_at": "2017-12-11T06:46:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MDQ3NQ==", "fields": {"created_at": "2017-12-13T07:34:04Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MTkyMQ==", "fields": {"created_at": "2017-12-13T08:24:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MjE0OQ==", "fields": {"created_at": "2017-12-13T08:30:29Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI4ODUzNw==", "fields": {"created_at": "2017-12-14T05:40:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNjk2NA==", "fields": {"created_at": "2017-12-12T22:08:24Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNzUxNg==", "fields": {"created_at": "2017-12-12T22:22:46Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM4Mg==", "fields": {"created_at": "2017-12-13T02:42:18Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM5OQ==", "fields": {"created_at": "2017-12-13T02:42:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNjc4MA==", "fields": {"created_at": "2017-12-13T04:52:17Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzOTU3Mw==", "fields": {"created_at": "2017-12-13T06:56:58Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3MzczOA==", "fields": {"created_at": "2017-12-16T03:40:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NDcyMQ==", "fields": {"created_at": "2017-12-16T06:15:38Z", "content": "CONFUSED", "giver": "ashwini0529", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjE2NDE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NTM2Nw==", "fields": {"created_at": "2017-12-16T07:55:31Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNjYzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NTQ1Mw==", "fields": {"created_at": "2017-12-16T08:06:29Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNjgyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA1OQ==", "fields": {"created_at": "2017-12-16T09:26:26Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA2Mg==", "fields": {"created_at": "2017-12-16T09:27:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MTA1Mw==", "fields": {"created_at": "2017-12-16T18:02:20Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjE2MzUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MTE4Nw==", "fields": {"created_at": "2017-12-16T18:15:41Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzODM5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3NA==", "fields": {"created_at": "2017-12-16T22:16:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3Ng==", "fields": {"created_at": "2017-12-16T22:16:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4Mzg4MA==", "fields": {"created_at": "2017-12-16T22:36:00Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "margobra8", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4NjE4OQ==", "fields": {"created_at": "2017-12-17T04:08:37Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjg4Ng==", "fields": {"created_at": "2017-12-17T17:37:51Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjk0Mw==", "fields": {"created_at": "2017-12-17T17:41:56Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5MzA4MQ==", "fields": {"created_at": "2017-12-17T17:54:58Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzMxMDMzNg==", "fields": {"created_at": "2017-12-14T15:45:12Z", "content": "THUMBS_UP", "giver": "myfrom", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNDIwNQ==", "fields": {"created_at": "2017-12-18T07:43:12Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNzA0Ng==", "fields": {"created_at": "2017-12-18T09:18:14Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQxMDU3Nw==", "fields": {"created_at": "2017-12-18T10:49:42Z", "content": "THUMBS_UP", "giver": "Rahmeen14", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MDU4Ng==", "fields": {"created_at": "2017-12-21T04:33:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MjI3MQ==", "fields": {"created_at": "2017-12-21T06:13:45Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0NDMwOA==", "fields": {"created_at": "2017-12-21T07:45:42Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NDEyMQ==", "fields": {"created_at": "2017-12-22T04:47:28Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NTM5NA==", "fields": {"created_at": "2017-12-22T06:06:15Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU5MTMxMA==", "fields": {"created_at": "2017-12-22T10:09:34Z", "content": "THUMBS_UP", "giver": "k4ni5h", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM1MzQ0MjMzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTI3Mw==", "fields": {"created_at": "2017-12-20T10:45:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTU4Mw==", "fields": {"created_at": "2017-12-20T10:54:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUxMDM0NA==", "fields": {"created_at": "2017-12-20T13:18:28Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYwNg==", "fields": {"created_at": "2017-12-20T17:26:03Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYzNw==", "fields": {"created_at": "2017-12-20T17:26:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTc2Ng==", "fields": {"created_at": "2017-12-20T17:30:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMjA1Mg==", "fields": {"created_at": "2017-12-20T17:37:29Z", "content": "LAUGH", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUzMDIwNA==", "fields": {"created_at": "2017-12-20T21:08:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc2OQ==", "fields": {"created_at": "2017-12-25T15:06:32Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3MA==", "fields": {"created_at": "2017-12-25T15:06:34Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3Mg==", "fields": {"created_at": "2017-12-25T15:06:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQyMw==", "fields": {"created_at": "2017-12-25T21:04:23Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQzNg==", "fields": {"created_at": "2017-12-25T21:06:08Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0OTAzNg==", "fields": {"created_at": "2017-12-26T05:33:40Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY1NTYzMA==", "fields": {"created_at": "2017-12-26T12:00:10Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY4Mzk3Nw==", "fields": {"created_at": "2017-12-27T13:03:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYwMjcxMA==", "fields": {"created_at": "2017-12-22T16:39:35Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNg==", "fields": {"created_at": "2017-12-24T02:00:01Z", "content": "HEART", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNw==", "fields": {"created_at": "2017-12-24T02:00:25Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNDEyOA==", "fields": {"created_at": "2017-12-24T02:47:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQ2OQ==", "fields": {"created_at": "2017-12-24T07:02:47Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQwOQ==", "fields": {"created_at": "2017-12-24T06:52:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQxMA==", "fields": {"created_at": "2017-12-24T06:52:44Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNjM5Nw==", "fields": {"created_at": "2017-12-24T09:34:09Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "danes44", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NzYzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzMDA2Mg==", "fields": {"created_at": "2017-12-24T17:39:19Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzc3Nzg3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzMjI4MQ==", "fields": {"created_at": "2017-12-24T23:35:38Z", "content": "HEART", "giver": "dob9601", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzMzkzMg==", "fields": {"created_at": "2017-12-25T03:02:06Z", "content": "THUMBS_UP", "giver": "danes44", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzc3Nzg3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzOTI2NA==", "fields": {"created_at": "2017-12-25T10:45:55Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc0NDc1OA==", "fields": {"created_at": "2017-12-29T18:22:08Z", "content": "THUMBS_UP", "giver": "adi23arora", "receiver": "namantw", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQyNDEwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc1ODY3MA==", "fields": {"created_at": "2017-12-30T18:47:47Z", "content": "THUMBS_UP", "giver": "namantw", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDM1NDU1Njg0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc2NTEzMg==", "fields": {"created_at": "2017-12-31T10:10:34Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDExNw==", "fields": {"created_at": "2017-12-28T06:33:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDMzNA==", "fields": {"created_at": "2017-12-28T06:48:01Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNTYyNg==", "fields": {"created_at": "2017-12-28T07:58:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNjE4Nw==", "fields": {"created_at": "2017-12-28T08:24:19Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDE0MQ==", "fields": {"created_at": "2017-12-29T09:31:03Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDQ3OA==", "fields": {"created_at": "2017-12-29T09:50:54Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MjY5NQ==", "fields": {"created_at": "2018-01-04T04:48:24Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MzE4OA==", "fields": {"created_at": "2018-01-04T05:22:45Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTUwMjU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MzM0OQ==", "fields": {"created_at": "2018-01-04T05:36:22Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTQ5MjI5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MzM1Ng==", "fields": {"created_at": "2018-01-04T05:36:28Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTUwMjgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgwNDU5Nw==", "fields": {"created_at": "2018-01-02T17:43:22Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE5ODYxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgwNDYwMg==", "fields": {"created_at": "2018-01-02T17:43:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTE5OTE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgzNjQ2OQ==", "fields": {"created_at": "2018-01-03T14:28:06Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODAxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgzNjQ4Nw==", "fields": {"created_at": "2018-01-03T14:28:41Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODQxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzgzNjc2Ng==", "fields": {"created_at": "2018-01-03T14:35:19Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM1ODQ0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk1MzY0Nw==", "fields": {"created_at": "2018-01-06T15:55:07Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "dob9601", "review": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk3MjI1Ng==", "fields": {"created_at": "2018-01-07T17:19:37Z", "content": "THUMBS_UP", "giver": "namantw", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTYwMzgxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkxNzg4Nw==", "fields": {"created_at": "2018-01-05T11:51:47Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTU4OTY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkxNzkyOA==", "fields": {"created_at": "2018-01-05T11:53:06Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTU4OTc4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyMzAwNg==", "fields": {"created_at": "2018-01-05T14:28:17Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg3ODIyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyMzAyMg==", "fields": {"created_at": "2018-01-05T14:28:38Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg4MDMxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyMzAyNw==", "fields": {"created_at": "2018-01-05T14:28:45Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg4MDAyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyNDc5OQ==", "fields": {"created_at": "2018-01-05T15:10:43Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5MTM0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyNDkwOA==", "fields": {"created_at": "2018-01-05T15:12:56Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTg5MTU5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyNjE5Mg==", "fields": {"created_at": "2018-01-05T15:39:12Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwMzA1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzkyNjgzOQ==", "fields": {"created_at": "2018-01-05T15:51:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTkwNDY0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODEzNDI0Nw==", "fields": {"created_at": "2018-01-11T08:05:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODEzODU1MQ==", "fields": {"created_at": "2018-01-11T09:48:46Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "Prabhat-IIT", "review": "MDEyOklzc3VlQ29tbWVudDM1Njg4MTQ5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI0MTkyNw==", "fields": {"created_at": "2018-01-14T09:25:28Z", "content": "LAUGH", "giver": "newbazz", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM5MTY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM5MDg1NA==", "fields": {"created_at": "2018-01-17T18:57:28Z", "content": "THUMBS_UP", "giver": "vipuldcoder", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODQ1NDg5NA==", "fields": {"created_at": "2018-01-18T22:12:14Z", "content": "THUMBS_UP", "giver": "ShivamSinghania", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1NzgyNA==", "fields": {"created_at": "2018-01-22T12:58:45Z", "content": "THUMBS_DOWN", "giver": "realslimshanky", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1ODE2MQ==", "fields": {"created_at": "2018-01-22T13:06:57Z", "content": "THUMBS_DOWN", "giver": "anctartica", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwNg==", "fields": {"created_at": "2018-01-22T13:43:34Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwOQ==", "fields": {"created_at": "2018-01-22T13:43:36Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM4Nw==", "fields": {"created_at": "2018-01-22T13:57:59Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM5MQ==", "fields": {"created_at": "2018-01-22T13:58:07Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDU1Ng==", "fields": {"created_at": "2018-01-22T14:02:36Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2ODkyNg==", "fields": {"created_at": "2018-01-22T16:30:41Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2OTM3OA==", "fields": {"created_at": "2018-01-22T16:39:13Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODc1MDQwOQ==", "fields": {"created_at": "2018-01-25T20:00:07Z", "content": "THUMBS_UP", "giver": "Kagamihime", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE0NDcyNw==", "fields": {"created_at": "2018-02-05T05:40:04Z", "content": "THUMBS_UP", "giver": "mvinoba", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE5OTYwMw==", "fields": {"created_at": "2018-02-06T06:52:29Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "mvinoba", "review": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyMDYzOQ==", "fields": {"created_at": "2018-02-13T11:28:23Z", "content": "HOORAY", "giver": "realslimshanky", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTY5MzcwNw==", "fields": {"created_at": "2018-02-16T14:44:19Z", "content": "LAUGH", "giver": "Makman2", "receiver": "nguptaa", "review": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTgyODE3Ng==", "fields": {"created_at": "2018-02-20T17:15:58Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM2NjQ5MjE5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTgzNTM2Ng==", "fields": {"created_at": "2018-02-20T19:31:58Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NzA4Mjg1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1MzM3OQ==", "fields": {"created_at": "2018-02-22T18:16:05Z", "content": "HOORAY", "giver": "sks444", "receiver": "himanshu1603", "review": "MDEyOklzc3VlQ29tbWVudDM2Nzc1NDczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1Mzk0MQ==", "fields": {"created_at": "2018-02-22T18:27:13Z", "content": "HOORAY", "giver": "himanshu1603", "receiver": "himanshu1603", "review": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1NDE1OA==", "fields": {"created_at": "2018-02-22T18:31:45Z", "content": "LAUGH", "giver": "sks444", "receiver": "himanshu1603", "review": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Mw==", "fields": {"created_at": "2018-02-23T01:52:50Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Nw==", "fields": {"created_at": "2018-02-23T01:52:56Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY4OQ==", "fields": {"created_at": "2018-02-23T01:54:31Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYxMA==", "fields": {"created_at": "2018-02-23T01:51:52Z", "content": "LAUGH", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzMw==", "fields": {"created_at": "2018-02-23T01:52:33Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzNQ==", "fields": {"created_at": "2018-02-23T01:52:38Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA0MDYzOQ==", "fields": {"created_at": "2018-02-25T04:56:44Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDI3NTI5MjU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA4NjQ2OQ==", "fields": {"created_at": "2018-02-26T15:56:46Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "LenaAn", "review": "MDEyOklzc3VlQ29tbWVudDM2ODU0MjI0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3MjkxMQ==", "fields": {"created_at": "2018-03-10T10:17:00Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxODAxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3MjkyNA==", "fields": {"created_at": "2018-03-10T10:17:07Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxODA5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY4NTE1Ng==", "fields": {"created_at": "2018-03-11T04:43:33Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDQ2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY4NTE2NA==", "fields": {"created_at": "2018-03-11T04:44:28Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDUxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY4NTU3MQ==", "fields": {"created_at": "2018-03-11T05:45:29Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0MDU0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY5MTU5MQ==", "fields": {"created_at": "2018-03-11T15:19:14Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY1ODA5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDYyMzIzMQ==", "fields": {"created_at": "2018-03-09T06:32:21Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3MTcyNTU2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDc2MjA4Ng==", "fields": {"created_at": "2018-03-13T05:07:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDAxNzUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDcyOTkwMQ==", "fields": {"created_at": "2018-03-12T15:30:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzc5NjMyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDk0NDg2OQ==", "fields": {"created_at": "2018-03-16T04:20:37Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDk5MDAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NzQ1NQ==", "fields": {"created_at": "2018-03-19T12:18:35Z", "content": "THUMBS_UP", "giver": "anshumanv", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE5MTc4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NzcyNQ==", "fields": {"created_at": "2018-03-19T12:25:26Z", "content": "HOORAY", "giver": "anshumanv", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE5MzY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NzcyNg==", "fields": {"created_at": "2018-03-19T12:25:28Z", "content": "HEART", "giver": "anshumanv", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE5MzY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA2NTkyNg==", "fields": {"created_at": "2018-03-19T17:33:11Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM3NDI4MDgwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAwNTY1OQ==", "fields": {"created_at": "2018-03-17T17:54:36Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "nityeshaga", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI2NDYxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAxMTg3OA==", "fields": {"created_at": "2018-03-18T03:06:14Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI3NjAwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDI2Mg==", "fields": {"created_at": "2018-03-21T11:38:46Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDM3Nw==", "fields": {"created_at": "2018-03-21T11:42:15Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTY5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDM4NQ==", "fields": {"created_at": "2018-03-21T11:42:21Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTYzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDM4Nw==", "fields": {"created_at": "2018-03-21T11:42:26Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDY2Ng==", "fields": {"created_at": "2018-03-21T11:49:12Z", "content": "LAUGH", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTg3NDU2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE3OTY3OQ==", "fields": {"created_at": "2018-03-21T15:53:14Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "gaocegege", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk4Mjc3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTMwNTcyMA==", "fields": {"created_at": "2018-03-23T17:08:43Z", "content": "THUMBS_UP", "giver": "jckw", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NTczMTQxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjA1OTkyOA==", "fields": {"created_at": "2018-04-10T14:42:43Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI4MDY1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjAyODg0Ng==", "fields": {"created_at": "2018-04-10T02:20:46Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3OTk0Njg5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjE2NTg0OQ==", "fields": {"created_at": "2018-04-12T08:45:21Z", "content": "THUMBS_UP", "giver": "refactormyself", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxNTE1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjEyNzA5Nw==", "fields": {"created_at": "2018-04-11T15:55:23Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "sks444", "review": "MDEyOklzc3VlQ29tbWVudDM4MDUwMzM5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2Njc3MA==", "fields": {"created_at": "2018-04-17T05:50:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ1NzA0Mw==", "fields": {"created_at": "2018-04-18T14:57:42Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5MzQyMg==", "fields": {"created_at": "2018-04-19T05:32:30Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyMjkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5MzUzMw==", "fields": {"created_at": "2018-04-19T05:37:14Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyNDMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ0OA==", "fields": {"created_at": "2018-04-19T07:10:40Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ3MQ==", "fields": {"created_at": "2018-04-19T07:11:14Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQxOA==", "fields": {"created_at": "2018-04-19T07:09:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU0OA==", "fields": {"created_at": "2018-04-19T07:13:08Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU1NQ==", "fields": {"created_at": "2018-04-19T07:13:22Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU2MA==", "fields": {"created_at": "2018-04-19T07:13:38Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUwMQ==", "fields": {"created_at": "2018-04-19T07:11:50Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUzMQ==", "fields": {"created_at": "2018-04-19T07:12:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1MA==", "fields": {"created_at": "2018-04-19T07:34:34Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1Mw==", "fields": {"created_at": "2018-04-19T07:34:36Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ3Nw==", "fields": {"created_at": "2018-04-19T07:35:04Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ4NQ==", "fields": {"created_at": "2018-04-19T07:35:18Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzY5Nw==", "fields": {"created_at": "2018-04-19T07:40:01Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjU0OTM2OA==", "fields": {"created_at": "2018-04-20T02:55:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjY5NTQwOA==", "fields": {"created_at": "2018-04-24T04:41:19Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "manankalra", "review": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNjQyMA==", "fields": {"created_at": "2018-04-22T06:05:30Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNjUwOA==", "fields": {"created_at": "2018-04-22T06:16:59Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjUzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNjczNw==", "fields": {"created_at": "2018-04-22T06:41:34Z", "content": "THUMBS_DOWN", "giver": "Vamshi99", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjYyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjczNTM4OQ==", "fields": {"created_at": "2018-04-24T16:30:57Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "prnvdixit", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg0NDQ2OQ==", "fields": {"created_at": "2018-04-26T09:57:47Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNzU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg0NDczNA==", "fields": {"created_at": "2018-04-26T10:02:38Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "alisianoi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzMzgzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg0NTA5Ng==", "fields": {"created_at": "2018-04-26T10:09:58Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg2NDAxNQ==", "fields": {"created_at": "2018-04-26T15:43:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg4NjQ2Mg==", "fields": {"created_at": "2018-04-26T23:29:31Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNzU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg4NjUxMg==", "fields": {"created_at": "2018-04-26T23:32:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg4NjUyMg==", "fields": {"created_at": "2018-04-26T23:32:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNTczMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg5MDI1NA==", "fields": {"created_at": "2018-04-27T02:08:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDU2MTkwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk0NDExOQ==", "fields": {"created_at": "2018-04-28T02:34:16Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDY3NTQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk4NDI4MQ==", "fields": {"created_at": "2018-04-30T09:31:50Z", "content": "THUMBS_UP", "giver": "devshiva619", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM0OTM4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk4NDY2NQ==", "fields": {"created_at": "2018-04-30T09:43:39Z", "content": "THUMBS_UP", "giver": "devshiva619", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM1MjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk4NTE3OA==", "fields": {"created_at": "2018-04-30T09:59:22Z", "content": "THUMBS_UP", "giver": "devshiva619", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM1NTQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIxNw==", "fields": {"created_at": "2018-05-10T12:39:54Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "lilithxxx", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIzMw==", "fields": {"created_at": "2018-05-10T12:40:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ3ODY5Mw==", "fields": {"created_at": "2018-05-10T20:29:45Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "nemaniarjun", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ5Mjk5OA==", "fields": {"created_at": "2018-05-11T05:18:44Z", "content": "LAUGH", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUxODc4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQzNjMwNw==", "fields": {"created_at": "2018-05-10T03:15:28Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNjg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU1NTY5Mw==", "fields": {"created_at": "2018-05-13T05:29:24Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUxODc4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU1Njc3Nw==", "fields": {"created_at": "2018-05-13T07:45:45Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4OTU3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU2MjA0MQ==", "fields": {"created_at": "2018-05-13T15:15:13Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "The-Compiler", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc5MzU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU2Mzc3OA==", "fields": {"created_at": "2018-05-13T17:26:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNzMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU3MzkxMA==", "fields": {"created_at": "2018-05-14T05:20:27Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNzMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzY1NzA0MQ==", "fields": {"created_at": "2018-05-15T13:56:15Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gaocegege", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODI5NTQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzYyMTc3NQ==", "fields": {"created_at": "2018-05-14T21:54:35Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzkyNjYzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzc1NzU2Nw==", "fields": {"created_at": "2018-05-17T04:32:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODUxMTU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzg1MzQwNw==", "fields": {"created_at": "2018-05-18T17:39:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA1NDU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyMTcyMw==", "fields": {"created_at": "2018-05-18T06:26:13Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gatesn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNDgwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyMTczMw==", "fields": {"created_at": "2018-05-18T06:26:30Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gatesn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTA2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNDA3Mg==", "fields": {"created_at": "2018-05-18T07:31:26Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gatesn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTE0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNTU0NA==", "fields": {"created_at": "2018-05-18T08:06:22Z", "content": "THUMBS_UP", "giver": "gatesn", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4NjEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNTU2MQ==", "fields": {"created_at": "2018-05-18T08:06:37Z", "content": "THUMBS_UP", "giver": "gatesn", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4Nzc0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNTYyNw==", "fields": {"created_at": "2018-05-18T08:07:47Z", "content": "THUMBS_UP", "giver": "gatesn", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDM5MDA5NjMxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk3Nzk2Mw==", "fields": {"created_at": "2018-05-22T13:45:35Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDM5MDk5NDI1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDA2MDc1Ng==", "fields": {"created_at": "2018-05-23T18:45:13Z", "content": "HOORAY", "giver": "fatma-mohamed", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MTQxMzgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE2OTYzNQ==", "fields": {"created_at": "2018-05-25T15:07:31Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTc3Mzk4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDEwNzUyNg==", "fields": {"created_at": "2018-05-24T14:16:03Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDU5OTI4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDEyODgyMQ==", "fields": {"created_at": "2018-05-24T20:15:18Z", "content": "THUMBS_UP", "giver": "xferra", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDU5OTI4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI5NDQ0Mg==", "fields": {"created_at": "2018-05-29T14:43:37Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQzNTEzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI5NDQ0NA==", "fields": {"created_at": "2018-05-29T14:43:40Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0MDk3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDIwMDg4MA==", "fields": {"created_at": "2018-05-26T16:35:46Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA1MzEwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMyNDA3NQ==", "fields": {"created_at": "2018-05-30T01:38:11Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTUyMzYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMyNDA4MA==", "fields": {"created_at": "2018-05-30T01:38:25Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0ODc2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMyNDcwNQ==", "fields": {"created_at": "2018-05-30T02:00:51Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ1MDUxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMzMTM0Nw==", "fields": {"created_at": "2018-05-30T06:27:06Z", "content": "LAUGH", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTY1MzAwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDMzMTYxMg==", "fields": {"created_at": "2018-05-30T06:34:20Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTY1NDI5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwNDIzMA==", "fields": {"created_at": "2018-06-02T04:09:00Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "bekicot", "review": "MDEyOklzc3VlQ29tbWVudDM5NDA1MjA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODk5Mw==", "fields": {"created_at": "2018-06-02T11:53:50Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "RJ722", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NTc2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTQ1MQ==", "fields": {"created_at": "2018-06-05T19:37:07Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTMzODg5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTU5Nw==", "fields": {"created_at": "2018-06-05T19:39:59Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5NTA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY2MTAyMQ==", "fields": {"created_at": "2018-06-06T02:56:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5NTA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYzMDMwOA==", "fields": {"created_at": "2018-06-05T15:18:41Z", "content": "LAUGH", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzEwOTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYzMTI5Mw==", "fields": {"created_at": "2018-06-05T15:33:29Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTQ0MDk3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc0Njk2OA==", "fields": {"created_at": "2018-06-07T09:51:38Z", "content": "LAUGH", "giver": "sks444", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5NTM2MTcwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc2Mzk5NA==", "fields": {"created_at": "2018-06-07T14:57:09Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3Nzk2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDczNDE5NA==", "fields": {"created_at": "2018-06-07T05:17:17Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzYyNjEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg0OTg4MQ==", "fields": {"created_at": "2018-06-09T05:38:52Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxMzkwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg0OTg5Mg==", "fields": {"created_at": "2018-06-09T05:39:51Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxMzg5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg0OTk1NA==", "fields": {"created_at": "2018-06-09T05:47:04Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzY3MjI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1MDU1OQ==", "fields": {"created_at": "2018-06-09T06:51:27Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNjY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2NDA1NQ==", "fields": {"created_at": "2018-06-10T02:15:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIzODI2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2ODgxOA==", "fields": {"created_at": "2018-06-10T11:20:26Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI0OTU5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2OTI4MQ==", "fields": {"created_at": "2018-06-10T12:02:26Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI0OTIwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4NTA3OA==", "fields": {"created_at": "2018-06-16T15:21:14Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwMzcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4NTQ5Ng==", "fields": {"created_at": "2018-06-16T15:55:37Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwMzcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4NTQyNQ==", "fields": {"created_at": "2018-06-16T15:49:55Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MDk5Mw==", "fields": {"created_at": "2018-06-21T02:01:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MzQ3Nw==", "fields": {"created_at": "2018-06-21T03:38:52Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5ODA0MQ==", "fields": {"created_at": "2018-06-21T06:37:11Z", "content": "THUMBS_UP", "giver": "chhabrabhishek", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMwOTA4Mg==", "fields": {"created_at": "2018-06-19T18:09:58Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM5ODQ5MzA5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMyNDA1MQ==", "fields": {"created_at": "2018-06-19T23:39:28Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM5ODQ5MzA5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQwODY0MA==", "fields": {"created_at": "2018-06-21T10:06:37Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyODIyMw==", "fields": {"created_at": "2018-06-21T15:55:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDQyMQ==", "fields": {"created_at": "2018-06-21T17:44:32Z", "content": "HEART", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIxMzc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNjUwNw==", "fields": {"created_at": "2018-06-23T05:39:31Z", "content": "THUMBS_UP", "giver": "bekicot", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4NTE3MQ==", "fields": {"created_at": "2018-07-04T09:34:39Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5MzM3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4NTE4MQ==", "fields": {"created_at": "2018-07-04T09:35:00Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5MzUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4NTI4MQ==", "fields": {"created_at": "2018-07-04T09:36:52Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5Mzk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjA4NjA2Ng==", "fields": {"created_at": "2018-07-06T08:44:54Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzY2OTM5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI0ODYwNw==", "fields": {"created_at": "2018-07-10T15:48:43Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM4OTIxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI0ODYxMQ==", "fields": {"created_at": "2018-07-10T15:48:48Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM5MjgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMDY4Nw==", "fields": {"created_at": "2018-07-10T07:15:58Z", "content": "THUMBS_DOWN", "giver": "ksdme", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMTQ0NQ==", "fields": {"created_at": "2018-07-10T07:34:45Z", "content": "THUMBS_DOWN", "giver": "palash25", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzA2Ng==", "fields": {"created_at": "2018-07-10T08:10:17Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzk3Mg==", "fields": {"created_at": "2018-07-10T08:27:49Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjQxNTUxMA==", "fields": {"created_at": "2018-07-13T08:57:37Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjUzOTA0OA==", "fields": {"created_at": "2018-07-17T02:24:42Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5MjIyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjcyNzU2OQ==", "fields": {"created_at": "2018-07-20T02:46:42Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MjgzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjcyNzYwNg==", "fields": {"created_at": "2018-07-20T02:48:03Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MzI3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgwMjcwMA==", "fields": {"created_at": "2018-07-22T17:36:08Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk5NDMwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgwMjg2OA==", "fields": {"created_at": "2018-07-22T17:48:52Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2MjgzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxODM0Mg==", "fields": {"created_at": "2018-07-23T08:03:02Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "sks444", "review": "MDEyOklzc3VlQ29tbWVudDQwNjk0NzE4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxODMwMA==", "fields": {"created_at": "2018-07-23T08:02:21Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI4MDAyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxODMwNA==", "fields": {"created_at": "2018-07-23T08:02:23Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI3ODc0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk1Nzg1NA==", "fields": {"created_at": "2018-07-25T12:56:23Z", "content": "THUMBS_UP", "giver": "cypher-naman", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDQwNzAxNjY4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5OTE5Mw==", "fields": {"created_at": "2018-07-26T04:20:43Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMyNzAxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5OTUzMw==", "fields": {"created_at": "2018-07-26T04:36:05Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMyNjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjkwMjMzNw==", "fields": {"created_at": "2018-07-24T14:43:01Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDQwNzAxNjY4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzA0MjY1MA==", "fields": {"created_at": "2018-07-26T18:59:32Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkzMjg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzA0MzU1NQ==", "fields": {"created_at": "2018-07-26T19:18:14Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkzMjkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAwMzg5Ng==", "fields": {"created_at": "2018-07-26T07:01:54Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDk2NDUyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMzA3OQ==", "fields": {"created_at": "2018-07-28T07:11:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTQzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMzE3MA==", "fields": {"created_at": "2018-07-28T07:20:18Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTM3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMzE3Mg==", "fields": {"created_at": "2018-07-28T07:20:24Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTQzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMjQyMA==", "fields": {"created_at": "2018-07-29T14:39:37Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODYyNjk5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMzg3Mw==", "fields": {"created_at": "2018-07-29T16:27:23Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NjQwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMzg4NA==", "fields": {"created_at": "2018-07-29T16:27:41Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NjQ5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMzkwNA==", "fields": {"created_at": "2018-07-29T16:29:19Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3Njc3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMzkxNw==", "fields": {"created_at": "2018-07-29T16:30:36Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NjkxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMzkzNQ==", "fields": {"created_at": "2018-07-29T16:32:15Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NzAxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI2NzYyNw==", "fields": {"created_at": "2018-08-01T02:52:33Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwOTQyNzkzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI2OTg1Nw==", "fields": {"created_at": "2018-08-01T04:34:37Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc0MjgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI4NTI0Mw==", "fields": {"created_at": "2018-08-01T10:55:08Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc5NDA2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI4NTQ1MQ==", "fields": {"created_at": "2018-08-01T10:59:17Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc5NDQxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI4NTYyOQ==", "fields": {"created_at": "2018-08-01T11:03:34Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc5NDcyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MjQ2MA==", "fields": {"created_at": "2018-08-04T14:17:17Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sks444", "review": "MDEyOklzc3VlQ29tbWVudDQxMDQ0OTI1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NTM4MQ==", "fields": {"created_at": "2018-08-04T18:10:22Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MzE1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NTM4NA==", "fields": {"created_at": "2018-08-04T18:10:42Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MjI2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NTM5MA==", "fields": {"created_at": "2018-08-04T18:11:00Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MjA4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NTQyNA==", "fields": {"created_at": "2018-08-04T18:13:14Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MzE1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1Njc3Mg==", "fields": {"created_at": "2018-08-04T20:05:54Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MzI3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1Njc3NQ==", "fields": {"created_at": "2018-08-04T20:05:59Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5MzMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY2OTE1MQ==", "fields": {"created_at": "2018-08-09T05:01:06Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzg1OTQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY2OTE2Mw==", "fields": {"created_at": "2018-08-09T05:01:30Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sks444", "review": "MDEyOklzc3VlQ29tbWVudDQwOTkwNDAxMw=="}}]