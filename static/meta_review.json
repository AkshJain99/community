[{"model": "meta_review.participant", "pk": "0x48piraj", "fields": {"name": "Piyush Raj", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-11-27T07:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "123vivekr", "fields": {"name": "Vivek R", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-08-24T09:41:07Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AMR-KELEG", "fields": {"name": "Amr Mohamed ", "score": 0.35000000000000003, "rank": 125, "trend": 0, "last_active_at": "2017-08-07T14:56:27Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10316948479135689, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AbdealiJK", "fields": {"name": "AbdealiJK", "score": 0.14909642631009062, "rank": 174, "trend": 0, "last_active_at": "2018-08-13T04:28:08Z", "pos_in": 1, "weighted_pos_in": 0.14909642631009062, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10135016815895856, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Adrianzatreanu", "fields": {"name": "Zatreanu Adrian-Gabriel", "score": 2.925239107332622, "rank": 56, "trend": 0, "last_active_at": "2017-08-24T14:10:44Z", "pos_in": 10, "weighted_pos_in": 2.5752391073326217, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12649000246220898, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Akhelesh", "fields": {"name": null, "score": 0.15788013766399495, "rank": 166, "trend": 0, "last_active_at": "2018-08-18T16:18:55Z", "pos_in": 1, "weighted_pos_in": 0.15788013766399495, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10142971055766677, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Alexander-N", "fields": {"name": null, "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2017-12-27T23:33:49Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10839742653389411, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Arsfiqball", "fields": {"name": "Iqbal Mohammad Abdul Ghoni", "score": 4.094314558979797, "rank": 48, "trend": 0, "last_active_at": "2017-07-18T16:10:12Z", "pos_in": 19, "weighted_pos_in": 4.0443145589797975, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1370767649306216, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Asalle", "fields": {"name": "Asalle Mirzaieva", "score": 1.5429330499468639, "rank": 80, "trend": 0, "last_active_at": "2017-11-21T07:54:10Z", "pos_in": 2, "weighted_pos_in": 0.4429330499468638, "pos_out": 22, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11397229381682425, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AsnelChristian", "fields": {"name": "Christian Asnel Ngoulla Sob", "score": 4.504303931987234, "rank": 44, "trend": 0, "last_active_at": "2017-07-21T06:52:13Z", "pos_in": 15, "weighted_pos_in": 3.754303931987234, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14078949373737878, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CCInCharge", "fields": {"name": "Charles Chen", "score": 0.20095642933049948, "rank": 156, "trend": 0, "last_active_at": "2018-06-09T22:24:25Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10181979527568116, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CleanCut", "fields": {"name": "Nathan Stocks", "score": 1.0, "rank": 95, "trend": 0, "last_active_at": "2017-04-09T08:02:04Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10905567083244826, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Crphang", "fields": {"name": "Phang Chun Rong", "score": 0.9773113708820408, "rank": 96, "trend": 0, "last_active_at": "2018-04-22T03:43:34Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10885021007551653, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Dhiraj240", "fields": {"name": "Dhiraj Sharma", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-08-25T12:41:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Elgayar", "fields": {"name": "Mostafa Elgayar", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2016-12-31T09:57:53Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "EverWinter23", "fields": {"name": "rishabh", "score": 1.3492029755579165, "rank": 82, "trend": 0, "last_active_at": "2018-06-21T15:48:01Z", "pos_in": 3, "weighted_pos_in": 1.3492029755579165, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11221793803281223, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "FosterSamuel", "fields": {"name": "Samuel Foster", "score": 0.15000000000000002, "rank": 173, "trend": 0, "last_active_at": "2017-08-12T15:45:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10135835062486724, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Grox-Ni", "fields": {"name": "GroxNi", "score": 0.4250265674814016, "rank": 117, "trend": 0, "last_active_at": "2017-12-18T09:18:14Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10384890069015694, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HarshKhatore", "fields": {"name": "Harsh Khatore", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-11-04T01:32:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Harshish", "fields": {"name": "Harshish Yadav", "score": 0.3468650371944737, "rank": 126, "trend": 0, "last_active_at": "2017-02-28T16:55:27Z", "pos_in": 1, "weighted_pos_in": 0.1468650371944737, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10314109560011808, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HemabhKamboj", "fields": {"name": "Hemabh Kamboj", "score": 0.3185765777593346, "rank": 127, "trend": 0, "last_active_at": "2018-07-29T08:23:21Z", "pos_in": 2, "weighted_pos_in": 0.3185765777593346, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1028849246231164, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HitRam", "fields": {"name": "Hitesh Ramchandani", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-01-23T17:54:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Hsankesara", "fields": {"name": "Heet Sankesara", "score": 0.15000000000000002, "rank": 173, "trend": 0, "last_active_at": "2017-07-18T08:34:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10135835062486724, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HyungKun", "fields": {"name": "HyungKun Jung", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-03-31T12:39:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IamRaviTejaG", "fields": {"name": "Ravi Teja Gannavarapu", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-10-27T15:46:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IpshitaC", "fields": {"name": "Ipshita Chatterjee", "score": 1.5447396386822505, "rank": 79, "trend": 0, "last_active_at": "2018-06-07T17:54:23Z", "pos_in": 6, "weighted_pos_in": 1.0447396386822505, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11398865368974151, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JoeSiew", "fields": {"name": null, "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-07-19T05:18:10Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnMoutafis", "fields": {"name": "John Moutafis", "score": 0.15000000000000002, "rank": 173, "trend": 0, "last_active_at": "2017-07-17T12:05:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10135835062486724, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnS-01", "fields": {"name": null, "score": 0.27502656748140175, "rank": 132, "trend": 0, "last_active_at": "2017-05-08T19:17:17Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1024905500652897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Kagamihime", "fields": {"name": "Eisha Chen-yen-su", "score": 0.7311902231668423, "rank": 102, "trend": 0, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 3, "weighted_pos_in": 0.5811902231668423, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1066214179769033, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "KevinHock", "fields": {"name": "", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-04-11T21:42:17Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LappleApple", "fields": {"name": "Lauri Apple", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-06-08T17:44:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LeafyLi", "fields": {"name": null, "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-01-15T18:18:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LenaAn", "fields": {"name": null, "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2018-02-26T15:56:46Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10839742653389411, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Logan1x", "fields": {"name": "Khushal Sharma", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-09-17T10:03:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Lyrenhex", "fields": {"name": "Damian Heaton", "score": 0.20425079702444154, "rank": 155, "trend": 0, "last_active_at": "2017-11-28T20:58:50Z", "pos_in": 1, "weighted_pos_in": 0.20425079702444154, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10184962798511855, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MacBox7", "fields": {"name": "Ankit Joshi", "score": 6.207332624867159, "rank": 31, "trend": 0, "last_active_at": "2018-07-29T05:49:39Z", "pos_in": 15, "weighted_pos_in": 5.707332624867159, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15621156099831401, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Makman2", "fields": {"name": "Mischa Kr\u00fcger", "score": 92.02026547474642, "rank": 2, "trend": 0, "last_active_at": "2018-08-04T08:06:22Z", "pos_in": 378, "weighted_pos_in": 85.97026547474643, "pos_out": 117, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.9333052340538063, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mariatta", "fields": {"name": "", "score": 1.0757173219978733, "rank": 93, "trend": 0, "last_active_at": "2017-12-12T08:00:26Z", "pos_in": 8, "weighted_pos_in": 1.0257173219978732, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10974134197677549, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MariosPanag", "fields": {"name": "Marios Panagopoulos", "score": 0.5500531349628035, "rank": 106, "trend": 0, "last_active_at": "2017-05-07T21:48:37Z", "pos_in": 2, "weighted_pos_in": 0.5500531349628035, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10498110013057939, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MikeTheReader", "fields": {"name": "Mike Lundin", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-05-24T17:18:50Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mixih", "fields": {"name": "mixih", "score": 13.817640807651394, "rank": 14, "trend": 0, "last_active_at": "2017-12-29T20:29:44Z", "pos_in": 43, "weighted_pos_in": 13.421466524973392, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.22512800683509546, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mohit17067", "fields": {"name": "Mohit Juneja", "score": 0.4214665249734319, "rank": 118, "trend": 0, "last_active_at": "2018-04-10T05:39:26Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10381666211705523, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Monal5031", "fields": {"name": "Monal Shadi", "score": 4.19867162592986, "rank": 47, "trend": 0, "last_active_at": "2018-04-10T12:56:57Z", "pos_in": 5, "weighted_pos_in": 3.4486716259298604, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13802178817796112, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Naveenaidu", "fields": {"name": "Naveen Naidu", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2018-03-04T05:26:23Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nickatak", "fields": {"name": "", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-02-14T19:34:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "NiklasMM", "fields": {"name": "Niklas", "score": 11.478055260361305, "rank": 15, "trend": 0, "last_active_at": "2018-06-13T23:49:49Z", "pos_in": 41, "weighted_pos_in": 10.728055260361305, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.20394149023448313, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nosferatul", "fields": {"name": "Alexandru-Sorin Maxim", "score": 3.1732199787460154, "rank": 54, "trend": 0, "last_active_at": "2017-08-28T19:37:32Z", "pos_in": 6, "weighted_pos_in": 2.373219978746015, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12873563560647236, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nshul", "fields": {"name": "Anshul Mittal", "score": 1.6474495217853333, "rank": 77, "trend": 0, "last_active_at": "2018-04-18T22:34:33Z", "pos_in": 4, "weighted_pos_in": 1.5974495217853333, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11491876058236228, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PierceAndy", "fields": {"name": "Pierce Fu", "score": 0.5020722635494147, "rank": 110, "trend": 0, "last_active_at": "2017-04-04T04:11:31Z", "pos_in": 2, "weighted_pos_in": 0.3520722635494147, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10454660115280572, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PlentyMore", "fields": {"name": "PlentyMore", "score": 0.15929861849096674, "rank": 165, "trend": 0, "last_active_at": "2017-11-09T17:41:24Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10144255585311795, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Prabhat-IIT", "fields": {"name": "Prabhat", "score": 0.3758235919234855, "rank": 122, "trend": 0, "last_active_at": "2018-01-15T18:09:46Z", "pos_in": 3, "weighted_pos_in": 0.32582359192348553, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10340333473952745, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Pradhvan", "fields": {"name": "Pradhvan Bisht ", "score": 0.18837538892599412, "rank": 159, "trend": 0, "last_active_at": "2018-03-04T17:04:18Z", "pos_in": 1, "weighted_pos_in": 0.18837538892599412, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10170586551504823, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PrajwalM2212", "fields": {"name": "PRAJWAL M", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2018-05-08T04:55:07Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RJ722", "fields": {"name": "Rahul Jha", "score": 5.123007438894791, "rank": 39, "trend": 0, "last_active_at": "2018-08-14T09:55:13Z", "pos_in": 8, "weighted_pos_in": 2.9730074388947907, "pos_out": 63, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.146392269038815, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Rahmeen14", "fields": {"name": "Rahmeen Habib", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-12-18T10:49:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RaiVaibhav", "fields": {"name": "Vaibhav Rai", "score": 14.914908679653648, "rank": 12, "trend": 0, "last_active_at": "2018-08-13T06:50:56Z", "pos_in": 28, "weighted_pos_in": 12.853237942716365, "pos_out": 92, "neg_in": 7, "weighted_neg_in": 3.038329263062721, "neg_out": 5, "offset": 0.5, "weight_factor": 0.23506450349896885, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "Raman1121", "fields": {"name": "Raman Dutt", "score": 0.18225292242295388, "rank": 161, "trend": 0, "last_active_at": "2017-09-02T18:12:11Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295388, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.101650422473714, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RohanVB", "fields": {"name": "Rohan", "score": 4.547077577045693, "rank": 43, "trend": 0, "last_active_at": "2017-04-28T16:22:19Z", "pos_in": 16, "weighted_pos_in": 3.9470775770456923, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14117683778733217, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "S2606", "fields": {"name": "Shagun Khemka", "score": 0.428427205100956, "rank": 116, "trend": 0, "last_active_at": "2017-07-20T07:39:17Z", "pos_in": 3, "weighted_pos_in": 0.378427205100956, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10387969574506006, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SanketDG", "fields": {"name": "Sanket Dasgupta", "score": 15.109723698193388, "rank": 11, "trend": 0, "last_active_at": "2018-02-27T08:55:23Z", "pos_in": 40, "weighted_pos_in": 13.159723698193389, "pos_out": 39, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.23682868418008202, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Sanny26", "fields": {"name": "Santhoshini ", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-02-10T16:27:28Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shade5", "fields": {"name": "George Joseph", "score": 1.1057385759829967, "rank": 92, "trend": 0, "last_active_at": "2017-03-25T17:05:36Z", "pos_in": 2, "weighted_pos_in": 1.1057385759829967, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1100132045708421, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ShivamSinghania", "fields": {"name": "Shivam Singhania", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-01-18T22:12:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shruti9520", "fields": {"name": "Shruti Singh", "score": 0.6628586609989368, "rank": 103, "trend": 0, "last_active_at": "2017-02-05T19:51:42Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10600262984244378, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SiddharthKumar02", "fields": {"name": "Siddharth Kumar", "score": 0.21285866099893672, "rank": 151, "trend": 0, "last_active_at": "2017-01-22T12:51:10Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10192757796784206, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Siddhartha1234", "fields": {"name": "Siddhartha Mishra", "score": 1.573379383634431, "rank": 78, "trend": 0, "last_active_at": "2017-04-13T15:21:34Z", "pos_in": 4, "weighted_pos_in": 1.4233793836344308, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11424800579275374, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Stropek", "fields": {"name": "Przemys\u0142aw Curzytek", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-09-05T12:13:36Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SubbulakshmiRS", "fields": {"name": "R S Subbulakshmi", "score": -0.3263549415515413, "rank": 186, "trend": 0, "last_active_at": "2018-06-15T15:55:05Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.0, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "Techievena", "fields": {"name": "Abinash Senapati", "score": 5.320563230605731, "rank": 36, "trend": 1, "last_active_at": "2017-12-07T11:28:19Z", "pos_in": 21, "weighted_pos_in": 4.370563230605731, "pos_out": 19, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14818126925959296, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "The-Compiler", "fields": {"name": "Florian Bruhin", "score": 0.15547290116896886, "rank": 167, "trend": 0, "last_active_at": "2018-05-13T15:15:13Z", "pos_in": 1, "weighted_pos_in": 0.15547290116896886, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10140791141635194, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Udayan12167", "fields": {"name": "Udayan Tandon", "score": 14.813496280552588, "rank": 13, "trend": 0, "last_active_at": "2017-07-19T19:08:09Z", "pos_in": 33, "weighted_pos_in": 14.817321997874586, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2341461461943808, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "UnimaginaryUnit", "fields": {"name": "Alexander Voronkov", "score": 0.10860786397449518, "rank": 177, "trend": 0, "last_active_at": "2017-12-03T07:10:37Z", "pos_in": 1, "weighted_pos_in": 0.10860786397449518, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10098351706596835, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vamshi99", "fields": {"name": "Vamshi Krishna", "score": 5.425398232898823, "rank": 35, "trend": 1, "last_active_at": "2018-08-12T07:18:21Z", "pos_in": 14, "weighted_pos_in": 4.663655406118802, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.13825717321997855, "neg_out": 2, "offset": 0.0, "weight_factor": 0.14913062053207818, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vedarth", "fields": {"name": "Vedarth Sharma", "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2017-12-10T17:48:03Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10839742653389411, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Warewolf96", "fields": {"name": "Parth Verma", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-02-15T03:42:58Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Yashwanthv21", "fields": {"name": "Yashwanth Reddy", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-03-04T17:26:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Zimmerman", "fields": {"name": "Martin Zimmerman", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-05-10T10:07:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aalind0", "fields": {"name": "Aalind Singh", "score": 0.26285866099893673, "rank": 135, "trend": 0, "last_active_at": "2017-02-08T17:34:24Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10238036150946447, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashraybhandar1", "fields": {"name": null, "score": 2.8158873538788507, "rank": 57, "trend": 0, "last_active_at": "2018-04-02T14:07:50Z", "pos_in": 7, "weighted_pos_in": 2.765887353878851, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1254997489779806, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashutoshrathi", "fields": {"name": "Aashutosh Rathi", "score": 2.5315621679064773, "rank": 62, "trend": 0, "last_active_at": "2018-08-10T13:30:01Z", "pos_in": 8, "weighted_pos_in": 1.7315621679064774, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12292499368444017, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "abhsag24", "fields": {"name": "Abhay Raizada", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-01-29T06:17:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "acashmkj", "fields": {"name": "acash mkj", "score": 2.3260892667375135, "rank": 64, "trend": 0, "last_active_at": "2017-11-15T17:54:51Z", "pos_in": 3, "weighted_pos_in": 2.0760892667375135, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12106429872646585, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adhikasp", "fields": {"name": "Adhika Setya Pramudita", "score": 8.034112646121137, "rank": 23, "trend": 0, "last_active_at": "2018-07-23T04:23:31Z", "pos_in": 23, "weighted_pos_in": 5.80913921360254, "pos_out": 50, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.17275427955408285, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adi23arora", "fields": {"name": "Aditya Arora", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-12-29T18:22:08Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adrienverge", "fields": {"name": "Adrien Verg\u00e9", "score": 1.0, "rank": 95, "trend": 0, "last_active_at": "2017-02-06T20:17:25Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10905567083244826, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adtac", "fields": {"name": "Adhityaa", "score": 5.435349951468151, "rank": 34, "trend": 1, "last_active_at": "2018-03-24T16:32:16Z", "pos_in": 16, "weighted_pos_in": 4.785349951468151, "pos_out": 13, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14922074001965918, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alisianoi", "fields": {"name": "Alexander Lisianoi", "score": 1.2738575982996783, "rank": 86, "trend": 0, "last_active_at": "2018-04-26T10:02:38Z", "pos_in": 7, "weighted_pos_in": 2.173857598299678, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.111535635097615, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alphadose", "fields": {"name": "Anish Mukherjee", "score": 2.1046227417640813, "rank": 70, "trend": 0, "last_active_at": "2018-03-04T18:18:37Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11905877077590027, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amalrajan", "fields": {"name": "Amal Rajan", "score": 0.1528692879914984, "rank": 170, "trend": 0, "last_active_at": "2018-01-19T13:24:25Z", "pos_in": 1, "weighted_pos_in": 0.1028692879914984, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10138433395244174, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amitsin6h", "fields": {"name": "Amit singh", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-11-15T15:53:07Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ananyaarun", "fields": {"name": "Ananya Arun", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2018-06-18T13:40:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anctartica", "fields": {"name": "", "score": 5.205951115834216, "rank": 37, "trend": -4, "last_active_at": "2018-08-13T15:35:19Z", "pos_in": 13, "weighted_pos_in": 5.411689691817212, "pos_out": 4, "neg_in": 1, "weighted_neg_in": 0.10573857598299678, "neg_out": 1, "offset": 0.5, "weight_factor": 0.15167121509103548, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "andrewda", "fields": {"name": "Andrew Dassonville", "score": 17.308182784272034, "rank": 7, "trend": 0, "last_active_at": "2018-08-25T12:41:00Z", "pos_in": 34, "weighted_pos_in": 15.008182784272032, "pos_out": 46, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2567372060022153, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ankurg22", "fields": {"name": "Ankur Gupta", "score": 0.24373007438894745, "rank": 141, "trend": 0, "last_active_at": "2018-02-01T15:18:15Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10220713932563444, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anshumanv", "fields": {"name": "Anshuman Verma", "score": 0.2239107332624866, "rank": 145, "trend": 0, "last_active_at": "2018-03-19T12:25:28Z", "pos_in": 1, "weighted_pos_in": 0.12391073326248658, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10202766189627721, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aptrishu", "fields": {"name": "Rishav Kumar", "score": 4.235653560042503, "rank": 46, "trend": 0, "last_active_at": "2018-05-14T21:16:42Z", "pos_in": 11, "weighted_pos_in": 2.885653560042503, "pos_out": 27, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13835668440003251, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arjunsinghy96", "fields": {"name": "Arjun Singh Yadav", "score": 4.036928799149839, "rank": 49, "trend": 0, "last_active_at": "2017-04-28T06:55:34Z", "pos_in": 7, "weighted_pos_in": 3.686928799149839, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13655709837913155, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arnab1896", "fields": {"name": null, "score": 0.6147715196599357, "rank": 104, "trend": 0, "last_active_at": "2017-02-24T10:21:12Z", "pos_in": 2, "weighted_pos_in": 0.31477151965993566, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10556716851920438, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arpit7714", "fields": {"name": "ARPIT VARSHNEY", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-02-18T16:04:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arrayslayer", "fields": {"name": "Aditya Lahiri", "score": 0.26285866099893673, "rank": 135, "trend": 0, "last_active_at": "2017-06-27T11:07:04Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10238036150946447, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arush0311", "fields": {"name": "Arush Goyal", "score": 2.241126461211477, "rank": 67, "trend": 0, "last_active_at": "2017-02-12T19:30:48Z", "pos_in": 3, "weighted_pos_in": 2.141126461211477, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12029490352662076, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ashwini0529", "fields": {"name": "Ashwini Purohit", "score": 0.3138150903294362, "rank": 129, "trend": 0, "last_active_at": "2017-12-16T06:15:38Z", "pos_in": 2, "weighted_pos_in": 0.3138150903294362, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1028418061602784, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "attilanagy", "fields": {"name": "Attila Nagy", "score": 0.2841657810839528, "rank": 131, "trend": 0, "last_active_at": "2018-05-07T19:26:59Z", "pos_in": 2, "weighted_pos_in": 0.2841657810839528, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10257331177534183, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "atultherajput", "fields": {"name": "Atul Krishna", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-09-26T13:54:51Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "avirlrma", "fields": {"name": "Aviral Verma", "score": 0.18225292242295385, "rank": 162, "trend": 0, "last_active_at": "2017-12-14T11:27:06Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295385, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.101650422473714, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush1999", "fields": {"name": "Ayush Shridhar", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-08-03T10:15:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush9398", "fields": {"name": "Ayush Mittal", "score": 0.4972901168969174, "rank": 111, "trend": 0, "last_active_at": "2018-02-15T08:16:08Z", "pos_in": 3, "weighted_pos_in": 0.520935175345376, "pos_out": 3, "neg_in": 1, "weighted_neg_in": 0.17364505844845868, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1045032956068482, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayushin78", "fields": {"name": "Ayushi Negi", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-02-24T06:18:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bekicot", "fields": {"name": "Yana Agun Siswanto", "score": 0.2554729011689688, "rank": 138, "trend": 0, "last_active_at": "2018-06-23T05:39:31Z", "pos_in": 2, "weighted_pos_in": 1.1554729011689688, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10231347849959677, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bhavishyagopesh", "fields": {"name": "BHAVISHYA", "score": 0.5437300743889475, "rank": 107, "trend": 0, "last_active_at": "2017-12-29T11:09:57Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10492384057536891, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "biscuitsnake", "fields": {"name": "biscuitsnake", "score": 0.15069075451647157, "rank": 172, "trend": 0, "last_active_at": "2018-05-01T03:13:16Z", "pos_in": 1, "weighted_pos_in": 0.15069075451647157, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10136460587039443, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "blazeu", "fields": {"name": "Surya Widi", "score": 31.197037310615755, "rank": 3, "trend": 0, "last_active_at": "2018-08-17T08:44:13Z", "pos_in": 87, "weighted_pos_in": 30.297037310615753, "pos_out": 38, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 1.0, "weight_factor": 0.382510100832543, "modified_comments_after_meta_review": 2}}, {"model": "meta_review.participant", "pk": "cRAN-cg", "fields": {"name": "Chiranjeev Gupta", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-06-12T07:59:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chetasr", "fields": {"name": "Chetas Murali", "score": 0.10573857598299678, "rank": 178, "trend": 0, "last_active_at": "2018-02-23T11:18:05Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10095753373839385, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chhabrabhishek", "fields": {"name": "Abhishek Chhabra", "score": 0.15382571732199785, "rank": 169, "trend": 0, "last_active_at": "2018-06-23T06:56:10Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10139299506163325, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "clarammdantas", "fields": {"name": "Clara Moraes Dantas", "score": 0.20956429330499465, "rank": 152, "trend": 0, "last_active_at": "2018-01-17T12:48:39Z", "pos_in": 1, "weighted_pos_in": 0.10956429330499463, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10189774525840467, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cornu-ammonis", "fields": {"name": "Andrew Jones", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-10-20T21:15:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cristianossd", "fields": {"name": "Cristiano Santos", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-10-19T23:32:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cypher-naman", "fields": {"name": "Naman Sharma", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-07-25T12:56:23Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "d3db0t", "fields": {"name": "Shady Tantawy", "score": 0.5092986184909668, "rank": 109, "trend": 0, "last_active_at": "2017-03-17T07:27:27Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10461204064447485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damian1996", "fields": {"name": "Damian Stachura", "score": 0.39373007438894747, "rank": 121, "trend": 0, "last_active_at": "2018-04-17T22:34:07Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10356548995050167, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damngamerz", "fields": {"name": "Saurav Singh", "score": 7.708395324123271, "rank": 24, "trend": 0, "last_active_at": "2018-06-08T18:36:00Z", "pos_in": 12, "weighted_pos_in": 5.208395324123271, "pos_out": 50, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1698046907016436, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "danes44", "fields": {"name": "Frume44", "score": 0.2561636556854405, "rank": 137, "trend": 0, "last_active_at": "2017-12-25T03:02:06Z", "pos_in": 1, "weighted_pos_in": 0.20616365568544046, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10231973374512397, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "devshiva619", "fields": {"name": "Devesh Verma", "score": 0.15000000000000002, "rank": 173, "trend": 0, "last_active_at": "2018-04-30T09:59:22Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10135835062486724, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dhishan", "fields": {"name": "Dhishan", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-01-06T22:08:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "diveshuttam", "fields": {"name": "Divesh Uttamchandani", "score": 0.4523379383634426, "rank": 114, "trend": 0, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 2, "weighted_pos_in": 0.3023379383634426, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10409622347484761, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "djokester", "fields": {"name": "Samriddhi Sinha", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-04-11T22:55:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dob9601", "fields": {"name": "Daniel O'Brien", "score": 1.9791710945802308, "rank": 74, "trend": 0, "last_active_at": "2018-01-06T15:55:07Z", "pos_in": 5, "weighted_pos_in": 1.8791710945802307, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11792272195361489, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dorothykiz1", "fields": {"name": null, "score": 0.18225292242295388, "rank": 161, "trend": 0, "last_active_at": "2018-05-30T10:29:50Z", "pos_in": 2, "weighted_pos_in": 0.36450584484590776, "pos_out": 0, "neg_in": 1, "weighted_neg_in": 0.18225292242295388, "neg_out": 0, "offset": 0.0, "weight_factor": 0.101650422473714, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dracarys09", "fields": {"name": "Abhijeet Dubey", "score": 1.3006907545164714, "rank": 83, "trend": 0, "last_active_at": "2017-02-15T10:40:45Z", "pos_in": 3, "weighted_pos_in": 1.2506907545164714, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11177862732770993, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "etotientz", "fields": {"name": "Satrap Rathore", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-02-02T14:26:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "fatma-mohamed", "fields": {"name": "Fatma Mohamed", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2018-05-23T18:45:13Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "firesans", "fields": {"name": "Sanjana Gunna", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-02-28T02:00:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gabru-md", "fields": {"name": "Manish Devgan", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-11-14T05:24:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gaocegege", "fields": {"name": "Ce Gao", "score": 2.228895961472242, "rank": 68, "trend": 0, "last_active_at": "2018-08-06T11:33:29Z", "pos_in": 7, "weighted_pos_in": 1.8788959614722418, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1201841481468659, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gatesn", "fields": {"name": "Nicholas Gates", "score": 0.5619022316684372, "rank": 105, "trend": 0, "last_active_at": "2018-05-18T08:07:47Z", "pos_in": 3, "weighted_pos_in": 0.4119022316684372, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10508840165000745, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "girishramnani", "fields": {"name": "girish ramnani", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-05-03T17:41:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gkrishnan724", "fields": {"name": "GopalaKrishnan P", "score": 2.6393198724760856, "rank": 61, "trend": 0, "last_active_at": "2017-06-26T15:23:19Z", "pos_in": 8, "weighted_pos_in": 2.4393198724760854, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12390081198668274, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gokberksahin", "fields": {"name": "G\u00f6kberk \u015eahin", "score": 0.1286928799149839, "rank": 176, "trend": 0, "last_active_at": "2017-12-27T19:27:08Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1011654003589899, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gopalgoel19", "fields": {"name": "Gopal Goel", "score": 0.35000000000000003, "rank": 125, "trend": 0, "last_active_at": "2018-05-13T17:04:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10316948479135689, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "guilherme-p", "fields": {"name": "Guilherme Peixoto", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2018-03-14T19:24:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gureks", "fields": {"name": "Gurek Singh", "score": 1.2214665249734318, "rank": 87, "trend": 0, "last_active_at": "2017-11-12T12:23:52Z", "pos_in": 2, "weighted_pos_in": 1.2214665249734318, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11106119878301383, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gurpreetsingh00885", "fields": {"name": null, "score": 0.25, "rank": 140, "trend": 0, "last_active_at": "2017-09-26T18:48:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10226391770811206, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gutsytechster", "fields": {"name": "Prashant Sharma", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-07-30T11:22:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshhx17", "fields": {"name": "Harsh Kumar Bhartiya", "score": 0.25, "rank": 140, "trend": 0, "last_active_at": "2018-06-22T06:05:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10226391770811206, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshit890", "fields": {"name": null, "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2017-01-16T20:38:31Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10839742653389411, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "hemangsk", "fields": {"name": "Hemang Kumar", "score": 11.372267743993602, "rank": 16, "trend": 0, "last_active_at": "2018-08-23T01:27:16Z", "pos_in": 33, "weighted_pos_in": 8.572267743993601, "pos_out": 56, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.202983513308075, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "himanshu1603", "fields": {"name": "", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2018-02-22T18:31:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsavru", "fields": {"name": "Urvashi Verma", "score": 0.2605207226354941, "rank": 136, "trend": 0, "last_active_at": "2017-07-23T17:27:24Z", "pos_in": 2, "weighted_pos_in": 0.2105207226354941, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10235918990921859, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsraham", "fields": {"name": "Maharshi Mishra", "score": 0.3162592986184909, "rank": 128, "trend": 0, "last_active_at": "2017-11-18T19:16:03Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10286394010599001, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "impmihai", "fields": {"name": "Mihai Ionut", "score": 2.0, "rank": 73, "trend": 0, "last_active_at": "2017-04-29T21:12:36Z", "pos_in": 2, "weighted_pos_in": 2.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11811134166489651, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "incorrectusername", "fields": {"name": "Yogesh Gupta", "score": 0.4, "rank": 120, "trend": 0, "last_active_at": "2017-08-13T02:03:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1036222683329793, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "indmind", "fields": {"name": "Indmind", "score": 0.3750265674814016, "rank": 123, "trend": 0, "last_active_at": "2017-12-07T10:17:48Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10339611714853453, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ishanSrt", "fields": {"name": "Ishan Srivastava", "score": 6.946227417640803, "rank": 27, "trend": 0, "last_active_at": "2018-07-21T13:25:56Z", "pos_in": 26, "weighted_pos_in": 6.761424017003182, "pos_out": 8, "neg_in": 2, "weighted_neg_in": 0.4151965993623793, "neg_out": 1, "offset": 0.0, "weight_factor": 0.1629027490214822, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jack17529", "fields": {"name": "JACK_1729", "score": 0.35000000000000003, "rank": 125, "trend": 0, "last_active_at": "2017-03-26T17:53:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10316948479135689, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jackthepirate6", "fields": {"name": "Ajinkya Narnaware", "score": 1.9773113708820407, "rank": 75, "trend": 0, "last_active_at": "2018-05-12T15:32:01Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11790588090796478, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jayvdb", "fields": {"name": "John Vandenberg", "score": 99.38523789702278, "rank": 1, "trend": 0, "last_active_at": "2018-09-01T12:59:24Z", "pos_in": 461, "weighted_pos_in": 92.45898774409416, "pos_out": 206, "neg_in": 5, "weighted_neg_in": 4.97374984707137, "neg_out": 13, "offset": 1.0, "weight_factor": 1.0, "modified_comments_after_meta_review": 2}}, {"model": "meta_review.participant", "pk": "jckw", "fields": {"name": "Jack W", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-03-23T17:08:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jendrikseipp", "fields": {"name": "Jendrik Seipp", "score": 2.332093517534533, "rank": 63, "trend": 0, "last_active_at": "2017-08-28T07:45:46Z", "pos_in": 15, "weighted_pos_in": 2.332093517534533, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12111867124527913, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jsecrest", "fields": {"name": "Jason Secrest", "score": 0.21381509032943616, "rank": 150, "trend": 0, "last_active_at": "2018-06-01T04:32:02Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10193623907703357, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "k4ni5h", "fields": {"name": "Kanish", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-12-22T10:09:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kartikeys98", "fields": {"name": "Kartikey", "score": 0.21625929861849089, "rank": 149, "trend": 0, "last_active_at": "2017-10-25T06:31:30Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10195837302274519, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kaustubhhiware", "fields": {"name": "Kaustubh Hiware", "score": 0.765621679064823, "rank": 100, "trend": 0, "last_active_at": "2017-05-09T10:22:07Z", "pos_in": 3, "weighted_pos_in": 0.615621679064823, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10693321790779738, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khanchi97", "fields": {"name": "Sushil khanchi", "score": 1.2997874601487758, "rank": 84, "trend": 0, "last_active_at": "2018-02-12T20:28:41Z", "pos_in": 8, "weighted_pos_in": 1.1997874601487757, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11177044739125128, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khushmeeet", "fields": {"name": "Khushmeet Singh", "score": 0.7428267800212515, "rank": 101, "trend": 0, "last_active_at": "2017-04-12T07:41:07Z", "pos_in": 3, "weighted_pos_in": 0.7428267800212515, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10672679480539991, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kriti21", "fields": {"name": "Kriti Rohilla", "score": 4.823273113708819, "rank": 42, "trend": 0, "last_active_at": "2018-08-11T15:59:05Z", "pos_in": 13, "weighted_pos_in": 4.323273113708819, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14367797365274482, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksangam68", "fields": {"name": "Sangam Kumar", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-02-19T15:10:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksdme", "fields": {"name": "Kilari Teja", "score": 8.280605738575982, "rank": 22, "trend": 0, "last_active_at": "2018-08-18T16:18:55Z", "pos_in": 11, "weighted_pos_in": 6.4306057385759825, "pos_out": 33, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.17498643986182616, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lalitmee", "fields": {"name": "Lalit Kumar", "score": 0.22364505844845867, "rank": 146, "trend": 0, "last_active_at": "2018-04-11T21:31:49Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1020252560326129, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "li-boxuan", "fields": {"name": "Boxuan Li", "score": 18.19821744162999, "rank": 6, "trend": 0, "last_active_at": "2018-08-12T09:31:36Z", "pos_in": 31, "weighted_pos_in": 14.048217441629985, "pos_out": 83, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2647970668887198, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lilithxxx", "fields": {"name": "Rishav Chakraborty", "score": 0.13730074388947908, "rank": 175, "trend": 0, "last_active_at": "2018-05-10T12:39:54Z", "pos_in": 1, "weighted_pos_in": 0.13730074388947908, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1012433503417134, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lshobith", "fields": {"name": "sai shobith", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-03-10T14:42:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lucas03", "fields": {"name": "Lukas Vojt", "score": 0.22077577045696029, "rank": 148, "trend": 0, "last_active_at": "2017-06-18T15:25:10Z", "pos_in": 1, "weighted_pos_in": 0.1707757704569603, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10199927270503839, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mach64", "fields": {"name": "Krut Patel", "score": 0.0, "rank": 184, "trend": null, "last_active_at": "2018-09-01T12:59:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "madhukar01", "fields": {"name": "Madhukar S Holla", "score": 3.424601487778958, "rank": 52, "trend": 0, "last_active_at": "2017-04-10T16:11:59Z", "pos_in": 6, "weighted_pos_in": 3.3746014877789583, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13101206380563882, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "manankalra", "fields": {"name": "Manan Kalra", "score": 1.147980871413389, "rank": 90, "trend": 0, "last_active_at": "2018-07-20T15:46:39Z", "pos_in": 4, "weighted_pos_in": 0.597980871413389, "pos_out": 31, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11039573689346677, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mani87", "fields": {"name": "Mani Kumar", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-08-30T03:25:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mansiagarwal451", "fields": {"name": "Mansi Agarwal", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-10-16T20:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "margobra8", "fields": {"name": "Marcos G\u00f3mez", "score": 1.9773113708820407, "rank": 75, "trend": 0, "last_active_at": "2018-01-15T17:06:39Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11790588090796478, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "marian-ald", "fields": {"name": "", "score": 0.2714665249734317, "rank": 133, "trend": 0, "last_active_at": "2016-12-04T17:59:51Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.102458311492188, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "maweki", "fields": {"name": "Mario Wenzel", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-02-07T18:27:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "meetmangukiya", "fields": {"name": "Meet Mangukiya", "score": 15.419234856535589, "rank": 10, "trend": 0, "last_active_at": "2018-07-25T23:03:20Z", "pos_in": 41, "weighted_pos_in": 11.800212539851206, "pos_out": 88, "neg_in": 4, "weighted_neg_in": 1.0809776833156182, "neg_out": 4, "offset": 0.5, "weight_factor": 0.23963151534899876, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "mohit2872", "fields": {"name": "Mohit Gupta", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-11-14T09:48:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mohitkyadav", "fields": {"name": "Mohit Kumar Yadav", "score": 0.8475557917109453, "rank": 98, "trend": 0, "last_active_at": "2017-12-15T13:06:08Z", "pos_in": 4, "weighted_pos_in": 1.3975557917109453, "pos_out": 9, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10767518626186941, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "monsij", "fields": {"name": "Monsij Biswal", "score": 0.4547821466524974, "rank": 113, "trend": 0, "last_active_at": "2018-05-10T16:23:03Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10411835742055923, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mridubhatnagar", "fields": {"name": "Mridu Bhatnagar", "score": 4.983315621679066, "rank": 41, "trend": 0, "last_active_at": "2017-12-14T10:46:03Z", "pos_in": 10, "weighted_pos_in": 4.483315621679066, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14512726592412287, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mrtes", "fields": {"name": null, "score": 2.742401700318808, "rank": 58, "trend": 0, "last_active_at": "2017-11-12T12:33:42Z", "pos_in": 6, "weighted_pos_in": 2.742401700318808, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12483428708843353, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mvinoba", "fields": {"name": "Vin\u00edcius Figueiredo", "score": 0.24373007438894745, "rank": 141, "trend": 0, "last_active_at": "2018-02-06T06:52:29Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10220713932563444, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myfrom", "fields": {"name": "Wiktor Olejniczak", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-12-14T15:45:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myint", "fields": {"name": "Steven Myint", "score": 0.21625929861849089, "rank": 149, "trend": 0, "last_active_at": "2017-03-25T11:58:13Z", "pos_in": 2, "weighted_pos_in": 0.21625929861849089, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10195837302274519, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nalinbhardwaj", "fields": {"name": "Nalin Bhardwaj", "score": 2.6726886291179595, "rank": 59, "trend": 0, "last_active_at": "2018-04-19T05:18:22Z", "pos_in": 5, "weighted_pos_in": 2.372688629117959, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12420298846291962, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namantw", "fields": {"name": "Naman Tiwari", "score": 0.20095642933049948, "rank": 156, "trend": 0, "last_active_at": "2018-01-07T17:19:37Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10181979527568116, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namanyadav12", "fields": {"name": "Naman Yadav", "score": 0.24017003188097746, "rank": 142, "trend": 0, "last_active_at": "2017-01-16T17:45:30Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10217490075253274, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "naveentata", "fields": {"name": "Naveen Tata", "score": 0.10382571732199786, "rank": 179, "trend": 0, "last_active_at": "2017-11-18T13:39:12Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10094021152001084, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nealkarpe", "fields": {"name": "Neal Karpe", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-11-12T09:50:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "neelanshsahai", "fields": {"name": "Neelansh Sahai", "score": 0.8163124335812947, "rank": 99, "trend": 0, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 4, "weighted_pos_in": 0.7663124335812946, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.107392256694947, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nemaniarjun", "fields": {"name": "Arjun Nemani", "score": 3.230765143464399, "rank": 53, "trend": 0, "last_active_at": "2018-05-10T20:29:45Z", "pos_in": 11, "weighted_pos_in": 3.080765143464399, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12925674567616108, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "netman92", "fields": {"name": "Stanislav Komanec", "score": 0.31381509032943616, "rank": 130, "trend": 0, "last_active_at": "2017-05-29T08:39:39Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1028418061602784, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "newbazz", "fields": {"name": null, "score": 7.5072263549415466, "rank": 25, "trend": 0, "last_active_at": "2018-05-10T12:40:12Z", "pos_in": 23, "weighted_pos_in": 4.907226354941546, "pos_out": 44, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.167982970735031, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nguptaa", "fields": {"name": "Nikhil Gupta", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2018-02-16T14:44:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikhil-seth", "fields": {"name": "Nikhil Seth", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-12-08T13:18:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikita1412", "fields": {"name": null, "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-03-14T08:25:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nitinkgp23", "fields": {"name": "Nitin Choudhary", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-01-27T23:54:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityanandagohain", "fields": {"name": "Nityananda Gohain", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-04-28T15:40:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityeshaga", "fields": {"name": "Nityesh Agarwal", "score": 1.9207757704569604, "rank": 76, "trend": 0, "last_active_at": "2018-04-14T17:36:15Z", "pos_in": 5, "weighted_pos_in": 1.4707757704569602, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11739391312020042, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nkprince007", "fields": {"name": "Naveen Kumar Sangi", "score": 5.782303242128645, "rank": 32, "trend": 0, "last_active_at": "2018-08-24T09:41:07Z", "pos_in": 14, "weighted_pos_in": 5.682303242128645, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15236263481411536, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nvzard", "fields": {"name": "Nitanshu", "score": 5.584781599671661, "rank": 33, "trend": 1, "last_active_at": "2018-08-14T15:11:05Z", "pos_in": 5, "weighted_pos_in": 1.8355964802020375, "pos_out": 94, "neg_in": 2, "weighted_neg_in": 1.150814880530375, "neg_out": 1, "offset": 0.0, "weight_factor": 0.15057394383774036, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "paavininanda", "fields": {"name": "Paavini Nanda", "score": 0.24373007438894745, "rank": 141, "trend": 0, "last_active_at": "2018-01-23T12:07:14Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10220713932563444, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "palash25", "fields": {"name": "Palash Nigam", "score": 9.38544102019128, "rank": 21, "trend": 0, "last_active_at": "2018-08-18T06:53:16Z", "pos_in": 20, "weighted_pos_in": 6.785441020191281, "pos_out": 44, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.18499146449620957, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pareksha", "fields": {"name": "Pareksha Manchanda", "score": 6.856323060573857, "rank": 29, "trend": 0, "last_active_at": "2018-08-11T04:52:28Z", "pos_in": 11, "weighted_pos_in": 4.956323060573857, "pos_out": 38, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16208860475748102, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parimatrix", "fields": {"name": "Parikansh Ahluwalia", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-12-15T11:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parthboricha", "fields": {"name": null, "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-11-01T17:22:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prachi1210", "fields": {"name": "Prachi Manchanda", "score": 0.15155001112871574, "rank": 171, "trend": 0, "last_active_at": "2017-06-21T12:11:03Z", "pos_in": 1, "weighted_pos_in": 0.15155001112871574, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10137238701543552, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pradeepgangwar", "fields": {"name": "Pradeep Gangwar", "score": 2.285653560042508, "rank": 65, "trend": 0, "last_active_at": "2018-01-15T17:40:31Z", "pos_in": 4, "weighted_pos_in": 2.1856535600425078, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12069812627675847, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prashant0598", "fields": {"name": "Prashant Nigam", "score": 1.1847502656748123, "rank": 88, "trend": 0, "last_active_at": "2017-11-30T07:03:00Z", "pos_in": 4, "weighted_pos_in": 0.7347502656748123, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11072870842460672, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pratyushprakash", "fields": {"name": "Pratyush Prakash", "score": 5.201700318809775, "rank": 38, "trend": 0, "last_active_at": "2017-04-24T19:26:51Z", "pos_in": 14, "weighted_pos_in": 4.501700318809775, "pos_out": 14, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14710488585618248, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "priyanshsaxena", "fields": {"name": "Priyansh Saxena", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-01-28T10:54:01Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prnvdixit", "fields": {"name": "Pranav Dixit", "score": 6.53639744952178, "rank": 30, "trend": 0, "last_active_at": "2018-07-23T08:03:02Z", "pos_in": 24, "weighted_pos_in": 5.48639744952178, "pos_out": 21, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15919146373292356, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "proishan11", "fields": {"name": "Ishan Singh", "score": 0.5401700318809775, "rank": 108, "trend": 0, "last_active_at": "2017-03-24T11:54:16Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10489160200226721, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pushkalkatara", "fields": {"name": "Pushkal Katara", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-02-12T19:39:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raduklb", "fields": {"name": "Radu Capalb", "score": 1.1506907545164715, "rank": 89, "trend": 0, "last_active_at": "2018-07-19T05:08:35Z", "pos_in": 2, "weighted_pos_in": 1.1506907545164715, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11042027670284268, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raghavmittal101", "fields": {"name": "Raghav Mittal", "score": 0.21285866099893672, "rank": 151, "trend": 0, "last_active_at": "2017-07-05T15:51:33Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10192757796784206, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rahulkrishnan98", "fields": {"name": "Rahul Krishnan", "score": 0.2691285866099893, "rank": 134, "trend": 0, "last_active_at": "2017-02-08T10:22:43Z", "pos_in": 1, "weighted_pos_in": 0.11912858660998926, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10243713989194211, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raj-maurya", "fields": {"name": "Raj Maurya", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-02-08T20:43:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "random-access7", "fields": {"name": "Aabhaas Vaish", "score": 1.4155685441020194, "rank": 81, "trend": 0, "last_active_at": "2018-03-01T07:59:09Z", "pos_in": 2, "weighted_pos_in": 1.0655685441020193, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1128189227761559, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rattandeep1998", "fields": {"name": "RATTANDEEP SINGH", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-12-18T14:24:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "realslimshanky", "fields": {"name": "Shashank Kumar", "score": 0.18618490967056384, "rank": 160, "trend": 0, "last_active_at": "2018-02-13T11:28:23Z", "pos_in": 1, "weighted_pos_in": 0.10669500531349625, "pos_out": 4, "neg_in": 2, "weighted_neg_in": 0.3205100956429324, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10168602925594575, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refactormyself", "fields": {"name": "Bolarinwa Saheed Olayemi", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-04-12T08:45:21Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refeed", "fields": {"name": "Rafid Aslam", "score": 11.016312433581295, "rank": 17, "trend": 0, "last_active_at": "2018-08-12T11:47:30Z", "pos_in": 13, "weighted_pos_in": 10.666312433581295, "pos_out": 17, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.1997600991859192, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "rhemon", "fields": {"name": "Ridhwanul Haque", "score": 3.904357066950049, "rank": 51, "trend": 0, "last_active_at": "2018-05-08T09:23:07Z", "pos_in": 13, "weighted_pos_in": 3.904357066950049, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13535657241064278, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "richer6605", "fields": {"name": "Dean Lin", "score": 0.27502656748140175, "rank": 132, "trend": 0, "last_active_at": "2017-11-27T21:08:43Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1024905500652897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "robbyoconnor", "fields": {"name": "Robby O'Connor", "score": 0.2714665249734317, "rank": 133, "trend": 0, "last_active_at": "2017-10-23T06:16:26Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.102458311492188, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanbanerjee", "fields": {"name": "Rohan Banerjee", "score": 0.9273113708820407, "rank": 97, "trend": 0, "last_active_at": "2018-01-16T19:52:50Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10839742653389411, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanraju97", "fields": {"name": "Rohan Raju", "score": 0.15478214665249734, "rank": 168, "trend": 0, "last_active_at": "2017-03-28T16:55:43Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10140165617082475, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanrk", "fields": {"name": "Rohan", "score": 0.36354941551540826, "rank": 124, "trend": 0, "last_active_at": "2018-05-07T10:39:40Z", "pos_in": 2, "weighted_pos_in": 0.36354941551540826, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1032921838382365, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rpanczer", "fields": {"name": "Bobby Panczer", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-10-17T00:31:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rubdos", "fields": {"name": "Ruben De Smet", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-03-07T03:13:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rupav", "fields": {"name": "rupav jain", "score": 0.25, "rank": 140, "trend": 0, "last_active_at": "2017-10-03T17:34:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10226391770811206, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sadovnychyi", "fields": {"name": "Dmytro Sadovnychyi", "score": 0.2, "rank": 157, "trend": 0, "last_active_at": "2017-06-14T11:01:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10181113416648965, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sahilarora535", "fields": {"name": "Sahil Arora", "score": 0.44102019128586484, "rank": 115, "trend": 0, "last_active_at": "2017-03-19T16:49:09Z", "pos_in": 2, "weighted_pos_in": 0.44102019128586484, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10399373368274817, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sangamcse", "fields": {"name": "Sangam Kumar", "score": 10.644721118174969, "rank": 19, "trend": 0, "last_active_at": "2018-08-09T05:42:01Z", "pos_in": 21, "weighted_pos_in": 8.79472111817497, "pos_out": 33, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.19639509054940305, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sanjeethboddi", "fields": {"name": "Sanjeeth", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2018-05-21T03:55:15Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sarthakchakerverty", "fields": {"name": "Sarthak Chakerverty", "score": -0.21955366631243298, "rank": 185, "trend": 0, "last_active_at": "2018-07-13T08:57:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 2, "weighted_neg_in": 0.319553666312433, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "satwikkansal", "fields": {"name": "Satwik Kansal", "score": 10.68698193411264, "rank": 18, "trend": 0, "last_active_at": "2018-04-07T15:38:12Z", "pos_in": 18, "weighted_pos_in": 9.63698193411264, "pos_out": 21, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.19677779058764527, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sgsh123", "fields": {"name": null, "score": 0.10573857598299678, "rank": 178, "trend": 0, "last_active_at": "2017-02-20T03:35:34Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10095753373839385, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shaipranesh11", "fields": {"name": null, "score": 0.2, "rank": 157, "trend": 0, "last_active_at": "2017-12-02T09:48:06Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10181113416648965, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shashank-b", "fields": {"name": "Shashank Batra", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-01-08T18:17:29Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shikharvaish28", "fields": {"name": "Shikhar Vaish", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-06-21T17:43:50Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreab373", "fields": {"name": "shreab373", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-04-08T16:45:09Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyans800755", "fields": {"name": "Shreyans", "score": 20.82037438984581, "rank": 5, "trend": 0, "last_active_at": "2018-08-18T06:53:16Z", "pos_in": 41, "weighted_pos_in": 19.34540095732721, "pos_out": 35, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2885424570827793, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyateeza", "fields": {"name": "Shreya", "score": 1.276780021253985, "rank": 85, "trend": 0, "last_active_at": "2018-01-14T18:09:18Z", "pos_in": 4, "weighted_pos_in": 1.3841657810839527, "pos_out": 1, "neg_in": 1, "weighted_neg_in": 0.15738575982996783, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11156209959792238, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shrutishrm512", "fields": {"name": "Shruti Sharma", "score": 0.25, "rank": 140, "trend": 0, "last_active_at": "2017-03-28T08:50:11Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10226391770811206, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sibasish14", "fields": {"name": "Sibasish Ghosh", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-12-14T12:59:16Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "siddhant-curious", "fields": {"name": "Siddhant Chhabra", "score": 0.22773645058448444, "rank": 144, "trend": 0, "last_active_at": "2018-05-08T04:55:07Z", "pos_in": 2, "weighted_pos_in": 0.22773645058448444, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10206230633304321, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sidharthskumar", "fields": {"name": "sidharth sk", "score": 0.42104144527098825, "rank": 119, "trend": 0, "last_active_at": "2017-07-18T10:13:56Z", "pos_in": 1, "weighted_pos_in": 0.1210414452709882, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10381281273519236, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sils", "fields": {"name": "Lasse Schuirmann", "score": 17.284856535600408, "rank": 8, "trend": 0, "last_active_at": "2018-01-03T08:40:29Z", "pos_in": 60, "weighted_pos_in": 16.934856535600407, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2565259711724892, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sims1253", "fields": {"name": "Maximilian Scholz", "score": 6.859936238044619, "rank": 28, "trend": 0, "last_active_at": "2017-11-02T17:21:01Z", "pos_in": 34, "weighted_pos_in": 6.759936238044619, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16212132450331546, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "singhYash123", "fields": {"name": "Yash", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-10-29T13:43:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sks444", "fields": {"name": "Shrikrishna Singh", "score": 10.090928534005794, "rank": 20, "trend": 0, "last_active_at": "2018-08-13T06:50:56Z", "pos_in": 15, "weighted_pos_in": 5.890928534005793, "pos_out": 84, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.19138012719771608, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "snakevenom04", "fields": {"name": "Sir Cheshire", "score": 0.2547821466524973, "rank": 139, "trend": 0, "last_active_at": "2017-08-25T07:26:44Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10230722325406957, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "solutusimmensus", "fields": {"name": "SolutusImmensus", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-11-09T02:37:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sonali0901", "fields": {"name": "sonali0901", "score": 0.10095642933049948, "rank": 180, "trend": 0, "last_active_at": "2017-10-18T17:04:10Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10091422819243634, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sopelj", "fields": {"name": "Jesse Sopel", "score": 0.2, "rank": 157, "trend": 0, "last_active_at": "2018-05-05T13:35:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10181113416648965, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "soumya-ranjan7", "fields": {"name": "Soumya Ranjan", "score": 0.10382571732199786, "rank": 179, "trend": 0, "last_active_at": "2017-10-19T11:28:17Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10094021152001084, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sourojit", "fields": {"name": "Sourojit Bhaduri", "score": 1.135919234856536, "rank": 91, "trend": 0, "last_active_at": "2018-01-02T20:21:03Z", "pos_in": 3, "weighted_pos_in": 1.135919234856536, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11028651068310727, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "srikanth100", "fields": {"name": "Srikanth Kini", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-02-13T12:59:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "starkblaze01", "fields": {"name": "MAYANK PATHELA", "score": 0.2286928799149839, "rank": 143, "trend": 0, "last_active_at": "2018-06-28T12:56:00Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10207096744223472, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "stellargo", "fields": {"name": "Sumit Sarin", "score": 0.4702444208289045, "rank": 112, "trend": 0, "last_active_at": "2018-04-22T10:08:32Z", "pos_in": 2, "weighted_pos_in": 0.3702444208289045, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10425837868582184, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supergr35", "fields": {"name": "Grant Parajuli", "score": 7.251859723698191, "rank": 26, "trend": 0, "last_active_at": "2017-11-14T19:07:24Z", "pos_in": 25, "weighted_pos_in": 6.65185972369819, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16567045458089996, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supriyanta", "fields": {"name": "Supriyanta Poddar", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-11-19T19:37:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "susg", "fields": {"name": "sushant gupta", "score": 1.0, "rank": 95, "trend": 0, "last_active_at": "2018-04-18T22:25:59Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10905567083244826, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "swapagarwal", "fields": {"name": "Swapnil Agarwal", "score": 0.16599362380446298, "rank": 163, "trend": 0, "last_active_at": "2017-10-18T06:50:39Z", "pos_in": 1, "weighted_pos_in": 0.16599362380446298, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10150318361745847, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "synicalsyntax", "fields": {"name": "Cynthia Lin", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-12-08T07:18:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "tabias", "fields": {"name": null, "score": 0.1633900106269925, "rank": 164, "trend": 0, "last_active_at": "2017-03-02T07:57:36Z", "pos_in": 1, "weighted_pos_in": 0.11339001062699249, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10147960615354827, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "theOriginalMuktaka", "fields": {"name": "", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-12-27T12:40:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "thisch", "fields": {"name": "Thomas Hisch", "score": 2.6401700318809724, "rank": 60, "trend": 0, "last_active_at": "2017-06-12T21:21:05Z", "pos_in": 8, "weighted_pos_in": 2.6401700318809724, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12390851075040851, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "traff", "fields": {"name": "Dmitry Trofimov", "score": 0.0, "rank": 184, "trend": 0, "last_active_at": "2017-01-26T00:50:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "troublemagnet", "fields": {"name": "Gunjan Karamchandani", "score": 2.155738575982997, "rank": 69, "trend": 0, "last_active_at": "2017-11-11T12:00:39Z", "pos_in": 3, "weighted_pos_in": 2.105738575982997, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11952165894491276, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "twinone", "fields": {"name": "Luuk W.", "score": 0.19277364505844796, "rank": 158, "trend": 0, "last_active_at": "2017-03-20T14:45:54Z", "pos_in": 1, "weighted_pos_in": 0.19277364505844796, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10174569467482053, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "umeshksingla", "fields": {"name": "Umesh Singla", "score": 2.0046227417640816, "rank": 72, "trend": 0, "last_active_at": "2017-09-04T17:38:53Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11815320369265545, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "underyx", "fields": {"name": "Bence Nagy", "score": 0.10382571732199786, "rank": 179, "trend": 0, "last_active_at": "2017-05-28T03:21:13Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10094021152001084, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "urohit011", "fields": {"name": "Rohit Upadhyay", "score": 1.0273113708820407, "rank": 94, "trend": 0, "last_active_at": "2017-11-23T03:10:16Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10930299361713894, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "userzimmermann", "fields": {"name": "Stefan Zimmermann", "score": 15.993251859723685, "rank": 9, "trend": 0, "last_active_at": "2018-01-06T09:09:24Z", "pos_in": 46, "weighted_pos_in": 11.443251859723684, "pos_out": 83, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.24482962438209857, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "utkarsh2102", "fields": {"name": "Utkarsh Gupta", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-05-28T22:48:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaibhavsingh97", "fields": {"name": "Vaibhav Singh", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-10-29T20:38:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaishnavm217", "fields": {"name": "Vaishnav Murali", "score": 0.20451647183846944, "rank": 154, "trend": 0, "last_active_at": "2017-03-01T11:58:41Z", "pos_in": 1, "weighted_pos_in": 0.15451647183846942, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10185203384878286, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vddesai1998", "fields": {"name": "Vishal Desai", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2017-12-21T12:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vibhanshuvaibhav", "fields": {"name": "Vibhanshu Vaibhav", "score": 0.20738575982996782, "rank": 153, "trend": 0, "last_active_at": "2018-01-19T13:24:25Z", "pos_in": 1, "weighted_pos_in": 0.15738575982996783, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10187801717635736, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vijeth-aradhya", "fields": {"name": "euleram", "score": 2.080446333687567, "rank": 71, "trend": 0, "last_active_at": "2017-03-26T12:34:47Z", "pos_in": 3, "weighted_pos_in": 1.980446333687567, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11883983718244842, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vipuldcoder", "fields": {"name": "vipul Aggarwal", "score": 0.1, "rank": 181, "trend": 0, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10090556708324483, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "virresh", "fields": {"name": "Viresh Gupta", "score": 4.493888318164969, "rank": 45, "trend": 0, "last_active_at": "2018-08-12T15:13:59Z", "pos_in": 15, "weighted_pos_in": 4.09388831816497, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14069517336708645, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wisn", "fields": {"name": "Wisnu Adi Nurcahyo", "score": 3.9312585305114545, "rank": 50, "trend": 0, "last_active_at": "2018-07-30T11:39:09Z", "pos_in": 13, "weighted_pos_in": 3.5812585305114544, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13560018320956596, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wyj1026", "fields": {"name": "Wang Yijie", "score": 0.2214665249734319, "rank": 147, "trend": 0, "last_active_at": "2017-12-19T16:43:19Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10200552795056558, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "xferra", "fields": {"name": "Andrey", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yash-nisar", "fields": {"name": "Yash Nisar", "score": 21.023113708820397, "rank": 4, "trend": 0, "last_active_at": "2017-09-03T12:50:43Z", "pos_in": 33, "weighted_pos_in": 14.273113708820395, "pos_out": 135, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2903783976202079, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashLadha", "fields": {"name": "Yash Ladha", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-03-02T12:08:38Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashasingh", "fields": {"name": "Yasha", "score": -0.4513283740701395, "rank": 187, "trend": 0, "last_active_at": "2017-12-12T17:28:20Z", "pos_in": 2, "weighted_pos_in": 0.3759829968119013, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.9273113708820407, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashovardhanagrawal", "fields": {"name": "Yashovardhan Agrawal", "score": 2.268862911795962, "rank": 66, "trend": 0, "last_active_at": "2017-11-27T07:58:27Z", "pos_in": 11, "weighted_pos_in": 2.0688629117959616, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12054607569317431, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yukiisbored", "fields": {"name": "Muhammad Kaisar Arkhan", "score": 5.021625929861844, "rank": 40, "trend": 0, "last_active_at": "2018-05-18T17:39:46Z", "pos_in": 27, "weighted_pos_in": 4.771625929861844, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14547419146451573, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yzgyyang", "fields": {"name": "Guangyuan (Charlie) Yang", "score": 3.1009564293304996, "rank": 55, "trend": 0, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 4, "weighted_pos_in": 3.1009564293304996, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1280812406897811, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zenara", "fields": {"name": "Chathurika Senani", "score": 0.05, "rank": 182, "trend": 0, "last_active_at": "2017-04-06T19:27:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10045278354162242, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zwliew", "fields": {"name": "Zhao Wei Liew", "score": 0.04871011885228427, "rank": 183, "trend": 0, "last_active_at": "2017-12-28T06:48:01Z", "pos_in": 2, "weighted_pos_in": 0.5487101188522843, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.10044110280253572, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDMyODkzMQ==", "fields": {"body": "@hemangsk I made the necessary changes. Is it alright now?", "diff": null, "created_at": "2017-01-22T12:48:14Z", "last_edited_at": null, "author": "SiddharthKumar02", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3Njk3MDY0Mw==", "fields": {"body": "Hey, this is your first contribution, right? Congrats and welcome to the coalaians! :) You've done your first step to become a coala developer.\nYour changes are auomatically released and live already.\nWe would really appreciate it if you could help us with\n\ntelling us about your experience\nsome code reviews for other newcomers\nfixing at least a difficulty/low issue\nfill our usability survey\n\nIf you've done those and tell us about it so we can promote you to a coala developer!\nWe're all volunteers and we're currently struggling to keep this up. Helping all those newcomers is a lot of work and we do need your help so we can continue this for others!", "diff": null, "created_at": "2017-02-02T14:22:47Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI2MzkwNw==", "fields": {"body": "Ya the Left align solution sounds better \ud83d\udc4d", "diff": null, "created_at": "2017-02-03T14:44:29Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI3NTQ4NA==", "fields": {"body": "your commits need squashing and please read coala.io/commits carefully", "diff": null, "created_at": "2017-02-03T15:24:32Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw==", "fields": {"body": "Yup, not possible. No problem, i will get onto another isuue.", "diff": null, "created_at": "2017-02-03T11:50:29Z", "last_edited_at": null, "author": "aalind0", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzM0MTE0OQ==", "fields": {"body": "@Mariatta Here is the screenshot-", "diff": null, "created_at": "2017-02-03T19:35:30Z", "last_edited_at": null, "author": "Shruti9520", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzMzOTEyOQ==", "fields": {"body": "Can you also post a screenshot of how the new page will look like after these changes you make?\nThanks.", "diff": null, "created_at": "2017-02-03T19:27:39Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzQ2OTcyNw==", "fields": {"body": "Looks good in the screenshot, tested locally as well \ud83d\udc4d  \ud83c\udf89", "diff": null, "created_at": "2017-02-04T19:36:44Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzU0MTkzOQ==", "fields": {"body": "Sorry this is getting a bit tedious for you \ud83d\ude05  but we get the hang of the drill after some time \ud83d\ude03  \ud83d\udc4d\n\nYou need to squash your commits coala.io/git\nAnd then rebase your branch", "diff": null, "created_at": "2017-02-05T19:19:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw==", "fields": {"body": "There :)", "diff": null, "created_at": "2017-02-07T14:55:02Z", "last_edited_at": null, "author": "rahulkrishnan98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODIyMzgxNg==", "fields": {"body": "@gkrishnan724 @rahulkde Do you guys feel we need a little margin left (1em/2em) on the search icon ?", "diff": null, "created_at": "2017-02-08T04:06:55Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM5MTI4MA==", "fields": {"body": "@hemangsk Done with the changes ! :D", "diff": null, "created_at": "2017-02-08T17:04:57Z", "last_edited_at": null, "author": "aalind0", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDY2MTY3Ng==", "fields": {"body": "@yukiisbored @gkrishnan724  Yeah I'm testing it locally \ud83d\ude03  looks all awesome so far", "diff": null, "created_at": "2017-02-17T14:19:27Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ==", "fields": {"body": "@meetmangukiya I'm looking into them :)", "diff": null, "created_at": "2017-03-19T15:20:51Z", "last_edited_at": null, "author": "sahilarora535", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTA3Mzc4Mw==", "fields": {"body": "This PR is ready to be merged. The requested changes have been made.", "diff": null, "created_at": "2017-03-24T16:33:22Z", "last_edited_at": null, "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTAwNzQ0Mw==", "fields": {"body": "@kaustubhhiware You'll have to amend the commit message with,\ngit commit --amend and then force push.", "diff": null, "created_at": "2017-03-24T12:14:57Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTE0NTg1OQ==", "fields": {"body": "Yeah, primarily the concept is that one commit should have only one atomic/nuclear change. So we can have two about adding the indentation bear and about correcting indentation.", "diff": null, "created_at": "2017-04-03T13:40:45Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTE4NDc3MQ==", "fields": {"body": "@hemangsk All the suggested changes have been made. Line 272 has been corrected.\n2 separate commits have been made to keep the changes atomic. Open for review.", "diff": null, "created_at": "2017-04-03T15:48:58Z", "last_edited_at": "2017-04-03T15:49:19Z", "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTIwNjgzMA==", "fields": {"body": "The changes have been made. Please see.", "diff": null, "created_at": "2017-04-03T17:03:54Z", "last_edited_at": null, "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ==", "fields": {"body": "@Techievena Pro-tip: Use a different branch on your fork so you can update it easily without issues with \"merging\" from the origin remote when pulling.", "diff": null, "created_at": "2017-04-22T15:57:12Z", "last_edited_at": "2017-04-22T15:57:19Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw==", "fields": {"body": "@ai-coder , you have done one newcomer issue.  Fixing individual spelling mistakes are newcomer issues.\nThe bug you are solving was low because it was about adding a spell checker bear, which is not what you are doing in this PR.", "diff": null, "created_at": "2017-11-03T08:19:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw==", "fields": {"body": "The content of your patch is fine; please amend your commit message\nhttp://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nThis type of change is \"Closes\", not a \"Fixes\", as the current version is not broken.", "diff": null, "created_at": "2017-11-03T14:00:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkxODYyNw==", "fields": {"body": "@yashovardhanagrawal one way is that u can add members that are in core development groups and omit those who are in pending removal group and list cannot be a static number.", "diff": null, "created_at": "2017-11-04T18:16:42Z", "last_edited_at": null, "author": "prashant0598", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkyMDEyOQ==", "fields": {"body": "@prashant0598 Rather than using APIs or any specific number, I am just thinking to add a counter to count the number of cards displayed. I am studying the backend for this, let's see \ud83d\ude04", "diff": null, "created_at": "2017-11-04T18:39:16Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg==", "fields": {"body": "I would rather recommend to write it lowercase, because it's not referring to a name or title. Do it then for both, inside the commit body and in the .rst", "diff": null, "created_at": "2017-11-04T20:26:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ==", "fields": {"body": "@Grox-Ni You missed a full stop at the end of commit description \ud83d\ude09.", "diff": null, "created_at": "2017-11-07T15:42:01Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjgzNTQwOQ==", "fields": {"body": "@prashant0598 that issue if for a different task, this PR remains and I think the proposed work for this PR is also completed by me. \ud83d\ude1c\nAbout the issue, it is yet unlabelled and unlabelled issue are not meant to be assigned to newcomers so corobo cannot assign it to me.\nYou might view the whole conversation here, if you want to know more about what is the progress \ud83d\ude04", "diff": null, "created_at": "2017-11-08T14:34:39Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Mjk1ODc5OQ==", "fields": {"body": "Sorry, it took some time but I'm hoping this time it's okay.", "diff": null, "created_at": "2017-11-08T21:04:02Z", "last_edited_at": null, "author": "solutusimmensus", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ==", "fields": {"body": "@troublemagnet done thanks!!", "diff": null, "created_at": "2017-11-11T11:55:28Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw==", "fields": {"body": "Also, again - try not to make changes to your \"master\" branch, the consequences of doing so are well documented here \ud83d\ude09 \ud83d\udc4d", "diff": null, "created_at": "2017-11-15T13:05:46Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA==", "fields": {"body": "@neelanshsahai You don't need to unack just to request changes, use GitHub's feature or just make it a comment.\nOf course, unack is used when you disagree that this is acceptable and has been ack'd by someone else.", "diff": null, "created_at": "2017-11-16T11:02:09Z", "last_edited_at": "2017-11-16T11:02:48Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA==", "fields": {"body": "Yes, the documentation should focus on describing .coarc , rather than default_coafile, but I think this example is good enough for this PR/issue.  The problem with default_coafile is in core, not the documentation, and further improvements of docs dont help users a great deal.", "diff": null, "created_at": "2017-11-17T17:39:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg==", "fields": {"body": "@prashant0598 please insert a line break between the description and Closes #128\nas I had suggested", "diff": null, "created_at": "2017-11-18T18:55:51Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ==", "fields": {"body": "Also, fix your commit to adhere to https://coala.io/commit \ud83d\ude04", "diff": null, "created_at": "2017-11-26T05:35:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg==", "fields": {"body": "@0x48piraj, please follow the instructions given to you by our developers.  We have good reasons for why and how we do things, which you will learn if you proceed through the newcomer process.\nOur newcomer process exists only to ensure you know how to use git correctly.\nIf you dont follow our processes, we discard your PR.\nThank you.", "diff": null, "created_at": "2017-11-27T05:39:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng==", "fields": {"body": "Also, it's a great first PR \ud83d\ude04 - you needn't start a new PR, just go through the suggested changes and associated guides \ud83d\ude03.\n\nI was talking about setting up the project in git \ud83d\ude1b\nAnd \"I never said anything\" was for that this was just a request to accept this PR, and from next issue, I will do it via git.\nAnyways, you all are right! I read the guidelines, but of my laziness I did it via web-interface.\nI know I'm assigned \ud83d\ude09\nThanks @prnvdixit for such a positive comment.\nFrom now, I will do as it is done in coala \ud83d\ude0a", "diff": null, "created_at": "2017-11-27T06:48:31Z", "last_edited_at": null, "author": "0x48piraj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzUwOTY5Nw==", "fields": {"body": "Can you check with @meetmangukiya about this.  He build the utils/filters.py which is doing something a bit similar.  Would be interesting to know why he needed to build a filter to do that.", "diff": null, "created_at": "2017-11-28T12:34:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Nzc1MzM4Ng==", "fields": {"body": "Could you try to build a test for this, especially a test which uses a GitLab URL ;-)", "diff": null, "created_at": "2017-11-29T04:58:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Nzc2Mzk3MA==", "fields": {"body": "@Vamshi99 Sorry didn't notice that. @LifetimeAlone keep it as Fixes only.", "diff": null, "created_at": "2017-11-29T06:16:06Z", "last_edited_at": null, "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODA5OTA0Mg==", "fields": {"body": "@jayvdb @RaiVaibhav  actually i had my exams so was not able to do it but now i am already working on this", "diff": null, "created_at": "2017-11-30T06:53:52Z", "last_edited_at": null, "author": "prashant0598", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODIwNTcwOQ==", "fields": {"body": "However, this is my local coala run on this PR ;)\nProject wide:\n|    | [NORMAL] GitCommitBear:\n|    | Shortlog of HEAD commit isn't in imperative mood! Bad words are 'Added'\n\nProject wide:\n|    | [NORMAL] GitCommitBear:\n|    | Shortlog of the HEAD commit contains 59 character(s). This is 9 character(s) longer than the limit (59 > 50).", "diff": null, "created_at": "2017-11-30T14:36:00Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODU4ODMzNw==", "fields": {"body": "closing per move request. @shaipranesh11 you can still transfer the commit using the git cli", "diff": null, "created_at": "2017-12-01T19:15:30Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTM5MA==", "fields": {"body": "Please, rebase your branch using git rebase (do not press github 'update branch' button, it's evil ;D)\nEverything else is alright \ud83d\udc4d", "diff": null, "created_at": "2017-12-03T05:22:46Z", "last_edited_at": null, "author": "UnimaginaryUnit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzEwMg==", "fields": {"body": "Please check these screenshots. this && this\nI am confused about the allowed rooms, should we allow render test in coala/corobo?", "diff": null, "created_at": "2017-12-03T17:04:44Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzI3Nw==", "fields": {"body": "@mohitkyadav Please add tests", "diff": null, "created_at": "2017-12-03T17:05:54Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA==", "fields": {"body": "Done :)", "diff": null, "created_at": "2017-12-05T03:33:08Z", "last_edited_at": null, "author": "indmind", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg==", "fields": {"body": "Also, it's not labelled \"bug\" - So, use \"Closes\" instead of \"Fixes\" in commit. \ud83d\udc4d", "diff": null, "created_at": "2017-12-05T07:48:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng==", "fields": {"body": "If #37 is merged shortly, it'll still be good to add static/js/*.js to the linted JavaScript files.", "diff": null, "created_at": "2017-12-06T08:28:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw==", "fields": {"body": "Comment on a3bbb6d, file scrap.js, line 10.\nBroken link - unable to connect to https://codein.withgoogle.com/api/program/2017/organization/?status=2 (HTTP Error: 503)\nOrigin: InvalidLinkBear, Section: all.links.", "diff": null, "created_at": "2017-12-06T05:25:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw==", "fields": {"body": "You might need run this 2 line inside the project folder\nexport PATH=$PATH:./node_modules/.bin\nexport NODE_PATH=$NODE_PATH:./node_modules\n\nTo let coala use the local eslint.", "diff": null, "created_at": "2017-12-07T10:15:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg==", "fields": {"body": "Could you modify this as well as part of your folder restructuring?\n\n  \n    \n      gci-leaders/.coafile\n    \n    \n         Line 2\n      in\n      df44130\n    \n    \n    \n    \n\n        \n          \n           files = *.js, static/js/*.js", "diff": null, "created_at": "2017-12-08T06:09:21Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw==", "fields": {"body": "This is so awesome \u2764\ufe0f", "diff": null, "created_at": "2017-12-08T06:58:37Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA==", "fields": {"body": "#49 and #50 should use Closes\nThe rest is good enough, however try to keep to our 'one commit for one issue' guideline next time.", "diff": null, "created_at": "2017-12-08T07:07:31Z", "last_edited_at": "2017-12-08T07:14:48Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng==", "fields": {"body": "LGTM = looks good to me. ack tells the bot to accept the patch", "diff": null, "created_at": "2017-12-08T16:41:11Z", "last_edited_at": "2017-12-08T16:41:29Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDQ1MDU0Mw==", "fields": {"body": "@Vamshi99 @meetmangukiya this is kinda urgent. We could disable auto invite and let our developers help manage the load of inviting with a revised onboarding process.", "diff": null, "created_at": "2017-12-09T11:26:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw==", "fields": {"body": "I think we should have a strong horizontal line between each org, and a much less visually distracting separator between icons and participants.", "diff": null, "created_at": "2017-12-11T06:45:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA==", "fields": {"body": "Oh, one last thing, it might be better to use the Wikipedia and Wikimedia logos without text, because it's not readable anyways when the logo is so small. Using just the icon without text will help it fit in more.", "diff": null, "created_at": "2017-12-12T22:05:57Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ==", "fields": {"body": "how do we determine the parent repo of the fork?\n\nThat would be another GitHub API call .. ;)\nBut I meant that it would be OK to just hard code https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nI dont feel particularly inclined to help someone create an alternative version without sending their improvements to this repo.  I am more concerned about the ability for development forks of this repo to build correctly, so newcomers can easily participate in this repo.\nThe problem is that if you use https://raw.githubusercontent.com/andrewda/gh-pages/data.min.json , and dont use https://raw.githubusercontent.com/coala/gh-pages/data.min.json , the build on the fork will be 'reset' , and will need to have several builds before it catches up to the data which has been found in https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nSo if you do use https://raw.githubusercontent.com/xxxx/gh-pages/data.min.json , you should also fall back to https://raw.githubusercontent.com/coala/gh-pages/data.min.json (and IMO , just hard-code it).", "diff": null, "created_at": "2017-12-13T08:23:52Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng==", "fields": {"body": "That would be one option, but adding a CACHE_VERSION would allow us to avoid this problem entirely in the future, such as if a new key were added or an existing one were taken away.", "diff": null, "created_at": "2017-12-14T03:21:12Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTk4NjU3Ng==", "fields": {"body": "@Vamshi99 take a look.", "diff": null, "created_at": "2017-12-15T11:46:17Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ==", "fields": {"body": "Also the expected results says to use yeah but you have changed it to true", "diff": null, "created_at": "2017-12-17T17:16:16Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw==", "fields": {"body": "@ishanSrt\n\nAlso the expected results says to use yeah but you have changed it to true\n\nthat is the expected results it depends what we passed , but on Tutorial we passed True :)", "diff": null, "created_at": "2017-12-17T17:54:01Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg==", "fields": {"body": "If you want to use var = arr.map then you need to return the whole object, not just mutating them.\nBut let's just use forEach", "diff": null, "created_at": "2017-12-18T07:56:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ==", "fields": {"body": "http://coala.io/newcomer tells you not to do that, twice.  Please read it carefully.", "diff": null, "created_at": "2017-12-18T09:46:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA==", "fields": {"body": "Would be good to have the RSS mentioned in the index.html", "diff": null, "created_at": "2017-12-20T10:41:27Z", "last_edited_at": "2017-12-20T10:41:36Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw==", "fields": {"body": "@blazeu Is it?", "diff": null, "created_at": "2017-12-21T06:07:46Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA==", "fields": {"body": "Ignoring the line is probably the best way.", "diff": null, "created_at": "2017-12-21T00:37:25Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzU0NzAxNg==", "fields": {"body": "I suspect that it is the foo & which is tripping it up.", "diff": null, "created_at": "2017-12-22T08:19:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg==", "fields": {"body": "Please squash your rss commits.  There is no need to create a file in one commit and then modify it in another , within one PR.  It is one code addition.", "diff": null, "created_at": "2017-12-22T05:47:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ==", "fields": {"body": "Ideally a PR shouldn't come from your master branch it can complicate things.\nBut don't worry, do not close this one. You can discuss about it in our chat.", "diff": null, "created_at": "2017-12-22T15:31:46Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA==", "fields": {"body": "In general, it's let for reassignable variable or const for unassignable.\nSee our backend js.\nWe have Babel so browser support is pretty good.", "diff": null, "created_at": "2017-12-24T00:53:38Z", "last_edited_at": "2017-12-24T00:54:23Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw==", "fields": {"body": "According to the Best Practices doc mentioned in the original issue, the image size has to be at least 200x200 pixels for smaller sharing posts, or 600x315 pixels for larger sharing posts.\nThe current image is 72x72 pixels (after commit f95ffaf214f529b69de444760653ce75f2621410, so I decided to re-add the previous image instead.", "diff": null, "created_at": "2017-12-28T06:31:41Z", "last_edited_at": "2017-12-28T06:35:40Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ==", "fields": {"body": "I believe an image with a white background works and looks fine.\nExample using an image with a white background:", "diff": null, "created_at": "2017-12-28T06:40:15Z", "last_edited_at": "2017-12-28T06:40:25Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng==", "fields": {"body": "@blazeu That was actually caused by my padding: 10px instead of padding: 10px 0. I just fixed the padding instead.", "diff": null, "created_at": "2017-12-29T08:17:08Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA==", "fields": {"body": "@blazeu I've mentioned it above. See here.", "diff": null, "created_at": "2017-12-31T10:04:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA==", "fields": {"body": "Note that this was working way back before @dob9601 added a bunch of new codes, so I accepted the task in GCI.", "diff": null, "created_at": "2018-01-03T14:30:35Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng==", "fields": {"body": "done", "diff": null, "created_at": "2018-01-06T15:10:14Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Njg4MTQ5Mg==", "fields": {"body": "Done @nalinbhardwaj", "diff": null, "created_at": "2018-01-11T09:47:12Z", "last_edited_at": null, "author": "Prabhat-IIT", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ==", "fields": {"body": "and make sure in your commit message you are using only present tense \ud83d\ude09", "diff": null, "created_at": "2018-01-18T22:11:34Z", "last_edited_at": null, "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng==", "fields": {"body": "@Kagamihime Oh forgot to change the comment here. Had already changed the commit by looking at another PR.", "diff": null, "created_at": "2018-01-22T14:01:03Z", "last_edited_at": null, "author": "diveshuttam", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTA3NDcxMQ==", "fields": {"body": "YES!!", "diff": null, "created_at": "2018-01-28T16:19:00Z", "last_edited_at": null, "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTAyMjcyNQ==", "fields": {"body": "@Makman2 nope, target is already used, this is just a little typo in the template: https://github.com/coala/corobo/blob/master/plugins/labhub.py#L119-L124", "diff": null, "created_at": "2018-01-27T23:03:05Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTQ4NDEzNA==", "fields": {"body": "@Makman2 I couldn't write tests and it's been a long time I took up the issue. Someone else will work on this.", "diff": null, "created_at": "2018-01-30T05:47:50Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng==", "fields": {"body": "coala says:\n|    | [NORMAL] GitCommitBear:\n|    | No newline found between shortlog and body at HEAD commit. Please add one.\n\nYour commit needs to be like this\nMain.css: Fix broken social link\n\nFixes https://github.com/coala/gci-leaders/issues/73\n\n1 newline between shortlog and body.", "diff": null, "created_at": "2018-02-04T14:53:15Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA==", "fields": {"body": "I implemented wisn's suggestion, the one that made the issue a newcomer one, but perhaps there are better ways to solve this issue.", "diff": null, "created_at": "2018-02-06T06:49:20Z", "last_edited_at": null, "author": "mvinoba", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg==", "fields": {"body": "Now we are talking, looks good :D", "diff": null, "created_at": "2018-02-13T11:24:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw==", "fields": {"body": "Sure @Makman2 This won't repeat again :)", "diff": null, "created_at": "2018-02-15T14:41:19Z", "last_edited_at": null, "author": "nguptaa", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODIyMTE4Nw==", "fields": {"body": "Hey! Thanks for this contribution, a few minor things though, can we have tests that ensure this is working as expected?\nAlso commit messages should follow the guideline set here", "diff": null, "created_at": "2018-02-24T11:16:25Z", "last_edited_at": "2018-02-24T11:16:45Z", "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODQ5MTUxMw==", "fields": {"body": "Squash your commits into one", "diff": null, "created_at": "2018-02-26T12:53:20Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODU0MzMyMg==", "fields": {"body": "I apologize for the mistake, @Makman2 . Will keep this in mind next time.", "diff": null, "created_at": "2018-02-26T15:37:48Z", "last_edited_at": null, "author": "random-access7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODU4MjcwOA==", "fields": {"body": "Commit message:\n\nShows\nIf possible try to include labhub as tag (you can omit the ending btw): labhub: Show 'invite me'....\nTo have less chars, you can also remove \"method\", this is more or less redundant :)\nAddedd\n\"Made changes\" can and should be removed ;)\nJust to verify: Have you put the full url to the issue reference?", "diff": null, "created_at": "2018-02-26T17:33:17Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODUxMjk4NA==", "fields": {"body": "You don't need to do that. See the Git basics documentation http://api.coala.io/en/latest/Developers/Git_Basics.html rebase it \ud83d\ude04", "diff": null, "created_at": "2018-02-26T14:02:38Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODk2MzQ2Nw==", "fields": {"body": "No need of any tests here and also remove commit body.", "diff": null, "created_at": "2018-02-27T17:42:33Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODk2NTM4Mg==", "fields": {"body": "Changes made, @Vamshi99 \ud83d\ude03", "diff": null, "created_at": "2018-02-27T17:48:35Z", "last_edited_at": null, "author": "random-access7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2OTQzMTU4MQ==", "fields": {"body": "LGTM!", "diff": null, "created_at": "2018-03-01T00:25:59Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MDM1NjY1MQ==", "fields": {"body": "@RaiVaibhav assertion statement will be same as both are linter bears and using LocalBearTestHelper methods.", "diff": null, "created_at": "2018-03-05T09:19:17Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3MTcxOTEzMw==", "fields": {"body": "No, this is an enhancement, and needs to be done carefully.  Not rushed.\nFirst we pin the versions to safe versions, then proceed with upgrading our dependency slowly and carefully.", "diff": null, "created_at": "2018-03-09T05:40:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDE3NzUyMA==", "fields": {"body": "The commit guideline examples all have colons after the filenames in their shortlog.", "diff": null, "created_at": "2018-03-19T11:12:43Z", "last_edited_at": "2018-03-19T11:12:56Z", "author": "rohanrk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NTc2MTg0NA==", "fields": {"body": "@li-boxuan adding the executable to the environment path is a basic requirement for many linters, if one wishes to execute them using CLI. This could happen with most of the linters. The error message submitted by coala would simply be executable not installed. Modifying it just for this special case IMO is not necessary.\nAs for the copyright issue is it necessary to use MathWord code? Can't you come up with some test cases of your own?", "diff": null, "created_at": "2018-03-23T18:37:12Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NTc3MjM5OA==", "fields": {"body": "@MacBox7 Thanks for comments!\n\nadding the executable to the environment path is a basic requirement for many linters\n\nThis case is special to me because it is not trivial to find the mlint executable. It is not documented on Matlab website (They don't even tell users that there is such an executable; they only say mlint is a function call in Matlab). I didn't know the existence of mlint executable until I saw https://github.com/Gimly/vscode-matlab/blob/master/README.md.\n\nCan't you come up with some test cases of your own?\n\nYes, sure. The reason I used official examples is that I found them pretty nice and this would be consistent with the example on https://www.mathworks.com/help/matlab/ref/mlint.html. I would write my own test cases if it's necessary (but may not be as good as official ones).", "diff": null, "created_at": "2018-03-23T19:19:23Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NzQ5ODI0Nw==", "fields": {"body": "@refeed, good catch \ud83d\ude09. I just removed that line before your comment.", "diff": null, "created_at": "2018-03-30T10:32:21Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NzU5MzM1NA==", "fields": {"body": "IMO bandit_selected_tests might be a better name.", "diff": null, "created_at": "2018-03-30T18:41:34Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3ODE0NTU0Nw==", "fields": {"body": "@rammanoj You didn't change the rst section yet", "diff": null, "created_at": "2018-04-03T06:45:37Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3ODE5NDUwNA==", "fields": {"body": "technically git section also shouldn't require any derivation but currently it requires the files from [all] but waiting for a PR to be merged, will reference this PR there if it gets merged before this, then you can make changes. \ud83d\udc4d", "diff": null, "created_at": "2018-04-03T09:52:48Z", "last_edited_at": "2018-04-03T09:53:28Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3ODMxMDE0Nw==", "fields": {"body": "IMO generate_skip_decorator should be added, but seems that's not related to this issue.", "diff": null, "created_at": "2018-04-03T16:24:18Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3OTUzMTczMg==", "fields": {"body": "Interesting error on Appveyor.  maybe different version of pylint there?", "diff": null, "created_at": "2018-04-08T08:35:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng==", "fields": {"body": "I notice that JBoss has two linked on https://gci-leaders.netlify.com/ , but none on https://deploy-preview-148--gci-leaders.netlify.com/ .", "diff": null, "created_at": "2018-04-17T04:57:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA==", "fields": {"body": "fwiw, a part of the problem was that 92a68a2 cleared out all of the data in the deploy.\nWe dont need a special case for JBoss.  The link in GCI is old, but a head request will give us the new URL.\nThat is needed for any github/gitter URL which changes.\nThat should be a new PR which just fixes master.", "diff": null, "created_at": "2018-04-20T02:18:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzM1NTg4MA==", "fields": {"body": "@palash25 Travis builds are failing but that's unrelated to this change. That's why I add the '[skip ci]' statement.", "diff": null, "created_at": "2018-04-22T05:07:35Z", "last_edited_at": null, "author": "attilanagy", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzM1NjQ2OQ==", "fields": {"body": "@attilanagy Travis builds are broken in corobo repo, so need to add anything like skip ci", "diff": null, "created_at": "2018-04-22T05:24:29Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzMwMzAyMg==", "fields": {"body": "Problem needs to be fixed in errbot", "diff": null, "created_at": "2018-04-21T14:55:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA==", "fields": {"body": "#551 (comment) kind of comments can be disabled by turning on travis-buddy only if the tests fail.", "diff": null, "created_at": "2018-04-22T20:56:04Z", "last_edited_at": null, "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTE4NDk0MQ==", "fields": {"body": "Click on the build link for Circle CI and click on the rerun job button.\nSimilarly for other CIs", "diff": null, "created_at": "2018-04-28T15:38:37Z", "last_edited_at": null, "author": "IpshitaC", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTk3MDM2Nw==", "fields": {"body": "errbotio/errbot#1139 was merged\n\nActually this still cannot be fixed. partial property is set for all messages that were broken down from a single message. There's no way to determine if these messages belong to a particular group, or if the partial message is the first message. Either of which would be required to stop the second divert message.", "diff": null, "created_at": "2018-05-02T13:03:56Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkxMzE0Mg==", "fields": {"body": "But what's the aim of doing that? It doesn't seem to save API hits.\n\nIt does save API hits, and it is also much quicker.  The user should be able to load the specified repositories with only a few API hits used.\nIt is also stored in gh-pages, and then used by community repo at https://github.com/coala/community/blob/master/activity/scraper.py#L144", "diff": null, "created_at": "2018-05-02T09:07:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkyNTc0MA==", "fields": {"body": ".. but closed issues/prs is empty ..\n\nI see that https://deploy-preview-18--coala-gh-board.netlify.com/issues.json does include closed & merged items , so the graphql isnt the problem.\nHowever there is only 1577 items in the JSON.  The number should be much higher.\nAccording to https://developer.github.com/v4/guides/resource-limitations/ , the last: 100 is as high as it goes, and it means multiple GraphQL requests will be needed per repo, or the pre-fetcher may need to revert to using the REST API for the larger repos.\nWhat is very nice about the GraphQL approach is that it works much better on PRs, which do not have a token.", "diff": null, "created_at": "2018-05-02T09:55:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkzNjI2NQ==", "fields": {"body": "ya all those are appropriate additions.", "diff": null, "created_at": "2018-05-02T10:41:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NjUxMjg2Ng==", "fields": {"body": "Then issues.json is not storing them in the correct format, and/or the loader is not unserializing them correctly into the user's browser local storage.\n\nTo see the difference, run the old fetch-issues process locally on your machine, and see the format that issues.json needs to be for the unserializer to load it correctly.", "diff": null, "created_at": "2018-05-04T06:08:22Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NjUyODExNQ==", "fields": {"body": "I've put it as a separate issue as loading the last 100 issues is good enough for now, to get the build working again.\n\nThat's indeed a great idea and we definitely should do that but I don't think that's urgent. Actually I have fixed my script and it is able to fetch all issues (by using cursor in GraphQL) now. I would update this PR later.\n@jayvdb I'm afraid I may not be able to solve #23 during the bonding period. Would it be OK if I put that into coding phase?", "diff": null, "created_at": "2018-05-04T07:46:57Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MTc5OA==", "fields": {"body": "Is this file linted using .eslint in the project? because the last time I made this it isn't linted automatically, and it made me merge code with completely different style from the rest of the project.", "diff": null, "created_at": "2018-05-05T02:03:37Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjMyMw==", "fields": {"body": "I'm willing to merge without updating the lifecycle method in this PR. There's no deprecation warning in 16.3, but the next version will.", "diff": null, "created_at": "2018-05-05T02:13:56Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ==", "fields": {"body": "Just run it manually for now, it can come later in another PR after this one.\n@jayvdb different folder, script isn't included ;)", "diff": null, "created_at": "2018-05-05T02:19:53Z", "last_edited_at": "2018-05-05T02:20:47Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NzA5ODQ4Mg==", "fields": {"body": "Thanks @ksdme\nThe shortlog was exceeding character limit, so replaced support with add \ud83d\ude05", "diff": null, "created_at": "2018-05-07T15:15:09Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NzE3NTEyNA==", "fields": {"body": "@PrajwalM2212 the issue reported by GitMate bot has been already fixed.", "diff": null, "created_at": "2018-05-07T19:24:50Z", "last_edited_at": null, "author": "attilanagy", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Nzc3MDEzMw==", "fields": {"body": "I have tested yet, but it looks good.\n(edit) I have not tested yet, but it looks good.", "diff": null, "created_at": "2018-05-09T15:03:54Z", "last_edited_at": "2018-05-11T11:43:00Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Nzk4MTQwMg==", "fields": {"body": "using @staticmethod without self like CPPCheckBear does\n\n@ishanSrt its actually the other way around. CPPCheckBear doesn't use @staticmethod but uses self", "diff": null, "created_at": "2018-05-10T07:56:45Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4ODY0MDc1OA==", "fields": {"body": "Your issue isnt a bug, so the commit message should be Closes ... instead of Fixes ...\nAlso you will need to rebase your local branch (or sync your local branch with this PR's rebased branch).\nOther than that, I think this is good enough.\nThere will be more improvements, but this is enough to resolve the current issue.", "diff": null, "created_at": "2018-05-13T16:56:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDUwMTM5OQ==", "fields": {"body": "ping @Anubhav-Bhargava please read the commit guidelines http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html your commit message doesn't follow them.\nAlso I think it would be best if you drop the description and only keep the shortlog and the issue link.\n\nThe commit message says adds .vscode, this should also indicate that .vscode is a directory.\n\n@ksdme I don't think that there is a file named .vscode so I'm not sure how that would cause confusing its always a directory.", "diff": null, "created_at": "2018-05-20T18:27:24Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDY2MjUzMg==", "fields": {"body": "@blazeu What about saving two files, one is full issues.json and the other one called recent-issues.json which only has recent (e.g. a month) issues/prs/reviews? The full issues.json is needed by coala/community and we only load the smaller recent-issues.json to the frontend.", "diff": null, "created_at": "2018-05-21T14:02:29Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTIyNzkzMg==", "fields": {"body": "On Wed, 23 May 2018 at 07:31, Palash Nigam ***@***.***> wrote:\n ping @dorothykiz1 <https://github.com/dorothykiz1>\n\n \u2014\n You are receiving this because you were mentioned.\n\n\n Reply to this email directly, view it on GitHub\n <#5411 (comment)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/AdYOAGxrW5kRddy-VBGCOZ_ZVLR9Da2Iks5t1OYTgaJpZM4TeaV0>\n .\n\nSure will work on it . Thank you\n-- \nRegards, Dorothy", "diff": null, "created_at": "2018-05-23T05:48:00Z", "last_edited_at": null, "author": "dorothykiz1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTM2ODYwOA==", "fields": {"body": "Ok how about we limit those concurrency?\nUsing something like https://github.com/sindresorhus/p-all , or see the related modules there, might be useful.", "diff": null, "created_at": "2018-05-23T14:30:08Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTQxMzgzNg==", "fields": {"body": "Looks good to me @fatma-mohamed \ud83d\udc4d", "diff": null, "created_at": "2018-05-23T16:32:52Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjUyMTU3MA==", "fields": {"body": "However, I heartily apologise if you felt I'm talking about the commit message.\n\nOh I didn't realise that you were only talking about file changes. But since you approved it I thought the you approved the commit message too.\nWe only ack PRs when they are perfect and ready to merge for pointing out things separately we resort to reviews and comments.\nSo PRs should only be approved once they are ready to be merged and that is usually done by the maintainers. @utkarsh2102 \ud83d\ude04", "diff": null, "created_at": "2018-05-28T13:03:27Z", "last_edited_at": "2018-05-28T13:04:29Z", "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjY3MTg2NQ==", "fields": {"body": "@sanshay, you should at least take a look at each comments on your PR.\nThe changes I requested should be done using git commit --amend which @palash25 has mentioned in #2506 (comment).\nAny way, you have made 2 commits here. So you need to squash your commits into one. After that your PR will be ready to merge. \ud83d\ude09", "diff": null, "created_at": "2018-05-29T06:56:18Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjY4Mzk4MA==", "fields": {"body": "No, why another commit? That would make it 3 commits, and only one is acceptable. Please follow the steps, I suggested with git and describe the problems you are facing.", "diff": null, "created_at": "2018-05-29T07:47:07Z", "last_edited_at": "2018-05-29T07:48:26Z", "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjYzMzY4NA==", "fields": {"body": "i am working on this issue\n\nYou can't just start working on an issue that is being worked on by someone else. That is stealing an issue and that way your PR will never be merged.\nAlso don't comment on the PR comment on the issue thread and ask whether you can be assigned to this since there is already a PR open for it.\nYou already have newcomer PRs if I'm not wrong and newcomers can only work on 1 newcomer issue so instead of grabbing more easy issues get your previous PRs merged and look for more difficult issues.\n@dorothykiz1 still working on this? This isn't going to take much time and I think that you are stuck so please ask for help on gitter regarding this PR this way we can merge it faster.", "diff": null, "created_at": "2018-05-29T02:13:42Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjgwMDk2Mg==", "fields": {"body": "@palash25 i had no way of editing the other after working on my reviews  , thats why i created this, let me close the former", "diff": null, "created_at": "2018-05-29T14:39:05Z", "last_edited_at": null, "author": "dorothykiz1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjgwNDEwOA==", "fields": {"body": "You did have a way of editing the last one. Its a simple command called git commit --amend\nIf you had referred to the docs or ask for help on gitter instead of deciding it for yourself (that it can't be edited) then you would have learnt a new command.\nYou better learn how to amend your commits because we have to do it for every PR and if you keep making multiple PRs for every little amend a maintainer will have to ban you from contributing till you learn git.\nThis has happened to a newcomer before.", "diff": null, "created_at": "2018-05-29T14:47:36Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MjgwNDc5NQ==", "fields": {"body": "Thank You", "diff": null, "created_at": "2018-05-29T14:49:19Z", "last_edited_at": null, "author": "dorothykiz1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MzY3ODY4OQ==", "fields": {"body": "You should never close a pull request. You should just get help fixing this one. I also see that there are a few commits in this branch. When you fixed your commit message you should have amended the commit. After amending the commit then you force push it. (see the follow up section in the coala git tutorial) As it is maybe you need to squash them? (Not sure, I'm still learning.)\nA great place to get help is here https://gitter.im/coala/coala - there are a lot of active contributors who monitor that chat.", "diff": null, "created_at": "2018-05-31T21:01:07Z", "last_edited_at": null, "author": "jsecrest", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5Mzc0ODM1MQ==", "fields": {"body": "As @jsecrest points out, you need to squash your commit messages and then do a force push.", "diff": null, "created_at": "2018-06-01T03:34:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDA4MTgxNg==", "fields": {"body": "Don't we want a modified version that tells user of the new newcomer process? That is select an issue and ask a maintainer for assignment. And then maintainer will invite the newcomer to the newcomer team and then assign the issue.", "diff": null, "created_at": "2018-06-02T11:55:03Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDE1NjY3OQ==", "fields": {"body": "@Makman2 \ud83d\ude05 I think I have taken care of everything this time, hopefully.", "diff": null, "created_at": "2018-06-03T11:48:28Z", "last_edited_at": null, "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDcyMTc1NQ==", "fields": {"body": "I found that the test file isn't properly linted.\nI think we should add that in #24 along with the script directory.", "diff": null, "created_at": "2018-06-05T14:05:10Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDczMDM2Mg==", "fields": {"body": "@li-boxuan seems we never had a package-lock.json committed. I would do that in another issue, that one would also include to verify that package-lock.json has the right content^^", "diff": null, "created_at": "2018-06-05T14:27:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NTk2Mzg4Nw==", "fields": {"body": "Gitmate testing ... ;-)", "diff": null, "created_at": "2018-06-09T12:01:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NTkyODY0Mg==", "fields": {"body": "coala/coala-bears#2525 is the same change for bears repo.", "diff": null, "created_at": "2018-06-09T01:11:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NjAwODAzNg==", "fields": {"body": "This obviously should not be merged until the things in this document have been merged, like --debug-bears.", "diff": null, "created_at": "2018-06-10T00:08:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NjY5ODM4Mg==", "fields": {"body": "@meetmangukiya I can't work on this right now. Can you unassign me on this and close the PR? @nvzard can use this code in his PR.", "diff": null, "created_at": "2018-06-12T19:01:11Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5Njg3MzQyNQ==", "fields": {"body": "Please do not change the default in this PR.\nThat is a separate issue, and that issue requires discussion.", "diff": null, "created_at": "2018-06-13T09:23:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NzUxNzU5OA==", "fields": {"body": "@gautam1858 Pls, read the  commit guidelines carefully. Your shortlog, and your commit message do not correspond to the format specified.\nChecklist specifically tells you to go through the commit guidelines, but you seem to have skipped that part altogether.\nYou're commit message should be something like this:\nReview.rst: Typo Github->GitHub\nCloses #5512\nThis format makes sure, that the issue is closed automatically when the pull request is merged. Filename is important because when you see your repository, it displays you're last commit in that directory, and it's much easier to know where the change was made when the filename is specified in the commit shortlog.\nPlease update your PR, and DO NOT FORGET TO SQUASH YOU'RE COMMITS into one. If you have trouble squashing commits, let me know.", "diff": null, "created_at": "2018-06-15T05:28:20Z", "last_edited_at": "2018-06-15T05:29:05Z", "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NzY2MjM5Nw==", "fields": {"body": "There should be a new line between the shortlog and body and that between the body and issue reference , right ?\n@sangamcse", "diff": null, "created_at": "2018-06-15T15:45:35Z", "last_edited_at": "2018-06-15T15:55:05Z", "author": "SubbulakshmiRS", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5Nzg0OTEzMg==", "fields": {"body": "max_file_length defines a rule for a hard physical line count maximum.\nThe LineCountBear would implement this taste by detecting files which exceed it, and producing an error.  That bear is a detection bear, not a fixing/suggestion bear.\nWe do not have any bear which attempts to fix files which exceed a maximum line count.  That would be difficult.\nWe do not have any bear which attempts to fix files which have insufficient line count.  However this is more feasible to implement.  We could have a bear which automatically fixed a minimum line count for Python, by automatically adding a dummy docstring.  It would also be possible to fix it for any scripting language by adding a 'hashbang', but that would be dumb as the otherwise empty file probably isn't runnable.", "diff": null, "created_at": "2018-06-17T01:52:16Z", "last_edited_at": "2018-06-17T01:52:51Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODA0Mjc4Nw==", "fields": {"body": "We have another bug which you have uncovered.\nI'll get that fixed.\n#5541", "diff": null, "created_at": "2018-06-18T12:49:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODcwOTYxNg==", "fields": {"body": ",one disadvantage it that pytest-pofiling display only first 20 profiled data on the basis of cumulative time\n\nsofixit", "diff": null, "created_at": "2018-06-20T10:58:16Z", "last_edited_at": "2018-06-20T10:59:25Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ==", "fields": {"body": "Any opinion on if we should should have a wrapped link - If you believe someone is violating the code of conduct <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>__ to maintain line length?", "diff": null, "created_at": "2018-06-21T07:12:04Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE0NTQxOA==", "fields": {"body": "Hiya @shikharvaish28, thanks for reviewing.\nWe now have a template for creating the .gitignore, at https://gitlab.com/coala/mobans/blob/master/templates/gitignore.jj2 .\nIt pulls in a bunch of rules from https://github.com/github/gitignore .\nThe same template is being used on all of our repos, so that they are always in sync, and being updated whenever new rules are added to https://github.com/github/gitignore .\nThis also means that individual additions in each repo are no longer desirable; instead an addition needs to be proposed at https://github.com/github/gitignore , where they will be reviewed carefully and will benefit more people; when accepted, the change will flow through to our repos.", "diff": null, "created_at": "2018-06-21T15:31:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE0ODgxNQ==", "fields": {"body": "This PR has a duplicate here #5528\nAlso this work wasn't assigned to @hemanthsavasere  see the issue link #5512\nSomeone has already asked for assignment unlike the other two newcomers. @jayvdb maybe we should assign this to this newcomer #5512 (comment) and close the two PRs since they didn't ask for assignement", "diff": null, "created_at": "2018-06-21T15:41:31Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE2NTc0NA==", "fields": {"body": "IGitt is doing its work as it is supposed to but it is making a second trial request because the token is invalid. This portion is handled by backoff https://pypi.org/project/backoff/ which makes the request function retry until some condition is met.", "diff": null, "created_at": "2018-06-21T16:32:37Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE3MjQzNg==", "fields": {"body": "@nvzard , IGitt is causing this failure.  If you cant disable the 'feature' of IGitt causing this failure, then that is a problem in IGitt.  And please remove 'fix' from this commit message.  It hasnt fixed anything.  It has only obscured the problem, and it will bite us again another day.  This is a workaround at best. :P  A very useful workaround to get the builds working again, but we still need a solution to the problem.", "diff": null, "created_at": "2018-06-21T16:55:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg==", "fields": {"body": "See follow up notice at #2539 (comment)\nThe objective of this issue / PR is to move the apt installs to travis' managed list.", "diff": null, "created_at": "2018-06-22T05:55:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTYyOTU0NQ==", "fields": {"body": "Hey! I think your code is quite satisfying but your commit message is incorrect based on the community commit guidelines. So I suggest you to please change your commit message.\nYou can refer to http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html for correcting your commit. Also use Fixes/Fix instead of closes because you are dealing with a bug issue.", "diff": null, "created_at": "2018-06-23T04:19:42Z", "last_edited_at": null, "author": "chhabrabhishek", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTczMTEzOQ==", "fields": {"body": "@kriti21\nIf nothing else, then the first point that I'd question is why does the assertion in GitCommitBear get a 'HEAD commit information'\nwhile you are checking for the CommitResult Object in the VCSCommitBearTests\nI know that you are using the same function of self.run_uut which was meant to only return messages,\nBut checking if the hidden result was generated or not is of no use in the GitCommitBear, either don't check it at all, (using some approach as described in my previous comment) or check the whole commit object like what would be done in the VCSCommitResult (both of them should be done imo, i.e don't check for the hidden results in the existing tests, so they won't change, and make another class to check for the hidden results)\nAs for the main logic, I'd recommended previously as well to have a look over generators,\nThe for loop that I had written as an example was simply to illustrate the point why the tests weren't being executed, I expected you to read up a little more on that and use the appropriate things\nWhat would be apt would be using a yield from IMO\nI hope I haven't got things wrong here and am clearer now \ud83d\ude05", "diff": null, "created_at": "2018-06-24T05:39:53Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTM5MDU0OQ==", "fields": {"body": "Even the Quotesbear patch is different... some of them are double and some of them are single. It seems like QuoteBear is still buggy, do you want me to revert 51d79e4 ? @Udayan12167 ? This is invalid, please ignore", "diff": null, "created_at": "2017-06-01T05:09:52Z", "last_edited_at": "2017-06-02T09:27:52Z", "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwOTgxMDM2Nw==", "fields": {"body": "@meetmangukiya Can you squash the commit? I think you don't need 3 of them just for a single feature added. Also, please add the git library to the requirements so it'll be installed.", "diff": null, "created_at": "2017-06-20T16:15:32Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ==", "fields": {"body": "Thank you so much.. this is my first ever PR accepted in an opensource project. hooray!! \ud83d\ude03", "diff": null, "created_at": "2017-07-05T13:20:36Z", "last_edited_at": null, "author": "raghavmittal101", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzI4NDM2Ng==", "fields": {"body": "@IpshitaC updated :)", "diff": null, "created_at": "2017-07-06T03:17:31Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNDY2NDgzNg==", "fields": {"body": "Added -> Add.\nAlso, changing PR title is not equivalent to changing commit messages", "diff": null, "created_at": "2017-07-12T06:13:25Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDQ2MzYxMw==", "fields": {"body": "@vaibhavgarg11 this is just getting worse, I think it'd be better to create a new PR from a new branch branched off master. ;)", "diff": null, "created_at": "2017-08-05T18:56:03Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg==", "fields": {"body": "Hello,\nIt looks like your commit doesn't follow our guidelines. Please take a look at https://coala.io/commit for the commit guidelines.\nI suggest using your current PR title as the commit shortlog and describe what you did on the commit description. Don't forget to mention the issue on the bottom with Fixes!\nThanks!", "diff": null, "created_at": "2017-08-10T02:53:12Z", "last_edited_at": "2017-08-10T02:53:32Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ==", "fields": {"body": "Yeah definitely :) yukiisbored already provided you the link where you can read commit guidelines, Let us know if you need any help :)", "diff": null, "created_at": "2017-08-10T16:01:49Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw==", "fields": {"body": "One thing, you don't have to create a new PR or branch to fix stuff/rewriting history. Just do it on the same branch and do a force push.", "diff": null, "created_at": "2017-08-11T23:43:03Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMzMxODIwOQ==", "fields": {"body": "@userzimmermann Yeah its an angular plugin https://github.com/btford/angular-markdown-directive to convert the markdown to html. Its being used at https://github.com/coala/landing-frontend/blob/master/partials/tabs/languages.html#L79 as well.\n@sils I was trying to follow this https://www.uplabs.com/posts/profile-card-albert-einstein for bio and name, but <p> looks better. fixed it", "diff": null, "created_at": "2017-08-18T10:24:11Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ2NTI0OA==", "fields": {"body": "@prnvdixit I thought of that issue as being always open, as we can never have enough of them (squirrels). \ud83d\ude1b So this PR shouldn't actually close the issue IMO.", "diff": null, "created_at": "2017-10-18T05:36:08Z", "last_edited_at": "2017-10-18T05:38:25Z", "author": "swapagarwal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjI3MA==", "fields": {"body": "@prnvdixit Well, I'd prefer suggesting these to the assignee as that is the official way to contribute. \ud83d\ude04", "diff": null, "created_at": "2017-10-18T06:23:54Z", "last_edited_at": null, "author": "swapagarwal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjUyMA==", "fields": {"body": "@prashant0598 Some suggestions can be found at #301 \ud83d\ude04", "diff": null, "created_at": "2017-10-18T06:25:15Z", "last_edited_at": null, "author": "swapagarwal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ3Nzc5Mw==", "fields": {"body": "@prashant0598 Actually, you have to mention it in commit in the PR \ud83d\ude09", "diff": null, "created_at": "2017-10-18T06:55:26Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ5MDUyNg==", "fields": {"body": "@prashant0598 fix gitmate issues and change the commit message to something similar to ship_it: Add squirrel images . For more, read commit guidelines http://coala.io/commit", "diff": null, "created_at": "2017-10-18T07:52:08Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODMyMzk4MQ==", "fields": {"body": "@prnvdixit Thanks for helping a newbie \ud83d\udc4d", "diff": null, "created_at": "2017-10-20T21:15:17Z", "last_edited_at": null, "author": "cornu-ammonis", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODg5NTQwNw==", "fields": {"body": "Yeah, there are errors \ud83d\ude09- Please fix them using coala \ud83d\ude04. For knowing more about how to apply patches using coala refer this \ud83d\udc4d", "diff": null, "created_at": "2017-10-24T07:09:48Z", "last_edited_at": "2017-10-24T07:09:58Z", "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTAxNDI5NQ==", "fields": {"body": "@prashant0598 Fix the issues as said by @prnvdixit and squash your commits into a single message.", "diff": null, "created_at": "2017-10-24T14:42:57Z", "last_edited_at": null, "author": "kartikeys98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMTAwNzI3OA==", "fields": {"body": "That was a transient error - a timeout in installation.", "diff": null, "created_at": "2018-06-28T11:44:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMTUzNDgzNg==", "fields": {"body": "@kriti21 this is a basic language file. Amendments for that can be made later on. Moreover, this file is not of any use as for now. Creating this language file was necessary for me to see the possibilities of defining tastes for the Quotation aspect.", "diff": null, "created_at": "2018-06-30T11:22:14Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzA3MzQ5MQ==", "fields": {"body": "Actually, have you seen this? --> https://pypi.org/project/cached-property/\n\nI have seen something similar but not this package \ud83d\ude06 . But if I had just copy pasted this I wouldn't get to learn so much about the dunder functions, so I'm glad I missed this.", "diff": null, "created_at": "2018-07-06T15:51:51Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzIwODY4OQ==", "fields": {"body": "Go through the newcomer guide http://coala.io/newcomer first. It will help you to write good commit messages.", "diff": null, "created_at": "2018-07-07T11:23:13Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzIwOTMyNg==", "fields": {"body": "@igagankalra, you need to adjust your commit message to follow https://coala.io/commit\nDont worry about the moban sync problem.  Someone else will fix that, or we'll show you how to fix that, once your commit is OK.", "diff": null, "created_at": "2018-07-07T11:36:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNDAwMTU5Nw==", "fields": {"body": "@refeed, different floating number implementations.\nJust using an if to get your build green.", "diff": null, "created_at": "2018-07-10T23:54:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw==", "fields": {"body": "Ugh.  Repeat of #5633 .  @JoeSiew , do not ever delete your fork.\nFollow our newcomers guide carefully https://github.com/coala/coala/blob/master/docs/Developers/Newcomers_Guide.rst", "diff": null, "created_at": "2018-07-19T04:27:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjg0NzU0Ng==", "fields": {"body": "You can also find out squashing guide at https://api.coala.io/en/latest/Developers/Git_Basics.html#rebasing.", "diff": null, "created_at": "2018-07-22T07:39:53Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjgxMTM5Mw==", "fields": {"body": "The PR won't be merged until you fix what has been suggested. And every PR should pass all test case.\n\nDo not close this PR\nDo not delete this branch\nDo not create new commits.\n\nMake changes in the same commit and use git commit --amend  to that.", "diff": null, "created_at": "2018-07-21T17:28:32Z", "last_edited_at": "2018-07-21T17:28:53Z", "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODA5NzgyMw==", "fields": {"body": "I am getting a lot of failed builds with this PR and #85 ; not sure what is the problem.\n\nI checked the log. Those fail builds are due to the error element (\".modal-dialog button.close\") still not existing after 60000ms\nI am also facing this issue recently. The reason could be, syncing issues takes too much time, or the page isn't correctly loaded due to some unknown reason.\nI wonder if we should abandon the current integration test, which is instable and hard to report coverage, and start building unittests.", "diff": null, "created_at": "2018-07-26T13:29:58Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA==", "fields": {"body": "@MacBox7 will do it by today", "diff": null, "created_at": "2018-07-29T05:35:51Z", "last_edited_at": null, "author": "HemabhKamboj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY2MjgwNQ==", "fields": {"body": "Someone forgot to rebase ! :P", "diff": null, "created_at": "2018-07-29T09:07:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY3NTIxMg==", "fields": {"body": "Some general thoughts:\nI believe .babelrc stuff can be put into package.json .. I prefer that, but what about other ppl?\ncodecov.yml is currently doing nothing, so isnt necessary.  Data can be sent to codecov without it, and the percentage will slowly rise.  until it gets to a decent percentage, tracking that isnt useful.\ntravis after_success/after_failure needs to be deactivated for the moban job.\njest.config.js - I am not a fan of checking in a large config file of comments about possible settings.  We know whether to find the docs if we want more settings.", "diff": null, "created_at": "2018-07-29T12:40:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY5MTkwNA==", "fields": {"body": "@jayvdb I would prefer .babelrc than package.json", "diff": null, "created_at": "2018-07-29T17:15:56Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODgyMDU2Nw==", "fields": {"body": "It got stuck again, at\n$ coala --non-interactive\n[WARNING][10:30:45] Section `all.todos` contain invalid language setting: 'Language `python3` is not a valid language name or not recognized by coala.'\nExecuting section all...\n\nIm pretty sure we know why and have a fix coming for that.", "diff": null, "created_at": "2018-07-30T10:34:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODkxNTY5Nw==", "fields": {"body": "A filter to hide the users own actions/content is a general setting which would apply to most 'detail' components.  Issues and PRs and Review comments, etc.  The only exception is when a users PR passes, but generally the user has other notifications for that event anyway.\nThe user doesnt need another notification for their own actions.  It should be not shown by default , but the user can enable it of course.\nAnyways, I can see how it isnt relevant to this PR. And after we can use gh-board interactively maybe I will have a different perspective on this.", "diff": null, "created_at": "2018-07-30T15:59:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODkyNDA0OQ==", "fields": {"body": "This is blocked - please stop pushing.", "diff": null, "created_at": "2018-07-30T16:23:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDEwOTMzMQ==", "fields": {"body": "@RaiVaibhav , you might need the Windows trick that is being used at https://github.com/coala/coala-bears/pull/2523/files#diff-c3fb76c94bc425a8cdc7577d5d0e3e31R60", "diff": null, "created_at": "2018-08-03T00:40:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDEzNjE3Ng==", "fields": {"body": "shutil.rmtree will throw NotADirectoryError as I am checking for the file :)", "diff": null, "created_at": "2018-08-03T03:46:42Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDEzNjQwMA==", "fields": {"body": "I findout the reason of previous problem here  https://www.logilab.org/blogentry/17873\nSo instead of hardcoding I used NamedTemporaryFile + with so solve the problem.", "diff": null, "created_at": "2018-08-03T03:48:34Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDQ5MTA2NA==", "fields": {"body": "I would like to see separate commits included in this PR for all of the configuration upgrades which we need (except for LabHub):\n\n#380\n#381\n#383\n\nAny others?\nOnly by putting them all in here together can we ensure that this is the last change needed to DefaultConfigMixin for your project.", "diff": null, "created_at": "2018-08-05T02:32:26Z", "last_edited_at": "2018-08-05T02:33:44Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDUyMTc0NQ==", "fields": {"body": "__new__ & __init__ combined are the implementation of the contructor.  You can read about it at https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming) , especially https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)#Python\nFoo() is never a constructor.  It is invoking a constructor.  It is rarely, and always incorrectly, called the constructor.  It should be called instantiation.", "diff": null, "created_at": "2018-08-05T13:53:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDYxNjY3NQ==", "fields": {"body": "As #565 is still open, I guess this could be Closes ... ?", "diff": null, "created_at": "2018-08-06T07:40:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMTc3MjMxMw==", "fields": {"body": "Source map demo: https://5b6c47e2b13fb1499142899d--coala-gh-board.netlify.com/ (open devtools, check console and sources tab)\nNot as nice as I would've hoped, but it's functional and debug breakpoints are working.", "diff": null, "created_at": "2018-08-09T14:13:35Z", "last_edited_at": "2018-08-09T14:57:13Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzA0MzM5Nw==", "fields": {"body": "I'll write tests, but waiting for @Makman2 's thoughts first.", "diff": null, "created_at": "2018-08-14T23:03:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzEzMTE2OA==", "fields": {"body": "Would you consider doing this in stages? First let us transition this into tuple based structures and then worry about introducing dicts (OrderedDicts) or class based filters.", "diff": null, "created_at": "2018-08-15T08:34:15Z", "last_edited_at": "2018-08-15T08:34:35Z", "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzc3NDg0Ng==", "fields": {"body": "What about moving the text outside of the icon? that's usually the way its done.", "diff": null, "created_at": "2018-08-17T06:52:18Z", "last_edited_at": "2018-08-17T06:52:28Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzk5OTEwOQ==", "fields": {"body": "Not sure why appveyor is failing though. I also don't see a rebuild button on appveyor is there no way to re run appveyor jobs except for a force push?\n\nOnly admins have access to rebuild button. Go for force push.", "diff": null, "created_at": "2018-08-17T22:02:08Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNDAxMjMxMA==", "fields": {"body": "Any time you see timeout is the log , assume it is our intermittent timeout problem, which is complicated by #5674 .  On AppVeyor, force push is all you can do until we get corobo back online and implement job restart commands in corobo.  But dont feel like you have to keep force pushing to get it green - if travis or circle pass, a note that appveyor timeouted is enough for us to keep the PR in the review queue even if appveyor is red.", "diff": null, "created_at": "2018-08-17T23:31:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNTk0OTEyMw==", "fields": {"body": "Hi @Dhiraj240, thanks for the PR! Check out this link to learn more about proper commit format (improper commit format will cause the builds to fail). Also, make sure to squash your commits into one!", "diff": null, "created_at": "2018-08-25T07:33:32Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNzg1ODA0Ng==", "fields": {"body": "Ha, I was just going to explain the build failure ... and recommend exactly what you did as the solution. awesome", "diff": null, "created_at": "2018-09-01T12:58:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzMjQxMg==", "fields": {"body": "You mean roomname_match, right?", "diff": "@@ -242,14 +242,63 @@ def mark_cmd(self, msg, match):\n                             bot_prefix=self.bot_config.BOT_PREFIX)\n                         )\n \n-    @re_botcmd(pattern=r'^assign\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear\n-               re_cmd_name_help='assign <complete-issue-URL>',\n-               flags=re.IGNORECASE)\n-    def assign_cmd(self, msg, match):\n+    @arg_botcmd('issue_reference', type=str)\n+    def assign(self, msg, issue_reference):\n         \"\"\"Assign to GitLab and GitHub issues.\"\"\"  # Ignore QuotesBear\n-        org = match.group(2)\n-        repo_name = match.group(3)[:-1]\n-        iss_number = match.group(4)\n+\n+        # Complete URL to issue\n+        def process_full_url(issue_reference):\n+            rgx = r'https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(2), m.group(3)[:-1], m.group(4)\n+\n+        # Short issue reference (e.g. `coala/corobo#12`)\n+        def process_short_ref(issue_reference):\n+            rgx = r'(.+?)/(.+?)#(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(1), m.group(2), m.group(3)\n+\n+        # Super short issue reference (e.g. `#1234`)\n+        def process_super_short_ref(issue_reference):\n+            issue_rgx = r'#(\\d+)'\n+            issue_reference_match = re.fullmatch(issue_rgx, issue_reference)\n+\n+            if issue_reference_match is None:\n+                return None\n+\n+            roomname_rgx = r'(.+?)/(.+)'\n+            roomname_match = re.fullmatch(\n+                roomname_rgx, msg.frm.room.idd, re.IGNORECASE)\n+\n+            if roommatch is None:", "created_at": "2017-10-03T15:15:34Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzNDEyMw==", "fields": {"body": "msg.frm.room.uri instead of msg.frm.room.idd", "diff": "@@ -242,14 +242,63 @@ def mark_cmd(self, msg, match):\n                             bot_prefix=self.bot_config.BOT_PREFIX)\n                         )\n \n-    @re_botcmd(pattern=r'^assign\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear\n-               re_cmd_name_help='assign <complete-issue-URL>',\n-               flags=re.IGNORECASE)\n-    def assign_cmd(self, msg, match):\n+    @arg_botcmd('issue_reference', type=str)\n+    def assign(self, msg, issue_reference):\n         \"\"\"Assign to GitLab and GitHub issues.\"\"\"  # Ignore QuotesBear\n-        org = match.group(2)\n-        repo_name = match.group(3)[:-1]\n-        iss_number = match.group(4)\n+\n+        # Complete URL to issue\n+        def process_full_url(issue_reference):\n+            rgx = r'https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(2), m.group(3)[:-1], m.group(4)\n+\n+        # Short issue reference (e.g. `coala/corobo#12`)\n+        def process_short_ref(issue_reference):\n+            rgx = r'(.+?)/(.+?)#(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(1), m.group(2), m.group(3)\n+\n+        # Super short issue reference (e.g. `#1234`)\n+        def process_super_short_ref(issue_reference):\n+            issue_rgx = r'#(\\d+)'\n+            issue_reference_match = re.fullmatch(issue_rgx, issue_reference)\n+\n+            if issue_reference_match is None:\n+                return None\n+\n+            roomname_rgx = r'(.+?)/(.+)'\n+            roomname_match = re.fullmatch(\n+                roomname_rgx, msg.frm.room.idd, re.IGNORECASE)", "created_at": "2017-10-03T15:21:22Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjMzNTU5Nw==", "fields": {"body": "@Makman2 yes docker compresses data. The actual amount of data that\u2019s pushed will be compressed before sending,", "diff": "@@ -1,3 +1,44 @@\n+What is Docker ?\n+================\n+\n+Docker is a tool designed to make it easier to create, deploy, and run\n+applications by using containers. Containers allow a developer to package\n+up an application with all of the parts it needs, like libraries and other\n+dependencies, and ship it all out as a single package.\n+\n+With the help of containers, the developer can rest assured that\n+the application will run on other machine regardless of any\n+customized settings that machine might have that could differ from the\n+machine used for writing and testing the code.\n+\n+Unlike a virtual machine, rather than creating a whole virtual operating\n+system, Docker allows applications to use the same kernel as the system\n+that they're running on and only requires applications be shipped\n+with things not already running on the host computer. This gives a\n+significant performance boost and reduces the size of the application.", "created_at": "2017-10-23T17:20:42Z", "last_edited_at": null, "author": "acashmkj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ==", "fields": {"body": "Please make it to  https://coala.io instead https://coala.io/", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T12:19:56Z", "last_edited_at": "2017-11-03T14:42:32Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg==", "fields": {"body": "That is irrelevant", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T13:58:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA==", "fields": {"body": "This can be a bit misleading. I suggest you, write it in the form minified files (*.min.js) and backup files (*.orig).", "diff": "@@ -39,6 +39,15 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n+It can be used to define the type of files you usually\n+don't want to lint like minified files\n+and backup files (e.g. ``*.min.js``, ``*.orig``)", "created_at": "2017-11-03T14:36:02Z", "last_edited_at": "2017-11-03T14:41:58Z", "author": "troublemagnet", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkyODgyOA==", "fields": {"body": "What is 288 ?", "diff": "@@ -31,6 +31,13 @@ app.directive('getinvolved', ['$http', function ($http) {\n             $scope.loadMore = function () {\n                 $scope.totalDisplayed += 20;\n             };\n+\n+            $scope.nomoreItems = function () {\n+                if($scope.totalDisplayed > 288 ) {", "created_at": "2017-11-04T12:04:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA==", "fields": {"body": "Hmm that reads bad as a first sentence. Rather I would make some kind of citation at the end^^\nAlso:\n\nThe layout needs to be very clear that it is an unmodified copy only, and no editing of the text is desirable.\n\nNot sure that this intention gets to the reader here^^", "diff": "@@ -1,6 +1,8 @@\n What is Docker?\n ===============\n \n+According to `opensource.com <https://opensource.com/resources/what-docker>`__:", "created_at": "2017-11-15T17:21:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzIyODU2Mg==", "fields": {"body": "Add coala/corobo room also", "diff": "@@ -49,4 +49,6 @@\n \n CHATROOM_PRESENCE = os.environ.get('ROOMS', '').split() or ROOMS_TO_JOIN\n \n+ACCESS_CONTROLS = {'render test': {'allowrooms': ('coala/cobot-test',)}, }\n+", "created_at": "2017-11-27T15:28:58Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzcwMzcxNg==", "fields": {"body": "Tests and spaces are good, but you are increasing two captured groups. Make them uncaptured groups", "diff": "@@ -196,7 +196,7 @@ def unassign_cmd(self, msg, match):\n             else:\n                 return 'You are not an assignee on the issue.'\n \n-    @re_botcmd(pattern=r'mark\\s+(wip|pending)\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+)/(pull|merge_requests)/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear\n+    @re_botcmd(pattern=r'mark\\s+(wip|(?:(pending([-\\s]+review)?)))\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+)/(pull|merge_requests)/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear", "created_at": "2017-11-29T06:43:36Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzcxMDQ4Nw==", "fields": {"body": "And so you dont think I am crazy ..\nThere are lots of reasons why the username may not exist.  I suspect that this isnt very likely to occur when an MR is first created, but we have people vanish after they create their MR.  GitHub now has a @ghost account which it substitutes in, but I dont know what GitLab and other services respond to these odd scenarios (corobo will also support BitBucket and other services soon also).", "diff": "@@ -225,9 +231,11 @@ def mark_cmd(self, msg, match):\n                 return ('The pull request {mr_link} is marked *work in progress'\n                         '*. Use `{bot_prefix} mark pending` or push to your '\n                         'branch if feedback from the community is needed '\n-                        'again.'.format(\n+                        'again.\\n@{user_login}, please check your pull '\n+                        'request.'.format(\n                             mr_link=mr.url,\n-                            bot_prefix=self.bot_config.BOT_PREFIX)\n+                            bot_prefix=self.bot_config.BOT_PREFIX,\n+                            user_login=login)", "created_at": "2017-11-29T07:36:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQxOTg3MQ==", "fields": {"body": "I don't think a smiley face emoji is a good option here. This is a list of emojis that will be randomly used down on line 30, and a smiley doesn't fit the pattern.", "diff": "@@ -9,10 +9,20 @@ class Coala_lowercase_c(BotPlugin):\n \n     def callback_message(self, msg):\n         emots = [':(', ':angry:', ':confounded:',\n-                 ':disappointed:', ':triumph:']\n+                 ':disappointed:', ':triumph:' , ':D']", "created_at": "2017-12-01T18:52:53Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQyOTQ5MA==", "fields": {"body": "delete to", "diff": "@@ -82,7 +82,19 @@ class Explain(BotPlugin):\n                      'newcomer Pull Request\\n- review at least a difficulty/'\n                      'newcomer Pull Request\\n- merge a difficulty/low Pull '\n                      'Request\\n- review at least a difficulty/low or higher '\n-                     'Pull Request'\n+                     'Pull Request',\n+        'do not ask to ask': 'This seems a lazy way of asking your question '\n+                             'Don\\'t take it personally. It\\'s just that '\n+                             'you\\'re asking for more than what you think '\n+                             'you\\'re asking. The solution is not to simply '\n+                             'question people about them, but just to '\n+                             'ask for your piece of information by actaully '\n+                             'formalizing it in words. Someone who is idling '\n+                             'on the channel and only occasionally glances '\n+                             'at what\\'s going on is unlikely to answer '\n+                             'to your \"asking to ask\" question, but your '", "created_at": "2017-12-01T19:33:08Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg1MDEwMw==", "fields": {"body": "you can pass in username here, and it can be None, and use jinja's if syntax.\nBugger it, pass in username to them all, as we have another issue about personalising these messages, so if the username is available, that task becomes a jinja-markdown-only task, so newcomer level.", "diff": "@@ -1,103 +1,40 @@\n import re\n+import glob\n+import os.path\n \n from errbot import BotPlugin, re_botcmd\n+from errbot.templating import tenv\n \n \n class Explain(BotPlugin):\n     \"\"\"\n     Explain various terms\n     \"\"\"\n \n-    MSGS = {\n-        'review': 'After creating your `Pull Request`, it is under the review '\n-                  'process. This can be deduced from the `process/pending '\n-                  'review` label. Now you have to wait for the reviewers to '\n-                  'review your PR. You should *not* ask for reviews on our '\n-                  'Gitter channel - we review those PRs continuously.\\n\\n'\n-                  'We\\'re usually swamped with reviews, while you are waiting '\n-                  '**please review other people\\'s PRs** at [coala.io/review]'\n-                  '(https://coala.io/review): that helps you and will make '\n-                  'your review happen faster as well. As a rule of thumb, '\n-                  '*for every review you receive, give at least one review '\n-                  'to someone else!*\\n\\nFor a good review, look at every '\n-                  'commit on its own and place `ack <sha>`(commit is ready) or '\n-                  '`unack <sha>(commit needs work) needs work` comments on the '\n-                  'pull request, be sure to remove other spacing like tabs. If '\n-                  'you\\'re done with a pull request, you can use '\n-                  '`{bot_prefix} mark wip <pull URL>` to mark it *work in '\n-                  'progress* finally.',\n-        'closes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                  'keyword in commit messages. To get good results from that '\n-                  'we need to use `Closes` for normal issues instead of `Fixes`'\n-                  ' which should only be used for real bugs. (See also [the '\n-                  'commit message docs](https://coala.io/commit).) To change '\n-                  'your message you just use `git commit --amend` and then '\n-                  '`git push --force` the new commit to replace the old one.',\n-        'fixes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                 'keyword in commit messages. To get good results from that '\n-                 'we need to use `Fixes` for bugfix issues instead of '\n-                 '`Closes`. (See also [the commit message docs]'\n-                 '(https://coala.io/commit).) To change your message you '\n-                 'just use `git commit --amend` and then `git push --force` '\n-                 'the new commit to replace the old one.',\n-        'commit message': 'To change your message you just use `git commit '\n-                          '--amend` and then `git push --force` the new '\n-                          'commit to replace the old one.\\n\\nIf you\\'re just '\n-                          'looking to fix an issue very quickly and not '\n-                          'interested in contributing to coala long term, we '\n-                          'can fix up the message for you - just tell us :).',\n-        'rebase': 'It looks like your PR is out of date and needs a rebase.'\n-                  '\\n\\n[This page](https://coala.io/rebase) may help you to get'\n-                  ' started on this. We also have [a quick video tutorial on '\n-                  'how to rebase](https://asciinema.org/a/78683). That should '\n-                  'help you understand the basics of how it works and what you'\n-                  'should be doing.\\n\\nIf you\\'re just looking to fix an issue '\n-                  'very quickly and not interested in contributing to coala '\n-                  'long term, we can fix it up for you - just tell us :).',\n-        'cep': 'At coala we\\'re using [cEP\\'s (coala Enhancement Proposals)]'\n-               '(http://coala.io/cep) to define major design decisions - '\n-               'they\\'re a bit like PEP\\'s but not quite as extensive and '\n-               'obviously written with a lower case c.',\n-        'gitlab': 'We are currently evaluating on if we want to use GitLab for'\n-                  'code hosting. That\\'s why some repositories are already on '\n-                  'GitLab, if you want to participate in the migration '\n-                  'discussion, please add information [at our GitLab wiki page]'\n-                  '(https://github.com/coala/coala/wiki/GitLab).',\n-        'google': 'Hey. This message was triggered because someone was too '\n-                  'lazy to type this *again*. Don\\'t take it personally. '\n-                  'Please.\\n\\nWe all got to learn this: *use google*. Or '\n-                  'duckduckgo. Anything. The search engine that earned your '\n-                  'trust. You got a build error? Search for the first red '\n-                  'thing and google it. You got an exception? *Read the '\n-                  'message.* Search it. *Think.*\\n\\nKeep this in mind: *You*'\n-                  'are sitting in front of the problem, not us. You will have '\n-                  'a much easier time solving it. That\\'s why you should try '\n-                  'doing it first.',\n-        'promotion': 'To become part of the coala developers team, there '\n-                     'are a few steps you need to complete. The newcomer '\n-                     'process is as follows:\\nYou will start as a newcomer, '\n-                     'which is kind of a trial. If you complete the following '\n-                     'tasks, you will become a developer at coala:\\n\\n- run '\n-                     'coala on a project of yours\\n- merge a difficulty/'\n-                     'newcomer Pull Request\\n- review at least a difficulty/'\n-                     'newcomer Pull Request\\n- merge a difficulty/low Pull '\n-                     'Request\\n- review at least a difficulty/low or higher '\n-                     'Pull Request'\n-    }\n+    files = glob.glob('plugins/templates/explanations/*.jinja2.md')\n+    KNOWN_KEYS = []\n+    for fname in files:\n+        KNOWN_KEYS.append(fname.replace(\n+            'plugins/templates/explanations/', ''\n+        ).replace('.jinja2.md', ''))\n \n     ERROR_MSG = (\n         'Sorry, I only know about these things:\\n- ' +\n-        '\\n- '.join(MSGS.keys())\n+        '\\n- '.join(KNOWN_KEYS)\n     )\n \n     @re_botcmd(pattern=r'^explain\\s+(\\w+)(?:\\s+to\\s+@?([\\w-]+))?$',\n                re_cmd_name_help='explain <term>',\n                flags=re.IGNORECASE)\n     def explain(self, msg, match):\n         \"\"\"Explain various terms.\"\"\"  # Ignore QuotesBear\n-        return ('{}'.format('@{}: \\n'.format(match.group(2))\n-                            if match.group(2) else '') +\n-                self.MSGS.get(\n-                    match.group(1).lower(),\n-                    self.ERROR_MSG\n-                ).format(bot_prefix=self.bot_config.BOT_PREFIX))\n+        response = ''\n+        filename = 'explanations/{}.jinja2.md'.format(match.group(1).lower())\n+        if match.group(1).lower() in self.KNOWN_KEYS:\n+            if match.group(2):\n+                response += '@{}: \\n'.format(match.group(2))\n+            response += tenv().get_template(filename).render()", "created_at": "2017-12-05T05:28:42Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4Nzg3MA==", "fields": {"body": "@andrewda missing this in the final change, we want to replace bot_prefix in one of the strings", "diff": "@@ -1,103 +1,44 @@\n import re\n+import glob\n+import os.path\n \n from errbot import BotPlugin, re_botcmd\n+from errbot.templating import tenv\n \n \n class Explain(BotPlugin):\n     \"\"\"\n     Explain various terms\n     \"\"\"\n \n-    MSGS = {\n-        'review': 'After creating your `Pull Request`, it is under the review '\n-                  'process. This can be deduced from the `process/pending '\n-                  'review` label. Now you have to wait for the reviewers to '\n-                  'review your PR. You should *not* ask for reviews on our '\n-                  'Gitter channel - we review those PRs continuously.\\n\\n'\n-                  'We\\'re usually swamped with reviews, while you are waiting '\n-                  '**please review other people\\'s PRs** at [coala.io/review]'\n-                  '(https://coala.io/review): that helps you and will make '\n-                  'your review happen faster as well. As a rule of thumb, '\n-                  '*for every review you receive, give at least one review '\n-                  'to someone else!*\\n\\nFor a good review, look at every '\n-                  'commit on its own and place `ack <sha>`(commit is ready) or '\n-                  '`unack <sha>(commit needs work) needs work` comments on the '\n-                  'pull request, be sure to remove other spacing like tabs. If '\n-                  'you\\'re done with a pull request, you can use '\n-                  '`{bot_prefix} mark wip <pull URL>` to mark it *work in '\n-                  'progress* finally.',\n-        'closes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                  'keyword in commit messages. To get good results from that '\n-                  'we need to use `Closes` for normal issues instead of `Fixes`'\n-                  ' which should only be used for real bugs. (See also [the '\n-                  'commit message docs](https://coala.io/commit).) To change '\n-                  'your message you just use `git commit --amend` and then '\n-                  '`git push --force` the new commit to replace the old one.',\n-        'fixes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                 'keyword in commit messages. To get good results from that '\n-                 'we need to use `Fixes` for bugfix issues instead of '\n-                 '`Closes`. (See also [the commit message docs]'\n-                 '(https://coala.io/commit).) To change your message you '\n-                 'just use `git commit --amend` and then `git push --force` '\n-                 'the new commit to replace the old one.',\n-        'commit message': 'To change your message you just use `git commit '\n-                          '--amend` and then `git push --force` the new '\n-                          'commit to replace the old one.\\n\\nIf you\\'re just '\n-                          'looking to fix an issue very quickly and not '\n-                          'interested in contributing to coala long term, we '\n-                          'can fix up the message for you - just tell us :).',\n-        'rebase': 'It looks like your PR is out of date and needs a rebase.'\n-                  '\\n\\n[This page](https://coala.io/rebase) may help you to get'\n-                  ' started on this. We also have [a quick video tutorial on '\n-                  'how to rebase](https://asciinema.org/a/78683). That should '\n-                  'help you understand the basics of how it works and what you'\n-                  'should be doing.\\n\\nIf you\\'re just looking to fix an issue '\n-                  'very quickly and not interested in contributing to coala '\n-                  'long term, we can fix it up for you - just tell us :).',\n-        'cep': 'At coala we\\'re using [cEP\\'s (coala Enhancement Proposals)]'\n-               '(http://coala.io/cep) to define major design decisions - '\n-               'they\\'re a bit like PEP\\'s but not quite as extensive and '\n-               'obviously written with a lower case c.',\n-        'gitlab': 'We are currently evaluating on if we want to use GitLab for'\n-                  'code hosting. That\\'s why some repositories are already on '\n-                  'GitLab, if you want to participate in the migration '\n-                  'discussion, please add information [at our GitLab wiki page]'\n-                  '(https://github.com/coala/coala/wiki/GitLab).',\n-        'google': 'Hey. This message was triggered because someone was too '\n-                  'lazy to type this *again*. Don\\'t take it personally. '\n-                  'Please.\\n\\nWe all got to learn this: *use google*. Or '\n-                  'duckduckgo. Anything. The search engine that earned your '\n-                  'trust. You got a build error? Search for the first red '\n-                  'thing and google it. You got an exception? *Read the '\n-                  'message.* Search it. *Think.*\\n\\nKeep this in mind: *You*'\n-                  'are sitting in front of the problem, not us. You will have '\n-                  'a much easier time solving it. That\\'s why you should try '\n-                  'doing it first.',\n-        'promotion': 'To become part of the coala developers team, there '\n-                     'are a few steps you need to complete. The newcomer '\n-                     'process is as follows:\\nYou will start as a newcomer, '\n-                     'which is kind of a trial. If you complete the following '\n-                     'tasks, you will become a developer at coala:\\n\\n- run '\n-                     'coala on a project of yours\\n- merge a difficulty/'\n-                     'newcomer Pull Request\\n- review at least a difficulty/'\n-                     'newcomer Pull Request\\n- merge a difficulty/low Pull '\n-                     'Request\\n- review at least a difficulty/low or higher '\n-                     'Pull Request'\n-    }\n+    files = glob.glob('plugins/templates/explanations/*.jinja2.md')\n+    KNOWN_KEYS = []\n+    for fname in files:\n+        KNOWN_KEYS.append(fname.replace(\n+            'plugins/templates/explanations/', ''\n+        ).replace('.jinja2.md', ''))\n \n     ERROR_MSG = (\n         'Sorry, I only know about these things:\\n- ' +\n-        '\\n- '.join(MSGS.keys())\n+        '\\n- '.join(KNOWN_KEYS)\n     )\n \n     @re_botcmd(pattern=r'^explain\\s+(\\w+)(?:\\s+to\\s+@?([\\w-]+))?$',\n                re_cmd_name_help='explain <term>',\n                flags=re.IGNORECASE)\n     def explain(self, msg, match):\n         \"\"\"Explain various terms.\"\"\"  # Ignore QuotesBear\n-        return ('{}'.format('@{}: \\n'.format(match.group(2))\n-                            if match.group(2) else '') +\n-                self.MSGS.get(\n-                    match.group(1).lower(),\n-                    self.ERROR_MSG\n-                ).format(bot_prefix=self.bot_config.BOT_PREFIX))", "created_at": "2017-12-05T09:27:14Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4OTY3Mg==", "fields": {"body": "since you are following this everywhere else, append a , ;)", "diff": "@@ -333,13 +320,19 @@ def eligible(user, iss):\n                            'issue. :tada:')\n                 else:\n                     yield 'You are not eligible to be assigned to this issue.'\n-                    yield '\\n'.join(eligility_conditions)\n+                    yield tenv().get_template(\n+                        'errors/not-eligible.jinja2.md'\n+                    ).render(\n+                        organization=self.GH_ORG_NAME,\n+                    )\n             elif user in iss.assignees:\n                 yield ('The issue is already assigned to you.')\n             else:\n-                yield ('The issue is already assigned to someone. Please '\n-                       'check if the assignee is still working on the issue, '\n-                       'if not, you should ask for reassignment.')\n+                yield tenv().get_template(\n+                    'errors/already-assigned.jinja2.md'\n+                ).render(\n+                    username=user", "created_at": "2017-12-05T09:34:35Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg5MjE2NA==", "fields": {"body": "Discussion in gitter regarding this. It messes up the gitter formatting to limit lines to 80 characters.", "diff": "@@ -0,0 +1 @@\n+We use bug prediction in coala which relies on the `Fixes` keyword in commit messages. To get good results from that we need to use `Closes` for normal issues instead of `Fixes` which should only be used for real bugs. (See also [the commit message docs](https://coala.io/commit).) To change your message you just use `git commit --amend` and then `git push --force` the new commit to replace the old one.", "created_at": "2017-12-05T09:44:51Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw==", "fields": {"body": "base url is a constant that may be needed again in future enhancements.", "diff": "@@ -17,20 +17,78 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n-async function fetchOrgsWithLeaders() {\n+async function searchGitHubOrgs(query) {\n+  const token = process.env.GITHUB_TOKEN\n+  const res = await fetch(\n+    `https://api.github.com/search/users?q=${query}%20type:org`,", "created_at": "2017-12-05T16:05:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA==", "fields": {"body": "Remove one of the spaces after the equals sign.\nWe should get coala working ASAP", "diff": "@@ -1,6 +1,7 @@\n const fs = require('fs')\n const Mustache = require('mustache')\n const orgs = require('./out/data.json')\n+const timestamp =  new Date(fs.statSync('./out/data.json').mtime).getTime()", "created_at": "2017-12-05T17:38:31Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ==", "fields": {"body": "Weird, ok. I can look into that more in a while, but for now adding both seems fine \ud83d\udc4d", "diff": "@@ -1,8 +1,15 @@\n ---\n+env:\n+  node: true", "created_at": "2017-12-06T08:27:32Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw==", "fields": {"body": "eslint-config-prettier is for turning off eslint rules that conflict with prettier\nhttps://github.com/prettier/eslint-plugin-prettier should be used instead", "diff": "@@ -12,5 +12,9 @@\n   \"dependencies\": {\n     \"mustache\": \"^2.3.0\",\n     \"node-fetch\": \"^1.7.3\"\n+  },\n+  \"devDependencies\": {\n+    \"eslint\": \"^4.12.1\",\n+    \"eslint-config-prettier\": \"^2.9.0\"", "created_at": "2017-12-05T23:51:12Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA==", "fields": {"body": "you can add node_modules/.bin to PATH\nand set NODE_PATH (see our dockerfile)\nhttps://github.com/coala/docker-coala-base/blob/master/Dockerfile#L10\nhttps://github.com/coala/coala-atom/blob/master/circle.yml#L32", "diff": "@@ -1,7 +1,15 @@\n-sudo: false\n-language: node_js\n+sudo: required\n+language: python\n+python: 3.6\n+\n+before_install:\n+  - nvm install 8\n+  - npm install\n+  - npm install -g eslint prettier eslint-plugin-prettier", "created_at": "2017-12-06T01:58:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ==", "fields": {"body": "The <script> tag can be put on the bottom of the body, after app.js", "diff": "@@ -21,6 +21,13 @@ <h1>Google Code-in 2017 Current Leaders</h1>\n     <i>\n       The leading participants for each organization are listed randomly. \n     </i>\n+    <div class=\"twitter\">\n+      <a class=\"twitter-timeline\"  href=\"https://twitter.com/hashtag/googlecodein\"\n+         data-widget-id=\"938830025809432577\">Tweets about GCI\n+      </a>\n+      <script src=\"static/js/twitter.js\"></script>", "created_at": "2017-12-08T04:04:21Z", "last_edited_at": "2017-12-08T04:15:53Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA==", "fields": {"body": "Otherwise it would have so many digits, so maybe not readable?", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen)/(24*3600*1000)\n+const timeLeft = (noClaims-today)/(24*3600*1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100-(timeLeft/totalTime)*100)", "created_at": "2017-12-10T13:19:40Z", "last_edited_at": null, "author": "Grox-Ni", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw==", "fields": {"body": "I prefer this to be in the frontend, because we might not do build everyday.\nUse and modify timeDifference function inside static/js/app.js.", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen) / (24 * 3600 * 1000)\n+const timeLeft = (noClaims - today) / (24 * 3600 * 1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100 - timeLeft / totalTime * 100)", "created_at": "2017-12-10T13:26:14Z", "last_edited_at": "2017-12-10T13:31:14Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw==", "fields": {"body": "As this is invalid on a fork, I think these should be in Travis environment variables. (also COMMIT_*).", "diff": "@@ -1,6 +1,11 @@\n language: python\n python: 3.6\n \n+env:\n+  global:\n+    - ENCRYPTION_LABEL: \"b7c548322a41\"", "created_at": "2017-12-10T14:15:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA==", "fields": {"body": "In my version, the build is not in the deploy script.  The deploy script should take a built version, and overlay it on the previous built version.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN\n+    npm run build\n+    return\n+fi\n+\n+# Save some useful information\n+REPO=`git config remote.origin.url`\n+SSH_REPO=${REPO/https:\\/\\/github.com\\//git@github.com:}\n+SHA=`git rev-parse --verify HEAD`\n+\n+# Clone the existing gh-pages for this repo into out/\n+# Create a new empty branch if gh-pages doesn't exist yet (should only happen on first deploy)\n+rm -r out\n+git clone $REPO out\n+cd out\n+git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH\n+cd ..\n+\n+# Clean out existing contents\n+rm -rf out/*\n+\n+# Run our compile script\n+npm run build", "created_at": "2017-12-10T14:17:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA==", "fields": {"body": "the PR wont get an env var on Travis, or any other sane system (Netlify isnt sane/safe), so this is useless on Travis.\nbut more importantly, this is useless.  If the token is available here, a malicious person could modify this script to emit it to the log , or send it via email to themselves, or anything.\nHowever this isnt such a large problem if the token in GITHUB_TOKEN has no scopes which allow greater access than the malicious person could obtain themselves.  The worst they can do is abuse the token so that GitHub cancels it, breaking the builds.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN", "created_at": "2017-12-10T14:23:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA==", "fields": {"body": "maybe condition: \"$ENCRYPTION_LABEL\" = \"\" ?", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:21:08Z", "last_edited_at": "2017-12-10T15:21:19Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ==", "fields": {"body": "^ Yup, tested on my fork.", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:52:27Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg==", "fields": {"body": "I'd prefer the chat platform type to be included also, to give a bit of clarity in the JSON.", "diff": "@@ -84,13 +95,19 @@ async function fetchOrgsWithData() {\n   const orgs = await fetchOrgs()\n   const fetchingLeaders = orgs.map(org => fetchLeaders(org.id))\n   const fetchingGitHub = orgs.map(org => findOrganization(org))\n+  const fetchingChat = orgs.map(org => chattie(org.irc_channel))\n   const orgLeaders = await Promise.all(fetchingLeaders)\n   const orgGitHub = await Promise.all(fetchingGitHub)\n+  const orgChats = await Promise.all(fetchingChat)\n \n   return orgs.map((org, index) =>\n     Object.assign(org, {\n       leaders: orgLeaders[index],\n       github: orgGitHub[index],\n+      chat: {\n+        url: orgChats[index].url,\n+        image: CHAT_IMAGES[chattie.CHAT[orgChats[index].type]],", "created_at": "2017-12-10T22:29:03Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw==", "fields": {"body": "ESLint wants this all on one line", "diff": "@@ -127,6 +128,18 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n-  fs.writeFileSync(`${__dirname}/../out/data.json`, JSON.stringify(data))\n+  // readable JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.json`,\n+    JSON.stringify(data, null, 2)\n+  )\n+  // minified JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.min.json`,\n+    JSON.stringify(data)\n+  )", "created_at": "2017-12-11T05:23:50Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ==", "fields": {"body": "EOF", "diff": "@@ -128,4 +157,4 @@ <h3>\n     <script src=\"static/js/app.js\"></script>\n     <script src=\"static/js/twitter.js\"></script>\n   </body>\n-</html>\n+</html>", "created_at": "2017-12-11T06:19:53Z", "last_edited_at": "2017-12-11T06:25:53Z", "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA==", "fields": {"body": "Don't use the org's image for their website prompt. Usually a globe is used, similar to https://image.flaticon.com/icons/png/128/12/12195.png (you might need to find one from somewhere else or give proper attribution for that one).", "diff": "@@ -92,26 +107,40 @@ <h3>\n                 {{name}}\n               </a>\n             </h3>\n-            <p>Tasks Completed: {{completed_task_instance_count}}\n-              {{#github}}\n+            <p>Tasks Completed: {{completed_task_instance_count}}</p>\n+            {{#github}}\n               <a href=\"https://github.com/{{github}}\">\n                 <img\n                   src=\"https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\"\n                   class=\"github\"\n                 />\n               </a>\n-              {{/github}}\n-              {{#mailing_list}}\n+            {{/github}}\n+            {{#mailing_list}}\n               <a href=\"{{mailing_list}}\">\n                 <img src=\"static/images/mail.png\" class=\"chat\" />\n               </a>\n-              {{/mailing_list}}\n-              {{#chat}}\n+            {{/mailing_list}}\n+            {{#chat}}\n               <a href=\"{{chat.url}}\">\n                 <img src=\"{{chat.image}}\" class=\"chat\" />\n               </a>\n-              {{/chat}}\n-            </p>\n+            {{/chat}}\n+            {{#twitter_url}}\n+              <a href=\"{{twitter_url}}\">\n+                <img src=\"static/images/logos/twitter.png\" class=\"chat\" />\n+              </a>\n+            {{/twitter_url}}\n+            {{#gplus_url}}\n+              <a href=\"{{gplus_url}}\">\n+                <img src=\"static/images/logos/gplus.png\" class=\"chat\" />\n+              </a>\n+            {{/gplus_url}}\n+            {{#website_url}}\n+              <a href=\"{{website_url}}\">\n+                <img src=\"https://{{image_url}}\" class=\"chat\" />", "created_at": "2017-12-11T06:23:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjAwMzc2NA==", "fields": {"body": "ughh. we don't need this test case at all", "diff": "@@ -326,7 +325,7 @@ def test_invite_me(self):\n \n         plugins.labhub.os.environ['GH_TOKEN'] = 'patched?'\n         testbot.assertCommand('!invite me',", "created_at": "2017-12-11T08:11:10Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA==", "fields": {"body": "fyi, there is a flag to turn off creation of .orig files.", "diff": "@@ -3,3 +3,4 @@ out/*\n !out/.keep\n yarn.lock\n .DS_Store\n+**.orig", "created_at": "2017-12-12T04:32:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ==", "fields": {"body": "could this be JavaScript, so it can be incorporated into the npm build process ?", "diff": "@@ -11,6 +11,7 @@ before_install:\n script:\n   - coala --non-interactive -V\n   - npm run build\n+  - ./.ci/gather_data.sh", "created_at": "2017-12-13T04:30:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw==", "fields": {"body": "Remove the contents instead of the folder\ni.e. rm -rf out/*\nand if you do that you don't need to recreate the .keep file", "diff": "@@ -4,7 +4,12 @@\n   \"description\": \"\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n-    \"build\": \"node ./lib/scrape.js && node ./lib/generate.js\"\n+    \"scrape\": \"node ./lib/scrape.js\",\n+    \"generate\": \"node ./lib/generate.js\",\n+    \"gather\": \"node ./lib/gather.js\",\n+    \"clean\": \"rm -rf out && mkdir -p out && touch out/.keep\",", "created_at": "2017-12-13T06:50:20Z", "last_edited_at": "2017-12-13T06:52:46Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA==", "fields": {"body": "Shhh... \ud83d\ude0b", "diff": "@@ -210,11 +220,14 @@ async function findWiki(name) {\n }\n \n async function findGitHubUser({ display_name }, org) {\n+=======\n+async function findGitHubUser(displayName, org) {\n+>>>>>>> scrape.js: Reduce number of API calls", "created_at": "2017-12-13T07:20:39Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA==", "fields": {"body": "Maybe in that case https:${wikidataurl}?", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {\n+      const wikipediaurl = wdk.getSitelinkUrl(sitelink['enwiki'])\n+      return {\n+        url: wikipediaurl,\n+        type: 'wikipedia',\n+      }\n+    } else {\n+      return {\n+        url: 'https:' + wikidataurl,", "created_at": "2017-12-12T22:03:28Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg==", "fields": {"body": "In future(with i18n) this should become language_code + 'wiki'. So that'd probably bring us back to this way...", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {", "created_at": "2017-12-12T22:06:35Z", "last_edited_at": null, "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA==", "fields": {"body": "IMO we should remove all translation for now and only keep en or 2.", "diff": "@@ -0,0 +1,21 @@\n+{\n+  \"page-title\": \"Google Code-in 2017 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0928\u0947\u0924\u093e\",\n+  \"last-updated\": \"\u0906\u0916\u0930\u0940 \u0905\u092a\u0921\u0947\u091f\",", "created_at": "2017-12-14T06:10:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA==", "fields": {"body": "Yep, seems to not be working. But in that case just skip over it and only use working XML feeds. That'll be encouragement to get the coala feed fixed \ud83d\ude09", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',\n+]", "created_at": "2017-12-15T03:21:22Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ==", "fields": {"body": "Make it so that when the parser failed it's skipping instead of \"breaking\".", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',", "created_at": "2017-12-15T03:23:31Z", "last_edited_at": "2017-12-15T03:23:40Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg==", "fields": {"body": "if (blog_url) is enough, I think.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(\n+    data.map(org => {\n+      const { blog_url } = org\n+      if (blog_url != null && blog_url != '') {", "created_at": "2017-12-16T13:19:29Z", "last_edited_at": "2017-12-16T13:45:03Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA==", "fields": {"body": "Probably looks neater if you put it inside variable first and then use Promise.all().\nAlso, async function please, instead of then.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(", "created_at": "2017-12-16T13:24:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ==", "fields": {"body": "JSON doesn't have linebreaks and the translations for some strings are too long for the linelength limit.", "diff": "@@ -9,7 +9,7 @@ bears = SpaceConsistencyBear\n default_actions = *: ApplyPatchAction\n \n [all.linelength]\n-ignore += **.html\n+ignore += **.html, static/js/i18n/**.json", "created_at": "2017-12-16T15:25:06Z", "last_edited_at": null, "author": "margobra8", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng==", "fields": {"body": "Maybe create a new file that holds the last updated time.\nWe have many generated files (org data, blog planet, dates) and that'll give the last updated time to all of that data.", "diff": "@@ -369,14 +377,19 @@ async function fetchDates() {\n }\n \n ;(async () => {\n-  const data = await fetchOrgsWithData()\n+  const orgs = await fetchOrgsWithData()\n   const dates = await fetchDates()\n \n   // sort data by completed_task_instance_count\n-  data.sort(\n+  orgs.sort(\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  const data = {\n+    orgs: sortKeys({ orgs }, { deep: true }).orgs,\n+    lastUpdated: new Date(),", "created_at": "2017-12-20T10:49:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw==", "fields": {"body": "The rss module does this automatically for me. See the output: https://deploy-preview-95--gci-leaders.netlify.com/feed.xml", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,", "created_at": "2017-12-20T17:25:53Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ==", "fields": {"body": "Do we need this? or is this for debugging, we might want a fancier log message or just throw this away completely.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)", "created_at": "2017-12-20T11:47:18Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg==", "fields": {"body": "We might want to fetch this like data.json or the file will not be available on every build.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()", "created_at": "2017-12-20T11:48:36Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg==", "fields": {"body": "Might want to add description.\nThe value can be a readable form of property:old and property:new", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,", "created_at": "2017-12-20T12:01:09Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw==", "fields": {"body": "Every new .js is loading this file again.  And creating a new script , and a longer build command.\nIf these .js are modularised, the data can be parsed once and passed around .", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()", "created_at": "2017-12-20T12:38:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ==", "fields": {"body": "@andrewda went afk, still isn't finished yet. Have yet to remove debug lines", "diff": "@@ -0,0 +1,24 @@\n+function twitter_filter() {\r\n+  var twitter_handles = [];\r\n+  for(var i=0; i<document.getElementsById(\"org-info\"); i++) {\r\n+    var org_info = document.getElementsById(\"org-info\");\r\n+    for(var j=0; i<org_info.children.length; i++) {\r\n+      if(org_info.children[j].href.startsWith(\"https://twitter.com/\")) {\r\n+        twitter_handles.push(org_info.children[j].href.substr(20));\r\n+      }\r\n+    }\r\n+  }\r\n+  console.log(twitter_handles);\r", "created_at": "2017-12-20T21:07:08Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ==", "fields": {"body": "So we can run array function like filter ;)\nYou can use Array.from() instead, more readable.", "diff": "@@ -8,5 +8,40 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('load', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode\n+  var twitter_prefix = 20\n+  var twitter_handles = []\n+  var orgs = document.getElementsByClassName('org-info')\n+  for (var i = 0; i < orgs.length; i++) {\n+    var org_info = orgs[i]\n+    for (var j = 0; j < org_info.children.length; j++) {\n+      if (org_info.children[j].href) {", "created_at": "2017-12-21T22:33:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg==", "fields": {"body": "@dob9601 If you do rebase, you can use import and put that in utils file.", "diff": "@@ -8,5 +8,43 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode", "created_at": "2017-12-24T00:50:58Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ==", "fields": {"body": "store in a repo_info.graphql ?\nthe variables are part of the language.", "diff": "@@ -0,0 +1,30 @@\n+module.exports.REPO_INFO_QUERY = `", "created_at": "2017-12-24T02:30:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA==", "fields": {"body": "Can we remove all of these rulers? They look annoying.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***", "created_at": "2017-12-24T04:31:51Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw==", "fields": {"body": "Better to use === instead of ==. See https://github.com/airbnb/javascript#comparison--eqeqeq.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks\n+          .map(u => {\n+            const createdAt = new Date(u.createdAt)\n+            if (createdAt.getTime() > COMPETITION_OPEN.getTime()) {\n+              return u.owner.login.toLowerCase()\n+            }\n+          })\n+          .filter(login => login)\n+      )\n+\n+    repo.watchers.forEach(watcher => {\n+      if (watcher.name) {\n+        names[watcher.name.toLowerCase()] = watcher.login\n+      }\n+    })\n+  })\n+\n+  logins = logins.filter((item, pos, self) => self.indexOf(item) == pos)", "created_at": "2017-12-24T06:38:05Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw==", "fields": {"body": "Group that let and const. See https://github.com/airbnb/javascript#variables--const-let-group.", "diff": "@@ -1,16 +1,22 @@\n const fetch = require('node-fetch')\n+const GraphQL = require('graphql-client')\n const chattie = require('chattie')\n const fs = require('fs')\n const json2yaml = require('json2yaml')\n const validUsername = require('valid-github-username')\n const wdk = require('wikidata-sdk')\n \n+const { REPO_INFO_QUERY } = require('./queries')\n+\n const GH_BASE = 'https://github.com'\n const GH_USER_BASE = `${GH_BASE}/users`\n const GH_ORG_BASE = `${GH_BASE}/orgs`\n const GH_API_BASE = 'https://api.github.com'\n+const GH_GQL_BASE = 'https://api.github.com/graphql'\n const GCI_API_BASE = 'https://codein.withgoogle.com/api'\n \n+let COMPETITION_OPEN", "created_at": "2017-12-24T06:35:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA==", "fields": {"body": "An issue is a very noticable action.  It is a new thing, and the malicious person is the creator.\nA review is not quite as noticeable, but it would need to be done on an obscure open PR in order to not be noticed.\nEither would likely be seen as intentional confusion, maybe suitable for GitHub to investigate as 'abuse'.\nstars/watches/forks are almost invisible.  And it is very hard to file 'abuse' with GitHub for doing those actions.\nYour issue is a specific attempt to do #8 .\nThe biggest problem is that so far this algorithm has a lower confidence level than the previous algorithms, but it is being used first.  This could be used to override the existing algorithms, which are more reliable.\nOnce you have a potential match, which wasnt found using the existing more reliable algorithms, you need to look at the match profiles to determine how you can increase the confidence level of your match.  The more effort you require of the abuser, the more likely their abuse can only be viewed as intentional or at least highly suspicious.\nProbably also a good idea to annotate each match with the matching method used.\nAPI hits isn't relevant now, as the hits can grow over time.  You can include probable matches in the yaml which are not included in the rendered page, as they are needing more analysis deferred until a subsequent build has extra API calls to use.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks", "created_at": "2017-12-24T06:46:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg==", "fields": {"body": "And it can be autodetected using shields.io, so may as well do that instead of hardcoding it.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***\n+This is a website to show the current leaders from all organizations in GCI.\n+***\n+ * [Installation](#installation)\n+ * [Languages](#languages)\n+ * [Usage](#usage)\n+ * [Getting Involved](#getting-involved)\n+ * [Support](#support)\n+ * [Authors](#authors)\n+ * [License](#license)\n+***\n+### Installation\n+```\n+npm install\n+```\n+***\n+### Languages:\n+* Node.js\n+* JSON\n+***\n+### Usage:\n+```\n+npm run build\n+```\n+***\n+### Getting Involved\n+If you would like to be a part of the coala community, you can check out our [Getting In Touch](http://coala.readthedocs.io/en/latest/Help/Getting_In_Touch.html) page or ask us at our active Gitter channel, where we have maintainers from all over the world. We appreciate any help!\n+\n+We also have a [newcomer guide](http://api.coala.io/en/latest/Developers/Newcomers_Guide.html) to help you get started by fixing an issue yourself! If you get stuck anywhere or need some help, feel free to contact us on Gitter or drop a mail at our [newcomer mailing list](https://groups.google.com/forum/#!forum/coala-newcomers).\n+***\n+### Support\n+Feel free to contact us at our [Gitter channel](https://gitter.im/coala/coala), we'd be happy to help!\n+\n+If you are interested in commercial support, please contact us on the Gitter channel as well.\n+\n+You can also drop an email at our [mailing list](https://github.com/coala/coala/wiki/Mailing-Lists).\n+***\n+### Authors\n+You can contact to author for more information.\n+[blazeu](mailto:neversleepman@tfwno.gf)\n+***\n+### License\n+[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)", "created_at": "2017-12-25T14:34:47Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ==", "fields": {"body": "Use !== please.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {", "created_at": "2017-12-25T14:42:41Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng==", "fields": {"body": "Use let or const instead.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {\n+      const twitter_account = twitter_url[0].pathname.substr(1)\n+      twitter_handles.push(twitter_account)\n+    }\n+  }\n+  \n+  if (document.getElementById(twitter_id) !== null) {\n+    const tweet_authors = document\n+      .getElementById(twitter_id)\n+      .contentWindow.document.getElementsByClassName(\n+        'TweetAuthor-screenName Identity-screenName'\n+      )\n+      \n+    if (tweet_authors.length > 0) {\n+      for (var k = 0; k < tweet_authors.length; k++) {\n+        if (\n+          twitter_handles.indexOf(tweet_authors[k].innerHTML.substr(1)) > -1\n+        ) {\n+          var tweet = getNodesDeep(tweet_authors[k], 5)", "created_at": "2017-12-25T14:43:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA==", "fields": {"body": "Makes it import { getNodesDeep } from 'utils' please.", "diff": "@@ -1,3 +1,5 @@\n+import {getNodesDeep} from 'utils.js'", "created_at": "2017-12-25T14:42:21Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg==", "fields": {"body": "a README in that directory would be useful.  Also for CC licenses, the full text of the license isnt necessary.  A link is acceptable, and a link to the license file in their repo is really good, as it allows the reader to find the original, which is the intent of CC.", "diff": "@@ -57,6 +57,15 @@ <h3>\n                 />\n               </a>\n             {{/github}}\n+            {{#gitlab}}\n+              <a href=\"https://gitlab.com/{{gitlab}}\">\n+                <img\n+                  src=\"images/logos/gitlab.png\"", "created_at": "2017-12-26T05:29:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA==", "fields": {"body": "Can you please update the color? Somebody will be blind. Update the font color to white for example.", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T07:42:35Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng==", "fields": {"body": "Also, crimson or orangered is better than red", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T08:21:51Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg==", "fields": {"body": "No need, honestly. It's just one line.", "diff": "@@ -55,5 +56,8 @@\n \t\t</TMPL_LOOP>\n \t</ul>\n </div>\n+<script>\n+twemoji.parse(document.body);", "created_at": "2017-12-29T06:28:56Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ==", "fields": {"body": "@andrewda While some hr elements not using backslash, there is some img elements using backslash. We need to fix this later. Consistency is important.", "diff": "@@ -209,7 +209,8 @@ <h3>\n     </div>\n     <footer>\n       <small data-i18n=\"gci-copyright\">Google Code-in and the Google Code-in logo are trademarks of Google Inc.</small><br />\n-      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small>\n+      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small><br />", "created_at": "2018-01-11T08:00:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM5MTY0Mw==", "fields": {"body": "Actually, &gteq; \ud83d\ude1b", "diff": "@@ -33,6 +33,11 @@ <h5 class=\"light\">simply install coala</h5>\n                     </p>\n                 </div>\n                 <div class=\"col m6 s12\">\n+                    <p>In order to use coala, you should have\n+                        <a href=\"https://www.python.org/downloads/\">Python >= 3.4</a> and\n+                        <a href=\"https://pip.pypa.io/en/stable/installing/\">pip >= 8</a> Installed", "created_at": "2018-01-14T09:19:45Z", "last_edited_at": "2018-01-14T09:22:59Z", "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng==", "fields": {"body": "we probably don't want this as venv is created here only for using coala whereas in the development setup notes coala-venv is created for the purpose of development.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T09:54:17Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA==", "fields": {"body": "Since it's venv in the rest documentation, use venv only. Didn't note that before. ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:03Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ==", "fields": {"body": "@diveshuttam yea i just had a look and IMO you can carry on withvenv and later on file an issue to change it after asking a maintainer ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:36Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ==", "fields": {"body": "@pareksha @newbazz @diveshuttam I agree with you guys on being consistent with the naming convention. However my comment was only regarding functionality either way \ud83d\ude0a", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T16:32:11Z", "last_edited_at": null, "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA==", "fields": {"body": "@pareksha  @anctartica actually, naming the virtual environment doesn't change its functionality. Using either venv or coala-venv is correct.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:00:41Z", "last_edited_at": "2018-01-22T13:01:01Z", "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA==", "fields": {"body": "yes, i know.. was referring to the context in which the name is used in the documentation", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:06:51Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA==", "fields": {"body": "I have already mentioned that the user will not see a version number if virtualenv is not installed and I think the output message would be pretty obvious to know that its not installed yet", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:\n+", "created_at": "2018-01-31T16:45:40Z", "last_edited_at": null, "author": "lilithxxx", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ==", "fields": {"body": "You need to explain the use of --user flag.", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:", "created_at": "2018-02-05T07:31:55Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw==", "fields": {"body": "till -> until\nRather avoid slang ;)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular\n+section in them (you have not specified any particular sections till", "created_at": "2018-02-22T20:44:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ==", "fields": {"body": "You could actually say \"This special section\" (because it really is special in coala's setting system)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:44:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw==", "fields": {"body": "Maybe say that \"This section groups all the settings that are entered via ...\", because the purpose of sections are their grouping-ability.", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:45:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA==", "fields": {"body": "--> \"that don't belong to a particular section\", I think this one is better :)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular", "created_at": "2018-02-22T20:47:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg==", "fields": {"body": "Ah :3 Regarding \u261d\ufe0f  edf0dae#r170088538\nSo this is what should come earlier, in the Configuration Files - coafiles-paragraph.", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng==", "fields": {"body": "Hm not sure we should encourage people to name it \"all\". But yeah, maybe a good convention in future? Not sure :3", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:28Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzU1ODUyMA==", "fields": {"body": "Done!", "diff": "@@ -21,11 +21,16 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         cmake_filter: str=None,\n                          cmakelint_config: path=''):\n         \"\"\"\n         :param cmakelint_config: The location of the cmakelintrc config file.\n+", "created_at": "2018-03-09T20:23:53Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxNTE0Mg==", "fields": {"body": "put the parameter documentation in the same order as the parameters in the declaration", "diff": "@@ -21,11 +21,15 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         cmake_filter: str=None,\n                          cmakelint_config: path=''):\n         \"\"\"\n         :param cmakelint_config: The location of the cmakelintrc config file.\n+        :param cmake_filter: The filter to be applied on cmake file.", "created_at": "2018-03-10T07:50:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYyNzI3OA==", "fields": {"body": "this is all junk.  #2331\nno benefit in 'fixing it'", "diff": "@@ -95,7 +95,16 @@\n             - \"#from\"\n     MAINTAINER: \n       paramSyntaxRegex: /.+/\n-      rules: []\n+      rules:", "created_at": "2018-03-10T16:47:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYyNzIxMQ==", "fields": {"body": "no way; we do not support version 0-infinity.\nI bet our tests would fail if someone tried to use most of the versions of this package.", "diff": "@@ -17,7 +17,7 @@ class DockerfileLintBear:\n     more information .\n     \"\"\"\n     LANGUAGES = {'Dockerfile'}\n-    REQUIREMENTS = {NpmRequirement('dockerfile_lint', '0.2.7')}\n+    REQUIREMENTS = {NpmRequirement('dockerfile_lint', '0')}", "created_at": "2018-03-10T16:45:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzcxOTc3Ng==", "fields": {"body": "RadonBearDefaultsTest does the same. Check the complete file \ud83d\ude04", "diff": "@@ -25,15 +25,11 @@ class class1():\n     RadonBear,\n     valid_files=(test_file1, test_file2, test_file3),\n     invalid_files=(),\n-    settings={'radon_ranks_info': '',\n-              'radon_ranks_normal': '',\n-              'radon_ranks_major': ''})\n+    settings={'cc_threshold': 52})\n \n \n RadonBearReportsTest = verify_local_bear(\n     RadonBear,\n     valid_files=(),\n     invalid_files=(test_file1, test_file2),\n-    settings={'radon_ranks_info': '',\n-              'radon_ranks_normal': 'A',\n-              'radon_ranks_major': ''})\n+    settings={'cc_threshold': 1})", "created_at": "2018-03-12T08:31:29Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1MDI4OA==", "fields": {"body": "In my opinion, it's a bad practice of writing test. Why not using setUp to set abs path of test_files and then call it in each test?\nI mean you can do below code in setUp\nself.test_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'test_files'))\nAnd call it in each test by using good_file = os.path.join(self.test_path, 'vet_good.go').", "diff": "@@ -14,13 +14,19 @@ class GoVetBearTest(LocalBearTestHelper):\n     def setUp(self):\n         self.section = Section('test section')\n         self.uut = GoVetBear(self.section, Queue())\n-        self.good_file = os.path.join(os.path.dirname(__file__),\n-                                      'test_files',\n-                                      'vet_good.go')\n-        self.bad_file = os.path.join(os.path.dirname(__file__),\n-                                     'test_files',\n-                                     'vet_bad.go')\n \n-    def test_run(self):\n-        self.check_validity(self.uut, [], self.good_file)\n-        self.check_invalidity(self.uut, [], self.bad_file)\n+    def test_syntax_error(self):\n+        good_file = os.path.join(os.path.dirname(__file__),\n+                                 'test_files',\n+                                 'vet_good.go')\n+        bad_file = os.path.join(os.path.dirname(__file__),\n+                                'test_files',\n+                                'vet_bad_semantics.go')", "created_at": "2018-03-17T07:01:12Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI4NjY5NQ==", "fields": {"body": "pep naming please", "diff": "@@ -11,6 +11,16 @@\n from coalib.settings.Setting import typed_list\n \n \n+def cveKeyChecker(vulnerability):", "created_at": "2018-03-18T12:09:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5NjA4OQ==", "fields": {"body": "capturing filename this emits a warning, because the filename is always constant", "diff": "@@ -0,0 +1,66 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\w+\\.go):'", "created_at": "2018-03-18T17:12:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5NjU4Nw==", "fields": {"body": "Well, I went through the code and I saw that all the messages were mapped to essentially 2 severities, warning and error. https://github.com/alecthomas/gometalinter/blob/master/issue.go. Are there really other severity levels besides these two. Have you tested the linter?", "diff": "@@ -0,0 +1,66 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\w+\\.go):'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '", "created_at": "2018-03-18T17:31:32Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5OTE0Ng==", "fields": {"body": "Oh, right. I think I confused it with the other linter bear I was working on. \ud83d\ude04\nWill add the severity map thing. ;)", "diff": "@@ -0,0 +1,66 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\w+\\.go):'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '", "created_at": "2018-03-18T18:42:58Z", "last_edited_at": "2018-03-18T18:43:11Z", "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTQwMTM4OA==", "fields": {"body": "you are not adding the setting to the args", "diff": "@@ -21,10 +23,17 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         max_line_length: int=79,\n                          cmakelint_config: path=''):\n         \"\"\"\n+        :param max_line_length:\n+             Maximum number of characters for a line.\n++            When set to 0 allows infinite line length.\n         :param cmakelint_config: The location of the cmakelintrc config file.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize", "created_at": "2018-03-19T11:22:38Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODI2NTk3MA==", "fields": {"body": "Done #2388", "diff": "@@ -3,4 +3,3 @@\n   \"version\": \"{{version}}\",\n   \"dependencies\": {{dependencies | jsonify(indent=4, sort_keys=True)}}\n }\n-", "created_at": "2018-03-30T09:53:11Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzNjk1NQ==", "fields": {"body": "if you add () to this rule then your test case would pass. You should add more test cases where this would fail even with () to show that it is invalid.", "diff": "@@ -105,7 +105,22 @@ def extract_links_from_file(file, link_ignore_regex, link_ignore_list):\n             https?://                   # http:// or https:// as only these\n                                         # are supported by the ``requests``\n                                         # library\n-            [^.:%\\s_/?#[\\]@\\\\]+         # Initial part of domain", "created_at": "2018-03-31T17:09:53Z", "last_edited_at": "2018-03-31T17:10:31Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1Mzg3NQ==", "fields": {"body": "A redundant space here", "diff": "@@ -24,18 +26,24 @@ class BanditBear:\n     def create_arguments(filename, file, config_file,\n                          bandit_skipped_tests: typed_list(str)=\n                          ('B105', 'B106', 'B107', 'B404', 'B603', 'B606',\n-                          'B607')):\n+                          'B607'),\n+                         bandit_selected_tests: typed_list(str)=()):\n         \"\"\"\n-        :param bandit_skipped_tests:\n-            The IDs of the tests ``bandit`` shall not perform. You can get\n-            information about the available builtin codes at\n-            https://github.com/openstack/bandit#usage.\n+        :param bandit_skipped_tests: The IDs of the tests ``bandit`` shall\n+                                     not perform.\n+        :param bandit_selected_tests:  The IDs of the tests ``bandit`` shall", "created_at": "2018-04-02T14:24:48Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODg4MzUzMA==", "fields": {"body": "Can you add a line like stdout, stderr = output otherwise output[1] and output[0] are hard to understand", "diff": "@@ -47,7 +55,22 @@ def create_arguments(filename, file, config_file,\n                       'LOW': 50}\n \n     def process_output(self, output, filename, file):\n-        output = json.loads(output)\n+        def warn_issue(message):\n+            self.warn('While running {0}, some issues were found:'\n+                      .format(self.__class__.__name__))\n+            self.warn(message)\n+\n+        # Taking output from stderr in case bandit shows errors\n+        # such as selected test ID and skipped test ID are same.\n+        err_pattern = re.compile(r'ERROR.*')\n+        match = err_pattern.search(output[1])", "created_at": "2018-04-03T16:25:27Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODg4NDYxOQ==", "fields": {"body": "I understand the default value of use_stdout is True. Not sure here, but maybe explicitly adding use_stdout=True makes the code easier to understand? (ref: http://api.coala.io/en/latest/Developers/Linter_Bears_Advanced.html)", "diff": "@@ -7,7 +8,8 @@\n from coalib.settings.Setting import typed_list\n \n \n-@linter(executable='bandit')\n+@linter(executable='bandit',\n+        use_stderr=True)", "created_at": "2018-04-03T16:29:25Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTAyMQ==", "fields": {"body": "check the comments on the issue", "diff": "@@ -39,7 +39,7 @@ def setup_dependencies(self):\n             nltk.download([\n                 'punkt',\n                 'averaged_perceptron_tagger',\n-            ])\n+            ], quiet=True)", "created_at": "2018-04-05T12:12:39Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTY3MzE1Mg==", "fields": {"body": "this breaks backwards compatibility with existing .coafile settings people might have.  cc @sils to ensure he thinks that is necessary in this case.", "diff": "@@ -17,39 +16,32 @@ class RadonBear(LocalBear):\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Complexity'}\n \n-    def run(self, filename, file,\n-            radon_ranks_info: typed_list(str)=(),\n-            radon_ranks_normal: typed_list(str)=('C', 'D'),\n-            radon_ranks_major: typed_list(str)=('E', 'F')):\n+    def run(self, filename, file, cc_threshold: int=10):\n         \"\"\"\n         Uses radon to compute complexity of a given file.\n \n-        :param radon_ranks_info:   The ranks (given by radon) to", "created_at": "2018-04-06T06:51:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzE1NQ==", "fields": {"body": "Remove after debugging", "diff": "@@ -138,6 +138,21 @@ export function parseRoute({params, routes, location}) {\n class FilterState {\n   constructor(state) {\n     this.state = state;\n+    if (this.state.repoInfos.length === 0) {\n+      const repositories = process.env.REPOSITORIES || 'coala';\n+      const repoOwner = 'coala'; //default repoOwner\n+\n+      // extracting repo names\n+      let repoNames = repositories.substring(repositories.indexOf(\":\") + 1).split(\"|\");\n+\n+      let arr = [];\n+      repoNames.forEach(repoName => {\n+        arr.push({ repoOwner, repoName});\n+      })\n+\n+      this.state.repoInfos = arr;\n+    }\n+    console.log(this.state.repoInfos)", "created_at": "2018-04-08T10:34:16Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkxNDEzMQ==", "fields": {"body": "all this circle stuff will go with the circle-ci patch.\nbut that might take a while.", "diff": "@@ -5,13 +5,13 @@ TERM=dumb\n \n # Choose the python versions to install deps for\n case $CIRCLE_NODE_INDEX in\n- 0) dep_versions=( \"3.4.3\" \"3.5.1\" ) ;;", "created_at": "2018-04-07T10:50:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkyMTI2MQ==", "fields": {"body": "You have not created a GlobalBear , so that is all irrelevant.", "diff": "@@ -0,0 +1,66 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'(?P<filename>\\w+\\.go):'", "created_at": "2018-04-07T16:35:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MDc3NQ==", "fields": {"body": "Most of these tasks are handled already by IGitt, I recommend using that.", "diff": "@@ -102,6 +105,70 @@ def get_host_from_remotes():\n             netloc = urlparse(url)[1]\n         return netloc.split('.')[0]\n \n+    @staticmethod\n+    def get_owner_from_url(url):", "created_at": "2018-04-09T13:19:01Z", "last_edited_at": null, "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MjEzOA==", "fields": {"body": "Again as @nalinbhardwaj  mentioned earlier, we do support GitLab host also\nSo limiting to GithubAPI could limit the user to not being able to check for issue on other hosts\nIgitt is perhaps the place to handle such stuff", "diff": "@@ -102,6 +105,70 @@ def get_host_from_remotes():\n             netloc = urlparse(url)[1]\n         return netloc.split('.')[0]\n \n+    @staticmethod\n+    def get_owner_from_url(url):\n+        return urlparse(url)[2].split('/')[1]\n+\n+    @staticmethod\n+    def get_repository_from_url(url):\n+        return urlparse(url)[2].split('/')[2]\n+\n+    @staticmethod\n+    def get_owner_from_remote(remote):\n+        \"\"\"\n+        Retrieve the owner from the specified remote.\n+        \"\"\"\n+        url, _ = run_shell_command(\n+                \"git config --get-regex '^remote.{}.url$'\".format(remote))\n+        url = url.split()\n+        if len(url) == 0:\n+            return None\n+        url = url[-1]\n+\n+        if 'git@' in url:\n+            user = re.findall(r':(.*?)/', url)[0]\n+        else:\n+            user = urlparse(url)[2].split('/')[1]\n+        return user\n+\n+    @staticmethod\n+    def get_repository_from_remote(remote):\n+        \"\"\"\n+        Retrieve the owner from the specified remote.\n+        \"\"\"\n+        url, _ = run_shell_command(\n+                \"git config --get-regex '^remote.{}.url$'\".format(remote))\n+        url = url.split()\n+        if len(url) == 0:\n+            return None\n+        url = url[-1]\n+\n+        if 'git@' in url:\n+            repository = re.findall(r'/(.*?).git', url)[0]\n+        else:\n+            repository = urlparse(url)[2].split('/')[2][:-4]\n+        return repository\n+\n+    @staticmethod\n+    def is_issue_open(owner, repo, issue_id):\n+        github_get_issue_api = 'https://api.github.com/repos/{}/{}/issues/{}'", "created_at": "2018-04-09T13:23:44Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI5ODE4OQ==", "fields": {"body": "this issue doesn't involve making changes to .coafile. Rather than fixing that PEP8Bear showed previously you have simply removed it.", "diff": "@@ -29,12 +20,13 @@ language = Python\n remove_all_unused_imports = true\n \n [autopep8]\n-bears = PEP8Bear, PycodestyleBear\n+bears += PycodestyleBear", "created_at": "2018-04-10T05:07:12Z", "last_edited_at": "2018-04-10T05:07:50Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3MjQ3Mw==", "fields": {"body": "if cmakelint_config:\n            args += ('--config=' + cmakelint_config,)\n\n        if max_line_length:\n            args += ('--linelength=' + str(max_line_length),)\n\nWhy I am suggesting to break and make it in 2 conditions is because if a user does not give cmakelint_config then your code has no use of max_line_length that you have given here.", "diff": "@@ -21,11 +23,19 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         max_line_length: int=79,\n                          cmakelint_config: path=''):\n         \"\"\"\n+        :param max_line_length:\n+             Maximum number of characters for a line.\n++            When set to 0 allows infinite line length.\n         :param cmakelint_config: The location of the cmakelintrc config file.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize\n+\n         args = ()\n         if cmakelint_config:\n-            args += ('--config=' + cmakelint_config,)\n+            args += ('--config=' + cmakelint_config,\n+                     '--linelength=' + str(max_line_length),)", "created_at": "2018-04-13T12:29:36Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDI5OA==", "fields": {"body": "there is no need for if max_line_length. Consider what happens when max_line_length is 0.", "diff": "@@ -21,11 +23,19 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         max_line_length: int=79,\n                          cmakelint_config: path=''):\n         \"\"\"\n+        :param max_line_length:\n+             Maximum number of characters for a line.\n++            When set to 0 allows infinite line length.\n         :param cmakelint_config: The location of the cmakelintrc config file.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize\n+\n         args = ()\n         if cmakelint_config:\n-            args += ('--config=' + cmakelint_config,)\n+            args += ('--config=' + cmakelint_config,\n+                     '--linelength=' + str(max_line_length),)", "created_at": "2018-04-13T12:37:33Z", "last_edited_at": "2018-04-13T18:21:44Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDQwNA==", "fields": {"body": "@sangamcse thats what is written in the above review :P", "diff": "@@ -21,11 +23,19 @@ class CMakeLintBear:\n \n     @staticmethod\n     def create_arguments(filename, file, config_file,\n+                         max_line_length: int=79,\n                          cmakelint_config: path=''):\n         \"\"\"\n+        :param max_line_length:\n+             Maximum number of characters for a line.\n++            When set to 0 allows infinite line length.\n         :param cmakelint_config: The location of the cmakelintrc config file.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize\n+\n         args = ()\n         if cmakelint_config:\n-            args += ('--config=' + cmakelint_config,)\n+            args += ('--config=' + cmakelint_config,\n+                     '--linelength=' + str(max_line_length),)", "created_at": "2018-04-13T12:38:01Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk0ODc2Mw==", "fields": {"body": "At various places in coala like ClangComplexityBear, JSHintBear, etc the setting max-complexity or any other such name was deprecated and replaced with cyclomatic_complexity. Since, the main aim was to maintain the consistency, I chose to adopt the setting name as cyclomatic-complexity.", "diff": "@@ -18,39 +19,57 @@ class RadonBear(LocalBear):\n     CAN_DETECT = {'Complexity'}\n \n     def run(self, filename, file,\n+            cyclomatic_complexity: int = None,\n             radon_ranks_info: typed_list(str) = (),\n             radon_ranks_normal: typed_list(str) = ('C', 'D'),\n             radon_ranks_major: typed_list(str) = ('E', 'F'),\n             ):\n         \"\"\"\n         Uses radon to compute complexity of a given file.\n \n-        :param radon_ranks_info:   The ranks (given by radon) to\n-                                   treat as severity INFO.\n-        :param radon_ranks_normal: The ranks (given by radon) to\n-                                   treat as severity NORMAL.\n-        :param radon_ranks_major:  The ranks (given by radon) to\n-                                   treat as severity MAJOR.\n+        :param cyclomatic_complexity: Maximum cyclomatic complexity\n+                                      that is considered to be normal.\n+        :param radon_ranks_info:      The ranks (given by radon) to\n+                                      treat as severity INFO.\n+        :param radon_ranks_normal:    The ranks (given by radon) to\n+                                      treat as severity NORMAL.\n+        :param radon_ranks_major:     The ranks (given by radon) to\n+                                      treat as severity MAJOR.\n         \"\"\"\n         severity_map = {\n             RESULT_SEVERITY.INFO: radon_ranks_info,\n             RESULT_SEVERITY.NORMAL: radon_ranks_normal,\n             RESULT_SEVERITY.MAJOR: radon_ranks_major\n         }\n+\n+        if cyclomatic_complexity is None:\n+            logging.warning('The settings `radon_ranks_info`, '\n+                            '`radon_ranks_normal` and `radon_ranks_major`'\n+                            ' are deprecated. Please use '\n+                            '`cyclomatic_complexity` instead.')\n+\n         for visitor in radon.complexity.cc_visit(''.join(file)):\n             rank = radon.complexity.cc_rank(visitor.complexity)\n             severity = None\n             for result_severity, rank_list in severity_map.items():\n                 if rank in rank_list:\n                     severity = result_severity\n-            if severity is None:\n+\n+            if (cyclomatic_complexity and\n+                    visitor.complexity <= cyclomatic_complexity):\n                 continue\n+            elif (cyclomatic_complexity is None and\n+                    severity is None):\n+                continue\n+\n+            if cyclomatic_complexity is not None:\n+                severity = RESULT_SEVERITY.MAJOR", "created_at": "2018-04-17T04:25:02Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk1MDM0MA==", "fields": {"body": "add a space before the {", "diff": "@@ -449,7 +449,7 @@ class docs:\n                 return unformattedNumber.substring(6,10);\n             }\n         }\n-        public class Customer\u2026\n+        public class Customer{", "created_at": "2018-04-17T04:38:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTkyMDk0OQ==", "fields": {"body": "use None for no setting. (and you'll need to adjust the setting type annotation to allow that.", "diff": "@@ -18,39 +19,56 @@ class RadonBear(LocalBear):\n     CAN_DETECT = {'Complexity'}\n \n     def run(self, filename, file,\n-            radon_ranks_info: typed_list(str) = (),\n-            radon_ranks_normal: typed_list(str) = ('C', 'D'),\n-            radon_ranks_major: typed_list(str) = ('E', 'F'),\n-            ):\n+            cyclomatic_complexity: int=-1,", "created_at": "2018-04-17T00:12:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTkzMzEzNQ==", "fields": {"body": "To be useful, we need to report to the user which bear it was.  The only way to do that is raise an exception here, and catch it somewhere higher.\nWould be good to have separate exception for line 0 and column 0, to make it easier to find the source of the problem.", "diff": "@@ -21,6 +23,10 @@ def __init__(self, line: (int, None)=None, column: (int, None)=None):\n         if line is None and column is not None:\n             raise ValueError('A column can only be set if a line is set.')\n \n+        if line == 0 or column == 0:\n+            logging.warning('line or column offset should not be 0. '\n+                            'Please report this to developers.')", "created_at": "2018-04-17T01:53:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw==", "fields": {"body": "Just do multiple variable on a single destructuring line { a, b, c }", "diff": "@@ -9,17 +9,16 @@ const wdk = require('wikidata-sdk')\n const cheerio = require('cheerio')\n \n const { GITHUB_REPO_INFO_QUERY } = require('./queries')\n+const { GITHUB_SEARCH_ORG_QUERY } = require('./queries')\n+const { GITHUB_USER_INFO_QUERY } = require('./queries')", "created_at": "2018-04-17T11:51:49Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1ODYyMA==", "fields": {"body": "we've had a syntax change in pycodestyle.  Please add spaces around the equals.", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str)=(),\n+                         enable_all: bool=False,\n+                         disable: typed_list(str)=(),\n+                         disable_all: bool=False,\n+                         gometalinter_config_file: str='',", "created_at": "2018-04-18T09:08:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1OTQzMQ==", "fields": {"body": "please do not use line continuation symbol \\.", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str)=(),\n+                         enable_all: bool=False,\n+                         disable: typed_list(str)=(),\n+                         disable_all: bool=False,\n+                         gometalinter_config_file: str='',\n+                         ignore_config: bool=False):\n+        \"\"\"\n+        :param enable:\n+            List of linters to enable.\n+            Some linters are disabled by default. Refer goo.gl/gMirRv\n+        :param enable_all:\n+            Enable all supported linters.\n+        :param disable:\n+            List of linters to disable.\n+        :param disable_all:\n+            Disable all supported linters.\n+        :param gometalinter_config_file:\n+            A JSON configuration file for gometalinter.\n+            It overrides ``.gometalinter.json`` which is picked up by\n+            default, if present.\n+        :param ignore_config:\n+            Ignores configuration files, if present.\n+            Can't be used together with ``gometalinter_config_file``.\n+        \"\"\"\n+        # Arguments are parsed in order.\n+        args = (filename,)\n+\n+        if (enable and enable_all) or \\", "created_at": "2018-04-18T09:10:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1OTczNA==", "fields": {"body": "subsequent if condition lines should always be indented 8 or more, so they do not line up with the block inside the if", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str)=(),\n+                         enable_all: bool=False,\n+                         disable: typed_list(str)=(),\n+                         disable_all: bool=False,\n+                         gometalinter_config_file: str='',\n+                         ignore_config: bool=False):\n+        \"\"\"\n+        :param enable:\n+            List of linters to enable.\n+            Some linters are disabled by default. Refer goo.gl/gMirRv\n+        :param enable_all:\n+            Enable all supported linters.\n+        :param disable:\n+            List of linters to disable.\n+        :param disable_all:\n+            Disable all supported linters.\n+        :param gometalinter_config_file:\n+            A JSON configuration file for gometalinter.\n+            It overrides ``.gometalinter.json`` which is picked up by\n+            default, if present.\n+        :param ignore_config:\n+            Ignores configuration files, if present.\n+            Can't be used together with ``gometalinter_config_file``.\n+        \"\"\"\n+        # Arguments are parsed in order.\n+        args = (filename,)\n+\n+        if (enable and enable_all) or \\\n+           (disable and disable_all) or \\", "created_at": "2018-04-18T09:11:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA==", "fields": {"body": "since rultor died pre tag hasn't been updated for coala. Hardly likely it's done for coala quick start. You must remove this.", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre", "created_at": "2018-04-19T06:45:05Z", "last_edited_at": "2018-04-19T06:47:36Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw==", "fields": {"body": "coala-quickstart coala Quickstart\n\"Generating a .coafile using coala-quickstart\" sounds better", "diff": "@@ -27,6 +27,7 @@ Welcome to the coala documentation!\n    Installing coala <Users/Install>\n    Getting Started with coala <Users/Tutorial>\n    Writing a coala Configuration File (coafile and coarc) <Users/coafile>\n+   Using coala Quickstart to Generate a .coafile <Users/coala_quickstart.rst>", "created_at": "2018-04-19T06:50:10Z", "last_edited_at": "2018-04-19T06:50:27Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA==", "fields": {"body": "this tool called", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called", "created_at": "2018-04-19T06:54:42Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw==", "fields": {"body": "use it, to", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.", "created_at": "2018-04-19T06:55:14Z", "last_edited_at": "2018-04-19T06:56:51Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ==", "fields": {"body": "this doesn't seem much of a feature, you can add automatic detection of bear settings instead of this", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your", "created_at": "2018-04-19T06:58:02Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA==", "fields": {"body": "then", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages", "created_at": "2018-04-19T07:02:44Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA==", "fields": {"body": "After that you will --> You will now", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears", "created_at": "2018-04-19T07:02:27Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ==", "fields": {"body": "good to go --> done!", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are good to go.", "created_at": "2018-04-19T07:03:52Z", "last_edited_at": "2018-04-19T07:07:54Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA==", "fields": {"body": "cli -> CLI", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with", "created_at": "2018-04-19T07:25:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ==", "fields": {"body": "new paragraph for \"It ...\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages", "created_at": "2018-04-19T07:25:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA==", "fields": {"body": "\"fire up\" -> \"execute\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's", "created_at": "2018-04-19T07:27:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA==", "fields": {"body": "shouldnt editing .coafile be done before running coala?", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's\n+root:\n+\n+::\n+\n+    $ coala\n+\n+You can also open the .coafile in your favorite editor and edit the settings", "created_at": "2018-04-19T07:27:28Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA==", "fields": {"body": "you add the clone, cd and then pip install . method for latest development version", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+", "created_at": "2018-04-19T07:32:45Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjkzMzM4Mg==", "fields": {"body": "Then we have reviewers telling newcomers to close their PRs, even if the PR is good and can be merged quickly.\nYou've raised an important issue, which should be in this guide, but it needs to be a separate addition with lots of careful wording", "diff": "@@ -105,6 +105,11 @@ For the Reviewers\n \n -  All the pull requests waiting to be reviewed can be found at :\n    https://coala.io/review.\n+-  Check the commit message.", "created_at": "2018-04-20T02:41:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIwOTkxOA==", "fields": {"body": "That feels like a bug in process_output_corrected.  If there was an error, the linter can only emit \\n on stdout.  It shouldnt decide that means the file should be blanked.", "diff": "@@ -23,13 +23,17 @@ class PrettierLintBear:\n                   'Multi-line objects'}\n     SEE_MORE = 'https://prettier.io/'\n \n-    regex = re.compile(r'L(?P<line>\\d+)C(?P<column>\\d+): (?P<message>.*)')\n+    regex = re.compile(\n+        r'(?P<message>SyntaxError:.*) '\n+        r'\\((?P<line>\\d+):(?P<column>\\d+)\\)')\n \n     def process_output(self, output, filename, file):\n         stdout, stderr = output\n-        yield from self.process_output_corrected(stdout, filename, file)\n-        yield from self.process_output_regex(stderr, filename, file,\n-                                             self.regex)\n+        if stdout == '\\n':", "created_at": "2018-04-21T13:33:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxMTM5OA==", "fields": {"body": "Following the examples above and below, put spaces around = would be better?", "diff": "@@ -62,6 +84,7 @@ def __init__(self,\n                  diffs: (dict, None) = None,\n                  confidence: int = 100,\n                  aspect: (aspectbase, None) = None,\n+                 actions: list=[],", "created_at": "2018-04-21T14:45:16Z", "last_edited_at": null, "author": "yzgyyang", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxMTY2NQ==", "fields": {"body": "IMO although this is compact, it could be more readable and consistent if you just use\nif type(value == list):\n    ...\nelse:\n    ...", "diff": "@@ -129,6 +154,24 @@ def __init__(self,\n         if self.aspect and not self.additional_info:\n             self.additional_info = '{} {}'.format(\n                 aspect.docs.importance_reason, aspect.docs.fix_suggestions)\n+        self._actions = actions\n+\n+    @property\n+    def actions(self):\n+        return tuple(self._actions)\n+\n+    @actions.setter\n+    @enforce_signature\n+    def actions(self, value: (ResultAction, list)):\n+        self._actions = value if type(value) == list else [value]", "created_at": "2018-04-21T14:56:08Z", "last_edited_at": null, "author": "yzgyyang", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg==", "fields": {"body": "@manankalra Looks good. \ud83d\udc4d\nI also agree with you that adding \"on_success: never\" should be there as well. Gitmate automatically approves the PR if all CI passes, so there should ideally be no message in that case. \ud83d\ude04", "diff": "@@ -11,6 +11,7 @@ script:\n \n notifications:\n   email: false\n+  webhooks: https://www.travisbuddy.com/", "created_at": "2018-04-24T04:40:15Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA==", "fields": {"body": "I don't think it's necessary to convert method other than event listener to class properties, this is still this class because it's not called from event listener.\nRelated https://stackoverflow.com/questions/44423947/javascript-class-methods-versus-properties#comment75847321_44424064", "diff": "@@ -26,11 +25,13 @@ const FilterCategory = React.createClass({\n       }\n       return true;\n     });\n-  },\n-  onFilterInputChange(e) {\n+  };\n+\n+  onFilterInputChange = (e) => {\n     this.setState({filterStr: e.currentTarget.value});\n-  },\n-  renderItem(item) {\n+  };\n+\n+  renderItem = (item) => {", "created_at": "2018-05-01T15:19:21Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0OTA4Mg==", "fields": {"body": "This can be converted to functional component.\nAll component with only render method can be functional component, I'll stop marking.", "diff": "@@ -49,9 +49,9 @@ const ListGroupWithMore = React.createClass({\n       </BS.ListGroup>\n     );\n   }\n-});\n+}\n \n-const RepoItem = React.createClass({\n+class RepoItem extends React.Component {\n   render() {", "created_at": "2018-05-01T15:28:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ==", "fields": {"body": "Could just be me, but I much prefer extends Component over extends React.Component. (i.e. importing Component using import React, {Component} from 'react')", "diff": "@@ -6,7 +6,7 @@ import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n+class AnonymousModal extends React.Component {", "created_at": "2018-05-01T16:28:59Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI4OTY1OA==", "fields": {"body": "Yeah, let's do that.\nAdditionally, babel-plugin-react-require can be used to auto import React when the file only has functional component that doesn't need to extends from Component", "diff": "@@ -6,7 +6,7 @@ import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n+class AnonymousModal extends React.Component {", "created_at": "2018-05-01T18:04:57Z", "last_edited_at": "2018-05-01T18:05:18Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTM5ODQ3MA==", "fields": {"body": "Spotted something,\nWe do set the path in conf.py\nbut since we do the import before setting the path, the path being set is actually useless", "diff": "@@ -0,0 +1,3 @@\n+[build]\n+  publish = \"docs/_build/html\"\n+  command = \"pip install -r docs-requirements.txt && export PYTHONPATH=$(pwd) && python setup.py docs\"", "created_at": "2018-05-02T05:50:48Z", "last_edited_at": "2018-05-02T05:51:11Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTU0NDA3Mg==", "fields": {"body": "Oh\nSo does setting that path serve any other purpose then ?\nIf not then should we remove that as well (possible the removal would be a non-standard inclusion, but we get rid of some un-used code maybe) ?", "diff": "@@ -0,0 +1,3 @@\n+[build]\n+  publish = \"docs/_build/html\"\n+  command = \"pip install -r docs-requirements.txt && export PYTHONPATH=$(pwd) && python setup.py docs\"", "created_at": "2018-05-02T15:44:44Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5MzQ1MA==", "fields": {"body": "Sorry for nitpicking. For consistency with the other test cases, I think it's better to not name the Section. So just Section() should be enough.", "diff": "@@ -0,0 +1,115 @@\n+import os\n+\n+from bears.go.GoMetaLintBear import GoMetaLintBear\n+from queue import Queue\n+from unittest.case import skipIf\n+from shutil import which\n+\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+\n+\n+def get_testfile_path(testfile):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'gometalinter_test_files',\n+                        testfile)\n+\n+\n+def load_testfile(filename):\n+    with open(get_testfile_path(filename)) as file:\n+        contents = file.read().splitlines(True)\n+    return contents\n+\n+\n+@skipIf(which('go') is None, 'go is not installed')\n+class GoMetaLintBearTest(LocalBearTestHelper):\n+\n+    def setUp(self):\n+        self.section = Section('GoMetaLinter')", "created_at": "2018-05-03T13:18:06Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5MzY5NA==", "fields": {"body": "Sorry for nitpicking. I think get_test_file_path(filename): is better.", "diff": "@@ -0,0 +1,115 @@\n+import os\n+\n+from bears.go.GoMetaLintBear import GoMetaLintBear\n+from queue import Queue\n+from unittest.case import skipIf\n+from shutil import which\n+\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+\n+\n+def get_testfile_path(testfile):", "created_at": "2018-05-03T13:18:48Z", "last_edited_at": "2018-05-03T13:19:09Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5Mzg4NQ==", "fields": {"body": "Sorry for nitpicking. I think load_test_file is better.", "diff": "@@ -0,0 +1,115 @@\n+import os\n+\n+from bears.go.GoMetaLintBear import GoMetaLintBear\n+from queue import Queue\n+from unittest.case import skipIf\n+from shutil import which\n+\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+\n+\n+def get_testfile_path(testfile):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'gometalinter_test_files',\n+                        testfile)\n+\n+\n+def load_testfile(filename):", "created_at": "2018-05-03T13:19:32Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5NDAyNg==", "fields": {"body": "Don't check for go, check for gometalinter", "diff": "@@ -0,0 +1,115 @@\n+import os\n+\n+from bears.go.GoMetaLintBear import GoMetaLintBear\n+from queue import Queue\n+from unittest.case import skipIf\n+from shutil import which\n+\n+from coalib.testing.LocalBearTestHelper import execute_bear\n+from coalib.testing.LocalBearTestHelper import LocalBearTestHelper\n+from coalib.results.Result import Result\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+\n+\n+def get_testfile_path(testfile):\n+    return os.path.join(os.path.dirname(__file__),\n+                        'gometalinter_test_files',\n+                        testfile)\n+\n+\n+def load_testfile(filename):\n+    with open(get_testfile_path(filename)) as file:\n+        contents = file.read().splitlines(True)\n+    return contents\n+\n+\n+@skipIf(which('go') is None, 'go is not installed')", "created_at": "2018-05-03T13:19:59Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTgyOTg5NA==", "fields": {"body": "I suspect that the only reasons for it was so that \"setup.py docs\" would work.\nIt used to work.  See 687ec1b which broke it.  And #3785 for the original issue.\nProbably broken atm.  I've raised https://gitlab.com/coala/mobans/issues/8\nUntil we have a verified solution again, that line should stay in the local docs/conf.py .  Worst case it will disappear when we mobanise conf.py.", "diff": "@@ -0,0 +1,3 @@\n+[build]\n+  publish = \"docs/_build/html\"\n+  command = \"pip install -r docs-requirements.txt && export PYTHONPATH=$(pwd) && python setup.py docs\"", "created_at": "2018-05-03T15:00:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTQ1OA==", "fields": {"body": "Maybe we could leave this as a separate issue? If we decide to move back to normal methods, we need careful reviews. Errors are likely to be missed in this large PR.\nIf I move some inappropriate methods back to use normal class methods, there would be no diff for that method in this PR, which is almost impossible for reviewers to detect if I make any errors.", "diff": "@@ -26,11 +25,13 @@ const FilterCategory = React.createClass({\n       }\n       return true;\n     });\n-  },\n-  onFilterInputChange(e) {\n+  };\n+\n+  onFilterInputChange = (e) => {\n     this.setState({filterStr: e.currentTarget.value});\n-  },\n-  renderItem(item) {\n+  };\n+\n+  renderItem = (item) => {", "created_at": "2018-05-05T01:58:12Z", "last_edited_at": "2018-05-05T02:02:22Z", "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTY0Nw==", "fields": {"body": "You made the your own getTime function below.", "diff": "@@ -1,64 +1,211 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: moment(node.updatedAt).toDate().getTime(),", "created_at": "2018-05-05T02:07:31Z", "last_edited_at": "2018-05-05T02:09:28Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTcwMA==", "fields": {"body": "Can be turned into arrow function and put at the very top.", "diff": "@@ -1,64 +1,211 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: moment(node.updatedAt).toDate().getTime(),\n+        issue: {\n+          htmlUrl: node.url,\n+          number: node.number,\n+          title: node.title,\n+          body: node.bodyText,\n+          comments: node.comments.totalCount,\n+          updatedAt: node.updatedAt,\n+          state: node.state,\n+          user: {\n+            login: node.author ? node.author.login : null,\n+            avatarUrl: node.author? node.author.avatarUrl : null\n+          },\n+          milestone: {\n+            title: node.milestone ? node.milestone.title : null,\n+            createdAt: node.milestone? node.milestone.createdAt : null,\n+            dueOn: node.milestone? node.milestone.dueOn : null,\n+            state: node.milestone? node.milestone.state : null,\n+            htmlUrl: node.milestone? node.milestone.url : null,\n+            description: node.milestone? node.milestone.description : null,\n+          },\n+          labels: node.labels.nodes.map(label => ({\n+            name: label.name,\n+            color: label.color\n+          }))\n         }\n-      })\n+      };\n+      if (!isIssue) {\n+        info.pullRequest = {\n+          htmlUrl: node.url\n+        };\n+      }\n+      return info;\n+    });\n+    data = data.concat(result);\n+    if (hasPreviousPage && (pageCount < pageThreshold || pageThreshold == -1)) {\n+      return fetchNextPage(owner, name, isIssue, data,\n+        cursor, pageCount);\n+    } else {\n+      return data;\n     }\n+  } else {\n+    console.log('Warning: no available data. owner:', owner, 'name:', name,\n+      'isIssue:', isIssue, 'pageCount:', pageCount);\n+    return data;\n+  }\n+}\n \n-    return Promise.all([\n-      dump('issues'),\n-      dump('repoLabels'),\n-      dump('repositories'),\n-    ])\n-  })\n-\n-  cache = {\n-    issues: cache[0],\n-    repoLabels: cache[1],\n-    repositories: cache[2],\n+async function fetchIssue(owner, names, isIssue) {\n+  //return Promise.all(names.map(async name => {\n+  let result = [];\n+  for (const name of names) {\n+    try {\n+      result = result.concat(\n+        await fetchNextPage(owner, name, isIssue, [], null, 0));\n+    } catch (error) {\n+      console.log('repo owner:', owner, 'repo name:', name,\n+        'is issue:', isIssue, 'error:', error);\n+    }\n   }\n+  return result;\n+}\n+\n+function fetchLabel(owner, names) {\n+  return Promise.all(names.map(async name => {\n+    try {\n+      const { data } = await client.query(GITHUB_LABEL_INFO_QUERY,  {owner, name});\n+      let result = [];\n+      if (data && data.repository) {\n+        result = data.repository.labels.nodes.map(node => ({\n+          id: node.id,\n+          name: node.name,\n+          color: node.color,\n+          default: node.isDefault,\n+        }));\n+      }\n+      return {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result,\n+      };\n+    } catch (error) {\n+      console.log(error);\n+    }\n+  }));\n+}\n+\n+function getTime(timeString) {\n+  return moment(timeString).toDate().getTime();", "created_at": "2018-05-05T02:10:33Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI1MTIwNw==", "fields": {"body": "oh ... that is at the repo level .. hmm.. this might be ok...\ngit grep updatedAtMs\nscript/fetch-issues.js:        updatedAtMs: moment(node.updatedAt).toDate().getTime(),\nsrc/database.js:      updatedAtMs: moment(issue.updatedAt).toDate().getTime(),", "diff": "@@ -1,64 +1,208 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n+\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+const getTime = timeString => moment(timeString).toDate().getTime();\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: getTime(node.updatedAt),", "created_at": "2018-05-05T03:38:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NDQyNA==", "fields": {"body": "Oh\nCool\nThanks @ksdme", "diff": "@@ -34,14 +34,22 @@ class GitCommitBear(GlobalBear):\n             'issue': r'(?:\\w+/\\w+)?#(\\S+)',\n             'full issue': r'https?://gitlab\\S+/issues/(\\S+)',\n         },\n+        'bitbucket': {\n+            'issue': r'#(\\S+)',\n+            'full issue': None,\n+        },\n     }\n     SUPPORTED_HOST_KEYWORD_REGEX = {\n         'github': (r'[Cc]lose[sd]?'\n                    r'|[Rr]esolve[sd]?'\n                    r'|[Ff]ix(?:e[sd])?'),\n         'gitlab': (r'[Cc]los(?:e[sd]?|ing)'\n                    r'|[Rr]esolv(?:e[sd]?|ing)'\n-                   r'|[Ff]ix(?:e[sd]|ing)?')\n+                   r'|[Ff]ix(?:e[sd]|ing)?'),\n+        'bitbucket': (r'[Cc]los(?:e[sd]?|ing)'\n+                      r'|[Rr]esolv(?:e[sd]?|ing)'\n+                      r'|[Ff]ix(?:e[sd]|ing)?'\n+                      r')(?:(?:[ \\t]*(?:bug|issue|ticket)?)?'),", "created_at": "2018-05-06T15:32:17Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NTkzNQ==", "fields": {"body": "Opened https://bitbucket.org/site/master/issues/16240/issue-referencing-on-bitbucket-cloud\nAnd off to support fixes bug#11 and fixes bug #11", "diff": "@@ -34,14 +34,22 @@ class GitCommitBear(GlobalBear):\n             'issue': r'(?:\\w+/\\w+)?#(\\S+)',\n             'full issue': r'https?://gitlab\\S+/issues/(\\S+)',\n         },\n+        'bitbucket': {\n+            'issue': r'#(\\S+)',\n+            'full issue': None,\n+        },\n     }\n     SUPPORTED_HOST_KEYWORD_REGEX = {\n         'github': (r'[Cc]lose[sd]?'\n                    r'|[Rr]esolve[sd]?'\n                    r'|[Ff]ix(?:e[sd])?'),\n         'gitlab': (r'[Cc]los(?:e[sd]?|ing)'\n                    r'|[Rr]esolv(?:e[sd]?|ing)'\n-                   r'|[Ff]ix(?:e[sd]|ing)?')\n+                   r'|[Ff]ix(?:e[sd]|ing)?'),\n+        'bitbucket': (r'[Cc]los(?:e[sd]?|ing)'\n+                      r'|[Rr]esolv(?:e[sd]?|ing)'\n+                      r'|[Ff]ix(?:e[sd]|ing)?'\n+                      r')(?:(?:[ \\t]*(?:bug|issue|ticket)?)?'),", "created_at": "2018-05-06T16:33:10Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQ0NDY4OA==", "fields": {"body": "I just transformed it into the functional component. You are right, the undefined onClickIcon has nothing to do with whether it is using class or function.\nFiled another issue #29 for the undefined onClickIcon.", "diff": "@@ -10,7 +10,7 @@ import GithubFlavoredMarkdown from './gfm';\n import Loadable from './loadable';\n import ColoredIcon from './colored-icon';\n \n-const IssueOrPullRequestBlurb = React.createClass({\n+class IssueOrPullRequestBlurb extends Component {", "created_at": "2018-05-07T14:42:41Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQwOTc5MQ==", "fields": {"body": "This will introduce error, since it's functional component and has no this.setState\nhttps://jsbin.com/dodalubaxo/edit?html,js,output", "diff": "@@ -1,45 +1,42 @@\n-import React from 'react';\n import * as BS from 'react-bootstrap';\n import {GearIcon} from 'react-octicons';\n \n import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n-  render() {\n-    const onHide = () => {\n-      hasAlreadyShownAnonymousModal = true;\n-      this.setState({ showModal: false});\n-    };\n-    let showModal;\n-    if (CurrentUserStore.getUser()) {\n-      showModal = false;\n-    } else {\n-      showModal = !hasAlreadyShownAnonymousModal;\n-    }\n+function AnonymousModal() {\n+  const onHide = () => {\n+    hasAlreadyShownAnonymousModal = true;\n+    this.setState({ showModal: false});", "created_at": "2018-05-07T12:36:34Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg==", "fields": {"body": "Ah ok. We'll leave it as it is.\nBut does it even matter? Since this.onClickIcon is undefined whether it is using class or functional. It would lead to an error either way.\nProbably open an issue after finding where the component is located in the UI, if there's an error.", "diff": "@@ -10,7 +10,7 @@ import GithubFlavoredMarkdown from './gfm';\n import Loadable from './loadable';\n import ColoredIcon from './colored-icon';\n \n-const IssueOrPullRequestBlurb = React.createClass({\n+class IssueOrPullRequestBlurb extends Component {", "created_at": "2018-05-07T12:52:39Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU5NjQ4NA==", "fields": {"body": "Please note that a 'split line' type of change should only be done in this PR where the change already contains a non-whitespace modification to the line.\nWe dont want git diff -w for this patch getting extra changes which are line splits.\nThere are only a few cases in this PR where the very long line is already changing syntax, so we may as well also improve the layout a little.", "diff": "@@ -10,28 +11,32 @@ import Loadable from './loadable';\n import Progress from '../progress';\n import Database from '../database';\n \n-const ProgressView = React.createClass({\n-  getInitialState() {\n-    return {message: null, ticks: 0, max: 0};\n-  },\n+class ProgressView extends Component {\n+  state = {message: null, ticks: 0, max: 0};\n+\n   componentDidMount() {\n     const {progress} = this.props;\n     progress.on('start', this.onStart);\n     progress.on('tick', this.onTick);\n     progress.on('stop', this.onStop);\n-  },\n+  }\n+\n   componentWillUnmount() {\n     const {progress} = this.props;\n     progress.off('start', this.onStart);\n     progress.off('tick', this.onTick);\n     progress.off('stop', this.onStop);\n-  },\n-  onStart(context) { this.setState({max: this.props.progress.max, message: 'Start: ' + context}); },\n-  onTick(context, ticks, max) {\n+  }\n+\n+  onStart = (context) => { this.setState({max: this.props.progress.max, message: 'Start: ' + context}); };\n+\n+  onTick = (context, ticks, max) => {\n     this.setState({ticks: ticks, max: max, message: context});\n     this.forceUpdate();\n-  },\n-  onStop(context) { this.setState({ticks: this.props.progress.ticks, max: this.props.progress.max, message: 'Finished: ' + context}); },\n+  };\n+\n+  onStop = (context) => { this.setState({ticks: this.props.progress.ticks, max: this.props.progress.max, message: 'Finished: ' + context}); };", "created_at": "2018-05-08T01:31:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjYxNTMxNw==", "fields": {"body": "done", "diff": "@@ -119,8 +122,6 @@ def test_system_coafile_parsing(self):\n         Constants.system_coafile = tmp", "created_at": "2018-05-08T04:40:23Z", "last_edited_at": null, "author": "siddhant-curious", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjYxNjQ2NQ==", "fields": {"body": "Yes it does. This is one of the things I was asking on the channel. I obviously have to fix it; on it.", "diff": "@@ -119,8 +122,6 @@ def test_system_coafile_parsing(self):\n         Constants.system_coafile = tmp", "created_at": "2018-05-08T04:53:19Z", "last_edited_at": null, "author": "siddhant-curious", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNDY0OA==", "fields": {"body": "Are you certain that the coverage will never be 100% locally? otherwise it should be 'You may not get a test coverage of 100% locally.'?", "diff": "@@ -56,8 +56,12 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You will not get a test coverage of 100% locally! - the coverage is", "created_at": "2018-05-09T11:02:05Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNTU4OQ==", "fields": {"body": "I think this line (the coverage on the website is merged for several python versions) is redundant and isn't making things clear enough. What do you think about removing it for the sake of the next line?", "diff": "@@ -56,8 +56,12 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You will not get a test coverage of 100% locally! - the coverage is\n+    measured across builds against several python versions. The coverage", "created_at": "2018-05-09T11:06:23Z", "last_edited_at": "2018-05-09T11:19:26Z", "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNjEzMQ==", "fields": {"body": "merged -> merged results & even without -> even without", "diff": "@@ -56,8 +56,12 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You will not get a test coverage of 100% locally! - the coverage is\n+    measured across builds against several python versions. The coverage\n+    published on `codecov.io <https://codecov.io/gh/coala/>`__ (GitHub\n+    Projects) and `codecov.io <https://codecov.io/gl/coala/>`__ (GitLab\n+    Projects) are actually merged for several python versions. Thus, your\n+    test coverage can 'pass' even without reaching 100% .", "created_at": "2018-05-09T11:09:25Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE0MzIyMg==", "fields": {"body": "whatever explanation gets the job done \ud83d\udc4d\nbut it shouldn't be wrong", "diff": "@@ -56,8 +56,14 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You may not get a test coverage of 100% locally. The coverage\n+    published on `codecov.io <https://codecov.io/gh/coala/>`__ (GitHub\n+    Projects) and `codecov.io <https://codecov.io/gl/coala/>`__ (GitLab\n+    Projects) are actually merged results for several python versions.\n+    Also, the results are merged from different OS. Appveyor results\n+    provide coverage of Windows specific lines, and Travis/Circle\n+    provide coverage of Unix specific lines. Thus, your test coverage\n+    can 'pass' without reaching 100% .", "created_at": "2018-05-09T19:01:38Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE1MDI0MA==", "fields": {"body": "The info that @ishanSrt is providing is also very important, as developers often forget to write tests, and that is typically why they will see test coverage not reach 100%.  But for that to happen, they wont have run pytest, because it will load the plugins mentioned in setup.cfg, which includes coverage, and it will fail locally if they havent written the tests yet.\nThe solution is not for the developer to add #pragma: no cover.  The code reviewer will usually reject that.  And soon we'll have CI automatically reject that, except in the most limited of cases.\nUsually the correct solution is write some tests.", "diff": "@@ -56,8 +56,14 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You may not get a test coverage of 100% locally. The coverage\n+    published on `codecov.io <https://codecov.io/gh/coala/>`__ (GitHub\n+    Projects) and `codecov.io <https://codecov.io/gl/coala/>`__ (GitLab\n+    Projects) are actually merged results for several python versions.\n+    Also, the results are merged from different OS. Appveyor results\n+    provide coverage of Windows specific lines, and Travis/Circle\n+    provide coverage of Unix specific lines. Thus, your test coverage\n+    can 'pass' without reaching 100% .", "created_at": "2018-05-09T19:28:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzEzNjczMQ==", "fields": {"body": "this doesn't seem like the correct explanation for why the coverage is not full.\nits due to\n\npragma no cover\nlack of tests, I stumble upon writing bad code and still passing tests every now and then and reviews correcting me for it. I assume everything in coala is not tested and the initial part of it was merged without adding tests. should confirm this by a maintainer.", "diff": "@@ -56,8 +56,14 @@ To run our tests, you can also use ``python3 setup.py test``\n \n .. note::\n \n-    You will not get a test coverage of 100% - the coverage on the\n-    website is merged for several python versions.\n+    You may not get a test coverage of 100% locally. The coverage\n+    published on `codecov.io <https://codecov.io/gh/coala/>`__ (GitHub\n+    Projects) and `codecov.io <https://codecov.io/gl/coala/>`__ (GitLab\n+    Projects) are actually merged results for several python versions.\n+    Also, the results are merged from different OS. Appveyor results\n+    provide coverage of Windows specific lines, and Travis/Circle\n+    provide coverage of Unix specific lines. Thus, your test coverage\n+    can 'pass' without reaching 100% .", "created_at": "2018-05-09T18:38:44Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzMyODIxMA==", "fields": {"body": "add trailing comma, and put ): on the next line; see other bears", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str) = (),\n+                         enable_all: bool = False,\n+                         disable: typed_list(str) = (),\n+                         disable_all: bool = False,\n+                         gometalinter_config_file: str = '',\n+                         ignore_config: bool = False):", "created_at": "2018-05-10T13:24:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzMyOTY1NQ==", "fields": {"body": "use full URL.", "diff": "@@ -0,0 +1,86 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.GoRequirement import GoRequirement\n+from coalib.results.RESULT_SEVERITY import RESULT_SEVERITY\n+from coalib.settings.Setting import typed_list\n+\n+\n+@linter(executable='gometalinter',\n+        output_format='regex',\n+        output_regex=r'\\w+\\.go:'\n+                     r'(?P<line>\\d+):'\n+                     r'(?P<column>\\d*):'\n+                     r'(?P<severity>[a-z]+): '\n+                     r'(?P<message>.*) '\n+                     r'(?P<additional_info>\\([a-z]+\\))',\n+        severity_map={'error': RESULT_SEVERITY.MAJOR,\n+                      'warning': RESULT_SEVERITY.NORMAL})\n+class GoMetaLintBear:\n+    \"\"\"\n+    Lints your Go files!\n+    Concurrently runs a number of Go lint tools.\n+    \"\"\"\n+\n+    LANGUAGES = {'Go'}\n+    REQUIREMENTS = {GoRequirement(\n+        package='github.com/alecthomas/gometalinter', flag='-u')}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+    SEE_MORE = 'http://gopkg.in/alecthomas/gometalinter.v2'\n+\n+    def create_arguments(self, filename, file, config_file,\n+                         enable: typed_list(str) = (),\n+                         enable_all: bool = False,\n+                         disable: typed_list(str) = (),\n+                         disable_all: bool = False,\n+                         gometalinter_config_file: str = '',\n+                         ignore_config: bool = False):\n+        \"\"\"\n+        :param enable:\n+            List of linters to enable.\n+            Some linters are disabled by default. Refer goo.gl/gMirRv", "created_at": "2018-05-10T13:29:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA==", "fields": {"body": "umm, https://raivaibhav.github.io./GSoC.xml or  https://raivaibhav.github.io/GSoC.xml", "diff": "@@ -125,3 +125,6 @@ name = Saksham Bansal\n \n [https://charlieyang.me/feed_gsoc.xml]\n name = Guangyuan Yang\n+\n+[https://raivaibhav.github.io./GSoC.xml]", "created_at": "2018-05-10T20:24:53Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODU2NjgxMA==", "fields": {"body": "Ugly indentation", "diff": "@@ -93,9 +93,11 @@ def test_create_issue_cmd(self):\n         plugins.labhub.GitHubToken.assert_called_with(None)\n         plugins.labhub.GitLabPrivateToken.assert_called_with(None)\n \n+        # TODO\n+        # Ignoring test assert to prevent build failure for time being\n         # Creating issue in private chat\n-        testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'You\\'re not allowed')\n+        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+        #                      'You\\'re not allowed')", "created_at": "2018-05-16T09:52:31Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ5NTM3MA==", "fields": {"body": "This is a rather inelegant, maybe put up an array of author and comment body to ignore?\nWe fill it with sensible default, and make it so we can add more via env var.", "diff": "@@ -141,14 +148,72 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          if (node.bodyText.search('@gitmate-bot') !== -1) {\n+            // gitmate-bot instructions\n+            flag = false;\n+          } else if (node.bodyText.search('@rultor') !== -1) {\n+            // rultor instructions\n+            flag = false;\n+          } else if (node.bodyText.match(/^(unack|ack)/g)) {\n+            // ack and unack messages\n+            flag = false;\n+          } else if (node.author && node.author.login === 'gitmate-bot') {\n+            // comments by gitmate-bot\n+            flag = false;\n+          } else if (node.author && node.author.login === 'rultor') {", "created_at": "2018-05-21T04:59:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTk0MzQ0OQ==", "fields": {"body": "fyi you can also do repositories instead of repositories: repositories.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recent_issues = [];\n+  const today = new Date();\n+  const day_last_month = today.setMonth(today.getMonth() - 1);\n+  for (const issue of issues) {\n+    if (getTime(day_last_month) < issue.updatedAtMs) {\n+      recent_issues.push(issue);\n+    }\n+  }\n+  return recent_issues;\n+}\n+\n ;(async () => {\n   let issueInfo, prInfo, labelInfo;\n   try {\n-    // Don't fetch them concurrently, otherwise some queries may fail \n+    // Don't fetch them concurrently, otherwise some queries may fail\n     issueInfo = await fetchIssue(repoOwner, repoNames, true);\n-    prInfo = await fetchIssue(repoOwner, repoNames, false); \n-    labelInfo = await fetchLabel(repoOwner, repoNames); \n+    labelInfo = await fetchLabel(repoOwner, repoNames);\n+    prInfo = await fetchIssue(repoOwner, repoNames, false);\n   } catch (error) {\n     console.log(error);\n   };\n   const issues = issueInfo.concat(prInfo);\n+  const repositories = generateRepoInfo(repoOwner, repoNames, issues);\n   const result = {\n     issues: issues,\n     repoLabels: labelInfo,\n-    repositories: generateRepoInfo(repoOwner, repoNames, issues)\n+    repositories: repositories\n+  };\n+  const recent_result = {\n+    issues: filterRecent(issues),\n+    repoLabels: labelInfo,\n+    repositories: repositories", "created_at": "2018-05-22T15:20:25Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTA0Mw==", "fields": {"body": "I think the project uses camelCase instead of snake_case variable name, need to keep it consistent here.\nenv is okay though.", "diff": "@@ -18,13 +18,28 @@ const GH_GQL_OPTIONS = {\n \n const client = GraphQL(GH_GQL_OPTIONS);\n \n-// number of pages we want to query (default: 20 pages x 100 items)\n+// number of pages we want to query\n // if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n-const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+const pageThreshold = process.env.PAGE_THRESHOLD || -1;\n console.log('page number threshold:', pageThreshold);\n \n+// earliest date we want to query from\n+// GitHub supports reactions since 2016-03-10\n+const earliestDate = process.env.EARLIEST_DATE || '2016-03-10T00:00:00Z';\n+\n const repo = process.env.REPOSITORIES;\n \n+// review will be ignored if it's written by any author specified here\n+// delimiter: space\n+const ignore_review_author = process.env.IGNORE_REVIEW_AUTHOR ||", "created_at": "2018-05-22T14:24:00Z", "last_edited_at": "2018-05-22T14:28:41Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTY5Mw==", "fields": {"body": "Why not Array.forEach ?\n... or Array.reduce", "diff": "@@ -141,22 +159,76 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignore_content of ignore_review_content.split(' ')) {", "created_at": "2018-05-22T14:25:43Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkzNDgzOQ==", "fields": {"body": "I guess just leave it as is, if you're not going to use reduce", "diff": "@@ -141,22 +159,76 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignore_content of ignore_review_content.split(' ')) {", "created_at": "2018-05-22T14:58:46Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAxMDkyMQ==", "fields": {"body": "Could use issues.filter and be made 1 liner.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recentIssues = [];\n+  const today = new Date();\n+  const dayLastMonth = today.setMonth(today.getMonth() - 1);\n+  for (const issue of issues) {\n+    if (getTime(dayLastMonth) < issue.updatedAtMs) {\n+      recentIssues.push(issue);", "created_at": "2018-05-22T18:41:56Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAyNDQwOA==", "fields": {"body": "let is for a variable that's available to be reassigned, push will not reassign the variable, it'll modify the array inside. In this case, keep using const.\nBut see my comment above, you can return the filter result directly instead without making a variable.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recentIssues = [];", "created_at": "2018-05-22T19:27:59Z", "last_edited_at": "2018-05-22T19:30:00Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjU2NQ==", "fields": {"body": "If this is really necessary, it's better to have a DEBUG env var that enable/disable verbose log, otherwise just omit.", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {\n+            rawComments.map((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+              return comment;\n+            });\n+          }\n+        } else {\n+          // for debug\n+          // console.log('pull request does not have reactions. repoOwner:', owner,", "created_at": "2018-05-26T11:36:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0Njc4NA==", "fields": {"body": "Not sure what this is doing, do you mean forEach ?\nmap will create new array.", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {\n+            rawComments.map((comment, index) => {", "created_at": "2018-05-26T11:46:51Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjgzOA==", "fields": {"body": "dayLastMonth never changes, I think it's better to call getTime in the dayLastMonth variable itself.", "diff": "@@ -223,24 +379,47 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  const today = new Date();\n+  const dayLastMonth = today.setMonth(today.getMonth() - 1);\n+  return issues.filter(issue => getTime(dayLastMonth) < issue.updatedAtMs);", "created_at": "2018-05-26T11:52:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjkyNA==", "fields": {"body": "empty array is truthy", "diff": "@@ -141,23 +192,128 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {", "created_at": "2018-05-26T11:57:38Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0OTM2NQ==", "fields": {"body": "Nope, that was intentional. iff = if and only if", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff", "created_at": "2018-05-26T13:53:53Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTAzNzUyNQ==", "fields": {"body": "See #529 (comment)", "diff": "@@ -7,110 +8,87 @@\n \n from plugins.coatils import Coatils\n \n-\n-class TestCoatils(unittest.TestCase):\n-\n-    def setUp(self):\n-        self.testbot = TestBot(extra_plugin_dir='plugins',\n-                               loglevel=logging.ERROR)\n-        self.testbot.start()\n-\n-    def tearDown(self):\n-        self.testbot.stop()\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_total_bears.yaml')\n-    def test_total_bears(self):\n-        self.assertEqual(Coatils.total_bears(),\n-                         102)\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_all_langs.yaml')\n-    def test_all_langs(self):\n-        self.assertEqual(len(Coatils.all_langs()),\n-                         63)\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_contrib.yaml')\n-    def test_contrib_stats(self):\n-        self.testbot.assertCommand('!contrib stats sils',\n-                                    'Commited 2654 commits')\n-        self.testbot.assertCommand('!contrib stats some-non-existent',\n-                                   'stats for some-non-existent not found')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_lang_stats.yaml')\n-    def test_lang_stats(self):\n-        self.testbot.assertCommand('!lang  stats',\n-                                   'coala supports 63 languages')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_bear_stats.yaml')\n-    def test_bear_stats(self):\n-        self.testbot.assertCommand('!bear stats',\n-                                   'There are total 102 bears')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_bear_stats_lang.yaml')\n-    def test_bear_stats_lang(self):\n-        self.testbot.assertCommand('!bear stats python',\n-                                   'There are 17 bears for python language')\n-        self.testbot.assertCommand('!bear stats abc',\n-                                   'No bear exists for abc')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_bear_stats_lang.yaml')\n-    def test_ls_bears(self):\n-        self.testbot.assertCommand('!ls bears r',\n-                                   'Bears for r are')\n-        self.assertIn('RLintBear', self.testbot.pop_message())\n-        self.testbot.assertCommand('!ls bears brainfuck',\n-                                   'No bears found for brainfuck')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_stats.yaml')\n-    def test_stats(self):\n-        self.testbot.assertCommand('!stats',\n-                                   'coala has 102 bears across 63 languages')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_run_coala.yaml')\n-    def test_run_coala(self):\n-        # no results\n-        self.testbot.push_message('!run python SpaceConsistencyBear use_spaces=yes\\n```\\nimport this\\n\\n```')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'coala analysis in progress...')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'Your code is flawless :tada:')\n-        # results and diffs\n-        self.testbot.push_message('!run python PyUnusedCodeBear remove_unused_imports=yes '\n-                                  'PycodestyleBear\\n```\\nimport os\\nimport this\\na=1\\n```')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'coala analysis in progress...')\n-        msg = self.testbot.pop_message()\n-        self.assertIn('Here is what I think is wrong:', msg)\n-        self.assertIn('This file contains unused source code',\n-                      msg)\n-\n-        # ensuring that only one result is yielded\n-        with self.assertRaises(queue.Empty):\n-            next_msg = self.testbot.pop_message()\n-        # error\n-        self.testbot.push_message('!run a b\\n```\\nc\\n```')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'coala analysis in progress...')\n-        self.assertIn('Something went wrong, things to check for',\n-                      self.testbot.pop_message())\n-\n-    def test_construct_settings(self):\n-        self.assertEqual(Coatils.construct_settings('bear1 a=1 b=2 bear2 bear3'),\n-                         {'bear1': {'a': '1', 'b': '2'},\n-                          'bear2': {},\n-                          'bear3': {}})\n-\n-    def test_position(self):\n-        self.assertEqual(Coatils.position(1, 1, 1, 1),\n-                         'At 1:1')\n-        self.assertEqual(Coatils.position(1, 1, 1, 5),\n-                         'At line 1, between col 1 and 5')\n-        self.assertEqual(Coatils.position(1, 5, 3, 10),\n-                         'Between positions 1:5 and 3:10')\n-        self.assertEqual(Coatils.position(1, None, 3, None),\n-                         'Between lines 1 and 3')\n-        self.assertEqual(Coatils.position(3, None, 3, None),\n-                         'At line 3')\n-        self.assertEqual(Coatils.position(1, None, 3, 6),\n-                         'Between line 1 and position 3:6')\n-        self.assertEqual(Coatils.position(1, 4, 5, None),\n-                         'Between position 1:4 and line 5')\n+extra_plugin_dir = 'plugins'\n+\n+\n+@vcr.use_cassette('tests/cassettes/coatils_total_bears.yaml')\n+def test_total_bears():", "created_at": "2018-05-26T02:38:07Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE4NTA1Ng==", "fields": {"body": "I think a .coafile is needed because if you run coala just with --no-config and --config an error of usage will be generated.", "diff": "@@ -71,3 +71,8 @@ def test_check_conflicts(self):\n         with self.assertRaisesRegex(SystemExit, '2') as cm:\n             check_conflicts(sections)\n             self.assertEqual(cm.exception.code, 2)\n+\n+        sections = parse_cli(arg_list=['--no-config', '--config', '.coafile'])", "created_at": "2018-05-28T11:40:49Z", "last_edited_at": null, "author": "raduklb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE5ODAwOA==", "fields": {"body": "ok --config expects one argument so, it is needed here.", "diff": "@@ -71,3 +71,8 @@ def test_check_conflicts(self):\n         with self.assertRaisesRegex(SystemExit, '2') as cm:\n             check_conflicts(sections)\n             self.assertEqual(cm.exception.code, 2)\n+\n+        sections = parse_cli(arg_list=['--no-config', '--config', '.coafile'])", "created_at": "2018-05-28T12:47:21Z", "last_edited_at": "2018-05-28T12:59:20Z", "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI1MzY3OQ==", "fields": {"body": "Why did you add one extra blank line? \ud83d\ude03  We already have one blank line in .gitignore file.", "diff": "@@ -43,3 +43,5 @@ Gemfile.lock\n venv\n bears/upload/\n package-lock.json\n+.pytest_cache\n+", "created_at": "2018-05-28T18:01:54Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI2MzUwMw==", "fields": {"body": "We should expand it regardless what notation the user wants ;) That makes it way more convenient to use.", "diff": "@@ -0,0 +1,120 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The parent directory the file is located in.\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in binary format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Now we can get the filename:\n+\n+    >>> fp.name\n+    './tests/io/FileFactoryTestFiles/test.txt'\n+\n+    Make the object into an iterable when required\n+\n+    >>> fp.lines()\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    Retrieve a single line:\n+\n+    >>> fp.line(1)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ['This is a test file.\\\\n']\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The absolute filepath.", "created_at": "2018-05-28T19:38:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NDcwOQ==", "fields": {"body": "wrapper class", "diff": "@@ -0,0 +1,115 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents", "created_at": "2018-05-31T21:34:07Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NjA4Mg==", "fields": {"body": "return value seems to be a tuple and not a list. I guess you don't mean python list, do you ?", "diff": "@@ -0,0 +1,115 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The parent directory the file is located in.\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in binary format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    Retrieve a single line:\n+\n+    >>> fp.line(1)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The absolute filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._parent = os.path.abspath(os.path.dirname(self._filename))\n+        self._stamp = os.path.getmtime(self._filename)\n+\n+    def line(self, line):\n+        \"\"\"\n+        :param line:\n+            The line number from which the string is to be retrieved.\n+        :return:\n+            The retrieved string at the given line number from the file.\n+        \"\"\"\n+        return linecache.getline(self._filename, line)\n+\n+    @property\n+    def lines(self):\n+        \"\"\"\n+        To get all the lines in the file in form of a list.", "created_at": "2018-05-31T21:40:20Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NzAwNQ==", "fields": {"body": "We should take file name in any format - relative/absolute. And then convert it to absolute if its relative while storing it in self._filename", "diff": "@@ -0,0 +1,115 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The parent directory the file is located in.\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in binary format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    Retrieve a single line:\n+\n+    >>> fp.line(1)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The absolute filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)", "created_at": "2018-05-31T21:44:25Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjM5NDYzMg==", "fields": {"body": "Maybe for simplicity we can remove it for now. As users have access to the path, they can do that manually. We can add it again when we are actually using the FileFactory in bears and see that this is practically useful :)", "diff": "@@ -0,0 +1,115 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('_filename', '_stamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper object to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The parent directory the file is located in.\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in binary format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    Retrieve a single line:\n+\n+    >>> fp.line(1)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The absolute filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._parent = os.path.abspath(os.path.dirname(self._filename))", "created_at": "2018-06-01T13:25:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1MDE1OQ==", "fields": {"body": "What if developer tries to invites members to dev team? This error message isn't stating this reason.", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +\n+                                 ' developers'].is_member(inviter)\n+        isMaintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the ' + ', '.join(valid_teams)\n+\n+        def invite(invitee, team):\n+\n             team_mapping = {\n                 'newcomers': self.GH_ORG_NAME + ' newcomers',\n                 'developers': self.GH_ORG_NAME + ' developers',\n                 'maintainers': self.GH_ORG_NAME + ' maintainers'\n             }\n \n-            # send the invite\n-            self.TEAMS[team_mapping[team.lower()]].invite(invitee)\n+            self.TEAMS[team_mapping[team]].invite(invitee)\n+\n+        if isDeveloper and team == 'newcomers':\n+            invite(invitee, team)\n+            return tenv().get_template(\n+                'labhub/promotions/{}.jinja2.md'.format(team)\n+            ).render(\n+                targer=invitee,\n+            )\n+        elif isMaintainer:\n+            invite(invitee, team)\n             return tenv().get_template(\n-                'labhub/promotions/{}.jinja2.md'.format(team.lower())\n+                'labhub/promotions/{}.jinja2.md'.format(team)\n             ).render(\n                 target=invitee,\n             )\n         else:\n             return tenv().get_template(\n-                'labhub/errors/not-maintainer.jinja2.md'\n+                'labhub/errors/not-eligible-invite.jinja2.md'", "created_at": "2018-06-02T05:10:41Z", "last_edited_at": "2018-06-02T05:13:02Z", "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1Nzk5Mg==", "fields": {"body": "This would return something like Please select from one of the newcomers, maintainers, developers. I'd rather have something like Please select either of these teams: newcomers, developers, maintainers. something along this lines, motive being it should be distinguishable where the valid teams start.", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +\n+                                 ' developers'].is_member(inviter)\n+        isMaintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the ' + ', '.join(valid_teams)", "created_at": "2018-06-02T12:00:22Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NzkyNw==", "fields": {"body": "Umm... Snake case, this is python. Similarly below.", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +", "created_at": "2018-06-02T11:56:45Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1ODM2OQ==", "fields": {"body": "Remove this line", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +\n+                                 ' developers'].is_member(inviter)\n+        isMaintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the ' + ', '.join(valid_teams)\n+\n+        def invite(invitee, team):\n+", "created_at": "2018-06-02T12:20:46Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTE5NQ==", "fields": {"body": "team developers and maintainers --> developers or maintainers team", "diff": "@@ -0,0 +1,2 @@\n+- A newcomer cannot invite other members to the {{ organization }} org.\n+- You need to be a maintainer in order to invite someone to team developers and maintainers.", "created_at": "2018-06-03T14:12:44Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTEzMA==", "fields": {"body": "targer-->target", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        is_developer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' developers'].is_member(inviter)\n+        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                   ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the valid teams: ' + ', '.join(\n+                    valid_teams)\n+\n+        def invite(invitee, team):\n             team_mapping = {\n                 'newcomers': self.GH_ORG_NAME + ' newcomers',\n                 'developers': self.GH_ORG_NAME + ' developers',\n                 'maintainers': self.GH_ORG_NAME + ' maintainers'\n             }\n \n-            # send the invite\n-            self.TEAMS[team_mapping[team.lower()]].invite(invitee)\n+            self.TEAMS[team_mapping[team]].invite(invitee)\n+\n+        if is_developer and team == 'newcomers':\n+            invite(invitee, team)\n+            return tenv().get_template(\n+                'labhub/promotions/{}.jinja2.md'.format(team)\n+            ).render(\n+                targer=invitee,", "created_at": "2018-06-03T14:10:00Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTc2OQ==", "fields": {"body": "will soon invite you --> will invite you to the organization soon", "diff": "@@ -0,0 +1,11 @@\n+Welcome @{{ target }}! :tada:\n+\n+A developer or maintainer will soon invite you to the orgazinzation.", "created_at": "2018-06-03T14:31:59Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTcwMQ==", "fields": {"body": "orgazinzation --> organization", "diff": "@@ -0,0 +1,11 @@\n+Welcome @{{ target }}! :tada:\n+\n+A developer or maintainer will soon invite you to the orgazinzation.", "created_at": "2018-06-03T14:29:16Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDA0Mg==", "fields": {"body": "-> @property", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    File indicies start with zero in case of\n+    FileFactory objects. To retrieve a single line:\n+\n+    >>> fp.line(0)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+\n+    Get the file contents in raw mode:\n+\n+    >>> fp.raw()\n+    b'This is a test file.'\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._stamp = os.path.getmtime(self._filename)\n+\n+    def line(self, line):\n+        \"\"\"\n+        :param line:\n+            The line number from which the string is to be retrieved.\n+        :return:\n+            The retrieved string at the given line number from the file.\n+        \"\"\"\n+        return linecache.getline(self._filename, line+1)\n+\n+    @property\n+    def lines(self):\n+        \"\"\"\n+        To get all the lines in the file in form of a tuple.\n+        \"\"\"\n+        return tuple(linecache.getlines(self._filename))\n+\n+    def raw(self):\n+        \"\"\"\n+        :return:\n+            Opens the file in binary mode and returns its contents.\n+        \"\"\"\n+        with open(self._filename, 'rb') as fp:\n+            return fp.read()\n+\n+    def string(self):", "created_at": "2018-06-05T19:17:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDE1Ng==", "fields": {"body": "-> @property", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    File indicies start with zero in case of\n+    FileFactory objects. To retrieve a single line:\n+\n+    >>> fp.line(0)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+\n+    Get the file contents in raw mode:\n+\n+    >>> fp.raw()\n+    b'This is a test file.'\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._stamp = os.path.getmtime(self._filename)\n+\n+    def line(self, line):\n+        \"\"\"\n+        :param line:\n+            The line number from which the string is to be retrieved.\n+        :return:\n+            The retrieved string at the given line number from the file.\n+        \"\"\"\n+        return linecache.getline(self._filename, line+1)\n+\n+    @property\n+    def lines(self):\n+        \"\"\"\n+        To get all the lines in the file in form of a tuple.\n+        \"\"\"\n+        return tuple(linecache.getlines(self._filename))\n+\n+    def raw(self):", "created_at": "2018-06-05T19:18:18Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDEyNA==", "fields": {"body": "Be consistent with documentation, use :return: as well", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")\n+\n+    Make the object into an iterable when required\n+\n+    >>> for line in fp:\n+    ...     print(line)\n+    This is a test file.\n+    <BLANKLINE>\n+\n+    File indicies start with zero in case of\n+    FileFactory objects. To retrieve a single line:\n+\n+    >>> fp.line(0)\n+    'This is a test file.\\\\n'\n+\n+    Get all the lines in the file as a list:\n+\n+    >>> fp.lines\n+    ('This is a test file.\\\\n',)\n+\n+    Get the file contents in raw mode:\n+\n+    >>> fp.raw()\n+    b'This is a test file.'\n+    \"\"\"\n+\n+    def __init__(self, filename):\n+        \"\"\"\n+        :param filename:\n+            The filepath.\n+        \"\"\"\n+        self._filename = os.path.abspath(filename)\n+        self._stamp = os.path.getmtime(self._filename)\n+\n+    def line(self, line):\n+        \"\"\"\n+        :param line:\n+            The line number from which the string is to be retrieved.\n+        :return:\n+            The retrieved string at the given line number from the file.\n+        \"\"\"\n+        return linecache.getline(self._filename, line+1)\n+\n+    @property\n+    def lines(self):\n+        \"\"\"\n+        To get all the lines in the file in form of a tuple.", "created_at": "2018-06-05T19:18:10Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MTY5MA==", "fields": {"body": "not tuple? ;)\nBtw, I would also add that it's UTF-8 decoded, that's the difference between strings/lists and raw format ;)", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.", "created_at": "2018-06-05T19:23:48Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MTg5Nw==", "fields": {"body": "Enclose code terms like FileFactory into double backticks so they get rendered as code \ud83d\udc4d", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:", "created_at": "2018-06-05T19:24:30Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MjA0OA==", "fields": {"body": "Use single quotes, that's the preferred quotation for strings that don't contain single backticks", "diff": "@@ -0,0 +1,111 @@\n+import linecache\n+import os\n+\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('name', 'timestamp')\n+class FileFactory:\n+    \"\"\"\n+    The FileFactory is a wrapper class to replace the actual file contents\n+    from the file-dict. The object contains the following information about\n+    the file:\n+\n+        * The filename (absolute file path).\n+        * The modification timestamp of the file.\n+        * The file in the form of a string.\n+        * The file in the form of a list.\n+        * The file in raw format.\n+\n+    The equality of the object is checked just based on its filename and\n+    timestamp.\n+\n+    To initialize a FileFactory object for a file:\n+\n+    >>> fp = FileFactory(\"./tests/io/FileFactoryTestFiles/test.txt\")", "created_at": "2018-06-05T19:24:58Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzU0MTU3MA==", "fields": {"body": "You can write maybe like\nif not len(observed_result) == len(expected_result): This would eliminate one level of indentation atleast. There are so many nested if and for loops.", "diff": "@@ -0,0 +1,36 @@\n+from coala_utils.Comparable import Comparable\n+\n+\n+class BaseTestHelper:\n+    \"\"\"\n+    This is a base class for all Bears' tests of coala's testing API.\n+    \"\"\"\n+\n+    def assertComparableObjectsEqual(self, observed_result, expected_result):\n+        \"\"\"\n+        Compares individual fields of the Result object and yields messages in\n+        case of an attribute mismatch.\n+        \"\"\"\n+        if len(observed_result) == len(expected_result):\n+            messages = ''\n+            for observed, expected in zip(observed_result, expected_result):\n+                if (isinstance(observed, Comparable)\n+                        and isinstance(expected, Comparable)) \\\n+                        and (type(observed) is type(expected)):\n+                    for attribute in type(observed).__compare_fields__:\n+                        try:\n+                            assert getattr(observed, attribute) == \\\n+                                getattr(expected, attribute), \\\n+                                '{} mismatch: {}, {} != {}, {}'.format(\n+                                    attribute,\n+                                    observed.origin, observed.message,\n+                                    expected.origin, observed.message)\n+                        except AssertionError as ex:\n+                            messages += (str(ex) + '\\n\\n')\n+                else:\n+                    assert observed_result == expected_result, '%s != %s' % \\\n+                        (observed_result, expected_result)\n+            if messages:\n+                raise AssertionError(messages)\n+        else:", "created_at": "2018-06-06T20:04:42Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3NDY2MQ==", "fields": {"body": "If it has been removed completely, why not just remove the whole code? We can't get it working in the future anyway.\nFor historical purposes, the code will always be there on the git history.\nWe should also remove the readme section https://github.com/coala/gh-board#easter-eggs\nBut it said \"easter eggs\" I'm not sure if it's truly a hidden easter eggs that is not very obvious to find, and we miss it. \ud83d\ude02", "diff": "@@ -59,11 +59,12 @@ test('shows a repo', async t => {\n   t.true(agoRegExp.test(await browser.getText('time.updated-at')));\n });\n \n-test('checks that the games load up', async () => {\n-  await browser.waitForExist('.nav-secret-game');\n-  await browser.click('.nav-secret-game');\n-  await browser.waitForExist('.secret-game-is-playing', 30 * 1000); // It may take some time to fetch the game from the Gist\n-});\n+// game functionality has been removed", "created_at": "2018-06-07T14:48:12Z", "last_edited_at": "2018-06-07T14:48:24Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczMzcyNA==", "fields": {"body": "an extra level is needed in the abstraction, which needs to be a separate PR before this.\nthis isnt creating a meta bear.\nA meta bear is like URLBear, which only yields HiddenResult.  See URLHeadBear and InvalidLinkBear for how they all link together.\nWe need a VCSCommitBear which only yields a CommitResult(HiddenResult).  SkipCIBear would then receive those CommitResult and only yield the CommitResult if the commit was a CI skip.\n(and while trying to understand this, it is better to simply ignore GitCommitBear and HgCommitBear -- those will need to be glued back in after the redesign.)", "diff": "@@ -0,0 +1,44 @@\n+\n+from coalib.misc.Shell import run_shell_command\n+from bears.vcs.CommitBear import _CommitBear\n+\n+\n+class SkipCIBear(_CommitBear):", "created_at": "2018-06-07T12:50:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzg4MjM3MQ==", "fields": {"body": "children = [e for e in relative_recursive_glob(self._path, '**')]\nreturn children[1:]\n\nOr may be just:\nreturn [e for e in relative_recursive_glob(self._path, '**')][1:]", "diff": "@@ -0,0 +1,28 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path')\n+class Directory:\n+    def __init__(self, path):\n+        self._path = os.path.abspath(path)\n+        self._parent = os.path.abspath(os.path.dirname(self._path))\n+\n+    def children(self):\n+        elements = relative_recursive_glob(self._path, '**')\n+        children = []\n+\n+        for e in elements:\n+            children.append(e)\n+\n+        return children[1:]\n+", "created_at": "2018-06-07T20:40:14Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzgyMzk2Mw==", "fields": {"body": "Perhaps you could use snake case for the method name, to ensure consistency. assert_comparable_objects_equal", "diff": "@@ -0,0 +1,41 @@\n+from coala_utils.Comparable import Comparable\n+\n+\n+class BaseTestHelper:\n+    \"\"\"\n+    This is a base class for all Bears' tests of coala's testing API.\n+    \"\"\"\n+\n+    def assertComparableObjectsEqual(self, observed_result, expected_result):", "created_at": "2018-06-07T17:10:45Z", "last_edited_at": null, "author": "IpshitaC", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzgyNDM4NA==", "fields": {"body": "Change to result objects", "diff": "@@ -0,0 +1,41 @@\n+from coala_utils.Comparable import Comparable\n+\n+\n+class BaseTestHelper:\n+    \"\"\"\n+    This is a base class for all Bears' tests of coala's testing API.\n+    \"\"\"\n+\n+    def assertComparableObjectsEqual(self, observed_result, expected_result):\n+        \"\"\"\n+        Compares individual fields of the Result object and yields messages in", "created_at": "2018-06-07T17:12:27Z", "last_edited_at": null, "author": "IpshitaC", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MjQyMg==", "fields": {"body": "removing these should have been another commit in the same PR, as this is related to the fact that Ryan removed the game , and is unrelated to the test runner problems.  Also note that it wasnt mentioned in the commit message.  Anyway, this is minor and it is very distinct changes within the same commit.\nI am guessing Ryan will appreciate this being sent upstream (as two commits, and probably best left to coding phase 2), and it should almost apply without much difficulty, and likewise try the same with Phil, but that is very optional as that codebase probably has other problems which are not related to your project.", "diff": "@@ -59,13 +59,6 @@ test('shows a repo', async t => {\n   t.true(agoRegExp.test(await browser.getText('time.updated-at')));\n });\n \n-test('checks that the games load up', async () => {", "created_at": "2018-06-08T04:54:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ0MA==", "fields": {"body": "do we need this empty section?\nif so, can we get a comment on it explaining why?", "diff": "@@ -0,0 +1,10 @@\n+[Core]\n+name = Ban\n+module = ban\n+\n+[Documentation]\n+description = Ban from all rooms at once\n+[Python]\n+version = 3\n+\n+[Errbot]", "created_at": "2018-06-10T10:29:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ1NA==", "fields": {"body": "horrific style.\nplease get pyflakes & pycodestyle active on these files.\n(and read your diffs before publishing them)", "diff": "@@ -0,0 +1,32 @@\n+import os\n+import logging\n+import unittest\n+from unittest.mock import Mock, MagicMock, PropertyMock, patch\n+\n+from errbot.backends.test import TestBot\n+\n+import plugins.ban\n+\n+from tests.helper import plugin_testbot\n+\n+\n+class TestBan(unittest.TestCase):\n+\n+    @patch('plugins.ban.requests')\n+    @patch('plugins.ban.json')\n+    def test_ban_cmd(self, mockjson, mockreq):\n+        ban, testbot = plugin_testbot(plugins.ban.Ban, logging.ERROR)\n+        ban.activate()\n+\n+        ban.bot_config.ROOMS_TO_JOIN = ('coala/coala', 'coala/coala-bears')\n+        ban.bot_config.BOT_IDENTITY['token'] = 'mocked?'\n+\n+        fake_room_data = [{'id': '130', 'uri': 'coala/coala'},\n+        \t\t  {'id': '234', 'name': 'Nitanshu'},", "created_at": "2018-06-10T10:30:10Z", "last_edited_at": "2018-06-10T10:30:54Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQyNA==", "fields": {"body": "so this is a syntax error.\nnot tested.\nand something is wrong with CI that it didnt find this problem for you.\nplease fix.  separate PR.", "diff": "@@ -104,6 +104,7 @@\n \n ACCESS_CONTROLS = {'render test': {\n     'allowrooms': ('coala/cobot-test', 'coala/corobo',)},\n-    'LabHub:*': {'allowprivate': False}}\n+    'LabHub:*': {'allowprivate': False}", "created_at": "2018-06-10T10:29:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NjY2MQ==", "fields": {"body": "indentation only on this line: 4 spaces back", "diff": "@@ -751,7 +755,12 @@ def execute_section(section,\n                              results (bear names are key) as well as the\n                              file dictionary.\n     \"\"\"\n-    if debug:\n+    debug_bears = (False\n+                   if 'debug_bears' not in section or (\n+                       section['debug_bears'].value == 'False') else (\n+                       typed_list(str)(section['debug_bears'])))", "created_at": "2018-06-10T18:53:41Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzEwNw==", "fields": {"body": "We have to change the name, if possible we should try to look at the pdb naming. Since we use runcall heavily, something similar would be nice. However, since we aren't in the context of pdb, it should include debug as a word.\nMaybe debug_collect_iterable? Nah not so good... or maybe just debug_run? meh... \ud83d\ude05", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue\n+\n+\n+def debug_mode_function(func, dbg, *args, **kwargs):", "created_at": "2018-06-10T19:09:01Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzEzMQ==", "fields": {"body": "wait a second shouldn't it be bear_results?", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue\n+\n+\n+def debug_mode_function(func, dbg, *args, **kwargs):\n+    results = []\n+    bear_results = dbg.runcall(func, *args, **kwargs)\n+    if isinstance(bear_results, collections.Iterable):\n+        try:\n+            iterator = iter(bear_results)\n+            while True:\n+                result = dbg.runcall(next, iterator)\n+                results.append(result)\n+        except StopIteration:\n+            return results\n+    else:\n+        return results", "created_at": "2018-06-10T19:09:55Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzIxMQ==", "fields": {"body": "So -->\nbear_results = dbg.runcall(func, *args, **kwargs)\nif isinstance(bear_results, collections.Iterable):\n    results = []\n    iterator = iter(bear_results)\n    try:\n        while True:\n            result = dbg.runcall(next, iterator)\n            results.append(result)\n    except StopIteration:\n        return results\nelse:\n    return bear_results\nPS: I moved the iter part out of the try block as well, since that shouldn't throw a StopIteration. If it does, it's a serious Python bug, and we should let coala crash :P", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue\n+\n+\n+def debug_mode_function(func, dbg, *args, **kwargs):\n+    results = []\n+    bear_results = dbg.runcall(func, *args, **kwargs)\n+    if isinstance(bear_results, collections.Iterable):\n+        try:\n+            iterator = iter(bear_results)\n+            while True:\n+                result = dbg.runcall(next, iterator)\n+                results.append(result)\n+        except StopIteration:\n+            return results\n+    else:\n+        return results", "created_at": "2018-06-10T19:12:29Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzQ0NA==", "fields": {"body": "I would provide dbg with a default argument:\ndef debug_mode_function(func, dbg=pdb.Pdb(), *args, **kwargs):", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue\n+\n+\n+def debug_mode_function(func, dbg, *args, **kwargs):", "created_at": "2018-06-10T19:18:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTA1OQ==", "fields": {"body": "Shouldn't it be called somehow differently? Otherwise you override do_c / do_continue implicitly, and it will now always clear breakpoints, regardless of doing q or c.", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):", "created_at": "2018-06-10T20:14:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTAxMA==", "fields": {"body": "return 1, redundant braces", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)", "created_at": "2018-06-10T20:13:19Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTAzMw==", "fields": {"body": "what about assigning those to db?\nclass dbg(pdb.Pdb):\n    def __init__(self, ...):\n        self.do_q = self.do_continue\n        ...\n    def do_continue(self, arg):\n        self.clear_all_breaks()\n        super().do_continue(arg)\n        return 1", "diff": "@@ -22,6 +24,34 @@\n from .meta import bearclass\n \n \n+class db(pdb.Pdb):\n+    def do_continue(self, arg):\n+        self.clear_all_breaks()\n+        super().do_continue(arg)\n+        return(1)\n+\n+\n+dbg = db()\n+dbg.do_q = dbg.do_continue\n+dbg.do_quit = dbg.do_continue\n+dbg.do_exit = dbg.do_continue", "created_at": "2018-06-10T20:13:56Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTE1NQ==", "fields": {"body": "please read my comments on the old PR.", "diff": "@@ -463,6 +473,30 @@ def test_bear_with_specific_language(self):\n         self.assertEqual(str(result), 'Hypertext Markup Language 5.1')\n         self.check_message(LOG_LEVEL.DEBUG)\n \n+    @patch('pdb.Pdb.do_continue')\n+    def test_do_continue(self, do_continue):\n+        arg = {}\n+        self.assertEqual(dbg.do_continue(arg), 1)\n+\n+    @patch('coalib.bears.Bear.dbg.runcall', side_effect=((1, 2), 3, 4))\n+    def test_debug_mode_func_with_return(self, runcall):\n+        section = Section('name')\n+        my_bear = TestOneBear(section, self.queue, debugger=True)\n+        args = {}\n+        kwargs = {}", "created_at": "2018-06-10T20:18:41Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA0MA==", "fields": {"body": "You can use r.json() as well", "diff": "@@ -381,3 +382,43 @@ def pr_stats(self, msg, match):\n                     state=type(self).community_state(pr_count)\n                  )\n         yield reply\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        if not self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(user):\n+            yield 'Only maintainers are allowed to use this command.'\n+            return\n+\n+        sinner = args[0]\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {'Content-Type': 'application/json',\n+                   'Accept': 'application/json',\n+                   'Authorization': 'Bearer ' +\n+                   self.bot_config.BOT_IDENTITY['token']\n+                   }\n+        data = json.dumps({\"username\": sinner})\n+\n+        r = requests.get('https://api.gitter.im/v1/rooms', headers=headers)\n+        room_data = json.loads(r.text)", "created_at": "2018-06-09T05:21:08Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA2MQ==", "fields": {"body": "use this style:\ndict = {\n    key: value,\n    key: value,\n}", "diff": "@@ -381,3 +382,43 @@ def pr_stats(self, msg, match):\n                     state=type(self).community_state(pr_count)\n                  )\n         yield reply\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        if not self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(user):\n+            yield 'Only maintainers are allowed to use this command.'\n+            return\n+\n+        sinner = args[0]\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {'Content-Type': 'application/json',", "created_at": "2018-06-09T05:21:56Z", "last_edited_at": "2018-06-09T05:31:11Z", "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTIxOA==", "fields": {"body": "for room in filter(lambda x: x['uri'] in joined_rooms, room_data):\n   rq = requests.post('https://api.gitter.im/v1/rooms/' + room['id'] + '/bans', data=data, headers=headers)\n   banned_users.append(room['uri'])\nUse something like this, shorter and better ^^ . Not including the exception handling bit, add it ;)", "diff": "@@ -381,3 +382,43 @@ def pr_stats(self, msg, match):\n                     state=type(self).community_state(pr_count)\n                  )\n         yield reply\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        if not self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(user):\n+            yield 'Only maintainers are allowed to use this command.'\n+            return\n+\n+        sinner = args[0]\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {'Content-Type': 'application/json',\n+                   'Accept': 'application/json',\n+                   'Authorization': 'Bearer ' +\n+                   self.bot_config.BOT_IDENTITY['token']\n+                   }\n+        data = json.dumps({\"username\": sinner})\n+\n+        r = requests.get('https://api.gitter.im/v1/rooms', headers=headers)\n+        room_data = json.loads(r.text)\n+        banned_rooms = []\n+\n+        for room in joined_rooms:\n+            for rm in room_data:\n+                try:\n+                    if rm['uri'] == room:\n+                        url = 'https://api.gitter.im/v1/rooms/' + \\\n+                            rm['id'] + '/bans'\n+                        r = requests.post(url, data=data, headers=headers)\n+                        banned_rooms.append(room)\n+                except KeyError:\n+                    pass", "created_at": "2018-06-09T05:30:28Z", "last_edited_at": "2018-06-09T05:31:20Z", "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTQzMw==", "fields": {"body": "Rather make a header with \"Usage\", instead of this sentence.\n+\nTypo in Debgger (please be careful with typos, you make them quite often, I don't want to fix typos all the time)", "diff": "@@ -0,0 +1,52 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+Debugging Interface will help user to debug the Bear code and move through\n+it using ``pdb`` Interface\n+\n+There are two way to invoke the coala's Debgger", "created_at": "2018-06-09T12:21:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTU2Mw==", "fields": {"body": "Very important: It will also debug dependency bears!", "diff": "@@ -0,0 +1,52 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+Debugging Interface will help user to debug the Bear code and move through\n+it using ``pdb`` Interface\n+\n+There are two way to invoke the coala's Debgger\n+\n+Command Line Interface\n+----------------------\n+\n+User can specify the bear they want to debug using ``--debug-bears`` i.e.,\n+\n+.. code:: shell\n+\n+    $ coala -b PEP8Bear,MypyBear -f <filename> --debug-bears PEP8Bear\n+\n+If bear name is not specified in ``--debug-bears`` argument then it will by\n+default debug all the bears passed through ``--bears`` or ``-b`` argument\n+**i.e.,**", "created_at": "2018-06-09T12:25:46Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTUxNA==", "fields": {"body": "Actually I would propose you write MyBear, and give a snippet of a small and simple bear. Nobody external wants to debug our bears as they are usually quite complex.", "diff": "@@ -0,0 +1,52 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+Debugging Interface will help user to debug the Bear code and move through\n+it using ``pdb`` Interface\n+\n+There are two way to invoke the coala's Debgger\n+\n+Command Line Interface\n+----------------------\n+\n+User can specify the bear they want to debug using ``--debug-bears`` i.e.,\n+\n+.. code:: shell\n+\n+    $ coala -b PEP8Bear,MypyBear -f <filename> --debug-bears PEP8Bear", "created_at": "2018-06-09T12:23:56Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTQ0NA==", "fields": {"body": "Use four level indentation, and the closing brace should be in same column as h in headers", "diff": "@@ -0,0 +1,46 @@\n+import requests\n+import json\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Ban(BotPlugin):\n+    \"\"\"\n+    Ban from all rooms at once..\n+    \"\"\"\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        sinner = args[0]\n+\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {", "created_at": "2018-06-12T14:17:23Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTg1Ng==", "fields": {"body": "Use this style please\na = [\n    {...},\n    {...},\n...\n]", "diff": "@@ -0,0 +1,32 @@\n+import os\n+import logging\n+import unittest\n+from unittest.mock import Mock, MagicMock, PropertyMock, patch\n+\n+from errbot.backends.test import TestBot\n+\n+import plugins.ban\n+\n+from tests.helper import plugin_testbot\n+\n+\n+class TestBan(unittest.TestCase):\n+\n+    @patch('plugins.ban.requests')\n+    @patch('plugins.ban.json')\n+    def test_ban_cmd(self, mockjson, mockreq):\n+        ban, testbot = plugin_testbot(plugins.ban.Ban, logging.ERROR)\n+        ban.activate()\n+\n+        ban.bot_config.ROOMS_TO_JOIN = ('coala/coala', 'coala/coala-bears')\n+        ban.bot_config.BOT_IDENTITY['token'] = 'mocked?'\n+\n+        fake_room_data = [{'id': '130', 'uri': 'coala/coala'},", "created_at": "2018-06-12T14:18:27Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMjcwMA==", "fields": {"body": "\"on GitHub\"\nwell we want meta-review to be done on GitLab to.\nPerhaps instead note somewhere that only GitHub is being analysed at the moment.\nThis should also include the very important information about where people should put their PR review comments in order to be meta-reviewable due to limitations on GitHub.  i.e. PR approval comments not being meta-reviewable.  And any other usage best-practise we have found out.\nMaybe some of this should be in the Review guide, and/or links between them.", "diff": "@@ -0,0 +1,140 @@\n+Meta-Reviewing\n+==============\n+\n+This document is a guide to coala's meta-review process.\n+\n+What is Meta-review?\n+--------------------\n+\n+People respond to review comments on pull requests by giving feedback. Emoji\n+make it much easier to give and receive feedback without a long comment thread.\n+Those emoji are called\n+`reactions <https://developer.github.com/v4/enum/reactioncontent/>`__ on GitHub\n+or `award emoji <https://docs.gitlab.com/ee/user/award_emojis.html>`__ on GitLab.\n+They are used by people to publicly express their feelings about review\n+comments, which provides feedback to comment authors and all other members.\n+\n+There are 6 types of reactions on GitHub:\n+\n+============  =============  =======  =====\n+ Name         Markdown       Unicode  Emoji\n+============  =============  =======  =====\n+ THUMBS_UP    ``:+1:``       U+1F44D  \ud83d\udc4d\n+ THUMBS_DOWN  ``:-1:``       U+1F44E  \ud83d\udc4e\n+ LAUGH        ``:smile:``    U+1F604  \ud83d\ude04\n+ HOORAY       ``:tada:``     U+1F389  \ud83c\udf89\n+ CONFUSED     ``:confused``  U+1F615  \ud83d\ude15\n+ HEART        ``:heart:``    U+FE0F   \u2764\ufe0f\n+============  =============  =======  =====\n+\n+These reactions are reviews to reviews, thus we call them meta-reviews. To\n+encourage people to do meta-reviews, we build a meta-review system, which\n+collects reactions, analyze them, and use that information to score people.\n+After scoring, a ranking list is shown on coala community website.\n+\n+At the moment, only THUMBS_UP and THUMBS_DOWN are collected and analyzed,\n+as they are most commonly used and express strong and clear feelings:\n+THUMBS_UP means the review comment is well-written and helpful, while\n+THUMBS_DOWN means the review comment is misleading, or even worse, violates\n+`coala Community Code of Conduct <https://github.com/coala/cEPs/blob/master/cEP-0006.md>`__.\n+\n+Meta-review Process\n+-------------------\n+\n+The meta-review process for coala is as follows:\n+\n+1. Reviewers create their reviews.\n+\n+2. Anyone especially author of the pull request can do meta-review (THUMBS_UP,\n+   THUMBS_DOWN) via reactions on GitHub.", "created_at": "2018-06-12T11:28:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMzA3MQ==", "fields": {"body": "as it will probably change, it is better for this document to not include the score calculation details; links to the .py code and the cEP are much more useful and much more maintainable.\nIf your detailed explanation here is better than in the cEP, update the cEP ;-)", "diff": "@@ -0,0 +1,140 @@\n+Meta-Reviewing\n+==============\n+\n+This document is a guide to coala's meta-review process.\n+\n+What is Meta-review?\n+--------------------\n+\n+People respond to review comments on pull requests by giving feedback. Emoji\n+make it much easier to give and receive feedback without a long comment thread.\n+Those emoji are called\n+`reactions <https://developer.github.com/v4/enum/reactioncontent/>`__ on GitHub\n+or `award emoji <https://docs.gitlab.com/ee/user/award_emojis.html>`__ on GitLab.\n+They are used by people to publicly express their feelings about review\n+comments, which provides feedback to comment authors and all other members.\n+\n+There are 6 types of reactions on GitHub:\n+\n+============  =============  =======  =====\n+ Name         Markdown       Unicode  Emoji\n+============  =============  =======  =====\n+ THUMBS_UP    ``:+1:``       U+1F44D  \ud83d\udc4d\n+ THUMBS_DOWN  ``:-1:``       U+1F44E  \ud83d\udc4e\n+ LAUGH        ``:smile:``    U+1F604  \ud83d\ude04\n+ HOORAY       ``:tada:``     U+1F389  \ud83c\udf89\n+ CONFUSED     ``:confused``  U+1F615  \ud83d\ude15\n+ HEART        ``:heart:``    U+FE0F   \u2764\ufe0f\n+============  =============  =======  =====\n+\n+These reactions are reviews to reviews, thus we call them meta-reviews. To\n+encourage people to do meta-reviews, we build a meta-review system, which\n+collects reactions, analyze them, and use that information to score people.\n+After scoring, a ranking list is shown on coala community website.\n+\n+At the moment, only THUMBS_UP and THUMBS_DOWN are collected and analyzed,\n+as they are most commonly used and express strong and clear feelings:\n+THUMBS_UP means the review comment is well-written and helpful, while\n+THUMBS_DOWN means the review comment is misleading, or even worse, violates\n+`coala Community Code of Conduct <https://github.com/coala/cEPs/blob/master/cEP-0006.md>`__.\n+\n+Meta-review Process\n+-------------------\n+\n+The meta-review process for coala is as follows:\n+\n+1. Reviewers create their reviews.\n+\n+2. Anyone especially author of the pull request can do meta-review (THUMBS_UP,\n+   THUMBS_DOWN) via reactions on GitHub.\n+\n+3. Meta-review information will be collected and analyzed automatically:\n+\n+   * Meta-reviewers will be given bonus points to encourage such behaviour\n+\n+   * Meta-reviewees will be given positive points (on receiving THUMBS_UP) or\n+     negative points (on receiving THUMBS_DOWN). Those points are weighted\n+     according to score of meta-reviewers. Those who have higher score in\n+     the meta-review system will have more impacts on others, so please do\n+     meta-reviews carefully.\n+\n+.. note::\n+\n+    Don't edit or even delete your review after it has been meta-reviewed.\n+    If you do that, you are destroying feedback from the community. This\n+    is considered as an improper behaviour and a negative score will be\n+    given to you.\n+\n+Automated Scoring Process\n+-------------------------\n+\n+A complete ranking list can be found on\n+`Meta-review score ranking list <https://deploy-preview-143--coala-community.netlify.com/meta-review/>`__.\n+Score is based on number of positive (THUMBS_UP) & negative (THUMBS_DOWN)\n+reactions one receives, and number of positive & negative reactions one gives\n+away. Calculation details can be found in\n+`meta_review/handler.py <https://github.com/li-boxuan/community/blob/2143fbcf925beb1ffe5ab1d9dd4d177e827dece2/meta_review/handler.py>`__.\n+\n+Briefly, score is calculated based on formulas as follows:", "created_at": "2018-06-12T11:30:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczMDUyNg==", "fields": {"body": "this should have a space after the comma before the next word on the next line.", "diff": "@@ -391,5 +392,7 @@ class docs:\n         Choosing a preferred quotation and using it everywhere (if possible).\n         \"\"\"\n     preferred_quotation = Taste[str](\n-        'Represents the preferred quotation',\n-        ('\\'', '\"'), default='\\'')\n+        'Represents the preferred quotation marks.'\n+        'It ensures that every string contains the selected style of quotes,'", "created_at": "2018-06-12T13:09:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MTkwMg==", "fields": {"body": "-->\nlist(relative_recursive_glob(self._path, '**'))[1:]\nwhen we are on it, we can again use a tuple ;)", "diff": "@@ -0,0 +1,89 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path', 'timestamp')\n+class Directory:\n+    \"\"\"\n+    The `Directory` class acts as an interface to directories and\n+    provides useful information about them such as:\n+\n+        * The directory path.\n+        * The parent directory path.\n+        * The last modified timestamp of the directory.\n+        * The number of children contained inside a directory.\n+\n+    >>> import os\n+    >>> d = Directory('tests/io/DirectoryTestDir/')\n+\n+    Get the number of files and sub-directories at the top level:\n+\n+    >>> len(d.get_children())\n+    3\n+\n+    Get the number of all the files and sub-directories recursively:\n+    >>> len(d.get_children_recursively())\n+    5\n+\n+    Get the path of the `Directory` object:\n+\n+    >>> os.path.relpath(d.path).endswith('DirectoryTestDir')\n+    True\n+\n+    Get the parent directory:\n+\n+    >>> os.path.relpath(d.parent).endswith('io')\n+    True\n+\n+    Get the last modified timestamp of the directory:\n+\n+    >>> d.timestamp == os.path.getmtime(d.path)\n+    True\n+    \"\"\"\n+\n+    def __init__(self, path):\n+        self._path = os.path.abspath(path)\n+        self._parent = os.path.abspath(os.path.dirname(self._path))\n+        self._timestamp = os.path.getmtime(self._path)\n+\n+    def get_children(self):\n+        \"\"\"\n+        :return:\n+            A list of all the files and sub-directories cotained at the\n+            top level of the directory.\n+        \"\"\"\n+        return os.listdir(self._path)\n+\n+    def get_children_recursively(self):\n+        \"\"\"\n+        :return:\n+            A list of all the files and sub-directories contained\n+            inside a directory.\n+        \"\"\"\n+        return [e for e in relative_recursive_glob(self._path, '**')][1:]", "created_at": "2018-06-12T20:43:01Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MjgwMA==", "fields": {"body": "double backticks, it's RST ;)", "diff": "@@ -0,0 +1,89 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path', 'timestamp')\n+class Directory:\n+    \"\"\"\n+    The `Directory` class acts as an interface to directories and", "created_at": "2018-06-12T20:45:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MzE1MQ==", "fields": {"body": "Not just the number, the children itself ;)\n--> \"The children contained inside a the directory\"", "diff": "@@ -0,0 +1,89 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path', 'timestamp')\n+class Directory:\n+    \"\"\"\n+    The `Directory` class acts as an interface to directories and\n+    provides useful information about them such as:\n+\n+        * The directory path.\n+        * The parent directory path.\n+        * The last modified timestamp of the directory.\n+        * The number of children contained inside a directory.", "created_at": "2018-06-12T20:47:04Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTA0NzExNQ==", "fields": {"body": "Airbnb style actually uses 4.9 as peer dependency. I really want to downgrade to that matching version :( too. Waiting for @blazeu .", "diff": "@@ -3,23 +3,14 @@\n   \"plugins\": [ \"react\" ],\n   \"env\": {\n     \"es6\": true,\n-    \"browser\": true,\n-  },\n-  \"ecmaFeatures\": {\n-    \"templateStrings\": true,\n-    \"arrowFunctions\": true,\n-    \"modules\": true,\n-    \"blockBindings\": true,\n-    \"forOf\": true,\n-    \"jsx\": true\n+    \"browser\": true\n   },\n   \"rules\": {\n     \"no-unused-vars\": 1,\n     \"react/jsx-uses-vars\": 1,\n     \"no-var\": 2,\n     \"new-cap\": 0,\n     \"quotes\": [1, \"single\", \"avoid-escape\"],\n-    \"semi\": 1,\n-    \"indent\": [2, 2]", "created_at": "2018-06-13T11:29:39Z", "last_edited_at": null, "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTAxOTE2MQ==", "fields": {"body": "@NiklasMM , fixtures do work, with a slightly different mechanism for some types of fixtures.\nsee https://github.com/pytest-dev/pytest/blob/master/doc/en/unittest.rst#mixing-pytest-fixtures-into-unittesttestcase-subclasses-using-marks\nand git grep fixture tests in coala-core repo.\nwrt parameterisation, and even fixtures, I didnt see the rationale given in the cEP for how those will be used to improve bear testing.  I would argue that https://github.com/wolever/parameterized is as good a solution which works well for all test frameworks.  We already have a complex set of pytest plugins, and already use testfixtures, so an additional test dependency isnt a new complexity problem.\nAnyway, my intention isnt to re-litigate that.  I am only commenting because of the huge breakage.\nLeaving the existing unittest class as-is, and deprecating it, will reduce the risk substantially.  And then at the end of the project the huge rewrite of bear tests can happen, and it wont matter if there are some bear tests which are not migrated to pytest-only style for reasons not yet predicted.\nIf the immediate goal is only to enforce a common test base class, that can be achieved by changing this class to inherit from both:\nclass LocalBearTestHelper(BaseTestHelper, unittest.TestCase):\n    ...", "diff": "@@ -101,7 +100,7 @@ def get_results(local_bear,\n         return bear_output\n \n \n-class LocalBearTestHelper(unittest.TestCase):\n+class LocalBearTestHelper(BaseTestHelper):", "created_at": "2018-06-13T09:43:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE1NDgzMw==", "fields": {"body": "I vaguely remember doing something like this in the past, but my quick searches couldn't come up with anything. What's the story behind this?", "diff": "@@ -42,5 +67,5 @@ deploy:\n   provider: pages\n   skip_cleanup: true\n   github_token: $GITHUB_TOKEN\n-  on:\n+  \"on\":", "created_at": "2018-06-13T16:36:58Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE4ODAxNA==", "fields": {"body": "assert len(bear_output) != 0", "diff": "@@ -210,7 +187,7 @@ def check_invalidity(self,\n                                   )\n         msg = (\"The local bear '{}' yields no result although it \"\n                'should.'.format(local_bear.__class__.__name__))\n-        self.assertNotEqual(len(bear_output), 0, msg=msg)\n+        assert not len(bear_output) == 0, msg", "created_at": "2018-06-13T18:22:17Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTEwMTE5NA==", "fields": {"body": ".eslintrc?", "diff": "@@ -0,0 +1,27 @@\n+[all]\n+ignore = node_modules/**, dist/**, .git/**\n+\n+[all.SpaceConsistencyBear]\n+files = **.js, **.json, **.yml, **.yaml, **.md\n+bears = SpaceConsistencyBear\n+use_spaces = true\n+ignore += src/gantt-chart.js\n+\n+[all.json]\n+bears = JSONFormatBear\n+files = **.json\n+indent_size = 2\n+\n+[all.js]\n+bears = ESLintBear\n+eslint_config = .eslintrc.json", "created_at": "2018-06-13T14:20:46Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTI0NDk5OA==", "fields": {"body": "you can use os.path.dirname for os.path.split(...)[0]", "diff": "@@ -0,0 +1,31 @@\n+import os\n+import unittest\n+\n+from coalib.io.Directory import Directory\n+\n+\n+class DirectoryTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.test_dir_path = os.path.join(os.path.split(__file__)[0],", "created_at": "2018-06-13T21:40:13Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTMwOTM2OQ==", "fields": {"body": "cant do that or it would fail on windows", "diff": "@@ -0,0 +1,89 @@\n+import os\n+\n+from coalib.parsing.Globbing import relative_recursive_glob\n+from coala_utils.decorators import generate_eq\n+\n+\n+@generate_eq('path', 'timestamp')\n+class Directory:\n+    \"\"\"\n+    The ``Directory`` class acts as an interface to directories and\n+    provides useful information about them such as:\n+\n+        * The directory path.\n+        * The parent directory path.\n+        * The last modified timestamp of the directory.\n+        * The children contained inside a directory.\n+\n+    >>> import os\n+    >>> d = Directory('tests/io/DirectoryTestDir/')\n+\n+    Get the number of files and sub-directories at the top level:\n+\n+    >>> len(d.get_children())\n+    3\n+\n+    Get the number of all the files and sub-directories recursively:\n+    >>> len(d.get_children_recursively())\n+    5\n+\n+    Get the path of the ``Directory`` object:\n+\n+    >>> os.path.basename(d.path).endswith('DirectoryTestDir')\n+    True\n+\n+    Get the parent directory:\n+\n+    >>> os.path.basename(d.parent).endswith('io')", "created_at": "2018-06-14T06:00:15Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY5MDIzMg==", "fields": {"body": "it is from the yaml lint bear.\nI used to disabled it in git-task-list. But it is far easier just to quote it.", "diff": "@@ -42,5 +67,5 @@ deploy:\n   provider: pages\n   skip_cleanup: true\n   github_token: $GITHUB_TOKEN\n-  on:\n+  \"on\":", "created_at": "2018-06-15T10:14:28Z", "last_edited_at": null, "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NDg5OQ==", "fields": {"body": "@nvzard , why didnt CI pick this up?  Please create an issue about that.", "diff": "@@ -104,22 +98,15 @@ def test_create_issue_cmd(self):\n             plugins.labhub.LabHub, logging.ERROR, {'BACKEND': 'text'}\n         )\n         labhub.activate()\n-        labhub.REPOS = {'repository': self.mock_repo,\n-                        'repository.github.io': self.mock_repo}\n+        labhub.REPOS = {'repository': self.mock_repo,'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy','Here you go')\n \n-        labhub.REPOS['repository'].create_issue.assert_called_once_with(\n-            'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n-        )\n+        labhub.REPOS['repository'].create_issue.assert_called_once_with('this is the title', 'bo\\ndy\\nOpened by @None at [text]()')\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body', 'Here you go')\n \n-        labhub.REPOS['repository.github.io'].create_issue.assert_called_with(\n-            'another title', 'and body\\nOpened by @None at [text]()'\n-        )\n+        labhub.REPOS['repository.github.io'].create_issue.assert_called_with('another title', 'and body\\nOpened by @None at [text]()')", "created_at": "2018-06-16T05:31:34Z", "last_edited_at": "2018-06-16T05:32:13Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg==", "fields": {"body": "These copy from docs/docs-requirements.txt to docs-requirements.txt.\nPlease re-review @kriti21 .", "diff": "@@ -0,0 +1,24 @@\n+overrides: coala.yaml\n+\n+name: documentation\n+\n+dependencies:\n+  - coala\n+  - '-r docs-requirements.txt'\n+\n+configuration:\n+  template_dir:\n+    - ../coala-mobans/templates/\n+    - ../coala-mobans/assets/\n+  configuration: .moban.yaml\n+  configuration_dir: ../coala-mobans/\n+targets:\n+  - requirements.txt: requirements.txt.jj2\n+copy:\n+  - docs-requirements.txt: docs/docs-requirements.txt", "created_at": "2018-06-16T06:38:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwNzU3Nw==", "fields": {"body": "This should go into the above proposed \"Details\" paragraph, as it's not directly related to the invocation of the debugger within a coafile;)", "diff": "@@ -0,0 +1,77 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+The Debugging Interface will help users to debug Bear code and step through\n+it using pdb interface\n+\n+Usage of coala's Debugger\n+=========================\n+\n+Command Line Interface\n+----------------------\n+\n+Users can specify the bear they want to debug using ``--debug-bears``, i.e.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,HelloWorldBear -f <filename> --debug-bears HelloWorldBear\n+\n+Below is the code given for a simple ``HelloWorldBear`` that prints a debug\n+message for each file:\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class HelloWorldBear(LocalBear):\n+        def run(self,\n+                filename,\n+                file):\n+            logging.info('Please follow newcomer guide.')\n+            logging.debug('Hello World! Checking file {}.'.format(filename))\n+\n+After invoking the coala's debugger it will step into the ``run()`` method of a\n+HelloWorldBear and help users to debug Bear code with passed settings.\n+\n+If bear names are not specified for ``--debug-bears`` then it will by\n+default debug all the bears passed through ``--bears`` or ``-b`` argument.\n+\n+.. code:: shell\n+\n+    $ coala --bears HelloWorldBear -files <filename> --debug-bears\n+\n+.. note::\n+\n+    A bear may depend on results from different bears. The debugger will debug\n+    all bears on which a bear is dependent on as well.\n+\n+coafile\n+-------\n+\n+Users can debug bears using ``.coafile``:\n+\n+::\n+\n+    [all]\n+    bears = PEP8Bear,MypyBear\n+    files = <filename>\n+    debug_bears = PEP8Bear\n+\n+or\n+\n+::\n+\n+    [all]\n+    bears = PEP8Bear,MypyBear\n+    files = <filename>\n+    debug_bears = True\n+\n+.. note::\n+\n+    Pdb's quit-command (``q``) has been remapped so coala continues its\n+    normal execution without aborting. So, ``quit`` or `q` will first clear\n+    all the breakspoints then continue ( ``c`` or ``continue`` ) execution.", "created_at": "2018-06-16T17:03:34Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwNzUxNg==", "fields": {"body": "Maybe call the script tests.sh instead?", "diff": "@@ -36,7 +36,7 @@ jobs:\n       - run:\n           name: pytest\n           when: always\n-          command: python -m pytest\n+          command: bash .misc/pytest_run.sh", "created_at": "2018-06-16T17:01:11Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkxOTE5OA==", "fields": {"body": "I think I have already make it as a different commit", "diff": "@@ -291,22 +292,15 @@ def get_file_dict(filename_list, log_printer=None, allow_raw_files=False):\n     return file_dict\n \n \n-def filter_raising_callables(it, exception, *args, debug=False, **kwargs):\n-    \"\"\"\n-    Filters all callable items inside the given iterator that raise the\n-    given exceptions.\n-\n-    :param it:        The iterator to filter.\n-    :param exception: The (tuple of) exception(s) to filter for.\n-    :param args:      Positional arguments to pass to the callable.\n-    :param kwargs:    Keyword arguments to pass to the callable.\n-    \"\"\"\n-    for elem in it:\n-        try:\n-            yield elem(*args, **kwargs)\n-        except exception:\n-            if debug:\n-                raise", "created_at": "2018-06-17T06:12:05Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNDk2Nw==", "fields": {"body": "It must be prose. High level summary. See pep 257. It is hard .. ;)", "diff": "@@ -0,0 +1,8 @@\n+\"\"\"\n+Has Setting, Section class; indexing tools; input checks; loads bears, files.", "created_at": "2018-06-17T10:36:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNTc2MQ==", "fields": {"body": "I have added that also in my code in the case where --debug-bears MyBear then Debugger will also debug the dependency Bear of MyBear. :P so for both the case it will debug :P", "diff": "@@ -0,0 +1,77 @@\n+Debug Bears\n+===========\n+\n+This document provide a brief overview of coala's Debugging Interface.\n+The Debugging Interface will help users to debug Bear code and step through\n+it using pdb interface\n+\n+Usage of coala's Debugger\n+=========================\n+\n+Command Line Interface\n+----------------------\n+\n+Users can specify the bear they want to debug using ``--debug-bears``, i.e.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,HelloWorldBear -f <filename> --debug-bears HelloWorldBear\n+\n+Below is the code given for a simple ``HelloWorldBear`` that prints a debug\n+message for each file:\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class HelloWorldBear(LocalBear):\n+        def run(self,\n+                filename,\n+                file):\n+            logging.info('Please follow newcomer guide.')\n+            logging.debug('Hello World! Checking file {}.'.format(filename))\n+\n+After invoking the coala's debugger it will step into the ``run()`` method of a\n+HelloWorldBear and help users to debug Bear code with passed settings.\n+\n+If bear names are not specified for ``--debug-bears`` then it will by\n+default debug all the bears passed through ``--bears`` or ``-b`` argument.\n+\n+.. code:: shell\n+\n+    $ coala --bears HelloWorldBear -files <filename> --debug-bears\n+\n+.. note::\n+\n+    A bear may depend on results from different bears. The debugger will debug\n+    all bears on which a bear is dependent on as well.", "created_at": "2018-06-17T11:08:09Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYyNTkxMg==", "fields": {"body": "blanklines != newline token.  They are orthogonal.  They can not be mapped sensibly, and doing it in your test code makes the test logic confusing.\nA newline token at EOL is terminating the last line with a newline token.\nThe meaning of that newline token varies between context and GUI editors, but it is not a blank line.", "diff": "@@ -16,11 +17,20 @@ class RunDecoratedBear(LocalBear):\n         remove_unreachable_code=get_aspect('UnreachableCode'),\n         minimum_clone_tokens=get_aspect('Clone').min_clone_tokens,\n     )\n+    @map_ambiguous_setting_to_aspect(\n+        use_spaces=(get_aspect('Indentation').indent_type,\n+                    [('space', True), ('tab', False)]),\n+        blanklines_at_EOF=(get_aspect('NewlineAtEOF').newline_at_EOF,", "created_at": "2018-06-20T01:30:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYyNjIzNA==", "fields": {"body": "return a dict of these, so that the tests become more self explanatory.", "diff": "@@ -16,11 +17,20 @@ class RunDecoratedBear(LocalBear):\n         remove_unreachable_code=get_aspect('UnreachableCode'),\n         minimum_clone_tokens=get_aspect('Clone').min_clone_tokens,\n     )\n+    @map_ambiguous_setting_to_aspect(\n+        use_spaces=(get_aspect('Indentation').indent_type,\n+                    [('space', True), ('tab', False)]),\n+        blanklines_at_EOF=(get_aspect('NewlineAtEOF').newline_at_EOF,\n+                           [(True, 1), (False, 0)]),\n+    )\n     def run(self,\n             remove_unreachable_code: bool = False,\n             minimum_clone_tokens: int = 10,\n+            use_spaces: bool = True,\n+            blanklines_at_EOF: int = 1,\n             ):\n-        return [remove_unreachable_code, minimum_clone_tokens]\n+        return [remove_unreachable_code, minimum_clone_tokens,", "created_at": "2018-06-20T01:33:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA==", "fields": {"body": "We could use ternary if we really want it short\nconst oldOrgs = oldData ? createOrgHash(oldData) : newOrgs\nbut, maybe, it's clearer if we use explicit conditional.", "diff": "@@ -25,8 +25,11 @@ module.exports = ({\n   feed_items: current,\n   data_updated: dataUpdated,\n }) => {\n-  const oldOrgs = createOrgHash(oldData)\n   const newOrgs = createOrgHash(newData)\n+  let oldOrgs = newOrgs\n+  if (oldData) {\n+    oldOrgs = createOrgHash(oldData)\n+  }", "created_at": "2018-06-20T11:32:42Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ==", "fields": {"body": "Missing newline", "diff": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" version=\"2.0\" xmlns:org=\"https://g.co/gci\" xmlns:property=\"https://g.co/gci\"><channel><title><![CDATA[Google Code-in Leaders]]></title><description><![CDATA[A feed for Google Code-in updates]]></description><link>https://gci-leaders.netlify.com</link><generator>RSS for Node</generator><lastBuildDate>Sun, 24 Dec 2017 03:04:35 GMT</lastBuildDate><atom:link href=\"https://gci-leaders.netlify.com/feed.xml\" rel=\"self\" type=\"application/rss+xml\"/><pubDate>Sun, 24 Dec 2017 03:04:35 GMT</pubDate></channel></rss>", "created_at": "2018-06-20T11:41:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc1NTAyOA==", "fields": {"body": "These lines are not part of your change. Do not modify their style unless you need to improve their functionality as well.\nIt just makes your patch large and 'steals' git blame", "diff": "@@ -35,33 +60,73 @@ def test_mapping(self):\n             get_aspect('Clone')('py', min_clone_tokens=30),\n         ])\n         result = self.bear.execute()\n-        self.assertEqual([True, 30], result)\n+        expected = self.EXPECTED.copy()\n+        expected['minimum_clone_tokens'] = 30\n+        expected['remove_unreachable_code'] = True\n+        self.assertResult(expected, result)\n \n     def test_setting_priority(self):\n         self.section.aspects = AspectList([\n             get_aspect('UnreachableCode')('py'),\n             get_aspect('Clone')('py', min_clone_tokens=30),\n         ])\n-        self.section.append(\n-            Setting('remove_unreachable_code', 'False'))\n-        self.section.append(\n-            Setting('minimum_clone_tokens', 40))\n+        self.section.append(Setting('remove_unreachable_code', 'False'))\n+        self.section.append(Setting('minimum_clone_tokens', 40))", "created_at": "2018-06-20T12:26:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2ODk3MA==", "fields": {"body": "You can import run_git_command() & git_commit() from GitCommitBearTest module and use it here, they're static methods. Code duplication isn't a good idea", "diff": "@@ -0,0 +1,174 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.vcs.VCSCommitBear import VCSCommitBear, CommitResult\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.settings.Section import Section\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class FakeCommitBear(VCSCommitBear):\n+    @classmethod\n+    def check_prerequisites(cls):\n+        return True\n+\n+    def get_head_commit(self):\n+        return ('This is the fake head commit', '')\n+\n+\n+@generate_skip_decorator(VCSCommitBear)\n+class VCSCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure message if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = FakeCommitBear(None, self.section, self.msg_queue)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(GitCommitBear.check_prerequisites(),\n+                             'git is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/git'\n+            self.assertTrue(GitCommitBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    def test_head_commit(self):\n+        self.assertEqual(self.run_uut(), ['HEAD commit information'])\n+\n+\n+@generate_skip_decorator(GitCommitBear)\n+class AnalyzeGitCommitTest(unittest.TestCase):\n+\n+    @staticmethod\n+    def run_git_command(*args, stdin=None):", "created_at": "2018-06-20T13:08:04Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg==", "fields": {"body": "This page is about contacting people.\nThis should be after \"- Give us feedback\", as a new item,\n\n\nReport any Code of Conduct violations to ....", "diff": "@@ -24,3 +24,6 @@ Modularity, clean good code as well as a high usability for both users\n and developers of analyse routines (called bears) stand in the\n foreground of the development. We will not speed up our development if\n it needs sacrificing any aspect of quality.\n+\n+\n+Please follow our Code Of Conduct, you can find it `here <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>`__.", "created_at": "2018-06-20T23:59:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA==", "fields": {"body": "query = db.issues.where('state').equals(states[0]) ?", "diff": "@@ -187,7 +187,11 @@ const database = new class Database {\n       const cards = [];\n       let query;\n       if (states.length === 1) {\n-        query = db.issues.where('state').equals('open');\n+        if (states[0] === 'open') {\n+          query = db.issues.where('state').equals('open');", "created_at": "2018-06-21T15:24:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIwNDA1Nw==", "fields": {"body": "These are all the lovely stuff which work on coala/coala repo, and the template used is being deployed to every other coala repo as well so we can use them there.\npip caching means the extra setup time is negligible.  And the plugins all should do nothing unless enabled in setup.cfg.\nAfter this, you can enable profiling -- see coala/coala#5548 , which also shows time spent in pytest plugins so enabling other features can be 'costed' and rejected if the plugin is too expensive.", "diff": "@@ -1,6 +1,21 @@\n-pytest\n-coverage\n-pytest-cov\n-requests_mock\n-codecov\n+coverage~=4.3.4\n+coverage-env-plugin~=0.1\n+coverage-config-reload-plugin~=0.2\n+codecov~=2.0.5\n+moban~=0.0.9\n+packaging~=16.8\n+pytest~=3.6.1\n+pytest-cov~=2.4\n+pytest-env~=0.6.0\n+pytest-error-for-skips~=1.0\n+pytest-instafail~=0.3.0\n+pytest-mock~=1.1\n+pytest-profiling~=1.3.0\n+pytest-reorder~=0.1.0\n+pytest-reqs~=0.0.6\n+pytest-timeout~=1.3.0\n+pytest-xdist~=1.15\n+requests-mock~=1.2\n+pip!=9.0.2, !=10.0.*\n+wheel~=0.29", "created_at": "2018-06-21T16:49:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDA5OQ==", "fields": {"body": "Just do 'review-blurb' ?", "diff": "@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');\n+  const reviewNumber = splitUrl[splitUrl.length - 1];\n+\n+  const classes = {\n+    'review-blurb': true\n+  };\n+\n+  return (\n+    <span className={classnames(classes)}>", "created_at": "2018-06-24T06:50:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE2NQ==", "fields": {"body": "split then pop returns the last element.", "diff": "@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');", "created_at": "2018-06-24T06:54:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMTU3OQ==", "fields": {"body": "in the future, I would love to see this turns into infinite list (automatically add more on scroll), since it doesn't load from the network anyway.\nAlso in the future, look at scrolling performance problem, it shouldn't happen now, but it might happen because there's thousands of DOM element being rendered (even the element outside the visible browser window).", "diff": "@@ -0,0 +1,79 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+import ColoredIcon from './colored-icon';\n+\n+const MIN_CHILDREN_TO_SHOW = 10;\n+\n+\n+class ReviewList extends Component {\n+  state = {morePressedCount: 0, showCSVModal: false};\n+\n+  showAllReviews = () => {\n+    this.setState({showAllReviews: true});\n+  };\n+\n+  onClickMore = () => {\n+    this.setState({morePressedCount: this.state.morePressedCount + 1});\n+  };\n+\n+  toggleCSVModal = () => {\n+    const {showCSVModal} = this.state;\n+    this.setState({showCSVModal: !showCSVModal});\n+  };\n+\n+  render() {\n+    const {icon, backgroundColor, children} = this.props;\n+    const {isOver} = this.props; // from the collector\n+    const {showAllReviews, morePressedCount} = this.state;\n+    const multiple = 25; // Add 25 results at a time\n+\n+    let className = 'column-title';\n+    if (icon) {\n+      className += ' has-icon';\n+    }\n+\n+    let iconEl;\n+    if (icon) {\n+      iconEl = (\n+        <ColoredIcon className='column-icon' color={backgroundColor}>{icon}</ColoredIcon>\n+      );\n+    }\n+\n+    const header = (\n+      <h2 className={className}>\n+        {iconEl}Meta-reviews in Need ({children.length})\n+      </h2>\n+    );\n+\n+    const classes = {\n+      'issue-list': true,\n+      'is-over': isOver\n+    };\n+\n+    let partialChildren;\n+    let moreButton;\n+    if (!showAllReviews && MIN_CHILDREN_TO_SHOW + (1 + morePressedCount) * multiple < children.length) {\n+      partialChildren = children.slice(0, MIN_CHILDREN_TO_SHOW + morePressedCount * multiple);\n+      moreButton = (\n+        <BS.Button onClick={this.onClickMore} className='list-group-item'>\n+          {children.length - (morePressedCount + 1) * multiple} more...", "created_at": "2018-06-24T08:02:04Z", "last_edited_at": "2018-06-24T08:02:56Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NTgxNQ==", "fields": {"body": "Nevermind, it's inside map, didn't saw that.\nBut this will mutate the prop, it's considered bad practice in React, and IMO a map shouldn't mutate because it's normally for creating a new array. This will not cause problem since we know it's only adding new property that isn't used elsewhere. But, best to stay away from bad practices. Spread syntax (...) is available for cloning objects.", "diff": "@@ -77,6 +99,27 @@ class KanbanRepo extends Component {\n   render() {\n     const {columnData, cards, repoInfos} = this.props;\n \n+    // Get review comments out of cards\n+    const reviews = cards.map((card) => {\n+      if (card.issue.pullRequest && card.issue.pullRequest.comments) {\n+        let comments = card.issue.pullRequest.comments;\n+        comments.forEach(comment => {\n+          comment.repoOwner = card.repoOwner;\n+          comment.repoName = card.repoName;\n+          comment.number = card.number;\n+        });\n+        return comments;", "created_at": "2018-06-25T16:49:25Z", "last_edited_at": "2018-06-25T17:07:25Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjQ2Nw==", "fields": {"body": "trailing comma.", "diff": "@@ -71,6 +71,17 @@ def TEAMS(self):\n     def TEAMS(self, new):\n         self._teams = new\n \n+    def team_mapping(self):\n+        return {\n+            'newcomers': self.TEAMS[self.GH_ORG_NAME + ' newcomers'],\n+            'developers': self.TEAMS[self.GH_ORG_NAME + ' developers'],\n+            'maintainers': self.TEAMS[self.GH_ORG_NAME + ' maintainers']", "created_at": "2018-06-27T11:43:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjY0OQ==", "fields": {"body": "trailing comma", "diff": "@@ -111,6 +111,8 @@ def test_is_room_member(self):\n     def test_hello_world_callback(self):\n         teams = {\n             'coala newcomers': self.mock_team,\n+            'coala developers': self.mock_team,\n+            'coala maintainers': self.mock_team", "created_at": "2018-06-27T11:44:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzUwNw==", "fields": {"body": "keep the function, change what it does.\nthat is less disruptive to existing code, making it easier to read&review the changes", "diff": "@@ -89,40 +100,28 @@ def invite_cmd(self, msg, match):\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n         team = team.lower()\n \n-        is_developer = self.TEAMS[self.GH_ORG_NAME +\n-                                  ' developers'].is_member(inviter)\n-        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n-                                   ' maintainers'].is_member(inviter)\n+        is_developer = self.is_team_member(inviter, 'developers')\n+        is_maintainer = self.is_team_member(inviter, 'maintainers')\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        valid_teams = ['newcomers', 'developers', 'maintainers']\n-        if team not in valid_teams:\n+        if team not in self.team_mapping():\n             return 'Please select from one of the valid teams: ' + ', '.join(\n-                    valid_teams)\n-\n-        def invite(invitee, team):", "created_at": "2018-06-27T11:47:46Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzY0MQ==", "fields": {"body": "valid_teams = elf.team_mapping() will require less changes to existing lines, and be more efficient.", "diff": "@@ -89,40 +100,28 @@ def invite_cmd(self, msg, match):\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n         team = team.lower()\n \n-        is_developer = self.TEAMS[self.GH_ORG_NAME +\n-                                  ' developers'].is_member(inviter)\n-        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n-                                   ' maintainers'].is_member(inviter)\n+        is_developer = self.is_team_member(inviter, 'developers')\n+        is_maintainer = self.is_team_member(inviter, 'maintainers')\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        valid_teams = ['newcomers', 'developers', 'maintainers']", "created_at": "2018-06-27T11:48:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTkyMg==", "fields": {"body": "We need to fix #3 so people don't get confused.", "diff": "@@ -0,0 +1,92 @@\n+.review {", "created_at": "2018-06-27T11:56:43Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc2MDM3Mg==", "fields": {"body": "I think you can remove this (as I saw in other templates).", "diff": "@@ -3,4 +3,10 @@\n \n @Language\n class Ruby:\n-    pass\n+    aliases = 'rb',\n+", "created_at": "2018-06-28T08:53:30Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc4MTI0Mg==", "fields": {"body": "1.4 is a version of one program called \"GNU m4\", and isnt a version of the language.\nSome of the history of the language can be found on Wikipedia and https://www.gnu.org/savannah-checkouts/gnu/m4/manual/m4-1.4.18/html_node/Compatibility.html\nDue to incompatibilities mentioned in the above, we could say there is one version of the language called \"GNU m4 1.4\", and a different one being \"System V m4\", etc.\nHowever unless/until we know about some clear differences for these variations, and notice that users are supplying .m4 files with those differences, I think it is best to avoid defining versions.", "diff": "@@ -0,0 +1,11 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class m4:\n+    versions = 1.4,", "created_at": "2018-06-28T09:47:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc5NTI3NQ==", "fields": {"body": "not quite..\n'#' only works at the beginning of a command, which is conceptually incompatible with the other usages ofcomment_delimiter` which assume a comment delimiter has a high precedence.\nTypically this means in Tcl, ; # is needed to be a comment occurring in the middle of a line.\nThis difference is quite small, and quite achievable to support, but is getting further from your project scope of quotes, so I think discard this from the MR, and please create an issue about supporting Tcl comments.", "diff": "@@ -0,0 +1,12 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class Tcl:\n+    aliases = 'Tcl/Tk',\n+    versions = 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6\n+    extensions = '.tcl',\n+    comment_delimiter = '#'", "created_at": "2018-06-28T10:37:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMjkzMQ==", "fields": {"body": "super()?", "diff": "@@ -46,6 +48,29 @@\n member_accessed\"\"\"))\n \n \n+@generate_repr(('id', hex),\n+               'origin',\n+               'differences',\n+               'count_matrices',\n+               'message')\n+@generate_ordering('origin',\n+                   'differences',\n+                   'count_matrices',\n+                   'message')\n+class ClangFunctionDifferenceResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin,\n+                 differences: list,\n+                 count_matrices: dict):\n+        HiddenResult.__init__(origin,", "created_at": "2018-06-28T11:54:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxOTg0Ng==", "fields": {"body": "Using Ignore bear here, as this line will be modified again soon when you fix the bug, and will then be reformatted.", "diff": "@@ -142,8 +147,9 @@ def test_create_issue_cmd(self):\n         # TODO\n         # Ignoring assertion to prevent build failure for time being\n         # Creating issue in private chat\n-        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-        #                       'You\\'re not allowed')\n+        # testbot_private.assertCommand('!new issue repository this '", "created_at": "2018-06-28T12:24:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMDA1NA==", "fields": {"body": "start the command string on the next line so that it can use the full width, and have line breaks in sensible spots.", "diff": "@@ -153,21 +159,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the '", "created_at": "2018-06-28T12:25:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTE0MA==", "fields": {"body": "start string on next line", "diff": "@@ -153,21 +159,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the '\n+                                     'title\\nbo\\ndy',\n+                                     'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository.github.io '", "created_at": "2018-06-28T12:29:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTQ4Ng==", "fields": {"body": "move strings to next line so you dont need to split a URL.  that makes it quite hard to read and understand the test procedure/intention.", "diff": "@@ -191,20 +200,26 @@ def test_unassign_cmd(self):\n         mock_iss.assignees = (None, )\n         mock_iss.unassign = MagicMock()\n \n-        testbot.assertCommand('!unassign https://github.com/coala/name/issues/23',\n+        # Start ignoring InvalidLinkBear\n+        testbot.assertCommand('!unassign https://github.com/coala/name/'", "created_at": "2018-06-28T12:30:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTkxNw==", "fields": {"body": "drop create_autospec to next line and indent only four from the start of the key.", "diff": "@@ -368,22 +385,28 @@ def test_mark_cmd(self):\n         mock_gitlab_mr.labels = ['process/wip']\n         testbot.assertCommand(cmd_github.format('pending', 'coala', 'a', '23'),\n                               'marked pending review')\n-        testbot.assertCommand(cmd_github.format('pending-review', 'coala', 'a', '23'),\n+        testbot.assertCommand(cmd_github.format('pending-review', 'coala',\n+                                                'a', '23'),\n                               'marked pending review')\n-        testbot.assertCommand(cmd_github.format('pending review', 'coala', 'a', '23'),\n+        testbot.assertCommand(cmd_github.format('pending review',\n+                                                'coala', 'a', '23'),\n                               'marked pending review')\n+        # Stop ignoring\n \n     def test_alive(self):\n         labhub, testbot = plugin_testbot(plugins.labhub.LabHub, logging.ERROR)\n         with patch('plugins.labhub.time.sleep') as mock_sleep:\n             labhub.gh_repos = {\n                 'coala': create_autospec(IGitt.GitHub.GitHub.GitHubRepository),\n-                'coala-bears': create_autospec(IGitt.GitHub.GitHub.GitHubRepository),\n-                'coala-utils': create_autospec(IGitt.GitHub.GitHub.GitHubRepository)\n+                'coala-bears': create_autospec(", "created_at": "2018-06-28T12:31:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDY2OQ==", "fields": {"body": "Maybe check if commentsWithReactions is the same length as rawComments here because if not, you might have an error.", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {", "created_at": "2018-07-01T16:44:07Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTE4NQ==", "fields": {"body": "Also, probably use NODE_ENV === 'development' for debug value instead.", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {", "created_at": "2018-06-30T15:27:54Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcxMA==", "fields": {"body": "node.diffHunk || null", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,", "created_at": "2018-06-30T15:53:12Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTg1Nw==", "fields": {"body": "Why bother setting the properties, if all of it is null?", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,\n+            author: commentAuthor,\n+            reactions,\n+            createdAt: node.createdAt,\n+            lastEditedAt: node.lastEditedAt,\n+            // the native `updatedAt` field of comment is inaccurate\n+            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt\n+          };\n+        });\n+        info.issue.pullRequest = {\n+          htmlUrl: node.url,\n+          comments\n+        };\n+        return info;\n+      }).filter((node) => node));\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for pull request. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchPullRequests);\n+    }\n+  }\n+\n+  _mapNodeToIssue(node) {\n+    let user, assignee, milestone;\n+\n+    if (node.author) {\n+      user = {\n+        login: node.author.login,\n+        avatarUrl: node.author.avatarUrl\n+      };\n+    } else {\n+      user = {\n+        login: null,\n+        avatarUrl: null\n+      };\n+    }\n+\n+    if (node.assignees.nodes && node.assignees.nodes.length) {\n+      assignee = {\n+        login: node.assignees.nodes[0].login,\n+        avatarUrl: node.assignees.nodes[0].avatarUrl\n+      };\n+    } else {\n+      assignee = null;\n+    }\n+\n+    if (node.milestone) {\n+      milestone = {\n+        title: node.milestone.title,\n+        createdAt: node.milestone.createdAt,\n+        dueOn: node.milestone.dueOn,\n+        state: node.milestone.state.toLowerCase(),\n+        htmlUrl: node.milestone.url,\n+        description: node.milestone.description\n+      };\n+    } else {\n+      milestone = {\n+        title: null,\n+        createdAt: null,\n+        dueOn: null,\n+        state: null,\n+        htmlUrl: null,\n+        description: null\n+      };", "created_at": "2018-06-30T15:59:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQwNjAzMg==", "fields": {"body": "REM is another one.\nhttps://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/comments-in-code\nWe need to enhance coalib to allow multiple delimiters.  Create an issue please", "diff": "@@ -0,0 +1,11 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class VisualBasic:\n+    aliases = 'vb',\n+    extensions = '.vb', '.bas'\n+    comment_delimiter = \"'\"", "created_at": "2018-07-02T07:32:30Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0MjI2NA==", "fields": {"body": "use type(self._instance)", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines\n+\n+\n+class Memoize:\n+    \"\"\"\n+    ``Memoize`` serves as a decorator for the properties\n+    of ``FileFactory`` and caches the results of the property\n+    for a particular ``FileFactory`` object.\n+    \"\"\"\n+\n+    def __init__(self, method):\n+        self._method = method\n+\n+    def __call__(self, instance):\n+        self._instance = instance\n+        return self.__get__(self._instance, self._instance.__class__)", "created_at": "2018-07-03T20:33:59Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0NzI0MA==", "fields": {"body": "I told you to move those parts that show how the debugger itself behaves to the main section above^^ That shouldn't stay inside Usage -> Command Line Interface.", "diff": "@@ -0,0 +1,123 @@\n+Debug Bears\n+===========\n+\n+This document provides a overview of coala's Debugging Interface.\n+The Debugging Interface will help users to debug Bear code and step through\n+it using the pdb interface.\n+\n+After invoking coala's debugger it will step into the ``run()`` method of a\n+bear regardless of using ``yield`` or not and will step out as soon as a bear\n+finish analysis.\n+\n+.. note::\n+\n+    Pdb's quit-command (``q``) has been remapped so coala continues its\n+    normal execution without aborting. So, ``quit`` or ``q`` will first clear\n+    all breakpoints then continue execution.\n+\n+Usage\n+-----\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Users can specify the bear they want to debug using ``--debug-bears``, i.e.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,HelloWorldBear -f <filename> --debug-bears HelloWorldBear\n+\n+Below is the code given for a simple ``HelloWorldBear`` that prints a debug\n+message for each file and display the passed information i.e.,\n+\"A HelloworldBear.\" message.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class HelloWorldBear(LocalBear):\n+        def run(self, filename, file):\n+            logging.debug('Hello World! Checking file {}.'.\n+                          format(filename))\n+\n+            yield self.new_result(message=\"A HelloworldBear.\",\n+                                  file=filename)\n+\n+After invoking debugger will step into ``run()`` method using\n+pdb ``runcall()`` i.e.,\n+\n+::\n+\n+    [DEBUG][15:58:27] Platform Linux -- Python 3.6.5, coalib\n+    0.12.0.dev99999999999999\n+    Executing section cli...\n+    [DEBUG][15:58:27] Files that will be checked:\n+    /home/Voldemort/test/mytest.py\n+    [DEBUG][15:58:27] coala is run only on changed files, bears' log messages\n+    from previous runs may not appear. You may use the `--flush-cache` flag to\n+    see them.\n+    [DEBUG][15:58:27] Running bear HelloWorldBear...\n+    > /home/Voldemort/coala-bears/bears/general/HelloWorldBear.py(8)run()\n+    -> logging.debug('Hello World! Checking file {}.'.\n+    (Pdb) l\n+    3   from coalib.bears.LocalBear import LocalBear\n+    4\n+    5\n+    6   class HelloWorldBear(LocalBear):\n+    7       def run(self, filename, file):\n+    8  ->           logging.debug('Hello World! Checking file {}.'.\n+    9                         format(filename))\n+    10\n+    11              yield self.new_result(message=\"A HelloworldBear.\",\n+    12                                    file=filename)\n+    [EOF]\n+    (Pdb) c\n+    [DEBUG][15:58:30] Hello World! Checking file /home/Voldemort/test/mytest.py.\n+    --Return--\n+    > /home/Voldemort/coala-bears/bears/general/HelloWorldBear.py(8)run()->None\n+    -> logging.debug('Hello World! Checking file {}.'.\n+    (Pdb) c\n+\n+    mytest.py\n+    **** HelloWorldBear [Section: cli | Severity: NORMAL] ****\n+    !    ! A HelloworldBear.\n+    [    ] *0. Do (N)othing\n+    [    ]  1. (O)pen file\n+    [    ]  2. Add (I)gnore comment\n+    [    ] Enter number (Ctrl-D to exit):", "created_at": "2018-07-03T20:55:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTYzNw==", "fields": {"body": "apologies. my comment at #573 (comment) suggested the wrong syntax.\nthe point of using ignore is to NOT modify the line.\nSo, you need to use Ignoring ... and End ignoring or something like that so that this TODO doesnt create style errors until it is fixed.", "diff": "@@ -144,7 +149,7 @@ def test_create_issue_cmd(self):\n         # TODO\n         # Ignoring assertion to prevent build failure for time being\n         # Creating issue in private chat\n-        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',  # Ignore PycodestyleBear, LineLengthBear", "created_at": "2018-07-04T00:58:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTkzNQ==", "fields": {"body": "like the others, dont have \\n in the middle of the line.  It makes it harder for people to read the test and understand its intention.\nAlso these multiple line commands should use textwrap.dedent('''...''') or \"\"\"...\"\"\" so that you dont need to put \\n in the message, and so that the reader doesnt need to check whether the strings on multiple lines are implicit string concats or have a comma, etc.  multiline strings should use Python's multiline strings syntax.\n(would be a possible enhancement to errbot to add a assertMultilineCommand which does the textwrap.dedent for the test writer.)", "diff": "@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',", "created_at": "2018-07-04T01:01:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzU3MQ==", "fields": {"body": "change all of these invalid URLs to contain constant strings which you can ignore using settings in the .coafile, and can be re-used in future so InvalidLinkBear doesnt need to be ignored all the time.\n(and where you are improving the style of tests, also switch to using consistent issue numbers instead of random numbers, which make the reader wonder whether those numbers have some impact on the tests.)\nhttps://github.com/coala/name/issues/23 -> https://github.com/coala/example/issues/999\nhttps://github.com/coala/s/issues/52 -> https://github.com/coala/example2/issues/999\nhttps://gitlab.com/ala/am/issues/532 -> https://gitlab.com/example/test/issues/999", "diff": "@@ -193,20 +201,27 @@ def test_unassign_cmd(self):\n         mock_iss.assignees = (None, )\n         mock_iss.unassign = MagicMock()\n \n-        testbot.assertCommand('!unassign https://github.com/coala/name/issues/23',\n-                              'you are unassigned now', timeout=10000)\n+        # Start ignoring InvalidLinkBear", "created_at": "2018-07-04T01:17:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzcxNw==", "fields": {"body": "please create a newcomer or low issue for this to be changed to https", "diff": "@@ -2,10 +2,13 @@\n \n extra_plugin_dir = 'plugins'\n \n+\n def test_search_cmd(testbot):\n-    testbot.assertCommand('!search api this is search string',\n-                          'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n-    testbot.assertCommand('!search user this is search string',\n-                          'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search api this is search string',\n+        'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search user this is search string',\n+        'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')", "created_at": "2018-07-04T01:19:31Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkwMjYwMw==", "fields": {"body": "put them into an array, and then format them at the end when raising the exception", "diff": "@@ -1,45 +1,43 @@\n-from coala_utils.Comparable import Comparable\n+import unittest\n \n+from coala_utils.Comparable import Comparable\n \n-def _assert_comparable_equal(observed_result, expected_result):\n-    \"\"\"\n-    Compares individual fields of the result objects using\n-    `__compare_fields__` of `coala_utils.Comparable` class\n-    and yields messages in case of an attribute mismatch.\n-    \"\"\"\n \n-    if not len(observed_result) == len(expected_result):\n-        assert observed_result == expected_result, '%s != %s' % (\n-            observed_result, expected_result)\n-\n-    messages = ''\n-    for observed, expected in zip(observed_result, expected_result):\n-        if (isinstance(observed, Comparable) and\n-            isinstance(expected, Comparable)) and (type(observed) is\n-                                                   type(expected)):\n-            for attribute in type(observed).__compare_fields__:\n-                try:\n-                    assert getattr(observed, attribute) == getattr(\n-                        expected, attribute), (\n-                        '{} mismatch: {}, {} != {}, {}'.format(\n-                            attribute,\n-                            observed.origin, observed.message,\n-                            expected.origin, expected.message))\n-                except AssertionError as ex:\n-                    messages += (str(ex) + '\\n\\n')\n-        else:\n-            assert observed_result == expected_result, '%s != %s' % (\n-                observed_result, expected_result)\n-\n-    if messages:\n-        raise AssertionError(messages)\n-\n-\n-class BaseTestHelper:\n+class BaseTestHelper(unittest.TestCase):\n     \"\"\"\n     This is a base class for all Bears' tests of coala's testing API.\n     \"\"\"\n \n+    def _assert_comparable_equal(self,\n+                                 observed_result,\n+                                 expected_result):\n+        \"\"\"\n+        Compares individual fields of the result objects using\n+        `__compare_fields__` of `coala_utils.Comparable` class\n+        and yields messages in case of an attribute mismatch.\n+        \"\"\"\n+\n+        if not len(observed_result) == len(expected_result):\n+            self.assertEqual(observed_result, expected_result)\n+\n+        messages = ''", "created_at": "2018-07-03T18:06:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDA2Mg==", "fields": {"body": "We should move that asap to coala-utils ;) Maybe even extend it to something like cached_property:\n@cached_property\ndef myprop(self):\n    ...", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines\n+\n+\n+class Memoize:\n+    \"\"\"\n+    ``Memoize`` serves as a decorator for the properties\n+    of ``FileFactory`` and caches the results of the property\n+    for a particular ``FileFactory`` object.\n+    \"\"\"", "created_at": "2018-07-03T20:02:42Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDY5NA==", "fields": {"body": "Can we add here\nfunctools.update_wrapper(self, func)\n\nthen the signatures look a bit nicer ;)", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines\n+\n+\n+class Memoize:\n+    \"\"\"\n+    ``Memoize`` serves as a decorator for the properties\n+    of ``FileFactory`` and caches the results of the property\n+    for a particular ``FileFactory`` object.\n+    \"\"\"\n+\n+    def __init__(self, method):\n+        self._method = method", "created_at": "2018-07-03T20:05:24Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNzQ3NQ==", "fields": {"body": "do we still need all that?", "diff": "@@ -0,0 +1,69 @@\n+import os\n+\n+__all__ = ['get_content', 'clear_cache']\n+\n+\n+# The cache. Maps filenames to either a thunk which will provide source code,\n+# or a tuple (size, mtime, contents, fullname) once loaded.\n+cache = {}\n+\n+\n+def clear_cache():\n+    \"\"\"\n+    Clear the cache entirely.\n+    \"\"\"\n+    global cache\n+    cache = {}\n+\n+\n+def get_content(filename):\n+    \"\"\"\n+    Get the raw contents of a file from the cache.\n+    Update the cache if it doesn't contain an entry for this file already.\n+    \"\"\"\n+    if filename in cache:\n+        return cache[filename][2]\n+    return update_cache(filename)\n+\n+\n+def update_cache(filename):\n+    \"\"\"\n+    Update a cache entry and return its list of lines.\n+    If something's wrong, print a message, discard the cache entry,\n+    and return an empty list.\n+    \"\"\"\n+    stat = os.stat(filename)\n+\n+    with open(filename, 'rb') as fp:\n+        lines = fp.read()\n+    size, mtime = stat.st_size, stat.st_mtime\n+    cache[filename] = size, mtime, lines, filename\n+    return lines", "created_at": "2018-07-03T20:16:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAxNjQ2MQ==", "fields": {"body": "id=\"search\" class=\"validate\" can you remove those suplimentar spaces there?", "diff": "@@ -1,8 +1,9 @@\n <section>\n <div class=\"main-content container\">\n \n-    <div class=\"col-md-8 col-md-offset-2\">\n-        <input ng-model=\"searchText\" placeholder=\"Search for a bear or a language\" id=\"search\" type=\"text\" class=\"validate\">\n+    <div class=\"col-md-8 col-md-offset-2 input-field\">\n+      <input ng-model=\"searchText\" placeholder=\"Search for a bear or a language\" id=\"search\"   class=\"validate\" type=\"search\" required>", "created_at": "2017-02-08T08:54:21Z", "last_edited_at": null, "author": "impmihai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAyODE4Mg==", "fields": {"body": "@gkrishnan724  I think this will help text centering  to be backwards compatible as its in -moz-placeholder (firefox 18-)", "diff": "@@ -223,19 +227,19 @@ textarea.materialize-textarea {\n }\n :-moz-placeholder {\n   /* Firefox 18- */\n-\n+  text-align: center;", "created_at": "2017-02-08T09:56:30Z", "last_edited_at": "2017-02-08T09:57:35Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDU0NzU3NA==", "fields": {"body": "why do you make a new class, doesn't p do the job?", "diff": "@@ -3,8 +3,16 @@\n         <div class=\"col-md-8 col-md-offset-2\">\n             <div class=\"title-get-involved\">about</div>\n             <br>\n-            <div class=\"get-description\">\n-                \n+            <div class=\"about-description\">", "created_at": "2017-04-09T17:14:52Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYyMzQ0OQ==", "fields": {"body": "@Mixih stated to use this to get the rc2 in his blog post and gist, so used this. Anyway I'll change this after 0.11 is released", "diff": "@@ -0,0 +1,19 @@\n+language: python\n+python:\n+ - 3.6\n+\n+addons:\n+  apt:\n+    packages:\n+      - libssl-dev\n+      - python3-dev\n+\n+before_script:\n+  - pip install coala-bears[alldeps]==0.11.rc2 --pre -U", "created_at": "2017-05-21T05:26:04Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQyOTU2OQ==", "fields": {"body": "Sure, I'll check with upstream", "diff": "@@ -0,0 +1,14 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+class Nevermind(BotPlugin):\n+    \"\"\"\n+    Doesn't mind", "created_at": "2017-05-25T06:58:41Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQzMzA4NA==", "fields": {"body": "Could you add a comment explaining so?", "diff": "@@ -0,0 +1,12 @@\n+import os\n+\n+from plugins.nevermind import Nevermind\n+\n+pytest_plugins = ['errbot.backends.test']\n+\n+extra_plugin_dir = '../plugins'", "created_at": "2017-05-25T07:28:10Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUwNg==", "fields": {"body": "trailing blank line.", "diff": "@@ -0,0 +1,12 @@\n+[Core]\n+name = ship_it\n+module = ship_it\n+\n+[Documentation]\n+description = Show motivational ship it squirrel images.\n+\n+[Python]\n+version = 3\n+\n+[Errbot]\n+", "created_at": "2017-05-27T10:41:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUxMw==", "fields": {"body": "trailing blank line.", "diff": "@@ -19,3 +19,7 @@ default_actions = PEP8Bear: ApplyPatchAction\n \n [all.linelength]\n bears = LineLengthBear\n+\n+[all.links]\n+bears = InvalidLinkBear\n+", "created_at": "2017-05-27T10:41:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2Njc0Mg==", "fields": {"body": "typo", "diff": "@@ -0,0 +1,12 @@\n+[Core]\n+module = github\n+name = github\n+\n+[Documentation]\n+description = GitHub utilities exposed through errbpt", "created_at": "2017-06-01T09:22:53Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2NjgxOQ==", "fields": {"body": "use internal logging object provided by errbot instead", "diff": "@@ -0,0 +1,111 @@\n+import logging", "created_at": "2017-06-01T09:23:12Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMDUyMQ==", "fields": {"body": "Double quotes to single quotes. Quotes bear not throwing errors. Do that everywhere in this file.", "diff": "@@ -0,0 +1,27 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class The_rules(BotPlugin):\n+    \"\"\"\n+    List the bot rules\n+    \"\"\"\n+\n+    RULES = [\n+        \"A robot may not harm humanity, or, by inaction, allow humanity to \"", "created_at": "2017-06-01T01:13:57Z", "last_edited_at": "2017-06-01T01:14:23Z", "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI2NA==", "fields": {"body": "easily -> as well.", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"", "created_at": "2017-06-01T01:23:09Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI4Ng==", "fields": {"body": "then -> than", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"\n+        \"sure to try out a few things first - you're in a much better position \"\n+        \"to help yourself then we are. Try googling, thinking, the GitHub \"", "created_at": "2017-06-01T01:23:25Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTM3NQ==", "fields": {"body": "Let's link the git grep page here using markdown if possible.", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"\n+        \"sure to try out a few things first - you're in a much better position \"\n+        \"to help yourself then we are. Try googling, thinking, the GitHub \"\n+        \"search or git grep if you are looking for source code.\"", "created_at": "2017-06-01T01:24:29Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTMyNA==", "fields": {"body": "the github search -> searching on github.", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"\n+        \"sure to try out a few things first - you're in a much better position \"\n+        \"to help yourself then we are. Try googling, thinking, the GitHub \"\n+        \"search or git grep if you are looking for source code.\"", "created_at": "2017-06-01T01:23:57Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyNjc1NQ==", "fields": {"body": "Quotes bear is set to double quotes though, it'll complain :/", "diff": "@@ -0,0 +1,27 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class The_rules(BotPlugin):\n+    \"\"\"\n+    List the bot rules\n+    \"\"\"\n+\n+    RULES = [\n+        \"A robot may not harm humanity, or, by inaction, allow humanity to \"", "created_at": "2017-06-01T04:42:32Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyODYwOQ==", "fields": {"body": "Not applying here, since applied in other PR, will merge that first and then this, so there are less conflicts \ud83d\udc4d", "diff": "@@ -0,0 +1,27 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class The_rules(BotPlugin):\n+    \"\"\"\n+    List the bot rules\n+    \"\"\"\n+\n+    RULES = [\n+        \"A robot may not harm humanity, or, by inaction, allow humanity to \"", "created_at": "2017-06-01T05:07:36Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNDI5MA==", "fields": {"body": "Docstring needed", "diff": "@@ -0,0 +1,25 @@\n+import os\n+\n+import wolframalpha\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class WolframAlpha(BotPlugin):\n+    \"\"\"\n+    Query the Computational Knowledge Engine\n+    \"\"\"\n+\n+    def activate(self):\n+        super().activate()\n+        self.client = wolframalpha.Client(os.environ.get('WA_TOKEN'))\n+\n+    @botcmd\n+    def wa(self, msg, arg):", "created_at": "2017-06-02T09:17:55Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNzg3Mw==", "fields": {"body": "remove this line", "diff": "@@ -0,0 +1,12 @@\n+[Core]\n+module = lmgtfy\n+name = lmgtfy\n+\n+[Documentation]\n+description = For all those people who find it more convenient to bother you with their question rather than search it for themselves.\n+\n+[Python]\n+version = 3\n+\n+[Errbot]\n+", "created_at": "2017-06-02T09:36:56Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNDcxMg==", "fields": {"body": "Better to say you are not a maintainer and hence you don't have the rights to invite. Nice try \ud83d\udca9 .", "diff": "@@ -1,7 +1,106 @@\n-from errbot import BotPlugin\n+import os\n+import re\n \n+import github3\n \n-class Labhub(BotPlugin):\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class LabHub(BotPlugin):\n     \"\"\"\n     GitHub and GitLab utilities\n     \"\"\"\n+\n+    INVITE_SUCCESS = {\n+        'newcomers': 'Welcome @{}! :tada:\\n\\nTo get started, please '\n+                     'follow our [newcomers guide](https://coala.io/newcomer).'\n+                     'Most issues will be explained there and in linked pages -'\n+                     ' it will save you a lot of time, just read it. *Really.*'\n+                     \"\\n\\n*Do not take an issue if you don't understand it on \"\n+                     'your own.* Especially if you are new you have to be '\n+                     'aware that getting started with an open source community '\n+                     'is not trivial: you will have to work hard and most '\n+                     'likely become a better coder than you are now just as we '\n+                     \"all did.\\n\\nDon't get us wrong: we are *very* glad to \"\n+                     'have you with us on this journey into open source! We '\n+                     'will also be there for you at all times to help you with '\n+                     'actual problems. :)',\n+        'developers': 'Wow @{}, you are a part of developers team now! :tada: '\n+                      'Welcome to our community!',\n+        'maintainers': '@{} you seem to be awesome! You are now a maintainer! '\n+                       ':tada: Please go through '\n+                       'https://github.com/coala/coala/wiki/Membership'\n+    }\n+\n+    def activate(self):\n+        super().activate()\n+        self.GH = LabHub.get_gh_obj(os.environ.get('GH_TOKEN'))\n+        self.ORG = LabHub.get_org(self.GH, 'coala')\n+        self.TEAMS = LabHub.get_teams(self.ORG)\n+\n+    @staticmethod\n+    def get_gh_obj(token):\n+        \"\"\"\n+        :param token:   github token\n+        :returns:       ``github3.GitHub`` object\n+        \"\"\"\n+        return github3.login(token=token)\n+\n+    @staticmethod\n+    def get_org(gh, org_name):\n+        \"\"\"\n+        :param gh:          ``github3.GitHub`` object\n+        :param org_name:    Name of the organization\n+        :returns:           ``github3.orgs.Organization`` object\n+        \"\"\"\n+        return gh.organization(org_name)\n+\n+    @staticmethod\n+    def get_teams(org):\n+        \"\"\"\n+        :param org: ``github3.orgs.Organization`` object\n+        :returns:   Dict containing team names as keys and corrosponding\n+                    ``github3.orgs.Team`` objects as values.\n+        \"\"\"\n+        teams = dict()\n+        for team in org.iter_teams():\n+            teams[team.name] = team\n+        return teams\n+\n+    @staticmethod\n+    def invite(user, team):\n+        \"\"\"\n+        Invite user to team.\n+        :param user:    Username\n+        :param team:    ``github3.orgs.Team`` object\n+        \"\"\"\n+        return team.invite(user)\n+\n+    @re_botcmd(pattern=r'(?:(?:invite)|(?:inv))\\s+(\\w+)\\s*(?:to)\\s+(\\w+)')\n+    def invite_cmd(self, msg, match):\n+        \"\"\"\n+        Invite given user to given team. By default it invites to\n+        \"coala newcomers\" team.\n+        \"\"\"\n+        invitee = match.group(1)\n+        inviter = msg.frm.nick\n+\n+        team = 'coala newcomers' if match.group(2) is None else match.group(2)\n+\n+        self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n+\n+        if self.TEAMS['coala maintainers'].is_member(invitee):\n+            valid_teams = ['newcomers', 'developers', 'maintainers']\n+            if team.lower() not in valid_teams:\n+                return 'Please select from one of the ' + ', '.join(valid_teams)\n+            team_mapping = {\n+                'newcomers': 'coala newcomers',\n+                'developers': 'coala developers',\n+                'maintainers': 'coala maintainers'\n+            }\n+\n+            # Call the helper method after all the validation is done\n+            LabHub.invite(invitee, self.TEAMS[team_mapping[team.lower()]])\n+            return self.INVITE_SUCCESS[team.lower()].format(invitee)\n+        else:\n+            return 'Nice try :poop:'", "created_at": "2017-06-04T16:46:23Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDcwNw==", "fields": {"body": "Missing space after period well. Click also missing period after this", "diff": "@@ -0,0 +1,28 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        'Hey! You seem to have asked a question which could have been solved '\n+        'by other means as well.Click [this]({}) When you ask a question, be '", "created_at": "2017-06-05T03:06:36Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDg3Mw==", "fields": {"body": "*not us", "diff": "@@ -0,0 +1,87 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Explain(BotPlugin):\n+    \"\"\"\n+    Explain various terms\n+    \"\"\"\n+\n+    MSGS = {\n+        'review': 'After creating your `Pull Request`, it is under the review '\n+                  'process. This can be deduced from the `process/pending '\n+                  'review` label. Now you have to wait for the reviewers to '\n+                  'review your PR. You should *not* ask for reviews on our '\n+                  'Gitter channel - we review those PRs continuously.\\n\\n'\n+                  \"We're usually swamped with reviews, while you are waiting \"\n+                  \"**please review other people's PRs** at [coala.io/review]\"\n+                  '(https://coala.io/review): that helps you and will make '\n+                  'your review happen faster as well. As a rule of thumb, '\n+                  '*for every review you receive, give at least one review '\n+                  'to someone else!*\\n\\nFor a good review, look at every '\n+                  'commit on its own and place `<sha> is ready` or `<sha> '\n+                  'needs work` comments on the pull request, be sure to '\n+                  \"remove other spacing like tabs. If you're done with a \"\n+                  'pull request, you can use `cobot mark wip <pull URL>` '\n+                  'to mark it *work in progress* finally.',\n+        'closes': 'We use bug prediction in coala which relies on the `Fixes` '\n+                  'keyword in commit messages. To get good results from that '\n+                  'we need to use `Closes` for normal issues instead of `Fixes`'\n+                  ' which should only be used for real bugs. (See also [the '\n+                  'commit message docs](https://coala.io/commit).) To change '\n+                  'your message you just use `git commit --amend` and then '\n+                  '`git push --force` the new commit to replace the old one.',\n+        'fixes': 'We use bug prediction in coala which relies on the `Fixes` '\n+                 'keyword in commit messages. To get good results from that '\n+                 'we need to use `Fixes` for bugfix issues instead of '\n+                 '`Closes`. (See also [the commit message docs]'\n+                 '(https://coala.io/commit).) To change your message you '\n+                 'just use `git commit --amend` and then `git push --force` '\n+                 'the new commit to replace the old one.',\n+        'commit message': 'To change your message you just use `git commit '\n+                          '--amend` and then `git push --force` the new '\n+                          \"commit to replace the old one.\\n\\nIf you're just \"\n+                          'looking to fix an issue very quickly and not '\n+                          'interested in contributing to coala long term, we '\n+                          'can fix up the message for you - just tell us :).',\n+        'rebase': 'It looks like your PR is out of date and needs a rebase.'\n+                  '\\n\\n[This page](https://coala.io/git) may help you to get '\n+                  'started on this. We also have [a quick video tutorial on '\n+                  'how to rebase](https://asciinema.org/a/78683). That should '\n+                  'help you understand the basics of how it works and what you'\n+                  \"should be doing.\\n\\nIf you're just looking to fix an issue \"\n+                  'very quickly and not interested in contributing to coala '\n+                  'long term, we can fix it up for you - just tell us :).',\n+        'cep': \"At coala we're using [cEP's (coala Enhancement Proposals)]\"\n+               '(http://coala.io/cep) to define major design decisions - '\n+               \"they're a bit like PEP's but not quite as extensive and \"\n+               'obviously written with a lower case c.',\n+        'gitlab': 'We are currently evaluating on if we want to use GitLab for'\n+                  \"code hosting. That's why some repositories are already on \"\n+                  'GitLab, if you want to participate in the migration '\n+                  'discussion, please add information [at our GitLab wiki page]'\n+                  '(https://github.com/coala/coala/wiki/GitLab).',\n+        'google': 'Hey. This message was triggered because someone was too '\n+                  \"lazy to type this *again*. Don't take it personally. \"\n+                  'Please.\\n\\nWe all got to learn this: *use google*. Or '\n+                  'duckduckgo. Anything. The search engine that earned your '\n+                  'trust. You got a build error? Search for the first red '\n+                  'thing and google it. You got an exception? *Read the '\n+                  'message.* Search it. *Think.*\\n\\nKeep this in mind: *You*'\n+                  'are sitting in front of the problem, not we. You will have '", "created_at": "2017-06-05T03:09:09Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ0MTUyNA==", "fields": {"body": "double quotes", "diff": "@@ -0,0 +1,28 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        'Hey! You seem to have asked a question which could have been solved '\n+        'by other means as well. Click [this]({}). When you ask a question, be '\n+        \"sure to try out a few things first - you're in a much better position \"", "created_at": "2017-06-06T18:25:12Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1MjkzNw==", "fields": {"body": "I'd just make this comment multiline", "diff": "@@ -1,7 +1,105 @@\n-from errbot import BotPlugin\n+import json\n+import os\n+import re\n \n+import github3\n \n-class Labhub(BotPlugin):\n-    \"\"\"\n-    GitHub and GitLab utilities\n-    \"\"\"\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class LabHub(BotPlugin):\n+    \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear", "created_at": "2017-06-07T07:33:56Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTA3MjYyOA==", "fields": {"body": "this function is rather useless, a oneliner and only used once, I suggest inlining it", "diff": "@@ -1,7 +1,105 @@\n-from errbot import BotPlugin\n+import json\n+import os\n+import re\n \n+import github3\n \n-class Labhub(BotPlugin):\n-    \"\"\"\n-    GitHub and GitLab utilities\n-    \"\"\"\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class LabHub(BotPlugin):\n+    \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n+\n+    def activate(self):\n+        super().activate()\n+\n+        with open(os.path.join(os.environ.get('COBOT_ROOT', os.getcwd()),\n+                               'plugins/LabHub.json')) as f:\n+            config = f.read()\n+\n+        config = json.loads(config)\n+        self.INVITE_SUCCESS = config['INVITE_SUCCESS']\n+        self.ORG_USERNAME = config['ORG_USERNAME']\n+\n+        self.GH = LabHub.get_gh_obj(os.environ.get('GH_TOKEN'))\n+        self.ORG = LabHub.get_org(self.GH, self.ORG_USERNAME)\n+        self.TEAMS = LabHub.get_teams(self.ORG)\n+\n+    @staticmethod\n+    def get_gh_obj(token):\n+        \"\"\"\n+        :param token:   github token\n+        :returns:       ``github3.GitHub`` object\n+        \"\"\"\n+        return github3.login(token=token)\n+\n+    @staticmethod\n+    def get_org(gh, org_name):\n+        \"\"\"\n+        :param gh:          ``github3.GitHub`` object\n+        :param org_name:    Name of the organization\n+        :returns:           ``github3.orgs.Organization`` object\n+        \"\"\"\n+        return gh.organization(org_name)", "created_at": "2017-06-09T08:21:33Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg1MjgzMA==", "fields": {"body": "Any reason to use vcr instead of proper html requests?", "diff": "@@ -0,0 +1,12 @@\n+from plugins.wolfram_alpha import WolframAlpha\n+\n+import vcr\n+\n+pytest_plugins = ['errbot.backends.test']\n+extra_plugin_dir = 'plugins'\n+\n+my_vcr = vcr.VCR(match_on=['method', 'scheme', 'host', 'port', 'path'])", "created_at": "2017-06-14T04:41:25Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU4NjcwNA==", "fields": {"body": "; Please :P", "diff": "@@ -21,11 +21,11 @@ app.directive('languages',  ['$http',  '$timeout' ,function ($http, $timeout) {\n                 $http.get(api_link + '/list/bears')\n                     .then(function(data){\n                         arr = []", "created_at": "2017-06-18T09:49:11Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjk1NTMxNQ==", "fields": {"body": "Can you find a good Python git library? I really don't like going to shell", "diff": "@@ -0,0 +1,36 @@\n+import os\n+import subprocess\n+\n+from errbot import BotPlugin, botcmd\n+\n+run = lambda x: subprocess.Popen(x.split(),\n+                                 stdout=subprocess.PIPE).stdout.read()\n+\n+\n+class Utils(BotPlugin):\n+    \"\"\"\n+    Some random utilities\n+    \"\"\"\n+\n+    @botcmd\n+    def sync(self, msg, arg):\n+        \"\"\"Sync the repository from github.\"\"\"  # Ignore QuotesBear\n+        os.chdir(os.environ.get('COBOT_ROOT'))\n+        initial_head = run('git log --oneline -1')", "created_at": "2017-06-20T12:03:23Z", "last_edited_at": "2017-06-20T12:03:34Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3NDIyNA==", "fields": {"body": "Add username as well, of the user that created the issue, so he remains in the loop", "diff": "@@ -136,9 +136,18 @@ def create_issut_cmd(self, msg, match):\n         repo_name = match.group(1)\n         iss_title = match.group(2)\n         iss_description = match.group(3) if match.group(3) is not None else ''\n+\n+        try:  # This is gitter backend specific\n+            link = '\\nOpened via [gitter](https://gitter.im/{}?at={})'.format(", "created_at": "2017-06-24T09:26:02Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDAzMjY4OQ==", "fields": {"body": "being a semi-colon nazi :P", "diff": "@@ -21,11 +21,11 @@ app.directive('languages',  ['$http',  '$timeout' ,function ($http, $timeout) {\n                 $http.get(api_link + '/list/bears')\n                     .then(function(data){\n                         arr = []", "created_at": "2017-06-26T14:58:25Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4MTEzMQ==", "fields": {"body": "Unnecessary.", "diff": "@@ -124,3 +127,116 @@ def ls(self, msg, match):\n                 yield ''.join(selected_bears) + ' |'\n             else:\n                 yield 'No bears found for {}'.format(lang)\n+\n+    @staticmethod\n+    def construct_settings(settings):\n+        settings = settings.strip().split()\n+\n+        def is_setting(x): return '=' in x  # Ignore PycodestyleBear (E731)\n+        setting_dict = OrderedDict()\n+        for candidate in settings:\n+            if not is_setting(candidate):  # bear\n+                setting_dict[candidate.strip()] = dict()\n+            else:\n+                key, value = candidate.strip().split('=')\n+                setting_dict[list(setting_dict.keys())[-1]][key] = value\n+        return setting_dict\n+\n+    @staticmethod\n+    def position(stl, stc, enl, enc):\n+        if stc is None and enc is None:\n+            if stl != enl:\n+                return 'Between lines {} and {}'.format(stl, enl)\n+            else:\n+                return 'At line {}'.format(stl)\n+        if stc is None and enc is not None:\n+            return 'Between line {} and position {}:{}'.format(stl, enl, enc)\n+        if stc is not None and enc is None:\n+            return 'Between position {}:{} and line {}'.format(stl, stc, enl)\n+        if stl == enl:\n+            if stc == enc:\n+                return \"At {}:{}\".format(stl, stc)\n+            else:\n+                return \"At line {}, between col {} and {}\".format(stl, stc, enc)\n+        else:\n+            return \"Between positions {}:{} and {}:{}\".format(stl, stc,\n+                                                              enl, enc)\n+\n+    # Ignore PycodestyleBear, LineLengthBear\n+    @re_botcmd(pattern=r'run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```')\n+    def run(self, msg, match):\n+        \"\"\"\n+        Run coala over the given code.\n+\n+        Example: `run Bear1 setting1=something setting2=something Bear2\\ncode`\n+        \"\"\"\n+        lang = match.group(1)\n+        bear_settings = type(self).construct_settings(match.group(2))\n+        code = match.group(3)\n+\n+        yield 'coala analysis in progress...'\n+\n+        data = {\n+            \"sections\": {\n+                \"corobo\": {\n+                    \"files\": \"**.gyp\",\n+                    \"bears\": dict(bear_settings),\n+                }\n+            },\n+            \"mode\": \"coala\",\n+            \"language\": lang,\n+            \"file_data\": code,\n+        }\n+\n+        # Ignore InvalidLinkBear, this only accepts post requests\n+        rq = requests.post('https://api.gitmate.io/coala_online/', json=data)\n+        try:\n+            results = rq.json()['response']['results']['corobo']\n+        except json.JSONDecodeError:\n+            went_wrong = '\\n - '.join([\n+                'Is the bear name correct? Note that bear names are '\n+                'case sensitive.'\n+                'Are all required settings provided? If a required setting is '\n+                'not provided, analysis will fail.'\n+            ])\n+            yield 'Something went wrong, things to check for:\\n' + went_wrong\n+            self.log.exception('Something went wrong, please try again')\n+        else:\n+            if not results:\n+                yield 'Your code is flawless :tada:'\n+                return\n+            else:", "created_at": "2017-07-12T15:06:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4NTc1OQ==", "fields": {"body": "^...$ for regex so we dont repeat the invite bugs?", "diff": "@@ -124,3 +127,116 @@ def ls(self, msg, match):\n                 yield ''.join(selected_bears) + ' |'\n             else:\n                 yield 'No bears found for {}'.format(lang)\n+\n+    @staticmethod\n+    def construct_settings(settings):\n+        settings = settings.strip().split()\n+\n+        def is_setting(x): return '=' in x  # Ignore PycodestyleBear (E731)\n+        setting_dict = OrderedDict()\n+        for candidate in settings:\n+            if not is_setting(candidate):  # bear\n+                setting_dict[candidate.strip()] = dict()\n+            else:\n+                key, value = candidate.strip().split('=')\n+                setting_dict[list(setting_dict.keys())[-1]][key] = value\n+        return setting_dict\n+\n+    @staticmethod\n+    def position(stl, stc, enl, enc):\n+        if stc is None and enc is None:\n+            if stl != enl:\n+                return 'Between lines {} and {}'.format(stl, enl)\n+            else:\n+                return 'At line {}'.format(stl)\n+        if stc is None and enc is not None:\n+            return 'Between line {} and position {}:{}'.format(stl, enl, enc)\n+        if stc is not None and enc is None:\n+            return 'Between position {}:{} and line {}'.format(stl, stc, enl)\n+        if stl == enl:\n+            if stc == enc:\n+                return \"At {}:{}\".format(stl, stc)\n+            else:\n+                return \"At line {}, between col {} and {}\".format(stl, stc, enc)\n+        else:\n+            return \"Between positions {}:{} and {}:{}\".format(stl, stc,\n+                                                              enl, enc)\n+\n+    # Ignore PycodestyleBear, LineLengthBear\n+    @re_botcmd(pattern=r'run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```')", "created_at": "2017-07-12T15:21:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNTAwNg==", "fields": {"body": "*nodes", "diff": "@@ -0,0 +1,94 @@\n+\"\"\"\n+Handles the parsing and extraction of information from rST doc files.\n+\"\"\"\n+\n+import os\n+\n+import docutils\n+import docutils.nodes\n+import docutils.parsers.rst\n+\n+# This is the variable in which all of the documentation will be parsed and\n+# stored.\n+# Documentation of section x-y-z is stored in DATA['x-y-z']\n+DATA = {}\n+\n+\n+class IgnoredDirective(docutils.parsers.rst.Directive):\n+\n+    \"\"\"Stub for unknown directives.\"\"\"\n+\n+    has_content = True\n+\n+    def run(self):\n+        \"\"\"Do nothing.\"\"\"\n+        return []\n+\n+docutils.parsers.rst.directives.register_directive('seealso', IgnoredDirective)\n+docutils.parsers.rst.directives.register_directive('argparse', IgnoredDirective)\n+\n+class Extractor(docutils.nodes.SparseNodeVisitor):\n+    \"\"\"\n+    Node visitor to extract information from nodes.\n+    \"\"\"\n+\n+    def __init__(self, document, name=''):\n+        super().__init__(document)\n+        self.name = name\n+\n+    def visit_section(self, node):\n+        non_section_childs = list(filter(\n+            lambda x: type(x) != docutils.nodes.section, node.children\n+        ))\n+        handle_non_section_nodes(node, non_section_childs, self.name)\n+\n+def parse_rst(path):\n+    \"\"\"\n+    :param path: The path of the rst file.\n+    :return: The document object\n+    \"\"\"\n+    rst = open(path)\n+    default_settings = docutils.frontend.OptionParser(\n+        components=(docutils.parsers.rst.Parser, )\n+        ).get_default_values()\n+    document = docutils.utils.new_document(rst.name, default_settings)\n+    parser =  docutils.parsers.rst.Parser()\n+    parser.parse(rst.read(), document)\n+    rst.close()\n+    return document\n+\n+def handle_non_section_nodes(section_node, non_section_child_nodes, doc_name):\n+    \"\"\"\n+    All the ndoes that are not section nodes are parsed here.", "created_at": "2017-07-18T21:47:57Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNjg1Mw==", "fields": {"body": "Definitely documentation needed over here.", "diff": "@@ -0,0 +1,99 @@\n+from collections import OrderedDict, Counter\n+import logging\n+\n+from gensim.parsing.preprocessing import STOPWORDS\n+from gensim.utils import simple_preprocess\n+import networkx\n+import nltk\n+import spacy\n+\n+from answers.extraction import DATA, parse_docs\n+\n+parse_docs()\n+\n+nlp = spacy.load('en_core_web_md')\n+\n+def grapheize(graph, doc, attrs={}):\n+    \"\"\"\n+    Create a graph from given piece of text. Nodes are formed from lemmatized\n+    tokens. Edges are created between a lemmatized token and lemma of head of\n+    the token.\n+    \"\"\"\n+    unallowed_tags = [\n+        'EX', 'HVS', 'MD', 'PDT',\n+        'IN', 'DT', 'TO', 'CD',\n+        'CC', '-LRB-', 'HYPH', ':'\n+    ]\n+    for token in doc:\n+        if (token.tag_ in unallowed_tags) or (token == token.head):\n+            continue\n+        nodes = [token.lemma_, token.head.lemma_]\n+        for node in nodes:\n+            if node not in graph:\n+                graph.add_node(node, token=token)\n+            node = graph.node.get(node)\n+            for key, value in attrs.items():\n+                node.setdefault(key, []).append(value)\n+        graph.add_edge(*nodes)\n+\n+def get_answer(question, graph, final=False):", "created_at": "2017-07-18T21:57:27Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQ5MTU2OQ==", "fields": {"body": "I find unindented multi line strings disrupt the flow when reading a function/file. You could use dedent to have the literal be properly indented and still not have the indentation in the actual string.\nHowever then you'll probably run into the line length limit.... Hmm.... maybe make the pitchfork a bit shorter? I did notice that on mobile I just saw the stick:", "diff": "@@ -0,0 +1,35 @@\n+import re\n+import string\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Pitchfork(BotPlugin):\n+    \"\"\"\n+    To pitchfork users down to ...\n+    \"\"\"\n+\n+    @botcmd\n+    def pitchfork(self, msg, arg):\n+        \"\"\"\n+        To pitchfork user down to ...\n+        \"\"\"\n+        match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n+                         arg)\n+        if match:\n+            user = match.group(1)\n+            place = match.group(2) if match.group(2) else 'offtopic'\n+            return (\n+                string.Template(\"\"\"", "created_at": "2017-07-26T06:40:46Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw==", "fields": {"body": "Any reasons for migrating to materializecss? Please mention that in the commit message.", "diff": "@@ -11,15 +11,15 @@\n     <link rel=\"stylesheet\"\n           href=\"https://fonts.googleapis.com/css?family=Roboto:100,200,300,400,500,600,800,900\">\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n-    <link rel=\"stylesheet\"\n           href=\"bower_components/google-code-prettify/src/prettify.css\">\n-    <!-- Bootstrap Material Design -->\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap-material-design/dist/css/bootstrap-material-design.css\">\n+          href=\"bower_components/materialize/dist/css/materialize.min.css\">", "created_at": "2017-07-29T16:25:25Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTU0OA==", "fields": {"body": "\"You were a newcomer before, we'd like to know...\"", "diff": "@@ -30,7 +30,9 @@ class LabHub(BotPlugin):\n                      'also be there for you at all times to help you with '\n                      'actual problems. :)',\n         'developers': ' Wow @{}, you are a part of developers team now! :tada: '\n-                      'Welcome to ourcommunity!',\n+                      'Welcome to ourcommunity! You just passed the newcomers '\n+                      'phase, we\\'d like to know what could\\'ve been better, '", "created_at": "2017-08-06T10:27:36Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTUwNA==", "fields": {"body": "if its oftopic, we could make it a markdown link? that links to the offtopic channel", "diff": "@@ -0,0 +1,36 @@\n+import re\n+import string\n+import textwrap\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Pitchfork(BotPlugin):\n+    \"\"\"\n+    To pitchfork users down to ...\n+    \"\"\"\n+\n+    @botcmd\n+    def pitchfork(self, msg, arg):\n+        \"\"\"\n+        To pitchfork user down to ...\n+        \"\"\"\n+        match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n+                         arg)\n+        if match:\n+            user = match.group(1)\n+            place = match.group(2) if match.group(2) else 'offtopic'\n+            return textwrap.dedent((\n+                string.Template(\"\"\"\n+                    @$user, you are being pitchforked down to $place", "created_at": "2017-08-06T10:25:10Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY2OA==", "fields": {"body": "just helloworld? If we support \"Hello World\", better to mention that", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.", "created_at": "2017-08-13T10:43:37Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY5Mw==", "fields": {"body": "You may want to mention the user part explicitly", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.\n+2. Want to work on an issue, first assign yourself:\n+   ``corobo assign <issue-link>``\n+3. Assigned issue is time-consuming, no longer interesting? Wanna discontinue:\n+   ``corobo unassign <issue-link>``\n+4. Wanna file a new issue, but don't want to leave gitter?:\n+   ``corobo new issue <repo> <title>\\n[description\\n]+``\n+5. PR is up, waiting for a review. Consider reviewing other PRs while you wait\n+   for review of your PR. If the PR needs more work, mark it\n+   work-in-progress(wip):\n+   ``corobo mark wip <pr-link>``\n+6. Your PR was marked WIP, you did the changes and want it be reviewed again?\n+   Add ``pending_review`` label:\n+   ``corobo mark pending <pr-link>``\n+\n+coala utilities\n+---------------\n+\n+1. Wanna know stats regarding coala?:\n+\n+   a. Get user contribution stats using:\n+      ``corobo contrib stats meetmangukiya``", "created_at": "2017-08-13T10:44:41Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcwOA==", "fields": {"body": "This whole paragraph could be confusing for newcomers. Just mention about marking a PR as wip", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.\n+2. Want to work on an issue, first assign yourself:\n+   ``corobo assign <issue-link>``\n+3. Assigned issue is time-consuming, no longer interesting? Wanna discontinue:\n+   ``corobo unassign <issue-link>``\n+4. Wanna file a new issue, but don't want to leave gitter?:\n+   ``corobo new issue <repo> <title>\\n[description\\n]+``\n+5. PR is up, waiting for a review. Consider reviewing other PRs while you wait\n+   for review of your PR. If the PR needs more work, mark it\n+   work-in-progress(wip):", "created_at": "2017-08-13T10:45:47Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcyOQ==", "fields": {"body": "knowledge engine?", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.\n+2. Want to work on an issue, first assign yourself:\n+   ``corobo assign <issue-link>``\n+3. Assigned issue is time-consuming, no longer interesting? Wanna discontinue:\n+   ``corobo unassign <issue-link>``\n+4. Wanna file a new issue, but don't want to leave gitter?:\n+   ``corobo new issue <repo> <title>\\n[description\\n]+``\n+5. PR is up, waiting for a review. Consider reviewing other PRs while you wait\n+   for review of your PR. If the PR needs more work, mark it\n+   work-in-progress(wip):\n+   ``corobo mark wip <pr-link>``\n+6. Your PR was marked WIP, you did the changes and want it be reviewed again?\n+   Add ``pending_review`` label:\n+   ``corobo mark pending <pr-link>``\n+\n+coala utilities\n+---------------\n+\n+1. Wanna know stats regarding coala?:\n+\n+   a. Get user contribution stats using:\n+      ``corobo contrib stats meetmangukiya``\n+   b. Bear stats(all languages):\n+      ``corobo bear stats``\n+   c. Bear stats(particular languages):\n+      ``corobo bear stats python ruby go``\n+   d. Language stats:\n+      ``corobo lang stats``\n+   e. stats(both bear and lang stats(for summary stats)):\n+      ``corobo stats``\n+2. List bears of particular languages:\n+   ``corobo ls bears python python3 ...``\n+3. Run coala from chat itself!\n+   .. codeblock::\n+      corobo run Bear1 setting1=1 setting2=2 Bear2\n+      ```\n+      import this\n+      this = 3\n+      some = 'code'\n+      ```\n+\n+Answer\n+------\n+\n+You have got a question, no one's available to answer. Let bot try to answer it\n+for you:\n+``corobo answer your question string goes here``\n+\n+Misc.\n+-----\n+\n+1. Someone is asking a googlable question? Respond with a lmgtfy:\n+   ``corobo lmgtfy this is the search string``\n+2. Get bot to apologize:\n+   ``corobo nm``\n+3. Explain pre-defined terms:\n+   ``corobo explain rebase``\n+4. Is your PR ready to merge, go shipit!\n+   ``corobo ship it``\n+5. Ask a question to knowledge engine:", "created_at": "2017-08-13T10:46:48Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY4NzY5Nw==", "fields": {"body": "The docstring of this function contains that, which is also appended to this", "diff": "@@ -163,7 +165,9 @@ def position(stl, stc, enl, enc):\n                                                               enl, enc)\n \n     # Ignore PycodestyleBear, LineLengthBear\n-    @re_botcmd(pattern=r'^run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```$')\n+    @re_botcmd(pattern=r'^run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```$',\n+               re_cmd_name_help='run <Bear [[setting=value]+]>+\\n'\n+                                '```\\n<code>+\\n```')", "created_at": "2017-08-17T11:32:53Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQwODcyMw==", "fields": {"body": "um you can put {{ }} to escape them, but this is fine, I guess", "diff": "@@ -0,0 +1,39 @@\n+import re\n+import string\n+import textwrap\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Pitchfork(BotPlugin):\n+    \"\"\"\n+    To pitchfork users down to ...\n+    \"\"\"\n+\n+    @botcmd\n+    def pitchfork(self, msg, arg):\n+        \"\"\"\n+        To pitchfork user down to ...\n+        \"\"\"\n+        match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n+                         arg)\n+        if match:\n+            user = match.group(1)\n+            place = match.group(2) if match.group(2) else 'offtopic'\n+            return textwrap.dedent((\n+                string.Template(\"\"\"\n+                    @$user, you are being pitchforked down to $place", "created_at": "2017-08-31T18:11:12Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODExMg==", "fields": {"body": "platforms since it's in plural context", "diff": "@@ -4,6 +4,31 @@\n [![Codecov branch](https://img.shields.io/codecov/c/github/coala/corobo/master.svg)](https://codecov.io/gh/coala/corobo)\n [![Semaphore branch](https://semaphoreci.com/api/v1/coala/corobo/branches/master/badge.svg)](https://semaphoreci.com/coala/corobo)\n [![Gitter Room](https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg)](https://gitter.im/coala/corobo)\n+\n+## About\n+\n+`corobo` is a Python based chatbot that could be connected to many messaging\n+platform including Slack, HipChat, Telegram, IRC, XMPP, Tox, Campfire, Gitter,", "created_at": "2017-09-16T14:44:30Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODIyNQ==", "fields": {"body": "...These command routines", "diff": "@@ -4,6 +4,31 @@\n [![Codecov branch](https://img.shields.io/codecov/c/github/coala/corobo/master.svg)](https://codecov.io/gh/coala/corobo)\n [![Semaphore branch](https://semaphoreci.com/api/v1/coala/corobo/branches/master/badge.svg)](https://semaphoreci.com/coala/corobo)\n [![Gitter Room](https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg)](https://gitter.im/coala/corobo)\n+\n+## About\n+\n+`corobo` is a Python based chatbot that could be connected to many messaging\n+platform including Slack, HipChat, Telegram, IRC, XMPP, Tox, Campfire, Gitter,\n+Skype. Check all the backends available\n+[here](http://errbot.io/en/latest/features.html#multiple-server-backends)\n+\n+This repository is mainly a collection of plugins that are written for\n+[errbot](http://errbot.io). Errbot is a Python based chatbot framework.\n+\n+As described on Errbot website:\n+> Errbot is a chatbot, a daemon that connects to your favorite chat service\n+  and brings your tools into the conversation.\n+\n+It handles sending messages to correct rooms/person, receiving messages,\n+calling your command routines on matching commands, etc. This command routines", "created_at": "2017-09-16T14:51:05Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDAyMzk4Mg==", "fields": {"body": "Actually I just need to add a linebreak (\\n) to each elements, since LocalBearTestHelper.get_results uses prepare_file to add the linebreaks to the lines before inputting it to bear.execute.\nIf I just use short_url_redirect directly as an argument for instancing Diff(), it will raise AssertionError, since the bear is actually processing the lines with the linebreaks added", "diff": "@@ -253,6 +255,11 @@ def test_redirect_threshold(self):\n             self.check_validity(self.uut, long_url_redirect,\n                                 settings={'follow_redirects': 'true'})\n \n+            with prepare_file(short_url_redirect, None) as (lines, _):", "created_at": "2018-07-04T06:57:09Z", "last_edited_at": "2018-07-04T07:19:24Z", "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI3MDUzMQ==", "fields": {"body": "There's Promise.resolve()\nBut returning whatever directly also wraps it  into promise because it's inside an async function.", "diff": "@@ -199,7 +199,30 @@ const issueStore = new class IssueStore extends EventEmitter {\n     }\n     let fetchPromise;\n     if (Client.canCacheLots()) {\n-      fetchPromise = Client.getOcto().repos(repoOwner, repoName).issues.fetchAll(opts);\n+      if (Client.useGraphQL()) {\n+        const [issues, pullRequests] = await Promise.all([\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .issues({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 100}),\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .pullRequests({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 30})\n+        ]);\n+        let result = [];\n+        if (issues) {\n+          result = result.concat(issues);\n+        }\n+        if (pullRequests) {\n+          result = result.concat(pullRequests);\n+        }\n+        fetchPromise = new Promise(resolve => resolve(", "created_at": "2018-07-05T08:30:36Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDM5NTk0MA==", "fields": {"body": "Use your width wisely.\nPut message on next line & indent only four spaces.", "diff": "@@ -162,8 +163,21 @@ class SubLanguageMeta(type(cls)):\n \n                 def __getattr__(self, item):\n                     try:\n+                        if item is 'comment_delimiter':\n+                            # Providing backward compatibility for\n+                            # `comment_delimiter`\n+                            logging.warning('The property `comment_delimiter` '\n+                                            'of Language module is deprecated '", "created_at": "2018-07-05T15:30:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTE3NA==", "fields": {"body": "possibly deferred to a separate followup issue after this is merged ...\nWhat about adding a query parameter to force either GraphQL or standard API ?\nAnd (if still feasible) possibly add a env var which does the same for the pre-fetch and/or developer's local server?", "diff": "@@ -191,6 +193,17 @@ class Client extends EventEmitter {\n     let {token, password} = this.getCredentials();\n     return !!token || !!password;\n   }\n+  useGraphQL() {\n+    // use GraphQL when applicable, provided `hasCredentials()` is true\n+    // developers need to change the behaviour here in case they", "created_at": "2018-07-06T05:54:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTkwOQ==", "fields": {"body": "trailing comma ?\nI'll stop with the trailing comma here, in case you or @blazeu believe they are not appropriate in these contexts.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'", "created_at": "2018-07-06T05:59:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjI4Ng==", "fields": {"body": "ideally this coala specific config is not in this library, but is provided by separate configuration.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';", "created_at": "2018-07-06T06:02:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjQ0Ng==", "fields": {"body": "this is my python brain kicking in ....\nthe || .. here should be indented more so that it doesnt align with the console.log(..) on the next line.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {", "created_at": "2018-07-06T06:03:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDY2OTI2Nw==", "fields": {"body": "omg .. of course that is ugly.  The purpose of dedent is to .. dedent ... it allows the string to be indented so that it follows python indentation style.\nfwiw, repr would be completely wrong, replacing the desired newline with literal \\ and n.\ntestbot_public.assertCommand(\n    textwrap.dedent('''\\\n        !new issue repository this is the title\n        first line of body\n        second line of body'\n    '''),\n    'Here you go')\nThe use of the \\ can be removed by creating wrapper as requested, such as assertMultilineCommand, because then the wrapper can do the following to remove the leading blank line\n'\\n'.join(textwrap.dedent(command).splitlines()[1:])\nAnd that can be improved to only remove the first line if it is blank.", "diff": "@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',", "created_at": "2018-07-06T14:24:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTg3NQ==", "fields": {"body": "dont use trailing \\.  especially when they are unnecessary.\nand move the !new .. string to the next line so it follows python indentation style, and split the string across multiple lines whenever there is a \\n.", "diff": "@@ -171,6 +188,14 @@ def test_create_issue_cmd(self):\n \n         testbot_public.assertCommand('!new issue coala title', 'repository that does not exist')\n \n+        # not a member of org\n+        self.mock_team.is_member.return_value = False\n+        labhub.REPOS = {'repository': self.mock_repo,\n+                        'repository.github.io': self.mock_repo}\n+        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+                                     'You need to be a member of this organization ' \\", "created_at": "2018-07-07T02:15:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkxMQ==", "fields": {"body": "never remove test logic without doing a git blame\nbfb1f9b\nIf this functionality needs to be removed to make progress, it needs to be done as a separate commit, with a separate issue, explaining the justification for the intentional regression.", "diff": "@@ -280,12 +321,6 @@ def test_assign_cmd(self):\n                               'not eligible to be assigned to this issue')\n         testbot.pop_message()\n \n-        # no assignee, newcomer, difficulty medium\n-        labhub.GH_ORG_NAME = 'not-coala'", "created_at": "2018-07-07T02:17:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkzMg==", "fields": {"body": "put this in setUp and then re-use it for each test method", "diff": "@@ -132,6 +141,12 @@ def test_create_issue_cmd(self):\n         plugins.labhub.GitHubToken = create_autospec(IGitt.GitHub.GitHubToken)\n         plugins.labhub.GitLabPrivateToken = create_autospec(IGitt.GitLab.GitLabPrivateToken)\n \n+        teams = {", "created_at": "2018-07-07T02:19:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MTU3NQ==", "fields": {"body": "accessing the same property multiple times for a FileFactory objects.", "diff": "@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files\n+  anymore.\n+- High Performance: ``FileFactory``'s properties are cached to reduce\n+  unnecessary load caused by accessing the same property for a\n+  ``FileFactory`` objects.", "created_at": "2018-07-08T14:00:27Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0NDM1Mg==", "fields": {"body": "I changed the heading to various formats and the raw mode parts is kept the same to avoid confusion.", "diff": "@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files", "created_at": "2018-07-08T15:34:10Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDAyNg==", "fields": {"body": "yes, to forcefully include it despite other rules which ignore it.", "diff": "@@ -7,5 +7,6 @@\n *.patch\n *.orig\n *.diff\n+!*/src/lib/columns.js", "created_at": "2018-07-07T11:35:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3NzE3NQ==", "fields": {"body": "No. It installs the pre-release in pypi, from January 2018.\nWe still are not ready to do pre-releases yet, with coala-utils and dependency-management still needing more work and need to be released first.", "diff": "@@ -109,12 +110,8 @@ script:\n   - py.test\n   - python setup.py bdist_wheel\n   - pip install ./dist/coala-*.whl\n-  - pip install coala-bears[alldeps] --pre -U\n-  # https://github.com/coala/coala-bears/issues/1037\n-  - >\n-    if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-      sed -i.bak '/bears = GitCommitBear/d' .coafile\n-    fi\n+  - curl -fsSL -o coala-bears.zip $BEARS_ZIP_URL/master\n+  - pip install coala-bears.zip[alldeps] --pre -U", "created_at": "2018-07-09T17:02:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA==", "fields": {"body": "Why not just 'coala' like: a bear is a set of rules used by coala or a bear is a routine used by coala to check ...", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:34:38Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw==", "fields": {"body": "@sangamcse would 'libraries' be a better replacement for 'packages' ?", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:09:08Z", "last_edited_at": null, "author": "sarthakchakerverty", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2ODEyNg==", "fields": {"body": "why not just declaring an optional argument bear=None? Then you don't need to pop it off from kwargs", "diff": "@@ -26,6 +26,11 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, **kwargs):\n+        self.bear = kwargs.get('bear', None)\n+        kwargs.pop('bear', None)", "created_at": "2018-07-10T19:36:33Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3MDU3MA==", "fields": {"body": "that should be\nself.message('%s = %r' % (param, section_params_dict[param] if param in section_params_dict else md.optional_params[param][2]))", "diff": "@@ -34,6 +39,19 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        md = self.bear.get_metadata()\n+        section_params_dict = md.create_params_from_section(self.bear.section)\n+        for param in md.non_optional_params:\n+            self.message('%s = %r' % (param, section_params_dict[param]))\n+        for param in md.optional_params:\n+            if param in section_params_dict:\n+                self.message('%s = %r' % (param, section_params_dict[param]))\n+            else:\n+                self.message('%s = %r' % (param,\n+                                          md.optional_params[param][2]))", "created_at": "2018-07-10T19:45:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ==", "fields": {"body": "line_length is not used\nThis example doesn't round up so nicely, SpaceConsistencyBear is similar, and what's especially weird is that you lint on message, not on file ;) Please provide a better example \ud83d\udc4d", "diff": "@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the\n+passed message contains character more than 79.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class CharCheckBear(LocalBear):\n+        def run(self, filename, file, message: str, line_length: int = 79):\n+            \"\"\"\n+            Detect if a passed string contain characters more than 79.\n+\n+            :param message:\n+                enter the message.\n+            \"\"\"\n+            if len(message)<=79:\n+                yield self.new_result(message=message, file=filename)\n+            else:\n+                yield self.new_result(message='message contains character '\n+                                              'more than 79', file=filename)", "created_at": "2018-07-10T20:04:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ==", "fields": {"body": "for your code sounds redundant, but I think it is acceptable.", "diff": "@@ -55,6 +55,16 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by coala to check your code\n+for lint issues. A group of these routines(bears) is used for defining\n+certain quality requirements in various languages. A bear can analyse code\n+for potential problems, calculate metrics and even provide corrections for\n+your code. While many of these bears for various languages are shipped along", "created_at": "2018-07-11T20:21:42Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjAzNjY4Mw==", "fields": {"body": "padding: 0", "diff": "@@ -0,0 +1,92 @@\n+.review {\n+  cursor: default;\n+  padding-top: 0;\n+  padding-right: 0;\n+  padding-bottom: 0;\n+  padding-left: 0;", "created_at": "2018-07-12T13:37:29Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5OTQzNQ==", "fields": {"body": "useless trailing comma.", "diff": "@@ -0,0 +1,41 @@\n+from errbot.backends.test import FullStackTest\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n+\n+import logging\n+\n+\n+class CoroboTestCase(FullStackTest):\n+\n+    def setUp(self,\n+              extra_plugin_dir=None,\n+              extra_test_file=None,\n+              loglevel=logging.DEBUG,\n+              extra_config=None,\n+              plug_filename=None,):", "created_at": "2018-07-16T19:38:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg4ODk5Mg==", "fields": {"body": "Can't changed to debug_run(self.run, *args, Debugger(bear=self), **kwargs) for python3.4 during running pytest it will throw SyntaxError SyntaxError: only named arguments may follow *expression", "diff": "@@ -319,7 +338,7 @@ def run_bear_from_section(self, args, kwargs):\n                 self.name), str(err))\n             return\n         if self.debugger:\n-            return debug_run(self.run, Debugger(), *args, **kwargs)\n+            return debug_run(self.run, Debugger(bear=self), *args, **kwargs)", "created_at": "2018-07-17T04:06:21Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgwMTI0OQ==", "fields": {"body": "I think you can remove all these args.\nThey are not being used, and unittest and pytest do not use them.", "diff": "@@ -0,0 +1,41 @@\n+from errbot.backends.test import FullStackTest\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n+\n+import logging\n+\n+\n+class CoroboTestCase(FullStackTest):\n+\n+    def setUp(self,\n+              extra_plugin_dir=None,", "created_at": "2018-07-16T19:45:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjY3NQ==", "fields": {"body": "an approach you might like to try (test on a different fork; no PR necessary) is adding a bear setting for language : Language = Unknown , which you can pass to the Formatting aspect to make it happy.\nLocalBearTestHelper is in a different repo, so it needs to be a separate PR.", "diff": "@@ -49,4 +67,6 @@ def run(self,\n                     line=line_number + 1,\n                     column=max_line_length + 1,\n                     end_line=line_number + 1,\n-                    end_column=len(line))\n+                    end_column=len(line),\n+                    aspect=Formatting('py'),", "created_at": "2018-07-17T11:31:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzE0ODE3Mg==", "fields": {"body": "@Man-Jain  don't make changes to answers/* and push your commit again. I am not sure, but this might work.", "diff": "@@ -60,9 +59,7 @@ def get_answer(question, graph, final=False):\n \n     grapheize(q_graph, q_doc, attrs={'q_type': q_type})\n     scores = Counter()\n-    found_common = False\n     for start, end in q_graph.edges():\n-        found_common = True", "created_at": "2018-07-17T19:22:02Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MDYxMQ==", "fields": {"body": "It is better to make a new AspectsTestBear instead of changing the TestBear IMO.", "diff": "@@ -1,8 +1,20 @@\n from coalib.bears.LocalBear import LocalBear\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import TrailingSpace\n \n \n-class TestBear(LocalBear):\n+class TestBear(", "created_at": "2018-07-18T12:35:13Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTI2Mw==", "fields": {"body": "why do you introduce documentation about the debugger in the commit for the profiler?", "diff": "@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.", "created_at": "2018-07-18T18:01:36Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3ODk1NA==", "fields": {"body": "what if profile and debugger are both given? I thought that's an invalid state, thus an exception should be raised?", "diff": "@@ -283,6 +291,7 @@ def __init__(self,\n         self.message_queue = message_queue\n         self.timeout = timeout\n         self.debugger = debugger\n+        self.profile = profile", "created_at": "2018-07-18T18:13:15Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTU0Nw==", "fields": {"body": "function name doesn't resemble what it's doing", "diff": "@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):", "created_at": "2018-07-18T18:15:13Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTczNw==", "fields": {"body": "Function name should be preceded with an underscore, I guess nobody should directly call that^^", "diff": "@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):", "created_at": "2018-07-18T18:15:45Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2Nzc2OA==", "fields": {"body": "Up to you: Maybe we shouldn't document that, people will understand what the naming scheme means once they see a profile dump.", "diff": "@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'\n+        ' to dump the profile files, supply the path or the directory name, all'\n+        ' the bear (even implicit dependency bears) in a section will get'\n+        ' profile and there profile data will save in the specified directory'\n+        ' or the path with name format {section.name}_{bear.name}.prof.')", "created_at": "2018-07-19T20:53:03Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTM0NQ==", "fields": {"body": "It uses the argcomplete import at the top of the file which ensures that the test module fails loudly with a suitable error message if it is not installed, instead of the import rather silently failing and the test method being a bit confusing in how it fails.", "diff": "@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete\n+\n+    def test_argcomplete_bear_names(self):\n+        self.assertEqual(_argcomplete_bears_names(), get_all_bears_names())\n+\n+    def test_missing_argcomplete(self):\n+        if coalib.parsing.DefaultArgParser.argcomplete is not None:\n+            coalib.parsing.DefaultArgParser.argcomplete = None\n+        fake_importer = Mock(side_effect=ImportError('import missing'))\n+        with patch('builtins.__import__', new=fake_importer):\n+            default_arg_parser()\n+        self.assertFalse(coalib.parsing.DefaultArgParser.argcomplete)\n+        # Dummy usage\n+        coalib.parsing.DefaultArgParser.argcomplete = argcomplete", "created_at": "2018-07-21T00:34:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTc2OQ==", "fields": {"body": "this doesnt belong in the checked in version", "diff": "@@ -24,6 +24,7 @@ class PySafetyBearTest(LocalBearTestHelper):\n \n     def setUp(self):\n         self.uut = PySafetyBear(Section('name'), Queue())\n+        self.maxDiff = None", "created_at": "2018-07-21T00:42:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyMjc1Mw==", "fields": {"body": "If not passing a bear is an erroneous state, raise an exception while instantiating the debugger. This is easiest and will always require you to initialize the debugger properly.", "diff": "@@ -34,6 +38,21 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        if self.bear is not None:\n+            md = self.bear.get_metadata()\n+            section_params_dict = md.create_params_from_section(\n+                                  self.bear.section)\n+            for param in md.non_optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param]))\n+            for param in md.optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param] if\n+                                          param in section_params_dict else\n+                                          md.optional_params[param][2]))\n+            return 1\n+        else:\n+            self.error(\"Name 'settings' is not defined.\")", "created_at": "2018-07-20T17:53:54Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw==", "fields": {"body": "split on . and use the first three", "diff": "@@ -0,0 +1,18 @@\n+Name: {{ name }}\n+{# cabal cannot parse .dev version syntax #}\n+Version: {{ version[:-4] }}", "created_at": "2018-07-20T18:17:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ==", "fields": {"body": "You have all your code wrapped in an if statement, though, so none of the code will be run if REPOSITORIES is undefined, right?", "diff": "@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {", "created_at": "2018-07-23T06:43:09Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjYzNQ==", "fields": {"body": "No , advisory is additional detail", "diff": "@@ -39,9 +40,9 @@ def test_with_cve_vulnerability(self):\n             self.uut,\n             file_contents,\n             [Result.from_values('PySafetyBear',\n-                                'bottle<0.12.10 is vulnerable '\n-                                'to CVE-2016-9964 and your project '", "created_at": "2018-07-21T09:09:10Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTgzNQ==", "fields": {"body": "Keep it as it was, uncommented. Sorry if i was confusing.\nUse pragma nocover for now.", "diff": "@@ -11,21 +12,34 @@\n from coalib.settings.Setting import typed_list\n \n \n-def cve_key_checker(vulnerability):\n-    if 'cve' in vulnerability.data:\n-        if vulnerability.data['cve'] is None:\n-            return None\n-        else:\n-            return True\n-    else:\n-        return None\n+# It was for old versions of safety and those versions will be allow in future.\n+# def cve_key_checker(vulnerability):", "created_at": "2018-07-21T14:12:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTk4Mw==", "fields": {"body": "See other bears (inc CheckstyleBear ) for the type to use for paths", "diff": "@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,", "created_at": "2018-07-21T14:19:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTAyOA==", "fields": {"body": "Reorder class definition as SpammingAlert(DefaultConfigMixin, BotPlugin) and you can eliminate the get_configuration_template overriding completely.", "diff": "@@ -3,32 +3,28 @@\n from errbot import BotPlugin\n from errbot.templating import tenv\n \n-from plugins import constants\n+from utils.mixin import DefaultConfigMixin\n \n \n-class SpammingAlert(BotPlugin):\n+class SpammingAlert(BotPlugin, DefaultConfigMixin):\n     \"\"\"\n     A plugin which alerts the user that they might be spamming.\n     \"\"\"\n \n-    CONFIG_TEMPLATE = {\n-        'MAX_MSG_LEN': constants.MAX_MSG_LEN,\n-        'MAX_LINES': constants.MAX_LINES\n-    }\n-\n     def get_configuration_template(self):", "created_at": "2018-07-21T19:10:45Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTQwNg==", "fields": {"body": "create a configure method that does something like:\ndef configure(self, config):\n  new = self.bot_config.DEFAULT_CONFIG[self.name]\n  for key, value in config:\n    new[key] = value\n  self.config = new", "diff": "@@ -0,0 +1,18 @@\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):\n+            return self.bot_config.DEFAULT_CONFIG[self.name]\n+\n+    def __init__(self, bot, name=None):\n+        super().__init__(bot, name=name)\n+        default_config = self._default_config\n+        if default_config and not self.config:\n+            super().configure(default_config)\n+\n+    def get_configuration_template(self):\n+        default_config = self._default_config\n+        if default_config:\n+            return default_config", "created_at": "2018-07-21T19:27:01Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2Mw==", "fields": {"body": "josn", "diff": "@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'", "created_at": "2018-07-22T04:06:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzQwOA==", "fields": {"body": "put these in module level global _private variables so that people can access them easily if they need to.", "diff": "@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'", "created_at": "2018-07-22T04:09:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTgyNA==", "fields": {"body": "You don't need to change this to let since you still could do push. Also, uppercase words in a variable name must be use const.", "diff": "@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [", "created_at": "2018-07-22T10:51:25Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTk3Ng==", "fields": {"body": "Give a single whitespace after warning:.", "diff": "@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {\n+    const repoOwner = repos.split(':')[0];\n+    const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+    SAMPLE_REPOS.push({\n+      repoOwner, repoNames\n+    });\n+  };\n+} catch (error) {\n+  console.log('warning:', error);", "created_at": "2018-07-22T10:56:10Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDM5MQ==", "fields": {"body": "a count comparson sounds good.", "diff": "@@ -422,3 +424,38 @@ def test_get_all_bears_names(self):\n                  'TestDepBearAA',\n                  'AspectTestBear',\n                  'TestDepBearDependsAAndAA'})\n+\n+    def test_get_all_languages(self):\n+        with bear_test_module():\n+            languages = get_all_languages()\n+            assert isinstance(languages, tuple)\n+            self.assertSetEqual(\n+                {str(language) for language in languages},\n+                {'C',\n+                 'C#',\n+                 'CPP',\n+                 'CSS',\n+                 'Fortran',\n+                 'Golang',\n+                 'Hypertext Markup Language 2.0, 3.2, 4.0, 4.1, 5, 5.1',\n+                 'Java',\n+                 'JavaScript',\n+                 'JavaServer Pages',\n+                 'Jinja2',\n+                 'Markdown',\n+                 'Matlab',\n+                 'ObjectiveC',\n+                 'PHP',\n+                 'PLSQL',\n+                 'PowerShell',\n+                 'Python 2.7, 3.3, 3.4, 3.5, 3.6',\n+                 'Ruby',\n+                 'Scala',\n+                 'Shell',\n+                 'Swift',\n+                 'Tcl',\n+                 'TypeScript',\n+                 'Unknown',\n+                 'Vala',\n+                 'VisualBasic',\n+                 'm4'})", "created_at": "2018-07-23T09:55:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1MDg2OQ==", "fields": {"body": "This would be the correct sorted order\nTEST_BEAR_NAME_REPRS = [\n    \"<class 'AspectTestBear.AspectTestBear'>\",\n    \"<class 'DependentBear.DependentBear'>\",\n    \"<EchoBear linter class (wrapping 'echo')>\",\n    \"<ErrorTestBear linter class (wrapping 'I_do_not_exist')>\",\n    \"<class 'JavaTestBear.JavaTestBear'>\",\n    \"<class 'LineCountTestBear.LineCountTestBear'>\",\n    \"<class 'RaiseTestBear.RaiseTestBear'>\",\n    \"<class 'SpaceConsistencyTestBear.SpaceConsistencyTestBear'>\",\n    \"<class 'TestBear.TestBear'>\",\n    \"<class 'TestBearDep.TestDepBearA'>\",\n    \"<class 'TestBearDep.TestDepBearAA'>\",\n    \"<class 'TestBearDep.TestDepBearBDependsA'>\",\n    \"<class 'TestBearDep.TestDepBearCDependsB'>\",\n    \"<class 'TestBearDep.TestDepBearDependsAAndAA'>\"\n]", "diff": "@@ -5,16 +5,35 @@\n \n from coala_utils.ContextManagers import retrieve_stdout, retrieve_stderr\n \n-TEST_BEARS_COUNT = 14\n+# This list is sorted alphabetically\n+TEST_BEAR_NAMES = (\n+    'AspectTestBear',\n+    'DependentBear',\n+    'EchoBear',\n+    'ErrorTestBear',\n+    'JavaTestBear',\n+    'LineCountTestBear',\n+    'RaiseTestBear',\n+    'SpaceConsistencyTestBear',\n+    'TestBear',\n+    'TestDepBearA',\n+    'TestDepBearAA',\n+    'TestDepBearBDependsA',\n+    'TestDepBearCDependsB',\n+    'TestDepBearDependsAAndAA',\n+)\n+\n+TEST_BEARS_COUNT = len(TEST_BEAR_NAMES)\n \n # This list is sorted by filename of the bears, then name within the modules\n-TEST_BEAR_NAMES = [\n+TEST_BEAR_NAME_REPRS = [", "created_at": "2018-07-23T10:20:16Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw==", "fields": {"body": "Check for the type instead, typeof REPOSITORIES !== 'undefined'", "diff": "@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {", "created_at": "2018-07-23T12:09:47Z", "last_edited_at": "2018-07-23T12:10:31Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMDQyMg==", "fields": {"body": "I see, I'll keep it here for now else the tests won't pass. Would rebase as soon as you get the issue solved \ud83d\udc4d", "diff": "@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={", "created_at": "2018-07-23T09:07:09Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTIwNw==", "fields": {"body": "It is ready", "diff": "@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={", "created_at": "2018-07-23T17:45:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjE1Ng==", "fields": {"body": "shouldn't be there another newline here? Not sure if RST requires that", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to\n+optimize its performance.\n+\n+The profiler will start by profiling the run() method of bears because it\n+consumes most of the bears time. So, this is part where bear writer will spend\n+time, as rest of the part like loading the files, collecting the settings,\n+etc. are done by coala itself.\n+\n+.. note::", "created_at": "2018-07-26T09:05:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM5OTAwOA==", "fields": {"body": "Why not assert the instances of all three bears.", "diff": "@@ -470,9 +470,9 @@ def test_get_filtered_bears(self):\n         local_bears['cli'] = _sort_bears(local_bears['cli'])\n         global_bears['cli'] = _sort_bears(global_bears['cli'])\n \n-        self.assertEqual(len(local_bears['cli']), 2)\n-        self.assertEqual(str(local_bears['cli'][0]),\n-                         \"<class 'JavaTestBear.JavaTestBear'>\")\n+        self.assertEqual(len(local_bears['cli']), 3)\n         self.assertEqual(str(local_bears['cli'][1]),", "created_at": "2018-07-26T09:59:01Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2ODEzNA==", "fields": {"body": "Usage of the--devoption is deprecated. Use--only=devinstead.\nc.f. https://travis-ci.org/coala/gh-board/jobs/408440200#L458", "diff": "@@ -26,6 +26,12 @@ before_script:\n   - sh -e /etc/init.d/xvfb start\n   - sleep 3 # give xvfb some time to start\n \n+before_install:\n+  - npm install --no-save --no-optional --dev npm@5.8.0", "created_at": "2018-07-26T14:00:59Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczMjE2Nw==", "fields": {"body": "Just noting that when I run eslint with airbnb on the new files of this PR (not issue-store.js)...\nnpx install-peerdeps --dev eslint-config-airbnb\n..\n./node_modules/.bin/eslint script/queries/export.js script/queries/github_issue_info.js script/queries/github_label_info.js script/queries/github_pr_info.js script/queries/github_reaction_info.js src/github-client.js src/github-graphql.js\n\n\u2716 119 problems (114 errors, 5 warnings)\n  88 errors, 0 warnings potentially fixable with the `--fix` option.\n\ne.g.\nsrc/github-graphql.js:\n   2:1   error  Dependency cycle detected  import/no-cycle\n  15:26  error  Missing trailing comma     comma-dangle\n  22:5   error  Unary operator '++' used   no-plusplus", "diff": "@@ -0,0 +1,26 @@\n+import GraphQLClientBase from './github-graphql-base';\n+import Client from './github-client';\n+\n+// global event id\n+let EVENT_ID = 0;\n+\n+class GraphQLClient extends GraphQLClientBase {\n+  _updateRateLimit(rateLimit) {\n+    this.remaining = rateLimit.remaining;\n+    this.limit = rateLimit.limit;\n+    this.resetAt = rateLimit.resetAt;\n+    const emitterRate = {\n+      remaining: this.remaining,\n+      limit: this.limit,\n+      reset: this.resetAt\n+    };\n+    // to match Restful API style\n+    const responseStatus = 200;\n+    // config = {method, path, data, options}\n+    const config = null;\n+    Client.emit('end', EVENT_ID, config, responseStatus, emitterRate);\n+    EVENT_ID++;", "created_at": "2018-07-27T10:28:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NDM5NA==", "fields": {"body": "Sounds like a good idea,.\nhttps://gitlab.com/coala/mobans/issues/74", "diff": "@@ -1,5 +1,10 @@\n-from pytest_reqs import check_requirements\n+# Allow import to fail to avoid annoying developers\n+try:\n+    from pytest_reqs import check_requirements\n+except ImportError:", "created_at": "2018-07-28T14:08:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1ODMxMA==", "fields": {"body": "you should use BOT_DATA_DIR", "diff": "@@ -54,6 +54,16 @@\n \n HIDE_RESTRICTED_COMMANDS = True\n \n+\n+def make_dir(path):\n+    try:\n+        os.mkdir(os.path.join(BOT_ROOT, path))\n+    except OSError:\n+        if os.path.isdir(os.path.join(BOT_ROOT, path)):\n+            pass\n+\n+\n+make_dir('data')", "created_at": "2018-07-29T01:39:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDc2MA==", "fields": {"body": "the helper would take an argument obviously for the setting name.\nIf necessary, create two helpers.\nAt the moment these are gibberish logic which I am assuming is similar because it isnt python code which is readable and intuitive.", "diff": "@@ -301,7 +302,12 @@ def __init__(self,\n         self.section = section\n         self.message_queue = message_queue\n         self.timeout = timeout\n-        self.debugger = debugger\n+        self.debugger = (False if 'debug_bears' not in section or (", "created_at": "2018-07-29T04:57:06Z", "last_edited_at": "2018-07-29T04:57:24Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIzOQ==", "fields": {"body": "Extract this fom webpack conf\n\n  \n    \n      gh-board/webpack.config.js\n    \n    \n        Lines 29 to 38\n      in\n      3c8b0e5\n    \n    \n    \n    \n\n        \n          \n           options: { \n        \n\n        \n          \n             presets: [ \n        \n\n        \n          \n               'react', \n        \n\n        \n          \n               'env' \n        \n\n        \n          \n             ], \n        \n\n        \n          \n             plugins: [ \n        \n\n        \n          \n               'react-require', \n        \n\n        \n          \n               'transform-object-rest-spread', \n        \n\n        \n          \n               'transform-class-properties' \n        \n\n        \n          \n             ], \n        \n    \n  \n\n\nbabel-loader will also read from .babelrc if it exists.", "diff": "@@ -0,0 +1,3 @@\n+{\n+  \"presets\": [\"es2015\", \"react\"]", "created_at": "2018-07-29T05:26:58Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTU0OQ==", "fields": {"body": "I'll skip this one as then the comment has to move as well.\nI'm trying to get their code in with least amount of changes, but basic style consistency changes are doable.", "diff": "@@ -30,16 +29,26 @@ const EtherpadInner = createReactClass({\n   },\n   poll() {\n     // Start polling\n-    Client.getAnonymousOcto().fromUrl(`${this.getUrl()}/export/txt`).read().then((text) => {\n-      this.setState({text});\n-      // This is the magic text inside a newly-created pad.\n-      // Defined in `etherpad-lite-heroku`'s settings file\n-      if (text.indexOf('Welcome to Etherpad!') >= 0) {\n-        this.loadIssueBody().then(() => {\n-          this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n-        });\n+    const etherpad = EtherpadClient.connect(\n+      this.getEtherpadInfo()\n+    );\n+    etherpad.getText({padID: this.props.padName}, (error, data) => {\n+      if(error) {\n+        console.error('Error creating pad: ' + error.message);\n+        if(error.message === 'padID does not exist') {\n+          this.loadIssueBody().then(() => {\n+            this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n+          });", "created_at": "2018-07-29T05:47:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDk0OQ==", "fields": {"body": "Yeah, this can also be used in #131, but not moved.", "diff": "@@ -91,11 +92,28 @@ function ReviewColumn(props) {\n }\n \n class KanbanRepo extends Component {\n+  state = {login: null};\n+\n   componentDidMount() {\n     const repoTitle = titlecaps(this.props.repoInfos[0].repoName);\n     document.title = `${repoTitle} Kanban Board`;\n+    Client.on('changeToken', this.onChangeToken);", "created_at": "2018-07-29T08:14:35Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzA1NA==", "fields": {"body": "what does this do?\nthe function name should describe it.\nthe docstring should explain it.", "diff": "@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):", "created_at": "2018-07-29T09:35:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw==", "fields": {"body": "you can return the result of bear.name.lower() in ... directly instead of using an if, it's like if True: return True else: return False now", "diff": "@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):\n+        return False\n+    elif bear.name.lower() in (\n+            map(str.lower, typed_list(str)(bear.section['debug_bears']))) or (\n+                typed_list(str)(bear.section['debug_bears'])[0].lower() in\n+            TRUE_STRINGS):\n+        return True\n+    else:\n+        return False", "created_at": "2018-07-29T10:35:23Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTMwNQ==", "fields": {"body": "We don't need this now since we have the same config as webpack?", "diff": "@@ -1,3 +1,4 @@\n+import React from 'react';", "created_at": "2018-07-29T12:11:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NDk5MA==", "fields": {"body": "Yes, but we will need to prevent this component loading if it is not set correctly.  It is useless fixing this here.\nEtherpadClient.connect(self.getEtherpadInfo()) is going to fail if this doesnt return a valid connection metadata.\ne.g. if I put in foo as the URL setting.\nIdeally the validation of the user setting is moved to the modal.\nBut this PR gives credit where it is due, and lets us build on top.\nFirst step is disabling the editor everywhere if the setting is empty.\nThen the problems of this entire component are much less critical as the user cant encounter the problems in the first few clicks.", "diff": "@@ -52,18 +61,27 @@ const EtherpadInner = createReactClass({\n     // from https://github.com/ether/etherpad-lite-jquery-plugin/blob/master/js/etherpad.js\n     return `${hostName}/p/${padName}`;\n   },\n+  getEtherpadInfo() {\n+    const reg = /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*):([0-9]+))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/;\n+    let m = window.localStorage.getItem('ep-url').match(reg);", "created_at": "2018-07-29T13:58:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NjI3MA==", "fields": {"body": "storing .graphql files inside a .js file isnt ideal.\ncant we load these files as const's ?\nSomething like https://github.com/ahalimkara/babel-plugin-import-static-files", "diff": "@@ -1,13 +0,0 @@\n-query($owner: String!, $name: String!) {", "created_at": "2018-07-30T01:22:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA3MzYxNA==", "fields": {"body": "It's both, it runs tasks offloaded by bears", "diff": "@@ -0,0 +1,16 @@\n+\"\"\"\n+Provides an API for coala's NextGen-Core\n+\n+- ``Bear``: Base class for all the NextGen Bears.\n+- ``Core``: Maintains sessions for coala's execution.", "created_at": "2018-07-30T09:48:26Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDk5Mw==", "fields": {"body": "Like @jayvdb mentioned, we don't need a configuration to publish code coverage to codecov.", "diff": "@@ -0,0 +1,9 @@\n+comment: false", "created_at": "2018-07-30T05:54:40Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDkyOA==", "fields": {"body": "This change is welcoming. Most of the text editors these days automatically pick up babelrc files and provide autocompletion features based on babel configuration.", "diff": "@@ -0,0 +1,11 @@\n+{", "created_at": "2018-07-30T05:54:08Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzMwOA==", "fields": {"body": "Use array.some or array.every ?", "diff": "@@ -350,3 +357,58 @@ export function filterCardsByFilter(cards, filter) {\n     return true;\n   });\n }\n+\n+// Filters the list of reviews by the criteria set in the URL.\n+// Note this happens after `issues/prs` get filtered. A review is\n+// just a part of a pull request, so this would only take effect\n+// if its corresponding issue is not filtered out.\n+// Used by FilterStore.filterAndSortReviews()\n+export function filterReviewsByFilter(reviews, filter, user) {\n+  filter = filter || getFilters();\n+  const {reviews: reviewOptions} = filter.getState();\n+\n+  let myReviews, reviewsUnderMyPr, myMetaReviews, others;\n+  for (const reviewOption of reviewOptions) {\n+    switch (reviewOption) {\n+    case 'my-reviews':\n+      myReviews = true;\n+      break;\n+    case 'reviews-under-my-pr':\n+      reviewsUnderMyPr = true;\n+      break;\n+    case 'my-meta-reviews':\n+      myMetaReviews = true;\n+      break;\n+    case 'others':\n+      others = true;\n+      break;\n+    default:\n+      throw new Error('Review filter is invalid!');\n+    }\n+  }\n+\n+  return reviews.filter(review => {\n+    const isMyReview = review.author && review.author.login && review.author.login === user;\n+    const isReviewUnderMyPr = review.prAuthor === user;\n+    const hasMyMetaReview = (() => {", "created_at": "2018-07-30T11:47:47Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTEzOQ==", "fields": {"body": "lines with an if clause should be indented four additional spaces so that do not align with the statements in the indented block", "diff": "@@ -0,0 +1,38 @@\n+from itertools import chain\n+\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):", "created_at": "2018-07-30T11:54:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTU0Nw==", "fields": {"body": "extra config here should override the plugin defaults, so these tests passing show that your code is not working correctly.\nAnyway, dont add extra_config here.  This test class is good without it.\nCreate an additional test class TestSpamExtraConfig which verifies the extra config overrides the plugin defaults.", "diff": "@@ -7,8 +7,17 @@\n class TestSpam(unittest.TestCase):\n \n     def setUp(self):\n+        extra_config = {\n+            'DEFAULT_CONFIG': {\n+                'SpammingAlert': {\n+                    'MAX_MSG_LEN': 1000,\n+                    'MAX_LINES': 10,\n+                }\n+            }\n+        }\n         self.testbot = TestBot(extra_plugin_dir='plugins',\n-                               loglevel=logging.ERROR)\n+                               loglevel=logging.ERROR,\n+                               extra_config=extra_config)", "created_at": "2018-07-30T11:56:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyMjkxMg==", "fields": {"body": "split into multiple lines?\nalso noting that these methods are horribly repetitive. (i.e. renderTypes / renderStates / etc), but that should get fixed in a separate PR before or after this one, maybe by someone else ;-)", "diff": "@@ -243,6 +243,17 @@ class FilterDropdown extends Component {\n     return (<FilterCategory noSearch items={items}/>);\n   };\n \n+  renderReviews = () => {\n+    const filters = getFilters();\n+    const {reviews} = filters.getState();\n+\n+    const items = ['my-reviews', 'reviews-under-my-pr', 'my-meta-reviews', 'others'].map((review) => {\n+      return {text: review, isSelected: reviews.indexOf(review) >= 0, toggleHref: filters.toggleReviews(review).url() };", "created_at": "2018-07-30T12:59:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMxMTU4MA==", "fields": {"body": "dirname or dirpath, choose wisely :P", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled\n+files will be saved to current working directory. If specified directory does\n+not exists it will create one and if path specified is already a file path then\n+it will throw ``FileExistsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format ``{section.name}_{bear.name}.prof``.\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument.\n+\n+- To dump profile files in current working directory:\n+\n+  .. code:: shell\n+\n+      $coala -b PEP8Bear,PyUnusedCodeBear -f <filename> --profile\n+\n+- To dump profile files to a specified directory:\n+\n+  .. code:: shell\n+\n+      $coala -b PEP8Bear,MypyBear -f <filename> --profile <dirpath>\n+\n+coafile\n+^^^^^^^\n+\n+Users can specify to profile bears using a ``.coafile`` as well.\n+\n+- To dump profile files in current working directory:\n+\n+  ::\n+\n+      [all]\n+      bears = PEP8Bear,MypyBear\n+      files = <filename>\n+      profile = True\n+\n+- To dump profile files to a specified directory:\n+\n+  ::\n+\n+      [all]\n+      bears = PEP8Bear,MypyBear\n+      files = <filename>\n+      profile = DirName/Dirpath", "created_at": "2018-07-30T20:33:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjQ5NTUxOQ==", "fields": {"body": "Use https://www.npmjs.com/package/babel-plugin-inline-import", "diff": "@@ -1,13 +0,0 @@\n-query($owner: String!, $name: String!) {", "created_at": "2018-07-31T11:50:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTgwOQ==", "fields": {"body": "When reading this sounds a bit confusing, it reads like it takes either \"an additional parameter\", or either a \"directory name\" or a \"directory path\". Would recommend following:\n\n... accepts an additional parameter: a directory path where profiled files will be ...", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled", "created_at": "2018-07-31T19:32:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTk5OQ==", "fields": {"body": "question is what that means to the regular user, but let's put that aside for now, I'm not sure how coala should handle such \"user-exceptions\" properly (which are intended to generate an error-log and exit).", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled\n+files will be saved to current working directory. If the specified directory\n+does not exist it will be created. If the specified path points to an already\n+existing file a ``FileExistsError`` is thrown.", "created_at": "2018-07-31T19:33:20Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc3NDQ5NQ==", "fields": {"body": "@jayvdb this sets the config MAX_MSG_LEN = 1 for the testbot. So when the command msg !plugin config SpammingAlert is executed in the next line. The bot interprets the cmd msg as a spam since MAX_MSG_LEN is set to 1. So I increased the MAX_MSG_LEN to 20.", "diff": "@@ -19,6 +23,50 @@ def test_spam_configuration(self):\n         self.testbot.assertCommand('!plugin config SpammingAlert '\n                                    '{\\'MAX_LINES\\': 10}',\n                                    'configuration done')\n+        self.testbot.assertCommand('!plugin config SpammingAlert',\n+                                   '{\\'MAX_LINES\\': 10}')\n+        self.testbot.assertCommand('!plugin config SpammingAlert '\n+                                   '{\\'MAX_LINES\\': 20, \\'MAX_MSG_LEN\\': 200}',", "created_at": "2018-08-01T07:08:39Z", "last_edited_at": "2018-08-01T07:11:08Z", "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc4ODk4Nw==", "fields": {"body": "Please do not put any overrides here.\nThese are the same as the bot defaults, so unnecessary.", "diff": "@@ -111,3 +111,10 @@\n     'LabHub:*': {'allowprivate': False}}\n \n AUTOINSTALL_DEPS = True\n+\n+DEFAULT_CONFIG = {\n+    'SpammingAlert': {", "created_at": "2018-08-01T08:09:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjcyNzAwMg==", "fields": {"body": "please add a disable_global variable like https://github.com/coala/git-task-list/blob/master/.travis.yml#L13 , so all extra jobs can re-use it.", "diff": "@@ -18,18 +20,33 @@ jobs:\n       before_script: false\n       script: .ci/check_moban.sh\n       after_success: false\n+      after_failure: false", "created_at": "2018-08-01T00:55:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MjA3OQ==", "fields": {"body": "no.  we fall back to the setting , which will be in the arg max_line_length, which defaults to 79 cpl.\nBut most Language will never have a max_line_length, because most languages dont restrict that, so this warning is not user friendly, nor is it developer friendly.  We dont want patches for adding max_line_length to language definitions unless the language does restrict line length, and we know that is rare.", "diff": "@@ -30,7 +47,30 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.\n         '''\n+        if language:\n+            try:\n+                language = Language[language]\n+            except UnknownLanguageError:\n+                logging.warn(\n+                    language + ' is an invalid language name '\n+                    'or is not recognized by coala. Language specific '\n+                    'line length limitation can not be applied.'\n+                )\n+                language = Language['Unknown']\n+            else:\n+                if 'max_line_length' in language.attributes:\n+                    max_line_length = language.max_line_length\n+                else:\n+                    logging.warn(\n+                        'Language ' + str(language) + ' does not have '\n+                        '`maximum line length` defined in coalang. '\n+                        'Falling back to 80 characters as maximum line length.'", "created_at": "2018-08-02T22:18:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU0MTM5NQ==", "fields": {"body": "should have also been moved up", "diff": "@@ -30,7 +46,11 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.", "created_at": "2018-08-03T13:20:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU5Njc5Mw==", "fields": {"body": "we had coverage of this.  Add tests which cover this.", "diff": "@@ -33,47 +32,54 @@ def wrapper(*args, **kwargs):\n     return wrapper\n \n \n-class LabHub(BotPlugin):\n+class LabHub(BotPlugin, DefaultConfigMixin):\n     \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n \n-    GH_ORG_NAME = constants.GH_ORG_NAME\n-    GL_ORG_NAME = constants.GL_ORG_NAME\n+    CONFIG_TEMPLATE = {\n+        'GH_ORG_NAME': 'org_name',\n+        'GH_TOKEN': 'token',\n+        'GL_ORG_NAME': 'org_name',\n+        'GL_TOKEN': 'token',\n+    }\n \n-    def __init__(self, bot, name=None):\n-        super().__init__(bot, name)\n+    def get_configuration_template(self):\n+        DefaultConfigMixin.get_configuration_template(self)\n+\n+    def activate(self):\n+        BotPlugin.activate(self)\n \n         teams = dict()\n         try:\n-            gh = github3.login(token=os.environ.get('GH_TOKEN'))\n+            gh = github3.login(token=self.config['GH_TOKEN'])\n             assert gh is not None\n-        except AssertionError:\n+        except AssertionError:  # pragma: no cover, for logging", "created_at": "2018-08-03T16:17:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDM1MA==", "fields": {"body": "again, dont use tags that are a language .  it is confusing.", "diff": "@@ -68,3 +105,53 @@ def apply_filters(filters, bears=None):\n         filter_name, *filter_args = filter\n         bears = apply_filter(filter_name, filter_args, bears)\n     return bears\n+\n+\n+def apply_section_filters(filters, sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filters``. It returns\n+    intersection of sections if more than one element is present in ``filters``\n+    list.\n+\n+    :param filters:\n+        List of args based on ``sections`` has to be filtered.\n+        For example:\n+        ``[['tags', ('save', 'change')], ['exclude', ('css', '!python')]]``", "created_at": "2018-08-05T15:38:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMwMg==", "fields": {"body": "This belongs before --bear-dirs , probably after --files .\nLets wait for more feedback on position", "diff": "@@ -177,6 +177,10 @@ def default_arg_parser(formatter_class=None):\n         '-d', '--bear-dirs', type=PathArg, nargs='+', metavar='DIR',\n         help='additional directories which may contain bears')\n \n+    inputs_group.add_argument(", "created_at": "2018-08-05T15:35:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMzMA==", "fields": {"body": "please use exampes from your cEP, and your own real needs.\nthis looks like language , not a tag which should be an arbitrary grouping which couldnt be achieved via any other means.", "diff": "@@ -49,6 +55,37 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n+def apply_section_filter(filter_name, filter_args, all_sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filter_args``. It returns\n+    all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the filter.\n+    :param filter_args:\n+        Arguments of the filter to be passed in.\n+        For example:\n+        ``['tags', ('java',)]``", "created_at": "2018-08-05T15:37:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDQ0Mw==", "fields": {"body": "move the '-c', back to the next line, so you dont modify that line.\nit is also confusing to have the '-c', on this line when its arg is on the next line.", "diff": "@@ -198,12 +198,16 @@ def test_merge_defaults(self):\n                 gather_configuration(lambda *args: True,\n                                      self.log_printer,\n                                      arg_list=['-S', 'value=1', 'test.value=2',\n-                                               '-c', escape(temporary, '\\\\')] +\n+                                               '--tags', 'save', '-c',", "created_at": "2018-08-05T15:41:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTY4Ng==", "fields": {"body": "Please see how this is used by core and bears. I believe there are no equivalent in xml.", "diff": "@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}\n+    multiline_string_delimiters = string_delimiters\n+    encapsulators = {'<': '>'}", "created_at": "2018-08-05T21:57:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTcyNA==", "fields": {"body": "Also add cdata", "diff": "@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}", "created_at": "2018-08-05T21:58:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2MDE2NQ==", "fields": {"body": "great. removing this is necessary, because the decorator uses self.section.aspects , and so self is needed.", "diff": "@@ -21,9 +23,14 @@ class PycodestyleBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting'}\n \n-    @staticmethod", "created_at": "2018-08-06T02:03:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2OTAxOQ==", "fields": {"body": "I think we could remove the last ,", "diff": "@@ -159,6 +161,15 @@ def run_coala(console_printer=None,\n                 (section_name, sections[section_name])\n                 for section_name in targets)\n \n+        # Collect all the section filters which are based on args,", "created_at": "2018-08-06T03:54:24Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjg5Mw==", "fields": {"body": "Please don't use subclass, it's an antipattern in React. Instead, extract the logic into separate component or use HOC", "diff": "@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {", "created_at": "2018-08-04T11:50:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjkyNw==", "fields": {"body": "Remember to use onClick = () => {} in class method so it autobinds.", "diff": "@@ -1,45 +1,180 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '\ud83d\udc4d',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '\ud83d\udc4e',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '\ud83d\ude04',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '\ud83c\udf89',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '\ud83d\ude15',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '\u2764\ufe0f',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  async onClick(id, content) {\n+    const canAdd = this.state.canAdd[content];\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n+    }\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '\ud83d\udc4d',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '\ud83d\udc4e',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '\ud83d\ude04',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '\ud83c\udf89',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '\ud83d\ude15',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '\u2764\ufe0f',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={this.onClick.bind(this, id, reaction.name)}", "created_at": "2018-08-04T11:52:33Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNzg4MA==", "fields": {"body": "Component approach can be done by making a component that takes a children as a function or a render prop that gives back data. i.e.\nconst Auth = ({ children }) => {\n  return children(loginInfo) // get loginInfo from somewhere (componentDidMount?)\n}\n\n// or with render prop\n\nconst Auth = ({ render }) => {\n  return render(loginInfo)\n}\nusage:\n<Auth>\n{loginInfo => {\n  ... add logic here or render component\n}}\n</Auth>\n\n// or\n\n<Auth render={{loginInfo => { ... }}} />\nHOC is just a function that wraps other component, gives it extra prop, and returns it\nfunction withAuth(WrapperComponent) {\n  return class WithAuth extends Component {\n    render() {\n      return <WrapperComponent {...this.props} loginInfo={this.loginInfo} />\n    }\n  }\n}\nHOC usage:\nconst ReviewCard = ({ loginInfo }) => <div>{loginInfo.something}</div>\n\nexport default withAuth(ReviewCard)\nhttps://reactjs.org/docs/render-props.html\nhttps://reactjs.org/docs/higher-order-components.html", "diff": "@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {", "created_at": "2018-08-04T12:44:10Z", "last_edited_at": "2018-08-04T12:47:54Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODkyMg==", "fields": {"body": "We can have a alternate way, check this out https://medium.com/@george.shuklin/how-to-test-if-name-main-1928367290cb", "diff": "@@ -67,3 +67,4 @@ exclude_lines =\n   pragma ${PLATFORM_SYSTEM}: no cover\n   pragma ${OS_NAME}: no cover\n   pragma Python [0-9.,]*${PYTHON_VERSION}[0-9.,]*: no cover\n+  sys.exit\\(main\\(\\)\\)", "created_at": "2018-08-04T13:39:36Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNDg2MQ==", "fields": {"body": "Why change from 500 to 50?", "diff": "@@ -38,8 +38,7 @@ def setUp(self):\n         extra_config = {\n             'DEFAULT_CONFIG': {\n                 'SpammingAlert': {\n-                    'MAX_MSG_LEN': 500,\n-                    'MAX_LINES': 5,\n+                    'MAX_MSG_LEN': 50,", "created_at": "2018-08-04T17:47:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNzkxNg==", "fields": {"body": "misjudgement", "diff": "@@ -38,8 +38,7 @@ def setUp(self):\n         extra_config = {\n             'DEFAULT_CONFIG': {\n                 'SpammingAlert': {\n-                    'MAX_MSG_LEN': 500,\n-                    'MAX_LINES': 5,\n+                    'MAX_MSG_LEN': 50,", "created_at": "2018-08-04T19:52:10Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyMjgwMA==", "fields": {"body": "Many of our plugins which be changed to using labhub permissions.\ncreate a LabHubTestCase subclassing CoroboTestCase which does all the setUp necessary for testing a plugin which depends on LabHub.", "diff": "@@ -1,9 +1,54 @@\n-pytest_plugins = ['errbot.backends.test']\n-extra_plugin_dir = 'plugins'\n+import github3\n+import IGitt\n+import plugins.labhub\n+import plugins.pitchfork\n \n+from unittest.mock import PropertyMock\n+from unittest.mock import create_autospec\n+from tests.corobo_test_case import CoroboTestCase\n \n-def test(testbot):\n-    testbot.assertCommand('!pitchfork @meet', 'being pitchforked')\n-    testbot.assertCommand('!pitchfork @meet down to hell', 'being pitchforked')\n-    testbot.assertCommand('!pitchfork meet to hell', 'being pitchforked')\n-    testbot.assertCommand('!pitchfork', 'Usage')\n+\n+class TestPitchfork(CoroboTestCase):", "created_at": "2018-08-05T01:02:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0NQ==", "fields": {"body": "code repetition here, no need to reassign the same value", "diff": "@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')", "created_at": "2018-08-05T07:12:47Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0Ng==", "fields": {"body": "same ^^", "diff": "@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []", "created_at": "2018-08-05T07:13:01Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMDA0NQ==", "fields": {"body": "FileExistsError will be thrown and it raise SystemExit when user provide a filepath in --profile but if user provide a directory path and that directory already have profiled files then in the next run of coala file with the same name gets overwritten", "diff": "@@ -0,0 +1,76 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter: a directory path where\n+profiled files will be dumped, if ``True`` is provided profiled files will be\n+saved to current working directory. If the specified directory does not exist\n+it will be created. If the specified path points to an already existing file\n+a error is raised. Profiled files will get overwritten, if specified directory", "created_at": "2018-08-06T07:48:07Z", "last_edited_at": "2018-08-06T07:48:40Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyMDM2OQ==", "fields": {"body": "not all pycodestyle errors are LineLength('py').\nPlease decode the pycodestyle errors and use appropriate aspects", "diff": "@@ -61,3 +67,24 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        output_regex = (r'(?P<line>\\d+) (?P<column>\\d+) '\n+                        r'(?P<message>(?P<origin>\\S+).*)')\n+        result = re.match(output_regex, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        yield Result.from_values(\n+            origin=self,\n+            message=message,\n+            file=filename,\n+            line=int(line),\n+            column=int(column),\n+            aspect=LineLength('py'),", "created_at": "2018-08-06T14:52:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyOTUxMQ==", "fields": {"body": "I think it would've been possible to chain onChangeToken if it's component with render prop instead of HOC\nclass Dashboard extends Component {\n  onChangeToken() {\n    ...\n  }\n  \n  renderDashboard(loginInfo) {\n    return (...)\n  }\n  \n  render() {\n    return (\n      <Auth\n        onChangeToken={this.onChangeToken}\n        render={this.renderDashboard}\n      />\n    )\n  }\n}\nThe onChangeToken in Auth component (currently withAuth HOC) should also call this.props.onChangeToken, after setting its own state.\nYou could also pass Client down with this.props.onChangeToken so it's not leaking (although I'm not so sure, is Client related to auth?)", "diff": "@@ -1,125 +1,186 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n import classnames from 'classnames';\n import {Link} from 'react-router';\n \n import {getFilters} from '../route-utils';\n import IssueStore from '../issue-store';\n+import Database from '../database';\n \n import GithubFlavoredMarkdown from './gfm';\n import Time from './time';\n import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n+import withAuth from './login-auth';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {\n+  saveToDatabase = (content, isAdd) => {\n+    // reviewCard is just part of issueCard\n+    const {card, loginInfo} = this.props;\n+    const {repoOwner, repoName, number} = card;\n+    const {login} = loginInfo;\n+    if (isAdd) {\n+      // add a new reaction\n+      if (!card.reactions) card.reactions = [];\n+      card.reactions.push({\n+        content,\n+        user: {\n+          login,\n+        },\n+      });\n+    } else {\n+      // remove an existing reaction\n+      card.reactions = card.reactions.filter((reaction) => {\n+        return !(reaction.user.login === login && reaction.content === content);\n+      });\n+    }\n+    // find the corresponding issueCard\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    // update corresponding issueCard\n+    issueCard.issue.pullRequest.comments.forEach(reviewCard => {\n+      if (reviewCard.id === card.id) {\n+        reviewCard = card;\n+      }\n+    });\n+    Database.putCards([issueCard]);\n+  }\n+\n+  render() {\n+    const {card, primaryRepoName, loginInfo} = this.props;\n+    const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n+    const key = `${repoOwner}/${repoName}#${number}-${id}`;\n+\n+    // comment updatedAt is updated when comment content is edited.\n+    // Note that the default `updatedAt` field of review comment\n+    // provided by GraphQL API is inaccurate. Thus, we use our custom\n+    // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n+    const updatedAt = card.updatedAt;\n+\n+    const user = card.author;\n+    const assignedAvatar = (\n+      <Link to={getFilters().toggleUserName(user.login).url()}>\n+        <img\n+          key='avatar'\n+          className='avatar-image'\n+          title={'Click to filter on ' + user.login}\n+          src={user.avatarUrl}/>\n+      </Link>\n+    );\n+    // stop highlighting after 5min\n+    const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n+\n+    // put the corresponding pull request as related card\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    const relatedCards = [issueCard].map((issueCard) => {\n+      let title;\n+      if (issueCard.issue) {\n+        title = (\n+          <span className='related-issue-title'>{issueCard.issue.title}</span>\n+        );\n+      }\n+      return (\n+        <div key={issueCard.key()} className='related-issue'>\n+          <IssueOrPullRequestBlurb\n+            card={issueCard}\n+            primaryRepoName={card.repoName}/>\n+          {title}\n+        </div>\n       );\n+    });\n+\n+    const classes = {\n+      'review': true,\n+      'is-updated': isUpdated,\n+    };\n+\n+    const header = [\n+      <ReviewBlurb key='review-blurb'\n+        card={card}\n+        primaryRepoName={primaryRepoName} />,\n+    ];\n+\n+    let reactionsStat = {\n+      THUMBS_UP: 0,\n+      THUMBS_DOWN: 0,\n+      LAUGH: 0,\n+      HOORAY: 0,\n+      HEART: 0,\n+      CONFUSED: 0\n+    };\n+    if (reactions) {\n+      reactions.forEach(reaction => reactionsStat[reaction.content]++);\n     }\n+\n+    let noReactionByMe;\n+    let hasLogin = false;\n+    if (loginInfo) {\n+      hasLogin = true;\n+      noReactionByMe = {\n+        THUMBS_UP: true,\n+        THUMBS_DOWN: true,\n+        LAUGH: true,\n+        HOORAY: true,\n+        HEART: true,\n+        CONFUSED: true\n+      };\n+      if (reactions) {\n+        reactions.forEach(reaction => {\n+          if (reaction.user && reaction.user.login === loginInfo.login) {\n+            noReactionByMe[reaction.content] = false;\n+          }\n+        });\n+      }\n+    }\n+\n     return (\n-      <div key={issueCard.key()} className='related-issue'>\n-        <IssueOrPullRequestBlurb\n-          card={issueCard}\n-          primaryRepoName={card.repoName}/>\n-        {title}\n-      </div>\n-    );\n-  });\n-\n-  const classes = {\n-    'review': true,\n-    'is-updated': isUpdated,\n-  };\n-\n-  const header = [\n-    <ReviewBlurb key='review-blurb'\n-      card={card}\n-      primaryRepoName={primaryRepoName} />,\n-  ];\n-\n-  let reactionsStat = {\n-    THUMBS_UP: 0,\n-    THUMBS_DOWN: 0,\n-    LAUGH: 0,\n-    HOORAY: 0,\n-    HEART: 0,\n-    CONFUSED: 0\n-  };\n-  if (reactions) {\n-    reactions.forEach(reaction => reactionsStat[reaction.content]++);\n-  }\n+      <div className='-card-and-related'>\n+        <BS.ListGroupItem\n+          key={key}\n+          header={header}\n+          className={classnames(classes)}>\n \n-  return (\n-    <div className='-card-and-related'>\n-      <BS.ListGroupItem\n-        key={key}\n-        header={header}\n-        className={classnames(classes)}>\n-\n-        <span className='-extra-span-for-inline-popover'>\n-          <a\n-            key='link'\n-            className='review-title'\n-            target='_blank'\n-            href={url}>\n-              <GithubFlavoredMarkdown\n-                inline\n-                repoOwner={repoOwner}\n-                repoName={repoName}\n-                text={bodyText}/>\n-          </a>\n-        </span>\n-\n-        <span key='footer' className='review-footer'>\n-          <span key='left-footer' className='comment-reactions'>\n-            <Reactions stat={reactionsStat}/>\n+          <span className='-extra-span-for-inline-popover'>\n+            <a\n+              key='link'\n+              className='review-title'\n+              target='_blank'\n+              href={url}>\n+                <GithubFlavoredMarkdown\n+                  inline\n+                  repoOwner={repoOwner}\n+                  repoName={repoName}\n+                  text={bodyText}/>\n+            </a>\n           </span>\n-          <span key='right-footer' className='review-time-and-user'>\n-            <Time key='time' className='updated-at' dateTime={updatedAt}/>\n-            {assignedAvatar}\n+\n+          <span key='footer' className='review-footer'>\n+            <span key='left-footer' className='comment-reactions'>\n+              <Reactions\n+                id={id}\n+                stat={reactionsStat}\n+                noReactionByMe={noReactionByMe}\n+                hasLogin={hasLogin}\n+                saveCallBack={this.saveToDatabase}/>\n+            </span>\n+            <span key='right-footer' className='review-time-and-user'>\n+              <Time key='time' className='updated-at' dateTime={updatedAt}/>\n+              {assignedAvatar}\n+            </span>\n           </span>\n-        </span>\n-      </BS.ListGroupItem>\n-      <div key='related' className='related-issues'>\n-        {relatedCards}\n+        </BS.ListGroupItem>\n+        <div key='related' className='related-issues'>\n+          {relatedCards}\n+        </div>\n       </div>\n-    </div>\n-  );\n+    );\n+  }\n }\n \n-function Review({review}) {\n+function Review({review, loginInfo}) {\n   return (\n-    <ReviewCard card={review}/>\n+    <ReviewCard card={review} loginInfo={loginInfo}/>\n   );\n }\n \n-export default Review;\n+export default withAuth(Review);", "created_at": "2018-08-06T15:17:49Z", "last_edited_at": "2018-08-06T15:23:46Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MDI2MA==", "fields": {"body": "move this after the apply_filters function so that the diff better aligns, and probably at the end as it is a private function", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):", "created_at": "2018-08-06T21:49:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng==", "fields": {"body": "(almost) very generic ... belongs in coala_utils::decorators.py\nand this is enforce_duck_type or enforce_duct_tape ? ;-)\nand to make calling generic, use\n@typed_filter(bear='bearclass')\ndef language_filter(bear, args):\n```", "diff": "@@ -0,0 +1,42 @@\n+from inspect import getmro\n+from functools import wraps\n+\n+\n+def typed_filter(type_classes, msg=None):", "created_at": "2018-08-06T21:58:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjI0OA==", "fields": {"body": "thing -> obj or object_", "diff": "@@ -0,0 +1,42 @@\n+from inspect import getmro\n+from functools import wraps\n+\n+\n+def typed_filter(type_classes, msg=None):\n+    \"\"\"\n+    Used to enforce type of the first argument of a method\n+    by its class name as string. Raises NotImplementedError\n+    if the type does not match. Primarily used to enforce\n+    type of a filter.\n+\n+    :param type_classes:    list or tuple of acceptable class names\n+                            as strings for the first argument of the\n+                            method being decorated.\n+    :param msg:             Message to pass with NotImplementedError.\n+    \"\"\"\n+    if (type(type_classes) not in (tuple, list)):\n+        type_classes = (type_classes,)\n+\n+    def decorator(filter):\n+\n+        @wraps(filter)\n+        def decorated_filter(thing, *args, **kargs):", "created_at": "2018-08-06T21:58:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0NDM1Nw==", "fields": {"body": "section_tag_filter", "diff": "@@ -0,0 +1,31 @@\n+from coalib.parsing.filters.decorators import typed_filter\n+\n+\n+@typed_filter(('bearclass', 'Bear', 'Section'))\n+def tag_section_filter(section_or_bear, args):", "created_at": "2018-08-06T22:09:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTA0OQ==", "fields": {"body": "Let's call it items rather than things", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears", "created_at": "2018-08-06T20:50:01Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTQ0OQ==", "fields": {"body": "Do we have any practical case for this condition ?\nIf so, is there way we can check this before calling this function ?", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:", "created_at": "2018-08-06T20:51:36Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAzOTExNQ==", "fields": {"body": "Now we need a test class which verifies that the aspect is used when the line length is exceeded.", "diff": "@@ -63,3 +69,22 @@ def hello():\n     valid_files=(file_with_very_long_line,),\n     invalid_files=(),\n     settings={'max_line_length': 0})\n+\n+PycodestyleBearAspectsTest = verify_local_bear(", "created_at": "2018-08-06T21:45:07Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwODgwMw==", "fields": {"body": "run_coala\n\n:param arg_parser:        Instance of ArgParser that is used to non-setting arguments.\n:param arg_list:              The CLI argument list.\n:param args:                   Alternative pre-parsed CLI arguments.\n\nThis is not just about the tests, since args to run_coala() can be optionally passed instead of arg_list, I think we need to merge opts from both, so as to enable the internal usage of this filter. Tests also use can use this by directly calling run_coala() with an arg list.", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:", "created_at": "2018-08-07T06:12:25Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjkyMw==", "fields": {"body": "missing key property\nhttps://reactjs.org/docs/lists-and-keys.html", "diff": "@@ -1,45 +1,185 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '\ud83d\udc4d',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '\ud83d\udc4e',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '\ud83d\ude04',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '\ud83c\udf89',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '\ud83d\ude15',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '\u2764\ufe0f',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  onClick = async (id, content) => {\n+    const canAdd = this.state.canAdd[content];\n+    const saveToDatabase = this.props.saveCallBack;\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, true);\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, false);\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n+    }\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '\ud83d\udc4d',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '\ud83d\udc4e',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '\ud83d\ude04',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '\ud83c\udf89',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '\ud83d\ude15',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '\u2764\ufe0f',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={() => this.onClick(id, reaction.name)}\n+          disabled={!hasLogin}>", "created_at": "2018-08-07T13:38:34Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMzE2Nw==", "fields": {"body": "^ Seems like the old one doesn't have it either, React should've warned about this.", "diff": "@@ -1,45 +1,185 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '\ud83d\udc4d',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '\ud83d\udc4e',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '\ud83d\ude04',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '\ud83c\udf89',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '\ud83d\ude15',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '\u2764\ufe0f',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  onClick = async (id, content) => {\n+    const canAdd = this.state.canAdd[content];\n+    const saveToDatabase = this.props.saveCallBack;\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, true);\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, false);\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n+    }\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '\ud83d\udc4d',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '\ud83d\udc4e',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '\ud83d\ude04',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '\ud83c\udf89',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '\ud83d\ude15',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '\u2764\ufe0f',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={() => this.onClick(id, reaction.name)}\n+          disabled={!hasLogin}>", "created_at": "2018-08-07T13:39:05Z", "last_edited_at": "2018-08-07T13:39:42Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0Nzg0NA==", "fields": {"body": "def get_configuration_template(self):\n        default_config = self._default_config\n        if default_config:\n            return default_config\n        else self.CONFIG_TEMPLATE:\n            return self.CONFIG_TEMPLATE\n        return\n?", "diff": "@@ -20,6 +20,8 @@ def get_configuration_template(self):\n             return default_config\n         elif self.CONFIG_TEMPLATE:\n             return self.CONFIG_TEMPLATE\n+        else:  # pragma: no cover", "created_at": "2018-08-09T08:36:44Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0ODc3OA==", "fields": {"body": "No need for else IMO when this will be the last condition instead directly return", "diff": "@@ -30,7 +30,7 @@ def search(self, msg, arg):\n             return (self.API_DOCS +\n                     '/search.html?q=' +\n                     '+'.join(re.split(r'\\s+', search_string)))\n-        elif doc_type.lower() == 'user':\n+        else:", "created_at": "2018-08-09T08:39:46Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0OTQ3OA==", "fields": {"body": "https://github.com/coala/corobo/pull/613/files#r208848778", "diff": "@@ -93,7 +93,7 @@ def contrib_stats(self, msg, match):\n                 len(Coatils.all_langs())\n             )\n         # stats\n-        elif stat_type == '' and entity == '':\n+        else:", "created_at": "2018-08-09T08:41:42Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg1MDI0Mw==", "fields": {"body": "https://github.com/coala/corobo/pull/613/files#r208848778", "diff": "@@ -20,6 +20,8 @@ def construct_link(text):\n         elif 'documentation/' in text:\n             text = text.split('documentation/')[-1]\n             return 'https://docs.coala.io/en/latest/' + text\n+        else:  # pragma: no cover", "created_at": "2018-08-09T08:44:03Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg1MDg4Mw==", "fields": {"body": "else self.CONFIG_TEMPLATE: is syntax error ;-)", "diff": "@@ -20,6 +20,8 @@ def get_configuration_template(self):\n             return default_config\n         elif self.CONFIG_TEMPLATE:\n             return self.CONFIG_TEMPLATE\n+        else:  # pragma: no cover", "created_at": "2018-08-09T08:45:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg3OTc2NA==", "fields": {"body": "My own words thrown back at me ? ;)", "diff": "@@ -30,7 +30,7 @@ def search(self, msg, arg):\n             return (self.API_DOCS +\n                     '/search.html?q=' +\n                     '+'.join(re.split(r'\\s+', search_string)))\n-        elif doc_type.lower() == 'user':\n+        else:", "created_at": "2018-08-09T10:25:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg5OTE0OA==", "fields": {"body": "This isnt as simple as the other one.  Each branch yields, and then goes to the end.\nTo remove this else branch, we would need to add returns to all of the other branches, which isnt very helpful.", "diff": "@@ -93,7 +93,7 @@ def contrib_stats(self, msg, match):\n                 len(Coatils.all_langs())\n             )\n         # stats\n-        elif stat_type == '' and entity == '':\n+        else:", "created_at": "2018-08-09T11:47:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODgwNTYyNw==", "fields": {"body": "you sure you need this?\nit isnt doing anything afaics", "diff": "@@ -0,0 +1,363 @@\n+import logging\n+from os import path\n+\n+from coala_utils.FileUtils import detect_encoding\n+from coala_utils.decorators import (enforce_signature, generate_eq,)\n+\n+\n+class FileNameError(LookupError):\n+    def __init__(self, error_message):", "created_at": "2018-08-09T04:50:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODk2ODExOQ==", "fields": {"body": "I've explained on https://gitlab.com/coala/mobans/issues/84 why I think that is unnecessary.\nIf necessary, we have a check script which verifies that all entry points defined in the yaml have exactly these two lines at end of the file.  That prevents these sequences from being different in multiple entry points, and also ensures they are identical on all repos with entry points.", "diff": "@@ -67,3 +67,4 @@ exclude_lines =\n   pragma ${PLATFORM_SYSTEM}: no cover\n   pragma ${OS_NAME}: no cover\n   pragma Python [0-9.,]*${PYTHON_VERSION}[0-9.,]*: no cover\n+  sys.exit\\(main\\(\\)\\)", "created_at": "2018-08-09T15:10:46Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjQ4Mg==", "fields": {"body": "self.testbot = self", "diff": "@@ -43,30 +33,24 @@ def setUp(self):\n                 }\n             }\n         }\n-        self.testbot = TestBot(extra_plugin_dir='plugins',", "created_at": "2018-08-10T06:31:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjY3MQ==", "fields": {"body": "single quotes", "diff": "@@ -1,15 +1,15 @@\n import requests_mock\n import vcr\n \n-pytest_plugins = ['errbot.backends.test']\n+from tests.isolated_testcase import IsolatedTestCase\n \n-extra_plugin_dir = 'plugins'\n \n+class GhettoTest(IsolatedTestCase):\n \n-@vcr.use_cassette('tests/cassettes/ghetto.yaml')\n-def test_ghetto(testbot):\n-    testbot.assertCommand(\"!ghetto hi, whats up?\", \"hi, wassup?\")\n-    with requests_mock.Mocker() as m:\n-        m.register_uri('POST', 'http://www.gizoogle.net/textilizer.php',\n-                       text='test text which will not match with the regex')\n-        testbot.assertCommand(\"!ghetto ...\", \"Shiznit happens!\")\n+    @vcr.use_cassette('tests/cassettes/ghetto.yaml')\n+    def test_ghetto(self):\n+        self.assertCommand(\"!ghetto hi, whats up?\", \"hi, wassup?\")\n+        with requests_mock.Mocker() as m:\n+            m.register_uri('POST', 'http://www.gizoogle.net/textilizer.php',\n+                           text='test text which will not match with the regex')\n+            self.assertCommand(\"!ghetto ...\", \"Shiznit happens!\")", "created_at": "2018-08-10T06:32:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjYzNg==", "fields": {"body": "single quotes", "diff": "@@ -1,15 +1,15 @@\n import requests_mock\n import vcr\n \n-pytest_plugins = ['errbot.backends.test']\n+from tests.isolated_testcase import IsolatedTestCase\n \n-extra_plugin_dir = 'plugins'\n \n+class GhettoTest(IsolatedTestCase):\n \n-@vcr.use_cassette('tests/cassettes/ghetto.yaml')\n-def test_ghetto(testbot):\n-    testbot.assertCommand(\"!ghetto hi, whats up?\", \"hi, wassup?\")\n-    with requests_mock.Mocker() as m:\n-        m.register_uri('POST', 'http://www.gizoogle.net/textilizer.php',\n-                       text='test text which will not match with the regex')\n-        testbot.assertCommand(\"!ghetto ...\", \"Shiznit happens!\")\n+    @vcr.use_cassette('tests/cassettes/ghetto.yaml')\n+    def test_ghetto(self):\n+        self.assertCommand(\"!ghetto hi, whats up?\", \"hi, wassup?\")", "created_at": "2018-08-10T06:32:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NzMyMQ==", "fields": {"body": "you should be able to use requests-mock to break IGitt so it gives a RuntimeError , but ... not critical ... this is OK for now", "diff": "@@ -65,7 +68,7 @@ def __init__(self, bot, name=None):\n                              filter(lambda x: (x.full_name.split('/')[0] ==\n                                                self.GH_ORG_NAME),\n                                     self.IGH.write_repositories)}\n-        except RuntimeError:\n+        except RuntimeError:  # pragma: no cover, for logging", "created_at": "2018-08-10T06:36:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTExMzEyMA==", "fields": {"body": "do class initialisation in setUpClass , including creating the hidden directory , and then remove the directory in tearDownClass.", "diff": "@@ -0,0 +1,23 @@\n+import logging\n+import os\n+\n+from errbot.backends.test import FullStackTest\n+from pathlib import Path\n+\n+\n+class IsolatedTestCase(FullStackTest):\n+\n+    def setUp(self, extra_config=None):\n+        file_name = 'labhub.plug'\n+        file_rename = 'hidden'", "created_at": "2018-08-09T23:56:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MDA4OA==", "fields": {"body": "Undefined minimum_similarity_ratio", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:\n+            with open(file_name, 'r') as f:\n+                expected_revert_file_content = f.read()\n+\n+            matcher = SequenceMatcher(\n+                None, revert_file_content, expected_revert_file_content)\n+            similarity_ratio = matcher.real_quick_ratio()\n+            if similarity_ratio < minimum_similarity_ratio:", "created_at": "2018-08-10T14:04:50Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTMzMQ==", "fields": {"body": "I think we might wanna change this function into a private function (by adding _ prefix in front of the function name), since this function probably wouldn't be called neither by the programmer nor user in another source code", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):", "created_at": "2018-08-10T14:08:33Z", "last_edited_at": "2018-08-10T15:40:08Z", "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTY4Nw==", "fields": {"body": "I think we don't need to add this check again, as it's already done in line 142", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:", "created_at": "2018-08-10T14:09:38Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMTA4Mg==", "fields": {"body": "These files are of the \"expected revert commit\" that we are creating for comparison.\nLine 142 checks files in the reverted commit. So as to check any extra added or deleted files.", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:", "created_at": "2018-08-10T15:38:07Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMjQyMw==", "fields": {"body": "yield from self.check_modified..", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:\n+            with open(file_name, 'r') as f:\n+                expected_revert_file_content = f.read()\n+\n+            matcher = SequenceMatcher(\n+                None, revert_file_content, expected_revert_file_content)\n+            similarity_ratio = matcher.real_quick_ratio()\n+            if similarity_ratio < minimum_similarity_ratio:\n+                yield Result(self, 'Changes in modified file %s of '\n+                             'revert commit are not exactly '\n+                             'revert of changes in reverted '\n+                             'commit.' %\n+                             file_name)\n+\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+\n+        return\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name in reverted_commit_modified_files_list:\n+                    self.check_modified_file_similarity(", "created_at": "2018-08-10T15:42:23Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTAyMw==", "fields": {"body": "Move this function definition into the inside of _check_modified_file_similarity() as this function would probably only called there.\nAnd it can be as simple as\ndef clean_inspect_revert_branch():\n    run_shell_command(switch_branch_command)\n    run_shell_command('git branch -D inspectrevertbranch')", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):", "created_at": "2018-08-12T10:56:03Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwMg==", "fields": {"body": ".. not in the reverted ..", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '", "created_at": "2018-08-12T10:59:55Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwNw==", "fields": {"body": ".. not in the reverted ...", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.deleted_files:\n+                if file_path not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '", "created_at": "2018-08-12T11:00:14Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTExNA==", "fields": {"body": "... not in the reverted ...", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.deleted_files:\n+                if file_path not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.modified_files:\n+                if file_path in reverted_commit_modified_files_list:\n+                    yield from self._check_modified_file_similarity(\n+                        file_path, reverted_commit_sha,\n+                        minimum_similarity_ratio)\n+\n+                else:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                 'file %s that is not in reverted '", "created_at": "2018-08-12T11:00:27Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTk3OQ==", "fields": {"body": "This string should be a constant, with substitution variable for \"added\", \"deleted\" & \"modified\"", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.deleted_files:\n+                if file_path not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.modified_files:\n+                if file_path in reverted_commit_modified_files_list:\n+                    yield from self._check_modified_file_similarity(\n+                        file_path, reverted_commit_sha,\n+                        minimum_similarity_ratio)\n+\n+                else:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                 'file %s that is not in reverted '", "created_at": "2018-08-12T11:35:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYzMA==", "fields": {"body": "no trailing , if followed by )", "diff": "@@ -0,0 +1,358 @@\n+import logging\n+from os import path\n+\n+from coala_utils.FileUtils import detect_encoding\n+from coala_utils.decorators import (enforce_signature, generate_eq,)", "created_at": "2018-08-11T03:10:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNjMzNw==", "fields": {"body": "We can merge this if they all change to being dictionaries which describe how to escape each of the items in string_delimiters\nstring_delimiter_escape = {'\"': '\\\\\"'}", "diff": "@@ -19,3 +19,4 @@ class C:\n         '#undef', '#ifdef', '#ifndef', '#if', '#endif', '#else', '#elif',\n         '#line', '#pragma']\n     special_chars = list(r'+-*/.;\\,()[]{}\\=<>|&^~?%!')\n+    escape_quotes = '\\\"',", "created_at": "2018-08-11T04:44:32Z", "last_edited_at": "2018-08-11T05:08:35Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA3MDEwMA==", "fields": {"body": "Yup it works. Thanks :)", "diff": "@@ -776,6 +776,11 @@ a.chip i {\n   cursor: pointer;\n }\n \n+.coala-online .add-bear {", "created_at": "2018-08-18T09:25:13Z", "last_edited_at": null, "author": "Akhelesh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA4MDA4Mw==", "fields": {"body": "Don't worry, this shows how insistent you are on learning.", "diff": "@@ -146,8 +146,8 @@ <h4>Optional Settings</h4>\n         <div class=\"row blue-grey darken-4 white-text z-depth-1 no-margin\">\n           <span>\n             <a class=\"waves-effect grey-text text-lighten-2\">\n-              <i ng-click=\"add_bears(section)\" class=\"fa fa-plus-circle bears-icon-small\" aria-hidden=\"true\"> &nbsp;ADD BEAR\n-              </i>\n+              <i ng-click=\"add_bears(section)\" class=\"fa fa-plus-circle bears-icon-small\" aria-hidden=\"true\"></i>\n+              &nbsp;ADD BEAR", "created_at": "2018-08-18T16:14:38Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3", "fields": {"body": "@hemang \ud83d\udc4d  This solves the page refresh problem", "diff": "@@ -12,16 +32,17 @@\n \t\t})\n \t})\n \n-\tapp.controller('TabController', function () {\n-\t\tthis.tab = 1\n-\t\tthis.setTab = function (stab) {\n-\t\t\tthis.tab = stab\n-\t\t\t$(\".button-collapse\").sideNav('hide');\n-\t\t}\n-\t\tthis.isSet = function (stab) {\n-\t\t\treturn this.tab == stab\n-\t\t}\n-\t})\n+    app.controller('TabController', function ($location) {\n+        this.tab = \"/home\";", "created_at": "2017-01-27T09:48:19Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx", "fields": {"body": "space before justify", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align:justify;", "created_at": "2017-02-03T19:23:58Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0", "fields": {"body": "space after .description and before {", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{", "created_at": "2017-02-03T19:24:25Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MjEw", "fields": {"body": "space before {", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align:justify;\n+  font-weight: 300;    \n+}\n+.container .gi-container-title{\n+  font-size: 5em;\n+  font-weight: 300;\n+}\n+.description a:hover{", "created_at": "2017-02-03T19:25:13Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMTkw", "fields": {"body": "@Shruti9520 There is extra whitespace on Line 55 after font-weight:300, so you'll have to remove that extra whitespace. And a new PR shouldn't be created after every review iteration, you can follow the newcomer guide to see how to amend your commit and to push the changes in this PR itself \ud83d\ude03", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description {\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align: justify;\n+  font-weight: 300;    ", "created_at": "2017-02-04T07:59:51Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzY0", "fields": {"body": "hey, your shortlog isnt according to our standards. It should be \"Improve\" instead of \"Improved\"..see the imperative form :) ?\nalso, enclose \"Get Involved\" in double backticks: ``", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;", "created_at": "2017-02-04T09:58:42Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzcz", "fields": {"body": "you can also run \"coala\" and it fixes everything for you automatically, if you have it installed :)", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description {\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align: justify;\n+  font-weight: 300;    ", "created_at": "2017-02-04T09:59:12Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTEzNDEx", "fields": {"created_at": "2017-01-22T12:51:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "SiddharthKumar02", "review": "MDEyOklzc3VlQ29tbWVudDI3NDMyODkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY2MTk0", "fields": {"created_at": "2017-01-27T09:51:40Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY2MjEz", "fields": {"created_at": "2017-01-27T09:52:33Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODM0NDg4", "fields": {"created_at": "2017-02-02T14:26:00Z", "content": "THUMBS_UP", "giver": "etotientz", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3Njk3MDY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY4NzI4", "fields": {"created_at": "2017-02-03T11:56:59Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY4NzMx", "fields": {"created_at": "2017-02-03T11:57:05Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc3NTkz", "fields": {"created_at": "2017-02-03T16:46:11Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI3NTQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODczMTI5", "fields": {"created_at": "2017-02-03T14:45:35Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI2MzkwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODg0MjAw", "fields": {"created_at": "2017-02-03T20:10:00Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Shruti9520", "review": "MDEyOklzc3VlQ29tbWVudDI3NzM0MTE0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODM3", "fields": {"created_at": "2017-02-03T19:26:53Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODQx", "fields": {"created_at": "2017-02-03T19:26:57Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODU0", "fields": {"created_at": "2017-02-03T19:27:13Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODU4", "fields": {"created_at": "2017-02-03T19:27:17Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyOTg2", "fields": {"created_at": "2017-02-03T19:30:46Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MjEw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgzMTM4", "fields": {"created_at": "2017-02-03T19:35:54Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDEyOklzc3VlQ29tbWVudDI3NzMzOTEyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTQ0", "fields": {"created_at": "2017-02-04T15:34:32Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMTkw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTQx", "fields": {"created_at": "2017-02-04T15:34:26Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzcz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTUx", "fields": {"created_at": "2017-02-04T15:35:35Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzY0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk5Mzgz", "fields": {"created_at": "2017-02-04T19:40:23Z", "content": "THUMBS_UP", "giver": "aalind0", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzQ2OTcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTEwNTU5", "fields": {"created_at": "2017-02-05T19:51:42Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzU0MTkzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTY2NzI3", "fields": {"created_at": "2017-02-07T14:56:53Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "rahulkrishnan98", "review": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTk2MzI5", "fields": {"created_at": "2017-02-08T08:59:04Z", "content": "THUMBS_UP", "giver": "rahulkrishnan98", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3ODIyMzgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTk4OTQy", "fields": {"created_at": "2017-02-08T10:22:43Z", "content": "THUMBS_UP", "giver": "rahulkrishnan98", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAyODE4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTkxODM0", "fields": {"created_at": "2017-02-08T05:29:08Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "rahulkrishnan98", "review": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEzODU4", "fields": {"created_at": "2017-02-08T17:34:24Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM5MTI4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Mjk5Mzk5", "fields": {"created_at": "2017-02-17T15:49:25Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI4MDY2MTY3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTc4MDQ5", "fields": {"created_at": "2017-03-19T16:49:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sahilarora535", "review": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzU1OTQ5", "fields": {"created_at": "2017-03-24T12:18:36Z", "content": "THUMBS_UP", "giver": "kaustubhhiware", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI4OTAwNzQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzY2MzY0", "fields": {"created_at": "2017-03-24T16:59:59Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI4OTA3Mzc4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzY2MzYy", "fields": {"created_at": "2017-03-24T16:59:57Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI4OTA3Mzc4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjM0NTE5", "fields": {"created_at": "2017-04-03T13:41:02Z", "content": "THUMBS_UP", "giver": "kaustubhhiware", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI5MTE0NTg1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjQ1MTgz", "fields": {"created_at": "2017-04-03T18:27:53Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI5MTIwNjgzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjQxOTY3", "fields": {"created_at": "2017-04-03T16:55:24Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI5MTE4NDc3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI1MDAy", "fields": {"created_at": "2017-04-09T06:50:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "impmihai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAxNjQ2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI5ODQz", "fields": {"created_at": "2017-04-09T17:15:54Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDU0NzU3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjMxMTg2", "fields": {"created_at": "2017-04-22T20:51:21Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDA4NTQ0Mg==", "fields": {"created_at": "2017-05-21T08:08:04Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYyMzQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI0MDUxOA==", "fields": {"created_at": "2017-05-25T14:29:40Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQzMzA4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI5NzUyNQ==", "fields": {"created_at": "2017-05-27T10:57:10Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI5NzUyNg==", "fields": {"created_at": "2017-05-27T10:57:16Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIyOTUyMw==", "fields": {"created_at": "2017-05-25T07:28:17Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQyOTU2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDA1MQ==", "fields": {"created_at": "2017-06-02T09:21:07Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMwNTM5MDU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDAxMQ==", "fields": {"created_at": "2017-06-02T09:20:01Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNDI5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDQ4OA==", "fields": {"created_at": "2017-06-02T09:33:37Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyNjc1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDQ5Mg==", "fields": {"created_at": "2017-06-02T09:33:43Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyODYwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDYyMQ==", "fields": {"created_at": "2017-06-02T09:37:56Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNzg3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDYzMg==", "fields": {"created_at": "2017-06-02T09:38:18Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMDUyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDg0Nw==", "fields": {"created_at": "2017-06-01T04:50:48Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDgxNQ==", "fields": {"created_at": "2017-06-01T04:48:52Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDgyMA==", "fields": {"created_at": "2017-06-01T04:49:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDgyOQ==", "fields": {"created_at": "2017-06-01T04:49:39Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTMyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzODI1OQ==", "fields": {"created_at": "2017-06-01T09:29:29Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2NjgxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzODIyMA==", "fields": {"created_at": "2017-06-01T09:28:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2Njc0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU5MzQ0NA==", "fields": {"created_at": "2017-06-06T18:27:30Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ0MTUyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUyNDk1MA==", "fields": {"created_at": "2017-06-04T18:40:13Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNDcxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUzMjMzNg==", "fields": {"created_at": "2017-06-05T06:13:46Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDg3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUzMjU5Ng==", "fields": {"created_at": "2017-06-05T06:32:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDcwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY5ODU2Nw==", "fields": {"created_at": "2017-06-09T08:53:58Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1MjkzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDcxODU4NA==", "fields": {"created_at": "2017-06-09T19:13:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTA3MjYyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDg0NTUyOA==", "fields": {"created_at": "2017-06-14T11:01:59Z", "content": "THUMBS_DOWN", "giver": "sadovnychyi", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg1MjgzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAyOTg2Mw==", "fields": {"created_at": "2017-06-20T12:41:43Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjk1NTMxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAzOTc0MA==", "fields": {"created_at": "2017-06-20T16:21:56Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMwOTgxMDM2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4MDQ2Mw==", "fields": {"created_at": "2017-06-24T09:53:19Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3NDIyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4MTcwMw==", "fields": {"created_at": "2017-06-24T12:54:18Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3NDIyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODI3OQ==", "fields": {"created_at": "2017-06-26T15:22:28Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDAzMjY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODI4MA==", "fields": {"created_at": "2017-06-26T15:22:31Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU4NjcwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODMxNg==", "fields": {"created_at": "2017-06-26T15:23:19Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU4NjcwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODMxOA==", "fields": {"created_at": "2017-06-26T15:23:23Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDAzMjY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjQ5Nw==", "fields": {"created_at": "2017-07-05T13:22:42Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjUwMw==", "fields": {"created_at": "2017-07-05T13:22:50Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwOTE4NQ==", "fields": {"created_at": "2017-07-05T15:51:33Z", "content": "HOORAY", "giver": "IpshitaC", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUzMTU1Mw==", "fields": {"created_at": "2017-07-06T05:48:35Z", "content": "HOORAY", "giver": "IpshitaC", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxMzI4NDM2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTc0MDcyOA==", "fields": {"created_at": "2017-07-12T15:31:58Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4NTc1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTcyNjAyNg==", "fields": {"created_at": "2017-07-12T09:18:08Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMxNDY2NDgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTczOTY1Nw==", "fields": {"created_at": "2017-07-12T15:10:21Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4MTEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk4MTk2Nw==", "fields": {"created_at": "2017-07-19T18:54:54Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNTAwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk4MjQ4MQ==", "fields": {"created_at": "2017-07-19T19:08:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNjg1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjIwOTMwNA==", "fields": {"created_at": "2017-07-26T13:55:39Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQ5MTU2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNTE2MQ==", "fields": {"created_at": "2017-07-29T17:10:49Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MDM1MQ==", "fields": {"created_at": "2017-08-06T11:04:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MDMwNg==", "fields": {"created_at": "2017-08-06T10:56:39Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTU0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU5NzU0MQ==", "fields": {"created_at": "2017-08-07T14:31:26Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMyMDQ2MzYxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDI1NQ==", "fields": {"created_at": "2017-08-10T15:40:20Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDU1MA==", "fields": {"created_at": "2017-08-10T15:46:20Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNjc1OA==", "fields": {"created_at": "2017-08-10T16:34:26Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwMDE3Nw==", "fields": {"created_at": "2017-08-12T15:45:34Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2Mw==", "fields": {"created_at": "2017-08-13T11:05:41Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2NQ==", "fields": {"created_at": "2017-08-13T11:05:45Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2Ng==", "fields": {"created_at": "2017-08-13T11:05:48Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2Nw==", "fields": {"created_at": "2017-08-13T11:05:51Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk2NjIyNw==", "fields": {"created_at": "2017-08-17T16:06:29Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY4NzY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk5NjkyNQ==", "fields": {"created_at": "2017-08-18T10:32:38Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyMzMxODIwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQ1MjUzMg==", "fields": {"created_at": "2017-08-31T18:19:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQwODcyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzk5MTM5MQ==", "fields": {"created_at": "2017-09-17T10:36:02Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODIyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzk5MTM5Mg==", "fields": {"created_at": "2017-09-17T10:36:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3NjMxOQ==", "fields": {"created_at": "2017-10-03T16:25:28Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzMjQxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3NjQxNQ==", "fields": {"created_at": "2017-10-03T16:27:37Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzNDEyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjIwMg==", "fields": {"created_at": "2017-10-18T06:32:58Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "swapagarwal", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjI3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjU1OQ==", "fields": {"created_at": "2017-10-18T06:45:46Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "swapagarwal", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjUyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjcwNQ==", "fields": {"created_at": "2017-10-18T06:50:39Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "swapagarwal", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ2NTI0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjkzMg==", "fields": {"created_at": "2017-10-18T06:58:24Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ3Nzc5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyODcyMQ==", "fields": {"created_at": "2017-10-18T07:52:52Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ5MDUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTI1MDAyMg==", "fields": {"created_at": "2017-10-20T21:15:39Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "cornu-ammonis", "review": "MDEyOklzc3VlQ29tbWVudDMzODMyMzk4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTM4OTg4Ng==", "fields": {"created_at": "2017-10-25T06:31:25Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzODg5NTQwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTM4OTg5MA==", "fields": {"created_at": "2017-10-25T06:31:30Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "kartikeys98", "review": "MDEyOklzc3VlQ29tbWVudDMzOTAxNDI5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTMxNjY0OA==", "fields": {"created_at": "2017-10-23T18:08:08Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "acashmkj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjMzNTU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc0OTQwNA==", "fields": {"created_at": "2017-11-03T08:20:43Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2MDc1OA==", "fields": {"created_at": "2017-11-03T13:58:18Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2Mjk2NQ==", "fields": {"created_at": "2017-11-03T14:42:36Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4MzEwOA==", "fields": {"created_at": "2017-11-03T23:47:35Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "troublemagnet", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4ODI1Nw==", "fields": {"created_at": "2017-11-04T09:51:09Z", "content": "THUMBS_UP", "giver": "yashasingh", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4OTU2OA==", "fields": {"created_at": "2017-11-04T12:07:59Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkyODgyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc5NDAzMw==", "fields": {"created_at": "2017-11-04T18:33:57Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkxODYyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc5NjEwMg==", "fields": {"created_at": "2017-11-04T21:39:41Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk2NTg2Nw==", "fields": {"created_at": "2017-11-09T02:37:20Z", "content": "HOORAY", "giver": "prashant0598", "receiver": "solutusimmensus", "review": "MDEyOklzc3VlQ29tbWVudDM0Mjk1ODc5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkxMzkzNA==", "fields": {"created_at": "2017-11-08T03:14:25Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkyMDEyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkyOTY1MA==", "fields": {"created_at": "2017-11-08T12:10:03Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkzNjc4Mg==", "fields": {"created_at": "2017-11-08T14:50:21Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0MjgzNTQwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA2NDE0Ng==", "fields": {"created_at": "2017-11-11T12:00:39Z", "content": "THUMBS_UP", "giver": "troublemagnet", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIwNzI3OA==", "fields": {"created_at": "2017-11-15T13:06:13Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIwNzg4OA==", "fields": {"created_at": "2017-11-15T13:21:19Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIyMTI4Mg==", "fields": {"created_at": "2017-11-15T17:54:51Z", "content": "THUMBS_UP", "giver": "acashmkj", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDUwNA==", "fields": {"created_at": "2017-11-18T18:59:45Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMQ==", "fields": {"created_at": "2017-11-17T17:41:24Z", "content": "HOORAY", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMg==", "fields": {"created_at": "2017-11-17T17:41:27Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY2NDA4NQ==", "fields": {"created_at": "2017-11-28T12:41:17Z", "content": "THUMBS_UP", "giver": "mohitkyadav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzUwOTY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMTgxNQ==", "fields": {"created_at": "2017-11-27T05:39:45Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjM2Nw==", "fields": {"created_at": "2017-11-27T06:14:40Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjQ4MQ==", "fields": {"created_at": "2017-11-27T06:21:01Z", "content": "THUMBS_UP", "giver": "0x48piraj", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjc0NQ==", "fields": {"created_at": "2017-11-27T06:34:18Z", "content": "THUMBS_UP", "giver": "khanchi97", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMzY2Mw==", "fields": {"created_at": "2017-11-27T07:19:24Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "0x48piraj", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYyMjM4Mw==", "fields": {"created_at": "2017-11-27T15:35:21Z", "content": "THUMBS_UP", "giver": "mohitkyadav", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzIyODU2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjc1NDc1MQ==", "fields": {"created_at": "2017-11-30T06:54:34Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0ODA5OTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjc1NDkwMw==", "fields": {"created_at": "2017-11-30T07:02:01Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0ODA5OTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjc1NDkzMg==", "fields": {"created_at": "2017-11-30T07:03:00Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0ODA5OTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjc3NDczNw==", "fields": {"created_at": "2017-11-30T15:26:18Z", "content": "THUMBS_UP", "giver": "yashasingh", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0ODIwNTcwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcwMTkyNg==", "fields": {"created_at": "2017-11-29T05:24:22Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0Nzc1MzM4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcwMzAxNA==", "fields": {"created_at": "2017-11-29T06:16:32Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM0Nzc2Mzk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcwMzY2MQ==", "fields": {"created_at": "2017-11-29T06:44:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzcwMzcxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcwNTAyMA==", "fields": {"created_at": "2017-11-29T07:38:49Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzcxMDQ4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0MDg0Mg==", "fields": {"created_at": "2017-12-02T00:45:54Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQyOTQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0Mjg4MQ==", "fields": {"created_at": "2017-12-02T04:38:45Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQxOTg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0NDkxOQ==", "fields": {"created_at": "2017-12-02T09:48:06Z", "content": "THUMBS_DOWN", "giver": "shaipranesh11", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM0ODU4ODMzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg1NjM1OA==", "fields": {"created_at": "2017-12-03T07:10:37Z", "content": "THUMBS_UP", "giver": "bhavishyagopesh", "receiver": "UnimaginaryUnit", "review": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTM5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg2MjE2Nw==", "fields": {"created_at": "2017-12-03T17:07:57Z", "content": "THUMBS_UP", "giver": "mohitkyadav", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzI3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg2MjI3NQ==", "fields": {"created_at": "2017-12-03T17:16:16Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "mohitkyadav", "review": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzEwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0ODQwMw==", "fields": {"created_at": "2017-12-05T17:19:46Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk1MjM1NA==", "fields": {"created_at": "2017-12-05T18:47:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2MTQyNA==", "fields": {"created_at": "2017-12-05T22:27:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2NDgyNA==", "fields": {"created_at": "2017-12-06T00:15:50Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2ODI4OQ==", "fields": {"created_at": "2017-12-06T02:41:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3MTQxNg==", "fields": {"created_at": "2017-12-06T05:30:17Z", "content": "LAUGH", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg2NQ==", "fields": {"created_at": "2017-12-06T08:29:06Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg5OA==", "fields": {"created_at": "2017-12-06T08:30:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NzExNg==", "fields": {"created_at": "2017-12-06T09:01:32Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4Nzg3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkxODU1MA==", "fields": {"created_at": "2017-12-05T03:36:41Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "indmind", "review": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMDY1OQ==", "fields": {"created_at": "2017-12-05T05:36:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg1MDEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzU3OA==", "fields": {"created_at": "2017-12-05T07:48:42Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzg2NA==", "fields": {"created_at": "2017-12-05T07:58:40Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkzNTEzMA==", "fields": {"created_at": "2017-12-05T12:49:42Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4OTY3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkzNTM5NA==", "fields": {"created_at": "2017-12-05T12:55:42Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg5MjE2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MDAwNg==", "fields": {"created_at": "2017-12-08T04:21:56Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MTg0Mw==", "fields": {"created_at": "2017-12-08T06:15:44Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MjcyMQ==", "fields": {"created_at": "2017-12-08T07:00:40Z", "content": "HEART", "giver": "synicalsyntax", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzA0OQ==", "fields": {"created_at": "2017-12-08T07:14:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzE1MQ==", "fields": {"created_at": "2017-12-08T07:18:57Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA5MzI2Mg==", "fields": {"created_at": "2017-12-08T17:00:48Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAzMDc5NA==", "fields": {"created_at": "2017-12-07T10:17:48Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE0MTA5OQ==", "fields": {"created_at": "2017-12-11T08:18:04Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjAwMzc2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE4NjMwMg==", "fields": {"created_at": "2017-12-12T04:35:25Z", "content": "HEART", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzExMjQwOA==", "fields": {"created_at": "2017-12-09T11:27:49Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDQ1MDU0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNTY1Nw==", "fields": {"created_at": "2017-12-10T13:20:53Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "Grox-Ni", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjI2Mg==", "fields": {"created_at": "2017-12-10T14:22:11Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjM5Mg==", "fields": {"created_at": "2017-12-10T14:33:36Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjMyMw==", "fields": {"created_at": "2017-12-10T14:26:52Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjk2MA==", "fields": {"created_at": "2017-12-10T15:22:18Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Ng==", "fields": {"created_at": "2017-12-10T16:45:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Nw==", "fields": {"created_at": "2017-12-10T16:45:25Z", "content": "HEART", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMTgyNQ==", "fields": {"created_at": "2017-12-10T22:39:57Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMzY2OA==", "fields": {"created_at": "2017-12-11T01:19:09Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzNzM1MQ==", "fields": {"created_at": "2017-12-11T05:24:19Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mg==", "fields": {"created_at": "2017-12-11T06:36:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mw==", "fields": {"created_at": "2017-12-11T06:36:03Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk1Ng==", "fields": {"created_at": "2017-12-11T06:47:31Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk4Nw==", "fields": {"created_at": "2017-12-11T06:48:35Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNQ==", "fields": {"created_at": "2017-12-11T06:46:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNw==", "fields": {"created_at": "2017-12-11T06:46:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MDQ3NQ==", "fields": {"created_at": "2017-12-13T07:34:04Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MTkyMQ==", "fields": {"created_at": "2017-12-13T08:24:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MjE0OQ==", "fields": {"created_at": "2017-12-13T08:30:29Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI4ODUzNw==", "fields": {"created_at": "2017-12-14T05:40:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNjk2NA==", "fields": {"created_at": "2017-12-12T22:08:24Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNzUxNg==", "fields": {"created_at": "2017-12-12T22:22:46Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM4Mg==", "fields": {"created_at": "2017-12-13T02:42:18Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM5OQ==", "fields": {"created_at": "2017-12-13T02:42:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNjc4MA==", "fields": {"created_at": "2017-12-13T04:52:17Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzOTU3Mw==", "fields": {"created_at": "2017-12-13T06:56:58Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM0OTYyNA==", "fields": {"created_at": "2017-12-15T13:06:08Z", "content": "CONFUSED", "giver": "Vamshi99", "receiver": "mohitkyadav", "review": "MDEyOklzc3VlQ29tbWVudDM1MTk4NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3MzczOA==", "fields": {"created_at": "2017-12-16T03:40:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA1OQ==", "fields": {"created_at": "2017-12-16T09:26:26Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA2Mg==", "fields": {"created_at": "2017-12-16T09:27:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3NA==", "fields": {"created_at": "2017-12-16T22:16:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3Ng==", "fields": {"created_at": "2017-12-16T22:16:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4Mzg4MA==", "fields": {"created_at": "2017-12-16T22:36:00Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "margobra8", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4NjE4OQ==", "fields": {"created_at": "2017-12-17T04:08:37Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjg4Ng==", "fields": {"created_at": "2017-12-17T17:37:51Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjk0Mw==", "fields": {"created_at": "2017-12-17T17:41:56Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5MzA4MQ==", "fields": {"created_at": "2017-12-17T17:54:58Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzMxMDMzNg==", "fields": {"created_at": "2017-12-14T15:45:12Z", "content": "THUMBS_UP", "giver": "myfrom", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNDIwNQ==", "fields": {"created_at": "2017-12-18T07:43:12Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNzA0Ng==", "fields": {"created_at": "2017-12-18T09:18:14Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQxMDU3Nw==", "fields": {"created_at": "2017-12-18T10:49:42Z", "content": "THUMBS_UP", "giver": "Rahmeen14", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MDU4Ng==", "fields": {"created_at": "2017-12-21T04:33:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MjI3MQ==", "fields": {"created_at": "2017-12-21T06:13:45Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0NDMwOA==", "fields": {"created_at": "2017-12-21T07:45:42Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NDEyMQ==", "fields": {"created_at": "2017-12-22T04:47:28Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NTM5NA==", "fields": {"created_at": "2017-12-22T06:06:15Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4ODExNg==", "fields": {"created_at": "2017-12-22T08:20:27Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzU0NzAxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTI3Mw==", "fields": {"created_at": "2017-12-20T10:45:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTU4Mw==", "fields": {"created_at": "2017-12-20T10:54:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUxMDM0NA==", "fields": {"created_at": "2017-12-20T13:18:28Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYwNg==", "fields": {"created_at": "2017-12-20T17:26:03Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYzNw==", "fields": {"created_at": "2017-12-20T17:26:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTc2Ng==", "fields": {"created_at": "2017-12-20T17:30:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMjA1Mg==", "fields": {"created_at": "2017-12-20T17:37:29Z", "content": "LAUGH", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUzMDIwNA==", "fields": {"created_at": "2017-12-20T21:08:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc2OQ==", "fields": {"created_at": "2017-12-25T15:06:32Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3MA==", "fields": {"created_at": "2017-12-25T15:06:34Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3Mg==", "fields": {"created_at": "2017-12-25T15:06:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQyMw==", "fields": {"created_at": "2017-12-25T21:04:23Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQzNg==", "fields": {"created_at": "2017-12-25T21:06:08Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0OTAzNg==", "fields": {"created_at": "2017-12-26T05:33:40Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY1NTYzMA==", "fields": {"created_at": "2017-12-26T12:00:10Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY4Mzk3Nw==", "fields": {"created_at": "2017-12-27T13:03:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYwMjcxMA==", "fields": {"created_at": "2017-12-22T16:39:35Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNg==", "fields": {"created_at": "2017-12-24T02:00:01Z", "content": "HEART", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNw==", "fields": {"created_at": "2017-12-24T02:00:25Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNDAzMg==", "fields": {"created_at": "2017-12-24T02:24:02Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQyOTQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNDEyOA==", "fields": {"created_at": "2017-12-24T02:47:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQ2OQ==", "fields": {"created_at": "2017-12-24T07:02:47Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQwOQ==", "fields": {"created_at": "2017-12-24T06:52:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQxMA==", "fields": {"created_at": "2017-12-24T06:52:44Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzMjI4MQ==", "fields": {"created_at": "2017-12-24T23:35:38Z", "content": "HEART", "giver": "dob9601", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzOTI2NA==", "fields": {"created_at": "2017-12-25T10:45:55Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc2NTEzMg==", "fields": {"created_at": "2017-12-31T10:10:34Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDExNw==", "fields": {"created_at": "2017-12-28T06:33:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDMzNA==", "fields": {"created_at": "2017-12-28T06:48:01Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNTYyNg==", "fields": {"created_at": "2017-12-28T07:58:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNjE4Nw==", "fields": {"created_at": "2017-12-28T08:24:19Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDE0MQ==", "fields": {"created_at": "2017-12-29T09:31:03Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDQ3OA==", "fields": {"created_at": "2017-12-29T09:50:54Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MjY5NQ==", "fields": {"created_at": "2018-01-04T04:48:24Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk1MzY0Nw==", "fields": {"created_at": "2018-01-06T15:55:07Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "dob9601", "review": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODEzNDI0Nw==", "fields": {"created_at": "2018-01-11T08:05:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODEzODU1MQ==", "fields": {"created_at": "2018-01-11T09:48:46Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "Prabhat-IIT", "review": "MDEyOklzc3VlQ29tbWVudDM1Njg4MTQ5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI0MTkyNw==", "fields": {"created_at": "2018-01-14T09:25:28Z", "content": "LAUGH", "giver": "newbazz", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM5MTY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM5MDg1NA==", "fields": {"created_at": "2018-01-17T18:57:28Z", "content": "THUMBS_UP", "giver": "vipuldcoder", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODQ1NDg5NA==", "fields": {"created_at": "2018-01-18T22:12:14Z", "content": "THUMBS_UP", "giver": "ShivamSinghania", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1NzgyNA==", "fields": {"created_at": "2018-01-22T12:58:45Z", "content": "THUMBS_DOWN", "giver": "realslimshanky", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1ODE2MQ==", "fields": {"created_at": "2018-01-22T13:06:57Z", "content": "THUMBS_DOWN", "giver": "anctartica", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwNg==", "fields": {"created_at": "2018-01-22T13:43:34Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwOQ==", "fields": {"created_at": "2018-01-22T13:43:36Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM4Nw==", "fields": {"created_at": "2018-01-22T13:57:59Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM5MQ==", "fields": {"created_at": "2018-01-22T13:58:07Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDU1Ng==", "fields": {"created_at": "2018-01-22T14:02:36Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2ODkyNg==", "fields": {"created_at": "2018-01-22T16:30:41Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2OTM3OA==", "fields": {"created_at": "2018-01-22T16:39:13Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODc1MDQwOQ==", "fields": {"created_at": "2018-01-25T20:00:07Z", "content": "THUMBS_UP", "giver": "Kagamihime", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODgyMzY1Nw==", "fields": {"created_at": "2018-01-28T00:02:09Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM2MTAyMjcyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODgzNTExNw==", "fields": {"created_at": "2018-01-28T20:04:17Z", "content": "LAUGH", "giver": "Makman2", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM2MTA3NDcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODkyMjY3MA==", "fields": {"created_at": "2018-01-30T15:29:04Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM2MTQ4NDEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE0NDcyNw==", "fields": {"created_at": "2018-02-05T05:40:04Z", "content": "THUMBS_UP", "giver": "mvinoba", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE5OTYwMw==", "fields": {"created_at": "2018-02-06T06:52:29Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "mvinoba", "review": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyMDYzOQ==", "fields": {"created_at": "2018-02-13T11:28:23Z", "content": "HOORAY", "giver": "realslimshanky", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTY5MzcwNw==", "fields": {"created_at": "2018-02-16T14:44:19Z", "content": "LAUGH", "giver": "Makman2", "receiver": "nguptaa", "review": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Mw==", "fields": {"created_at": "2018-02-23T01:52:50Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Nw==", "fields": {"created_at": "2018-02-23T01:52:56Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY4OQ==", "fields": {"created_at": "2018-02-23T01:54:31Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYxMA==", "fields": {"created_at": "2018-02-23T01:51:52Z", "content": "LAUGH", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzMw==", "fields": {"created_at": "2018-02-23T01:52:33Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzNQ==", "fields": {"created_at": "2018-02-23T01:52:38Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA3Njg5NQ==", "fields": {"created_at": "2018-02-26T13:03:30Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM2ODQ5MTUxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA4NDIzMQ==", "fields": {"created_at": "2018-02-26T15:23:06Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM2ODUxMjk4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA4NjM4Mw==", "fields": {"created_at": "2018-02-26T15:55:31Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "random-access7", "review": "MDEyOklzc3VlQ29tbWVudDM2ODU0MzMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA5Mjk4OA==", "fields": {"created_at": "2018-02-26T17:42:48Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2ODU4MjcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDAzMzM3NQ==", "fields": {"created_at": "2018-02-24T17:24:43Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDM2ODIyMTE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE1NTI3OA==", "fields": {"created_at": "2018-02-27T17:48:09Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM2ODk2MzQ2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE1NTM3NQ==", "fields": {"created_at": "2018-02-27T17:49:43Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "random-access7", "review": "MDEyOklzc3VlQ29tbWVudDM2ODk2NTM4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDI0NTYwNg==", "fields": {"created_at": "2018-03-01T07:59:09Z", "content": "THUMBS_UP", "giver": "random-access7", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDM2OTQzMTU4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDUyNDA4MA==", "fields": {"created_at": "2018-03-07T14:10:39Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDM3MDM1NjY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY1OTYzOA==", "fields": {"created_at": "2018-03-09T20:31:25Z", "content": "HOORAY", "giver": "sangamcse", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzU1ODUyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3MDc4Mg==", "fields": {"created_at": "2018-03-10T06:32:04Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3MTcxOTEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3MTQ5NA==", "fields": {"created_at": "2018-03-10T07:53:46Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYxNTE0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3NzY4NA==", "fields": {"created_at": "2018-03-10T16:51:34Z", "content": "LAUGH", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYyNzIxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDY3NzcxMw==", "fields": {"created_at": "2018-03-10T16:53:37Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzYyNzI3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDcwODk4NQ==", "fields": {"created_at": "2018-03-12T08:36:12Z", "content": "LAUGH", "giver": "sangamcse", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzcxOTc3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDcwODk5MA==", "fields": {"created_at": "2018-03-12T08:36:15Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzcxOTc3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NDg2NA==", "fields": {"created_at": "2018-03-19T11:13:18Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "rohanrk", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE3NzUyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NjUxNw==", "fields": {"created_at": "2018-03-19T11:54:21Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5NjA4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAwMDM3OQ==", "fields": {"created_at": "2018-03-17T11:37:58Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1MDI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAxNzExNA==", "fields": {"created_at": "2018-03-18T12:42:54Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI4NjY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAyMjM2Mw==", "fields": {"created_at": "2018-03-18T18:48:03Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5NjU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAyMjU2NQ==", "fields": {"created_at": "2018-03-18T19:04:12Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "manankalra", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5OTE0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTM1OTgwMQ==", "fields": {"created_at": "2018-03-26T05:01:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDM3NTc2MTg0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTMxNjM0Mg==", "fields": {"created_at": "2018-03-23T20:52:07Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM3NTc3MjM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTY0MTUwNA==", "fields": {"created_at": "2018-03-31T20:58:53Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzNjk1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTY3ODY1OQ==", "fields": {"created_at": "2018-04-02T14:46:17Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1Mzg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTYwMjYzOA==", "fields": {"created_at": "2018-03-30T10:10:39Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODI2NTk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTYwMzI2MQ==", "fields": {"created_at": "2018-03-30T10:33:18Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM3NzQ5ODI0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTYxODU0Mw==", "fields": {"created_at": "2018-03-30T18:42:50Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM3NzU5MzM1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTc4NzY5Nw==", "fields": {"created_at": "2018-04-04T12:39:51Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM3ODMxMDE0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTc4ODEwOQ==", "fields": {"created_at": "2018-04-04T12:47:34Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODg4MzUzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTc4ODEyMg==", "fields": {"created_at": "2018-04-04T12:47:50Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODg4NDYxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTcxNDEyNw==", "fields": {"created_at": "2018-04-03T08:05:46Z", "content": "THUMBS_DOWN", "giver": "Vamshi99", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM3ODE0NTU0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTcyMDgwMQ==", "fields": {"created_at": "2018-04-03T10:23:57Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM3ODE5NDUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg0NjYyMw==", "fields": {"created_at": "2018-04-05T12:13:47Z", "content": "HOORAY", "giver": "sangamcse", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTAyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg0NjYyOA==", "fields": {"created_at": "2018-04-05T12:13:51Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTAyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTg5MjE2Nw==", "fields": {"created_at": "2018-04-06T06:57:29Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTY3MzE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk0NzA4OA==", "fields": {"created_at": "2018-04-07T16:42:52Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkyMTI2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk1ODkzOA==", "fields": {"created_at": "2018-04-08T11:05:46Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzE1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk2MTUzMw==", "fields": {"created_at": "2018-04-08T14:21:29Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3OTUzMTczMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk3NTA0Mg==", "fields": {"created_at": "2018-04-09T05:34:44Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkxNDEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk5NDI2Ng==", "fields": {"created_at": "2018-04-09T13:20:25Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MDc3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk5NDUwMA==", "fields": {"created_at": "2018-04-09T13:24:50Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MjEzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTkxMzAyMA==", "fields": {"created_at": "2018-04-06T14:49:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM3ODE5NDUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTkzNzkzMw==", "fields": {"created_at": "2018-04-07T02:46:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTQwMTM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjAzMzQwNg==", "fields": {"created_at": "2018-04-10T05:39:26Z", "content": "THUMBS_UP", "giver": "Mohit17067", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDI5ODE4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjI2OTc1MA==", "fields": {"created_at": "2018-04-14T01:53:24Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3MjQ3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjI2OTc1NA==", "fields": {"created_at": "2018-04-14T01:53:38Z", "content": "HEART", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3MjQ3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjIzNzYzNg==", "fields": {"created_at": "2018-04-13T12:38:58Z", "content": "LAUGH", "giver": "newbazz", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDI5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjIzNzYzOQ==", "fields": {"created_at": "2018-04-13T12:39:00Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDI5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjIzNzg1Mg==", "fields": {"created_at": "2018-04-13T12:43:40Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTM3NDQwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2MjczNQ==", "fields": {"created_at": "2018-04-17T03:01:42Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTkyMDk0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2MzA4Mg==", "fields": {"created_at": "2018-04-17T03:14:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTkzMzEzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2Njc3MA==", "fields": {"created_at": "2018-04-17T05:50:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM4MjIyMg==", "fields": {"created_at": "2018-04-17T11:27:09Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk0ODc2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjMyNjAyMw==", "fields": {"created_at": "2018-04-16T13:06:39Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDA5MDc3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ0MDM0OQ==", "fields": {"created_at": "2018-04-18T09:44:35Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1ODYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ0MDU0NQ==", "fields": {"created_at": "2018-04-18T09:48:40Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1OTQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ0MDUzOA==", "fields": {"created_at": "2018-04-18T09:48:35Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjM1OTczNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ1NzA0Mw==", "fields": {"created_at": "2018-04-18T14:57:42Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ0OA==", "fields": {"created_at": "2018-04-19T07:10:40Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ3MQ==", "fields": {"created_at": "2018-04-19T07:11:14Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQxOA==", "fields": {"created_at": "2018-04-19T07:09:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU0OA==", "fields": {"created_at": "2018-04-19T07:13:08Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU1NQ==", "fields": {"created_at": "2018-04-19T07:13:22Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU2MA==", "fields": {"created_at": "2018-04-19T07:13:38Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUwMQ==", "fields": {"created_at": "2018-04-19T07:11:50Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUzMQ==", "fields": {"created_at": "2018-04-19T07:12:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1MA==", "fields": {"created_at": "2018-04-19T07:34:34Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1Mw==", "fields": {"created_at": "2018-04-19T07:34:36Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ3Nw==", "fields": {"created_at": "2018-04-19T07:35:04Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ4NQ==", "fields": {"created_at": "2018-04-19T07:35:18Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzY5Nw==", "fields": {"created_at": "2018-04-19T07:40:01Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjU0OTM2OA==", "fields": {"created_at": "2018-04-20T02:55:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjU0OTg0Mw==", "fields": {"created_at": "2018-04-20T03:16:54Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjkzMzM4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjY5NTQwOA==", "fields": {"created_at": "2018-04-24T04:41:19Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "manankalra", "review": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYwNzA1Nw==", "fields": {"created_at": "2018-04-21T14:45:52Z", "content": "THUMBS_UP", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIwOTkxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxMzczMw==", "fields": {"created_at": "2018-04-21T23:48:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxMTY2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxMzczNQ==", "fields": {"created_at": "2018-04-21T23:48:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxMTM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNjAyMw==", "fields": {"created_at": "2018-04-22T05:09:32Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "attilanagy", "review": "MDEyOklzc3VlQ29tbWVudDM4MzM1NTg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNzY0NA==", "fields": {"created_at": "2018-04-22T08:29:00Z", "content": "CONFUSED", "giver": "attilanagy", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM4MzM1NjQ2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjczNTM4OQ==", "fields": {"created_at": "2018-04-24T16:30:57Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "prnvdixit", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk1MzUxMg==", "fields": {"created_at": "2018-04-28T15:40:02Z", "content": "THUMBS_UP", "giver": "nityanandagohain", "receiver": "IpshitaC", "review": "MDEyOklzc3VlQ29tbWVudDM4NTE4NDk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NTA0OA==", "fields": {"created_at": "2018-05-01T15:58:43Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0OTA4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NTAwNA==", "fields": {"created_at": "2018-05-01T15:57:32Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NjI2MA==", "fields": {"created_at": "2018-05-01T16:27:43Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA1MDY1OQ==", "fields": {"created_at": "2018-05-01T18:01:36Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA3ODk3OA==", "fields": {"created_at": "2018-05-02T09:10:01Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkxMzE0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA4MTE3Mw==", "fields": {"created_at": "2018-05-02T09:58:04Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkyNTc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA4NDAwMA==", "fields": {"created_at": "2018-05-02T11:08:24Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkzNjI2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE1MzM4MQ==", "fields": {"created_at": "2018-05-03T15:01:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTU0NDA3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE1MzM5Ng==", "fields": {"created_at": "2018-05-03T15:01:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTM5ODQ3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE2Njg4MA==", "fields": {"created_at": "2018-05-03T18:55:19Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5MzQ1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE2Njg4Mw==", "fields": {"created_at": "2018-05-03T18:55:21Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5MzY5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE2Njg4OQ==", "fields": {"created_at": "2018-05-03T18:55:24Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5Mzg4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE2Njg5NA==", "fields": {"created_at": "2018-05-03T18:55:30Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc5NDAyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE4NDI1OQ==", "fields": {"created_at": "2018-05-04T05:10:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDM4NTk3MDM2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE4Nzk0NA==", "fields": {"created_at": "2018-05-04T07:38:28Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NjUxMjg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzEwMjAyNg==", "fields": {"created_at": "2018-05-02T16:31:40Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzEzODM0MQ==", "fields": {"created_at": "2018-05-03T10:06:26Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MzMwMzAyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI1NTYyOA==", "fields": {"created_at": "2018-05-06T15:54:45Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NDQyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI1Njc4Mw==", "fields": {"created_at": "2018-05-06T17:21:38Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI5NTkzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI2NDk2MA==", "fields": {"created_at": "2018-05-07T03:09:08Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTY0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI4MzE0OQ==", "fields": {"created_at": "2018-05-07T12:47:55Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQwOTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI4NDczOA==", "fields": {"created_at": "2018-05-07T13:21:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI5NTUwOA==", "fields": {"created_at": "2018-05-07T16:42:02Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM4NzA5ODQ4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMDgyNQ==", "fields": {"created_at": "2018-05-05T01:21:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM4NjUyODExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTI5MQ==", "fields": {"created_at": "2018-05-05T02:11:42Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTI5OA==", "fields": {"created_at": "2018-05-05T02:12:17Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MTc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM1OA==", "fields": {"created_at": "2018-05-05T02:19:08Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTcwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM2OQ==", "fields": {"created_at": "2018-05-05T02:20:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM4Ng==", "fields": {"created_at": "2018-05-05T02:21:54Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTkzOA==", "fields": {"created_at": "2018-05-05T03:20:17Z", "content": "HEART", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjMyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMjc1NQ==", "fields": {"created_at": "2018-05-05T04:59:31Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI1MTIwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzNzEyMg==", "fields": {"created_at": "2018-05-05T11:54:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI4OTY1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzM5Njk4OQ==", "fields": {"created_at": "2018-05-09T12:01:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNDY0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzM5NjkzNA==", "fields": {"created_at": "2018-05-09T11:59:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNjEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMwMzY2Mw==", "fields": {"created_at": "2018-05-07T19:26:59Z", "content": "THUMBS_UP", "giver": "PrajwalM2212", "receiver": "attilanagy", "review": "MDEyOklzc3VlQ29tbWVudDM4NzE3NTEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNTMxNw==", "fields": {"created_at": "2018-05-08T00:54:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQ0NDY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNTMyMg==", "fields": {"created_at": "2018-05-08T00:54:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNzI2OA==", "fields": {"created_at": "2018-05-08T02:06:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU5NjQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMyMDc1NQ==", "fields": {"created_at": "2018-05-08T04:43:12Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "siddhant-curious", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjYxNTMxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMyMTAwMQ==", "fields": {"created_at": "2018-05-08T04:55:07Z", "content": "THUMBS_UP", "giver": "PrajwalM2212", "receiver": "siddhant-curious", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjYxNjQ2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMyNDkzMA==", "fields": {"created_at": "2018-05-08T07:15:20Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTgyOTg5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ0MzY2Nw==", "fields": {"created_at": "2018-05-10T07:57:37Z", "content": "LAUGH", "giver": "ishanSrt", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4Nzk4MTQwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ0MzY3Mg==", "fields": {"created_at": "2018-05-10T07:57:42Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4Nzk4MTQwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIxNw==", "fields": {"created_at": "2018-05-10T12:39:54Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "lilithxxx", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIzMw==", "fields": {"created_at": "2018-05-10T12:40:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1ODgxNw==", "fields": {"created_at": "2018-05-10T14:13:48Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzMyODIxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ2MDEwNw==", "fields": {"created_at": "2018-05-10T14:34:33Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzMyOTY1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ2NjUwNg==", "fields": {"created_at": "2018-05-10T16:23:03Z", "content": "THUMBS_UP", "giver": "monsij", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk1MDM0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ3ODY5Mw==", "fields": {"created_at": "2018-05-10T20:29:45Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "nemaniarjun", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQxNjMxNg==", "fields": {"created_at": "2018-05-09T17:45:35Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNDY0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQxNjY5Mw==", "fields": {"created_at": "2018-05-09T17:52:37Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzAwNTU4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQyMTEzOQ==", "fields": {"created_at": "2018-05-09T19:18:03Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE0MzIyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQyMTQzNg==", "fields": {"created_at": "2018-05-09T19:24:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzEzNjczMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQzNDM3OA==", "fields": {"created_at": "2018-05-10T01:53:48Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE1MDI0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU2MzUwOA==", "fields": {"created_at": "2018-05-13T17:04:35Z", "content": "THUMBS_UP", "giver": "gopalgoel19", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4ODY0MDc1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzUwOTc4MA==", "fields": {"created_at": "2018-05-11T12:48:51Z", "content": "CONFUSED", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Nzc3MDEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzcwNzU2Nw==", "fields": {"created_at": "2018-05-16T09:58:32Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODU2NjgxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzcxMDE4NA==", "fields": {"created_at": "2018-05-16T10:52:15Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk1MDM0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk2MTY4Mw==", "fields": {"created_at": "2018-05-22T08:36:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MDUwMTM5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4NDc1OA==", "fields": {"created_at": "2018-05-22T15:19:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTA0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc0Mw==", "fields": {"created_at": "2018-05-22T16:02:53Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc2Mw==", "fields": {"created_at": "2018-05-22T16:03:14Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkzNDgzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc4Mw==", "fields": {"created_at": "2018-05-22T16:03:34Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTk0MzQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzkwMjk1MQ==", "fields": {"created_at": "2018-05-21T05:16:51Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ5NTM3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzkyNDcwNw==", "fields": {"created_at": "2018-05-21T15:14:51Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5MDY2MjUzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDA1MTcyOQ==", "fields": {"created_at": "2018-05-23T16:06:17Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM5MTM2ODYwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDA2MDc1Ng==", "fields": {"created_at": "2018-05-23T18:45:13Z", "content": "HOORAY", "giver": "fatma-mohamed", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MTQxMzgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxNTU3Mg==", "fields": {"created_at": "2018-05-23T03:33:35Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAxMDkyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxNTYxNQ==", "fields": {"created_at": "2018-05-23T03:35:00Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAyNDQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxOTgzNg==", "fields": {"created_at": "2018-05-23T06:28:47Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "dorothykiz1", "review": "MDEyOklzc3VlQ29tbWVudDM5MTIyNzkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5NzIyNg==", "fields": {"created_at": "2018-05-26T11:48:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjU2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODc4MQ==", "fields": {"created_at": "2018-05-26T13:59:44Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjgzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODcyNA==", "fields": {"created_at": "2018-05-26T13:56:37Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0Njc4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODg0NA==", "fields": {"created_at": "2018-05-26T14:03:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjkyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5OTA1OA==", "fields": {"created_at": "2018-05-26T14:19:28Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0OTM2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI1Mzc2MA==", "fields": {"created_at": "2018-05-28T18:03:24Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI1MzY3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI2MDI3OA==", "fields": {"created_at": "2018-05-28T22:48:33Z", "content": "THUMBS_UP", "giver": "utkarsh2102", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MjUyMTU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI2NjQxNQ==", "fields": {"created_at": "2018-05-29T04:29:54Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MjYzMzY4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI3MDI0NA==", "fields": {"created_at": "2018-05-29T06:57:41Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM5MjY3MTg2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI3Mzk2Mw==", "fields": {"created_at": "2018-05-29T08:22:09Z", "content": "THUMBS_UP", "giver": "ananyaarun", "receiver": "sks444", "review": "MDEyOklzc3VlQ29tbWVudDM5MjY4Mzk4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI5NDc0Mw==", "fields": {"created_at": "2018-05-29T14:47:53Z", "content": "THUMBS_DOWN", "giver": "palash25", "receiver": "dorothykiz1", "review": "MDEyOklzc3VlQ29tbWVudDM5MjgwMDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDI5NDk1MA==", "fields": {"created_at": "2018-05-29T14:50:46Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "dorothykiz1", "review": "MDEyOklzc3VlQ29tbWVudDM5MjgwNDc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDIxMjA2MA==", "fields": {"created_at": "2018-05-27T13:01:09Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTAzNzUyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDM0MzYxNw==", "fields": {"created_at": "2018-05-30T10:29:50Z", "content": "CONFUSED", "giver": "dorothykiz1", "receiver": "dorothykiz1", "review": "MDEyOklzc3VlQ29tbWVudDM5MjgwMDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ0NDIwNQ==", "fields": {"created_at": "2018-05-31T21:36:28Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTI2MzUwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NDEzMQ==", "fields": {"created_at": "2018-06-01T04:24:20Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jsecrest", "review": "MDEyOklzc3VlQ29tbWVudDM5MzY3ODY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NDI3OQ==", "fields": {"created_at": "2018-06-01T04:32:02Z", "content": "HOORAY", "giver": "jsecrest", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5Mzc0ODM1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NjU0MQ==", "fields": {"created_at": "2018-06-01T06:13:25Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MjgwNDEwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ3NDY5NQ==", "fields": {"created_at": "2018-06-01T13:24:22Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NzAwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ3NDg3Mw==", "fields": {"created_at": "2018-06-01T13:27:32Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NDcwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODE4NA==", "fields": {"created_at": "2018-06-02T10:45:36Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjM5NDYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODE5Nw==", "fields": {"created_at": "2018-06-02T10:46:38Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjI0NjA4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODM4MQ==", "fields": {"created_at": "2018-06-02T11:03:30Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1MDE1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTI2Mw==", "fields": {"created_at": "2018-06-02T12:14:54Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDM5NDA4MTgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTM2MQ==", "fields": {"created_at": "2018-06-02T12:22:58Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1Nzk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTM2Mw==", "fields": {"created_at": "2018-06-02T12:23:07Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1ODM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTQ1NQ==", "fields": {"created_at": "2018-06-02T12:30:40Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NzkyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUyNjY2Ng==", "fields": {"created_at": "2018-06-03T14:22:58Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTE5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUyNjY2OA==", "fields": {"created_at": "2018-06-03T14:23:02Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTEzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUzMzA1OQ==", "fields": {"created_at": "2018-06-03T22:01:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTM0OQ==", "fields": {"created_at": "2018-06-05T19:35:04Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MTY5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTM4Mw==", "fields": {"created_at": "2018-06-05T19:35:41Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MTg5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTM5MQ==", "fields": {"created_at": "2018-06-05T19:35:47Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MjA0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTQ2NA==", "fields": {"created_at": "2018-06-05T19:37:24Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTQ2OA==", "fields": {"created_at": "2018-06-05T19:37:28Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDE1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTQ3MA==", "fields": {"created_at": "2018-06-05T19:37:31Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5MDA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYxODE1Ng==", "fields": {"created_at": "2018-06-05T12:12:30Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTcwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNTE0MQ==", "fields": {"created_at": "2018-06-05T14:08:19Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM5NDcyMTc1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNjY3MQ==", "fields": {"created_at": "2018-06-05T14:28:35Z", "content": "HOORAY", "giver": "Makman2", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM5NDE1NjY3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNjc0MQ==", "fields": {"created_at": "2018-06-05T14:29:28Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM5NDczMDM2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc2MzQ1Ng==", "fields": {"created_at": "2018-06-07T14:49:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3NDY2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc3NDg1OQ==", "fields": {"created_at": "2018-06-07T17:51:59Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "IpshitaC", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzgyNDM4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc3NDk5OA==", "fields": {"created_at": "2018-06-07T17:54:23Z", "content": "CONFUSED", "giver": "RaiVaibhav", "receiver": "IpshitaC", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzgyMzk2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc5OTQ1OQ==", "fields": {"created_at": "2018-06-08T05:50:48Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MjQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDcxOTEzNg==", "fields": {"created_at": "2018-06-06T20:54:19Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzU0MTU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg0NzY3MA==", "fields": {"created_at": "2018-06-09T01:21:06Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5NTkyODY0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NDU2Ng==", "fields": {"created_at": "2018-06-09T12:13:12Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzg4MjM3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NDY1OQ==", "fields": {"created_at": "2018-06-09T12:21:15Z", "content": "THUMBS_UP", "giver": "anctartica", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5NTk2Mzg4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NDY2MA==", "fields": {"created_at": "2018-06-09T12:21:22Z", "content": "LAUGH", "giver": "anctartica", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5NTk2Mzg4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NTI5Mw==", "fields": {"created_at": "2018-06-09T13:11:29Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NTI5NA==", "fields": {"created_at": "2018-06-09T13:11:33Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NTI5Ng==", "fields": {"created_at": "2018-06-09T13:11:37Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTIxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1Njg0NA==", "fields": {"created_at": "2018-06-09T14:58:30Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1Njk5MQ==", "fields": {"created_at": "2018-06-09T15:06:34Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTUxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1ODQzMg==", "fields": {"created_at": "2018-06-09T16:46:35Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIyNTQzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg2NDYyNw==", "fields": {"created_at": "2018-06-10T03:41:31Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5NjAwODAzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg3MDM5MA==", "fields": {"created_at": "2018-06-10T13:32:40Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg3MDM5Mg==", "fields": {"created_at": "2018-06-10T13:32:43Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg3MDUwOQ==", "fields": {"created_at": "2018-06-10T13:43:14Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4MzA3Nw==", "fields": {"created_at": "2018-06-11T04:29:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4MzA3OQ==", "fields": {"created_at": "2018-06-11T04:29:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzIxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4MzU5NA==", "fields": {"created_at": "2018-06-11T04:58:46Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTAxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NDM2OQ==", "fields": {"created_at": "2018-06-11T05:35:26Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTAzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NjM0NQ==", "fields": {"created_at": "2018-06-11T06:50:11Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NjY2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NjYyNw==", "fields": {"created_at": "2018-06-11T06:58:07Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzEwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4Njk4MQ==", "fields": {"created_at": "2018-06-11T07:08:55Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NzA1NA==", "fields": {"created_at": "2018-06-11T07:11:27Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2NzIxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg4NzA1OA==", "fields": {"created_at": "2018-06-11T07:11:36Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTA1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg5Njk2MA==", "fields": {"created_at": "2018-06-11T10:44:07Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI2OTE1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDgzNTYyMg==", "fields": {"created_at": "2018-06-08T18:36:00Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczMzcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk3OTk3NQ==", "fields": {"created_at": "2018-06-12T17:34:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTg1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk4MTE1Ng==", "fields": {"created_at": "2018-06-12T17:55:19Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk4NDkyOQ==", "fields": {"created_at": "2018-06-12T19:05:29Z", "content": "HEART", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM5NjY5ODM4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk5MTg4Mw==", "fields": {"created_at": "2018-06-12T21:16:55Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MjgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk5MTkwOA==", "fields": {"created_at": "2018-06-12T21:17:24Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MTkwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk5MTkzMA==", "fields": {"created_at": "2018-06-12T21:17:42Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDg4MzE1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTA0MDc1MQ==", "fields": {"created_at": "2018-06-13T16:42:36Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTAxOTE2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTA2MDU2OA==", "fields": {"created_at": "2018-06-13T23:49:49Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE4ODAxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTA2OTczNg==", "fields": {"created_at": "2018-06-14T06:01:00Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTI0NDk5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTAxMjAyOQ==", "fields": {"created_at": "2018-06-13T08:19:10Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczMDUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTAxOTMxNg==", "fields": {"created_at": "2018-06-13T10:35:06Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5Njg3MzQyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTAyMjI5MQ==", "fields": {"created_at": "2018-06-13T11:45:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMjcwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTAyNzYyMQ==", "fields": {"created_at": "2018-06-13T13:26:53Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDcwMzA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE1ODUwOQ==", "fields": {"created_at": "2018-06-15T15:49:15Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "SubbulakshmiRS", "review": "MDEyOklzc3VlQ29tbWVudDM5NzY2MjM5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NTUwNw==", "fields": {"created_at": "2018-06-15T23:27:03Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTMwOTM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzM4NQ==", "fields": {"created_at": "2018-06-16T02:01:14Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "bekicot", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTA0NzExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzQ4OQ==", "fields": {"created_at": "2018-06-16T02:16:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "bekicot", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY5MDIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzUxMw==", "fields": {"created_at": "2018-06-16T02:19:22Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE1NDgzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzUyNg==", "fields": {"created_at": "2018-06-16T02:20:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTEwMTE5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4MDAxMQ==", "fields": {"created_at": "2018-06-16T07:34:06Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NDg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4MzU0Mw==", "fields": {"created_at": "2018-06-16T13:09:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM5NzUxNzU5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4NTQyNQ==", "fields": {"created_at": "2018-06-16T15:49:55Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4Njc2Mw==", "fields": {"created_at": "2018-06-16T17:31:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwNzUxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE5MzYzOQ==", "fields": {"created_at": "2018-06-17T07:25:32Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkxOTE5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE5NTUzOQ==", "fields": {"created_at": "2018-06-17T10:39:55Z", "content": "CONFUSED", "giver": "ishanSrt", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNDk2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTIyOTY5Mg==", "fields": {"created_at": "2018-06-18T13:40:04Z", "content": "THUMBS_UP", "giver": "ananyaarun", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5ODA0Mjc4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM0NzQ3Mw==", "fields": {"created_at": "2018-06-20T10:59:01Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5ODcwOTYxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM2MjczMw==", "fields": {"created_at": "2018-06-20T15:23:09Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc1NTAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MDk5Mw==", "fields": {"created_at": "2018-06-21T02:01:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MzQ3Nw==", "fields": {"created_at": "2018-06-21T03:38:52Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5ODA0MQ==", "fields": {"created_at": "2018-06-21T06:37:11Z", "content": "THUMBS_UP", "giver": "chhabrabhishek", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMzMDkyNA==", "fields": {"created_at": "2018-06-20T04:15:18Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYyNTkxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMzMTQ0Ng==", "fields": {"created_at": "2018-06-20T04:41:16Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYyNjIzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTMzNDM0Mw==", "fields": {"created_at": "2018-06-20T06:28:55Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5Nzg0OTEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ1ODYzMw==", "fields": {"created_at": "2018-06-22T06:05:41Z", "content": "LAUGH", "giver": "harshhx17", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ1ODYzNQ==", "fields": {"created_at": "2018-06-22T06:05:44Z", "content": "THUMBS_UP", "giver": "harshhx17", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ2Mzk2NQ==", "fields": {"created_at": "2018-06-22T08:24:45Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQwODY0MA==", "fields": {"created_at": "2018-06-21T10:06:37Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyNzcwNw==", "fields": {"created_at": "2018-06-21T15:48:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM5NzUxNzU5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyNzg2MA==", "fields": {"created_at": "2018-06-21T15:50:06Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE0ODgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyODIyMw==", "fields": {"created_at": "2018-06-21T15:55:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyOTgwMQ==", "fields": {"created_at": "2018-06-21T16:23:36Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE0NTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzMjU4Nw==", "fields": {"created_at": "2018-06-21T17:12:54Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIwNDA1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDA2NQ==", "fields": {"created_at": "2018-06-21T17:38:00Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE3MjQzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDM3Mw==", "fields": {"created_at": "2018-06-21T17:43:50Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE0NTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDk3OQ==", "fields": {"created_at": "2018-06-21T17:53:50Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE2NTc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2MjkxMQ==", "fields": {"created_at": "2018-06-25T14:46:50Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDA5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2MzAwMw==", "fields": {"created_at": "2018-06-25T14:48:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2NTAxMQ==", "fields": {"created_at": "2018-06-25T15:18:06Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMTU3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU4NDY0MA==", "fields": {"created_at": "2018-06-25T21:27:35Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkwNzU3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNDkzMg==", "fields": {"created_at": "2018-06-23T02:18:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNjUwNw==", "fields": {"created_at": "2018-06-23T05:39:31Z", "content": "THUMBS_UP", "giver": "bekicot", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNzEyMw==", "fields": {"created_at": "2018-06-23T06:56:10Z", "content": "THUMBS_UP", "giver": "starkblaze01", "receiver": "chhabrabhishek", "review": "MDEyOklzc3VlQ29tbWVudDM5OTYyOTU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUxNTA4NA==", "fields": {"created_at": "2018-06-23T18:47:34Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2ODk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUxODk1OA==", "fields": {"created_at": "2018-06-24T02:28:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUyMjA5NA==", "fields": {"created_at": "2018-06-24T09:22:04Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM5OTczMTEzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY0NTc3NA==", "fields": {"created_at": "2018-06-26T21:12:19Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNTc2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MDk5OA==", "fields": {"created_at": "2018-06-27T13:20:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzY0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MDk5OQ==", "fields": {"created_at": "2018-06-27T13:20:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzUwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MTAwMQ==", "fields": {"created_at": "2018-06-27T13:20:22Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjY0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MTAwMg==", "fields": {"created_at": "2018-06-27T13:20:24Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjQ2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4NDI1Ng==", "fields": {"created_at": "2018-06-27T14:12:13Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc0MDA1Mw==", "fields": {"created_at": "2018-06-28T12:55:49Z", "content": "THUMBS_UP", "giver": "starkblaze01", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwMTAwNzI3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg0NA==", "fields": {"created_at": "2018-06-28T17:28:43Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTkxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg1MA==", "fields": {"created_at": "2018-06-28T17:28:52Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg1NA==", "fields": {"created_at": "2018-06-28T17:28:56Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTE0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg1OA==", "fields": {"created_at": "2018-06-28T17:28:59Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMDA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg2NQ==", "fields": {"created_at": "2018-06-28T17:29:07Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxOTg0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc3OTkwNA==", "fields": {"created_at": "2018-06-29T04:40:39Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc5NTI3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc4MDIzNQ==", "fields": {"created_at": "2018-06-29T04:58:09Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc4MTI0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg0Mzg1MA==", "fields": {"created_at": "2018-07-01T05:58:05Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDQwMTUzNDgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg0NDkyOQ==", "fields": {"created_at": "2018-07-01T08:11:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NTgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzA1OQ==", "fields": {"created_at": "2018-07-02T02:09:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTE4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzA3MQ==", "fields": {"created_at": "2018-07-02T02:10:13Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzE0MA==", "fields": {"created_at": "2018-07-02T02:13:44Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzMwNw==", "fields": {"created_at": "2018-07-02T02:23:07Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg2NzQyNA==", "fields": {"created_at": "2018-07-02T08:54:49Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDQwMTUzNDgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTgxNDA2Ng==", "fields": {"created_at": "2018-06-29T17:54:50Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMjkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk2NDI3NQ==", "fields": {"created_at": "2018-07-03T21:59:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0NzI0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NTYwMA==", "fields": {"created_at": "2018-07-04T06:06:51Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNzQ3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NTYyMQ==", "fields": {"created_at": "2018-07-04T06:07:26Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk0MjI2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NTYyNQ==", "fields": {"created_at": "2018-07-04T06:07:34Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDA2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NzQ3Mg==", "fields": {"created_at": "2018-07-04T07:04:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDAyMzk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4MzgxNA==", "fields": {"created_at": "2018-07-04T09:10:14Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "raduklb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE4NTA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk4NDYzOA==", "fields": {"created_at": "2018-07-04T09:25:07Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQwNjAzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk5ODI5Mw==", "fields": {"created_at": "2018-07-04T14:10:28Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkzNDY5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjA1Mjk2Nw==", "fields": {"created_at": "2018-07-05T16:13:49Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDM5NTk0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjA5NTg5Mg==", "fields": {"created_at": "2018-07-06T12:34:32Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA2NA==", "fields": {"created_at": "2018-07-04T17:19:00Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzcxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA2NQ==", "fields": {"created_at": "2018-07-04T17:19:02Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzU3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA2OQ==", "fields": {"created_at": "2018-07-04T17:19:05Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTkzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA3MQ==", "fields": {"created_at": "2018-07-04T17:19:08Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0MzU1NA==", "fields": {"created_at": "2018-07-08T13:09:12Z", "content": "HOORAY", "giver": "Makman2", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQwMzA3MzQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0MzU1NQ==", "fields": {"created_at": "2018-07-08T13:09:14Z", "content": "LAUGH", "giver": "Makman2", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQwMzA3MzQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0NDQ4OA==", "fields": {"created_at": "2018-07-08T14:33:26Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MTU3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE0ODAyMg==", "fields": {"created_at": "2018-07-08T19:19:33Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0NDM1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE5MDA3Ng==", "fields": {"created_at": "2018-07-09T17:06:37Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3NzE3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0MA==", "fields": {"created_at": "2018-07-07T07:58:59Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDY2OTI2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0MQ==", "fields": {"created_at": "2018-07-07T07:59:03Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0Mg==", "fields": {"created_at": "2018-07-07T07:59:06Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0NA==", "fields": {"created_at": "2018-07-07T07:59:08Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyODM5Mg==", "fields": {"created_at": "2018-07-07T09:45:40Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTkwMjYwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyOTUyNw==", "fields": {"created_at": "2018-07-07T11:36:22Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDAyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjAyOA==", "fields": {"created_at": "2018-07-07T15:23:10Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjE4NA==", "fields": {"created_at": "2018-07-07T15:36:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI3MDUzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjE4OA==", "fields": {"created_at": "2018-07-07T15:37:05Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTkwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjMwMA==", "fields": {"created_at": "2018-07-07T15:44:55Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTE3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI2MzkwMg==", "fields": {"created_at": "2018-07-10T20:29:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3MDU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI2NDAxMQ==", "fields": {"created_at": "2018-07-10T20:30:51Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2ODEyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI3ODYzNQ==", "fields": {"created_at": "2018-07-11T04:13:07Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNDAwMTU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI5NTAxNA==", "fields": {"created_at": "2018-07-11T10:50:11Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI5NTAxOQ==", "fields": {"created_at": "2018-07-11T10:50:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMDY4Nw==", "fields": {"created_at": "2018-07-10T07:15:58Z", "content": "THUMBS_DOWN", "giver": "ksdme", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMTQ0NQ==", "fields": {"created_at": "2018-07-10T07:34:45Z", "content": "THUMBS_DOWN", "giver": "palash25", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzA2Ng==", "fields": {"created_at": "2018-07-10T08:10:17Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzk3Mg==", "fields": {"created_at": "2018-07-10T08:27:49Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjM2NzMxNg==", "fields": {"created_at": "2018-07-12T13:41:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjAzNjY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjM4MzExMA==", "fields": {"created_at": "2018-07-12T17:41:07Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODc2MDM3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjQxNTUxMA==", "fields": {"created_at": "2018-07-13T08:57:37Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjUzNzA4Mg==", "fields": {"created_at": "2018-07-17T01:05:11Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgwMTI0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjUzNzA4NQ==", "fields": {"created_at": "2018-07-17T01:05:15Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5OTQzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0NTE4Ng==", "fields": {"created_at": "2018-07-18T18:08:43Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MDYxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0NTQwMw==", "fields": {"created_at": "2018-07-18T18:12:25Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "nvzard", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzE0ODE3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0OTY4OQ==", "fields": {"created_at": "2018-07-18T19:32:47Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0OTY5MQ==", "fields": {"created_at": "2018-07-18T19:32:53Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTU0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0OTYwNg==", "fields": {"created_at": "2018-07-18T19:31:11Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTI2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2ODEzNQ==", "fields": {"created_at": "2018-07-19T05:08:35Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "raduklb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE4NTA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2ODEzNw==", "fields": {"created_at": "2018-07-19T05:08:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTE5ODAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2ODM3NA==", "fields": {"created_at": "2018-07-19T05:18:10Z", "content": "THUMBS_UP", "giver": "JoeSiew", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2OTE0OQ==", "fields": {"created_at": "2018-07-19T05:50:30Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjYwOTQzMg==", "fields": {"created_at": "2018-07-18T07:14:31Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2NTg1MQ==", "fields": {"created_at": "2018-07-20T18:20:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyMjc1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2ODE5NA==", "fields": {"created_at": "2018-07-20T19:11:13Z", "content": "LAUGH", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2ODIwNA==", "fields": {"created_at": "2018-07-20T19:11:21Z", "content": "HOORAY", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4MDkzOQ==", "fields": {"created_at": "2018-07-21T06:34:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4MzY2Ng==", "fields": {"created_at": "2018-07-21T11:09:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjYzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NTIwNA==", "fields": {"created_at": "2018-07-21T13:25:56Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTM0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NjQyOA==", "fields": {"created_at": "2018-07-21T15:10:03Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NjQzMQ==", "fields": {"created_at": "2018-07-21T15:10:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTk4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NDAzNQ==", "fields": {"created_at": "2018-07-22T04:28:56Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NDAzNg==", "fields": {"created_at": "2018-07-22T04:29:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NTE3Mg==", "fields": {"created_at": "2018-07-22T06:48:32Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDQwNjgxMTM5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NTY0Nw==", "fields": {"created_at": "2018-07-22T07:49:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDQwNjg0NzU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5ODMwOQ==", "fields": {"created_at": "2018-07-22T11:48:10Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5ODQxNQ==", "fields": {"created_at": "2018-07-22T11:57:51Z", "content": "CONFUSED", "giver": "li-boxuan", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjcxNzM3NA==", "fields": {"created_at": "2018-07-19T21:00:26Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg4ODk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjczMDg1MA==", "fields": {"created_at": "2018-07-20T05:24:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2Nzc2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg0NjU4OA==", "fields": {"created_at": "2018-07-23T16:58:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1MDg2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg1MTQxNg==", "fields": {"created_at": "2018-07-23T18:25:47Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg3MjE4OA==", "fields": {"created_at": "2018-07-24T04:25:21Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTIwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxNTg1MQ==", "fields": {"created_at": "2018-07-23T07:04:40Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyMzkzMA==", "fields": {"created_at": "2018-07-23T09:54:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMDQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyNDUxNg==", "fields": {"created_at": "2018-07-23T10:06:21Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyNDgyMg==", "fields": {"created_at": "2018-07-23T10:12:57Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDM5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgzMTcyMw==", "fields": {"created_at": "2018-07-23T12:55:35Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgzNDgyMQ==", "fields": {"created_at": "2018-07-23T13:50:33Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5MTAxOQ==", "fields": {"created_at": "2018-07-25T23:03:15Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTQwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5MTAyMg==", "fields": {"created_at": "2018-07-25T23:03:20Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzA3NjY5NA==", "fields": {"created_at": "2018-07-27T11:33:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2ODEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAxNTAyMw==", "fields": {"created_at": "2018-07-26T10:45:40Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM5OTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAyNDkzNQ==", "fields": {"created_at": "2018-07-26T14:00:42Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjE1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAyNzY4NA==", "fields": {"created_at": "2018-07-26T14:42:24Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQwODA5NzgyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE1OTc2OA==", "fields": {"created_at": "2018-07-30T11:22:18Z", "content": "THUMBS_UP", "giver": "gutsytechster", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODgyMDU2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDQxOQ==", "fields": {"created_at": "2018-07-30T11:39:09Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDQwODY5MTkwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDY0MA==", "fields": {"created_at": "2018-07-30T11:44:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NjI3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDgxMQ==", "fields": {"created_at": "2018-07-30T11:48:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDgyMA==", "fields": {"created_at": "2018-07-30T11:48:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDk5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MTUzMg==", "fields": {"created_at": "2018-07-30T12:04:58Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTU0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MTcxNA==", "fields": {"created_at": "2018-07-30T12:09:00Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTEzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2NDkxNw==", "fields": {"created_at": "2018-07-30T13:14:31Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2NDkyMQ==", "fields": {"created_at": "2018-07-30T13:14:35Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2Nzg2OA==", "fields": {"created_at": "2018-07-30T14:02:59Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODY3NTIxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE3MDY5OA==", "fields": {"created_at": "2018-07-30T14:43:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE3MDc4OA==", "fields": {"created_at": "2018-07-30T14:45:20Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyMjkxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE3NzIzMA==", "fields": {"created_at": "2018-07-30T16:26:35Z", "content": "LAUGH", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODkyNDA0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE5OTYwMA==", "fields": {"created_at": "2018-07-31T00:53:39Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODkxNTY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMDgwMA==", "fields": {"created_at": "2018-07-28T02:31:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczMjE2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExNzkxMQ==", "fields": {"created_at": "2018-07-28T14:31:32Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NDM5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjQ5OA==", "fields": {"created_at": "2018-07-29T05:05:47Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDc2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjc5NQ==", "fields": {"created_at": "2018-07-29T05:49:39Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "HemabhKamboj", "review": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjk2NQ==", "fields": {"created_at": "2018-07-29T06:14:20Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyODA1MA==", "fields": {"created_at": "2018-07-29T08:23:21Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "HemabhKamboj", "review": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyODM2NQ==", "fields": {"created_at": "2018-07-29T08:53:03Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1ODMxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyODUxNg==", "fields": {"created_at": "2018-07-29T09:09:17Z", "content": "LAUGH", "giver": "kriti21", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODY2MjgwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyOTAxMg==", "fields": {"created_at": "2018-07-29T09:53:42Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMDc2Mw==", "fields": {"created_at": "2018-07-29T12:28:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDk0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMDgzMA==", "fields": {"created_at": "2018-07-29T12:37:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTMwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzNjUxNw==", "fields": {"created_at": "2018-07-29T19:52:37Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI1OTI0Mw==", "fields": {"created_at": "2018-07-31T21:56:51Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTgwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI1OTIzNw==", "fields": {"created_at": "2018-07-31T21:56:46Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTk5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI3NTYwMA==", "fields": {"created_at": "2018-08-01T07:43:01Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "nvzard", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc3NDQ5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI3NTYwNg==", "fields": {"created_at": "2018-08-01T07:43:07Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nvzard", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc3NDQ5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI4MjU1NQ==", "fields": {"created_at": "2018-08-01T09:53:38Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc4ODk4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI5MTg4Mw==", "fields": {"created_at": "2018-08-01T13:13:43Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NDk5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI5ODkzOA==", "fields": {"created_at": "2018-08-01T14:53:39Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjcyNzAwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzIyOTAzNg==", "fields": {"created_at": "2018-07-31T13:29:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjQ5NTUxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzIyOTg2NQ==", "fields": {"created_at": "2018-07-31T13:42:30Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3ODk1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzM5NzA1Nw==", "fields": {"created_at": "2018-08-03T05:37:50Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MjA3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODQ5NQ==", "fields": {"created_at": "2018-08-04T08:03:02Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDQxMDEzNjQwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODUwNw==", "fields": {"created_at": "2018-08-04T08:03:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDQxMDEzNjE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODUxMA==", "fields": {"created_at": "2018-08-04T08:03:45Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMDEwOTMzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODUyNA==", "fields": {"created_at": "2018-08-04T08:05:39Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMxMTU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODUyOQ==", "fields": {"created_at": "2018-08-04T08:06:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA3MzYxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MDc4MQ==", "fields": {"created_at": "2018-08-04T12:00:39Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjg5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MTMxOA==", "fields": {"created_at": "2018-08-04T12:45:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNzg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MjEwNg==", "fields": {"created_at": "2018-08-04T13:52:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NDY5OA==", "fields": {"created_at": "2018-08-04T17:10:31Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU5Njc5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NjYzMQ==", "fields": {"created_at": "2018-08-04T19:52:13Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNDg2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NjYzMw==", "fields": {"created_at": "2018-08-04T19:52:18Z", "content": "THUMBS_DOWN", "giver": "nvzard", "receiver": "nvzard", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNzkxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2MTg1Mg==", "fields": {"created_at": "2018-08-05T06:27:41Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyMjgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2MzUzMQ==", "fields": {"created_at": "2018-08-05T09:24:11Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2MzUzNA==", "fields": {"created_at": "2018-08-05T09:24:18Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NTYwMw==", "fields": {"created_at": "2018-08-05T12:50:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMDQ5MTA2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NjM1Mw==", "fields": {"created_at": "2018-08-05T13:51:06Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjkyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NjYzMA==", "fields": {"created_at": "2018-08-05T14:09:47Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMDUyMTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2Nzg0NA==", "fields": {"created_at": "2018-08-05T15:43:20Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2Nzg1NA==", "fields": {"created_at": "2018-08-05T15:44:01Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NzgzOA==", "fields": {"created_at": "2018-08-05T15:42:57Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NzgzOQ==", "fields": {"created_at": "2018-08-05T15:43:09Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDM1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4MTAyMw==", "fields": {"created_at": "2018-08-06T06:12:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2MDE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4NDc1MA==", "fields": {"created_at": "2018-08-06T07:54:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMDA0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4NTE0Ng==", "fields": {"created_at": "2018-08-06T08:03:06Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMDYxNjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4NTkzMQ==", "fields": {"created_at": "2018-08-06T08:19:07Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ5NDg1MQ==", "fields": {"created_at": "2018-08-06T11:33:29Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gaocegege", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2OTAxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQxODc5OQ==", "fields": {"created_at": "2018-08-03T14:16:34Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU0MTM5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzU0MDIwMA==", "fields": {"created_at": "2018-08-07T06:00:22Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjI0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzU0MDIyOA==", "fields": {"created_at": "2018-08-07T06:01:04Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MDI2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzU0MDM0Mw==", "fields": {"created_at": "2018-08-07T06:04:06Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUxMDE4Nw==", "fields": {"created_at": "2018-08-06T16:06:25Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUxMTg4NA==", "fields": {"created_at": "2018-08-06T16:36:47Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyMDM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUyNzAxOA==", "fields": {"created_at": "2018-08-06T21:48:44Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTA0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUyNzIyNw==", "fields": {"created_at": "2018-08-06T21:53:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUzODY0OA==", "fields": {"created_at": "2018-08-07T04:59:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAzOTExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUzOTkxNQ==", "fields": {"created_at": "2018-08-07T05:50:37Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0NDM1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY2OTk3OQ==", "fields": {"created_at": "2018-08-09T05:34:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMzE2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3MDAwOQ==", "fields": {"created_at": "2018-08-09T05:35:58Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyOTUxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3MDE2MQ==", "fields": {"created_at": "2018-08-09T05:41:10Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwMzIwOTMyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3MDE4Mw==", "fields": {"created_at": "2018-08-09T05:42:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDQwMzIwODY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3ODI1MQ==", "fields": {"created_at": "2018-08-09T08:46:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg1MDg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4MjA4NA==", "fields": {"created_at": "2018-08-09T09:52:40Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODgwNTYyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4MzcyMA==", "fields": {"created_at": "2018-08-09T10:24:51Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0ODc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4MzcyNw==", "fields": {"created_at": "2018-08-09T10:24:55Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0ODc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4NzE1MQ==", "fields": {"created_at": "2018-08-09T11:46:09Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0Nzg0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4NzI0OQ==", "fields": {"created_at": "2018-08-09T11:47:51Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg1MDI0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4ODY1MQ==", "fields": {"created_at": "2018-08-09T12:18:21Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg5OTE0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4ODY1Nw==", "fields": {"created_at": "2018-08-09T12:18:26Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0OTQ3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4ODYzNg==", "fields": {"created_at": "2018-08-09T12:18:06Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg3OTc2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzYzMjUyOQ==", "fields": {"created_at": "2018-08-08T14:59:16Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjkyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc0MTcyMw==", "fields": {"created_at": "2018-08-10T09:13:44Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjY3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc0MTcyNw==", "fields": {"created_at": "2018-08-10T09:13:48Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjYzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc0MjI4Mg==", "fields": {"created_at": "2018-08-10T09:25:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwODgwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc1MjkyNQ==", "fields": {"created_at": "2018-08-10T13:30:01Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzIzMQ==", "fields": {"created_at": "2018-08-11T04:52:28Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNjMzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzUwNA==", "fields": {"created_at": "2018-08-11T05:30:01Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1MA==", "fields": {"created_at": "2018-08-11T15:58:34Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTMzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1Mw==", "fields": {"created_at": "2018-08-11T15:58:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MDA4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1Nw==", "fields": {"created_at": "2018-08-11T15:59:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMTA4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1OQ==", "fields": {"created_at": "2018-08-11T15:59:08Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTY4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE2MQ==", "fields": {"created_at": "2018-08-11T15:59:16Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMjQyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzcwMTAxMw==", "fields": {"created_at": "2018-08-09T15:33:48Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODk2ODExOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzcwNDIwNw==", "fields": {"created_at": "2018-08-09T16:24:54Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDQxMTc3MjMxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzczNTc3Mw==", "fields": {"created_at": "2018-08-10T07:05:25Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTExMzEyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzczODAyMw==", "fields": {"created_at": "2018-08-10T07:55:39Z", "content": "HEART", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NzMyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzczOTE3Mw==", "fields": {"created_at": "2018-08-10T08:21:48Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjQ4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDc0MA==", "fields": {"created_at": "2018-08-12T11:34:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDc0Mg==", "fields": {"created_at": "2018-08-12T11:35:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTExNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDczMw==", "fields": {"created_at": "2018-08-12T11:34:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDczNg==", "fields": {"created_at": "2018-08-12T11:34:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDg5NQ==", "fields": {"created_at": "2018-08-12T11:47:30Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTk3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzk0NjQ0Mg==", "fields": {"created_at": "2018-08-15T09:41:20Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMzA0MzM5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzk1OTc2NQ==", "fields": {"created_at": "2018-08-15T14:40:02Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDQxMzEzMTE2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODA2NDU0MA==", "fields": {"created_at": "2018-08-17T08:39:15Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDQxMzc3NDg0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODA2NDgwNA==", "fields": {"created_at": "2018-08-17T08:44:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDQxMzc3NDg0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODEwODM5Mw==", "fields": {"created_at": "2018-08-18T06:50:03Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxNDAxMjMxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODEwODQxMw==", "fields": {"created_at": "2018-08-18T06:53:16Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "shreyans800755", "review": "MDEyOklzc3VlQ29tbWVudDQxMzk5OTEwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODExMDE5Mg==", "fields": {"created_at": "2018-08-18T10:00:34Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "Akhelesh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA3MDEwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODExNDgxMw==", "fields": {"created_at": "2018-08-18T16:18:55Z", "content": "LAUGH", "giver": "Akhelesh", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA4MDA4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODQ2NDMwNw==", "fields": {"created_at": "2018-08-25T12:41:00Z", "content": "THUMBS_UP", "giver": "Dhiraj240", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDQxNTk0OTEyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgwNzUwNg==", "fields": {"created_at": "2018-09-01T12:59:24Z", "content": "LAUGH", "giver": "mach64", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxNzg1ODA0Ng=="}}]