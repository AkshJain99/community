[{"model": "meta_review.participant", "pk": "0x48piraj", "fields": {"name": "Piyush Raj", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-11-27T07:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "123vivekr", "fields": {"name": "Vivek R", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2018-09-16T17:22:06Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AMR-KELEG", "fields": {"name": "Amr Mohamed ", "score": 0.35000000000000003, "rank": 132, "trend": -2, "last_active_at": "2017-08-07T14:56:27Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10308938753548198, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AbdealiJK", "fields": {"name": "AbdealiJK", "score": 0.14909642631009062, "rank": 185, "trend": -1, "last_active_at": "2018-08-13T04:28:08Z", "pos_in": 1, "weighted_pos_in": 0.14909642631009062, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10131604754579229, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AdeshAtole", "fields": {"name": "Adesh Atole", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2018-09-07T12:54:47Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Adrianzatreanu", "fields": {"name": "Zatreanu Adrian-Gabriel", "score": 2.925239107332622, "rank": 56, "trend": 0, "last_active_at": "2017-08-24T14:10:44Z", "pos_in": 10, "weighted_pos_in": 2.5752391073326217, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12582056353285098, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Akhelesh", "fields": {"name": null, "score": 0.15788013766399495, "rank": 177, "trend": -1, "last_active_at": "2018-08-18T16:18:55Z", "pos_in": 1, "weighted_pos_in": 0.15788013766399495, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1013935797982838, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AkshJain99", "fields": {"name": "Akshit Jain", "score": 0.5890604041627538, "rank": 109, "trend": 85, "last_active_at": "2018-10-10T19:23:46Z", "pos_in": 3, "weighted_pos_in": 0.4390604041627539, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10519953105790397, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Alexander-N", "fields": {"name": null, "score": 0.9273113708820407, "rank": 99, "trend": 0, "last_active_at": "2017-12-27T23:33:49Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10818521197346767, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Arsfiqball", "fields": {"name": "Iqbal Mohammad Abdul Ghoni", "score": 4.094314558979797, "rank": 48, "trend": 0, "last_active_at": "2017-07-18T16:10:12Z", "pos_in": 19, "weighted_pos_in": 4.0443145589797975, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13613978389958453, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Asalle", "fields": {"name": "Asalle Mirzaieva", "score": 1.5429330499468639, "rank": 80, "trend": 0, "last_active_at": "2017-11-21T07:54:10Z", "pos_in": 2, "weighted_pos_in": 0.4429330499468638, "pos_out": 22, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11361919466454011, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "AsnelChristian", "fields": {"name": "Christian Asnel Ngoulla Sob", "score": 4.504303931987234, "rank": 44, "trend": 0, "last_active_at": "2017-07-21T06:52:13Z", "pos_in": 15, "weighted_pos_in": 3.754303931987234, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1397586869242967, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CCInCharge", "fields": {"name": "Charles Chen", "score": 0.20095642933049948, "rank": 165, "trend": -1, "last_active_at": "2018-06-09T22:24:25Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10177380653699604, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "CleanCut", "fields": {"name": "Nathan Stocks", "score": 1.0, "rank": 97, "trend": 0, "last_active_at": "2017-04-09T08:02:04Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10882682152994852, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Crphang", "fields": {"name": "Phang Chun Rong", "score": 0.9773113708820408, "rank": 98, "trend": 0, "last_active_at": "2018-04-22T03:43:34Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1086265530499651, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Daronion", "fields": {"name": null, "score": 0.10177179133285873, "rank": 192, "trend": -1, "last_active_at": "2018-10-01T08:37:21Z", "pos_in": 1, "weighted_pos_in": 0.10177179133285873, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10089832143887831, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Dhiraj240", "fields": {"name": "Dhiraj Sharma", "score": 0.4074937535900707, "rank": 125, "trend": -1, "last_active_at": "2018-10-07T15:28:09Z", "pos_in": 2, "weighted_pos_in": 0.35749375359007063, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10359687463750837, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Elgayar", "fields": {"name": "Mostafa Elgayar", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2016-12-31T09:57:53Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "EverWinter23", "fields": {"name": "rishabh", "score": 1.3492029755579165, "rank": 83, "trend": 0, "last_active_at": "2018-06-21T15:48:01Z", "pos_in": 3, "weighted_pos_in": 1.3492029755579165, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11190917387292522, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "FosterSamuel", "fields": {"name": "Samuel Foster", "score": 0.15000000000000002, "rank": 184, "trend": -1, "last_active_at": "2017-08-12T15:45:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10132402322949229, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Grox-Ni", "fields": {"name": "GroxNi", "score": 0.4250265674814016, "rank": 122, "trend": -1, "last_active_at": "2017-12-18T09:18:14Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10375163365664496, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HarshKhatore", "fields": {"name": "Harsh Khatore", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-11-04T01:32:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Harshish", "fields": {"name": "Harshish Yadav", "score": 0.3468650371944737, "rank": 133, "trend": -2, "last_active_at": "2017-02-28T16:55:27Z", "pos_in": 1, "weighted_pos_in": 0.1468650371944737, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10306171577829458, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HemabhKamboj", "fields": {"name": "Hemabh Kamboj", "score": 0.3185765777593346, "rank": 134, "trend": -1, "last_active_at": "2018-07-29T08:23:21Z", "pos_in": 2, "weighted_pos_in": 0.3185765777593346, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10281201859550342, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HitRam", "fields": {"name": "Hitesh Ramchandani", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-01-23T17:54:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Hsankesara", "fields": {"name": "Heet Sankesara", "score": 0.15000000000000002, "rank": 184, "trend": -1, "last_active_at": "2017-07-18T08:34:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10132402322949229, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "HyungKun", "fields": {"name": "HyungKun Jung", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-03-31T12:39:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IamRaviTejaG", "fields": {"name": "Ravi Teja Gannavarapu", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-10-27T15:46:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "IpshitaC", "fields": {"name": "Ipshita Chatterjee", "score": 1.5447396386822505, "rank": 79, "trend": 0, "last_active_at": "2018-06-07T17:54:23Z", "pos_in": 6, "weighted_pos_in": 1.0447396386822505, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11363514110088539, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JoeSiew", "fields": {"name": null, "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-07-19T05:18:10Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnMoutafis", "fields": {"name": "John Moutafis", "score": 0.15000000000000002, "rank": 184, "trend": -1, "last_active_at": "2017-07-17T12:05:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10132402322949229, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "JohnS-01", "fields": {"name": null, "score": 0.27502656748140175, "rank": 140, "trend": -1, "last_active_at": "2017-05-08T19:17:17Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10242761042715268, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Kagamihime", "fields": {"name": "Eisha Chen-yen-su", "score": 0.7311902231668423, "rank": 106, "trend": 0, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 3, "weighted_pos_in": 0.5811902231668423, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10645408560433695, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "KevinHock", "fields": {"name": "", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-04-11T21:42:17Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LappleApple", "fields": {"name": "Lauri Apple", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-06-08T17:44:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LeafyLi", "fields": {"name": null, "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-01-15T18:18:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "LenaAn", "fields": {"name": null, "score": 0.9273113708820407, "rank": 99, "trend": 0, "last_active_at": "2018-02-26T15:56:46Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10818521197346767, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Logan1x", "fields": {"name": "Khushal Sharma", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-09-17T10:03:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Lyrenhex", "fields": {"name": "Damian Heaton", "score": 0.20425079702444154, "rank": 164, "trend": -1, "last_active_at": "2017-11-28T20:58:50Z", "pos_in": 1, "weighted_pos_in": 0.20425079702444154, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10180288533268449, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MacBox7", "fields": {"name": "Ankit Joshi", "score": 6.207332624867159, "rank": 31, "trend": 0, "last_active_at": "2018-07-29T05:49:39Z", "pos_in": 15, "weighted_pos_in": 5.707332624867159, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15479101725672928, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mah1ndra", "fields": {"name": "Mahendra Thanniru", "score": 0.2, "rank": 167, "trend": -1, "last_active_at": "2018-09-03T09:41:31Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1017653643059897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Makman2", "fields": {"name": "Mischa Kr\u00fcger", "score": 92.47026547474641, "rank": 2, "trend": 0, "last_active_at": "2018-10-06T01:44:10Z", "pos_in": 381, "weighted_pos_in": 86.27026547474642, "pos_out": 120, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.9162185301725465, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Man-Jain", "fields": {"name": "Manank Patni", "score": 1.0, "rank": 97, "trend": 0, "last_active_at": "2018-09-19T23:30:27Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10882682152994852, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mariatta", "fields": {"name": "", "score": 1.0757173219978733, "rank": 95, "trend": 0, "last_active_at": "2017-12-12T08:00:26Z", "pos_in": 8, "weighted_pos_in": 1.0257173219978732, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1094951648179494, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MariosPanag", "fields": {"name": "Marios Panagopoulos", "score": 0.5500531349628035, "rank": 111, "trend": -1, "last_active_at": "2017-05-07T21:48:37Z", "pos_in": 2, "weighted_pos_in": 0.5500531349628035, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10485522085430536, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "MikeTheReader", "fields": {"name": "Mike Lundin", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-05-24T17:18:50Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mixih", "fields": {"name": "mixih", "score": 13.817640807651394, "rank": 15, "trend": 0, "last_active_at": "2017-12-29T20:29:44Z", "pos_in": 43, "weighted_pos_in": 13.421466524973392, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.22196584937407254, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Mohit17067", "fields": {"name": "Mohit Juneja", "score": 0.4214665249734319, "rank": 123, "trend": -1, "last_active_at": "2018-04-10T05:39:26Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10372020979678807, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Monal5031", "fields": {"name": "Monal Shadi", "score": 4.19867162592986, "rank": 47, "trend": 0, "last_active_at": "2018-04-10T12:56:57Z", "pos_in": 5, "weighted_pos_in": 3.4486716259298604, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13706092510494164, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Naveenaidu", "fields": {"name": "Naveen Naidu", "score": 0.3, "rank": 138, "trend": -1, "last_active_at": "2018-10-07T15:28:09Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10264804645898457, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nickatak", "fields": {"name": "", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-02-14T19:34:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "NiklasMM", "fields": {"name": "Niklas", "score": 11.478055260361305, "rank": 16, "trend": 0, "last_active_at": "2018-06-13T23:49:49Z", "pos_in": 41, "weighted_pos_in": 10.728055260361305, "pos_out": 15, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.201314745294096, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nosferatul", "fields": {"name": "Alexandru-Sorin Maxim", "score": 3.1732199787460154, "rank": 54, "trend": 0, "last_active_at": "2017-08-28T19:37:32Z", "pos_in": 6, "weighted_pos_in": 2.373219978746015, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1280094464276581, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Nshul", "fields": {"name": "Anshul Mittal", "score": 1.6474495217853333, "rank": 77, "trend": 0, "last_active_at": "2018-04-18T22:34:33Z", "pos_in": 4, "weighted_pos_in": 1.5974495217853333, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11454174290839818, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PierceAndy", "fields": {"name": "Pierce Fu", "score": 0.5020722635494147, "rank": 115, "trend": -1, "last_active_at": "2017-04-04T04:11:31Z", "pos_in": 2, "weighted_pos_in": 0.3520722635494147, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10443170226548797, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PlentyMore", "fields": {"name": "PlentyMore", "score": 0.15929861849096674, "rank": 176, "trend": -1, "last_active_at": "2017-11-09T17:41:24Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10140610047538713, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Prabhat-IIT", "fields": {"name": "Prabhat", "score": 0.3758235919234855, "rank": 129, "trend": -2, "last_active_at": "2018-01-15T18:09:46Z", "pos_in": 3, "weighted_pos_in": 0.32582359192348553, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10331732777265282, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Pradhvan", "fields": {"name": "Pradhvan Bisht ", "score": 0.18837538892599412, "rank": 169, "trend": -1, "last_active_at": "2018-03-04T17:04:18Z", "pos_in": 1, "weighted_pos_in": 0.18837538892599412, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1016627559386844, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "PrajwalM2212", "fields": {"name": "PRAJWAL M", "score": 0.20044316594365302, "rank": 166, "trend": -1, "last_active_at": "2018-09-16T17:22:06Z", "pos_in": 1, "weighted_pos_in": 0.10044316594365302, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10176927605268249, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RJ722", "fields": {"name": "Rahul Jha", "score": 5.123007438894791, "rank": 39, "trend": 0, "last_active_at": "2018-08-14T09:55:13Z", "pos_in": 8, "weighted_pos_in": 2.9730074388947907, "pos_out": 63, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14521987235972295, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Rahmeen14", "fields": {"name": "Rahmeen Habib", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-12-18T10:49:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RaiVaibhav", "fields": {"name": "Vaibhav Rai", "score": 15.36720197614105, "rank": 11, "trend": 0, "last_active_at": "2018-10-10T19:23:46Z", "pos_in": 30, "weighted_pos_in": 13.105531239203767, "pos_out": 96, "neg_in": 7, "weighted_neg_in": 3.038329263062721, "neg_out": 5, "offset": 0.5, "weight_factor": 0.2356435492580692, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "Raman1121", "fields": {"name": "Raman Dutt", "score": 0.18225292242295388, "rank": 171, "trend": -1, "last_active_at": "2017-09-02T18:12:11Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295388, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10160871401953897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "RohanVB", "fields": {"name": "Rohan", "score": 4.547077577045693, "rank": 43, "trend": 0, "last_active_at": "2017-04-28T16:22:19Z", "pos_in": 16, "weighted_pos_in": 3.9470775770456923, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14013624225541305, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "S2606", "fields": {"name": "Shagun Khemka", "score": 0.428427205100956, "rank": 121, "trend": -1, "last_active_at": "2017-07-20T07:39:17Z", "pos_in": 3, "weighted_pos_in": 0.378427205100956, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1037816504780008, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SanketDG", "fields": {"name": "Sanket Dasgupta", "score": 15.109723698193388, "rank": 12, "trend": 0, "last_active_at": "2018-02-27T08:55:23Z", "pos_in": 40, "weighted_pos_in": 13.159723698193389, "pos_out": 39, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2333708344507867, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Sanny26", "fields": {"name": "Santhoshini ", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-02-10T16:27:28Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shade5", "fields": {"name": "George Joseph", "score": 1.1057385759829967, "rank": 94, "trend": 0, "last_active_at": "2017-03-25T17:05:36Z", "pos_in": 2, "weighted_pos_in": 1.1057385759829967, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10976015706898133, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ShivamSinghania", "fields": {"name": "Shivam Singhania", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-01-18T22:12:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Shruti9520", "fields": {"name": "Shruti Singh", "score": 0.6628586609989368, "rank": 107, "trend": 0, "last_active_at": "2017-02-05T19:51:42Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10585093510021827, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SiddharthKumar02", "fields": {"name": "Siddharth Kumar", "score": 0.21285866099893672, "rank": 160, "trend": -1, "last_active_at": "2017-01-22T12:51:10Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10187886541174143, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Siddhartha1234", "fields": {"name": "Siddhartha Mishra", "score": 1.573379383634431, "rank": 78, "trend": 0, "last_active_at": "2017-04-13T15:21:34Z", "pos_in": 4, "weighted_pos_in": 1.4233793836344308, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11388793901824153, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Stropek", "fields": {"name": "Przemys\u0142aw Curzytek", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-09-05T12:13:36Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "SubbulakshmiRS", "fields": {"name": "R S Subbulakshmi", "score": 0.17364505844845868, "rank": 173, "trend": -1, "last_active_at": "2018-06-15T15:55:05Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10153273394048203, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Techievena", "fields": {"name": "Abinash Senapati", "score": 5.320563230605731, "rank": 37, "trend": 0, "last_active_at": "2017-12-07T11:28:19Z", "pos_in": 21, "weighted_pos_in": 4.370563230605731, "pos_out": 19, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1469636620753631, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "The-Compiler", "fields": {"name": "Florian Bruhin", "score": 0.15547290116896886, "rank": 178, "trend": -1, "last_active_at": "2018-05-13T15:15:13Z", "pos_in": 1, "weighted_pos_in": 0.15547290116896886, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10137233155136181, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Udayan12167", "fields": {"name": "Udayan Tandon", "score": 14.813496280552588, "rank": 13, "trend": 0, "last_active_at": "2017-07-19T19:08:09Z", "pos_in": 33, "weighted_pos_in": 14.817321997874586, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.10382571732199786, "neg_out": 0, "offset": 0.0, "weight_factor": 0.23075608790299387, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "UnimaginaryUnit", "fields": {"name": "Alexander Voronkov", "score": 0.10860786397449518, "rank": 189, "trend": -1, "last_active_at": "2017-12-03T07:10:37Z", "pos_in": 1, "weighted_pos_in": 0.10860786397449518, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1009586622320518, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Utkarsh1308", "fields": {"name": "Utkarsh Sharma", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2018-10-06T03:07:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vamshi99", "fields": {"name": "Vamshi Krishna", "score": 5.425398232898823, "rank": 36, "trend": 0, "last_active_at": "2018-08-12T07:18:21Z", "pos_in": 14, "weighted_pos_in": 4.663655406118802, "pos_out": 10, "neg_in": 1, "weighted_neg_in": 0.13825717321997855, "neg_out": 2, "offset": 0.0, "weight_factor": 0.14788902193069597, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Vedarth", "fields": {"name": "Vedarth Sharma", "score": 0.9273113708820407, "rank": 99, "trend": 0, "last_active_at": "2017-12-10T17:48:03Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10818521197346767, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Warewolf96", "fields": {"name": "Parth Verma", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-02-15T03:42:58Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Yashwanthv21", "fields": {"name": "Yashwanth Reddy", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-03-04T17:26:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "Zimmerman", "fields": {"name": "Martin Zimmerman", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-05-10T10:07:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aabhaas-vaish", "fields": {"name": "Aabhaas Vaish", "score": 1.364135156181499, "rank": 82, "trend": 0, "last_active_at": "2018-03-01T07:59:09Z", "pos_in": 2, "weighted_pos_in": 1.064135156181499, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11204097756634254, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aalind0", "fields": {"name": "Aalind Singh", "score": 0.26285866099893673, "rank": 143, "trend": -1, "last_active_at": "2017-02-08T17:34:24Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10232020648823886, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashraybhandar1", "fields": {"name": null, "score": 2.8158873538788507, "rank": 57, "trend": 0, "last_active_at": "2018-04-02T14:07:50Z", "pos_in": 7, "weighted_pos_in": 2.765887353878851, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1248553351211276, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aashutoshrathi", "fields": {"name": "Aashutosh Rathi", "score": 2.5315621679064773, "rank": 62, "trend": 0, "last_active_at": "2018-08-10T13:30:01Z", "pos_in": 8, "weighted_pos_in": 1.7315621679064774, "pos_out": 16, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12234564744808005, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "abeerzz", "fields": {"name": null, "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2018-09-08T03:00:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "abhsag24", "fields": {"name": "Abhay Raizada", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-01-29T06:17:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "acashmkj", "fields": {"name": "acash mkj", "score": 2.3260892667375135, "rank": 64, "trend": 0, "last_active_at": "2017-11-15T17:54:51Z", "pos_in": 3, "weighted_pos_in": 2.0760892667375135, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12053197482022085, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adhikasp", "fields": {"name": "Adhika Setya Pramudita", "score": 8.034112646121137, "rank": 23, "trend": 0, "last_active_at": "2018-07-23T04:23:31Z", "pos_in": 23, "weighted_pos_in": 5.80913921360254, "pos_out": 50, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1709156784788137, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adi23arora", "fields": {"name": "Aditya Arora", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-12-29T18:22:08Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aditya81070", "fields": {"name": "Aditya Agarwal", "score": 0.10077927804385615, "rank": 194, "trend": -1, "last_active_at": "2018-09-26T07:31:28Z", "pos_in": 1, "weighted_pos_in": 0.10077927804385615, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088956070121018, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adrienverge", "fields": {"name": "Adrien Verg\u00e9", "score": 1.0, "rank": 97, "trend": 0, "last_active_at": "2017-02-06T20:17:25Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10882682152994852, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "adtac", "fields": {"name": "Adhityaa Chandrasekar", "score": 5.435349951468151, "rank": 35, "trend": 0, "last_active_at": "2018-03-24T16:32:16Z", "pos_in": 16, "weighted_pos_in": 4.785349951468151, "pos_out": 13, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1479768639744237, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alisianoi", "fields": {"name": "Alexander Lisianoi", "score": 1.2738575982996783, "rank": 88, "trend": 0, "last_active_at": "2018-04-26T10:02:38Z", "pos_in": 7, "weighted_pos_in": 2.173857598299678, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11124411367476011, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "alphadose", "fields": {"name": "Anish Mukherjee", "score": 2.1046227417640813, "rank": 70, "trend": 0, "last_active_at": "2018-03-04T18:18:37Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11857712932942246, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amalrajan", "fields": {"name": "Amal Rajan", "score": 0.1528692879914984, "rank": 181, "trend": -1, "last_active_at": "2018-01-19T13:24:25Z", "pos_in": 1, "weighted_pos_in": 0.1028692879914984, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10134934992251127, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "amitsin6h", "fields": {"name": "Amit singh", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-11-15T15:53:07Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ananyaarun", "fields": {"name": "Ananya Arun", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2018-06-18T13:40:04Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anctartica", "fields": {"name": "", "score": 5.705951115834216, "rank": 33, "trend": 0, "last_active_at": "2018-08-13T15:35:19Z", "pos_in": 13, "weighted_pos_in": 5.411689691817212, "pos_out": 4, "neg_in": 1, "weighted_neg_in": 0.10573857598299678, "neg_out": 1, "offset": 0.0, "weight_factor": 0.15036541215807922, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "andrewda", "fields": {"name": "Andrew Dassonville", "score": 17.358182784272035, "rank": 7, "trend": 0, "last_active_at": "2018-09-03T16:14:52Z", "pos_in": 34, "weighted_pos_in": 15.008182784272032, "pos_out": 47, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.25321758152099405, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ankurg22", "fields": {"name": "Ankur Gupta", "score": 0.24373007438894745, "rank": 149, "trend": -1, "last_active_at": "2018-02-01T15:18:15Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10215136186811231, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "anshumanv", "fields": {"name": "Anshuman Verma", "score": 0.2239107332624866, "rank": 154, "trend": -1, "last_active_at": "2018-03-19T12:25:28Z", "pos_in": 1, "weighted_pos_in": 0.12391073326248658, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10197642008114788, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "aptrishu", "fields": {"name": "Rishav Kumar", "score": 4.235653560042503, "rank": 46, "trend": 0, "last_active_at": "2018-05-14T21:16:42Z", "pos_in": 11, "weighted_pos_in": 2.885653560042503, "pos_out": 27, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13738735803718624, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arjunsinghy96", "fields": {"name": "Arjun Singh Yadav", "score": 4.036928799149839, "rank": 49, "trend": 0, "last_active_at": "2017-04-28T06:55:34Z", "pos_in": 7, "weighted_pos_in": 3.686928799149839, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.135633250039205, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arnab1896", "fields": {"name": null, "score": 0.6147715196599357, "rank": 108, "trend": 0, "last_active_at": "2017-02-24T10:21:12Z", "pos_in": 2, "weighted_pos_in": 0.31477151965993566, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1054264784857335, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arpit7714", "fields": {"name": "ARPIT VARSHNEY", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-02-18T16:04:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arrayslayer", "fields": {"name": "Aditya Lahiri", "score": 0.26285866099893673, "rank": 143, "trend": -1, "last_active_at": "2017-06-27T11:07:04Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10232020648823886, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "arush0311", "fields": {"name": "Arush Goyal", "score": 2.241126461211477, "rank": 67, "trend": 0, "last_active_at": "2017-02-12T19:30:48Z", "pos_in": 3, "weighted_pos_in": 2.141126461211477, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1197820232991588, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ashwini0529", "fields": {"name": "Ashwini Purohit", "score": 0.3138150903294362, "rank": 136, "trend": -1, "last_active_at": "2017-12-16T06:15:38Z", "pos_in": 2, "weighted_pos_in": 0.3138150903294362, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10276998979574262, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "atb00ker", "fields": {"name": "Ajay Tripathi", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2018-09-10T12:15:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "attilanagy", "fields": {"name": "Attila Nagy", "score": 0.2841657810839528, "rank": 139, "trend": -1, "last_active_at": "2018-05-07T19:26:59Z", "pos_in": 2, "weighted_pos_in": 0.2841657810839528, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10250828063454648, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "atultherajput", "fields": {"name": "Atul Krishna", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-09-26T13:54:51Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "avirlrma", "fields": {"name": "Aviral Verma", "score": 0.18225292242295385, "rank": 172, "trend": -1, "last_active_at": "2017-12-14T11:27:06Z", "pos_in": 1, "weighted_pos_in": 0.18225292242295385, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10160871401953897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayan-b", "fields": {"name": "Ayan Banerjee", "score": 1.3190757862979074, "rank": 84, "trend": 0, "last_active_at": "2018-10-07T19:07:52Z", "pos_in": 3, "weighted_pos_in": 1.1190757862979073, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11164324655012814, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush1999", "fields": {"name": "Ayush Shridhar", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-08-03T10:15:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayush9398", "fields": {"name": "Ayush Mittal", "score": 0.4972901168969174, "rank": 116, "trend": -1, "last_active_at": "2018-02-15T08:16:08Z", "pos_in": 3, "weighted_pos_in": 0.520935175345376, "pos_out": 3, "neg_in": 1, "weighted_neg_in": 0.17364505844845868, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10438949111045633, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ayushin78", "fields": {"name": "Ayushi Negi", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-02-24T06:18:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bekicot", "fields": {"name": "Yana Agun Siswanto", "score": 0.2554729011689688, "rank": 146, "trend": -1, "last_active_at": "2018-06-23T05:39:31Z", "pos_in": 2, "weighted_pos_in": 1.1554729011689688, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10225501370435666, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bhavishyagopesh", "fields": {"name": "BHAVISHYA", "score": 0.5437300743889475, "rank": 112, "trend": -1, "last_active_at": "2017-12-29T11:09:57Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10479940832709687, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "bhawesh96", "fields": {"name": "Bhawesh Bhansali", "score": 0.11016991279128921, "rank": 188, "trend": -1, "last_active_at": "2018-10-03T05:13:03Z", "pos_in": 1, "weighted_pos_in": 0.11016991279128921, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10097245015817871, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "biscuitsnake", "fields": {"name": "biscuitsnake", "score": 0.15069075451647157, "rank": 183, "trend": -1, "last_active_at": "2018-05-01T03:13:16Z", "pos_in": 1, "weighted_pos_in": 0.15069075451647157, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10133012039633019, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "blazeu", "fields": {"name": "Surya Widi", "score": 31.197037310615755, "rank": 3, "trend": 0, "last_active_at": "2018-08-17T08:44:13Z", "pos_in": 87, "weighted_pos_in": 30.297037310615753, "pos_out": 38, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 1.0, "weight_factor": 0.3753706806039503, "modified_comments_after_meta_review": 2}}, {"model": "meta_review.participant", "pk": "cRAN-cg", "fields": {"name": "Chiranjeev Gupta", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-06-12T07:59:26Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chetasr", "fields": {"name": "Chetas Murali", "score": 0.10573857598299678, "rank": 190, "trend": -1, "last_active_at": "2018-02-23T11:18:05Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10093333553903282, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "chhabrabhishek", "fields": {"name": "Abhishek Chhabra", "score": 0.15382571732199785, "rank": 180, "trend": -1, "last_active_at": "2018-06-23T06:56:10Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10135779215351759, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "clarammdantas", "fields": {"name": "Clara Moraes Dantas", "score": 0.20956429330499465, "rank": 161, "trend": -1, "last_active_at": "2018-01-17T12:48:39Z", "pos_in": 1, "weighted_pos_in": 0.10956429330499463, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10184978661605298, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cornu-ammonis", "fields": {"name": "Andrew Jones", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-10-20T21:15:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "corona10", "fields": {"name": "Dong-hee Na", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2018-09-13T14:17:58Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cristianossd", "fields": {"name": "Cristiano Santos", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-10-19T23:32:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "cypher-naman", "fields": {"name": "Naman Sharma", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-07-25T12:56:23Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "d3db0t", "fields": {"name": "Shady Tantawy", "score": 0.5092986184909668, "rank": 114, "trend": -1, "last_active_at": "2017-03-17T07:27:27Z", "pos_in": 1, "weighted_pos_in": 0.15929861849096674, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10449548801086911, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damian1996", "fields": {"name": "Damian Stachura", "score": 0.39373007438894747, "rank": 127, "trend": -1, "last_active_at": "2018-04-17T22:34:07Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1034753850976046, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "damngamerz", "fields": {"name": "Saurav Singh", "score": 7.708395324123271, "rank": 24, "trend": 0, "last_active_at": "2018-06-08T18:36:00Z", "pos_in": 12, "weighted_pos_in": 5.208395324123271, "pos_out": 50, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16804062980832576, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "danes44", "fields": {"name": "Frume44", "score": 0.2561636556854405, "rank": 145, "trend": -1, "last_active_at": "2017-12-25T03:02:06Z", "pos_in": 1, "weighted_pos_in": 0.20616365568544046, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10226111087119458, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "devshiva619", "fields": {"name": "Devesh Verma", "score": 0.15000000000000002, "rank": 184, "trend": -1, "last_active_at": "2018-04-30T09:59:22Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10132402322949229, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dhishan", "fields": {"name": "Dhishan", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-01-06T22:08:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "diveshuttam", "fields": {"name": "Divesh Uttamchandani", "score": 0.4523379383634426, "rank": 119, "trend": -1, "last_active_at": "2018-01-25T20:00:07Z", "pos_in": 2, "weighted_pos_in": 0.3023379383634426, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10399270625315897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "djokester", "fields": {"name": "Samriddhi Sinha", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-04-11T22:55:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dob9601", "fields": {"name": "Daniel O'Brien", "score": 1.9791710945802308, "rank": 74, "trend": 0, "last_active_at": "2018-01-06T15:55:07Z", "pos_in": 5, "weighted_pos_in": 1.8791710945802307, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11746979002909255, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dorothykiz1", "fields": {"name": null, "score": 0.18225292242295388, "rank": 171, "trend": -1, "last_active_at": "2018-05-30T10:29:50Z", "pos_in": 2, "weighted_pos_in": 0.36450584484590776, "pos_out": 0, "neg_in": 1, "weighted_neg_in": 0.18225292242295388, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10160871401953897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "dracarys09", "fields": {"name": "Abhijeet Dubey", "score": 1.3006907545164714, "rank": 85, "trend": 0, "last_active_at": "2017-02-15T10:40:45Z", "pos_in": 3, "weighted_pos_in": 1.2506907545164714, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11148096515577098, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "etotientz", "fields": {"name": "Satrap Rathore", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-02-02T14:26:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "fatma-mohamed", "fields": {"name": "Fatma Mohamed", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2018-05-23T18:45:13Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "firesans", "fields": {"name": "Sanjana Gunna", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-02-28T02:00:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gabru-md", "fields": {"name": "Manish Devgan", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-11-14T05:24:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gaocegege", "fields": {"name": "Ce Gao", "score": 2.228895961472242, "rank": 68, "trend": 0, "last_active_at": "2018-08-06T11:33:29Z", "pos_in": 7, "weighted_pos_in": 1.8788959614722418, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11967406686073849, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gatesn", "fields": {"name": "Nicholas Gates", "score": 0.5619022316684372, "rank": 110, "trend": -1, "last_active_at": "2018-05-18T08:07:47Z", "pos_in": 3, "weighted_pos_in": 0.4119022316684372, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10495981071621709, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "girishramnani", "fields": {"name": "girish ramnani", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-05-03T17:41:30Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gkrishnan724", "fields": {"name": "GopalaKrishnan P", "score": 2.6393198724760856, "rank": 61, "trend": 0, "last_active_at": "2017-06-26T15:23:19Z", "pos_in": 8, "weighted_pos_in": 2.4393198724760854, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1232968054747929, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gokberksahin", "fields": {"name": "G\u00f6kberk \u015eahin", "score": 0.1286928799149839, "rank": 187, "trend": -1, "last_active_at": "2017-12-27T19:27:08Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10113594908318467, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gopalgoel19", "fields": {"name": "Gopal Goel", "score": 0.35000000000000003, "rank": 132, "trend": -2, "last_active_at": "2018-05-13T17:04:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10308938753548198, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "guilherme-p", "fields": {"name": "Guilherme Peixoto", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2018-03-14T19:24:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gureks", "fields": {"name": "Gurek Singh", "score": 1.2214665249734318, "rank": 89, "trend": 0, "last_active_at": "2017-11-12T12:23:52Z", "pos_in": 2, "weighted_pos_in": 1.2214665249734318, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11078166702074689, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gurpreetsingh00885", "fields": {"name": null, "score": 0.25, "rank": 148, "trend": -1, "last_active_at": "2017-09-26T18:48:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10220670538248713, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "gutsytechster", "fields": {"name": "Prashant Sharma", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-07-30T11:22:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "haeungun", "fields": {"name": "Haeun Kim", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2018-09-13T14:17:58Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshhx17", "fields": {"name": "Harsh Kumar Bhartiya", "score": 0.25, "rank": 148, "trend": -1, "last_active_at": "2018-06-22T06:05:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10220670538248713, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "harshit890", "fields": {"name": null, "score": 0.9273113708820407, "rank": 99, "trend": 0, "last_active_at": "2017-01-16T20:38:31Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10818521197346767, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "haxzie", "fields": {"name": "Musthaq Ahamad", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2018-10-07T19:07:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "hemangsk", "fields": {"name": "Hemang Kumar", "score": 11.372267743993602, "rank": 17, "trend": 0, "last_active_at": "2018-08-23T01:27:16Z", "pos_in": 33, "weighted_pos_in": 8.572267743993601, "pos_out": 56, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.20038097776702177, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "himanshu1603", "fields": {"name": "", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2018-02-22T18:31:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsavru", "fields": {"name": "Urvashi Verma", "score": 0.2605207226354941, "rank": 144, "trend": -1, "last_active_at": "2017-07-23T17:27:24Z", "pos_in": 2, "weighted_pos_in": 0.2105207226354941, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10229956992355672, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ihsraham", "fields": {"name": "Maharshi Mishra", "score": 0.3162592986184909, "rank": 135, "trend": -1, "last_active_at": "2017-11-18T19:16:03Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10279156438609212, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "impmihai", "fields": {"name": "Mihai Ionut", "score": 2.0, "rank": 73, "trend": 0, "last_active_at": "2017-04-29T21:12:36Z", "pos_in": 2, "weighted_pos_in": 2.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11765364305989703, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "incorrectusername", "fields": {"name": "Yogesh Gupta", "score": 0.4, "rank": 126, "trend": -1, "last_active_at": "2017-08-13T02:03:39Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10353072861197941, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "indmind", "fields": {"name": "Indmind", "score": 0.3750265674814016, "rank": 130, "trend": -2, "last_active_at": "2017-12-07T10:17:48Z", "pos_in": 1, "weighted_pos_in": 0.2750265674814016, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10331029258014753, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ishanSrt", "fields": {"name": "Ishan Srivastava", "score": 7.649628568155059, "rank": 25, "trend": 0, "last_active_at": "2018-10-01T23:30:30Z", "pos_in": 31, "weighted_pos_in": 7.4648251675174375, "pos_out": 8, "neg_in": 2, "weighted_neg_in": 0.4151965993623793, "neg_out": 1, "offset": 0.0, "weight_factor": 0.1675219061415003, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jack17529", "fields": {"name": "JACK_1729", "score": 0.35000000000000003, "rank": 132, "trend": -2, "last_active_at": "2017-03-26T17:53:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10308938753548198, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jackthepirate6", "fields": {"name": "Ajinkya Narnaware", "score": 1.9773113708820407, "rank": 75, "trend": 0, "last_active_at": "2018-05-12T15:32:01Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11745337457991362, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jayvdb", "fields": {"name": "John Vandenberg", "score": 101.96195730777956, "rank": 1, "trend": 0, "last_active_at": "2018-10-08T18:51:44Z", "pos_in": 465, "weighted_pos_in": 93.93570715485095, "pos_out": 208, "neg_in": 5, "weighted_neg_in": 4.97374984707137, "neg_out": 13, "offset": 0.0, "weight_factor": 1.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jckw", "fields": {"name": "Jack W", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-03-23T17:08:43Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jendrikseipp", "fields": {"name": "Jendrik Seipp", "score": 2.332093517534533, "rank": 63, "trend": 0, "last_active_at": "2017-08-28T07:45:46Z", "pos_in": 15, "weighted_pos_in": 2.332093517534533, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12058497327042719, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "joenash", "fields": {"name": "Joe Nash", "score": 0.9008933088528792, "rank": 100, "trend": 0, "last_active_at": "2018-09-29T03:55:46Z", "pos_in": 5, "weighted_pos_in": 0.9008933088528792, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10795202445476916, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "jsecrest", "fields": {"name": "Jason Secrest", "score": 0.21381509032943616, "rank": 159, "trend": -1, "last_active_at": "2018-06-01T04:32:02Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10188730764274775, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "k4ni5h", "fields": {"name": "Kanish", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-12-22T10:09:34Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kartikeys98", "fields": {"name": "Kartikey", "score": 0.21625929861849089, "rank": 158, "trend": -1, "last_active_at": "2017-10-25T06:31:30Z", "pos_in": 1, "weighted_pos_in": 0.11625929861849088, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10190888223309727, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kaustubhhiware", "fields": {"name": "Kaustubh Hiware", "score": 0.765621679064823, "rank": 104, "trend": 0, "last_active_at": "2017-05-09T10:22:07Z", "pos_in": 3, "weighted_pos_in": 0.615621679064823, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10675800592056472, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khanchi97", "fields": {"name": "Sushil khanchi", "score": 1.2997874601487758, "rank": 86, "trend": 0, "last_active_at": "2018-02-12T20:28:41Z", "pos_in": 8, "weighted_pos_in": 1.1997874601487757, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11147299193759833, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "khushmeeet", "fields": {"name": "Khushmeet Singh", "score": 0.7428267800212515, "rank": 105, "trend": 0, "last_active_at": "2017-04-12T07:41:07Z", "pos_in": 3, "weighted_pos_in": 0.7428267800212515, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10655679941491392, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "kriti21", "fields": {"name": "Kriti Rohilla", "score": 4.823273113708819, "rank": 42, "trend": 0, "last_active_at": "2018-08-11T15:59:05Z", "pos_in": 13, "weighted_pos_in": 4.323273113708819, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14257417096490682, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksangam68", "fields": {"name": "Sangam Kumar", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-02-19T15:10:00Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "ksdme", "fields": {"name": "Kilari Teja", "score": 9.330605738575983, "rank": 22, "trend": 0, "last_active_at": "2018-09-02T10:41:36Z", "pos_in": 12, "weighted_pos_in": 7.4306057385759825, "pos_out": 34, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.18235959162072368, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lalitmee", "fields": {"name": "Lalit Kumar", "score": 0.22364505844845867, "rank": 155, "trend": -1, "last_active_at": "2018-04-11T21:31:49Z", "pos_in": 1, "weighted_pos_in": 0.17364505844845868, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10197407501697946, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "li-boxuan", "fields": {"name": "Boxuan Li", "score": 19.223655958037558, "rank": 6, "trend": 0, "last_active_at": "2018-10-08T13:51:14Z", "pos_in": 34, "weighted_pos_in": 14.573655958037552, "pos_out": 89, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.26968378029472895, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lilithxxx", "fields": {"name": "Rishav Chakraborty", "score": 0.13730074388947908, "rank": 186, "trend": -1, "last_active_at": "2018-05-10T12:39:54Z", "pos_in": 1, "weighted_pos_in": 0.13730074388947908, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1012119291622416, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lshobith", "fields": {"name": "sai shobith", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-03-10T14:42:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "lucas03", "fields": {"name": "Lukas Vojt", "score": 0.22077577045696029, "rank": 157, "trend": -1, "last_active_at": "2017-06-18T15:25:10Z", "pos_in": 1, "weighted_pos_in": 0.1707757704569603, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10194874832396048, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mach64", "fields": {"name": "Krut Patel", "score": -0.03909613616795293, "rank": 199, "trend": -1, "last_active_at": "2018-09-03T09:41:31Z", "pos_in": 4, "weighted_pos_in": 0.46090386383204707, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.0, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "madhukar01", "fields": {"name": "Madhukar S Holla", "score": 3.424601487778958, "rank": 52, "trend": 0, "last_active_at": "2017-04-10T16:11:59Z", "pos_in": 6, "weighted_pos_in": 3.3746014877789583, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13022834614382103, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "manankalra", "fields": {"name": "Manan Kalra", "score": 1.197980871413389, "rank": 90, "trend": 0, "last_active_at": "2018-10-03T05:13:03Z", "pos_in": 4, "weighted_pos_in": 0.597980871413389, "pos_out": 32, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1105743633482582, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mani87", "fields": {"name": "Mani Kumar", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-08-30T03:25:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mansiagarwal451", "fields": {"name": "Mansi Agarwal", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-10-16T20:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "margobra8", "fields": {"name": "Marcos G\u00f3mez", "score": 1.9773113708820407, "rank": 75, "trend": 0, "last_active_at": "2018-01-15T17:06:39Z", "pos_in": 2, "weighted_pos_in": 1.9273113708820406, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11745337457991362, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "marian-ald", "fields": {"name": "", "score": 0.2714665249734317, "rank": 141, "trend": -1, "last_active_at": "2016-12-04T17:59:51Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1023961865672958, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "maweki", "fields": {"name": "Mario Wenzel", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-02-07T18:27:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "meetmangukiya", "fields": {"name": "Meet Mangukiya", "score": 15.419234856535589, "rank": 10, "trend": 0, "last_active_at": "2018-07-25T23:03:20Z", "pos_in": 41, "weighted_pos_in": 11.800212539851206, "pos_out": 88, "neg_in": 4, "weighted_neg_in": 1.0809776833156182, "neg_out": 4, "offset": 0.5, "weight_factor": 0.23610283420700096, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "mohit2872", "fields": {"name": "Mohit Gupta", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-11-14T09:48:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mohitkyadav", "fields": {"name": "Mohit Kumar Yadav", "score": 0.8475557917109453, "rank": 102, "trend": 0, "last_active_at": "2017-12-15T13:06:08Z", "pos_in": 4, "weighted_pos_in": 1.3975557917109453, "pos_out": 9, "neg_in": 1, "weighted_neg_in": 1.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10748122371010674, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "monsij", "fields": {"name": "Monsij Biswal", "score": 0.4547821466524974, "rank": 118, "trend": -1, "last_active_at": "2018-05-10T16:23:03Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10401428084350847, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mridubhatnagar", "fields": {"name": "Mridu Bhatnagar", "score": 4.983315621679066, "rank": 41, "trend": 0, "last_active_at": "2017-12-14T10:46:03Z", "pos_in": 10, "weighted_pos_in": 4.483315621679066, "pos_out": 10, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14398683761996556, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mrtes", "fields": {"name": null, "score": 2.742401700318808, "rank": 58, "trend": 0, "last_active_at": "2017-11-12T12:33:42Z", "pos_in": 6, "weighted_pos_in": 2.742401700318808, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12420669037214148, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "mvinoba", "fields": {"name": "Vin\u00edcius Figueiredo", "score": 0.24373007438894745, "rank": 149, "trend": -1, "last_active_at": "2018-02-06T06:52:29Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10215136186811231, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myfrom", "fields": {"name": "Wiktor Olejniczak", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-12-14T15:45:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "myint", "fields": {"name": "Steven Myint", "score": 0.21625929861849089, "rank": 158, "trend": -1, "last_active_at": "2017-03-25T11:58:13Z", "pos_in": 2, "weighted_pos_in": 0.21625929861849089, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10190888223309727, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nalinbhardwaj", "fields": {"name": "Nalin Bhardwaj", "score": 2.7226886291179593, "rank": 59, "trend": 0, "last_active_at": "2018-09-24T15:37:17Z", "pos_in": 5, "weighted_pos_in": 2.372688629117959, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12403268661084442, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namantw", "fields": {"name": "Naman Tiwari", "score": 0.20095642933049948, "rank": 165, "trend": -1, "last_active_at": "2018-01-07T17:19:37Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10177380653699604, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "namanyadav12", "fields": {"name": "Naman Yadav", "score": 0.24017003188097746, "rank": 150, "trend": -1, "last_active_at": "2017-01-16T17:45:30Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10211993800825545, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "naveentata", "fields": {"name": "Naveen Tata", "score": 0.10382571732199786, "rank": 191, "trend": -1, "last_active_at": "2017-11-18T13:39:12Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10091645107702016, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nealkarpe", "fields": {"name": "Neal Karpe", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-11-12T09:50:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "neelanshsahai", "fields": {"name": "Neelansh Sahai", "score": 0.8163124335812947, "rank": 103, "trend": 0, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 4, "weighted_pos_in": 0.7663124335812946, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10720544416390004, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nemaniarjun", "fields": {"name": "Arjun Nemani", "score": 3.230765143464399, "rank": 53, "trend": 0, "last_active_at": "2018-05-10T20:29:45Z", "pos_in": 11, "weighted_pos_in": 3.080765143464399, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12851738732653878, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "netman92", "fields": {"name": "Stanislav Komanec", "score": 0.31381509032943616, "rank": 137, "trend": -1, "last_active_at": "2017-05-29T08:39:39Z", "pos_in": 1, "weighted_pos_in": 0.21381509032943616, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10276998979574262, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "newbazz", "fields": {"name": null, "score": 7.5072263549415466, "rank": 26, "trend": 0, "last_active_at": "2018-05-10T12:40:12Z", "pos_in": 23, "weighted_pos_in": 4.907226354941546, "pos_out": 44, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.16626494721999496, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nguptaa", "fields": {"name": "Nikhil Gupta", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2018-02-16T14:44:19Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikhil-seth", "fields": {"name": "Nikhil Seth", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-12-08T13:18:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nikita1412", "fields": {"name": null, "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-03-14T08:25:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nitinkgp23", "fields": {"name": "Nitin Choudhary", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-01-27T23:54:52Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityanandagohain", "fields": {"name": "Nityananda Gohain", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-04-28T15:40:02Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nityeshaga", "fields": {"name": "Nityesh Agarwal", "score": 1.9207757704569604, "rank": 76, "trend": 0, "last_active_at": "2018-04-14T17:36:15Z", "pos_in": 5, "weighted_pos_in": 1.4707757704569602, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11695434492487296, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nkprince007", "fields": {"name": "Naveen Kumar Sangi", "score": 5.782303242128645, "rank": 32, "trend": 0, "last_active_at": "2018-08-24T09:41:07Z", "pos_in": 14, "weighted_pos_in": 5.682303242128645, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15103935875031224, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "nvzard", "fields": {"name": "Nitanshu", "score": 5.452873043523538, "rank": 34, "trend": 0, "last_active_at": "2018-10-08T05:54:36Z", "pos_in": 6, "weighted_pos_in": 2.103687924053914, "pos_out": 96, "neg_in": 2, "weighted_neg_in": 1.150814880530375, "neg_out": 1, "offset": 0.5, "weight_factor": 0.14813153718064948, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "paavininanda", "fields": {"name": "Paavini Nanda", "score": 0.24373007438894745, "rank": 149, "trend": -1, "last_active_at": "2018-01-23T12:07:14Z", "pos_in": 1, "weighted_pos_in": 0.19373007438894743, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10215136186811231, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "palash25", "fields": {"name": "Palash Nigam", "score": 10.083089355558178, "rank": 21, "trend": 0, "last_active_at": "2018-10-05T17:38:54Z", "pos_in": 23, "weighted_pos_in": 7.3830893555581785, "pos_out": 46, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.18900163021203564, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pareksha", "fields": {"name": "Pareksha Manchanda", "score": 6.906323060573857, "rank": 28, "trend": 0, "last_active_at": "2018-09-03T09:29:53Z", "pos_in": 11, "weighted_pos_in": 4.956323060573857, "pos_out": 39, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16096088108385326, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parimatrix", "fields": {"name": "Parikansh Ahluwalia", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-12-15T11:22:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "parthboricha", "fields": {"name": null, "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-11-01T17:22:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prachi1210", "fields": {"name": "Prachi Manchanda", "score": 0.15155001112871574, "rank": 182, "trend": -1, "last_active_at": "2017-06-21T12:11:03Z", "pos_in": 1, "weighted_pos_in": 0.15155001112871574, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1013377049010949, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pradeepgangwar", "fields": {"name": "Pradeep Gangwar", "score": 2.285653560042508, "rank": 66, "trend": 0, "last_active_at": "2018-01-15T17:40:31Z", "pos_in": 4, "weighted_pos_in": 2.1856535600425078, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12017505605378669, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prashant0598", "fields": {"name": "Prashant Nigam", "score": 1.1847502656748123, "rank": 91, "trend": 0, "last_active_at": "2017-11-30T07:03:00Z", "pos_in": 4, "weighted_pos_in": 0.7347502656748123, "pos_out": 9, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11045757915267067, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pratyushprakash", "fields": {"name": "Pratyush Prakash", "score": 5.201700318809775, "rank": 38, "trend": 0, "last_active_at": "2017-04-24T19:26:51Z", "pos_in": 14, "weighted_pos_in": 4.501700318809775, "pos_out": 14, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1459144803664102, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "priyanshsaxena", "fields": {"name": "Priyansh Saxena", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-01-28T10:54:01Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "prnvdixit", "fields": {"name": "Pranav Dixit", "score": 6.53639744952178, "rank": 30, "trend": 0, "last_active_at": "2018-07-23T08:03:02Z", "pos_in": 24, "weighted_pos_in": 5.48639744952178, "pos_out": 21, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.15769561373573943, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "proishan11", "fields": {"name": "Ishan Singh", "score": 0.5401700318809775, "rank": 113, "trend": -1, "last_active_at": "2017-03-24T11:54:16Z", "pos_in": 1, "weighted_pos_in": 0.14017003188097746, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10476798446723999, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "pushkalkatara", "fields": {"name": "Pushkal Katara", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-02-12T19:39:49Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raduklb", "fields": {"name": "Radu Capalb", "score": 1.1506907545164715, "rank": 92, "trend": 0, "last_active_at": "2018-07-19T05:08:35Z", "pos_in": 2, "weighted_pos_in": 1.1506907545164715, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1101569419262787, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raghavmittal101", "fields": {"name": "Raghav Mittal", "score": 0.21285866099893672, "rank": 160, "trend": -1, "last_active_at": "2017-07-05T15:51:33Z", "pos_in": 1, "weighted_pos_in": 0.21285866099893672, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10187886541174143, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rahulkrishnan98", "fields": {"name": "Rahul Krishnan", "score": 0.2691285866099893, "rank": 142, "trend": -1, "last_active_at": "2017-02-08T10:22:43Z", "pos_in": 1, "weighted_pos_in": 0.11912858660998926, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10237555000261367, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "raj-maurya", "fields": {"name": "Raj Maurya", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-02-08T20:43:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "random-access7", "fields": {"name": "Aabhaas Vaish", "score": 1.4155685441020194, "rank": 81, "trend": 0, "last_active_at": "2018-03-01T07:59:09Z", "pos_in": 2, "weighted_pos_in": 1.0655685441020193, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11249497090219758, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rattandeep1998", "fields": {"name": "RATTANDEEP SINGH", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-12-18T14:24:12Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "realslimshanky", "fields": {"name": "Shashank Kumar", "score": 0.18618490967056384, "rank": 170, "trend": -1, "last_active_at": "2018-02-13T11:28:23Z", "pos_in": 1, "weighted_pos_in": 0.10669500531349625, "pos_out": 4, "neg_in": 2, "weighted_neg_in": 0.3205100956429324, "neg_out": 1, "offset": 0.0, "weight_factor": 0.10164342096923165, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refactormyself", "fields": {"name": "Bolarinwa Saheed Olayemi", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-04-12T08:45:21Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "refeed", "fields": {"name": "Rafid Aslam", "score": 14.016312433581295, "rank": 14, "trend": 0, "last_active_at": "2018-08-13T14:36:17Z", "pos_in": 16, "weighted_pos_in": 13.666312433581295, "pos_out": 17, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.22371948835922045, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.participant", "pk": "rhemon", "fields": {"name": "Ridhwanul Haque", "score": 3.904357066950049, "rank": 51, "trend": 0, "last_active_at": "2018-05-08T09:23:07Z", "pos_in": 13, "weighted_pos_in": 3.904357066950049, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13446306301916133, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "richardson-souza", "fields": {"name": "Richardson Souza", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2018-10-08T18:51:44Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "richer6605", "fields": {"name": "Dean Lin", "score": 0.27502656748140175, "rank": 140, "trend": -1, "last_active_at": "2017-11-27T21:08:43Z", "pos_in": 1, "weighted_pos_in": 0.27502656748140175, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10242761042715268, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rishabhgarg25699", "fields": {"name": "Rishabh Garg", "score": 0.8522619232942821, "rank": 101, "trend": 0, "last_active_at": "2018-10-03T15:18:58Z", "pos_in": 3, "weighted_pos_in": 1.1178612310768588, "pos_out": 0, "neg_in": 1, "weighted_neg_in": 0.26559930778257657, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10752276389368931, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "robbyoconnor", "fields": {"name": "Robby O'Connor", "score": 0.2714665249734317, "rank": 141, "trend": -1, "last_active_at": "2017-10-23T06:16:26Z", "pos_in": 1, "weighted_pos_in": 0.22146652497343172, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1023961865672958, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanbanerjee", "fields": {"name": "Rohan Banerjee", "score": 0.9273113708820407, "rank": 99, "trend": 0, "last_active_at": "2018-01-16T19:52:50Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10818521197346767, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanraju97", "fields": {"name": "Rohan Raju", "score": 0.15478214665249734, "rank": 179, "trend": -1, "last_active_at": "2017-03-28T16:55:43Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10136623438452391, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rohanrk", "fields": {"name": "Rohan", "score": 0.36354941551540826, "rank": 131, "trend": -2, "last_active_at": "2018-05-07T10:39:40Z", "pos_in": 2, "weighted_pos_in": 0.36354941551540826, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10320898580807161, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rpanczer", "fields": {"name": "Bobby Panczer", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-10-17T00:31:42Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rubdos", "fields": {"name": "Ruben De Smet", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-03-07T03:13:46Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "rupav", "fields": {"name": "rupav jain", "score": 0.25, "rank": 148, "trend": -1, "last_active_at": "2017-10-03T17:34:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10220670538248713, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sadovnychyi", "fields": {"name": "Dmytro Sadovnychyi", "score": 0.2, "rank": 167, "trend": -1, "last_active_at": "2017-06-14T11:01:59Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.1017653643059897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sahilarora535", "fields": {"name": "Sahil Arora", "score": 0.44102019128586484, "rank": 120, "trend": -1, "last_active_at": "2017-03-19T16:49:09Z", "pos_in": 2, "weighted_pos_in": 0.44102019128586484, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10389280651958409, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sangamcse", "fields": {"name": "Sangam Kumar", "score": 10.644721118174969, "rank": 20, "trend": 0, "last_active_at": "2018-08-09T05:42:01Z", "pos_in": 21, "weighted_pos_in": 8.79472111817497, "pos_out": 33, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.19395905354620446, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sanjeethboddi", "fields": {"name": "Sanjeeth", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2018-05-21T03:55:15Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sarthakchakerverty", "fields": {"name": "Sarthak Chakerverty", "score": -0.21955366631243298, "rank": 200, "trend": -1, "last_active_at": "2018-07-13T08:57:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 2, "weighted_neg_in": 0.319553666312433, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "satwikkansal", "fields": {"name": "Satwik Kansal", "score": 10.68698193411264, "rank": 19, "trend": 0, "last_active_at": "2018-04-07T15:38:12Z", "pos_in": 18, "weighted_pos_in": 9.63698193411264, "pos_out": 21, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1943320822261963, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sgsh123", "fields": {"name": null, "score": 0.10573857598299678, "rank": 190, "trend": -1, "last_active_at": "2017-02-20T03:35:34Z", "pos_in": 1, "weighted_pos_in": 0.10573857598299678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10093333553903282, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shaipranesh11", "fields": {"name": null, "score": 0.2, "rank": 167, "trend": -1, "last_active_at": "2017-12-02T09:48:06Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 1, "offset": 0.0, "weight_factor": 0.1017653643059897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shashank-b", "fields": {"name": "Shashank Batra", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-01-08T18:17:29Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shikharvaish28", "fields": {"name": "Shikhar Vaish", "score": 0.3870991265759287, "rank": 128, "trend": 4, "last_active_at": "2018-10-10T16:59:31Z", "pos_in": 3, "weighted_pos_in": 0.30000000000000004, "pos_out": 7, "neg_in": 1, "weighted_neg_in": 0.26290087342407126, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10341685490468468, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreab373", "fields": {"name": "shreab373", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-04-08T16:45:09Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyans800755", "fields": {"name": "Shreyans", "score": 20.82037438984581, "rank": 5, "trend": 0, "last_active_at": "2018-08-18T06:53:16Z", "pos_in": 41, "weighted_pos_in": 19.34540095732721, "pos_out": 35, "neg_in": 1, "weighted_neg_in": 0.27502656748140175, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2837777289258797, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shreyateeza", "fields": {"name": "Shreya", "score": 1.276780021253985, "rank": 87, "trend": 0, "last_active_at": "2018-01-14T18:09:18Z", "pos_in": 4, "weighted_pos_in": 1.3841657810839527, "pos_out": 1, "neg_in": 1, "weighted_neg_in": 0.15738575982996783, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1112699093806128, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "shrutishrm512", "fields": {"name": "Shruti Sharma", "score": 0.25, "rank": 148, "trend": -1, "last_active_at": "2017-03-28T08:50:11Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10220670538248713, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sibasish14", "fields": {"name": "Sibasish Ghosh", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-12-14T12:59:16Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "siddhant-curious", "fields": {"name": "Siddhant Chhabra", "score": 0.22773645058448444, "rank": 153, "trend": -1, "last_active_at": "2018-05-08T04:55:07Z", "pos_in": 2, "weighted_pos_in": 0.22773645058448444, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10201018900517318, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sidharthskumar", "fields": {"name": "sidharth sk", "score": 0.42104144527098825, "rank": 124, "trend": -1, "last_active_at": "2017-07-18T10:13:56Z", "pos_in": 1, "weighted_pos_in": 0.1210414452709882, "pos_out": 6, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10371645769411861, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sils", "fields": {"name": "Lasse Schuirmann", "score": 17.284856535600408, "rank": 8, "trend": 0, "last_active_at": "2018-01-03T08:40:29Z", "pos_in": 60, "weighted_pos_in": 16.934856535600407, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.252570343810509, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sims1253", "fields": {"name": "Maximilian Scholz", "score": 6.859936238044619, "rank": 29, "trend": 0, "last_active_at": "2017-11-02T17:21:01Z", "pos_in": 34, "weighted_pos_in": 6.759936238044619, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.16055143288004628, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "singhYash123", "fields": {"name": "Yash", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-10-29T13:43:41Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sks444", "fields": {"name": "Shrikrishna Singh", "score": 10.817067069767923, "rank": 18, "trend": 0, "last_active_at": "2018-10-01T07:21:16Z", "pos_in": 19, "weighted_pos_in": 6.417067069767921, "pos_out": 88, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1954803205023246, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sladyn98", "fields": {"name": "Sladyn", "score": 0.23390232097780678, "rank": 151, "trend": -1, "last_active_at": "2018-10-07T08:49:29Z", "pos_in": 1, "weighted_pos_in": 0.23390232097780678, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10206461404271183, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "snakevenom04", "fields": {"name": "Sir Cheshire", "score": 0.2547821466524973, "rank": 147, "trend": -1, "last_active_at": "2017-08-25T07:26:44Z", "pos_in": 1, "weighted_pos_in": 0.10478214665249733, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10224891653751877, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "solutusimmensus", "fields": {"name": "SolutusImmensus", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-11-09T02:37:20Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sonali0901", "fields": {"name": "sonali0901", "score": 0.10095642933049948, "rank": 193, "trend": -1, "last_active_at": "2017-10-18T17:04:10Z", "pos_in": 1, "weighted_pos_in": 0.10095642933049948, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10089112438400119, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sopelj", "fields": {"name": "Jesse Sopel", "score": 0.2, "rank": 167, "trend": -1, "last_active_at": "2018-05-05T13:35:05Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 4, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1017653643059897, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "soumya-ranjan7", "fields": {"name": "Soumya Ranjan", "score": 0.10382571732199786, "rank": 191, "trend": -1, "last_active_at": "2017-10-19T11:28:17Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10091645107702016, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sourabh1031", "fields": {"name": "Sourabh", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2018-10-08T15:41:13Z", "pos_in": 1, "weighted_pos_in": 0.1, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "sourojit", "fields": {"name": "Sourojit Bhaduri", "score": 1.135919234856536, "rank": 93, "trend": 0, "last_active_at": "2018-01-02T20:21:03Z", "pos_in": 3, "weighted_pos_in": 1.135919234856536, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11002655635851433, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "srikanth100", "fields": {"name": "Srikanth Kini", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-02-13T12:59:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "srivama", "fields": {"name": "Amandeep Srivastava", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2018-10-05T17:38:58Z", "pos_in": 1, "weighted_pos_in": 0.1, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "starkblaze01", "fields": {"name": "MAYANK PATHELA", "score": 0.2286928799149839, "rank": 152, "trend": -1, "last_active_at": "2018-06-28T12:56:00Z", "pos_in": 1, "weighted_pos_in": 0.1286928799149839, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10201863123617952, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "stellargo", "fields": {"name": "Sumit Sarin", "score": 0.4702444208289045, "rank": 117, "trend": -1, "last_active_at": "2018-04-22T10:08:32Z", "pos_in": 2, "weighted_pos_in": 0.3702444208289045, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10415076357811075, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supergr35", "fields": {"name": "Grant Parajuli", "score": 7.251859723698191, "rank": 27, "trend": 0, "last_active_at": "2017-11-14T19:07:24Z", "pos_in": 25, "weighted_pos_in": 6.65185972369819, "pos_out": 12, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1640108715413057, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "supriyanta", "fields": {"name": "Supriyanta Poddar", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-11-19T19:37:14Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "susg", "fields": {"name": "sushant gupta", "score": 1.0, "rank": 97, "trend": 0, "last_active_at": "2018-04-18T22:25:59Z", "pos_in": 1, "weighted_pos_in": 1.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10882682152994852, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "swapagarwal", "fields": {"name": "Swapnil Agarwal", "score": 0.16599362380446298, "rank": 174, "trend": -1, "last_active_at": "2017-10-18T06:50:39Z", "pos_in": 1, "weighted_pos_in": 0.16599362380446298, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10146519609243142, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "synicalsyntax", "fields": {"name": "Cynthia Lin", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-12-08T07:18:57Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "tabias", "fields": {"name": null, "score": 0.1633900106269925, "rank": 175, "trend": -1, "last_active_at": "2017-03-02T07:57:36Z", "pos_in": 1, "weighted_pos_in": 0.11339001062699249, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10144221446358086, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "theOriginalMuktaka", "fields": {"name": "", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-12-27T12:40:37Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "thisch", "fields": {"name": "Thomas Hisch", "score": 2.6401700318809724, "rank": 60, "trend": 0, "last_active_at": "2017-06-12T21:21:05Z", "pos_in": 8, "weighted_pos_in": 2.6401700318809724, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12330430968013184, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "traff", "fields": {"name": "Dmitry Trofimov", "score": 0.0, "rank": 198, "trend": -1, "last_active_at": "2017-01-26T00:50:56Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "troublemagnet", "fields": {"name": "Gunjan Karamchandani", "score": 2.155738575982997, "rank": 69, "trend": 0, "last_active_at": "2017-11-11T12:00:39Z", "pos_in": 3, "weighted_pos_in": 2.105738575982997, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11902831967542728, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "twinone", "fields": {"name": "Luuk W.", "score": 0.19277364505844796, "rank": 168, "trend": -1, "last_active_at": "2017-03-20T14:45:54Z", "pos_in": 1, "weighted_pos_in": 0.19277364505844796, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10170157856060857, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "umeshksingla", "fields": {"name": "Umesh Singla", "score": 2.0046227417640816, "rank": 72, "trend": 0, "last_active_at": "2017-09-04T17:38:53Z", "pos_in": 2, "weighted_pos_in": 1.8546227417640815, "pos_out": 3, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11769444717642763, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "underyx", "fields": {"name": "Bence Nagy", "score": 0.10382571732199786, "rank": 191, "trend": -1, "last_active_at": "2017-05-28T03:21:13Z", "pos_in": 1, "weighted_pos_in": 0.10382571732199786, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10091645107702016, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "urohit011", "fields": {"name": "Rohit Upadhyay", "score": 1.0273113708820407, "rank": 96, "trend": 0, "last_active_at": "2017-11-23T03:10:16Z", "pos_in": 1, "weighted_pos_in": 0.9273113708820407, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10906789412646253, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "userzimmermann", "fields": {"name": "Stefan Zimmermann", "score": 15.993251859723685, "rank": 9, "trend": 0, "last_active_at": "2018-01-06T09:09:24Z", "pos_in": 46, "weighted_pos_in": 11.443251859723684, "pos_out": 83, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 2, "offset": 0.0, "weight_factor": 0.24116957984929818, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "utkarsh2102", "fields": {"name": "Utkarsh Gupta", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-05-28T22:48:33Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaibhavsingh97", "fields": {"name": "Vaibhav Singh", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-10-29T20:38:48Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vaishnavm217", "fields": {"name": "Vaishnav Murali", "score": 0.20451647183846944, "rank": 163, "trend": -1, "last_active_at": "2017-03-01T11:58:41Z", "pos_in": 1, "weighted_pos_in": 0.15451647183846942, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10180523039685292, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vddesai1998", "fields": {"name": "Vishal Desai", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2017-12-21T12:19:24Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vibhanshuvaibhav", "fields": {"name": "Vibhanshu Vaibhav", "score": 0.20738575982996782, "rank": 162, "trend": -1, "last_active_at": "2018-01-19T13:24:25Z", "pos_in": 1, "weighted_pos_in": 0.15738575982996783, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1018305570898719, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vijeth-aradhya", "fields": {"name": "euleram", "score": 2.080446333687567, "rank": 71, "trend": 0, "last_active_at": "2017-03-26T12:34:47Z", "pos_in": 3, "weighted_pos_in": 1.980446333687567, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.11836372849009588, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "vipuldcoder", "fields": {"name": "vipul Aggarwal", "score": 0.1, "rank": 195, "trend": -1, "last_active_at": "2018-01-17T18:57:35Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 2, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10088268215299485, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "virresh", "fields": {"name": "Viresh Gupta", "score": 4.493888318164969, "rank": 45, "trend": 0, "last_active_at": "2018-08-12T15:13:59Z", "pos_in": 15, "weighted_pos_in": 4.09388831816497, "pos_out": 8, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.1396667501599627, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wisn", "fields": {"name": "Wisnu Adi Nurcahyo", "score": 3.9312585305114545, "rank": 50, "trend": 0, "last_active_at": "2018-07-30T11:39:09Z", "pos_in": 13, "weighted_pos_in": 3.5812585305114544, "pos_out": 7, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.13470051743691228, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "wyj1026", "fields": {"name": "Wang Yijie", "score": 0.2214665249734319, "rank": 156, "trend": -1, "last_active_at": "2017-12-19T16:43:19Z", "pos_in": 1, "weighted_pos_in": 0.2214665249734319, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10195484549079838, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "xferra", "fields": {"name": "Andrey", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yash-nisar", "fields": {"name": "Yash Nisar", "score": 21.023113708820397, "rank": 4, "trend": 0, "last_active_at": "2017-09-03T12:50:43Z", "pos_in": 33, "weighted_pos_in": 14.273113708820395, "pos_out": 135, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.2855672727115717, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashLadha", "fields": {"name": "Yash Ladha", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-03-02T12:08:38Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashasingh", "fields": {"name": "Yasha", "score": -0.4513283740701395, "rank": 201, "trend": -1, "last_active_at": "2017-12-12T17:28:20Z", "pos_in": 2, "weighted_pos_in": 0.3759829968119013, "pos_out": 2, "neg_in": 1, "weighted_neg_in": 0.9273113708820407, "neg_out": 0, "offset": 0.0, "weight_factor": 0.0, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yashovardhanagrawal", "fields": {"name": "Yashovardhan Agrawal", "score": 2.3188629117959616, "rank": 65, "trend": 0, "last_active_at": "2018-09-29T03:56:01Z", "pos_in": 11, "weighted_pos_in": 2.0688629117959616, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12046818907483971, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yukiisbored", "fields": {"name": "Muhammad Kaisar Arkhan", "score": 5.021625929861844, "rank": 40, "trend": 0, "last_active_at": "2018-05-18T17:39:46Z", "pos_in": 27, "weighted_pos_in": 4.771625929861844, "pos_out": 5, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.14432499587305225, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "yzgyyang", "fields": {"name": "Guangyuan (Charlie) Yang", "score": 3.1009564293304996, "rank": 55, "trend": 0, "last_active_at": "2018-05-24T20:15:18Z", "pos_in": 4, "weighted_pos_in": 3.1009564293304996, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.12737158897384673, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zenara", "fields": {"name": "Chathurika Senani", "score": 0.05, "rank": 196, "trend": -1, "last_active_at": "2017-04-06T19:27:45Z", "pos_in": 0, "weighted_pos_in": 0.0, "pos_out": 1, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.0, "weight_factor": 0.10044134107649744, "modified_comments_after_meta_review": 0}}, {"model": "meta_review.participant", "pk": "zwliew", "fields": {"name": "Zhao Wei Liew", "score": 0.04871011885228427, "rank": 197, "trend": -1, "last_active_at": "2017-12-28T06:48:01Z", "pos_in": 2, "weighted_pos_in": 0.5487101188522843, "pos_out": 0, "neg_in": 0, "weighted_neg_in": 0.0, "neg_out": 0, "offset": 0.5, "weight_factor": 0.1004299555258117, "modified_comments_after_meta_review": 1}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDEwODM3Nw==", "fields": {"body": "now we can use rultor \ud83c\udf89", "diff": null, "created_at": "2017-01-20T16:01:54Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDMyODkzMQ==", "fields": {"body": "@hemangsk I made the necessary changes. Is it alright now?", "diff": null, "created_at": "2017-01-22T12:48:14Z", "last_edited_at": null, "author": "SiddharthKumar02", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NDU2Mjg5OQ==", "fields": {"body": "could you also formulate why coala needs/wants a gui in a nice paragraph? I guess I know your Idea behind it but considering who the target audience of coala is(devs) why would a gui be a nice thing?", "diff": null, "created_at": "2017-01-23T17:47:50Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTI1NjQ1Ng==", "fields": {"body": "Hi, I am PyCharm team lead. I can be a co-mentor for this project. The idea behind the support of mypy and pylint along with the coala is that it's better to have a general mechanism of highlighting code analysis results from external tools. (By the way, we already have something similar for PEP8) Of course the primary goal can be to support coala, but the API should be done in a way to be able to support others.", "diff": null, "created_at": "2017-01-25T22:43:00Z", "last_edited_at": null, "author": "traff", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NTI5MjU4MA==", "fields": {"body": "Hi, I'm a newcomer to coala and I'm interested in this project.\nSo jetbrains IDEs don't have a good support to static analysis and the community want students to find a general way to write static analysis plugin?\nCould we reference https://github.com/Microsoft/language-server-protocol?", "diff": null, "created_at": "2017-01-26T02:20:11Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NjAyNzk0MQ==", "fields": {"body": "@NiklasMM don't worry I'll always be there for you ;)", "diff": null, "created_at": "2017-01-30T10:30:29Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ==", "fields": {"body": "In the future, please develop on a new branch rather than master. Here's a link to explain how :)\nhttp://api.coala.io/en/latest/Developers/Git_Basics.html#creating-a-new-branch", "diff": null, "created_at": "2017-02-01T20:29:09Z", "last_edited_at": null, "author": "supergr35", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3Njk3MDY0Mw==", "fields": {"body": "Hey, this is your first contribution, right? Congrats and welcome to the coalaians! :) You've done your first step to become a coala developer.\nYour changes are auomatically released and live already.\nWe would really appreciate it if you could help us with\n\ntelling us about your experience\nsome code reviews for other newcomers\nfixing at least a difficulty/low issue\nfill our usability survey\n\nIf you've done those and tell us about it so we can promote you to a coala developer!\nWe're all volunteers and we're currently struggling to keep this up. Helping all those newcomers is a lot of work and we do need your help so we can continue this for others!", "diff": null, "created_at": "2017-02-02T14:22:47Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI2MzkwNw==", "fields": {"body": "Ya the Left align solution sounds better \ud83d\udc4d", "diff": null, "created_at": "2017-02-03T14:44:29Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI3NTQ4NA==", "fields": {"body": "your commits need squashing and please read coala.io/commits carefully", "diff": null, "created_at": "2017-02-03T15:24:32Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzI4MTA4NQ==", "fields": {"body": "credits to @impmihai for the solution :)", "diff": null, "created_at": "2017-02-03T15:43:14Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw==", "fields": {"body": "Yup, not possible. No problem, i will get onto another isuue.", "diff": null, "created_at": "2017-02-03T11:50:29Z", "last_edited_at": null, "author": "aalind0", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzM0MTE0OQ==", "fields": {"body": "@Mariatta Here is the screenshot-", "diff": null, "created_at": "2017-02-03T19:35:30Z", "last_edited_at": null, "author": "Shruti9520", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzMzOTEyOQ==", "fields": {"body": "Can you also post a screenshot of how the new page will look like after these changes you make?\nThanks.", "diff": null, "created_at": "2017-02-03T19:27:39Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzQ2OTcyNw==", "fields": {"body": "Looks good in the screenshot, tested locally as well \ud83d\udc4d  \ud83c\udf89", "diff": null, "created_at": "2017-02-04T19:36:44Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzU0MTkzOQ==", "fields": {"body": "Sorry this is getting a bit tedious for you \ud83d\ude05  but we get the hang of the drill after some time \ud83d\ude03  \ud83d\udc4d\n\nYou need to squash your commits coala.io/git\nAnd then rebase your branch", "diff": null, "created_at": "2017-02-05T19:19:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3NzU1NDUzOA==", "fields": {"body": "There's typo:\nwining -> winning", "diff": null, "created_at": "2017-02-05T22:18:45Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODA4MDE4Nw==", "fields": {"body": "we are not as strict on the projects repo so I'll just grab everything when it's done and make it nice ;)", "diff": null, "created_at": "2017-02-07T17:44:49Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODA4NTg5OQ==", "fields": {"body": "you have quite some typos in there, consider putting your text into https://languagetool.org/ before you submit it :)", "diff": null, "created_at": "2017-02-07T18:01:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw==", "fields": {"body": "There :)", "diff": null, "created_at": "2017-02-07T14:55:02Z", "last_edited_at": null, "author": "rahulkrishnan98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODIyMzgxNg==", "fields": {"body": "@gkrishnan724 @rahulkde Do you guys feel we need a little margin left (1em/2em) on the search icon ?", "diff": null, "created_at": "2017-02-08T04:06:55Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM4MDIyMQ==", "fields": {"body": "I did... now it works so maybe just had to wait 5 minutes :)", "diff": null, "created_at": "2017-02-08T16:32:58Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTI5NA==", "fields": {"body": "@arnab1896 Looks nice! there is one more inconsistency in generic_bears.md that the headings are not in uppercase like in the other projects, can you fix those too while we're at it  \ud83d\ude03", "diff": null, "created_at": "2017-02-08T16:59:06Z", "last_edited_at": "2017-02-08T16:59:40Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTc5Mg==", "fields": {"body": "Thats ok. I will make a huge PR fixing all the remaining Projects now as we're running out of time", "diff": null, "created_at": "2017-02-08T17:00:35Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODM5MTI4MA==", "fields": {"body": "@hemangsk Done with the changes ! :D", "diff": null, "created_at": "2017-02-08T17:04:57Z", "last_edited_at": null, "author": "aalind0", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODQ0MDQ1MQ==", "fields": {"body": "@raj-maurya the deadline is in 17 hours... can you address this issues like ASAP...", "diff": null, "created_at": "2017-02-08T19:47:13Z", "last_edited_at": null, "author": "dracarys09", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI3ODQxOTcyNw==", "fields": {"body": "@raj-maurya ; need any help with editing your commit message? Do let me know.\nmeanwhile; carefully read this if you still haven't-----> http://api.coala.io/en/latest/Developers/Git_Basics.html", "diff": null, "created_at": "2017-02-08T18:33:55Z", "last_edited_at": null, "author": "arnab1896", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4MDY2MTY3Ng==", "fields": {"body": "@yukiisbored @gkrishnan724  Yeah I'm testing it locally \ud83d\ude03  looks all awesome so far", "diff": null, "created_at": "2017-02-17T14:19:27Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4Njc0NDA3OQ==", "fields": {"body": "@supergr35 I checked it before commiting ^^ The issue was labeled bug so I wrote Fixes.\nI will change (:", "diff": null, "created_at": "2017-03-15T13:40:43Z", "last_edited_at": "2017-03-15T13:54:51Z", "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzA4Nzg1NQ==", "fields": {"body": "@hemangsk thanks, I've been tinkering with this for the last 20 minutes :D", "diff": null, "created_at": "2017-03-16T15:10:21Z", "last_edited_at": null, "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzYxNTIzMA==", "fields": {"body": "Could you show the contents of your .coafile? @vimcoffee", "diff": null, "created_at": "2017-03-19T13:02:44Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ==", "fields": {"body": "@meetmangukiya I'm looking into them :)", "diff": null, "created_at": "2017-03-19T15:20:51Z", "last_edited_at": null, "author": "sahilarora535", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTA3Mzc4Mw==", "fields": {"body": "This PR is ready to be merged. The requested changes have been made.", "diff": null, "created_at": "2017-03-24T16:33:22Z", "last_edited_at": null, "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI4OTAwNzQ0Mw==", "fields": {"body": "@kaustubhhiware You'll have to amend the commit message with,\ngit commit --amend and then force push.", "diff": null, "created_at": "2017-03-24T12:14:57Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MDk5MzE2MQ==", "fields": {"body": "thx @hemangsk you're gorgeous!", "diff": null, "created_at": "2017-04-02T15:22:10Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTE0NTg1OQ==", "fields": {"body": "Yeah, primarily the concept is that one commit should have only one atomic/nuclear change. So we can have two about adding the indentation bear and about correcting indentation.", "diff": null, "created_at": "2017-04-03T13:40:45Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTE4NDc3MQ==", "fields": {"body": "@hemangsk All the suggested changes have been made. Line 272 has been corrected.\n2 separate commits have been made to keep the changes atomic. Open for review.", "diff": null, "created_at": "2017-04-03T15:48:58Z", "last_edited_at": "2017-04-03T15:49:19Z", "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5MTIwNjgzMA==", "fields": {"body": "The changes have been made. Please see.", "diff": null, "created_at": "2017-04-03T17:03:54Z", "last_edited_at": null, "author": "kaustubhhiware", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ==", "fields": {"body": "@Techievena Pro-tip: Use a different branch on your fork so you can update it easily without issues with \"merging\" from the origin remote when pulling.", "diff": null, "created_at": "2017-04-22T15:57:12Z", "last_edited_at": "2017-04-22T15:57:19Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg==", "fields": {"body": "@hemangsk works good locally!\nbut why do we have the status for high-involvement as 'crowded'?  why don't we keep it as high_involvement? because if people search for high-involvement projects, they will probably input high-involvement in the search bar, not crowded since the label indicates high involvement.", "diff": null, "created_at": "2017-04-24T14:50:00Z", "last_edited_at": "2017-04-24T14:50:42Z", "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NzY3MzYzMg==", "fields": {"body": "can we support multiple statuses on one project? Right now we don't need it but might in the future.", "diff": null, "created_at": "2017-04-27T10:16:20Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5Nzk2Nzk3Ng==", "fields": {"body": "done @jayvdb", "diff": null, "created_at": "2017-04-28T10:47:38Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDI5NzkyMDkzMg==", "fields": {"body": "@RohanVB, can you undo the change as @sims1253 requested, rebase, and then we can ack and get this merged.\nThey are only minor changes, but they are good changes.", "diff": null, "created_at": "2017-04-28T06:44:50Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDY4MjcxMg==", "fields": {"body": "@Monal5031 please see if things are in place. \ud83d\udc4d", "diff": null, "created_at": "2017-10-31T07:32:35Z", "last_edited_at": null, "author": "anshumanv", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDc4MDU1NA==", "fields": {"body": "@aashutoshrathi Please follow http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nfileName: Mention changes summary\nChanges\n\nCloses #{issue number}", "diff": null, "created_at": "2017-10-31T14:32:02Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MDgyNjgzNQ==", "fields": {"body": "Umm... The Shortlog is still not in imperative mood. Actually, you changed the title of your PR \ud83d\ude04.\nIdeally, Shortlog should be index.html: Fix spacing issues as drop-down issue has been solved in another PR already \ud83d\ude03. You can amend your Shortlog by git commit -a --amend \ud83d\udc4d.\nAlso, the spacing issue seems to be fixed now - Good work \ud83d\udc4d", "diff": null, "created_at": "2017-10-31T16:50:14Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw==", "fields": {"body": "@ai-coder , you have done one newcomer issue.  Fixing individual spelling mistakes are newcomer issues.\nThe bug you are solving was low because it was about adding a spell checker bear, which is not what you are doing in this PR.", "diff": null, "created_at": "2017-11-03T08:19:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw==", "fields": {"body": "The content of your patch is fine; please amend your commit message\nhttp://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nThis type of change is \"Closes\", not a \"Fixes\", as the current version is not broken.", "diff": null, "created_at": "2017-11-03T14:00:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkxODYyNw==", "fields": {"body": "@yashovardhanagrawal one way is that u can add members that are in core development groups and omit those who are in pending removal group and list cannot be a static number.", "diff": null, "created_at": "2017-11-04T18:16:42Z", "last_edited_at": null, "author": "prashant0598", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkyMDEyOQ==", "fields": {"body": "@prashant0598 Rather than using APIs or any specific number, I am just thinking to add a counter to count the number of cards displayed. I am studying the backend for this, let's see \ud83d\ude04", "diff": null, "created_at": "2017-11-04T18:39:16Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg==", "fields": {"body": "I would rather recommend to write it lowercase, because it's not referring to a name or title. Do it then for both, inside the commit body and in the .rst", "diff": null, "created_at": "2017-11-04T20:26:50Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ==", "fields": {"body": "@Grox-Ni You missed a full stop at the end of commit description \ud83d\ude09.", "diff": null, "created_at": "2017-11-07T15:42:01Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MjgzNTQwOQ==", "fields": {"body": "@prashant0598 that issue if for a different task, this PR remains and I think the proposed work for this PR is also completed by me. \ud83d\ude1c\nAbout the issue, it is yet unlabelled and unlabelled issue are not meant to be assigned to newcomers so corobo cannot assign it to me.\nYou might view the whole conversation here, if you want to know more about what is the progress \ud83d\ude04", "diff": null, "created_at": "2017-11-08T14:34:39Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Mjk1ODc5OQ==", "fields": {"body": "Sorry, it took some time but I'm hoping this time it's okay.", "diff": null, "created_at": "2017-11-08T21:04:02Z", "last_edited_at": null, "author": "solutusimmensus", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ==", "fields": {"body": "@troublemagnet done thanks!!", "diff": null, "created_at": "2017-11-11T11:55:28Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE0OTkzMw==", "fields": {"body": "You need to rebase your patches before you submit a PR. :/", "diff": null, "created_at": "2017-11-14T05:22:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE4OTY5MQ==", "fields": {"body": "Umm... @yashovardhanagrawal I think you already have one PR in queue (the GIF one?).... Please, try not to solve more newcomer issues \ud83d\ude09 \ud83d\udc4d", "diff": null, "created_at": "2017-11-14T09:02:00Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE5NDk5OQ==", "fields": {"body": "@prnvdixit I did this as the process was blocked for that GIF PR\nwill not do any newcomer PR now", "diff": null, "created_at": "2017-11-14T09:22:08Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDE5ODY2Nw==", "fields": {"body": "Also, please refrain from pushing commits from your \"master\" branch.", "diff": null, "created_at": "2017-11-14T09:35:02Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw==", "fields": {"body": "Also, again - try not to make changes to your \"master\" branch, the consequences of doing so are well documented here \ud83d\ude09 \ud83d\udc4d", "diff": null, "created_at": "2017-11-15T13:05:46Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQwOA==", "fields": {"body": "Also first get the issue assigned to yourself via corobo in gitter chat using\ncorobo assign <issue link>\nfollow the commit guidelines\nI have mentioned an example in your other PR", "diff": null, "created_at": "2017-11-15T15:39:22Z", "last_edited_at": "2017-11-15T15:39:36Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQxOA==", "fields": {"body": "First get an issue assigned to yourself via corobo in gitter chat\nthen only start to work on a PR\nremember this while contributing in coala \ud83d\ude04", "diff": null, "created_at": "2017-11-15T15:39:24Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA==", "fields": {"body": "@neelanshsahai You don't need to unack just to request changes, use GitHub's feature or just make it a comment.\nOf course, unack is used when you disagree that this is acceptable and has been ack'd by someone else.", "diff": null, "created_at": "2017-11-16T11:02:09Z", "last_edited_at": "2017-11-16T11:02:48Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NDgyMTIzOA==", "fields": {"body": "@Makman2 I feel it's not a duplicate, he has addressed two different issues in these two PRs\njust the thing is he has added extra commit related to that PR also", "diff": null, "created_at": "2017-11-16T05:37:25Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA==", "fields": {"body": "Yes, the documentation should focus on describing .coarc , rather than default_coafile, but I think this example is good enough for this PR/issue.  The problem with default_coafile is in core, not the documentation, and further improvements of docs dont help users a great deal.", "diff": null, "created_at": "2017-11-17T17:39:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjAwNw==", "fields": {"body": "first, read our commit guidelines\nyou shortlog is wrong and also you have not added a commit description the main reason why the last PR for this issue was closed", "diff": null, "created_at": "2017-11-18T18:40:46Z", "last_edited_at": "2017-11-18T18:45:48Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjQ0NA==", "fields": {"body": "A better shortlog can be:\ncoala_will_apply_for_gsoc_2018.md: Add new FAQ\nDescription:\n\nThis adds a new FAQ related to coala applying for\nGoogle Summer of Code - 2018\nAlso adds GSoC timeline is in the answer\nCloses issue link", "diff": null, "created_at": "2017-11-18T18:48:03Z", "last_edited_at": "2017-11-18T18:50:04Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjcyMg==", "fields": {"body": "Also forgot to mention, rebase your commit to update the changes\nyou might read http://api.coala.io/en/latest/Developers/Git_Basics.html for more information about how to do it", "diff": null, "created_at": "2017-11-18T18:52:23Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg==", "fields": {"body": "@prashant0598 please insert a line break between the description and Closes #128\nas I had suggested", "diff": null, "created_at": "2017-11-18T18:55:51Z", "last_edited_at": null, "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTQ2NDE1OQ==", "fields": {"body": "@prashant0598 will keep that in mind from the next time, in this PR I cannot change the branch and I think closing a PR would not be good.\n@yashovardhanagrawal I have again updated a few changes\nYou both may review it", "diff": null, "created_at": "2017-11-18T19:13:58Z", "last_edited_at": null, "author": "ihsraham", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NTYzNzE4MQ==", "fields": {"body": "You need to rebase.", "diff": null, "created_at": "2017-11-20T09:22:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ==", "fields": {"body": "Also, fix your commit to adhere to https://coala.io/commit \ud83d\ude04", "diff": null, "created_at": "2017-11-26T05:35:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg==", "fields": {"body": "@0x48piraj, please follow the instructions given to you by our developers.  We have good reasons for why and how we do things, which you will learn if you proceed through the newcomer process.\nOur newcomer process exists only to ensure you know how to use git correctly.\nIf you dont follow our processes, we discard your PR.\nThank you.", "diff": null, "created_at": "2017-11-27T05:39:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA4OTQ5OQ==", "fields": {"body": "This PR is ghosted.", "diff": null, "created_at": "2017-11-27T06:23:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng==", "fields": {"body": "Also, it's a great first PR \ud83d\ude04 - you needn't start a new PR, just go through the suggested changes and associated guides \ud83d\ude03.\n\nI was talking about setting up the project in git \ud83d\ude1b\nAnd \"I never said anything\" was for that this was just a request to accept this PR, and from next issue, I will do it via git.\nAnyways, you all are right! I read the guidelines, but of my laziness I did it via web-interface.\nI know I'm assigned \ud83d\ude09\nThanks @prnvdixit for such a positive comment.\nFrom now, I will do as it is done in coala \ud83d\ude0a", "diff": null, "created_at": "2017-11-27T06:48:31Z", "last_edited_at": null, "author": "0x48piraj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzUwOTY5Nw==", "fields": {"body": "Can you check with @meetmangukiya about this.  He build the utils/filters.py which is doing something a bit similar.  Would be interesting to know why he needed to build a filter to do that.", "diff": null, "created_at": "2017-11-28T12:34:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzY2MTM4OA==", "fields": {"body": "Alright, sorry. Addressed. :)", "diff": null, "created_at": "2017-11-28T20:58:29Z", "last_edited_at": null, "author": "Lyrenhex", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Nzc1MzM4Ng==", "fields": {"body": "Could you try to build a test for this, especially a test which uses a GitLab URL ;-)", "diff": null, "created_at": "2017-11-29T04:58:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0Nzc2Mzk3MA==", "fields": {"body": "@Vamshi99 Sorry didn't notice that. @LifetimeAlone keep it as Fixes only.", "diff": null, "created_at": "2017-11-29T06:16:06Z", "last_edited_at": null, "author": "mridubhatnagar", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0NzcyODE2OA==", "fields": {"body": "I checked on Netlify , using https://deploy-preview-430--coala-projects.netlify.com/gsoc/2017/statusreport/hemangkumar , and functionally the code is good. (surprise!)\nNow just need to tidy it up", "diff": null, "created_at": "2017-11-29T02:02:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODA5OTA0Mg==", "fields": {"body": "@jayvdb @RaiVaibhav  actually i had my exams so was not able to do it but now i am already working on this", "diff": null, "created_at": "2017-11-30T06:53:52Z", "last_edited_at": null, "author": "prashant0598", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODIwNTcwOQ==", "fields": {"body": "However, this is my local coala run on this PR ;)\nProject wide:\n|    | [NORMAL] GitCommitBear:\n|    | Shortlog of HEAD commit isn't in imperative mood! Bad words are 'Added'\n\nProject wide:\n|    | [NORMAL] GitCommitBear:\n|    | Shortlog of the HEAD commit contains 59 character(s). This is 9 character(s) longer than the limit (59 > 50).", "diff": null, "created_at": "2017-11-30T14:36:00Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODU4ODMzNw==", "fields": {"body": "closing per move request. @shaipranesh11 you can still transfer the commit using the git cli", "diff": null, "created_at": "2017-12-01T19:15:30Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTM5MA==", "fields": {"body": "Please, rebase your branch using git rebase (do not press github 'update branch' button, it's evil ;D)\nEverything else is alright \ud83d\udc4d", "diff": null, "created_at": "2017-12-03T05:22:46Z", "last_edited_at": null, "author": "UnimaginaryUnit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzEwMg==", "fields": {"body": "Please check these screenshots. this && this\nI am confused about the allowed rooms, should we allow render test in coala/corobo?", "diff": null, "created_at": "2017-12-03T17:04:44Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzI3Nw==", "fields": {"body": "@mohitkyadav Please add tests", "diff": null, "created_at": "2017-12-03T17:05:54Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA==", "fields": {"body": "Done :)", "diff": null, "created_at": "2017-12-05T03:33:08Z", "last_edited_at": null, "author": "indmind", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg==", "fields": {"body": "Also, it's not labelled \"bug\" - So, use \"Closes\" instead of \"Fixes\" in commit. \ud83d\udc4d", "diff": null, "created_at": "2017-12-05T07:48:07Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng==", "fields": {"body": "If #37 is merged shortly, it'll still be good to add static/js/*.js to the linted JavaScript files.", "diff": null, "created_at": "2017-12-06T08:28:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw==", "fields": {"body": "Comment on a3bbb6d, file scrap.js, line 10.\nBroken link - unable to connect to https://codein.withgoogle.com/api/program/2017/organization/?status=2 (HTTP Error: 503)\nOrigin: InvalidLinkBear, Section: all.links.", "diff": null, "created_at": "2017-12-06T05:25:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw==", "fields": {"body": "You might need run this 2 line inside the project folder\nexport PATH=$PATH:./node_modules/.bin\nexport NODE_PATH=$NODE_PATH:./node_modules\n\nTo let coala use the local eslint.", "diff": null, "created_at": "2017-12-07T10:15:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg==", "fields": {"body": "Could you modify this as well as part of your folder restructuring?\n\n  \n    \n      gci-leaders/.coafile\n    \n    \n         Line 2\n      in\n      df44130\n    \n    \n    \n    \n\n        \n          \n           files = *.js, static/js/*.js", "diff": null, "created_at": "2017-12-08T06:09:21Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw==", "fields": {"body": "This is so awesome \u2764\ufe0f", "diff": null, "created_at": "2017-12-08T06:58:37Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA==", "fields": {"body": "#49 and #50 should use Closes\nThe rest is good enough, however try to keep to our 'one commit for one issue' guideline next time.", "diff": null, "created_at": "2017-12-08T07:07:31Z", "last_edited_at": "2017-12-08T07:14:48Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng==", "fields": {"body": "LGTM = looks good to me. ack tells the bot to accept the patch", "diff": null, "created_at": "2017-12-08T16:41:11Z", "last_edited_at": "2017-12-08T16:41:29Z", "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDQ1MDU0Mw==", "fields": {"body": "@Vamshi99 @meetmangukiya this is kinda urgent. We could disable auto invite and let our developers help manage the load of inviting with a revised onboarding process.", "diff": null, "created_at": "2017-12-09T11:26:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw==", "fields": {"body": "I think we should have a strong horizontal line between each org, and a much less visually distracting separator between icons and participants.", "diff": null, "created_at": "2017-12-11T06:45:32Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA==", "fields": {"body": "Oh, one last thing, it might be better to use the Wikipedia and Wikimedia logos without text, because it's not readable anyways when the logo is so small. Using just the icon without text will help it fit in more.", "diff": null, "created_at": "2017-12-12T22:05:57Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ==", "fields": {"body": "how do we determine the parent repo of the fork?\n\nThat would be another GitHub API call .. ;)\nBut I meant that it would be OK to just hard code https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nI dont feel particularly inclined to help someone create an alternative version without sending their improvements to this repo.  I am more concerned about the ability for development forks of this repo to build correctly, so newcomers can easily participate in this repo.\nThe problem is that if you use https://raw.githubusercontent.com/andrewda/gh-pages/data.min.json , and dont use https://raw.githubusercontent.com/coala/gh-pages/data.min.json , the build on the fork will be 'reset' , and will need to have several builds before it catches up to the data which has been found in https://raw.githubusercontent.com/coala/gh-pages/data.min.json .\nSo if you do use https://raw.githubusercontent.com/xxxx/gh-pages/data.min.json , you should also fall back to https://raw.githubusercontent.com/coala/gh-pages/data.min.json (and IMO , just hard-code it).", "diff": null, "created_at": "2017-12-13T08:23:52Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng==", "fields": {"body": "That would be one option, but adding a CACHE_VERSION would allow us to avoid this problem entirely in the future, such as if a new key were added or an existing one were taken away.", "diff": null, "created_at": "2017-12-14T03:21:12Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MTk4NjU3Ng==", "fields": {"body": "@Vamshi99 take a look.", "diff": null, "created_at": "2017-12-15T11:46:17Z", "last_edited_at": null, "author": "mohitkyadav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ==", "fields": {"body": "Also the expected results says to use yeah but you have changed it to true", "diff": null, "created_at": "2017-12-17T17:16:16Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw==", "fields": {"body": "@ishanSrt\n\nAlso the expected results says to use yeah but you have changed it to true\n\nthat is the expected results it depends what we passed , but on Tutorial we passed True :)", "diff": null, "created_at": "2017-12-17T17:54:01Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg==", "fields": {"body": "If you want to use var = arr.map then you need to return the whole object, not just mutating them.\nBut let's just use forEach", "diff": null, "created_at": "2017-12-18T07:56:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ==", "fields": {"body": "http://coala.io/newcomer tells you not to do that, twice.  Please read it carefully.", "diff": null, "created_at": "2017-12-18T09:46:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA==", "fields": {"body": "Would be good to have the RSS mentioned in the index.html", "diff": null, "created_at": "2017-12-20T10:41:27Z", "last_edited_at": "2017-12-20T10:41:36Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw==", "fields": {"body": "@blazeu Is it?", "diff": null, "created_at": "2017-12-21T06:07:46Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA==", "fields": {"body": "Ignoring the line is probably the best way.", "diff": null, "created_at": "2017-12-21T00:37:25Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzQ0MjMzMg==", "fields": {"body": "@k4ni5h I am not talking about #432 (comment).\nYou have to change your commit message here - https://github.com/coala/projects/pull/432/commits.\nUse command git commit --amend and then change your commit message there and then do git push --force branch_name\nTake help from http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html to write a good commit", "diff": null, "created_at": "2017-12-21T19:51:29Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzU0NzAxNg==", "fields": {"body": "I suspect that it is the foo & which is tripping it up.", "diff": null, "created_at": "2017-12-22T08:19:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg==", "fields": {"body": "Please squash your rss commits.  There is no need to create a file in one commit and then modify it in another , within one PR.  It is one code addition.", "diff": null, "created_at": "2017-12-22T05:47:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ==", "fields": {"body": "Ideally a PR shouldn't come from your master branch it can complicate things.\nBut don't worry, do not close this one. You can discuss about it in our chat.", "diff": null, "created_at": "2017-12-22T15:31:46Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA==", "fields": {"body": "In general, it's let for reassignable variable or const for unassignable.\nSee our backend js.\nWe have Babel so browser support is pretty good.", "diff": null, "created_at": "2017-12-24T00:53:38Z", "last_edited_at": "2017-12-24T00:54:23Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw==", "fields": {"body": "According to the Best Practices doc mentioned in the original issue, the image size has to be at least 200x200 pixels for smaller sharing posts, or 600x315 pixels for larger sharing posts.\nThe current image is 72x72 pixels (after commit f95ffaf214f529b69de444760653ce75f2621410, so I decided to re-add the previous image instead.", "diff": null, "created_at": "2017-12-28T06:31:41Z", "last_edited_at": "2017-12-28T06:35:40Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ==", "fields": {"body": "I believe an image with a white background works and looks fine.\nExample using an image with a white background:", "diff": null, "created_at": "2017-12-28T06:40:15Z", "last_edited_at": "2017-12-28T06:40:25Z", "author": "zwliew", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng==", "fields": {"body": "@blazeu That was actually caused by my padding: 10px instead of padding: 10px 0. I just fixed the padding instead.", "diff": null, "created_at": "2017-12-29T08:17:08Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDQyNDEwOQ==", "fields": {"body": "@adi23arora apparently my commit message had a trailing period. I have updated the commit \ud83d\ude03 . Please review.\n\nShortlog\nExample:\nsetup.py: Change bears' entrypoint\nMaximum of 50 characters.\nKeeping subject lines at this length ensures that they are readable, and explains the change in a concise way.\nShould describe the change - the action being done in the commit.\nShould have a tag and a short description separated by a colon (:)\nTag\n\nThe file or class or package being modified.\nNot mandatory.\n\nShort Description\n\nStarts with a capital letter.\nWritten in imperative present tense (i.e. Add something, not Adding something or Added something).\nNo trailing period.", "diff": null, "created_at": "2017-12-29T09:52:46Z", "last_edited_at": null, "author": "namantw", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDU1Njg0NA==", "fields": {"body": "Ah! Just forgot about that, my bad. Thanks for clearing it for me though, @namantw  \ud83d\udcaf", "diff": null, "created_at": "2017-12-30T17:09:18Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA==", "fields": {"body": "@blazeu I've mentioned it above. See here.", "diff": null, "created_at": "2017-12-31T10:04:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA==", "fields": {"body": "Note that this was working way back before @dob9601 added a bunch of new codes, so I accepted the task in GCI.", "diff": null, "created_at": "2018-01-03T14:30:35Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng==", "fields": {"body": "done", "diff": null, "created_at": "2018-01-06T15:10:14Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1Njg4MTQ5Mg==", "fields": {"body": "Done @nalinbhardwaj", "diff": null, "created_at": "2018-01-11T09:47:12Z", "last_edited_at": null, "author": "Prabhat-IIT", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ==", "fields": {"body": "and make sure in your commit message you are using only present tense \ud83d\ude09", "diff": null, "created_at": "2018-01-18T22:11:34Z", "last_edited_at": null, "author": "khanchi97", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng==", "fields": {"body": "@Kagamihime Oh forgot to change the comment here. Had already changed the commit by looking at another PR.", "diff": null, "created_at": "2018-01-22T14:01:03Z", "last_edited_at": null, "author": "diveshuttam", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTA3NDcxMQ==", "fields": {"body": "YES!!", "diff": null, "created_at": "2018-01-28T16:19:00Z", "last_edited_at": null, "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTAyMjcyNQ==", "fields": {"body": "@Makman2 nope, target is already used, this is just a little typo in the template: https://github.com/coala/corobo/blob/master/plugins/labhub.py#L119-L124", "diff": null, "created_at": "2018-01-27T23:03:05Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MTQ4NDEzNA==", "fields": {"body": "@Makman2 I couldn't write tests and it's been a long time I took up the issue. Someone else will work on this.", "diff": null, "created_at": "2018-01-30T05:47:50Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng==", "fields": {"body": "coala says:\n|    | [NORMAL] GitCommitBear:\n|    | No newline found between shortlog and body at HEAD commit. Please add one.\n\nYour commit needs to be like this\nMain.css: Fix broken social link\n\nFixes https://github.com/coala/gci-leaders/issues/73\n\n1 newline between shortlog and body.", "diff": null, "created_at": "2018-02-04T14:53:15Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA==", "fields": {"body": "I implemented wisn's suggestion, the one that made the issue a newcomer one, but perhaps there are better ways to solve this issue.", "diff": null, "created_at": "2018-02-06T06:49:20Z", "last_edited_at": null, "author": "mvinoba", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg==", "fields": {"body": "Now we are talking, looks good :D", "diff": null, "created_at": "2018-02-13T11:24:57Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw==", "fields": {"body": "Sure @Makman2 This won't repeat again :)", "diff": null, "created_at": "2018-02-15T14:41:19Z", "last_edited_at": null, "author": "nguptaa", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Nzc1NDczOA==", "fields": {"body": "I think it should be correct now. Please check it.", "diff": null, "created_at": "2018-02-22T17:21:23Z", "last_edited_at": null, "author": "himanshu1603", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDcwOA==", "fields": {"body": "Thanks a lot for helping me so much!", "diff": null, "created_at": "2018-02-22T18:26:52Z", "last_edited_at": null, "author": "himanshu1603", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODIyMTE4Nw==", "fields": {"body": "Hey! Thanks for this contribution, a few minor things though, can we have tests that ensure this is working as expected?\nAlso commit messages should follow the guideline set here", "diff": null, "created_at": "2018-02-24T11:16:25Z", "last_edited_at": "2018-02-24T11:16:45Z", "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODQ5MTUxMw==", "fields": {"body": "Squash your commits into one", "diff": null, "created_at": "2018-02-26T12:53:20Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODU0MjI0MA==", "fields": {"body": "Most of them are dependencies of html-proofer. I updated html-proofer because the version we used to use depends on nokogiri (~> 1.7)", "diff": null, "created_at": "2018-02-26T15:34:50Z", "last_edited_at": null, "author": "LenaAn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODU0MzMyMg==", "fields": {"body": "I apologize for the mistake, @Makman2 . Will keep this in mind next time.", "diff": null, "created_at": "2018-02-26T15:37:48Z", "last_edited_at": null, "author": "aabhaas-vaish", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODU4MjcwOA==", "fields": {"body": "Commit message:\n\nShows\nIf possible try to include labhub as tag (you can omit the ending btw): labhub: Show 'invite me'....\nTo have less chars, you can also remove \"method\", this is more or less redundant :)\nAddedd\n\"Made changes\" can and should be removed ;)\nJust to verify: Have you put the full url to the issue reference?", "diff": null, "created_at": "2018-02-26T17:33:17Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODUxMjk4NA==", "fields": {"body": "You don't need to do that. See the Git basics documentation http://api.coala.io/en/latest/Developers/Git_Basics.html rebase it \ud83d\ude04", "diff": null, "created_at": "2018-02-26T14:02:38Z", "last_edited_at": null, "author": "aashraybhandar1", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODk2MzQ2Nw==", "fields": {"body": "No need of any tests here and also remove commit body.", "diff": null, "created_at": "2018-02-27T17:42:33Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2ODk2NTM4Mg==", "fields": {"body": "Changes made, @Vamshi99 \ud83d\ude03", "diff": null, "created_at": "2018-02-27T17:48:35Z", "last_edited_at": null, "author": "aabhaas-vaish", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM2OTQzMTU4MQ==", "fields": {"body": "LGTM!", "diff": null, "created_at": "2018-03-01T00:25:59Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDE5MTc4MA==", "fields": {"body": "https://deploy-preview-486--coala-projects.netlify.com/#/projects?project=improve_lint_bear_quality looks good", "diff": null, "created_at": "2018-03-19T12:14:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDE5MzY4OA==", "fields": {"body": "You'll see it creates a nice git log, without a messy commit list full of merge commits.", "diff": null, "created_at": "2018-03-19T12:22:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NDI4MDgwNA==", "fields": {"body": "@virresh Could you explain the second part of point 1 above. I am slightly confused with this one.\nAnd regarding the 2nd point,\n\n@kriti21 , from my understanding, it is always possible to determine the shortlog prefix, since always the prefix in the shortlog is the file name which has the maximum changes\nfor example if in a patch, the file PEP8Bear.py has the most changes, the shortlog prefix should be PEP8Bear ideally", "diff": null, "created_at": "2018-03-19T16:43:49Z", "last_edited_at": "2018-03-19T16:45:01Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM3NTczMTQxMg==", "fields": {"body": "I've notified @GitMate; hopefully they fix it soon.", "diff": null, "created_at": "2018-03-23T16:54:57Z", "last_edited_at": "2018-03-23T16:55:34Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng==", "fields": {"body": "I notice that JBoss has two linked on https://gci-leaders.netlify.com/ , but none on https://deploy-preview-148--gci-leaders.netlify.com/ .", "diff": null, "created_at": "2018-04-17T04:57:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA==", "fields": {"body": "fwiw, a part of the problem was that 92a68a2 cleared out all of the data in the deploy.\nWe dont need a special case for JBoss.  The link in GCI is old, but a head request will give us the new URL.\nThat is needed for any github/gitter URL which changes.\nThat should be a new PR which just fixes master.", "diff": null, "created_at": "2018-04-20T02:18:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzM1NTg4MA==", "fields": {"body": "@palash25 Travis builds are failing but that's unrelated to this change. That's why I add the '[skip ci]' statement.", "diff": null, "created_at": "2018-04-22T05:07:35Z", "last_edited_at": null, "author": "attilanagy", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzM1NjQ2OQ==", "fields": {"body": "@attilanagy Travis builds are broken in corobo repo, so need to add anything like skip ci", "diff": null, "created_at": "2018-04-22T05:24:29Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzMwMzAyMg==", "fields": {"body": "Problem needs to be fixed in errbot", "diff": null, "created_at": "2018-04-21T14:55:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA==", "fields": {"body": "#551 (comment) kind of comments can be disabled by turning on travis-buddy only if the tests fail.", "diff": null, "created_at": "2018-04-22T20:56:04Z", "last_edited_at": null, "author": "manankalra", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM0OTM4MQ==", "fields": {"body": "No you are not following the guidelines\nThis is your commit message Spelling mistake correct\nNow read this http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html\nDo you think it follows the guidelines? This is the reason why travis is failing too.\nGive it another try if you still can't figure it out I'll tell you what to do. \ud83d\udc4d", "diff": null, "created_at": "2018-04-30T09:24:04Z", "last_edited_at": "2018-04-30T09:24:34Z", "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM1MjY3NQ==", "fields": {"body": "No, change your commit message not your PR title.\nCommit message is the one you enter when you do git commit -m \"Spelling mistake correct\"", "diff": null, "created_at": "2018-04-30T09:41:04Z", "last_edited_at": "2018-04-30T09:41:19Z", "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTM1NTQyNw==", "fields": {"body": "You clearly have not read the guides and jumped to the issue straight. Go and checkout the guides and the git tutorial.", "diff": null, "created_at": "2018-04-30T09:55:07Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTk3MDM2Nw==", "fields": {"body": "errbotio/errbot#1139 was merged\n\nActually this still cannot be fixed. partial property is set for all messages that were broken down from a single message. There's no way to determine if these messages belong to a particular group, or if the partial message is the first message. Either of which would be required to stop the second divert message.", "diff": null, "created_at": "2018-05-02T13:03:56Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkxMzE0Mg==", "fields": {"body": "But what's the aim of doing that? It doesn't seem to save API hits.\n\nIt does save API hits, and it is also much quicker.  The user should be able to load the specified repositories with only a few API hits used.\nIt is also stored in gh-pages, and then used by community repo at https://github.com/coala/community/blob/master/activity/scraper.py#L144", "diff": null, "created_at": "2018-05-02T09:07:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NTkyNTc0MA==", "fields": {"body": ".. but closed issues/prs is empty ..\n\nI see that https://deploy-preview-18--coala-gh-board.netlify.com/issues.json does include closed & merged items , so the graphql isnt the problem.\nHowever there is only 1577 items in the JSON.  The number should be much higher.\nAccording to https://developer.github.com/v4/guides/resource-limitations/ , the last: 100 is as high as it goes, and it means multiple GraphQL requests will be needed per repo, or the pre-fetcher may need to revert to using the REST API for the larger repos.\nWhat is very nice about the GraphQL approach is that it works much better on PRs, which do not have a token.", "diff": null, "created_at": "2018-05-02T09:55:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NjUxMjg2Ng==", "fields": {"body": "Then issues.json is not storing them in the correct format, and/or the loader is not unserializing them correctly into the user's browser local storage.\n\nTo see the difference, run the old fetch-issues process locally on your machine, and see the format that issues.json needs to be for the unserializer to load it correctly.", "diff": null, "created_at": "2018-05-04T06:08:22Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4NjUyODExNQ==", "fields": {"body": "I've put it as a separate issue as loading the last 100 issues is good enough for now, to get the build working again.\n\nThat's indeed a great idea and we definitely should do that but I don't think that's urgent. Actually I have fixed my script and it is able to fetch all issues (by using cursor in GraphQL) now. I would update this PR later.\n@jayvdb I'm afraid I may not be able to solve #23 during the bonding period. Would it be OK if I put that into coding phase?", "diff": null, "created_at": "2018-05-04T07:46:57Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MTc5OA==", "fields": {"body": "Is this file linted using .eslint in the project? because the last time I made this it isn't linted automatically, and it made me merge code with completely different style from the rest of the project.", "diff": null, "created_at": "2018-05-05T02:03:37Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjMyMw==", "fields": {"body": "I'm willing to merge without updating the lifecycle method in this PR. There's no deprecation warning in 16.3, but the next version will.", "diff": null, "created_at": "2018-05-05T02:13:56Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ==", "fields": {"body": "Just run it manually for now, it can come later in another PR after this one.\n@jayvdb different folder, script isn't included ;)", "diff": null, "created_at": "2018-05-05T02:19:53Z", "last_edited_at": "2018-05-05T02:20:47Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM4Nzc3MDEzMw==", "fields": {"body": "I have tested yet, but it looks good.\n(edit) I have not tested yet, but it looks good.", "diff": null, "created_at": "2018-05-09T15:03:54Z", "last_edited_at": "2018-05-11T11:43:00Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDA5NjMxMQ==", "fields": {"body": "I agree that it is better to reuse the code in python language server. I think we could refer to the arch of python language server.\nRunning coala as a subprocess is a temporary solution. We are investigating call coala from python while it needs some changes from coala side.", "diff": null, "created_at": "2018-05-18T05:11:28Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDY2MjUzMg==", "fields": {"body": "@blazeu What about saving two files, one is full issues.json and the other one called recent-issues.json which only has recent (e.g. a month) issues/prs/reviews? The full issues.json is needed by coala/community and we only load the smaller recent-issues.json to the frontend.", "diff": null, "created_at": "2018-05-21T14:02:29Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MDk5NDI1NQ==", "fields": {"body": "/LGTM\nThanks for the detail!", "diff": null, "created_at": "2018-05-22T13:41:17Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTM2ODYwOA==", "fields": {"body": "Ok how about we limit those concurrency?\nUsing something like https://github.com/sindresorhus/p-all , or see the related modules there, might be useful.", "diff": null, "created_at": "2018-05-23T14:30:08Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MTQxMzgzNg==", "fields": {"body": "Looks good to me @fatma-mohamed \ud83d\udc4d", "diff": null, "created_at": "2018-05-23T16:32:52Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5MzY3ODY4OQ==", "fields": {"body": "You should never close a pull request. You should just get help fixing this one. I also see that there are a few commits in this branch. When you fixed your commit message you should have amended the commit. After amending the commit then you force push it. (see the follow up section in the coala git tutorial) As it is maybe you need to squash them? (Not sure, I'm still learning.)\nA great place to get help is here https://gitter.im/coala/coala - there are a lot of active contributors who monitor that chat.", "diff": null, "created_at": "2018-05-31T21:01:07Z", "last_edited_at": null, "author": "jsecrest", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5Mzc0ODM1MQ==", "fields": {"body": "As @jsecrest points out, you need to squash your commit messages and then do a force push.", "diff": null, "created_at": "2018-06-01T03:34:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDA1MjA4MQ==", "fields": {"body": "@RJ722 yea, after the change, it is weird :).\nThe fix itself looks good to me.\nEdit:\nI think we can keep http://github.com/summerofcode/gsoc-prep-tasks . It is already redirected. So, wasn't an Issue.", "diff": null, "created_at": "2018-06-02T02:46:04Z", "last_edited_at": "2018-06-02T02:50:34Z", "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDA4MTgxNg==", "fields": {"body": "Don't we want a modified version that tells user of the new newcomer process? That is select an issue and ask a maintainer for assignment. And then maintainer will invite the newcomer to the newcomer team and then assign the issue.", "diff": null, "created_at": "2018-06-02T11:55:03Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDE1NjY3OQ==", "fields": {"body": "@Makman2 \ud83d\ude05 I think I have taken care of everything this time, hopefully.", "diff": null, "created_at": "2018-06-03T11:48:28Z", "last_edited_at": null, "author": "EverWinter23", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDcyMTc1NQ==", "fields": {"body": "I found that the test file isn't properly linted.\nI think we should add that in #24 along with the script directory.", "diff": null, "created_at": "2018-06-05T14:05:10Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NDczMDM2Mg==", "fields": {"body": "@li-boxuan seems we never had a package-lock.json committed. I would do that in another issue, that one would also include to verify that package-lock.json has the right content^^", "diff": null, "created_at": "2018-06-05T14:27:37Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5NjY5ODM4Mg==", "fields": {"body": "@meetmangukiya I can't work on this right now. Can you unassign me on this and close the PR? @nvzard can use this code in his PR.", "diff": null, "created_at": "2018-06-12T19:01:11Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ==", "fields": {"body": "Any opinion on if we should should have a wrapped link - If you believe someone is violating the code of conduct <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>__ to maintain line length?", "diff": null, "created_at": "2018-06-21T07:12:04Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE0NTQxOA==", "fields": {"body": "Hiya @shikharvaish28, thanks for reviewing.\nWe now have a template for creating the .gitignore, at https://gitlab.com/coala/mobans/blob/master/templates/gitignore.jj2 .\nIt pulls in a bunch of rules from https://github.com/github/gitignore .\nThe same template is being used on all of our repos, so that they are always in sync, and being updated whenever new rules are added to https://github.com/github/gitignore .\nThis also means that individual additions in each repo are no longer desirable; instead an addition needs to be proposed at https://github.com/github/gitignore , where they will be reviewed carefully and will benefit more people; when accepted, the change will flow through to our repos.", "diff": null, "created_at": "2018-06-21T15:31:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE2NTc0NA==", "fields": {"body": "IGitt is doing its work as it is supposed to but it is making a second trial request because the token is invalid. This portion is handled by backoff https://pypi.org/project/backoff/ which makes the request function retry until some condition is met.", "diff": null, "created_at": "2018-06-21T16:32:37Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTE3MjQzNg==", "fields": {"body": "@nvzard , IGitt is causing this failure.  If you cant disable the 'feature' of IGitt causing this failure, then that is a problem in IGitt.  And please remove 'fix' from this commit message.  It hasnt fixed anything.  It has only obscured the problem, and it will bite us again another day.  This is a workaround at best. :P  A very useful workaround to get the builds working again, but we still need a solution to the problem.", "diff": null, "created_at": "2018-06-21T16:55:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg==", "fields": {"body": "See follow up notice at #2539 (comment)\nThe objective of this issue / PR is to move the apt installs to travis' managed list.", "diff": null, "created_at": "2018-06-22T05:55:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDM5OTczMTEzOQ==", "fields": {"body": "@kriti21\nIf nothing else, then the first point that I'd question is why does the assertion in GitCommitBear get a 'HEAD commit information'\nwhile you are checking for the CommitResult Object in the VCSCommitBearTests\nI know that you are using the same function of self.run_uut which was meant to only return messages,\nBut checking if the hidden result was generated or not is of no use in the GitCommitBear, either don't check it at all, (using some approach as described in my previous comment) or check the whole commit object like what would be done in the VCSCommitResult (both of them should be done imo, i.e don't check for the hidden results in the existing tests, so they won't change, and make another class to check for the hidden results)\nAs for the main logic, I'd recommended previously as well to have a look over generators,\nThe for loop that I had written as an example was simply to illustrate the point why the tests weren't being executed, I expected you to read up a little more on that and use the appropriate things\nWhat would be apt would be using a yield from IMO\nI hope I haven't got things wrong here and am clearer now \ud83d\ude05", "diff": null, "created_at": "2018-06-24T05:39:53Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwMTA4NDU5NQ==", "fields": {"body": "@NiklasMM Noticed one of my mentor's name is not here \ud83d\ude22 (yours \ud83d\ude1b )\nAdding the same with another commit.", "diff": null, "created_at": "2017-05-12T14:01:04Z", "last_edited_at": null, "author": "damngamerz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTM5MDU0OQ==", "fields": {"body": "Even the Quotesbear patch is different... some of them are double and some of them are single. It seems like QuoteBear is still buggy, do you want me to revert 51d79e4 ? @Udayan12167 ? This is invalid, please ignore", "diff": null, "created_at": "2017-06-01T05:09:52Z", "last_edited_at": "2017-06-02T09:27:52Z", "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwNTc0MTc0Ng==", "fields": {"body": "i think that italicizing it may be a little overkill. however, me and my student had a better idea: checkboxes. what do you think? https://github.com/coala/projects/blob/master/data/projects/coala_cli.md check here and let me know your thoughts", "diff": null, "created_at": "2017-06-02T09:47:15Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMwOTgxMDM2Nw==", "fields": {"body": "@meetmangukiya Can you squash the commit? I think you don't need 3 of them just for a single feature added. Also, please add the git library to the requirements so it'll be installed.", "diff": null, "created_at": "2017-06-20T16:15:32Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMDk2MTQ1Ng==", "fields": {"body": "This is what comes up.", "diff": null, "created_at": "2017-06-26T04:31:20Z", "last_edited_at": null, "author": "arrayslayer", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ==", "fields": {"body": "Thank you so much.. this is my first ever PR accepted in an opensource project. hooray!! \ud83d\ude03", "diff": null, "created_at": "2017-07-05T13:20:36Z", "last_edited_at": null, "author": "raghavmittal101", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxMzI4NDM2Ng==", "fields": {"body": "@IpshitaC updated :)", "diff": null, "created_at": "2017-07-06T03:17:31Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNDY2NDgzNg==", "fields": {"body": "Added -> Add.\nAlso, changing PR title is not equivalent to changing commit messages", "diff": null, "created_at": "2017-07-12T06:13:25Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTU5NTQwOQ==", "fields": {"body": "Thank you! It seems the same.", "diff": null, "created_at": "2017-07-16T08:59:35Z", "last_edited_at": null, "author": null, "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTU5OTk2OA==", "fields": {"body": "@Tecbeast-com Hey, your second commit message doesn't follow the commit guidelines, could you please fix it.", "diff": null, "created_at": "2017-07-16T10:27:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTUzODQ0Mw==", "fields": {"body": "Works great so far, I play with it. \ud83d\udc4d\nMaybe we need to put intstruction to run this stuff locally in readme or somewhere...\nsupercool!", "diff": null, "created_at": "2017-07-15T14:43:50Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTYwNjU4Mg==", "fields": {"body": "Sure, here it is http://api.coala.io/en/latest/Developers/Git_Basics.html#follow-up, you have to amend the second commit message updated coala-quickstart on both the CI projects to follow the specified commit message format", "diff": null, "created_at": "2017-07-16T12:39:29Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg==", "fields": {"body": "Sorry to just echo what you said @hemangsk \ud83d\ude1b  Didn't read through the whole thread after seeing the commit message \ud83d\ude1c .", "diff": null, "created_at": "2017-07-17T17:34:00Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg==", "fields": {"body": "@Arsfiqball I have done the required changes, please take a look :)", "diff": null, "created_at": "2017-07-17T23:01:56Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxNzU3MjAyNQ==", "fields": {"body": "@hemangsk added Hindi in the menu. Also rebased it. I think it's good to go?\nPlease let me know if anything else is required.", "diff": null, "created_at": "2017-07-24T22:22:13Z", "last_edited_at": null, "author": "ashwini0529", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTA1Njg2Ng==", "fields": {"body": "@Nosferatul you would also want add the language in this array https://github.com/coala/projects/blob/master/resources/js/app.js#L5", "diff": null, "created_at": "2017-07-31T12:46:25Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTEwNzcyMg==", "fields": {"body": "done", "diff": null, "created_at": "2017-07-31T15:37:57Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMxOTEyNjIxNA==", "fields": {"body": "@hemangsk rultor is not responding because of the github outage, probably", "diff": null, "created_at": "2017-07-31T16:37:18Z", "last_edited_at": null, "author": "adtac", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMDQ2MzYxMw==", "fields": {"body": "@vaibhavgarg11 this is just getting worse, I think it'd be better to create a new PR from a new branch branched off master. ;)", "diff": null, "created_at": "2017-08-05T18:56:03Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg==", "fields": {"body": "Hello,\nIt looks like your commit doesn't follow our guidelines. Please take a look at https://coala.io/commit for the commit guidelines.\nI suggest using your current PR title as the commit shortlog and describe what you did on the commit description. Don't forget to mention the issue on the bottom with Fixes!\nThanks!", "diff": null, "created_at": "2017-08-10T02:53:12Z", "last_edited_at": "2017-08-10T02:53:32Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ==", "fields": {"body": "Yeah definitely :) yukiisbored already provided you the link where you can read commit guidelines, Let us know if you need any help :)", "diff": null, "created_at": "2017-08-10T16:01:49Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw==", "fields": {"body": "One thing, you don't have to create a new PR or branch to fix stuff/rewriting history. Just do it on the same branch and do a force push.", "diff": null, "created_at": "2017-08-11T23:43:03Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyMzMxODIwOQ==", "fields": {"body": "@userzimmermann Yeah its an angular plugin https://github.com/btford/angular-markdown-directive to convert the markdown to html. Its being used at https://github.com/coala/landing-frontend/blob/master/partials/tabs/languages.html#L79 as well.\n@sils I was trying to follow this https://www.uplabs.com/posts/profile-card-albert-einstein for bio and name, but <p> looks better. fixed it", "diff": null, "created_at": "2017-08-18T10:24:11Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTI4Mjg4MA==", "fields": {"body": "Can you give me push access to your repo, so I can make some minor changes, please?", "diff": null, "created_at": "2017-08-28T07:39:10Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTMwMDc0NA==", "fields": {"body": "@hemangsk thank you !", "diff": null, "created_at": "2017-08-28T09:03:11Z", "last_edited_at": null, "author": "Nosferatul", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNTUzODU5OQ==", "fields": {"body": "Thanks @jendrikseipp and @hemangsk! \ud83c\udf89", "diff": null, "created_at": "2017-08-29T02:42:15Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMyNjE0ODYwNw==", "fields": {"body": "", "diff": null, "created_at": "2017-08-30T23:39:36Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ2NTI0OA==", "fields": {"body": "@prnvdixit I thought of that issue as being always open, as we can never have enough of them (squirrels). \ud83d\ude1b So this PR shouldn't actually close the issue IMO.", "diff": null, "created_at": "2017-10-18T05:36:08Z", "last_edited_at": "2017-10-18T05:38:25Z", "author": "swapagarwal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjI3MA==", "fields": {"body": "@prnvdixit Well, I'd prefer suggesting these to the assignee as that is the official way to contribute. \ud83d\ude04", "diff": null, "created_at": "2017-10-18T06:23:54Z", "last_edited_at": null, "author": "swapagarwal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjUyMA==", "fields": {"body": "@prashant0598 Some suggestions can be found at #301 \ud83d\ude04", "diff": null, "created_at": "2017-10-18T06:25:15Z", "last_edited_at": null, "author": "swapagarwal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ3Nzc5Mw==", "fields": {"body": "@prashant0598 Actually, you have to mention it in commit in the PR \ud83d\ude09", "diff": null, "created_at": "2017-10-18T06:55:26Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzNzQ5MDUyNg==", "fields": {"body": "@prashant0598 fix gitmate issues and change the commit message to something similar to ship_it: Add squirrel images . For more, read commit guidelines http://coala.io/commit", "diff": null, "created_at": "2017-10-18T07:52:08Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODMyMzk4MQ==", "fields": {"body": "@prnvdixit Thanks for helping a newbie \ud83d\udc4d", "diff": null, "created_at": "2017-10-20T21:15:17Z", "last_edited_at": null, "author": "cornu-ammonis", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzODg5NTQwNw==", "fields": {"body": "Yeah, there are errors \ud83d\ude09- Please fix them using coala \ud83d\ude04. For knowing more about how to apply patches using coala refer this \ud83d\udc4d", "diff": null, "created_at": "2017-10-24T07:09:48Z", "last_edited_at": "2017-10-24T07:09:58Z", "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDMzOTAxNDI5NQ==", "fields": {"body": "@prashant0598 Fix the issues as said by @prnvdixit and squash your commits into a single message.", "diff": null, "created_at": "2017-10-24T14:42:57Z", "last_edited_at": null, "author": "kartikeys98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzIwODY4OQ==", "fields": {"body": "Go through the newcomer guide http://coala.io/newcomer first. It will help you to write good commit messages.", "diff": null, "created_at": "2018-07-07T11:23:13Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwMzIwOTMyNg==", "fields": {"body": "@igagankalra, you need to adjust your commit message to follow https://coala.io/commit\nDont worry about the moban sync problem.  Someone else will fix that, or we'll show you how to fix that, once your commit is OK.", "diff": null, "created_at": "2018-07-07T11:36:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNDAwMTU5Nw==", "fields": {"body": "@refeed, different floating number implementations.\nJust using an if to get your build green.", "diff": null, "created_at": "2018-07-10T23:54:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw==", "fields": {"body": "Ugh.  Repeat of #5633 .  @JoeSiew , do not ever delete your fork.\nFollow our newcomers guide carefully https://github.com/coala/coala/blob/master/docs/Developers/Newcomers_Guide.rst", "diff": null, "created_at": "2018-07-19T04:27:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjg0NzU0Ng==", "fields": {"body": "You can also find out squashing guide at https://api.coala.io/en/latest/Developers/Git_Basics.html#rebasing.", "diff": null, "created_at": "2018-07-22T07:39:53Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwNjgxMTM5Mw==", "fields": {"body": "The PR won't be merged until you fix what has been suggested. And every PR should pass all test case.\n\nDo not close this PR\nDo not delete this branch\nDo not create new commits.\n\nMake changes in the same commit and use git commit --amend  to that.", "diff": null, "created_at": "2018-07-21T17:28:32Z", "last_edited_at": "2018-07-21T17:28:53Z", "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODA5NzgyMw==", "fields": {"body": "I am getting a lot of failed builds with this PR and #85 ; not sure what is the problem.\n\nI checked the log. Those fail builds are due to the error element (\".modal-dialog button.close\") still not existing after 60000ms\nI am also facing this issue recently. The reason could be, syncing issues takes too much time, or the page isn't correctly loaded due to some unknown reason.\nI wonder if we should abandon the current integration test, which is instable and hard to report coverage, and start building unittests.", "diff": null, "created_at": "2018-07-26T13:29:58Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA==", "fields": {"body": "@MacBox7 will do it by today", "diff": null, "created_at": "2018-07-29T05:35:51Z", "last_edited_at": null, "author": "HemabhKamboj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY2MjgwNQ==", "fields": {"body": "Someone forgot to rebase ! :P", "diff": null, "created_at": "2018-07-29T09:07:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY3NTIxMg==", "fields": {"body": "Some general thoughts:\nI believe .babelrc stuff can be put into package.json .. I prefer that, but what about other ppl?\ncodecov.yml is currently doing nothing, so isnt necessary.  Data can be sent to codecov without it, and the percentage will slowly rise.  until it gets to a decent percentage, tracking that isnt useful.\ntravis after_success/after_failure needs to be deactivated for the moban job.\njest.config.js - I am not a fan of checking in a large config file of comments about possible settings.  We know whether to find the docs if we want more settings.", "diff": null, "created_at": "2018-07-29T12:40:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODY5MTkwNA==", "fields": {"body": "@jayvdb I would prefer .babelrc than package.json", "diff": null, "created_at": "2018-07-29T17:15:56Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODgyMDU2Nw==", "fields": {"body": "It got stuck again, at\n$ coala --non-interactive\n[WARNING][10:30:45] Section `all.todos` contain invalid language setting: 'Language `python3` is not a valid language name or not recognized by coala.'\nExecuting section all...\n\nIm pretty sure we know why and have a fix coming for that.", "diff": null, "created_at": "2018-07-30T10:34:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODkxNTY5Nw==", "fields": {"body": "A filter to hide the users own actions/content is a general setting which would apply to most 'detail' components.  Issues and PRs and Review comments, etc.  The only exception is when a users PR passes, but generally the user has other notifications for that event anyway.\nThe user doesnt need another notification for their own actions.  It should be not shown by default , but the user can enable it of course.\nAnyways, I can see how it isnt relevant to this PR. And after we can use gh-board interactively maybe I will have a different perspective on this.", "diff": null, "created_at": "2018-07-30T15:59:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwODkyNDA0OQ==", "fields": {"body": "This is blocked - please stop pushing.", "diff": null, "created_at": "2018-07-30T16:23:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQwOTQyNzkzNg==", "fields": {"body": "@kriti21 , we can re-organise the tasks and milestones later. ;-)", "diff": null, "created_at": "2018-08-01T02:23:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDQ5MTA2NA==", "fields": {"body": "I would like to see separate commits included in this PR for all of the configuration upgrades which we need (except for LabHub):\n\n#380\n#381\n#383\n\nAny others?\nOnly by putting them all in here together can we ensure that this is the last change needed to DefaultConfigMixin for your project.", "diff": null, "created_at": "2018-08-05T02:32:26Z", "last_edited_at": "2018-08-05T02:33:44Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDUyMTc0NQ==", "fields": {"body": "__new__ & __init__ combined are the implementation of the contructor.  You can read about it at https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming) , especially https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)#Python\nFoo() is never a constructor.  It is invoking a constructor.  It is rarely, and always incorrectly, called the constructor.  It should be called instantiation.", "diff": null, "created_at": "2018-08-05T13:53:56Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMDYxNjY3NQ==", "fields": {"body": "As #565 is still open, I guess this could be Closes ... ?", "diff": null, "created_at": "2018-08-06T07:40:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMTc3MjMxMw==", "fields": {"body": "Source map demo: https://5b6c47e2b13fb1499142899d--coala-gh-board.netlify.com/ (open devtools, check console and sources tab)\nNot as nice as I would've hoped, but it's functional and debug breakpoints are working.", "diff": null, "created_at": "2018-08-09T14:13:35Z", "last_edited_at": "2018-08-09T14:57:13Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMjI0OTk3MQ==", "fields": {"body": "Also you sent some patches upstream.  They should be noted, even though they havent been merged.", "diff": null, "created_at": "2018-08-11T04:29:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMjMyNjcwNw==", "fields": {"body": "Your commit message doesn't include the issue link", "diff": null, "created_at": "2018-08-12T08:16:50Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMjMyODMwNg==", "fields": {"body": "There is a redundant : in your commit message - Closes: should be Closes\n\nI don't know why, but I have always used the : :D", "diff": null, "created_at": "2018-08-12T08:48:17Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMjMyODUyOQ==", "fields": {"body": "I don't know why, but I have always used the :\n\nI would suggest sticking to https://api.coala.io/en/latest/Developers/Writing_Good_Commits.html, but it's your choice.", "diff": null, "created_at": "2018-08-12T08:52:35Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzA0MzM5Nw==", "fields": {"body": "I'll write tests, but waiting for @Makman2 's thoughts first.", "diff": null, "created_at": "2018-08-14T23:03:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzEzMTE2OA==", "fields": {"body": "Would you consider doing this in stages? First let us transition this into tuple based structures and then worry about introducing dicts (OrderedDicts) or class based filters.", "diff": null, "created_at": "2018-08-15T08:34:15Z", "last_edited_at": "2018-08-15T08:34:35Z", "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxMzc3NDg0Ng==", "fields": {"body": "What about moving the text outside of the icon? that's usually the way its done.", "diff": null, "created_at": "2018-08-17T06:52:18Z", "last_edited_at": "2018-08-17T06:52:28Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNTk0OTEyMw==", "fields": {"body": "Hi @Dhiraj240, thanks for the PR! Check out this link to learn more about proper commit format (improper commit format will cause the builds to fail). Also, make sure to squash your commits into one!", "diff": null, "created_at": "2018-08-25T07:33:32Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNzg1ODA0Ng==", "fields": {"body": "Ha, I was just going to explain the build failure ... and recommend exactly what you did as the solution. awesome", "diff": null, "created_at": "2018-09-01T12:58:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNzg2MjI5NA==", "fields": {"body": "Issue now assigned.", "diff": null, "created_at": "2018-09-01T14:10:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNzg5NjUxNg==", "fields": {"body": "Dup of #2680 , not reviewed for two weeks.", "diff": null, "created_at": "2018-09-02T00:29:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxNzk0ODM1Mw==", "fields": {"body": "@Mah1ndra Also run coala locally on the repo before pushing the changes.", "diff": null, "created_at": "2018-09-02T18:04:44Z", "last_edited_at": null, "author": "shikharvaish28", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxODA1NzE0OQ==", "fields": {"body": "Nice work with the testing. The commit message still seems a bit out of place. How about __init__.py: Arrange imports alphabetically? It is short and crisp, and still conveys the relevant information about the commit.", "diff": null, "created_at": "2018-09-03T09:29:09Z", "last_edited_at": "2018-09-03T09:30:10Z", "author": "mach64", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxODAwMTg5NQ==", "fields": {"body": "You have to ensure all tests pass locally before you push it to github. This includes not having any warnings thrown by pytest. Follow this to properly test your changes.", "diff": null, "created_at": "2018-09-03T05:12:10Z", "last_edited_at": null, "author": "mach64", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxODAwNTM3OA==", "fields": {"body": "The CI builds are failing because your local repo is out of sync with master. You'll have to rebase first.", "diff": null, "created_at": "2018-09-03T05:39:29Z", "last_edited_at": null, "author": "mach64", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxODE0ODk0Nw==", "fields": {"body": "@andrewda thank you , its done.", "diff": null, "created_at": "2018-09-03T15:44:29Z", "last_edited_at": null, "author": "Dhiraj240", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQxODY2ODAyNQ==", "fields": {"body": "This made me recall #5204 (comment)\n\nirony: a commit to fix commit messages has an invalid commit message.", "diff": null, "created_at": "2018-09-05T09:40:22Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyMTAxNjI1Mg==", "fields": {"body": "@corona10 ping", "diff": null, "created_at": "2018-09-13T13:55:56Z", "last_edited_at": null, "author": "haeungun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyMTc5OTE0Mw==", "fields": {"body": "Thanks @123vivekr . I will make the changes you said .", "diff": null, "created_at": "2018-09-16T17:20:43Z", "last_edited_at": null, "author": "PrajwalM2212", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ==", "fields": {"body": "So I'm not sure whether this PR will get merged or not, only the maintainers can tell us (cc @jayvdb @Makman2  ) but I would like to start suggesting alternatives for the quote that might replace the current one.\nOne of my favorite quotes is the Linus Law and I think this goes well with coala since our community is so much focussed on reviews and we try to turn newcomers into reviewers early on in their open source careers.\n\n\"given enough eyeballs, all bugs are shallow\"\n\nOr this Martin Fowler quote\n\n\u201cI\u2019m not a great programmer; I\u2019m just a good programmer with great habits.\u201d", "diff": null, "created_at": "2018-09-24T11:37:13Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNDA5MTYxMg==", "fields": {"body": "@rishabhgarg25699 His commit message is fine. Please have a look at the tests below.\nIt is highly recommended that you should cross-check before commenting anything.", "diff": null, "created_at": "2018-09-24T19:14:10Z", "last_edited_at": "2018-09-24T19:15:44Z", "author": "shikharvaish28", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNDAxNjM2MQ==", "fields": {"body": "seems like an overkill of moral behaviour in the context of inability to take a joke. \ud83e\udd28\nWhen we say \"Do or die\" are we imparting death upon someone or disrespecting in any way?", "diff": null, "created_at": "2018-09-24T15:27:19Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA==", "fields": {"body": "@ishanSrt It\u2019s not about not taking a joke, it\u2019s about good copy writing. Jokes are great! But it\u2019s a readme: it should communicate about the project. I just believe that space could be better utilised to communicate about the project, than telling an old joke.\nBut I\u2019m not gonna fight for the point - it was a good faith suggestion by someone who is not a contributor to this project, take it or leave it \ud83d\udc96", "diff": null, "created_at": "2018-09-24T15:38:37Z", "last_edited_at": null, "author": "joenash", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNDIxMjcyMQ==", "fields": {"body": "This was something I never thought about \ud83e\udd14 even I started thinking why that quote is there but yeah it can have a better replacement.", "diff": null, "created_at": "2018-09-25T05:33:39Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA==", "fields": {"body": "@rishabhgarg25699 this is very rude behaviour from you considering how many rules, you yourself have broken since you entered this org and as far as I see the earlier PR was opened without any requests for assignment for this issue, which make this one genuine.\nAgain I repeat, no need to use any form of strong language or bringing down someone like,\n\nYou did not make the rules of yours and also if want to only practise then you can do this in your github account on any your project\n\nWhen you yourself aren't aware of half of them.", "diff": null, "created_at": "2018-10-01T01:20:24Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNTgxMTI5OA==", "fields": {"body": "@ishanSrt @Daronion @Naveenaidu I am really very sorry for my hard language . I will remember this thing from next time and does not demotivate any newcomer.I once again Sorry @Daronion for my language. I realize this is my fault for demotivating a newcomer .", "diff": null, "created_at": "2018-10-01T07:19:11Z", "last_edited_at": "2018-10-01T07:31:18Z", "author": "rishabhgarg25699", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNTgxNzM3Nw==", "fields": {"body": "@Naveenaidu oops didn't mean to misspell your name, I think it must have autocompleted and I didn't notice.\nThank you guys (Naveenaidu, ishanSrt, rishabhgarg25699) for taking your time to check this even if it is just a newcomer issue and it has no impact on the actual project. Helpful and active people is what I was hoping for since I'm willing to start documenting myself on this project so that I can solve greater issues.\nDidn't mean to cause any trouble or make you guys feel like you demotivated me. I was just not aware and didn't want to break any rules.\nI reopened the PR", "diff": null, "created_at": "2018-10-01T07:45:49Z", "last_edited_at": "2018-10-01T07:46:11Z", "author": "Daronion", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNTk2Mjk5OA==", "fields": {"body": "@rishabhgarg25699 I think you really need to understand what review is\n\nYour changes and PR are good but tell me one thing How you are working on this issue. You are not assigned to this issue. Without assigning , you draft a PR . Also in the issue of this PR there was a reference a open PR but you ignore that and open your PR . Please follow the rules and regulations of the organisation.\n\nNext time no such things in review, this is opensource no one is forced here, you need to remove your this type of review from all the PR you have reviewed (if any) and yeah like I said earlier please review your review first, you haven't done that.", "diff": null, "created_at": "2018-10-01T16:02:11Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNjQwNDQ4Mw==", "fields": {"body": "@Makman2 @wisn suggested earlier that\nderiving and instance already exists.Don't need to write it again as deriving instance. It is also a typo by the way.And\nSince type and instance already exists, I don't think you need to write it again as type instance.\nSee previous to previous commits of wisn\nSo I also removed data instance", "diff": null, "created_at": "2018-10-02T19:42:34Z", "last_edited_at": "2018-10-02T19:43:25Z", "author": "rishabhgarg25699", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNjUwNzMzOQ==", "fields": {"body": "@manankalra\nI have amended the commit message as per guidelines", "diff": null, "created_at": "2018-10-03T04:22:52Z", "last_edited_at": null, "author": "bhawesh96", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzM4NjA4Nw==", "fields": {"body": "Hmm. I agree with coala/documentation#252 (comment)\nwhile in the case of #3754 (comment) , I guess you should add a box sought of thing which encloses the links in a well formated way e.g. in http://enwp.org/WP:W2W\nAnyways, lets wait other to review it.", "diff": null, "created_at": "2018-10-05T14:31:42Z", "last_edited_at": null, "author": "shikharvaish28", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzQ0MTkyMw==", "fields": {"body": "You are not following the commit guidelines\nChange your commit to something like this\ndocs: Add short url for newcomers guide\nCloses:", "diff": null, "created_at": "2018-10-05T17:32:59Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzQ0Mjk5OQ==", "fields": {"body": "How does it look?\n\n\nNice work there, looks pretty decent \ud83d\ude04 . Maybe you can reduce the height of that black box a little, or keep both the urls in independent black boxes ,Eg. Short URL [BOX1] [BOX2].\nIt's designing, so you'll have to design and check which one looks better  \ud83d\ude09 .\nThe changes you've done so far aren't visible at  https://deploy-preview-5788--coala-api.netlify.com/.\nYour'e not fixing any bug, so you're commit message shouldn't use fixes. Please refer to https://api.coala.io/en/latest/Developers/Writing_Good_Commits.html for details :)", "diff": null, "created_at": "2018-10-05T17:36:49Z", "last_edited_at": null, "author": "srivama", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzQ5MjY5Nw==", "fields": {"body": "Builds fail, did you try to find out the reason? @AkshJain99", "diff": null, "created_at": "2018-10-05T20:41:16Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzQ5MzAzNw==", "fields": {"body": "Actually nvm, your change doesn't affect anything that would lead to such an error. Approving, but merge has to wait until CI gets green again^^", "diff": null, "created_at": "2018-10-05T20:42:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzU4NTcyOQ==", "fields": {"body": "Is the markdown issue an upstream bug of errbot? If that's the case, we'd better raise an upstream issue ;)", "diff": null, "created_at": "2018-10-06T16:08:44Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzY3ODIxNA==", "fields": {"body": "@ayan-b Fixed, thanks for the pointers smile\n\nLooks good, just edit the PR message as well, i.e. here: #5789 (comment) .", "diff": null, "created_at": "2018-10-07T19:06:02Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzYyMTgyMA==", "fields": {"body": "Yeah, I raised a query regarding that on their gitter room. Will open up an issue if I get a positive response regarding this error.\nP.S. : Upstream Issue: errbotio/errbot#1255", "diff": null, "created_at": "2018-10-07T03:01:45Z", "last_edited_at": "2018-10-07T08:37:51Z", "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzYyNDk5OA==", "fields": {"body": "@Makman2 @ayan-b Just a query. Why is it so that the changes aren't visible on netlify deploy?\n\nI have only added for newcomers guide: https://deploy-preview-5788--coala-api.netlify.com/developers/newcomers_guide", "diff": null, "created_at": "2018-10-07T04:28:20Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzYzNjA4Ng==", "fields": {"body": "Approach the problem in tasks.\nFirst check the log level and print and then proceed. The output is relayed to the log_printer, be sure to know what is happening and you will easily solve it.", "diff": null, "created_at": "2018-10-07T08:40:41Z", "last_edited_at": null, "author": "sladyn98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzYzNzQ1OQ==", "fields": {"body": "I think PR is good to go \ud83d\udc4d", "diff": null, "created_at": "2018-10-07T09:05:15Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzcyNjk1Mw==", "fields": {"body": "Hello, @richardson-souza before sending the pr please check whether the code is following PEP8 guidelines or not,  you can have an IDE or an editor offering PEP8 checks to do the same. Secondly, you need to change the commit message as it is not following the expected style see here https://api.coala.io/en/latest/Developers/Writing_Good_Commits.html  and one more thing please tick mark the checkbox in your pr message description", "diff": null, "created_at": "2018-10-08T05:47:49Z", "last_edited_at": "2018-10-08T05:49:13Z", "author": "sourabh1031", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyNzkwNjU5MA==", "fields": {"body": "@richardson-souza , please re-push to your branch richardson , and then re-open this PR.\nIt is never necessary to open a second PR.  You need to fix the existing PR.\nA PR is just a link to a branch name in your repo.", "diff": null, "created_at": "2018-10-08T16:55:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyODY0NjMzMA==", "fields": {"body": "@shikharvaish28 I have changed it", "diff": null, "created_at": "2018-10-10T16:47:55Z", "last_edited_at": null, "author": "AkshJain99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDEyOklzc3VlQ29tbWVudDQyODY5ODEyOA==", "fields": {"body": "@RaiVaibhav  I have change the commit message as you said \ud83d\ude04", "diff": null, "created_at": "2018-10-10T19:18:55Z", "last_edited_at": null, "author": "AkshJain99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzMjQxMg==", "fields": {"body": "You mean roomname_match, right?", "diff": "@@ -242,14 +242,63 @@ def mark_cmd(self, msg, match):\n                             bot_prefix=self.bot_config.BOT_PREFIX)\n                         )\n \n-    @re_botcmd(pattern=r'^assign\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear\n-               re_cmd_name_help='assign <complete-issue-URL>',\n-               flags=re.IGNORECASE)\n-    def assign_cmd(self, msg, match):\n+    @arg_botcmd('issue_reference', type=str)\n+    def assign(self, msg, issue_reference):\n         \"\"\"Assign to GitLab and GitHub issues.\"\"\"  # Ignore QuotesBear\n-        org = match.group(2)\n-        repo_name = match.group(3)[:-1]\n-        iss_number = match.group(4)\n+\n+        # Complete URL to issue\n+        def process_full_url(issue_reference):\n+            rgx = r'https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(2), m.group(3)[:-1], m.group(4)\n+\n+        # Short issue reference (e.g. `coala/corobo#12`)\n+        def process_short_ref(issue_reference):\n+            rgx = r'(.+?)/(.+?)#(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(1), m.group(2), m.group(3)\n+\n+        # Super short issue reference (e.g. `#1234`)\n+        def process_super_short_ref(issue_reference):\n+            issue_rgx = r'#(\\d+)'\n+            issue_reference_match = re.fullmatch(issue_rgx, issue_reference)\n+\n+            if issue_reference_match is None:\n+                return None\n+\n+            roomname_rgx = r'(.+?)/(.+)'\n+            roomname_match = re.fullmatch(\n+                roomname_rgx, msg.frm.room.idd, re.IGNORECASE)\n+\n+            if roommatch is None:", "created_at": "2017-10-03T15:15:34Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzNDEyMw==", "fields": {"body": "msg.frm.room.uri instead of msg.frm.room.idd", "diff": "@@ -242,14 +242,63 @@ def mark_cmd(self, msg, match):\n                             bot_prefix=self.bot_config.BOT_PREFIX)\n                         )\n \n-    @re_botcmd(pattern=r'^assign\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear\n-               re_cmd_name_help='assign <complete-issue-URL>',\n-               flags=re.IGNORECASE)\n-    def assign_cmd(self, msg, match):\n+    @arg_botcmd('issue_reference', type=str)\n+    def assign(self, msg, issue_reference):\n         \"\"\"Assign to GitLab and GitHub issues.\"\"\"  # Ignore QuotesBear\n-        org = match.group(2)\n-        repo_name = match.group(3)[:-1]\n-        iss_number = match.group(4)\n+\n+        # Complete URL to issue\n+        def process_full_url(issue_reference):\n+            rgx = r'https://(github|gitlab)\\.com/([^/]+)/([^/]+/)+issues/(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(2), m.group(3)[:-1], m.group(4)\n+\n+        # Short issue reference (e.g. `coala/corobo#12`)\n+        def process_short_ref(issue_reference):\n+            rgx = r'(.+?)/(.+?)#(\\d+)'\n+            m = re.fullmatch(rgx, issue_reference, re.IGNORECASE)\n+\n+            if m is None:\n+                return None\n+\n+            return m.group(1), m.group(2), m.group(3)\n+\n+        # Super short issue reference (e.g. `#1234`)\n+        def process_super_short_ref(issue_reference):\n+            issue_rgx = r'#(\\d+)'\n+            issue_reference_match = re.fullmatch(issue_rgx, issue_reference)\n+\n+            if issue_reference_match is None:\n+                return None\n+\n+            roomname_rgx = r'(.+?)/(.+)'\n+            roomname_match = re.fullmatch(\n+                roomname_rgx, msg.frm.room.idd, re.IGNORECASE)", "created_at": "2017-10-03T15:21:22Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjMzNTU5Nw==", "fields": {"body": "@Makman2 yes docker compresses data. The actual amount of data that\u2019s pushed will be compressed before sending,", "diff": "@@ -1,3 +1,44 @@\n+What is Docker ?\n+================\n+\n+Docker is a tool designed to make it easier to create, deploy, and run\n+applications by using containers. Containers allow a developer to package\n+up an application with all of the parts it needs, like libraries and other\n+dependencies, and ship it all out as a single package.\n+\n+With the help of containers, the developer can rest assured that\n+the application will run on other machine regardless of any\n+customized settings that machine might have that could differ from the\n+machine used for writing and testing the code.\n+\n+Unlike a virtual machine, rather than creating a whole virtual operating\n+system, Docker allows applications to use the same kernel as the system\n+that they're running on and only requires applications be shipped\n+with things not already running on the host computer. This gives a\n+significant performance boost and reduces the size of the application.", "created_at": "2017-10-23T17:20:42Z", "last_edited_at": null, "author": "acashmkj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ==", "fields": {"body": "Please make it to  https://coala.io instead https://coala.io/", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T12:19:56Z", "last_edited_at": "2017-11-03T14:42:32Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg==", "fields": {"body": "That is irrelevant", "diff": "@@ -1,4 +1,5 @@\n-.. image:: https://cloud.githubusercontent.com/assets/7521600/15992701/ef245fd4-30ef-11e6-992d-275c5ca7c3a0.jpg\n+.. image:: https://cloud.githubusercontent.com/assets/5716520/24838296/a9cf5f04-1d45-11e7-855c-47b816ce1e09.png\n+    :target: https://coala.io/", "created_at": "2017-11-03T13:58:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA==", "fields": {"body": "This can be a bit misleading. I suggest you, write it in the form minified files (*.min.js) and backup files (*.orig).", "diff": "@@ -39,6 +39,15 @@ wide coafile which has the lowest priority. The ``default_coafile`` must\n lie in the coala installation directory and is valid for everyone using\n this coala installation.\n \n+It can be used to define the type of files you usually\n+don't want to lint like minified files\n+and backup files (e.g. ``*.min.js``, ``*.orig``)", "created_at": "2017-11-03T14:36:02Z", "last_edited_at": "2017-11-03T14:41:58Z", "author": "troublemagnet", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkyODgyOA==", "fields": {"body": "What is 288 ?", "diff": "@@ -31,6 +31,13 @@ app.directive('getinvolved', ['$http', function ($http) {\n             $scope.loadMore = function () {\n                 $scope.totalDisplayed += 20;\n             };\n+\n+            $scope.nomoreItems = function () {\n+                if($scope.totalDisplayed > 288 ) {", "created_at": "2017-11-04T12:04:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkwODkzNA==", "fields": {"body": "an* issue template", "diff": "@@ -0,0 +1,114 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Add a ISSUE_TEMPLATE.md file to a GitHub repository.\"\n+difficulty: low\n+initiatives:\n+  - GCI\n+issues:\n+  - \"https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md\"\n+markdown: add_issue_template.md\n+mentors:\n+  - Monal5031\n+  - yashovardhanagrawal\n+  - prashant0598\n+name: \"Add a ISSUE_TEMPLATE.md file to GitHub repository\"\n+requirements:\n+  - \"Joined http://coala.io/chat .\"\n+tags:\n+  - github\n+  - markdown\n+  - standard templates\n+---\n+This is a repeatable task for Google Code-in.\n+\n+## Task\n+\n+Add a ISSUE_TEMPLATE.md file to a GitHub repository mentioned in the\n+issue's wiki, so that a standard template appears whenever someone\n+will try to create a new issue.\n+\n+## Requirements\n+\n+This task only requires use of the GitHub web interface.\n+\n+## Process\n+\n+There are three steps for this task:\n+\n+1. Select a repository with open issue from wiki link.\n+2. Determine a suitable standard issue template for the repository.\n+3. Create a pull request adding a `ISSUE_TEMPLATE.md` file.\n+\n+----\n+\n+## Step 1\n+\n+Go through the [issue wiki](https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md)\n+and select an issue which is not yet completed or taken by someone else.\n+\n+Check that GitHub does not show anything while opening an issue\n+directly from GitHub UI, (You will have to check this manually).\n+\n+Check that the repository does not have a `ISSUE_TEMPLATE.md` file.\n+Maybe GitHub does not recognise the contents of the file.\n+\n+Check the pull requests for the repository.\n+Maybe someone has already proposed a `ISSUE_TEMPLATE.md` file.\n+Do not send another pull request to add a `ISSUE_TEMPLATE.md` file.\n+\n+## Step 2\n+\n+### Does the repository already have a issue template selected?", "created_at": "2017-11-09T09:48:35Z", "last_edited_at": null, "author": "neelanshsahai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkxMDE3MA==", "fields": {"body": "Make sure you are not missing out* any points which must be there* in the file.", "diff": "@@ -0,0 +1,114 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Add a ISSUE_TEMPLATE.md file to a GitHub repository.\"\n+difficulty: low\n+initiatives:\n+  - GCI\n+issues:\n+  - \"https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md\"\n+markdown: add_issue_template.md\n+mentors:\n+  - Monal5031\n+  - yashovardhanagrawal\n+  - prashant0598\n+name: \"Add a ISSUE_TEMPLATE.md file to GitHub repository\"\n+requirements:\n+  - \"Joined http://coala.io/chat .\"\n+tags:\n+  - github\n+  - markdown\n+  - standard templates\n+---\n+This is a repeatable task for Google Code-in.\n+\n+## Task\n+\n+Add a ISSUE_TEMPLATE.md file to a GitHub repository mentioned in the\n+issue's wiki, so that a standard template appears whenever someone\n+will try to create a new issue.\n+\n+## Requirements\n+\n+This task only requires use of the GitHub web interface.\n+\n+## Process\n+\n+There are three steps for this task:\n+\n+1. Select a repository with open issue from wiki link.\n+2. Determine a suitable standard issue template for the repository.\n+3. Create a pull request adding a `ISSUE_TEMPLATE.md` file.\n+\n+----\n+\n+## Step 1\n+\n+Go through the [issue wiki](https://github.com/coala/coala/wiki/List-of-repositories-for-ISSUE_TEMPLATE.md)\n+and select an issue which is not yet completed or taken by someone else.\n+\n+Check that GitHub does not show anything while opening an issue\n+directly from GitHub UI, (You will have to check this manually).\n+\n+Check that the repository does not have a `ISSUE_TEMPLATE.md` file.\n+Maybe GitHub does not recognise the contents of the file.\n+\n+Check the pull requests for the repository.\n+Maybe someone has already proposed a `ISSUE_TEMPLATE.md` file.\n+Do not send another pull request to add a `ISSUE_TEMPLATE.md` file.\n+\n+## Step 2\n+\n+### Does the repository already have a issue template selected?\n+\n+It is quite common for a repository to not have a `ISSUE_TEMPLATE.md`\n+file, but still have already selected a template which they want to use or\n+even have some points which need be added.\n+\n+If the repository has already chosen a template and/or points, simply create the\n+`ISSUE_TEMPLATE.md` file with that template and/or points.\n+\n+Check the issues in the repository.\n+Maybe an issue already contains a discussion about template or points to use.\n+\n+A good approach is to search the repository for the words `ISSUE_TEMPLATE` or \n+`issue template`, and read each search result for hints of existing template\n+and/or points.\n+\n+If you are confident that you have found the template and/or points that is implicitly\n+chosen by the project team members, skip to Step 3.\n+\n+### Or, discuss suitable points for the issue template with project team members.\n+\n+It is always good to consult a mentor or project team member for suitable points for\n+the template.\n+\n+It is recommended that beginners go back to step 1 and find a different repository that\n+already mentions a specific issue template.\n+\n+It maybe possible that issue template is going to be same for multiple repositories,\n+in such case it is mentioned in issue description which existing template to use.\n+\n+## Step 3\n+\n+You can read more about the standard templates [here](https://github.com/blog/2111-issue-and-pull-request-templates)\n+\n+1. Copy the templates and/or points in a file temporarily.\n+2. Fork the repository\n+3. Add a `ISSUE_TEMPLATE.md` file to the repository, committing the new file to a branch.\n+   1. Make sure you paste all the contents properly in the file.\n+   2. Make sure you don't miss out on any points which need to be in the file.", "created_at": "2017-11-09T09:53:34Z", "last_edited_at": "2017-11-09T09:57:41Z", "author": "neelanshsahai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDMzNjMwMg==", "fields": {"body": "https://rubygems.org/gems/jekyll-netlify\nhttps://github.com/jayvdb/jekyll-netlify\n(my first Ruby gem)", "diff": "@@ -1,4 +1,5 @@\n source \"https://rubygems.org\"\n \n gem \"jekyll\"\n+gem \"jekyll-netlify\"", "created_at": "2017-11-10T20:59:09Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDcwMzk4MQ==", "fields": {"body": "I think that's a bit redundant since it's already on the PR template...", "diff": "@@ -0,0 +1,76 @@\n+---\n+collaborating_projects:\n+  - docker-coala-base\n+desc: \"Find creative ways to decrease the coala Docker image size\"\n+issues:\n+  - https://github.com/coala/docker-coala-base/issues/55\n+difficulty: \"hard\"\n+initiatives:\n+  - GCI\n+markdown: decrease_docker_image_size.md\n+mentors:\n+  - yukiisbored\n+name: \"Decrease Docker image size\"\n+tags:\n+  - coala\n+  - docker\n+  - linux\n+---\n+\n+## Task\n+\n+Submit a Pull Request to the [docker-coala-base][repo] project which decreases\n+the image size.\n+\n+## Objective\n+\n+This task is considerably hard which requires creativity and knowledge for\n+Docker and Linux to decrease the Docker Image size.\n+\n+## Background\n+\n+The Docker image for coala is huge (around ~2G!) which makes it a huge drawback\n+to be used especially for those who are with limited Internet access.\n+\n+Decreasing it isn't easy because a lot of linters requires a lot of dependencies\n+and some weird edge cases as well.\n+\n+Since this is Docker where images are compose of layers, deleting stuff from\n+other layers (like the openSUSE base image) doesn't change much.\n+\n+## Finding bloat\n+\n+To find bloat, we can start by seeing the size generated by each layer. We can\n+do this by running `docker history <image name>` which will give us each layers'\n+size.\n+\n+Some of these layers are probably outdated since `docker history` also shows\n+previous versions as well, so make sure you're looking at a layer which is a\n+part of the latest image.\n+\n+Finding the actual files within the layer can be challenging and requires\n+knowing what the command which makes the layer does.\n+\n+For example, when installing a program it may contain some documentations since\n+this is a Docker image which sole purpose is to run coala the documentation\n+isn't really helpful or even important.\n+\n+## Removing bloat\n+\n+Removing bloat for a layer can be done just by adding another command to the\n+layer's command. This should be done **not** by adding another `RUN` command but\n+appending it's `RUN` command with `&&`.\n+\n+Example:\n+```Dockerfile\n+RUN zypper in kirisame && \\\n+    rm -rf /usr/share/man/man1/kirisame.gz \\\n+           /usr/share/man/man6/kirisamectl.gz\n+```\n+\n+## Submit a PR\n+\n+If you've decreased any amount of the Docker Image, please create a PR and\n+submit it to the [repo][repo].", "created_at": "2017-11-14T00:10:15Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA==", "fields": {"body": "Hmm that reads bad as a first sentence. Rather I would make some kind of citation at the end^^\nAlso:\n\nThe layout needs to be very clear that it is an unmodified copy only, and no editing of the text is desirable.\n\nNot sure that this intention gets to the reader here^^", "diff": "@@ -1,6 +1,8 @@\n What is Docker?\n ===============\n \n+According to `opensource.com <https://opensource.com/resources/what-docker>`__:", "created_at": "2017-11-15T17:21:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTg0NDA2Nw==", "fields": {"body": "and a positive message\nlike\n\nYes, coala will apply for Google Summer of Code - 2018. You might read the GSoC Timeline to get an idea of how things will proceed.", "diff": "@@ -0,0 +1,3 @@\n+---\n+question: \"coala will apply to GSOC 2018\"\n+---", "created_at": "2017-11-18T18:44:21Z", "last_edited_at": "2017-11-18T18:46:09Z", "author": "yashovardhanagrawal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzIyODU2Mg==", "fields": {"body": "Add coala/corobo room also", "diff": "@@ -49,4 +49,6 @@\n \n CHATROOM_PRESENCE = os.environ.get('ROOMS', '').split() or ROOMS_TO_JOIN\n \n+ACCESS_CONTROLS = {'render test': {'allowrooms': ('coala/cobot-test',)}, }\n+", "created_at": "2017-11-27T15:28:58Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzY3NzIyMg==", "fields": {"body": "Please do not modify lines that doesn't relate to the commit, so the diff will look nicer ;)", "diff": "@@ -22,7 +22,7 @@\n                     <h4 class=\"left light\">Google Summer of Code 2017 Work Product Submission </h4>\n                 </div>\n                 <br>\n-            </div> \n+            </div>", "created_at": "2017-11-29T02:01:47Z", "last_edited_at": "2017-11-29T02:05:44Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzcwMzcxNg==", "fields": {"body": "Tests and spaces are good, but you are increasing two captured groups. Make them uncaptured groups", "diff": "@@ -196,7 +196,7 @@ def unassign_cmd(self, msg, match):\n             else:\n                 return 'You are not an assignee on the issue.'\n \n-    @re_botcmd(pattern=r'mark\\s+(wip|pending)\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+)/(pull|merge_requests)/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear\n+    @re_botcmd(pattern=r'mark\\s+(wip|(?:(pending([-\\s]+review)?)))\\s+https://(github|gitlab)\\.com/([^/]+)/([^/]+)/(pull|merge_requests)/(\\d+)',  # Ignore LineLengthBear, PyCodeStyleBear", "created_at": "2017-11-29T06:43:36Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzcxMDQ4Nw==", "fields": {"body": "And so you dont think I am crazy ..\nThere are lots of reasons why the username may not exist.  I suspect that this isnt very likely to occur when an MR is first created, but we have people vanish after they create their MR.  GitHub now has a @ghost account which it substitutes in, but I dont know what GitLab and other services respond to these odd scenarios (corobo will also support BitBucket and other services soon also).", "diff": "@@ -225,9 +231,11 @@ def mark_cmd(self, msg, match):\n                 return ('The pull request {mr_link} is marked *work in progress'\n                         '*. Use `{bot_prefix} mark pending` or push to your '\n                         'branch if feedback from the community is needed '\n-                        'again.'.format(\n+                        'again.\\n@{user_login}, please check your pull '\n+                        'request.'.format(\n                             mr_link=mr.url,\n-                            bot_prefix=self.bot_config.BOT_PREFIX)\n+                            bot_prefix=self.bot_config.BOT_PREFIX,\n+                            user_login=login)", "created_at": "2017-11-29T07:36:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQxOTg3MQ==", "fields": {"body": "I don't think a smiley face emoji is a good option here. This is a list of emojis that will be randomly used down on line 30, and a smiley doesn't fit the pattern.", "diff": "@@ -9,10 +9,20 @@ class Coala_lowercase_c(BotPlugin):\n \n     def callback_message(self, msg):\n         emots = [':(', ':angry:', ':confounded:',\n-                 ':disappointed:', ':triumph:']\n+                 ':disappointed:', ':triumph:' , ':D']", "created_at": "2017-12-01T18:52:53Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQyOTQ5MA==", "fields": {"body": "delete to", "diff": "@@ -82,7 +82,19 @@ class Explain(BotPlugin):\n                      'newcomer Pull Request\\n- review at least a difficulty/'\n                      'newcomer Pull Request\\n- merge a difficulty/low Pull '\n                      'Request\\n- review at least a difficulty/low or higher '\n-                     'Pull Request'\n+                     'Pull Request',\n+        'do not ask to ask': 'This seems a lazy way of asking your question '\n+                             'Don\\'t take it personally. It\\'s just that '\n+                             'you\\'re asking for more than what you think '\n+                             'you\\'re asking. The solution is not to simply '\n+                             'question people about them, but just to '\n+                             'ask for your piece of information by actaully '\n+                             'formalizing it in words. Someone who is idling '\n+                             'on the channel and only occasionally glances '\n+                             'at what\\'s going on is unlikely to answer '\n+                             'to your \"asking to ask\" question, but your '", "created_at": "2017-12-01T19:33:08Z", "last_edited_at": null, "author": "Mixih", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg1MDEwMw==", "fields": {"body": "you can pass in username here, and it can be None, and use jinja's if syntax.\nBugger it, pass in username to them all, as we have another issue about personalising these messages, so if the username is available, that task becomes a jinja-markdown-only task, so newcomer level.", "diff": "@@ -1,103 +1,40 @@\n import re\n+import glob\n+import os.path\n \n from errbot import BotPlugin, re_botcmd\n+from errbot.templating import tenv\n \n \n class Explain(BotPlugin):\n     \"\"\"\n     Explain various terms\n     \"\"\"\n \n-    MSGS = {\n-        'review': 'After creating your `Pull Request`, it is under the review '\n-                  'process. This can be deduced from the `process/pending '\n-                  'review` label. Now you have to wait for the reviewers to '\n-                  'review your PR. You should *not* ask for reviews on our '\n-                  'Gitter channel - we review those PRs continuously.\\n\\n'\n-                  'We\\'re usually swamped with reviews, while you are waiting '\n-                  '**please review other people\\'s PRs** at [coala.io/review]'\n-                  '(https://coala.io/review): that helps you and will make '\n-                  'your review happen faster as well. As a rule of thumb, '\n-                  '*for every review you receive, give at least one review '\n-                  'to someone else!*\\n\\nFor a good review, look at every '\n-                  'commit on its own and place `ack <sha>`(commit is ready) or '\n-                  '`unack <sha>(commit needs work) needs work` comments on the '\n-                  'pull request, be sure to remove other spacing like tabs. If '\n-                  'you\\'re done with a pull request, you can use '\n-                  '`{bot_prefix} mark wip <pull URL>` to mark it *work in '\n-                  'progress* finally.',\n-        'closes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                  'keyword in commit messages. To get good results from that '\n-                  'we need to use `Closes` for normal issues instead of `Fixes`'\n-                  ' which should only be used for real bugs. (See also [the '\n-                  'commit message docs](https://coala.io/commit).) To change '\n-                  'your message you just use `git commit --amend` and then '\n-                  '`git push --force` the new commit to replace the old one.',\n-        'fixes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                 'keyword in commit messages. To get good results from that '\n-                 'we need to use `Fixes` for bugfix issues instead of '\n-                 '`Closes`. (See also [the commit message docs]'\n-                 '(https://coala.io/commit).) To change your message you '\n-                 'just use `git commit --amend` and then `git push --force` '\n-                 'the new commit to replace the old one.',\n-        'commit message': 'To change your message you just use `git commit '\n-                          '--amend` and then `git push --force` the new '\n-                          'commit to replace the old one.\\n\\nIf you\\'re just '\n-                          'looking to fix an issue very quickly and not '\n-                          'interested in contributing to coala long term, we '\n-                          'can fix up the message for you - just tell us :).',\n-        'rebase': 'It looks like your PR is out of date and needs a rebase.'\n-                  '\\n\\n[This page](https://coala.io/rebase) may help you to get'\n-                  ' started on this. We also have [a quick video tutorial on '\n-                  'how to rebase](https://asciinema.org/a/78683). That should '\n-                  'help you understand the basics of how it works and what you'\n-                  'should be doing.\\n\\nIf you\\'re just looking to fix an issue '\n-                  'very quickly and not interested in contributing to coala '\n-                  'long term, we can fix it up for you - just tell us :).',\n-        'cep': 'At coala we\\'re using [cEP\\'s (coala Enhancement Proposals)]'\n-               '(http://coala.io/cep) to define major design decisions - '\n-               'they\\'re a bit like PEP\\'s but not quite as extensive and '\n-               'obviously written with a lower case c.',\n-        'gitlab': 'We are currently evaluating on if we want to use GitLab for'\n-                  'code hosting. That\\'s why some repositories are already on '\n-                  'GitLab, if you want to participate in the migration '\n-                  'discussion, please add information [at our GitLab wiki page]'\n-                  '(https://github.com/coala/coala/wiki/GitLab).',\n-        'google': 'Hey. This message was triggered because someone was too '\n-                  'lazy to type this *again*. Don\\'t take it personally. '\n-                  'Please.\\n\\nWe all got to learn this: *use google*. Or '\n-                  'duckduckgo. Anything. The search engine that earned your '\n-                  'trust. You got a build error? Search for the first red '\n-                  'thing and google it. You got an exception? *Read the '\n-                  'message.* Search it. *Think.*\\n\\nKeep this in mind: *You*'\n-                  'are sitting in front of the problem, not us. You will have '\n-                  'a much easier time solving it. That\\'s why you should try '\n-                  'doing it first.',\n-        'promotion': 'To become part of the coala developers team, there '\n-                     'are a few steps you need to complete. The newcomer '\n-                     'process is as follows:\\nYou will start as a newcomer, '\n-                     'which is kind of a trial. If you complete the following '\n-                     'tasks, you will become a developer at coala:\\n\\n- run '\n-                     'coala on a project of yours\\n- merge a difficulty/'\n-                     'newcomer Pull Request\\n- review at least a difficulty/'\n-                     'newcomer Pull Request\\n- merge a difficulty/low Pull '\n-                     'Request\\n- review at least a difficulty/low or higher '\n-                     'Pull Request'\n-    }\n+    files = glob.glob('plugins/templates/explanations/*.jinja2.md')\n+    KNOWN_KEYS = []\n+    for fname in files:\n+        KNOWN_KEYS.append(fname.replace(\n+            'plugins/templates/explanations/', ''\n+        ).replace('.jinja2.md', ''))\n \n     ERROR_MSG = (\n         'Sorry, I only know about these things:\\n- ' +\n-        '\\n- '.join(MSGS.keys())\n+        '\\n- '.join(KNOWN_KEYS)\n     )\n \n     @re_botcmd(pattern=r'^explain\\s+(\\w+)(?:\\s+to\\s+@?([\\w-]+))?$',\n                re_cmd_name_help='explain <term>',\n                flags=re.IGNORECASE)\n     def explain(self, msg, match):\n         \"\"\"Explain various terms.\"\"\"  # Ignore QuotesBear\n-        return ('{}'.format('@{}: \\n'.format(match.group(2))\n-                            if match.group(2) else '') +\n-                self.MSGS.get(\n-                    match.group(1).lower(),\n-                    self.ERROR_MSG\n-                ).format(bot_prefix=self.bot_config.BOT_PREFIX))\n+        response = ''\n+        filename = 'explanations/{}.jinja2.md'.format(match.group(1).lower())\n+        if match.group(1).lower() in self.KNOWN_KEYS:\n+            if match.group(2):\n+                response += '@{}: \\n'.format(match.group(2))\n+            response += tenv().get_template(filename).render()", "created_at": "2017-12-05T05:28:42Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4Nzg3MA==", "fields": {"body": "@andrewda missing this in the final change, we want to replace bot_prefix in one of the strings", "diff": "@@ -1,103 +1,44 @@\n import re\n+import glob\n+import os.path\n \n from errbot import BotPlugin, re_botcmd\n+from errbot.templating import tenv\n \n \n class Explain(BotPlugin):\n     \"\"\"\n     Explain various terms\n     \"\"\"\n \n-    MSGS = {\n-        'review': 'After creating your `Pull Request`, it is under the review '\n-                  'process. This can be deduced from the `process/pending '\n-                  'review` label. Now you have to wait for the reviewers to '\n-                  'review your PR. You should *not* ask for reviews on our '\n-                  'Gitter channel - we review those PRs continuously.\\n\\n'\n-                  'We\\'re usually swamped with reviews, while you are waiting '\n-                  '**please review other people\\'s PRs** at [coala.io/review]'\n-                  '(https://coala.io/review): that helps you and will make '\n-                  'your review happen faster as well. As a rule of thumb, '\n-                  '*for every review you receive, give at least one review '\n-                  'to someone else!*\\n\\nFor a good review, look at every '\n-                  'commit on its own and place `ack <sha>`(commit is ready) or '\n-                  '`unack <sha>(commit needs work) needs work` comments on the '\n-                  'pull request, be sure to remove other spacing like tabs. If '\n-                  'you\\'re done with a pull request, you can use '\n-                  '`{bot_prefix} mark wip <pull URL>` to mark it *work in '\n-                  'progress* finally.',\n-        'closes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                  'keyword in commit messages. To get good results from that '\n-                  'we need to use `Closes` for normal issues instead of `Fixes`'\n-                  ' which should only be used for real bugs. (See also [the '\n-                  'commit message docs](https://coala.io/commit).) To change '\n-                  'your message you just use `git commit --amend` and then '\n-                  '`git push --force` the new commit to replace the old one.',\n-        'fixes': 'We use bug prediction in coala which relies on the `Fixes` '\n-                 'keyword in commit messages. To get good results from that '\n-                 'we need to use `Fixes` for bugfix issues instead of '\n-                 '`Closes`. (See also [the commit message docs]'\n-                 '(https://coala.io/commit).) To change your message you '\n-                 'just use `git commit --amend` and then `git push --force` '\n-                 'the new commit to replace the old one.',\n-        'commit message': 'To change your message you just use `git commit '\n-                          '--amend` and then `git push --force` the new '\n-                          'commit to replace the old one.\\n\\nIf you\\'re just '\n-                          'looking to fix an issue very quickly and not '\n-                          'interested in contributing to coala long term, we '\n-                          'can fix up the message for you - just tell us :).',\n-        'rebase': 'It looks like your PR is out of date and needs a rebase.'\n-                  '\\n\\n[This page](https://coala.io/rebase) may help you to get'\n-                  ' started on this. We also have [a quick video tutorial on '\n-                  'how to rebase](https://asciinema.org/a/78683). That should '\n-                  'help you understand the basics of how it works and what you'\n-                  'should be doing.\\n\\nIf you\\'re just looking to fix an issue '\n-                  'very quickly and not interested in contributing to coala '\n-                  'long term, we can fix it up for you - just tell us :).',\n-        'cep': 'At coala we\\'re using [cEP\\'s (coala Enhancement Proposals)]'\n-               '(http://coala.io/cep) to define major design decisions - '\n-               'they\\'re a bit like PEP\\'s but not quite as extensive and '\n-               'obviously written with a lower case c.',\n-        'gitlab': 'We are currently evaluating on if we want to use GitLab for'\n-                  'code hosting. That\\'s why some repositories are already on '\n-                  'GitLab, if you want to participate in the migration '\n-                  'discussion, please add information [at our GitLab wiki page]'\n-                  '(https://github.com/coala/coala/wiki/GitLab).',\n-        'google': 'Hey. This message was triggered because someone was too '\n-                  'lazy to type this *again*. Don\\'t take it personally. '\n-                  'Please.\\n\\nWe all got to learn this: *use google*. Or '\n-                  'duckduckgo. Anything. The search engine that earned your '\n-                  'trust. You got a build error? Search for the first red '\n-                  'thing and google it. You got an exception? *Read the '\n-                  'message.* Search it. *Think.*\\n\\nKeep this in mind: *You*'\n-                  'are sitting in front of the problem, not us. You will have '\n-                  'a much easier time solving it. That\\'s why you should try '\n-                  'doing it first.',\n-        'promotion': 'To become part of the coala developers team, there '\n-                     'are a few steps you need to complete. The newcomer '\n-                     'process is as follows:\\nYou will start as a newcomer, '\n-                     'which is kind of a trial. If you complete the following '\n-                     'tasks, you will become a developer at coala:\\n\\n- run '\n-                     'coala on a project of yours\\n- merge a difficulty/'\n-                     'newcomer Pull Request\\n- review at least a difficulty/'\n-                     'newcomer Pull Request\\n- merge a difficulty/low Pull '\n-                     'Request\\n- review at least a difficulty/low or higher '\n-                     'Pull Request'\n-    }\n+    files = glob.glob('plugins/templates/explanations/*.jinja2.md')\n+    KNOWN_KEYS = []\n+    for fname in files:\n+        KNOWN_KEYS.append(fname.replace(\n+            'plugins/templates/explanations/', ''\n+        ).replace('.jinja2.md', ''))\n \n     ERROR_MSG = (\n         'Sorry, I only know about these things:\\n- ' +\n-        '\\n- '.join(MSGS.keys())\n+        '\\n- '.join(KNOWN_KEYS)\n     )\n \n     @re_botcmd(pattern=r'^explain\\s+(\\w+)(?:\\s+to\\s+@?([\\w-]+))?$',\n                re_cmd_name_help='explain <term>',\n                flags=re.IGNORECASE)\n     def explain(self, msg, match):\n         \"\"\"Explain various terms.\"\"\"  # Ignore QuotesBear\n-        return ('{}'.format('@{}: \\n'.format(match.group(2))\n-                            if match.group(2) else '') +\n-                self.MSGS.get(\n-                    match.group(1).lower(),\n-                    self.ERROR_MSG\n-                ).format(bot_prefix=self.bot_config.BOT_PREFIX))", "created_at": "2017-12-05T09:27:14Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4OTY3Mg==", "fields": {"body": "since you are following this everywhere else, append a , ;)", "diff": "@@ -333,13 +320,19 @@ def eligible(user, iss):\n                            'issue. :tada:')\n                 else:\n                     yield 'You are not eligible to be assigned to this issue.'\n-                    yield '\\n'.join(eligility_conditions)\n+                    yield tenv().get_template(\n+                        'errors/not-eligible.jinja2.md'\n+                    ).render(\n+                        organization=self.GH_ORG_NAME,\n+                    )\n             elif user in iss.assignees:\n                 yield ('The issue is already assigned to you.')\n             else:\n-                yield ('The issue is already assigned to someone. Please '\n-                       'check if the assignee is still working on the issue, '\n-                       'if not, you should ask for reassignment.')\n+                yield tenv().get_template(\n+                    'errors/already-assigned.jinja2.md'\n+                ).render(\n+                    username=user", "created_at": "2017-12-05T09:34:35Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg5MjE2NA==", "fields": {"body": "Discussion in gitter regarding this. It messes up the gitter formatting to limit lines to 80 characters.", "diff": "@@ -0,0 +1 @@\n+We use bug prediction in coala which relies on the `Fixes` keyword in commit messages. To get good results from that we need to use `Closes` for normal issues instead of `Fixes` which should only be used for real bugs. (See also [the commit message docs](https://coala.io/commit).) To change your message you just use `git commit --amend` and then `git push --force` the new commit to replace the old one.", "created_at": "2017-12-05T09:44:51Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw==", "fields": {"body": "base url is a constant that may be needed again in future enhancements.", "diff": "@@ -17,20 +17,78 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n-async function fetchOrgsWithLeaders() {\n+async function searchGitHubOrgs(query) {\n+  const token = process.env.GITHUB_TOKEN\n+  const res = await fetch(\n+    `https://api.github.com/search/users?q=${query}%20type:org`,", "created_at": "2017-12-05T16:05:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA==", "fields": {"body": "Remove one of the spaces after the equals sign.\nWe should get coala working ASAP", "diff": "@@ -1,6 +1,7 @@\n const fs = require('fs')\n const Mustache = require('mustache')\n const orgs = require('./out/data.json')\n+const timestamp =  new Date(fs.statSync('./out/data.json').mtime).getTime()", "created_at": "2017-12-05T17:38:31Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ==", "fields": {"body": "Weird, ok. I can look into that more in a while, but for now adding both seems fine \ud83d\udc4d", "diff": "@@ -1,8 +1,15 @@\n ---\n+env:\n+  node: true", "created_at": "2017-12-06T08:27:32Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw==", "fields": {"body": "eslint-config-prettier is for turning off eslint rules that conflict with prettier\nhttps://github.com/prettier/eslint-plugin-prettier should be used instead", "diff": "@@ -12,5 +12,9 @@\n   \"dependencies\": {\n     \"mustache\": \"^2.3.0\",\n     \"node-fetch\": \"^1.7.3\"\n+  },\n+  \"devDependencies\": {\n+    \"eslint\": \"^4.12.1\",\n+    \"eslint-config-prettier\": \"^2.9.0\"", "created_at": "2017-12-05T23:51:12Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA==", "fields": {"body": "you can add node_modules/.bin to PATH\nand set NODE_PATH (see our dockerfile)\nhttps://github.com/coala/docker-coala-base/blob/master/Dockerfile#L10\nhttps://github.com/coala/coala-atom/blob/master/circle.yml#L32", "diff": "@@ -1,7 +1,15 @@\n-sudo: false\n-language: node_js\n+sudo: required\n+language: python\n+python: 3.6\n+\n+before_install:\n+  - nvm install 8\n+  - npm install\n+  - npm install -g eslint prettier eslint-plugin-prettier", "created_at": "2017-12-06T01:58:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ==", "fields": {"body": "The <script> tag can be put on the bottom of the body, after app.js", "diff": "@@ -21,6 +21,13 @@ <h1>Google Code-in 2017 Current Leaders</h1>\n     <i>\n       The leading participants for each organization are listed randomly. \n     </i>\n+    <div class=\"twitter\">\n+      <a class=\"twitter-timeline\"  href=\"https://twitter.com/hashtag/googlecodein\"\n+         data-widget-id=\"938830025809432577\">Tweets about GCI\n+      </a>\n+      <script src=\"static/js/twitter.js\"></script>", "created_at": "2017-12-08T04:04:21Z", "last_edited_at": "2017-12-08T04:15:53Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA==", "fields": {"body": "Otherwise it would have so many digits, so maybe not readable?", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen)/(24*3600*1000)\n+const timeLeft = (noClaims-today)/(24*3600*1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100-(timeLeft/totalTime)*100)", "created_at": "2017-12-10T13:19:40Z", "last_edited_at": null, "author": "Grox-Ni", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw==", "fields": {"body": "I prefer this to be in the frontend, because we might not do build everyday.\nUse and modify timeDifference function inside static/js/app.js.", "diff": "@@ -2,11 +2,20 @@ const fs = require('fs')\n const Mustache = require('mustache')\n const ncp = require('ncp').ncp\n const orgs = require('../out/data.json')\n+const dates = require('../out/dates.json')\n \n const time = fs.statSync(`${__dirname}/../out/data.json`).mtime\n+const today = new Date()\n const datetime = new Date(time).toUTCString()\n const rootURL = process.env.URL\n \n+const competitionOpen = new Date(dates.competition_open_starts)\n+const noClaims = new Date(dates.competition_open_ends)\n+const totalTime = (noClaims - competitionOpen) / (24 * 3600 * 1000)\n+const timeLeft = (noClaims - today) / (24 * 3600 * 1000)\n+const daysLeft = parseInt(timeLeft)\n+const percentagePassed = parseInt(100 - timeLeft / totalTime * 100)", "created_at": "2017-12-10T13:26:14Z", "last_edited_at": "2017-12-10T13:31:14Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw==", "fields": {"body": "As this is invalid on a fork, I think these should be in Travis environment variables. (also COMMIT_*).", "diff": "@@ -1,6 +1,11 @@\n language: python\n python: 3.6\n \n+env:\n+  global:\n+    - ENCRYPTION_LABEL: \"b7c548322a41\"", "created_at": "2017-12-10T14:15:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA==", "fields": {"body": "In my version, the build is not in the deploy script.  The deploy script should take a built version, and overlay it on the previous built version.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN\n+    npm run build\n+    return\n+fi\n+\n+# Save some useful information\n+REPO=`git config remote.origin.url`\n+SSH_REPO=${REPO/https:\\/\\/github.com\\//git@github.com:}\n+SHA=`git rev-parse --verify HEAD`\n+\n+# Clone the existing gh-pages for this repo into out/\n+# Create a new empty branch if gh-pages doesn't exist yet (should only happen on first deploy)\n+rm -r out\n+git clone $REPO out\n+cd out\n+git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH\n+cd ..\n+\n+# Clean out existing contents\n+rm -rf out/*\n+\n+# Run our compile script\n+npm run build", "created_at": "2017-12-10T14:17:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA==", "fields": {"body": "the PR wont get an env var on Travis, or any other sane system (Netlify isnt sane/safe), so this is useless on Travis.\nbut more importantly, this is useless.  If the token is available here, a malicious person could modify this script to emit it to the log , or send it via email to themselves, or anything.\nHowever this isnt such a large problem if the token in GITHUB_TOKEN has no scopes which allow greater access than the malicious person could obtain themselves.  The worst they can do is abuse the token so that GitHub cancels it, breaking the builds.", "diff": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+set -eo pipefail # Exit with nonzero exit code if anything fails\n+\n+SOURCE_BRANCH=\"master\"\n+TARGET_BRANCH=\"gh-pages\"\n+\n+# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n+if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]; then\n+    echo \"Skipping deploy; just doing a build.\"\n+    # Don't waste token on PR\n+    unset GITHUB_TOKEN", "created_at": "2017-12-10T14:23:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA==", "fields": {"body": "maybe condition: \"$ENCRYPTION_LABEL\" = \"\" ?", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:21:08Z", "last_edited_at": "2017-12-10T15:21:19Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ==", "fields": {"body": "^ Yup, tested on my fork.", "diff": "@@ -19,3 +20,4 @@ deploy:\n   local_dir: out\n   \"on\":\n     branch: master\n+    condition: $TRAVIS_DEPLOY = true", "created_at": "2017-12-10T15:52:27Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg==", "fields": {"body": "I'd prefer the chat platform type to be included also, to give a bit of clarity in the JSON.", "diff": "@@ -84,13 +95,19 @@ async function fetchOrgsWithData() {\n   const orgs = await fetchOrgs()\n   const fetchingLeaders = orgs.map(org => fetchLeaders(org.id))\n   const fetchingGitHub = orgs.map(org => findOrganization(org))\n+  const fetchingChat = orgs.map(org => chattie(org.irc_channel))\n   const orgLeaders = await Promise.all(fetchingLeaders)\n   const orgGitHub = await Promise.all(fetchingGitHub)\n+  const orgChats = await Promise.all(fetchingChat)\n \n   return orgs.map((org, index) =>\n     Object.assign(org, {\n       leaders: orgLeaders[index],\n       github: orgGitHub[index],\n+      chat: {\n+        url: orgChats[index].url,\n+        image: CHAT_IMAGES[chattie.CHAT[orgChats[index].type]],", "created_at": "2017-12-10T22:29:03Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw==", "fields": {"body": "ESLint wants this all on one line", "diff": "@@ -127,6 +128,18 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n-  fs.writeFileSync(`${__dirname}/../out/data.json`, JSON.stringify(data))\n+  // readable JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.json`,\n+    JSON.stringify(data, null, 2)\n+  )\n+  // minified JSON\n+  fs.writeFileSync(\n+    `${__dirname}/../out/data.min.json`,\n+    JSON.stringify(data)\n+  )", "created_at": "2017-12-11T05:23:50Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ==", "fields": {"body": "EOF", "diff": "@@ -128,4 +157,4 @@ <h3>\n     <script src=\"static/js/app.js\"></script>\n     <script src=\"static/js/twitter.js\"></script>\n   </body>\n-</html>\n+</html>", "created_at": "2017-12-11T06:19:53Z", "last_edited_at": "2017-12-11T06:25:53Z", "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA==", "fields": {"body": "Don't use the org's image for their website prompt. Usually a globe is used, similar to https://image.flaticon.com/icons/png/128/12/12195.png (you might need to find one from somewhere else or give proper attribution for that one).", "diff": "@@ -92,26 +107,40 @@ <h3>\n                 {{name}}\n               </a>\n             </h3>\n-            <p>Tasks Completed: {{completed_task_instance_count}}\n-              {{#github}}\n+            <p>Tasks Completed: {{completed_task_instance_count}}</p>\n+            {{#github}}\n               <a href=\"https://github.com/{{github}}\">\n                 <img\n                   src=\"https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\"\n                   class=\"github\"\n                 />\n               </a>\n-              {{/github}}\n-              {{#mailing_list}}\n+            {{/github}}\n+            {{#mailing_list}}\n               <a href=\"{{mailing_list}}\">\n                 <img src=\"static/images/mail.png\" class=\"chat\" />\n               </a>\n-              {{/mailing_list}}\n-              {{#chat}}\n+            {{/mailing_list}}\n+            {{#chat}}\n               <a href=\"{{chat.url}}\">\n                 <img src=\"{{chat.image}}\" class=\"chat\" />\n               </a>\n-              {{/chat}}\n-            </p>\n+            {{/chat}}\n+            {{#twitter_url}}\n+              <a href=\"{{twitter_url}}\">\n+                <img src=\"static/images/logos/twitter.png\" class=\"chat\" />\n+              </a>\n+            {{/twitter_url}}\n+            {{#gplus_url}}\n+              <a href=\"{{gplus_url}}\">\n+                <img src=\"static/images/logos/gplus.png\" class=\"chat\" />\n+              </a>\n+            {{/gplus_url}}\n+            {{#website_url}}\n+              <a href=\"{{website_url}}\">\n+                <img src=\"https://{{image_url}}\" class=\"chat\" />", "created_at": "2017-12-11T06:23:20Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjAwMzc2NA==", "fields": {"body": "ughh. we don't need this test case at all", "diff": "@@ -326,7 +325,7 @@ def test_invite_me(self):\n \n         plugins.labhub.os.environ['GH_TOKEN'] = 'patched?'\n         testbot.assertCommand('!invite me',", "created_at": "2017-12-11T08:11:10Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA==", "fields": {"body": "fyi, there is a flag to turn off creation of .orig files.", "diff": "@@ -3,3 +3,4 @@ out/*\n !out/.keep\n yarn.lock\n .DS_Store\n+**.orig", "created_at": "2017-12-12T04:32:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ==", "fields": {"body": "could this be JavaScript, so it can be incorporated into the npm build process ?", "diff": "@@ -11,6 +11,7 @@ before_install:\n script:\n   - coala --non-interactive -V\n   - npm run build\n+  - ./.ci/gather_data.sh", "created_at": "2017-12-13T04:30:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw==", "fields": {"body": "Remove the contents instead of the folder\ni.e. rm -rf out/*\nand if you do that you don't need to recreate the .keep file", "diff": "@@ -4,7 +4,12 @@\n   \"description\": \"\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n-    \"build\": \"node ./lib/scrape.js && node ./lib/generate.js\"\n+    \"scrape\": \"node ./lib/scrape.js\",\n+    \"generate\": \"node ./lib/generate.js\",\n+    \"gather\": \"node ./lib/gather.js\",\n+    \"clean\": \"rm -rf out && mkdir -p out && touch out/.keep\",", "created_at": "2017-12-13T06:50:20Z", "last_edited_at": "2017-12-13T06:52:46Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA==", "fields": {"body": "Shhh... \ud83d\ude0b", "diff": "@@ -210,11 +220,14 @@ async function findWiki(name) {\n }\n \n async function findGitHubUser({ display_name }, org) {\n+=======\n+async function findGitHubUser(displayName, org) {\n+>>>>>>> scrape.js: Reduce number of API calls", "created_at": "2017-12-13T07:20:39Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA==", "fields": {"body": "Maybe in that case https:${wikidataurl}?", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {\n+      const wikipediaurl = wdk.getSitelinkUrl(sitelink['enwiki'])\n+      return {\n+        url: wikipediaurl,\n+        type: 'wikipedia',\n+      }\n+    } else {\n+      return {\n+        url: 'https:' + wikidataurl,", "created_at": "2017-12-12T22:03:28Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg==", "fields": {"body": "In future(with i18n) this should become language_code + 'wiki'. So that'd probably bring us back to this way...", "diff": "@@ -165,6 +166,45 @@ async function findOrganization({\n   return null\n }\n \n+async function findWiki(name) {\n+  const APIurl = wdk.searchEntities({\n+    search: name,\n+    format: 'json',\n+  })\n+  const srch = await fetch(APIurl)\n+  const response = await srch.json()\n+  if (response && response.search.length) {\n+    const wikidataurl = response.search[0].url\n+    const wikidataid = response.search[0].id\n+    const entityAPIurl = wdk.getEntities({\n+      ids: [wikidataid],\n+      props: ['sitelinks'],\n+      format: 'json',\n+    })\n+\n+    const sitelinks = await fetch(entityAPIurl)\n+    let sitelink = await sitelinks.json()\n+    sitelink = sitelink['entities'][wikidataid]['sitelinks']\n+    if (sitelink && sitelink['enwiki']) {", "created_at": "2017-12-12T22:06:35Z", "last_edited_at": null, "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA==", "fields": {"body": "IMO we should remove all translation for now and only keep en or 2.", "diff": "@@ -0,0 +1,21 @@\n+{\n+  \"page-title\": \"Google Code-in 2017 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0928\u0947\u0924\u093e\",\n+  \"last-updated\": \"\u0906\u0916\u0930\u0940 \u0905\u092a\u0921\u0947\u091f\",", "created_at": "2017-12-14T06:10:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA==", "fields": {"body": "Yep, seems to not be working. But in that case just skip over it and only use working XML feeds. That'll be encouragement to get the coala feed fixed \ud83d\ude09", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',\n+]", "created_at": "2017-12-15T03:21:22Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ==", "fields": {"body": "Make it so that when the parser failed it's skipping instead of \"breaking\".", "diff": "@@ -48,6 +49,23 @@ try {\n   console.log('No existing data...')\n }\n \n+const FEED_LINKS = [\n+  'http://systers-opensource.blogspot.com/feeds/posts/default',\n+  'https://www.haiku-os.org/blog/index.xml',\n+  'https://blog.wikimedia.org/feed/',\n+  'http://www.liquidgalaxylab.com/feeds/posts/default',\n+  'https://blog.zulip.org/rss/',\n+  'https://blog.musicbrainz.org/feed/',\n+  'https://insights.ubuntu.com/feed/',\n+  'http://www.xwiki.org/xwiki/bin/view/Main/WebRss?xpage=rdf',\n+  'https://www.drupal.org/planet/rss.xml',\n+  'http://planet.osgeo.org/atom.xml',\n+  // Not formateed XML 'https://blog.coala.io/atom.xml',\n+  'http://mifos.org/feed/',\n+  'https://blog.fossasia.org/feed/',\n+  'http://openmrs.org/feed/',", "created_at": "2017-12-15T03:23:31Z", "last_edited_at": "2017-12-15T03:23:40Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg==", "fields": {"body": "if (blog_url) is enough, I think.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(\n+    data.map(org => {\n+      const { blog_url } = org\n+      if (blog_url != null && blog_url != '') {", "created_at": "2017-12-16T13:19:29Z", "last_edited_at": "2017-12-16T13:45:03Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA==", "fields": {"body": "Probably looks neater if you put it inside variable first and then use Promise.all().\nAlso, async function please, instead of then.", "diff": "@@ -340,6 +364,32 @@ async function fetchDates() {\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  Promise.all(", "created_at": "2017-12-16T13:24:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ==", "fields": {"body": "JSON doesn't have linebreaks and the translations for some strings are too long for the linelength limit.", "diff": "@@ -9,7 +9,7 @@ bears = SpaceConsistencyBear\n default_actions = *: ApplyPatchAction\n \n [all.linelength]\n-ignore += **.html\n+ignore += **.html, static/js/i18n/**.json", "created_at": "2017-12-16T15:25:06Z", "last_edited_at": null, "author": "margobra8", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng==", "fields": {"body": "Maybe create a new file that holds the last updated time.\nWe have many generated files (org data, blog planet, dates) and that'll give the last updated time to all of that data.", "diff": "@@ -369,14 +377,19 @@ async function fetchDates() {\n }\n \n ;(async () => {\n-  const data = await fetchOrgsWithData()\n+  const orgs = await fetchOrgsWithData()\n   const dates = await fetchDates()\n \n   // sort data by completed_task_instance_count\n-  data.sort(\n+  orgs.sort(\n     (a, b) => b.completed_task_instance_count - a.completed_task_instance_count\n   )\n \n+  const data = {\n+    orgs: sortKeys({ orgs }, { deep: true }).orgs,\n+    lastUpdated: new Date(),", "created_at": "2017-12-20T10:49:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw==", "fields": {"body": "The rss module does this automatically for me. See the output: https://deploy-preview-95--gci-leaders.netlify.com/feed.xml", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,", "created_at": "2017-12-20T17:25:53Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ==", "fields": {"body": "Do we need this? or is this for debugging, we might want a fancier log message or just throw this away completely.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)", "created_at": "2017-12-20T11:47:18Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg==", "fields": {"body": "We might want to fetch this like data.json or the file will not be available on every build.", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()", "created_at": "2017-12-20T11:48:36Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg==", "fields": {"body": "Might want to add description.\nThe value can be a readable form of property:old and property:new", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()\n+)\n+\n+const oldOrgs = createOrgHash(oldData)\n+const newOrgs = createOrgHash(newData)\n+\n+console.log(oldOrgs)\n+\n+if (oldOrgs && newOrgs) {\n+  const diffs = generateDiff(oldOrgs, newOrgs) || []\n+  console.log(diffs)\n+\n+  const feedItems = current.items || []\n+\n+  if (current.lastUpdated !== buildInfo.generated) {\n+    diffs.forEach(({ kind, path, lhs, rhs }) => {\n+      const organization = oldOrgs[path[0]]\n+\n+      const itemPath = path.slice(1)\n+      const stringPath = itemPath.join('/')\n+      const finalProperty = itemPath[itemPath.length - 1]\n+\n+      let title = ''\n+\n+      if (itemPath[0] === 'leaders' && itemPath.length === 2 && rhs) {\n+        if (kind === 'N') {\n+          title = `New Leader for ${organization.name}`\n+        } else if (kind === 'D') {\n+          title = `Leader Removed from ${organization.name}`\n+        }\n+\n+        return feedItems.push({\n+          title,\n+          date: newData.lastUpdated,\n+          custom_elements: [\n+            {\n+              'org:name': organization.name,\n+            },\n+            {\n+              'org:slug': organization.slug,\n+            },\n+            {\n+              'org:id': organization.id,\n+            },\n+            {\n+              'property:display_name': rhs.display_name,\n+            },\n+            {\n+              'property:id': rhs.id,\n+            },\n+            {\n+              'property:github_account': rhs.github_account,\n+            },\n+          ],\n+        })\n+      }\n+\n+      if (itemPath[0] === 'leaders') {\n+        return\n+      }\n+\n+      if (finalProperty === 'completed_task_instance_count') {\n+        title = `Completed Tasks Updated for ${organization.name}`\n+      } else if (finalProperty === 'rank') {\n+        title = `Organization Rank Updated for ${organization.name}`\n+      } else {\n+        title = `Updated \"${\n+          kind === 'A' ? itemPath[itemPath.length - 2] : finalProperty\n+        }\" for ${organization.name}`\n+      }\n+\n+      if (kind === 'A') {\n+        return feedItems.push({\n+          title,", "created_at": "2017-12-20T12:01:09Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw==", "fields": {"body": "Every new .js is loading this file again.  And creating a new script , and a longer build command.\nIf these .js are modularised, the data can be parsed once and passed around .", "diff": "@@ -0,0 +1,192 @@\n+const RSS = require('rss')\n+const generateDiff = require('deep-diff').diff\n+const fs = require('fs')\n+\n+function createLeadersHash(array) {\n+  return array.reduce((hash, elem) => {\n+    hash[elem.id] = elem\n+    return hash\n+  }, {})\n+}\n+\n+function createOrgHash(array) {\n+  let rank = 0\n+  return array.reduce((hash, elem) => {\n+    rank++\n+    elem.rank = rank\n+    elem.leaders = createLeadersHash(elem.leaders)\n+    hash[elem.slug] = elem\n+    return hash\n+  }, {})\n+}\n+\n+let current = {}\n+try {\n+  current = JSON.parse(\n+    fs.readFileSync(`${__dirname}/../out/feed_items.json`).toString()\n+  )\n+} catch (e) {\n+  current = {}\n+}\n+\n+const buildInfo = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/scrape_info.json`).toString()\n+)\n+\n+const oldData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data_old.json`).toString()\n+)\n+const newData = JSON.parse(\n+  fs.readFileSync(`${__dirname}/../out/data.json`).toString()", "created_at": "2017-12-20T12:38:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ==", "fields": {"body": "@andrewda went afk, still isn't finished yet. Have yet to remove debug lines", "diff": "@@ -0,0 +1,24 @@\n+function twitter_filter() {\r\n+  var twitter_handles = [];\r\n+  for(var i=0; i<document.getElementsById(\"org-info\"); i++) {\r\n+    var org_info = document.getElementsById(\"org-info\");\r\n+    for(var j=0; i<org_info.children.length; i++) {\r\n+      if(org_info.children[j].href.startsWith(\"https://twitter.com/\")) {\r\n+        twitter_handles.push(org_info.children[j].href.substr(20));\r\n+      }\r\n+    }\r\n+  }\r\n+  console.log(twitter_handles);\r", "created_at": "2017-12-20T21:07:08Z", "last_edited_at": null, "author": "dob9601", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ==", "fields": {"body": "So we can run array function like filter ;)\nYou can use Array.from() instead, more readable.", "diff": "@@ -8,5 +8,40 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('load', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode\n+  var twitter_prefix = 20\n+  var twitter_handles = []\n+  var orgs = document.getElementsByClassName('org-info')\n+  for (var i = 0; i < orgs.length; i++) {\n+    var org_info = orgs[i]\n+    for (var j = 0; j < org_info.children.length; j++) {\n+      if (org_info.children[j].href) {", "created_at": "2017-12-21T22:33:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg==", "fields": {"body": "@dob9601 If you do rebase, you can use import and put that in utils file.", "diff": "@@ -8,5 +8,43 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter() {\n+  const node = obj => obj.parentNode.parentNode.parentNode.parentNode.parentNode", "created_at": "2017-12-24T00:50:58Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ==", "fields": {"body": "store in a repo_info.graphql ?\nthe variables are part of the language.", "diff": "@@ -0,0 +1,30 @@\n+module.exports.REPO_INFO_QUERY = `", "created_at": "2017-12-24T02:30:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA==", "fields": {"body": "Can we remove all of these rulers? They look annoying.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***", "created_at": "2017-12-24T04:31:51Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw==", "fields": {"body": "Better to use === instead of ==. See https://github.com/airbnb/javascript#comparison--eqeqeq.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks\n+          .map(u => {\n+            const createdAt = new Date(u.createdAt)\n+            if (createdAt.getTime() > COMPETITION_OPEN.getTime()) {\n+              return u.owner.login.toLowerCase()\n+            }\n+          })\n+          .filter(login => login)\n+      )\n+\n+    repo.watchers.forEach(watcher => {\n+      if (watcher.name) {\n+        names[watcher.name.toLowerCase()] = watcher.login\n+      }\n+    })\n+  })\n+\n+  logins = logins.filter((item, pos, self) => self.indexOf(item) == pos)", "created_at": "2017-12-24T06:38:05Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw==", "fields": {"body": "Group that let and const. See https://github.com/airbnb/javascript#variables--const-let-group.", "diff": "@@ -1,16 +1,22 @@\n const fetch = require('node-fetch')\n+const GraphQL = require('graphql-client')\n const chattie = require('chattie')\n const fs = require('fs')\n const json2yaml = require('json2yaml')\n const validUsername = require('valid-github-username')\n const wdk = require('wikidata-sdk')\n \n+const { REPO_INFO_QUERY } = require('./queries')\n+\n const GH_BASE = 'https://github.com'\n const GH_USER_BASE = `${GH_BASE}/users`\n const GH_ORG_BASE = `${GH_BASE}/orgs`\n const GH_API_BASE = 'https://api.github.com'\n+const GH_GQL_BASE = 'https://api.github.com/graphql'\n const GCI_API_BASE = 'https://codein.withgoogle.com/api'\n \n+let COMPETITION_OPEN", "created_at": "2017-12-24T06:35:18Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA==", "fields": {"body": "An issue is a very noticable action.  It is a new thing, and the malicious person is the creator.\nA review is not quite as noticeable, but it would need to be done on an obscure open PR in order to not be noticed.\nEither would likely be seen as intentional confusion, maybe suitable for GitHub to investigate as 'abuse'.\nstars/watches/forks are almost invisible.  And it is very hard to file 'abuse' with GitHub for doing those actions.\nYour issue is a specific attempt to do #8 .\nThe biggest problem is that so far this algorithm has a lower confidence level than the previous algorithms, but it is being used first.  This could be used to override the existing algorithms, which are more reliable.\nOnce you have a potential match, which wasnt found using the existing more reliable algorithms, you need to look at the match profiles to determine how you can increase the confidence level of your match.  The more effort you require of the abuser, the more likely their abuse can only be viewed as intentional or at least highly suspicious.\nProbably also a good idea to annotate each match with the matching method used.\nAPI hits isn't relevant now, as the hits can grow over time.  You can include probable matches in the yaml which are not included in the rendered page, as they are needing more analysis deferred until a subsequent build has extra API calls to use.", "diff": "@@ -69,6 +84,71 @@ async function fetchLeaders(id) {\n   return leaders\n }\n \n+let repositoryInfo = {}\n+async function fetchRepositoryInfo(org) {\n+  if (repositoryInfo[org]) return repositoryInfo[org]\n+\n+  const { data } = await client.query(REPO_INFO_QUERY, { org })\n+\n+  if (data) {\n+    const info = data.organization.repositories.nodes.map(node => ({\n+      watchers: node.watchers.nodes,\n+      stargazers: node.stargazers.nodes,\n+      forks: node.forks.nodes,\n+    }))\n+\n+    repositoryInfo[org] = info\n+\n+    return info\n+  } else {\n+    return []\n+  }\n+}\n+\n+async function getGitHubUserFromRepoInfo(org, displayName, shortName) {\n+  let repos = []\n+  try {\n+    repos = await fetchRepositoryInfo(org)\n+  } catch (e) {\n+    console.error(`Could not fetch repository info for ${org}...`)\n+  }\n+\n+  let logins = []\n+  let names = {}\n+\n+  repos.forEach(repo => {\n+    logins = logins\n+      .concat(repo.watchers.map(u => u.login.toLowerCase()))\n+      .concat(repo.stargazers.map(u => u.login.toLowerCase()))\n+      .concat(\n+        repo.forks", "created_at": "2017-12-24T06:46:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg==", "fields": {"body": "And it can be autodetected using shields.io, so may as well do that instead of hardcoding it.", "diff": "@@ -0,0 +1,49 @@\n+# Google Code-in Leaders\n+***\n+This is a website to show the current leaders from all organizations in GCI.\n+***\n+ * [Installation](#installation)\n+ * [Languages](#languages)\n+ * [Usage](#usage)\n+ * [Getting Involved](#getting-involved)\n+ * [Support](#support)\n+ * [Authors](#authors)\n+ * [License](#license)\n+***\n+### Installation\n+```\n+npm install\n+```\n+***\n+### Languages:\n+* Node.js\n+* JSON\n+***\n+### Usage:\n+```\n+npm run build\n+```\n+***\n+### Getting Involved\n+If you would like to be a part of the coala community, you can check out our [Getting In Touch](http://coala.readthedocs.io/en/latest/Help/Getting_In_Touch.html) page or ask us at our active Gitter channel, where we have maintainers from all over the world. We appreciate any help!\n+\n+We also have a [newcomer guide](http://api.coala.io/en/latest/Developers/Newcomers_Guide.html) to help you get started by fixing an issue yourself! If you get stuck anywhere or need some help, feel free to contact us on Gitter or drop a mail at our [newcomer mailing list](https://groups.google.com/forum/#!forum/coala-newcomers).\n+***\n+### Support\n+Feel free to contact us at our [Gitter channel](https://gitter.im/coala/coala), we'd be happy to help!\n+\n+If you are interested in commercial support, please contact us on the Gitter channel as well.\n+\n+You can also drop an email at our [mailing list](https://github.com/coala/coala/wiki/Mailing-Lists).\n+***\n+### Authors\n+You can contact to author for more information.\n+[blazeu](mailto:neversleepman@tfwno.gf)\n+***\n+### License\n+[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)", "created_at": "2017-12-25T14:34:47Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ==", "fields": {"body": "Use !== please.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {", "created_at": "2017-12-25T14:42:41Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng==", "fields": {"body": "Use let or const instead.", "diff": "@@ -8,5 +10,47 @@\n   js = d.createElement(s)\n   js.id = id\n   js.src = p + '://platform.twitter.com/widgets.js'\n+  js.setAttribute('onload', 'twitter_filter()')\n   fjs.parentNode.insertBefore(js, fjs)\n })(document, 'script', 'twitter-wjs')\n+\n+function twitter_filter(twitter_id) {\n+  const twitter_handles = []\n+  const orgs = document.getElementsByClassName('org-info')\n+  \n+  for (var i = 0; i < orgs.length; i++) {\n+    const org_info = orgs[i].children\n+    const children = [].slice.call(org_info)\n+    const twitter_url = children.filter(\n+      x => x.nodeName === 'A' && x.host === 'twitter.com'\n+    )\n+    \n+    if (twitter_url.length != 0) {\n+      const twitter_account = twitter_url[0].pathname.substr(1)\n+      twitter_handles.push(twitter_account)\n+    }\n+  }\n+  \n+  if (document.getElementById(twitter_id) !== null) {\n+    const tweet_authors = document\n+      .getElementById(twitter_id)\n+      .contentWindow.document.getElementsByClassName(\n+        'TweetAuthor-screenName Identity-screenName'\n+      )\n+      \n+    if (tweet_authors.length > 0) {\n+      for (var k = 0; k < tweet_authors.length; k++) {\n+        if (\n+          twitter_handles.indexOf(tweet_authors[k].innerHTML.substr(1)) > -1\n+        ) {\n+          var tweet = getNodesDeep(tweet_authors[k], 5)", "created_at": "2017-12-25T14:43:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA==", "fields": {"body": "Makes it import { getNodesDeep } from 'utils' please.", "diff": "@@ -1,3 +1,5 @@\n+import {getNodesDeep} from 'utils.js'", "created_at": "2017-12-25T14:42:21Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg==", "fields": {"body": "a README in that directory would be useful.  Also for CC licenses, the full text of the license isnt necessary.  A link is acceptable, and a link to the license file in their repo is really good, as it allows the reader to find the original, which is the intent of CC.", "diff": "@@ -57,6 +57,15 @@ <h3>\n                 />\n               </a>\n             {{/github}}\n+            {{#gitlab}}\n+              <a href=\"https://gitlab.com/{{gitlab}}\">\n+                <img\n+                  src=\"images/logos/gitlab.png\"", "created_at": "2017-12-26T05:29:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA==", "fields": {"body": "Can you please update the color? Somebody will be blind. Update the font color to white for example.", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T07:42:35Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng==", "fields": {"body": "Also, crimson or orangered is better than red", "diff": "@@ -123,3 +126,11 @@ footer {\n .chooser {\n   margin-top: 0.5em;\n }\n+\n+.preview {\n+  background-color: red;", "created_at": "2017-12-28T08:21:51Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg==", "fields": {"body": "No need, honestly. It's just one line.", "diff": "@@ -55,5 +56,8 @@\n \t\t</TMPL_LOOP>\n \t</ul>\n </div>\n+<script>\n+twemoji.parse(document.body);", "created_at": "2017-12-29T06:28:56Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTYwMzgxMw==", "fields": {"body": "shit got confused between 2017 and 18 \ud83e\udd2a.  You are all good", "diff": "@@ -74,13 +74,13 @@ can be used to help select a repository that meets those criteria.\n To filter out repositories that do not meet the first two requirements, combine\n \n 1. [`stars:>99`](https://github.com/search?o=desc&q=stars%3A%3E%3D99&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93), and\n-2. [`pushed:>2016-09-30`](https://github.com/search?utf8=%E2%9C%93&q=pushed%3A%3E2016-09-30&type=Repositories&ref=searchresults)\n+2. [`pushed:>2017-09-30`](https://github.com/search?utf8=%E2%9C%93&q=pushed%3A%3E2017-09-30&type=Repositories&ref=searchresults)\n \n-The [combined query](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A>2016-09-30&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)\n+The [combined query](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A>2017-09-30&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)\n has more than 28,000 repository results, so there are many to choose from.\n \n An optional additional search term is\n-[`forks:>100`](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A%3E2016-09-30+forks%3A%3E%3D100&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)\n+[`forks:>100`](https://github.com/search?o=asc&q=stars%3A%3E%3D100+pushed%3A%3E2017-09-30+forks%3A%3E%3D100&ref=searchresults&s=updated&type=Repositories&utf8=%E2%9C%93)", "created_at": "2018-01-04T08:59:59Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ==", "fields": {"body": "@andrewda While some hr elements not using backslash, there is some img elements using backslash. We need to fix this later. Consistency is important.", "diff": "@@ -209,7 +209,8 @@ <h3>\n     </div>\n     <footer>\n       <small data-i18n=\"gci-copyright\">Google Code-in and the Google Code-in logo are trademarks of Google Inc.</small><br />\n-      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small>\n+      <small><span data-i18n=\"gitlab-copyright-1\">The GitLab logo is licensed under</span> <a href=\"https://gitlab.com/gitlab-com/gitlab-artwork/blob/master/LICENSE\">CC BY-NC-SA 4.0</a> <span data-i18n=\"gitlab-copyright-2\">by GitLab Inc.</span></small><br />", "created_at": "2018-01-11T08:00:29Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM5MTY0Mw==", "fields": {"body": "Actually, &gteq; \ud83d\ude1b", "diff": "@@ -33,6 +33,11 @@ <h5 class=\"light\">simply install coala</h5>\n                     </p>\n                 </div>\n                 <div class=\"col m6 s12\">\n+                    <p>In order to use coala, you should have\n+                        <a href=\"https://www.python.org/downloads/\">Python >= 3.4</a> and\n+                        <a href=\"https://pip.pypa.io/en/stable/installing/\">pip >= 8</a> Installed", "created_at": "2018-01-14T09:19:45Z", "last_edited_at": "2018-01-14T09:22:59Z", "author": "nalinbhardwaj", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng==", "fields": {"body": "we probably don't want this as venv is created here only for using coala whereas in the development setup notes coala-venv is created for the purpose of development.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T09:54:17Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA==", "fields": {"body": "Since it's venv in the rest documentation, use venv only. Didn't note that before. ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:03Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ==", "fields": {"body": "@diveshuttam yea i just had a look and IMO you can carry on withvenv and later on file an issue to change it after asking a maintainer ;)", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:54:36Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ==", "fields": {"body": "@pareksha @newbazz @diveshuttam I agree with you guys on being consistent with the naming convention. However my comment was only regarding functionality either way \ud83d\ude0a", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T16:32:11Z", "last_edited_at": null, "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA==", "fields": {"body": "@pareksha  @anctartica actually, naming the virtual environment doesn't change its functionality. Using either venv or coala-venv is correct.", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:00:41Z", "last_edited_at": "2018-01-22T13:01:01Z", "author": "realslimshanky", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA==", "fields": {"body": "yes, i know.. was referring to the context in which the name is used in the documentation", "diff": "@@ -106,6 +106,13 @@ folder:\n \n     $ virtualenv venv\n \n+.. note::\n+\n+    If you have both Python 3 and Python 2 installed, use\n+    ``virtualenv venv -p $(which python3)``.\n+    This creates an isolated Python 3 environment called venv", "created_at": "2018-01-22T13:06:51Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA==", "fields": {"body": "I have already mentioned that the user will not see a version number if virtualenv is not installed and I think the output message would be pretty obvious to know that its not installed yet", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:\n+", "created_at": "2018-01-31T16:45:40Z", "last_edited_at": null, "author": "lilithxxx", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ==", "fields": {"body": "You need to explain the use of --user flag.", "diff": "@@ -90,13 +90,20 @@ Virtualenv is probably what you want to use during development.\n You can read more about\n it at the `virtualenv documentation <http://virtualenv.readthedocs.org>`_.\n \n-First, we need to install virtualenv to the system. You may already have this\n-installed as ``virtualenv`` or ``pyvenv``. If you do not, this can be done\n-with ``pip3`` easily:\n+First, we need to install virtualenv to the system. You may already\n+have this installed as ``virtualenv`` or ``pyvenv``. You can\n+check if it's already installed by typing:\n \n ::\n \n-    $ pip3 install virtualenv\n+    $ virtualenv --version\n+\n+If you see a version number, its already installed. If you do\n+not, this can be done with pip3 easily:", "created_at": "2018-02-05T07:31:55Z", "last_edited_at": null, "author": "newbazz", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw==", "fields": {"body": "till -> until\nRather avoid slang ;)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular\n+section in them (you have not specified any particular sections till", "created_at": "2018-02-22T20:44:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ==", "fields": {"body": "You could actually say \"This special section\" (because it really is special in coala's setting system)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:44:39Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw==", "fields": {"body": "Maybe say that \"This section groups all the settings that are entered via ...\", because the purpose of sections are their grouping-ability.", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the", "created_at": "2018-02-22T20:45:51Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA==", "fields": {"body": "--> \"that don't belong to a particular section\", I think this one is better :)", "diff": "@@ -170,11 +170,14 @@ Thats all nice and well but we also have a Makefile for our project we\n want to check. So let us introduce another feature of our configuration\n syntax: *sections*.\n \n-The line ``[Default]`` specifies that everything below will belong to\n-the Default section. If nothing is specified, a setting will implicitly\n-belong to this section.\n+The line ``[cli]`` implies that everything below belongs to the \"cli\"\n+section. This section handles all the settings that are entered via the\n+Command Line Interface (CLI) and that don't specify any particular", "created_at": "2018-02-22T20:47:12Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg==", "fields": {"body": "Ah :3 Regarding \u261d\ufe0f  edf0dae#r170088538\nSo this is what should come earlier, in the Configuration Files - coafiles-paragraph.", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:02Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng==", "fields": {"body": "Hm not sure we should encourage people to name it \"all\". But yeah, maybe a good convention in future? Not sure :3", "diff": "@@ -292,10 +303,26 @@ After the results we've already seen, we'll see a new informational one\n which informs us that we have a TODO in our code.\n \n Did you note that we didn't specify which files to check this time? This\n-is because all settings, including ``files = src/*.c``, from the Default\n-section are already available in every other section implicitly. Thus\n-the default section is a good point to set things like logging and\n-output settings or specifying a default set of files to check.\n+is because all settings, including ``files = src/*.c``, from the ``all``\n+section (previously called ``cli``) have been inherited in the new\n+``TODOS`` section that we just added.\n+\n+You can make a section inherit from any previously defined section using\n+this syntax:\n+\n+::\n+\n+    [parentSection.childSection]\n+\n+.. note::\n+\n+    ``cli`` is an internally reserved section name. All of its settings\n+    are implicitly inherited to every other section by default. It is\n+    because of this implicit inheritance feature that we are adviced to\n+    rename the ``cli`` section to something else. Doing so will save us\n+    from having unexpected values of ``cli`` being implicitly inherited\n+    into our sections. We suggest that you change its name to ``all``.", "created_at": "2018-02-22T20:52:28Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI2NDYxOA==", "fields": {"body": "Okay sure. I'll just modify the milestones and scooch write new actions in there. :-)", "diff": "@@ -0,0 +1,43 @@\n+---\n+name: \"Nextgen action system\"\n+desc: \"Actions in coala should be improved to allow for more dynamic actions\"\n+requirements:\n+ - \"The applicant must understand how results and actions work in coala.\"\n+ - \"The proposal needs to contain a clear concept.\"\n+difficulty: \"medium\"\n+mentors:\n+ - Makman2\n+ - jayvdb\n+initiatives:\n+ - GSoC\n+tags:\n+ - core\n+---\n+\n+Currently, `Result` objects are passed to action objects as parameters when coala tries to apply an action. This is a bit restrictive as this means that coala needs to have a global set of actions that it tries to apply on all `Result` objects. Sure, coala checks if an action `is_applicable()` before it tries to apply it but it needs to do that for every `Result` that every bear ever generates.\n+\n+We need a way allow results to define actions by themselves, like result = Result(actions=[AmendCommitAction, ...]). Here are the benefits of such an approach:\n+1. More control inside actions over the interaction process.\n+2. Bears can specify their own actions, for example the GitCommitBear would highly benefit from this (actions could be added for amending commits). Then, the bear writers could get much more creative and generate even more useful bears.\n+\n+#### Milestones\n+\n+##### COMMUNITY BONDING\n+\n+* Student should have a clear plan and conceptual work must be finished.\n+* The applicant should know how to work with the community.\n+\n+##### CODING PHASE 1 \n+\n+* Changes to the `Result` class must be finished including writing tests and documentation\n+\n+##### CODING PHASE 2\n+\n+* Action classes have been revamped so that they allow the above mentioned benefits\n+* Refactoring of the existing action classes in order to comply with the above plan must be partially complete\n+\n+##### CODING PHASE 3\n+\n+* All existing action classes have been refactored, tested and changes merged\n+* Any other functions/modules that are affected by changes have been refactored\n+* coala tutorials and bear writing tutorials have been updated", "created_at": "2018-03-17T17:35:11Z", "last_edited_at": null, "author": "nityeshaga", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTg3NDU2OA==", "fields": {"body": "I am allocated on too many project ideas as it is. :P", "diff": "@@ -0,0 +1,86 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"This project is about updating bear to use aspect feature.\"\n+developers_involved: []\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+  - RGSoC\n+issues: []\n+markdown: convert_bear_to_aspects.md\n+mentors:\n+  - jayvdb", "created_at": "2018-03-20T18:21:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTQ0NA==", "fields": {"body": "enocouraged - spelling... but, use stronger language, and gender neutral when possible:\n\nCandidate is expected to incorporate their own ideas and designs.", "diff": "@@ -41,11 +37,108 @@ corrections or gramatical corrections.\n In addition Bears will be able to offer templated patches, e.g. to offer\n variable renamings while the user should be asked for the new variable name.\n \n+#### Sample mockups\n+\n+Source: https://docs.google.com/document/d/1BLZO2tD93yKdO7XhMb5NgJvytu-pWDtPMRidGmjQ8EY/edit?usp=sharing (You are free to use ideas discussed in the proposal).\n+\n+Candidates can take help of following sample mockups to understand the use cases better. The mockups discussed below however need not be strictly followed. Candidate is enocouraged than welcome to incorporate his ideas and designs.", "created_at": "2018-03-21T02:54:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTY5OA==", "fields": {"body": "blank line after :", "diff": "@@ -15,24 +15,20 @@ mentors:\n   - jayvdb\n name: \"Improve Diff Handling\"\n requirements:\n-  - \"The proposal has to contain a clear concept.\"\n+  - \"The proposal has to contain a clear concept and implementation approach.\"\n   - \"The applicant should have one patch accepted to the coala core.\"\n tags:\n   - Core\n   - CLI\n ---\n-One advantage of using coala is that some Bears offer automatically generated\n-diffs to fix the problems they detect. This mechanism works smoothly as of now\n-and even applies the proposed diff automatically to the problematic file if the\n-user so desires. This is very helpful to the users. At the same time, not\n-every issue in the code can have just a single correct solution. The fix can\n-and should also be modifiable by the preferences of the user. Thus the\n-following improvements can be incorporated giving coala the ability to:\n-\n-1. Offer multiple diffs, i.e. multiple different fixes to the same issue.\n+coala provides static analysis routines in the form of bears that have capabilities to detect or even fix the problematic code. coala converts the fixes provided by different bears to its own `Diff` class instance which is later used to display the fix along with the analysis results to the users and let the users choose appropriate actions. This mechanism works smoothly as of now and even applies the proposed diff automatically to the problematic file if the user so desires. This is very helpful to the users. At the same time, not every issue in the code can have just a single correct solution. The fix can and should also be modifiable by the preferences of the user.\n+\n+The primary objective of the project is to improve the existing diff handling capability of coala so that it is possible for the bears to do things like:", "created_at": "2018-03-21T02:57:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTYzNg==", "fields": {"body": "grammar issue with for the enhance features  enhanced?", "diff": "@@ -65,3 +158,4 @@ variable renamings while the user should be asked for the new variable name.\n * The feature of templated patches is merged and fully tested.\n * The new API is fully documented on <https://api.coala.io/>.\n * At least one Bear exists that makes use of this.\n+* Output formats for the enhance features are added and their processing functions are implemented in the `Linter` class.", "created_at": "2018-03-21T02:56:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTczOA==", "fields": {"body": "split lines at 80cpl", "diff": "@@ -15,24 +15,20 @@ mentors:\n   - jayvdb\n name: \"Improve Diff Handling\"\n requirements:\n-  - \"The proposal has to contain a clear concept.\"\n+  - \"The proposal has to contain a clear concept and implementation approach.\"\n   - \"The applicant should have one patch accepted to the coala core.\"\n tags:\n   - Core\n   - CLI\n ---\n-One advantage of using coala is that some Bears offer automatically generated\n-diffs to fix the problems they detect. This mechanism works smoothly as of now\n-and even applies the proposed diff automatically to the problematic file if the\n-user so desires. This is very helpful to the users. At the same time, not\n-every issue in the code can have just a single correct solution. The fix can\n-and should also be modifiable by the preferences of the user. Thus the\n-following improvements can be incorporated giving coala the ability to:\n-\n-1. Offer multiple diffs, i.e. multiple different fixes to the same issue.\n+coala provides static analysis routines in the form of bears that have capabilities to detect or even fix the problematic code. coala converts the fixes provided by different bears to its own `Diff` class instance which is later used to display the fix along with the analysis results to the users and let the users choose appropriate actions. This mechanism works smoothly as of now and even applies the proposed diff automatically to the problematic file if the user so desires. This is very helpful to the users. At the same time, not every issue in the code can have just a single correct solution. The fix can and should also be modifiable by the preferences of the user.", "created_at": "2018-03-21T02:58:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk4Mjc3Nw==", "fields": {"body": "I think it depends on the students. For me, linting feature is enough.", "diff": "@@ -0,0 +1,63 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Offer coala languager server.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+  - RGSoC\n+issues:\n+  - \"https://github.com/coala/coala-vs-code/issues/3\"\n+  - \"https://github.com/coala/coala-vs-code/issues/4\"\n+markdown: coala_language_server.md\n+mentors:\n+  - gaocegege\n+name: \"coala Language Server\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala.\"\n+  - \"The applicant shoule be familiar with language server protocol\"\n+tags:\n+  - Language Server\n+  - Plugins\n+---\n+\n+The [Language Server Protocol](https://langserver.org/) was created by Microsoft to define a common language for programming language analyzers to speak. Today, several companies have come together to support its growth, including Codenvy, Red Hat, and Sourcegraph, and the protocol is becoming supported by a rapidly growing list of editor and language communities:\n+\n+- VS Code\n+- Eclipse Che\n+- Eclipse IDE(Eclipse LSP4E)\n+- IntelliJ / JetBrains IDEs\n+- Vim\n+- Atom (WIP)\n+- Emacs (WIP)\n+- Sublime (WIP)\n+\n+We have a state-of-art implementation in [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed for VS Code only. We need to design and implement a general mechanism for multiple editors/IDEs support.\n+\n+The project is divided into two parts:\n+\n+1. Offer a basic languager server.\n+2. Implement a plugin based on the language server.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- An official repository exists with CI.\n+- An mock language server exists.\n+\n+##### CODING PHASE 1\n+\n+- A basic language server for coala exists.", "created_at": "2018-03-21T04:27:28Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzE1NQ==", "fields": {"body": "Remove after debugging", "diff": "@@ -138,6 +138,21 @@ export function parseRoute({params, routes, location}) {\n class FilterState {\n   constructor(state) {\n     this.state = state;\n+    if (this.state.repoInfos.length === 0) {\n+      const repositories = process.env.REPOSITORIES || 'coala';\n+      const repoOwner = 'coala'; //default repoOwner\n+\n+      // extracting repo names\n+      let repoNames = repositories.substring(repositories.indexOf(\":\") + 1).split(\"|\");\n+\n+      let arr = [];\n+      repoNames.forEach(repoName => {\n+        arr.push({ repoOwner, repoName});\n+      })\n+\n+      this.state.repoInfos = arr;\n+    }\n+    console.log(this.state.repoInfos)", "created_at": "2018-04-08T10:34:16Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxNTE1NA==", "fields": {"body": "@refactormyself\nWe are using coala's docker image to run coala on this repository, so we are not installing coala using pip over here.\nYou should consider removing these pip statements, and rather putting the if condition above the docker line, so that the GitCommitBear is ignored before running coala from docker", "diff": "@@ -10,7 +10,14 @@ cache: bundler\n script:\n   - .ci/build.sh\n   - docker run -v=$(pwd):/app --workdir=/app coala/base coala --ci\n-\n+  - pip install ./dist/coala-*.whl", "created_at": "2018-04-11T22:19:59Z", "last_edited_at": "2018-04-11T22:24:20Z", "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw==", "fields": {"body": "Just do multiple variable on a single destructuring line { a, b, c }", "diff": "@@ -9,17 +9,16 @@ const wdk = require('wikidata-sdk')\n const cheerio = require('cheerio')\n \n const { GITHUB_REPO_INFO_QUERY } = require('./queries')\n+const { GITHUB_SEARCH_ORG_QUERY } = require('./queries')\n+const { GITHUB_USER_INFO_QUERY } = require('./queries')", "created_at": "2018-04-17T11:51:49Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA==", "fields": {"body": "since rultor died pre tag hasn't been updated for coala. Hardly likely it's done for coala quick start. You must remove this.", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre", "created_at": "2018-04-19T06:45:05Z", "last_edited_at": "2018-04-19T06:47:36Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw==", "fields": {"body": "coala-quickstart coala Quickstart\n\"Generating a .coafile using coala-quickstart\" sounds better", "diff": "@@ -27,6 +27,7 @@ Welcome to the coala documentation!\n    Installing coala <Users/Install>\n    Getting Started with coala <Users/Tutorial>\n    Writing a coala Configuration File (coafile and coarc) <Users/coafile>\n+   Using coala Quickstart to Generate a .coafile <Users/coala_quickstart.rst>", "created_at": "2018-04-19T06:50:10Z", "last_edited_at": "2018-04-19T06:50:27Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA==", "fields": {"body": "this tool called", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called", "created_at": "2018-04-19T06:54:42Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw==", "fields": {"body": "use it, to", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.", "created_at": "2018-04-19T06:55:14Z", "last_edited_at": "2018-04-19T06:56:51Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ==", "fields": {"body": "this doesn't seem much of a feature, you can add automatic detection of bear settings instead of this", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your", "created_at": "2018-04-19T06:58:02Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA==", "fields": {"body": "then", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages", "created_at": "2018-04-19T07:02:44Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA==", "fields": {"body": "After that you will --> You will now", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears", "created_at": "2018-04-19T07:02:27Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ==", "fields": {"body": "good to go --> done!", "diff": "@@ -0,0 +1,77 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of this tool called\n+coala-quickstart by providing a brief introduction about its features and how\n+to use it, to quickly generate coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatatically ignoring the files mentioned in the ``.gitignore`` of your\n+  project's directory.\n+- Automatic identification of bears that might be relevant for your project\n+  based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+To install the latest development version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart --pre\n+\n+.. note::\n+\n+    The latest code from the master branch is automatically deployed as the\n+    development version in PyPI.\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will then detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. After that you will be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are good to go.", "created_at": "2018-04-19T07:03:52Z", "last_edited_at": "2018-04-19T07:07:54Z", "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA==", "fields": {"body": "cli -> CLI", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with", "created_at": "2018-04-19T07:25:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ==", "fields": {"body": "new paragraph for \"It ...\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages", "created_at": "2018-04-19T07:25:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA==", "fields": {"body": "\"fire up\" -> \"execute\"", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's", "created_at": "2018-04-19T07:27:00Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA==", "fields": {"body": "shouldnt editing .coafile be done before running coala?", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+\n+Usage\n+-----\n+\n+To get started simply run:\n+\n+::\n+\n+    $ coala-quickstart\n+\n+This should prompt you for your project's directory. If you want to use your\n+current directory, just press the return key. It will detect the languages\n+used in your project and provide a percentage distribution of those languages\n+in your project. You will now be presented with a list of bears\n+that might be relevant to your project to choose from. Once you choose your\n+bears you are done.\n+\n+At the end, you should have a file named ``.coafile`` generated at the root of\n+your project directory. This contains all the settings needed by coala to lint\n+and fix your code.\n+\n+Once you have completed these steps just fire up coala from your project's\n+root:\n+\n+::\n+\n+    $ coala\n+\n+You can also open the .coafile in your favorite editor and edit the settings", "created_at": "2018-04-19T07:27:28Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA==", "fields": {"body": "you add the clone, cd and then pip install . method for latest development version", "diff": "@@ -0,0 +1,64 @@\n+Using coala-quickstart to Generate a coala Configuration File\n+=============================================================\n+\n+This document aims to make people aware of coala-quickstart by providing a\n+brief introduction about its features and how to quickly generate\n+coala configuration files for your projects.\n+\n+What is coala-quickstart?\n+-------------------------\n+\n+coala-quickstart is a cli tool that helps users to quickly get started with\n+coala by generating a ``.coafile`` tailored for their project. The ``.coafile``\n+is generated based on the questions answered by the users about their project.\n+\n+Features\n+--------\n+\n+coala-quickstart offers the following features:\n+\n+- Out-of-the-box support for projects using various popular languages such as\n+  C/C++, Python, JavaScript and many more with built-in check routines.\n+- Automatic detection of languages used in your project.\n+- Automatic identification of bears that might be relevant for your project and\n+  detection of bear settings based on the languages used.\n+- A clean and simple interface with a well defined flow.\n+\n+Installation\n+------------\n+\n+To install the latest stable version run:\n+\n+::\n+\n+    $ pip3 install coala-quickstart\n+", "created_at": "2018-04-19T07:32:45Z", "last_edited_at": null, "author": "ishanSrt", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg==", "fields": {"body": "@manankalra Looks good. \ud83d\udc4d\nI also agree with you that adding \"on_success: never\" should be there as well. Gitmate automatically approves the PR if all CI passes, so there should ideally be no message in that case. \ud83d\ude04", "diff": "@@ -11,6 +11,7 @@ script:\n \n notifications:\n   email: false\n+  webhooks: https://www.travisbuddy.com/", "created_at": "2018-04-24T04:40:15Z", "last_edited_at": null, "author": "prnvdixit", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNjg3NQ==", "fields": {"body": "Just a thought, so github also provides confused, laugh, heart and tada emojis. We can use the confused to find out if the comments are descriptive enough.\nFor example a common advice given to a newcomer PR is to follow coala guidelines for commit and amend the commit message.\nNow there are various ways in which reviewers can express this, some can be descriptive enough, some can be very descriptive with links and stuff, also some can be non descriptive comprising of our internal workflow lingo and hence non newcomer friendly. So maybe this is one of instances where we can exploit the confused emoji.", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.", "created_at": "2018-04-26T08:58:21Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNzU4OA==", "fields": {"body": "So I'd suggest that during this phase,\n\nwe can make some mockups for the frontend you can get feedback\nget acquainted with css designing a bit (materialize css) and data viz library like d3 (?)", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and analyzed. By tracking reactions, a nice feedback loop would be created for both senior and junior reviewers. Also, this information can be used as newcomer metrics.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be tracked and handled.", "created_at": "2018-04-26T09:00:44Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzMzgzMQ==", "fields": {"body": "is this a mistype in THUMBS_UP and THUMBS_DOWN (should be B instead of P)?", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.", "created_at": "2018-04-26T09:57:06Z", "last_edited_at": null, "author": "alisianoi", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ==", "fields": {"body": "Also fix coala/gh-board#13 ?\nSee coala/gh-board#10 (comment)\nWe're currently running the app on the browser on CI to fetch the issues from coala repositories and that isn't the most elegant thing https://github.com/coala/gh-board/blob/master/script/fetch-issues.js\nI believe that'll help you in the long run.\nAlso see the React code a bit, you'll notice that it's still using React.createClass which is deprecated, a small refactor to convert that into class component would be nice, and while we're at it might as well upgrade it to React v16.3 and further remove all the deprecations. But, I think all the refactoring is quite big, and not that really important/necessary for achieving this project. It is up to you.", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and analyzed. By tracking reactions, a nice feedback loop would be created for both senior and junior reviewers. Also, this information can be used as newcomer metrics.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be tracked and handled.", "created_at": "2018-04-26T10:00:14Z", "last_edited_at": "2018-04-26T10:00:28Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNTczMA==", "fields": {"body": "The refactoring will help you get familiar with the project and React in general (if you haven't already).", "diff": "@@ -0,0 +1,54 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch accepted to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to meta-moderation system that can track emoji responses to review comments. These responses would be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.\n+\n+People including the author of pull request respond to comments by attaching emojis. Those emojis are called meta-review, or [reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMPS_UP and THUMPS_DOWN together with other reactions are used by people especially the author of pull request to publicly acknowledge or reject review comments. This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and analyzed. By tracking reactions, a nice feedback loop would be created for both senior and junior reviewers. Also, this information can be used as newcomer metrics.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be tracked and handled.", "created_at": "2018-04-26T10:04:10Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDU2MTkwNQ==", "fields": {"body": "Note that this project is also about encouraging people to do meta-review of PR comments, systematically.\nCurrently, we do not do this systematically, or even occasionally.  emoji use is currently hap-hazard, and probably the currently implied meaning of :+1: is \"OK, I will do this\", not \"I agree\"+\"I found your communication style appropriate\".\nThis actually presents a problem for gh-board, as its UI is currently centric to the issue/PR, and it does not display issue comments. The granularity of gh-board is wrong.  How then do we use gh-board to show which PR reviews have not been meta-reviewed yet.  Worst case is that the tracking stores in the json which PR do not have meta-reviews, and gh-board shows only a list of those PRs (and the user must then find the reviews in GitHub PR webapp, and do meta-review there).  An improvement is to store the identifier of the PR comments which do not have meta-reviews, and gh-board links to the PR review comment in GitHub PR webapp.  In the ultimate version, gh-board would show the review comments.", "diff": "@@ -0,0 +1,57 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks and provides meaningful analysis of reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch merged to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and javascript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The goal of project meta-review is to build a meta-review track system similar to a meta-moderation system that can track emoji responses to review comments. These responses are to be collected, processed and displayed on [gh-board][https://github.com/coala/gh-board], which is a nice serverless kanban board.", "created_at": "2018-04-26T23:54:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDY3NTQ1NA==", "fields": {"body": "I've been thinking, maybe \"Modernize existing React component code in gh-board project\" makes it more clear here.", "diff": "@@ -0,0 +1,95 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Implement a meta-review system that tracks and provides meaningful analysis of reactions on reviews.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://github.com/coala/projects/issues/480\"\n+markdown: meta_review.md\n+mentors:\n+  - hemangsk\n+  - blazeu\n+  - alisianoi\n+  - andrewda\n+name: \"Meta-review\"\n+requirements:\n+  - \"The applicant should have at least one patch merged to any of the coala repositories.\"\n+  - \"The applicant should be familiar with GitHub GraphQL API and JavaScript.\"\n+status: in_progress\n+tags:\n+  - community\n+  - web\n+---\n+\n+The meta-review project is about building a meta-review system,\n+similar to a meta-moderation system, that can track emoji responses to\n+review comments. These responses are to be collected, processed and displayed\n+on [gh-board][https://github.com/coala/gh-board], which is a nice serverless\n+kanban board.\n+\n+People including the author of pull request respond to comments by attaching\n+emojis. Those emojis are called meta-review, or\n+[reactions][https://developer.github.com/v4/enum/reactioncontent/]. THUMBS_UP\n+and THUMBS_DOWN, together with other reactions, are used by people especially\n+the author of pull request to publicly acknowledge or reject review comments.\n+This provides feedback to reviewers and all other members.\n+\n+However, those reactions spread over all PRs and are not collected and\n+analyzed. By tracking reactions, a nice feedback loop would be created\n+for both senior and junior reviewers. Also, this information can be used\n+as newcomer metrics.\n+\n+One goal of this project is to encourage people to do meta-reviews,\n+systematically. Worst case is that the tracking stores in the json which\n+PR do not have meta-reviews, and gh-board shows only a list of those PRs\n+(and the user must then find the reviews in GitHub PR webapp, and do\n+meta-review there). An improvement is to store the identifier of the PR\n+comments which do not have meta-reviews, and gh-board links to the PR\n+review comment in GitHub PR webapp. In the ultimate version, gh-board\n+would show the review comments.\n+\n+Also, to encourage people to do more meta-reviews, statistics of meta-reviews\n+are to be collected and analysed. People who do meta-reviews will get scores\n+according to some metrics. A ranking list is to be displayed on gh-board.\n+\n+The scope of this project would exclude non-public meta-reviews. That is,\n+there would not be any anonymous meta-reviews as that introduces too many\n+additional complexities. The public only version would be used for\n+long time before adding support for non-public meta-reviews.\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+- The applicant has proposed and merged a cEP of how meta-reviews could be\n+  tracked and handled.\n+- The applicant has created mockups for the frontend.\n+- The applicant gets acquainted with materialize CSS.\n+- The applicant gets acquainted with data visualization\n+  library (e.g. d3.js).\n+- The applicant gets\n+  [gh-board#13][https://github.com/coala/gh-board/issues/13] fixed.\n+- The applicant refactors React code a bit.", "created_at": "2018-04-27T12:42:20Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA==", "fields": {"body": "I don't think it's necessary to convert method other than event listener to class properties, this is still this class because it's not called from event listener.\nRelated https://stackoverflow.com/questions/44423947/javascript-class-methods-versus-properties#comment75847321_44424064", "diff": "@@ -26,11 +25,13 @@ const FilterCategory = React.createClass({\n       }\n       return true;\n     });\n-  },\n-  onFilterInputChange(e) {\n+  };\n+\n+  onFilterInputChange = (e) => {\n     this.setState({filterStr: e.currentTarget.value});\n-  },\n-  renderItem(item) {\n+  };\n+\n+  renderItem = (item) => {", "created_at": "2018-05-01T15:19:21Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0OTA4Mg==", "fields": {"body": "This can be converted to functional component.\nAll component with only render method can be functional component, I'll stop marking.", "diff": "@@ -49,9 +49,9 @@ const ListGroupWithMore = React.createClass({\n       </BS.ListGroup>\n     );\n   }\n-});\n+}\n \n-const RepoItem = React.createClass({\n+class RepoItem extends React.Component {\n   render() {", "created_at": "2018-05-01T15:28:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ==", "fields": {"body": "Could just be me, but I much prefer extends Component over extends React.Component. (i.e. importing Component using import React, {Component} from 'react')", "diff": "@@ -6,7 +6,7 @@ import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n+class AnonymousModal extends React.Component {", "created_at": "2018-05-01T16:28:59Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI4OTY1OA==", "fields": {"body": "Yeah, let's do that.\nAdditionally, babel-plugin-react-require can be used to auto import React when the file only has functional component that doesn't need to extends from Component", "diff": "@@ -6,7 +6,7 @@ import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n+class AnonymousModal extends React.Component {", "created_at": "2018-05-01T18:04:57Z", "last_edited_at": "2018-05-01T18:05:18Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTQ1OA==", "fields": {"body": "Maybe we could leave this as a separate issue? If we decide to move back to normal methods, we need careful reviews. Errors are likely to be missed in this large PR.\nIf I move some inappropriate methods back to use normal class methods, there would be no diff for that method in this PR, which is almost impossible for reviewers to detect if I make any errors.", "diff": "@@ -26,11 +25,13 @@ const FilterCategory = React.createClass({\n       }\n       return true;\n     });\n-  },\n-  onFilterInputChange(e) {\n+  };\n+\n+  onFilterInputChange = (e) => {\n     this.setState({filterStr: e.currentTarget.value});\n-  },\n-  renderItem(item) {\n+  };\n+\n+  renderItem = (item) => {", "created_at": "2018-05-05T01:58:12Z", "last_edited_at": "2018-05-05T02:02:22Z", "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTY0Nw==", "fields": {"body": "You made the your own getTime function below.", "diff": "@@ -1,64 +1,211 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: moment(node.updatedAt).toDate().getTime(),", "created_at": "2018-05-05T02:07:31Z", "last_edited_at": "2018-05-05T02:09:28Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTcwMA==", "fields": {"body": "Can be turned into arrow function and put at the very top.", "diff": "@@ -1,64 +1,211 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: moment(node.updatedAt).toDate().getTime(),\n+        issue: {\n+          htmlUrl: node.url,\n+          number: node.number,\n+          title: node.title,\n+          body: node.bodyText,\n+          comments: node.comments.totalCount,\n+          updatedAt: node.updatedAt,\n+          state: node.state,\n+          user: {\n+            login: node.author ? node.author.login : null,\n+            avatarUrl: node.author? node.author.avatarUrl : null\n+          },\n+          milestone: {\n+            title: node.milestone ? node.milestone.title : null,\n+            createdAt: node.milestone? node.milestone.createdAt : null,\n+            dueOn: node.milestone? node.milestone.dueOn : null,\n+            state: node.milestone? node.milestone.state : null,\n+            htmlUrl: node.milestone? node.milestone.url : null,\n+            description: node.milestone? node.milestone.description : null,\n+          },\n+          labels: node.labels.nodes.map(label => ({\n+            name: label.name,\n+            color: label.color\n+          }))\n         }\n-      })\n+      };\n+      if (!isIssue) {\n+        info.pullRequest = {\n+          htmlUrl: node.url\n+        };\n+      }\n+      return info;\n+    });\n+    data = data.concat(result);\n+    if (hasPreviousPage && (pageCount < pageThreshold || pageThreshold == -1)) {\n+      return fetchNextPage(owner, name, isIssue, data,\n+        cursor, pageCount);\n+    } else {\n+      return data;\n     }\n+  } else {\n+    console.log('Warning: no available data. owner:', owner, 'name:', name,\n+      'isIssue:', isIssue, 'pageCount:', pageCount);\n+    return data;\n+  }\n+}\n \n-    return Promise.all([\n-      dump('issues'),\n-      dump('repoLabels'),\n-      dump('repositories'),\n-    ])\n-  })\n-\n-  cache = {\n-    issues: cache[0],\n-    repoLabels: cache[1],\n-    repositories: cache[2],\n+async function fetchIssue(owner, names, isIssue) {\n+  //return Promise.all(names.map(async name => {\n+  let result = [];\n+  for (const name of names) {\n+    try {\n+      result = result.concat(\n+        await fetchNextPage(owner, name, isIssue, [], null, 0));\n+    } catch (error) {\n+      console.log('repo owner:', owner, 'repo name:', name,\n+        'is issue:', isIssue, 'error:', error);\n+    }\n   }\n+  return result;\n+}\n+\n+function fetchLabel(owner, names) {\n+  return Promise.all(names.map(async name => {\n+    try {\n+      const { data } = await client.query(GITHUB_LABEL_INFO_QUERY,  {owner, name});\n+      let result = [];\n+      if (data && data.repository) {\n+        result = data.repository.labels.nodes.map(node => ({\n+          id: node.id,\n+          name: node.name,\n+          color: node.color,\n+          default: node.isDefault,\n+        }));\n+      }\n+      return {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result,\n+      };\n+    } catch (error) {\n+      console.log(error);\n+    }\n+  }));\n+}\n+\n+function getTime(timeString) {\n+  return moment(timeString).toDate().getTime();", "created_at": "2018-05-05T02:10:33Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI1MTIwNw==", "fields": {"body": "oh ... that is at the repo level .. hmm.. this might be ok...\ngit grep updatedAtMs\nscript/fetch-issues.js:        updatedAtMs: moment(node.updatedAt).toDate().getTime(),\nsrc/database.js:      updatedAtMs: moment(issue.updatedAt).toDate().getTime(),", "diff": "@@ -1,64 +1,208 @@\n-const puppeteer = require('puppeteer')\n-const fs = require('fs')\n+const fs = require('fs');\n+const moment = require('moment');\n+const GraphQL = require('graphql-client');\n \n-const repo = process.env.REPOSITORIES\n-const token = process.env.GITHUB_TOKEN\n+const {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY\n+} = require('./queries');\n \n-if (!repo) {\n-  console.log('No repositories to cache. Skipping.')\n-  process.exit()\n-}\n+const GH_GQL_BASE = 'https://api.github.com/graphql';\n+const GH_GQL_OPTIONS = {\n+  url: GH_GQL_BASE,\n+  headers: process.env.GITHUB_TOKEN\n+    ? { Authorization: `bearer ${process.env.GITHUB_TOKEN}` }\n+    : {}\n+};\n \n-console.log('Fetching issues data for', repo)\n+const client = GraphQL(GH_GQL_OPTIONS);\n \n-;(async () => {\n-  const browser = await puppeteer.launch()\n-  const page = await browser.newPage()\n+// number of pages we want to query (default: 20 pages x 100 items)\n+// if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n+const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+console.log('page number threshold:', pageThreshold);\n \n-  const refresh = async () =>\n-    await page.goto(`http://localhost:8080/#/r/${repo}/kanban`)\n+const repo = process.env.REPOSITORIES;\n+\n+if (!repo) {\n+  console.log('No repositories to cache. Skipping.');\n+  process.exit();\n+}\n \n-  await refresh()\n-  await page.evaluate(token => {\n-    localStorage.setItem('gh-token', token)\n-  }, token)\n-  await refresh()\n+const repoOwner = repo.split(':')[0];\n+const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-  await page.waitForSelector('.kanban-board', { timeout: 5 * 60 * 1000 })\n+console.log('Fetching issues data for', repoOwner, repoNames);\n \n-  let cache = await page.evaluate(() => {\n-    const dump = key => {\n-      return new Promise(resolve => {\n-        const open = indexedDB.open(key, 1)\n+const getTime = timeString => moment(timeString).toDate().getTime();\n \n-        open.onsuccess = () => {\n-          const db = open.result\n-          const tx = db.transaction(key)\n-          const store = tx.objectStore(key)\n+async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n+  // fetch data of next page\n+  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+    'cursor:', cursor, 'page count:', pageCount);\n \n-          store.getAll().onsuccess = event => {\n-            resolve(event.target.result)\n-          }\n+  let nextData = null, hasPreviousPage = false;\n+  pageCount++;\n+  try {\n+    if (isIssue) {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+    else {\n+      ({ data: nextData } = await client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, before: cursor}\n+      ));\n+    }\n+  } catch (error) {\n+    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n+      'cursor:', cursor, 'error:', error);\n+  }\n+  if (nextData && nextData.repository) {\n+    let nodes = [];\n+    if (isIssue) {\n+      ({ nodes, pageInfo } = nextData.repository.issues);\n+    }\n+    else {\n+      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n+    }\n+    cursor = pageInfo.startCursor;\n+    hasPreviousPage = pageInfo.hasPreviousPage;\n+    const result = nodes.map(node => {\n+      let info = {\n+        repoOwner: owner,\n+        repoName: name,\n+        updatedAtMs: getTime(node.updatedAt),", "created_at": "2018-05-05T03:38:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQ0NDY4OA==", "fields": {"body": "I just transformed it into the functional component. You are right, the undefined onClickIcon has nothing to do with whether it is using class or function.\nFiled another issue #29 for the undefined onClickIcon.", "diff": "@@ -10,7 +10,7 @@ import GithubFlavoredMarkdown from './gfm';\n import Loadable from './loadable';\n import ColoredIcon from './colored-icon';\n \n-const IssueOrPullRequestBlurb = React.createClass({\n+class IssueOrPullRequestBlurb extends Component {", "created_at": "2018-05-07T14:42:41Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQwOTc5MQ==", "fields": {"body": "This will introduce error, since it's functional component and has no this.setState\nhttps://jsbin.com/dodalubaxo/edit?html,js,output", "diff": "@@ -1,45 +1,42 @@\n-import React from 'react';\n import * as BS from 'react-bootstrap';\n import {GearIcon} from 'react-octicons';\n \n import CurrentUserStore from '../user-store';\n \n let hasAlreadyShownAnonymousModal = false;\n \n-const AnonymousModal = React.createClass({\n-  render() {\n-    const onHide = () => {\n-      hasAlreadyShownAnonymousModal = true;\n-      this.setState({ showModal: false});\n-    };\n-    let showModal;\n-    if (CurrentUserStore.getUser()) {\n-      showModal = false;\n-    } else {\n-      showModal = !hasAlreadyShownAnonymousModal;\n-    }\n+function AnonymousModal() {\n+  const onHide = () => {\n+    hasAlreadyShownAnonymousModal = true;\n+    this.setState({ showModal: false});", "created_at": "2018-05-07T12:36:34Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg==", "fields": {"body": "Ah ok. We'll leave it as it is.\nBut does it even matter? Since this.onClickIcon is undefined whether it is using class or functional. It would lead to an error either way.\nProbably open an issue after finding where the component is located in the UI, if there's an error.", "diff": "@@ -10,7 +10,7 @@ import GithubFlavoredMarkdown from './gfm';\n import Loadable from './loadable';\n import ColoredIcon from './colored-icon';\n \n-const IssueOrPullRequestBlurb = React.createClass({\n+class IssueOrPullRequestBlurb extends Component {", "created_at": "2018-05-07T12:52:39Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU5NjQ4NA==", "fields": {"body": "Please note that a 'split line' type of change should only be done in this PR where the change already contains a non-whitespace modification to the line.\nWe dont want git diff -w for this patch getting extra changes which are line splits.\nThere are only a few cases in this PR where the very long line is already changing syntax, so we may as well also improve the layout a little.", "diff": "@@ -10,28 +11,32 @@ import Loadable from './loadable';\n import Progress from '../progress';\n import Database from '../database';\n \n-const ProgressView = React.createClass({\n-  getInitialState() {\n-    return {message: null, ticks: 0, max: 0};\n-  },\n+class ProgressView extends Component {\n+  state = {message: null, ticks: 0, max: 0};\n+\n   componentDidMount() {\n     const {progress} = this.props;\n     progress.on('start', this.onStart);\n     progress.on('tick', this.onTick);\n     progress.on('stop', this.onStop);\n-  },\n+  }\n+\n   componentWillUnmount() {\n     const {progress} = this.props;\n     progress.off('start', this.onStart);\n     progress.off('tick', this.onTick);\n     progress.off('stop', this.onStop);\n-  },\n-  onStart(context) { this.setState({max: this.props.progress.max, message: 'Start: ' + context}); },\n-  onTick(context, ticks, max) {\n+  }\n+\n+  onStart = (context) => { this.setState({max: this.props.progress.max, message: 'Start: ' + context}); };\n+\n+  onTick = (context, ticks, max) => {\n     this.setState({ticks: ticks, max: max, message: context});\n     this.forceUpdate();\n-  },\n-  onStop(context) { this.setState({ticks: this.props.progress.ticks, max: this.props.progress.max, message: 'Finished: ' + context}); },\n+  };\n+\n+  onStop = (context) => { this.setState({ticks: this.props.progress.ticks, max: this.props.progress.max, message: 'Finished: ' + context}); };", "created_at": "2018-05-08T01:31:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA==", "fields": {"body": "umm, https://raivaibhav.github.io./GSoC.xml or  https://raivaibhav.github.io/GSoC.xml", "diff": "@@ -125,3 +125,6 @@ name = Saksham Bansal\n \n [https://charlieyang.me/feed_gsoc.xml]\n name = Guangyuan Yang\n+\n+[https://raivaibhav.github.io./GSoC.xml]", "created_at": "2018-05-10T20:24:53Z", "last_edited_at": null, "author": "nemaniarjun", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUxODc4Mg==", "fields": {"body": "gracefully documented :) \ud83d\udc4d", "diff": "@@ -0,0 +1,77 @@\n+---\n+name: \"Automate Whitelist creation for vulture\"\n+collaborating_projects:\n+  - coala\n+  - vulture\n+desc: \"Automatically create whitelists and detect falsely positive results for vulture.\"\n+developers_involved:\n+  - RJ722\n+mentors:\n+  - AbdealiJK\n+  - jendrikseipp\n+  - The-Compiler\n+difficulty: medium\n+status: in_progress\n+initiatives:\n+  - GSoC\n+issues: []\n+markdown: automate_vulture_whitelist.md\n+requirements:\n+  - \"Familiarity with vulture and how whitelists work.\"\n+tags:\n+  - Vulture\n+  - AST\n+  - coverage\n+---\n+\n+The aim of this project is to automatically create whitelists (to be utilized by\n+[vulture](https://github.com/jendrikseipp/vulture)) for projects using sip files to\n+communicate between C++ level API and Python programs, most significant of them being\n+PyQt projects.\n+\n+#### IDEAS\n+\n+* Create a script which takes sip files as input and spits a whitelist with all\n+  the virtual functions defined in the sip files. (Add Documentation and tests)\n+* Use that script for generating a whitelist for popular projects using PyQt\n+  (like [qutebrowser](https://github.com/qutebrowser/qutebrowser)).\n+* Allow passing coverage.xml to vulture via `--make-whitelist` and let it find\n+  the list of false-positive functions. (Add Documentation and tests as well)\n+* Write a whitelist generator for shiboken, the binding\n+  generator used for PySide2\n+\n+#### MILESTONES\n+\n+##### COMMUNITY BONDING\n+* Discussion on whether to implement a new Tracer or to directly consume `xml`\n+  output from coverage.py\n+* Get familiar with coverage.xml\n+* Take up small tasks from\n+  [TODO](https://github.com/jendrikseipp/vulture/tree/master/TODO.rst)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28)\n+\n+##### CODING PHASE 1\n+* The script for creating a whitelist from sip files should be implemented.\n+* It should reside in it's own repository, with CI enabled for testing on both\n+  the GNU/Linux and Windows platforms.\n+* It should be gracefully documented.", "created_at": "2018-05-11T04:38:49Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4OTU3NA==", "fields": {"body": "Split into two items:\n\nMaintain 100% test code coverage.\nUpdate documentation for the whitelist generator", "diff": "@@ -0,0 +1,78 @@\n+---\n+name: \"Automate Whitelist creation for vulture\"\n+collaborating_projects:\n+  - coala\n+  - vulture\n+desc: \"Automatically create whitelists and detect false positives for vulture.\"\n+developers_involved:\n+  - RJ722\n+mentors:\n+  - AbdealiJK\n+  - jendrikseipp\n+  - The-Compiler\n+difficulty: medium\n+status: in_progress\n+initiatives:\n+  - GSoC\n+issues: []\n+markdown: automate_vulture_whitelist.md\n+requirements:\n+  - \"Familiarity with vulture and how whitelists work.\"\n+tags:\n+  - Vulture\n+  - AST\n+  - coverage\n+---\n+\n+The aim of this project is to automatically create whitelists (to be utilized\n+by [vulture](https://github.com/jendrikseipp/vulture)) for projects using sip\n+files to communicate between C++ level API and Python programs, most\n+significant of them being PyQt projects.\n+\n+#### IDEAS\n+\n+* Create a script which takes sip files as input and spits a whitelist with all\n+  the virtual functions defined in the sip files. (Add Documentation and tests)\n+* Use that script for generating a whitelist for popular projects using PyQt\n+  (like [qutebrowser](https://github.com/qutebrowser/qutebrowser)).\n+* Allow passing coverage.xml to vulture via `--make-whitelist` and let it find\n+  the list of false-positive functions. (Add Documentation and tests as well)\n+* Write a whitelist generator for shiboken, the binding\n+  generator used for PySide2\n+\n+#### MILESTONES\n+\n+##### COMMUNITY BONDING\n+* Discussion on whether to implement a new Tracer or to directly consume `xml`\n+  output from coverage.py\n+* Get familiar with coverage.xml\n+* Take up small tasks from\n+  [TODO](https://github.com/jendrikseipp/vulture/tree/master/TODO.rst)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28)\n+\n+##### CODING PHASE 1\n+* The script for creating a whitelist from sip files should be implemented.\n+* It should reside in it's own repository, with CI enabled for testing on both\n+  the GNU/Linux and Windows platforms.\n+* It should be gracefully documented.\n+* Use this script to create a whitelist for\n+  [qutebrowser](https://github.com/qutebrowser/qutebrowser).\n+* Look at methods to increase coverage for vulture from it's already excellent\n+  95%+ coverage.\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29)\n+\n+##### CODING PHASE 2\n+* `--make-whitelist`: Vulture should be able to find a list of false positives\n+  (for functions and methods) from `coverage.xml`.\n+* Maintain code coverage, robust tests should be written.\n+* Add documentation, how-to, examples and use cases in\n+  [README](https://github.com/jendrikseipp/vulture/tree/master/README.rst).\n+* Research and planning about how to generate whitelists for\n+  [`shiboken`](https://pypi.org/project/Shiboken/)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30)\n+\n+##### CODING PHASE 3\n+* Implement whitelist generator for\n+  [`shiboken`](https://pypi.org/project/Shiboken/).\n+* Add tests and documentation for the generator.", "created_at": "2018-05-13T05:49:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc5MzU0NQ==", "fields": {"body": "I expect that this means that in milestone 1 you are supplying a PR to qutebrowser which replaces their whitelist generator with your own.\n\nThat whitelist generator would still need to stay, because it has many things in it which are qutebrowser specific. What it'd replace is the current horrible heuristic which ignores any functions which have a capital letter in them (because Qt/PyQt use camelCase for methods).", "diff": "@@ -0,0 +1,78 @@\n+---\n+name: \"Automate Whitelist creation for vulture\"\n+collaborating_projects:\n+  - coala\n+  - vulture\n+desc: \"Automatically create whitelists and detect false positives for vulture.\"\n+developers_involved:\n+  - RJ722\n+mentors:\n+  - AbdealiJK\n+  - jendrikseipp\n+  - The-Compiler\n+difficulty: medium\n+status: in_progress\n+initiatives:\n+  - GSoC\n+issues: []\n+markdown: automate_vulture_whitelist.md\n+requirements:\n+  - \"Familiarity with vulture and how whitelists work.\"\n+tags:\n+  - Vulture\n+  - AST\n+  - coverage\n+---\n+\n+The aim of this project is to automatically create whitelists (to be utilized\n+by [vulture](https://github.com/jendrikseipp/vulture)) for projects using sip\n+files to communicate between C++ level API and Python programs, most\n+significant of them being PyQt projects.\n+\n+#### IDEAS\n+\n+* Create a script which takes sip files as input and spits a whitelist with all\n+  the virtual functions defined in the sip files. (Add Documentation and tests)\n+* Use that script for generating a whitelist for popular projects using PyQt\n+  (like [qutebrowser](https://github.com/qutebrowser/qutebrowser)).\n+* Allow passing coverage.xml to vulture via `--make-whitelist` and let it find\n+  the list of false-positive functions. (Add Documentation and tests as well)\n+* Write a whitelist generator for shiboken, the binding\n+  generator used for PySide2\n+\n+#### MILESTONES\n+\n+##### COMMUNITY BONDING\n+* Discussion on whether to implement a new Tracer or to directly consume `xml`\n+  output from coverage.py\n+* Get familiar with coverage.xml\n+* Take up small tasks from\n+  [TODO](https://github.com/jendrikseipp/vulture/tree/master/TODO.rst)\n+* [Follow up milestone](https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28)\n+\n+##### CODING PHASE 1\n+* The script for creating a whitelist from sip files should be implemented.", "created_at": "2018-05-13T09:00:50Z", "last_edited_at": null, "author": "The-Compiler", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNzMyOQ==", "fields": {"body": "break lines at 80cpl.\npossibly convert this to a sub-list.", "diff": "@@ -44,15 +44,16 @@ We have a state-of-art implementation in\n for VS Code only. We need to design and implement a general mechanism for\n multiple editors/IDEs support.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n 1. Offer a basic languager server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- Support at least 'textDocument/didOpen', 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.", "created_at": "2018-05-13T17:01:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzkyNjYzOA==", "fields": {"body": "Replace 'basic' with a reference to the request types mentioned in features.", "diff": "@@ -61,29 +69,41 @@ The project is divided into two parts:\n \n - Design documentation about the language server exists.\n   - Architecture of the language server\n-  - Mechanism to support multiple languages.\n+  - Mechanism to support multiple languages and requests.\n \n ##### CODING PHASE 1\n \n - A basic language server for coala exists.\n   - Support linting for python.\n-- Basic test suite exists.\n+  - Supports basic request types:\n+    - 'textDocument/didSave'\n+    - 'textDocument/publishDiagnostics'\n+- Test suite exists with 100% coverage.\n - Basic Documentation exists including asciinema showing the\n   functionality working in any LS editor client.\n+- Performance metrics of the standalone language server against\n+  basic request types exist.", "created_at": "2018-05-14T12:02:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODI5NTQ4MA==", "fields": {"body": "Generally, agree with @ksdme.", "diff": "@@ -42,17 +42,25 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of", "created_at": "2018-05-15T13:54:07Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODU2NjgxMA==", "fields": {"body": "Ugly indentation", "diff": "@@ -93,9 +93,11 @@ def test_create_issue_cmd(self):\n         plugins.labhub.GitHubToken.assert_called_with(None)\n         plugins.labhub.GitLabPrivateToken.assert_called_with(None)\n \n+        # TODO\n+        # Ignoring test assert to prevent build failure for time being\n         # Creating issue in private chat\n-        testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'You\\'re not allowed')\n+        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+        #                      'You\\'re not allowed')", "created_at": "2018-05-16T09:52:31Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODUxMTU0MQ==", "fields": {"body": "also indicate that this project needs to do performance metrics using a few different types of usage, e.g. using various .coafile, especially an isolated perf run which has one a python GlobalBear, to see how it performs.\nI suspect global bears are going to be a large headache for this project.", "diff": "@@ -42,48 +42,86 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n 1. Offer a basic languager server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n - Design documentation about the language server exists.\n   - Architecture of the language server\n-  - Mechanism to support multiple languages.\n+  - Mechanism to support multiple languages and requests.\n \n ##### CODING PHASE 1\n \n - A basic language server for coala exists.\n   - Support linting for python.\n-- Basic test suite exists.\n-- Basic Documentation exists including asciinema showing the\n+  - Supports primary request types:\n+    - 'textDocument/didOpen'\n+    - 'textDocument/didSave'\n+    - 'textDocument/didClose'\n+    - 'textDocument/publishDiagnostics'\n+- Test suite exists with 100% coverage.\n+- Basic Documentation exists including video showing the\n   functionality working in any LS editor client.\n+- Performance metrics of the standalone language server against\n+  all the primary request types exist.", "created_at": "2018-05-16T06:10:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA1NDU4MA==", "fields": {"body": "This project isn't part of RGSoC afaik.", "diff": "@@ -0,0 +1,57 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Explore improvements to coala's dependency management through having Go Linter installed in *BSD system automatially.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+  - RGSoC", "created_at": "2018-05-17T18:18:23Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4NjEwMw==", "fields": {"body": "Some bears in coala are long running and some run on entire projects (GlobalBears or ProjectBears). By filtering the coala configuration at runtime and only allowing the certain sections of the configuration to run which are logical to the request type performance can be massively improved. The first two ideas can help with this by allowing a global blacklist for bears not to run in response to some particular request type and by allowing custom configuration of the bears per request type basis in the coafile.\nA custom entry point into coala refers to the idea of having a custom pipeline into coala. This way we could prevent the overhead by preprocessing the configuration files, gathering the bears, checking for dependencies and then initializing them. The entire setup can then be reused for subsequent calls.", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n+\n+#### Interface Optimizations\n+\n+The current implementation suffers from massive performance\n+problems. This is primarily due to the mode in which lang\n+server interacts with coala. Currently it works by executing\n+coala via cli and redirecting stdout to language server. This\n+is not an efficient mechanism because of all the involved overhead.\n+This projects aims to provide a practical language server with\n+performance improvements. Some ideas currently under consideration\n+to achieve the said improvements are:\n+\n+  - Runtime coala configurations\n+  - Language Server specific parameters in coafiles\n+  - Custom entry point into coala", "created_at": "2018-05-18T07:40:55Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4Nzc0OA==", "fields": {"body": "Yes, support for multiple languages is more about configuring the clients to handle multiple file types. coala Language Server only depends on the coafile configuration to handle it. I do not think there should be any significant problem with the server.", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n+\n+#### Interface Optimizations\n+\n+The current implementation suffers from massive performance\n+problems. This is primarily due to the mode in which lang\n+server interacts with coala. Currently it works by executing\n+coala via cli and redirecting stdout to language server. This\n+is not an efficient mechanism because of all the involved overhead.\n+This projects aims to provide a practical language server with\n+performance improvements. Some ideas currently under consideration\n+to achieve the said improvements are:\n+\n+  - Runtime coala configurations\n+  - Language Server specific parameters in coafiles\n+  - Custom entry point into coala\n+\n+Specific details about each method will be expanded upon\n+once they are discussed with the community.\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n - Design documentation about the language server exists.\n-  - Architecture of the language server\n-  - Mechanism to support multiple languages.\n+  - Architecture of the language server.\n+  - Mechanism to support multiple languages and requests.", "created_at": "2018-05-18T07:48:43Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNDgwMw==", "fields": {"body": "This is textDocument/formatting not workspace", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'", "created_at": "2018-05-17T22:03:26Z", "last_edited_at": null, "author": "gatesn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTA2Mw==", "fields": {"body": "Might be worth being explicit about support for initialize, shutdown and exit", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'", "created_at": "2018-05-17T22:04:52Z", "last_edited_at": null, "author": "gatesn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTE0Mw==", "fields": {"body": "lang server -> the language server", "diff": "@@ -42,48 +42,110 @@ a rapidly growing list of editor and language communities:\n We have a state-of-art implementation in\n [coala-vs-code](https://github.com/coala/coala-vs-code) but it is designed\n for VS Code only. We need to design and implement a general mechanism for\n-multiple editors/IDEs support.\n+multiple editors/IDEs support. We also need clients written to support coala\n+langserver for most if not all the supported editors. This is not because of\n+the server's inability, but rather the need to configure the front end of the\n+editor plugin such as defining how to start the server, communicate with it etc.\n \n-The project is divided into two parts:\n+The project is divided into three parts:\n \n-1. Offer a basic languager server.\n+1. Offer a basic language server.\n 2. Implement a plugin based on the language server.\n+3. Optimize the coala entry point and language server.\n \n #### Features\n \n - Support linting for multiple programming languages.\n-- Support 'textDocument/publishDiagnostics', 'textDocument/didChange' and 'textDocument/didSave' requests.\n+- The current language server has implementations for:\n+  - 'textDocument/didSave'\n+  - 'textDocument/didChange'\n+  - 'textDocument/publishDiagnostics'\n+  and this project will improve and extend the support to at least\n+  the following request types:\n+  - 'textDocument/didOpen'\n+  - 'textDocument/didClose'\n+  - 'workspace/formatting'\n+  - 'window/showMessageRequest'\n - (Advanced) Multiple plugins Support (e.g. Eclipse Che).\n+- Some additional request types that are either out of the scope\n+  of this project or are marginally redundant to build but which would\n+  improve the user friendliness or functionality  of this language\n+  server are:\n+  - 'textDocument/willSaveWaitUntil'\n+  - 'workspace/didChangeConfiguration'\n+  - 'workspace/configuration'\n+  - 'workspace/applyEdit'\n+  - 'window/showMessage'\n+\n+#### Interface Optimizations\n+\n+The current implementation suffers from massive performance\n+problems. This is primarily due to the mode in which lang", "created_at": "2018-05-17T22:05:19Z", "last_edited_at": null, "author": "gatesn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTMzODg5Nw==", "fields": {"body": "These changes depend on the cEP being accepted.", "diff": "@@ -40,10 +43,12 @@ this greatly improved coala's startup speed.\n Performance is key to usability - with faster runtimes, users can get on\n with their work quicker. And it's fun looking for performance bottlenecks!\n \n-In this project, you're to improve on the current strategies. Some enhancements\n-such as section-level caching, globbing improvements to not expand on\n-unmodified directories, and others have been preliminarily explored. Please\n-refer to the related issues to learn more about these.\n+In this project, you're to come up with improved versions of the current caching\n+strategies used by coala's core and integrate these with the NextGen-Core.\n+Some enhancements such as ignoring unmodified directories and use of\n+`FileFactory` and `Directory` classes have been already explored and are to be", "created_at": "2018-05-18T17:25:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ5NTM3MA==", "fields": {"body": "This is a rather inelegant, maybe put up an array of author and comment body to ignore?\nWe fill it with sensible default, and make it so we can add more via env var.", "diff": "@@ -141,14 +148,72 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          if (node.bodyText.search('@gitmate-bot') !== -1) {\n+            // gitmate-bot instructions\n+            flag = false;\n+          } else if (node.bodyText.search('@rultor') !== -1) {\n+            // rultor instructions\n+            flag = false;\n+          } else if (node.bodyText.match(/^(unack|ack)/g)) {\n+            // ack and unack messages\n+            flag = false;\n+          } else if (node.author && node.author.login === 'gitmate-bot') {\n+            // comments by gitmate-bot\n+            flag = false;\n+          } else if (node.author && node.author.login === 'rultor') {", "created_at": "2018-05-21T04:59:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTk0MzQ0OQ==", "fields": {"body": "fyi you can also do repositories instead of repositories: repositories.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recent_issues = [];\n+  const today = new Date();\n+  const day_last_month = today.setMonth(today.getMonth() - 1);\n+  for (const issue of issues) {\n+    if (getTime(day_last_month) < issue.updatedAtMs) {\n+      recent_issues.push(issue);\n+    }\n+  }\n+  return recent_issues;\n+}\n+\n ;(async () => {\n   let issueInfo, prInfo, labelInfo;\n   try {\n-    // Don't fetch them concurrently, otherwise some queries may fail \n+    // Don't fetch them concurrently, otherwise some queries may fail\n     issueInfo = await fetchIssue(repoOwner, repoNames, true);\n-    prInfo = await fetchIssue(repoOwner, repoNames, false); \n-    labelInfo = await fetchLabel(repoOwner, repoNames); \n+    labelInfo = await fetchLabel(repoOwner, repoNames);\n+    prInfo = await fetchIssue(repoOwner, repoNames, false);\n   } catch (error) {\n     console.log(error);\n   };\n   const issues = issueInfo.concat(prInfo);\n+  const repositories = generateRepoInfo(repoOwner, repoNames, issues);\n   const result = {\n     issues: issues,\n     repoLabels: labelInfo,\n-    repositories: generateRepoInfo(repoOwner, repoNames, issues)\n+    repositories: repositories\n+  };\n+  const recent_result = {\n+    issues: filterRecent(issues),\n+    repoLabels: labelInfo,\n+    repositories: repositories", "created_at": "2018-05-22T15:20:25Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTA0Mw==", "fields": {"body": "I think the project uses camelCase instead of snake_case variable name, need to keep it consistent here.\nenv is okay though.", "diff": "@@ -18,13 +18,28 @@ const GH_GQL_OPTIONS = {\n \n const client = GraphQL(GH_GQL_OPTIONS);\n \n-// number of pages we want to query (default: 20 pages x 100 items)\n+// number of pages we want to query\n // if PAGE_THRESHOLD is -1, then fetch all issues/PRs\n-const pageThreshold = process.env.PAGE_THRESHOLD || 20;\n+const pageThreshold = process.env.PAGE_THRESHOLD || -1;\n console.log('page number threshold:', pageThreshold);\n \n+// earliest date we want to query from\n+// GitHub supports reactions since 2016-03-10\n+const earliestDate = process.env.EARLIEST_DATE || '2016-03-10T00:00:00Z';\n+\n const repo = process.env.REPOSITORIES;\n \n+// review will be ignored if it's written by any author specified here\n+// delimiter: space\n+const ignore_review_author = process.env.IGNORE_REVIEW_AUTHOR ||", "created_at": "2018-05-22T14:24:00Z", "last_edited_at": "2018-05-22T14:28:41Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTY5Mw==", "fields": {"body": "Why not Array.forEach ?\n... or Array.reduce", "diff": "@@ -141,22 +159,76 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignore_content of ignore_review_content.split(' ')) {", "created_at": "2018-05-22T14:25:43Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkzNDgzOQ==", "fields": {"body": "I guess just leave it as is, if you're not going to use reduce", "diff": "@@ -141,22 +159,76 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n+        let raw_comments, comments;\n+        // collect review comments\n+        raw_comments = node.reviews.nodes.map(node => node.comments.nodes);\n+        raw_comments = [].concat.apply([], raw_comments);\n+        // collect issue comments\n+        raw_comments = raw_comments.concat(node.comments.nodes);\n+        // filter useless reviews\n+        raw_comments = raw_comments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignore_content of ignore_review_content.split(' ')) {", "created_at": "2018-05-22T14:58:46Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAxMDkyMQ==", "fields": {"body": "Could use issues.filter and be made 1 liner.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recentIssues = [];\n+  const today = new Date();\n+  const dayLastMonth = today.setMonth(today.getMonth() - 1);\n+  for (const issue of issues) {\n+    if (getTime(dayLastMonth) < issue.updatedAtMs) {\n+      recentIssues.push(issue);", "created_at": "2018-05-22T18:41:56Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAyNDQwOA==", "fields": {"body": "let is for a variable that's available to be reassigned, push will not reassign the variable, it'll modify the array inside. In this case, keep using const.\nBut see my comment above, you can return the filter result directly instead without making a variable.", "diff": "@@ -223,24 +295,52 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  let recentIssues = [];", "created_at": "2018-05-22T19:27:59Z", "last_edited_at": "2018-05-22T19:30:00Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDU5OTI4NA==", "fields": {"body": "I believe this partially lies in @nemaniarjun 's project scope which is to implement Repology as a service. What I'd like to do is to make use of the infrastructure provided by that project and specifically implement and ensure the dependencies required for my project has correct data from Repology.", "diff": "@@ -0,0 +1,102 @@\n+---\n+collaborating_projects:\n+  - coala\n+desc: \"Explore improvements to coala's dependency management through having Go Linters installed in *BSD systems automatically.\"\n+difficulty: medium\n+initiatives:\n+  - GSoC\n+issues:\n+  - \"https://gitlab.com/coala/package_manager/issues/149\"\n+  - \"https://github.com/coala/coala-bears/issues/2481\"\n+markdown: go_bears_on_bsd.md\n+mentors:\n+  - xferra\n+  - yukiisbored\n+name: \"Linter Dependency Management from a Bare-Metal System\"\n+requirements:\n+  - \"At least one patch to the coala core should be accepted and merged.\"\n+  - \"The proposal needs to show familiarity with coala's dependency management implementation.\"\n+status: in_progress\n+tags:\n+  - Automation\n+  - Installation\n+  - Dependency\n+---\n+\n+`coala-bears` are of two types, Native Bears which implement all the business\n+logic themselves and Linter Bears which wrap existing linters and checkers.\n+Dependencies of bears are mostly language runtimes, language-specific packages\n+(e.g. python:nltk) or command line tools (e.g. git). Both Native Bears and\n+Linter Bears have dependencies which need to be installed before they can be\n+executed.\n+\n+`dependency_management` aims to provide Python APIs for dependency management on\n+various languages and different systems. It is used extensively by coala,\n+however, it lacks most of the key implementation and documentation in its\n+current state.\n+\n+coala now has [several bears written in\n+Go](https://github.com/coala/coala-bears/search?q=GoRequirement), [7 of\n+which](https://github.com/coala/coala-bears/blob/master/bears/go/) are for\n+validating Go files. They need specific versions of Go and some externally\n+supplied packages, and currently Go linter bears just assume they are all in\n+place and work. Go language dependencies are currently managed unversioned in\n+coala-bears. There is no official way provided for versioning, and though there\n+are other commonly used mechanisms for installing specific versions of Go repos,\n+a lot more investigation is needed.\n+\n+The end goal is to be able to bootstrap and recursively install all dependencies\n+on any systems without anything installed other than a base system, but the\n+scope of a complete solution is too large. A proposal has been made with\n+suitable scope, which is to automate the installation of Go linter bears onto\n+bare-metal BSDs.\n+\n+Features will mainly be implemented to coala's `dependency_management`. It\n+should be able to operate system and language-specific package managers to\n+handle dependencies. It should also resolve package names and versions\n+automatically using Repology on multiple operating systems.", "created_at": "2018-05-24T14:07:39Z", "last_edited_at": null, "author": "yzgyyang", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjU2NQ==", "fields": {"body": "If this is really necessary, it's better to have a DEBUG env var that enable/disable verbose log, otherwise just omit.", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {\n+            rawComments.map((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+              return comment;\n+            });\n+          }\n+        } else {\n+          // for debug\n+          // console.log('pull request does not have reactions. repoOwner:', owner,", "created_at": "2018-05-26T11:36:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0Njc4NA==", "fields": {"body": "Not sure what this is doing, do you mean forEach ?\nmap will create new array.", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {\n+            rawComments.map((comment, index) => {", "created_at": "2018-05-26T11:46:51Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjgzOA==", "fields": {"body": "dayLastMonth never changes, I think it's better to call getTime in the dayLastMonth variable itself.", "diff": "@@ -223,24 +379,47 @@ function generateRepoInfo(owner, names, issues) {\n   return result;\n }\n \n+function filterRecent(issues) {\n+  // only keep issues created/updated in the past month\n+  const today = new Date();\n+  const dayLastMonth = today.setMonth(today.getMonth() - 1);\n+  return issues.filter(issue => getTime(dayLastMonth) < issue.updatedAtMs);", "created_at": "2018-05-26T11:52:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjkyNA==", "fields": {"body": "empty array is truthy", "diff": "@@ -141,23 +192,128 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        let commentsWithReactions = [];\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          console.log('pull request has reactions. repoOwner:', owner,\n+            'repoName:', name, 'pullRequest number:', node.number);\n+          const number = node.number;\n+          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n+          const maxCommentsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentCnt = Math.min(node.comments.totalCount, 100);\n+          commentsWithReactions = await fetchReactionsOfPR(owner, name, number,\n+            reviewCnt, maxCommentsPerReview, commentCnt);\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions) {", "created_at": "2018-05-26T11:57:38Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0OTM2NQ==", "fields": {"body": "Nope, that was intentional. iff = if and only if", "diff": "@@ -141,23 +192,132 @@ async function fetchNextPage(owner, name, isIssue, data, cursor, pageCount) {\n         }\n       };\n       if (!isIssue) {\n-        info.pullRequest = {\n-          htmlUrl: node.url\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff", "created_at": "2018-05-26T13:53:53Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTAzNzUyNQ==", "fields": {"body": "See #529 (comment)", "diff": "@@ -7,110 +8,87 @@\n \n from plugins.coatils import Coatils\n \n-\n-class TestCoatils(unittest.TestCase):\n-\n-    def setUp(self):\n-        self.testbot = TestBot(extra_plugin_dir='plugins',\n-                               loglevel=logging.ERROR)\n-        self.testbot.start()\n-\n-    def tearDown(self):\n-        self.testbot.stop()\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_total_bears.yaml')\n-    def test_total_bears(self):\n-        self.assertEqual(Coatils.total_bears(),\n-                         102)\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_all_langs.yaml')\n-    def test_all_langs(self):\n-        self.assertEqual(len(Coatils.all_langs()),\n-                         63)\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_contrib.yaml')\n-    def test_contrib_stats(self):\n-        self.testbot.assertCommand('!contrib stats sils',\n-                                    'Commited 2654 commits')\n-        self.testbot.assertCommand('!contrib stats some-non-existent',\n-                                   'stats for some-non-existent not found')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_lang_stats.yaml')\n-    def test_lang_stats(self):\n-        self.testbot.assertCommand('!lang  stats',\n-                                   'coala supports 63 languages')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_bear_stats.yaml')\n-    def test_bear_stats(self):\n-        self.testbot.assertCommand('!bear stats',\n-                                   'There are total 102 bears')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_bear_stats_lang.yaml')\n-    def test_bear_stats_lang(self):\n-        self.testbot.assertCommand('!bear stats python',\n-                                   'There are 17 bears for python language')\n-        self.testbot.assertCommand('!bear stats abc',\n-                                   'No bear exists for abc')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_bear_stats_lang.yaml')\n-    def test_ls_bears(self):\n-        self.testbot.assertCommand('!ls bears r',\n-                                   'Bears for r are')\n-        self.assertIn('RLintBear', self.testbot.pop_message())\n-        self.testbot.assertCommand('!ls bears brainfuck',\n-                                   'No bears found for brainfuck')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_stats.yaml')\n-    def test_stats(self):\n-        self.testbot.assertCommand('!stats',\n-                                   'coala has 102 bears across 63 languages')\n-\n-    @vcr.use_cassette('tests/cassettes/coatils_run_coala.yaml')\n-    def test_run_coala(self):\n-        # no results\n-        self.testbot.push_message('!run python SpaceConsistencyBear use_spaces=yes\\n```\\nimport this\\n\\n```')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'coala analysis in progress...')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'Your code is flawless :tada:')\n-        # results and diffs\n-        self.testbot.push_message('!run python PyUnusedCodeBear remove_unused_imports=yes '\n-                                  'PycodestyleBear\\n```\\nimport os\\nimport this\\na=1\\n```')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'coala analysis in progress...')\n-        msg = self.testbot.pop_message()\n-        self.assertIn('Here is what I think is wrong:', msg)\n-        self.assertIn('This file contains unused source code',\n-                      msg)\n-\n-        # ensuring that only one result is yielded\n-        with self.assertRaises(queue.Empty):\n-            next_msg = self.testbot.pop_message()\n-        # error\n-        self.testbot.push_message('!run a b\\n```\\nc\\n```')\n-        self.assertEqual(self.testbot.pop_message(),\n-                         'coala analysis in progress...')\n-        self.assertIn('Something went wrong, things to check for',\n-                      self.testbot.pop_message())\n-\n-    def test_construct_settings(self):\n-        self.assertEqual(Coatils.construct_settings('bear1 a=1 b=2 bear2 bear3'),\n-                         {'bear1': {'a': '1', 'b': '2'},\n-                          'bear2': {},\n-                          'bear3': {}})\n-\n-    def test_position(self):\n-        self.assertEqual(Coatils.position(1, 1, 1, 1),\n-                         'At 1:1')\n-        self.assertEqual(Coatils.position(1, 1, 1, 5),\n-                         'At line 1, between col 1 and 5')\n-        self.assertEqual(Coatils.position(1, 5, 3, 10),\n-                         'Between positions 1:5 and 3:10')\n-        self.assertEqual(Coatils.position(1, None, 3, None),\n-                         'Between lines 1 and 3')\n-        self.assertEqual(Coatils.position(3, None, 3, None),\n-                         'At line 3')\n-        self.assertEqual(Coatils.position(1, None, 3, 6),\n-                         'Between line 1 and position 3:6')\n-        self.assertEqual(Coatils.position(1, 4, 5, None),\n-                         'Between position 1:4 and line 5')\n+extra_plugin_dir = 'plugins'\n+\n+\n+@vcr.use_cassette('tests/cassettes/coatils_total_bears.yaml')\n+def test_total_bears():", "created_at": "2018-05-26T02:38:07Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1MDE1OQ==", "fields": {"body": "What if developer tries to invites members to dev team? This error message isn't stating this reason.", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +\n+                                 ' developers'].is_member(inviter)\n+        isMaintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the ' + ', '.join(valid_teams)\n+\n+        def invite(invitee, team):\n+\n             team_mapping = {\n                 'newcomers': self.GH_ORG_NAME + ' newcomers',\n                 'developers': self.GH_ORG_NAME + ' developers',\n                 'maintainers': self.GH_ORG_NAME + ' maintainers'\n             }\n \n-            # send the invite\n-            self.TEAMS[team_mapping[team.lower()]].invite(invitee)\n+            self.TEAMS[team_mapping[team]].invite(invitee)\n+\n+        if isDeveloper and team == 'newcomers':\n+            invite(invitee, team)\n+            return tenv().get_template(\n+                'labhub/promotions/{}.jinja2.md'.format(team)\n+            ).render(\n+                targer=invitee,\n+            )\n+        elif isMaintainer:\n+            invite(invitee, team)\n             return tenv().get_template(\n-                'labhub/promotions/{}.jinja2.md'.format(team.lower())\n+                'labhub/promotions/{}.jinja2.md'.format(team)\n             ).render(\n                 target=invitee,\n             )\n         else:\n             return tenv().get_template(\n-                'labhub/errors/not-maintainer.jinja2.md'\n+                'labhub/errors/not-eligible-invite.jinja2.md'", "created_at": "2018-06-02T05:10:41Z", "last_edited_at": "2018-06-02T05:13:02Z", "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NTc2OA==", "fields": {"body": "Nice catch!", "diff": "@@ -22,19 +22,19 @@ tags:\n   - community\n   - web\n ---\n-The basic idea is an extended version of [GSOC Task List](http://github.com/summerofcode/gsoc-prep-tasks).\n+The basic idea is an extended version of [GSOC Task List](https://github.com/coala/git-task-list)", "created_at": "2018-06-02T10:02:36Z", "last_edited_at": null, "author": "RJ722", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1Nzk5Mg==", "fields": {"body": "This would return something like Please select from one of the newcomers, maintainers, developers. I'd rather have something like Please select either of these teams: newcomers, developers, maintainers. something along this lines, motive being it should be distinguishable where the valid teams start.", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +\n+                                 ' developers'].is_member(inviter)\n+        isMaintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the ' + ', '.join(valid_teams)", "created_at": "2018-06-02T12:00:22Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NzkyNw==", "fields": {"body": "Umm... Snake case, this is python. Similarly below.", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +", "created_at": "2018-06-02T11:56:45Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1ODM2OQ==", "fields": {"body": "Remove this line", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        isDeveloper = self.TEAMS[self.GH_ORG_NAME +\n+                                 ' developers'].is_member(inviter)\n+        isMaintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the ' + ', '.join(valid_teams)\n+\n+        def invite(invitee, team):\n+", "created_at": "2018-06-02T12:20:46Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTE5NQ==", "fields": {"body": "team developers and maintainers --> developers or maintainers team", "diff": "@@ -0,0 +1,2 @@\n+- A newcomer cannot invite other members to the {{ organization }} org.\n+- You need to be a maintainer in order to invite someone to team developers and maintainers.", "created_at": "2018-06-03T14:12:44Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTEzMA==", "fields": {"body": "targer-->target", "diff": "@@ -82,45 +82,49 @@ def invite_cmd(self, msg, match):\n         invitee = match.group(1)\n         inviter = msg.frm.nick\n \n-        if invitee == 'me':\n-            user = msg.frm.nick\n-            response = tenv().get_template(\n-                'labhub/promotions/newcomers.jinja2.md'\n-            ).render(\n-                username=user,\n-            )\n-            self.send(msg.frm, response)\n-            self.TEAMS[self.GH_ORG_NAME + ' newcomers'].invite(user)\n-            self.invited_users.add(user)\n-            return\n-\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n+        team = team.lower()\n+\n+        is_developer = self.TEAMS[self.GH_ORG_NAME +\n+                                  ' developers'].is_member(inviter)\n+        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n+                                   ' maintainers'].is_member(inviter)\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        if self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(inviter):\n-            valid_teams = ['newcomers', 'developers', 'maintainers']\n-            if team.lower() not in valid_teams:\n-                return 'Please select from one of the ' + ', '.join(valid_teams)\n+        valid_teams = ['newcomers', 'developers', 'maintainers']\n+        if team not in valid_teams:\n+            return 'Please select from one of the valid teams: ' + ', '.join(\n+                    valid_teams)\n+\n+        def invite(invitee, team):\n             team_mapping = {\n                 'newcomers': self.GH_ORG_NAME + ' newcomers',\n                 'developers': self.GH_ORG_NAME + ' developers',\n                 'maintainers': self.GH_ORG_NAME + ' maintainers'\n             }\n \n-            # send the invite\n-            self.TEAMS[team_mapping[team.lower()]].invite(invitee)\n+            self.TEAMS[team_mapping[team]].invite(invitee)\n+\n+        if is_developer and team == 'newcomers':\n+            invite(invitee, team)\n+            return tenv().get_template(\n+                'labhub/promotions/{}.jinja2.md'.format(team)\n+            ).render(\n+                targer=invitee,", "created_at": "2018-06-03T14:10:00Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTc2OQ==", "fields": {"body": "will soon invite you --> will invite you to the organization soon", "diff": "@@ -0,0 +1,11 @@\n+Welcome @{{ target }}! :tada:\n+\n+A developer or maintainer will soon invite you to the orgazinzation.", "created_at": "2018-06-03T14:31:59Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTcwMQ==", "fields": {"body": "orgazinzation --> organization", "diff": "@@ -0,0 +1,11 @@\n+Welcome @{{ target }}! :tada:\n+\n+A developer or maintainer will soon invite you to the orgazinzation.", "created_at": "2018-06-03T14:29:16Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5NTA2Ng==", "fields": {"body": "Okay with me", "diff": "@@ -1,25 +1,29 @@\n ---\n collaborating_projects:\n   - coala\n-desc: \"Improve coala's performance by improving file caching and other performance bottlenecks.\"\n+desc: \"Improve coala's performance by improving file loading using factory\n+      classes and other performance bottlenecks.\"\n difficulty: medium\n initiatives:\n   - GSoC\n   - RGSoC\n issues:\n-  - \"https://github.com/coala/coala/issues/2541\"\n-  - \"https://github.com/coala/coala/issues/2699\"\n+  - \"https://github.com/coala/coala/issues/3530\"\n   - \"https://github.com/coala/coala/issues/2912\"\n+  - \"https://github.com/coala/coala/issues/2541\"", "created_at": "2018-06-05T19:35:34Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzEwOTc5MQ==", "fields": {"body": "Then dont run moban.  :P  It does give a semi-decent error message.\nfyi this is what we have done for coala & coala-bears.  .travis.yml clones https://gitlab.com/coala/mobans to that location.\nMedium term goal is for moban to manage these dependencies moremoban/moban#35 .  The logic has mostly been written in yehua (https://github.com/moremoban/yehua/blob/master/yehua/project.py#L29)", "diff": "@@ -0,0 +1,15 @@\n+overrides: coala.yaml\n+\n+language: ruby\n+gitignore_language: Jekyll\n+gitignore_extra_rulesets:\n+  - GitBook\n+\n+configuration:\n+  template_dir:\n+    - ../coala-mobans/templates/\n+    - ../coala-mobans/assets/", "created_at": "2018-06-05T15:09:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3NDY2MQ==", "fields": {"body": "If it has been removed completely, why not just remove the whole code? We can't get it working in the future anyway.\nFor historical purposes, the code will always be there on the git history.\nWe should also remove the readme section https://github.com/coala/gh-board#easter-eggs\nBut it said \"easter eggs\" I'm not sure if it's truly a hidden easter eggs that is not very obvious to find, and we miss it. \ud83d\ude02", "diff": "@@ -59,11 +59,12 @@ test('shows a repo', async t => {\n   t.true(agoRegExp.test(await browser.getText('time.updated-at')));\n });\n \n-test('checks that the games load up', async () => {\n-  await browser.waitForExist('.nav-secret-game');\n-  await browser.click('.nav-secret-game');\n-  await browser.waitForExist('.secret-game-is-playing', 30 * 1000); // It may take some time to fetch the game from the Gist\n-});\n+// game functionality has been removed", "created_at": "2018-06-07T14:48:12Z", "last_edited_at": "2018-06-07T14:48:24Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczMzcyNA==", "fields": {"body": "an extra level is needed in the abstraction, which needs to be a separate PR before this.\nthis isnt creating a meta bear.\nA meta bear is like URLBear, which only yields HiddenResult.  See URLHeadBear and InvalidLinkBear for how they all link together.\nWe need a VCSCommitBear which only yields a CommitResult(HiddenResult).  SkipCIBear would then receive those CommitResult and only yield the CommitResult if the commit was a CI skip.\n(and while trying to understand this, it is better to simply ignore GitCommitBear and HgCommitBear -- those will need to be glued back in after the redesign.)", "diff": "@@ -0,0 +1,44 @@\n+\n+from coalib.misc.Shell import run_shell_command\n+from bears.vcs.CommitBear import _CommitBear\n+\n+\n+class SkipCIBear(_CommitBear):", "created_at": "2018-06-07T12:50:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MjQyMg==", "fields": {"body": "removing these should have been another commit in the same PR, as this is related to the fact that Ryan removed the game , and is unrelated to the test runner problems.  Also note that it wasnt mentioned in the commit message.  Anyway, this is minor and it is very distinct changes within the same commit.\nI am guessing Ryan will appreciate this being sent upstream (as two commits, and probably best left to coding phase 2), and it should almost apply without much difficulty, and likewise try the same with Phil, but that is very optional as that codebase probably has other problems which are not related to your project.", "diff": "@@ -59,13 +59,6 @@ test('shows a repo', async t => {\n   t.true(agoRegExp.test(await browser.getText('time.updated-at')));\n });\n \n-test('checks that the games load up', async () => {", "created_at": "2018-06-08T04:54:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ0MA==", "fields": {"body": "do we need this empty section?\nif so, can we get a comment on it explaining why?", "diff": "@@ -0,0 +1,10 @@\n+[Core]\n+name = Ban\n+module = ban\n+\n+[Documentation]\n+description = Ban from all rooms at once\n+[Python]\n+version = 3\n+\n+[Errbot]", "created_at": "2018-06-10T10:29:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ1NA==", "fields": {"body": "horrific style.\nplease get pyflakes & pycodestyle active on these files.\n(and read your diffs before publishing them)", "diff": "@@ -0,0 +1,32 @@\n+import os\n+import logging\n+import unittest\n+from unittest.mock import Mock, MagicMock, PropertyMock, patch\n+\n+from errbot.backends.test import TestBot\n+\n+import plugins.ban\n+\n+from tests.helper import plugin_testbot\n+\n+\n+class TestBan(unittest.TestCase):\n+\n+    @patch('plugins.ban.requests')\n+    @patch('plugins.ban.json')\n+    def test_ban_cmd(self, mockjson, mockreq):\n+        ban, testbot = plugin_testbot(plugins.ban.Ban, logging.ERROR)\n+        ban.activate()\n+\n+        ban.bot_config.ROOMS_TO_JOIN = ('coala/coala', 'coala/coala-bears')\n+        ban.bot_config.BOT_IDENTITY['token'] = 'mocked?'\n+\n+        fake_room_data = [{'id': '130', 'uri': 'coala/coala'},\n+        \t\t  {'id': '234', 'name': 'Nitanshu'},", "created_at": "2018-06-10T10:30:10Z", "last_edited_at": "2018-06-10T10:30:54Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQyNA==", "fields": {"body": "so this is a syntax error.\nnot tested.\nand something is wrong with CI that it didnt find this problem for you.\nplease fix.  separate PR.", "diff": "@@ -104,6 +104,7 @@\n \n ACCESS_CONTROLS = {'render test': {\n     'allowrooms': ('coala/cobot-test', 'coala/corobo',)},\n-    'LabHub:*': {'allowprivate': False}}\n+    'LabHub:*': {'allowprivate': False}", "created_at": "2018-06-10T10:29:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA0MA==", "fields": {"body": "You can use r.json() as well", "diff": "@@ -381,3 +382,43 @@ def pr_stats(self, msg, match):\n                     state=type(self).community_state(pr_count)\n                  )\n         yield reply\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        if not self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(user):\n+            yield 'Only maintainers are allowed to use this command.'\n+            return\n+\n+        sinner = args[0]\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {'Content-Type': 'application/json',\n+                   'Accept': 'application/json',\n+                   'Authorization': 'Bearer ' +\n+                   self.bot_config.BOT_IDENTITY['token']\n+                   }\n+        data = json.dumps({\"username\": sinner})\n+\n+        r = requests.get('https://api.gitter.im/v1/rooms', headers=headers)\n+        room_data = json.loads(r.text)", "created_at": "2018-06-09T05:21:08Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA2MQ==", "fields": {"body": "use this style:\ndict = {\n    key: value,\n    key: value,\n}", "diff": "@@ -381,3 +382,43 @@ def pr_stats(self, msg, match):\n                     state=type(self).community_state(pr_count)\n                  )\n         yield reply\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        if not self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(user):\n+            yield 'Only maintainers are allowed to use this command.'\n+            return\n+\n+        sinner = args[0]\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {'Content-Type': 'application/json',", "created_at": "2018-06-09T05:21:56Z", "last_edited_at": "2018-06-09T05:31:11Z", "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTIxOA==", "fields": {"body": "for room in filter(lambda x: x['uri'] in joined_rooms, room_data):\n   rq = requests.post('https://api.gitter.im/v1/rooms/' + room['id'] + '/bans', data=data, headers=headers)\n   banned_users.append(room['uri'])\nUse something like this, shorter and better ^^ . Not including the exception handling bit, add it ;)", "diff": "@@ -381,3 +382,43 @@ def pr_stats(self, msg, match):\n                     state=type(self).community_state(pr_count)\n                  )\n         yield reply\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        if not self.TEAMS[self.GH_ORG_NAME + ' maintainers'].is_member(user):\n+            yield 'Only maintainers are allowed to use this command.'\n+            return\n+\n+        sinner = args[0]\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {'Content-Type': 'application/json',\n+                   'Accept': 'application/json',\n+                   'Authorization': 'Bearer ' +\n+                   self.bot_config.BOT_IDENTITY['token']\n+                   }\n+        data = json.dumps({\"username\": sinner})\n+\n+        r = requests.get('https://api.gitter.im/v1/rooms', headers=headers)\n+        room_data = json.loads(r.text)\n+        banned_rooms = []\n+\n+        for room in joined_rooms:\n+            for rm in room_data:\n+                try:\n+                    if rm['uri'] == room:\n+                        url = 'https://api.gitter.im/v1/rooms/' + \\\n+                            rm['id'] + '/bans'\n+                        r = requests.post(url, data=data, headers=headers)\n+                        banned_rooms.append(room)\n+                except KeyError:\n+                    pass", "created_at": "2018-06-09T05:30:28Z", "last_edited_at": "2018-06-09T05:31:20Z", "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTQ0NA==", "fields": {"body": "Use four level indentation, and the closing brace should be in same column as h in headers", "diff": "@@ -0,0 +1,46 @@\n+import requests\n+import json\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Ban(BotPlugin):\n+    \"\"\"\n+    Ban from all rooms at once..\n+    \"\"\"\n+\n+    @botcmd(split_args_with=None)\n+    def ban(self, msg, args):\n+        \"\"\"\n+        Ban a user from all Gitter rooms at once.\n+        corobo ban <@username/username>\n+        \"\"\"\n+        user = msg.frm.nick\n+        sinner = args[0]\n+\n+        if sinner.startswith('@'):\n+            sinner = sinner[1:]\n+\n+        joined_rooms = self.bot_config.ROOMS_TO_JOIN\n+        headers = {", "created_at": "2018-06-12T14:17:23Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTg1Ng==", "fields": {"body": "Use this style please\na = [\n    {...},\n    {...},\n...\n]", "diff": "@@ -0,0 +1,32 @@\n+import os\n+import logging\n+import unittest\n+from unittest.mock import Mock, MagicMock, PropertyMock, patch\n+\n+from errbot.backends.test import TestBot\n+\n+import plugins.ban\n+\n+from tests.helper import plugin_testbot\n+\n+\n+class TestBan(unittest.TestCase):\n+\n+    @patch('plugins.ban.requests')\n+    @patch('plugins.ban.json')\n+    def test_ban_cmd(self, mockjson, mockreq):\n+        ban, testbot = plugin_testbot(plugins.ban.Ban, logging.ERROR)\n+        ban.activate()\n+\n+        ban.bot_config.ROOMS_TO_JOIN = ('coala/coala', 'coala/coala-bears')\n+        ban.bot_config.BOT_IDENTITY['token'] = 'mocked?'\n+\n+        fake_room_data = [{'id': '130', 'uri': 'coala/coala'},", "created_at": "2018-06-12T14:18:27Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTA0NzExNQ==", "fields": {"body": "Airbnb style actually uses 4.9 as peer dependency. I really want to downgrade to that matching version :( too. Waiting for @blazeu .", "diff": "@@ -3,23 +3,14 @@\n   \"plugins\": [ \"react\" ],\n   \"env\": {\n     \"es6\": true,\n-    \"browser\": true,\n-  },\n-  \"ecmaFeatures\": {\n-    \"templateStrings\": true,\n-    \"arrowFunctions\": true,\n-    \"modules\": true,\n-    \"blockBindings\": true,\n-    \"forOf\": true,\n-    \"jsx\": true\n+    \"browser\": true\n   },\n   \"rules\": {\n     \"no-unused-vars\": 1,\n     \"react/jsx-uses-vars\": 1,\n     \"no-var\": 2,\n     \"new-cap\": 0,\n     \"quotes\": [1, \"single\", \"avoid-escape\"],\n-    \"semi\": 1,\n-    \"indent\": [2, 2]", "created_at": "2018-06-13T11:29:39Z", "last_edited_at": null, "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE1NDgzMw==", "fields": {"body": "I vaguely remember doing something like this in the past, but my quick searches couldn't come up with anything. What's the story behind this?", "diff": "@@ -42,5 +67,5 @@ deploy:\n   provider: pages\n   skip_cleanup: true\n   github_token: $GITHUB_TOKEN\n-  on:\n+  \"on\":", "created_at": "2018-06-13T16:36:58Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTEwMTE5NA==", "fields": {"body": ".eslintrc?", "diff": "@@ -0,0 +1,27 @@\n+[all]\n+ignore = node_modules/**, dist/**, .git/**\n+\n+[all.SpaceConsistencyBear]\n+files = **.js, **.json, **.yml, **.yaml, **.md\n+bears = SpaceConsistencyBear\n+use_spaces = true\n+ignore += src/gantt-chart.js\n+\n+[all.json]\n+bears = JSONFormatBear\n+files = **.json\n+indent_size = 2\n+\n+[all.js]\n+bears = ESLintBear\n+eslint_config = .eslintrc.json", "created_at": "2018-06-13T14:20:46Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY5MDIzMg==", "fields": {"body": "it is from the yaml lint bear.\nI used to disabled it in git-task-list. But it is far easier just to quote it.", "diff": "@@ -42,5 +67,5 @@ deploy:\n   provider: pages\n   skip_cleanup: true\n   github_token: $GITHUB_TOKEN\n-  on:\n+  \"on\":", "created_at": "2018-06-15T10:14:28Z", "last_edited_at": null, "author": "bekicot", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NDg5OQ==", "fields": {"body": "@nvzard , why didnt CI pick this up?  Please create an issue about that.", "diff": "@@ -104,22 +98,15 @@ def test_create_issue_cmd(self):\n             plugins.labhub.LabHub, logging.ERROR, {'BACKEND': 'text'}\n         )\n         labhub.activate()\n-        labhub.REPOS = {'repository': self.mock_repo,\n-                        'repository.github.io': self.mock_repo}\n+        labhub.REPOS = {'repository': self.mock_repo,'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy','Here you go')\n \n-        labhub.REPOS['repository'].create_issue.assert_called_once_with(\n-            'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n-        )\n+        labhub.REPOS['repository'].create_issue.assert_called_once_with('this is the title', 'bo\\ndy\\nOpened by @None at [text]()')\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body', 'Here you go')\n \n-        labhub.REPOS['repository.github.io'].create_issue.assert_called_with(\n-            'another title', 'and body\\nOpened by @None at [text]()'\n-        )\n+        labhub.REPOS['repository.github.io'].create_issue.assert_called_with('another title', 'and body\\nOpened by @None at [text]()')", "created_at": "2018-06-16T05:31:34Z", "last_edited_at": "2018-06-16T05:32:13Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg==", "fields": {"body": "These copy from docs/docs-requirements.txt to docs-requirements.txt.\nPlease re-review @kriti21 .", "diff": "@@ -0,0 +1,24 @@\n+overrides: coala.yaml\n+\n+name: documentation\n+\n+dependencies:\n+  - coala\n+  - '-r docs-requirements.txt'\n+\n+configuration:\n+  template_dir:\n+    - ../coala-mobans/templates/\n+    - ../coala-mobans/assets/\n+  configuration: .moban.yaml\n+  configuration_dir: ../coala-mobans/\n+targets:\n+  - requirements.txt: requirements.txt.jj2\n+copy:\n+  - docs-requirements.txt: docs/docs-requirements.txt", "created_at": "2018-06-16T06:38:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA==", "fields": {"body": "We could use ternary if we really want it short\nconst oldOrgs = oldData ? createOrgHash(oldData) : newOrgs\nbut, maybe, it's clearer if we use explicit conditional.", "diff": "@@ -25,8 +25,11 @@ module.exports = ({\n   feed_items: current,\n   data_updated: dataUpdated,\n }) => {\n-  const oldOrgs = createOrgHash(oldData)\n   const newOrgs = createOrgHash(newData)\n+  let oldOrgs = newOrgs\n+  if (oldData) {\n+    oldOrgs = createOrgHash(oldData)\n+  }", "created_at": "2018-06-20T11:32:42Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ==", "fields": {"body": "Missing newline", "diff": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" version=\"2.0\" xmlns:org=\"https://g.co/gci\" xmlns:property=\"https://g.co/gci\"><channel><title><![CDATA[Google Code-in Leaders]]></title><description><![CDATA[A feed for Google Code-in updates]]></description><link>https://gci-leaders.netlify.com</link><generator>RSS for Node</generator><lastBuildDate>Sun, 24 Dec 2017 03:04:35 GMT</lastBuildDate><atom:link href=\"https://gci-leaders.netlify.com/feed.xml\" rel=\"self\" type=\"application/rss+xml\"/><pubDate>Sun, 24 Dec 2017 03:04:35 GMT</pubDate></channel></rss>", "created_at": "2018-06-20T11:41:11Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2ODk3MA==", "fields": {"body": "You can import run_git_command() & git_commit() from GitCommitBearTest module and use it here, they're static methods. Code duplication isn't a good idea", "diff": "@@ -0,0 +1,174 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.vcs.VCSCommitBear import VCSCommitBear, CommitResult\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.settings.Section import Section\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class FakeCommitBear(VCSCommitBear):\n+    @classmethod\n+    def check_prerequisites(cls):\n+        return True\n+\n+    def get_head_commit(self):\n+        return ('This is the fake head commit', '')\n+\n+\n+@generate_skip_decorator(VCSCommitBear)\n+class VCSCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure message if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = FakeCommitBear(None, self.section, self.msg_queue)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(GitCommitBear.check_prerequisites(),\n+                             'git is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/git'\n+            self.assertTrue(GitCommitBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    def test_head_commit(self):\n+        self.assertEqual(self.run_uut(), ['HEAD commit information'])\n+\n+\n+@generate_skip_decorator(GitCommitBear)\n+class AnalyzeGitCommitTest(unittest.TestCase):\n+\n+    @staticmethod\n+    def run_git_command(*args, stdin=None):", "created_at": "2018-06-20T13:08:04Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg==", "fields": {"body": "This page is about contacting people.\nThis should be after \"- Give us feedback\", as a new item,\n\n\nReport any Code of Conduct violations to ....", "diff": "@@ -24,3 +24,6 @@ Modularity, clean good code as well as a high usability for both users\n and developers of analyse routines (called bears) stand in the\n foreground of the development. We will not speed up our development if\n it needs sacrificing any aspect of quality.\n+\n+\n+Please follow our Code Of Conduct, you can find it `here <http://docs.coala.io/en/latest/Help/FAQ.html#what-is-coala-community-code-of-conduct>`__.", "created_at": "2018-06-20T23:59:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA==", "fields": {"body": "query = db.issues.where('state').equals(states[0]) ?", "diff": "@@ -187,7 +187,11 @@ const database = new class Database {\n       const cards = [];\n       let query;\n       if (states.length === 1) {\n-        query = db.issues.where('state').equals('open');\n+        if (states[0] === 'open') {\n+          query = db.issues.where('state').equals('open');", "created_at": "2018-06-21T15:24:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIwNDA1Nw==", "fields": {"body": "These are all the lovely stuff which work on coala/coala repo, and the template used is being deployed to every other coala repo as well so we can use them there.\npip caching means the extra setup time is negligible.  And the plugins all should do nothing unless enabled in setup.cfg.\nAfter this, you can enable profiling -- see coala/coala#5548 , which also shows time spent in pytest plugins so enabling other features can be 'costed' and rejected if the plugin is too expensive.", "diff": "@@ -1,6 +1,21 @@\n-pytest\n-coverage\n-pytest-cov\n-requests_mock\n-codecov\n+coverage~=4.3.4\n+coverage-env-plugin~=0.1\n+coverage-config-reload-plugin~=0.2\n+codecov~=2.0.5\n+moban~=0.0.9\n+packaging~=16.8\n+pytest~=3.6.1\n+pytest-cov~=2.4\n+pytest-env~=0.6.0\n+pytest-error-for-skips~=1.0\n+pytest-instafail~=0.3.0\n+pytest-mock~=1.1\n+pytest-profiling~=1.3.0\n+pytest-reorder~=0.1.0\n+pytest-reqs~=0.0.6\n+pytest-timeout~=1.3.0\n+pytest-xdist~=1.15\n+requests-mock~=1.2\n+pip!=9.0.2, !=10.0.*\n+wheel~=0.29", "created_at": "2018-06-21T16:49:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDA5OQ==", "fields": {"body": "Just do 'review-blurb' ?", "diff": "@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');\n+  const reviewNumber = splitUrl[splitUrl.length - 1];\n+\n+  const classes = {\n+    'review-blurb': true\n+  };\n+\n+  return (\n+    <span className={classnames(classes)}>", "created_at": "2018-06-24T06:50:17Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE2NQ==", "fields": {"body": "split then pop returns the last element.", "diff": "@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');", "created_at": "2018-06-24T06:54:32Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMTU3OQ==", "fields": {"body": "in the future, I would love to see this turns into infinite list (automatically add more on scroll), since it doesn't load from the network anyway.\nAlso in the future, look at scrolling performance problem, it shouldn't happen now, but it might happen because there's thousands of DOM element being rendered (even the element outside the visible browser window).", "diff": "@@ -0,0 +1,79 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+import ColoredIcon from './colored-icon';\n+\n+const MIN_CHILDREN_TO_SHOW = 10;\n+\n+\n+class ReviewList extends Component {\n+  state = {morePressedCount: 0, showCSVModal: false};\n+\n+  showAllReviews = () => {\n+    this.setState({showAllReviews: true});\n+  };\n+\n+  onClickMore = () => {\n+    this.setState({morePressedCount: this.state.morePressedCount + 1});\n+  };\n+\n+  toggleCSVModal = () => {\n+    const {showCSVModal} = this.state;\n+    this.setState({showCSVModal: !showCSVModal});\n+  };\n+\n+  render() {\n+    const {icon, backgroundColor, children} = this.props;\n+    const {isOver} = this.props; // from the collector\n+    const {showAllReviews, morePressedCount} = this.state;\n+    const multiple = 25; // Add 25 results at a time\n+\n+    let className = 'column-title';\n+    if (icon) {\n+      className += ' has-icon';\n+    }\n+\n+    let iconEl;\n+    if (icon) {\n+      iconEl = (\n+        <ColoredIcon className='column-icon' color={backgroundColor}>{icon}</ColoredIcon>\n+      );\n+    }\n+\n+    const header = (\n+      <h2 className={className}>\n+        {iconEl}Meta-reviews in Need ({children.length})\n+      </h2>\n+    );\n+\n+    const classes = {\n+      'issue-list': true,\n+      'is-over': isOver\n+    };\n+\n+    let partialChildren;\n+    let moreButton;\n+    if (!showAllReviews && MIN_CHILDREN_TO_SHOW + (1 + morePressedCount) * multiple < children.length) {\n+      partialChildren = children.slice(0, MIN_CHILDREN_TO_SHOW + morePressedCount * multiple);\n+      moreButton = (\n+        <BS.Button onClick={this.onClickMore} className='list-group-item'>\n+          {children.length - (morePressedCount + 1) * multiple} more...", "created_at": "2018-06-24T08:02:04Z", "last_edited_at": "2018-06-24T08:02:56Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NTgxNQ==", "fields": {"body": "Nevermind, it's inside map, didn't saw that.\nBut this will mutate the prop, it's considered bad practice in React, and IMO a map shouldn't mutate because it's normally for creating a new array. This will not cause problem since we know it's only adding new property that isn't used elsewhere. But, best to stay away from bad practices. Spread syntax (...) is available for cloning objects.", "diff": "@@ -77,6 +99,27 @@ class KanbanRepo extends Component {\n   render() {\n     const {columnData, cards, repoInfos} = this.props;\n \n+    // Get review comments out of cards\n+    const reviews = cards.map((card) => {\n+      if (card.issue.pullRequest && card.issue.pullRequest.comments) {\n+        let comments = card.issue.pullRequest.comments;\n+        comments.forEach(comment => {\n+          comment.repoOwner = card.repoOwner;\n+          comment.repoName = card.repoName;\n+          comment.number = card.number;\n+        });\n+        return comments;", "created_at": "2018-06-25T16:49:25Z", "last_edited_at": "2018-06-25T17:07:25Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjQ2Nw==", "fields": {"body": "trailing comma.", "diff": "@@ -71,6 +71,17 @@ def TEAMS(self):\n     def TEAMS(self, new):\n         self._teams = new\n \n+    def team_mapping(self):\n+        return {\n+            'newcomers': self.TEAMS[self.GH_ORG_NAME + ' newcomers'],\n+            'developers': self.TEAMS[self.GH_ORG_NAME + ' developers'],\n+            'maintainers': self.TEAMS[self.GH_ORG_NAME + ' maintainers']", "created_at": "2018-06-27T11:43:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjY0OQ==", "fields": {"body": "trailing comma", "diff": "@@ -111,6 +111,8 @@ def test_is_room_member(self):\n     def test_hello_world_callback(self):\n         teams = {\n             'coala newcomers': self.mock_team,\n+            'coala developers': self.mock_team,\n+            'coala maintainers': self.mock_team", "created_at": "2018-06-27T11:44:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzUwNw==", "fields": {"body": "keep the function, change what it does.\nthat is less disruptive to existing code, making it easier to read&review the changes", "diff": "@@ -89,40 +100,28 @@ def invite_cmd(self, msg, match):\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n         team = team.lower()\n \n-        is_developer = self.TEAMS[self.GH_ORG_NAME +\n-                                  ' developers'].is_member(inviter)\n-        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n-                                   ' maintainers'].is_member(inviter)\n+        is_developer = self.is_team_member(inviter, 'developers')\n+        is_maintainer = self.is_team_member(inviter, 'maintainers')\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        valid_teams = ['newcomers', 'developers', 'maintainers']\n-        if team not in valid_teams:\n+        if team not in self.team_mapping():\n             return 'Please select from one of the valid teams: ' + ', '.join(\n-                    valid_teams)\n-\n-        def invite(invitee, team):", "created_at": "2018-06-27T11:47:46Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzY0MQ==", "fields": {"body": "valid_teams = elf.team_mapping() will require less changes to existing lines, and be more efficient.", "diff": "@@ -89,40 +100,28 @@ def invite_cmd(self, msg, match):\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n         team = team.lower()\n \n-        is_developer = self.TEAMS[self.GH_ORG_NAME +\n-                                  ' developers'].is_member(inviter)\n-        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n-                                   ' maintainers'].is_member(inviter)\n+        is_developer = self.is_team_member(inviter, 'developers')\n+        is_maintainer = self.is_team_member(inviter, 'maintainers')\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        valid_teams = ['newcomers', 'developers', 'maintainers']", "created_at": "2018-06-27T11:48:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTkyMg==", "fields": {"body": "We need to fix #3 so people don't get confused.", "diff": "@@ -0,0 +1,92 @@\n+.review {", "created_at": "2018-06-27T11:56:43Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMjkzMQ==", "fields": {"body": "super()?", "diff": "@@ -46,6 +48,29 @@\n member_accessed\"\"\"))\n \n \n+@generate_repr(('id', hex),\n+               'origin',\n+               'differences',\n+               'count_matrices',\n+               'message')\n+@generate_ordering('origin',\n+                   'differences',\n+                   'count_matrices',\n+                   'message')\n+class ClangFunctionDifferenceResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin,\n+                 differences: list,\n+                 count_matrices: dict):\n+        HiddenResult.__init__(origin,", "created_at": "2018-06-28T11:54:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxOTg0Ng==", "fields": {"body": "Using Ignore bear here, as this line will be modified again soon when you fix the bug, and will then be reformatted.", "diff": "@@ -142,8 +147,9 @@ def test_create_issue_cmd(self):\n         # TODO\n         # Ignoring assertion to prevent build failure for time being\n         # Creating issue in private chat\n-        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-        #                       'You\\'re not allowed')\n+        # testbot_private.assertCommand('!new issue repository this '", "created_at": "2018-06-28T12:24:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMDA1NA==", "fields": {"body": "start the command string on the next line so that it can use the full width, and have line breaks in sensible spots.", "diff": "@@ -153,21 +159,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the '", "created_at": "2018-06-28T12:25:12Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTE0MA==", "fields": {"body": "start string on next line", "diff": "@@ -153,21 +159,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the '\n+                                     'title\\nbo\\ndy',\n+                                     'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository.github.io '", "created_at": "2018-06-28T12:29:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTQ4Ng==", "fields": {"body": "move strings to next line so you dont need to split a URL.  that makes it quite hard to read and understand the test procedure/intention.", "diff": "@@ -191,20 +200,26 @@ def test_unassign_cmd(self):\n         mock_iss.assignees = (None, )\n         mock_iss.unassign = MagicMock()\n \n-        testbot.assertCommand('!unassign https://github.com/coala/name/issues/23',\n+        # Start ignoring InvalidLinkBear\n+        testbot.assertCommand('!unassign https://github.com/coala/name/'", "created_at": "2018-06-28T12:30:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTkxNw==", "fields": {"body": "drop create_autospec to next line and indent only four from the start of the key.", "diff": "@@ -368,22 +385,28 @@ def test_mark_cmd(self):\n         mock_gitlab_mr.labels = ['process/wip']\n         testbot.assertCommand(cmd_github.format('pending', 'coala', 'a', '23'),\n                               'marked pending review')\n-        testbot.assertCommand(cmd_github.format('pending-review', 'coala', 'a', '23'),\n+        testbot.assertCommand(cmd_github.format('pending-review', 'coala',\n+                                                'a', '23'),\n                               'marked pending review')\n-        testbot.assertCommand(cmd_github.format('pending review', 'coala', 'a', '23'),\n+        testbot.assertCommand(cmd_github.format('pending review',\n+                                                'coala', 'a', '23'),\n                               'marked pending review')\n+        # Stop ignoring\n \n     def test_alive(self):\n         labhub, testbot = plugin_testbot(plugins.labhub.LabHub, logging.ERROR)\n         with patch('plugins.labhub.time.sleep') as mock_sleep:\n             labhub.gh_repos = {\n                 'coala': create_autospec(IGitt.GitHub.GitHub.GitHubRepository),\n-                'coala-bears': create_autospec(IGitt.GitHub.GitHub.GitHubRepository),\n-                'coala-utils': create_autospec(IGitt.GitHub.GitHub.GitHubRepository)\n+                'coala-bears': create_autospec(", "created_at": "2018-06-28T12:31:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDY2OQ==", "fields": {"body": "Maybe check if commentsWithReactions is the same length as rawComments here because if not, you might have an error.", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {", "created_at": "2018-07-01T16:44:07Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTE4NQ==", "fields": {"body": "Also, probably use NODE_ENV === 'development' for debug value instead.", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {", "created_at": "2018-06-30T15:27:54Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcxMA==", "fields": {"body": "node.diffHunk || null", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,", "created_at": "2018-06-30T15:53:12Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTg1Nw==", "fields": {"body": "Why bother setting the properties, if all of it is null?", "diff": "@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,\n+            author: commentAuthor,\n+            reactions,\n+            createdAt: node.createdAt,\n+            lastEditedAt: node.lastEditedAt,\n+            // the native `updatedAt` field of comment is inaccurate\n+            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt\n+          };\n+        });\n+        info.issue.pullRequest = {\n+          htmlUrl: node.url,\n+          comments\n+        };\n+        return info;\n+      }).filter((node) => node));\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for pull request. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchPullRequests);\n+    }\n+  }\n+\n+  _mapNodeToIssue(node) {\n+    let user, assignee, milestone;\n+\n+    if (node.author) {\n+      user = {\n+        login: node.author.login,\n+        avatarUrl: node.author.avatarUrl\n+      };\n+    } else {\n+      user = {\n+        login: null,\n+        avatarUrl: null\n+      };\n+    }\n+\n+    if (node.assignees.nodes && node.assignees.nodes.length) {\n+      assignee = {\n+        login: node.assignees.nodes[0].login,\n+        avatarUrl: node.assignees.nodes[0].avatarUrl\n+      };\n+    } else {\n+      assignee = null;\n+    }\n+\n+    if (node.milestone) {\n+      milestone = {\n+        title: node.milestone.title,\n+        createdAt: node.milestone.createdAt,\n+        dueOn: node.milestone.dueOn,\n+        state: node.milestone.state.toLowerCase(),\n+        htmlUrl: node.milestone.url,\n+        description: node.milestone.description\n+      };\n+    } else {\n+      milestone = {\n+        title: null,\n+        createdAt: null,\n+        dueOn: null,\n+        state: null,\n+        htmlUrl: null,\n+        description: null\n+      };", "created_at": "2018-06-30T15:59:57Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTYzNw==", "fields": {"body": "apologies. my comment at #573 (comment) suggested the wrong syntax.\nthe point of using ignore is to NOT modify the line.\nSo, you need to use Ignoring ... and End ignoring or something like that so that this TODO doesnt create style errors until it is fixed.", "diff": "@@ -144,7 +149,7 @@ def test_create_issue_cmd(self):\n         # TODO\n         # Ignoring assertion to prevent build failure for time being\n         # Creating issue in private chat\n-        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',  # Ignore PycodestyleBear, LineLengthBear", "created_at": "2018-07-04T00:58:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTkzNQ==", "fields": {"body": "like the others, dont have \\n in the middle of the line.  It makes it harder for people to read the test and understand its intention.\nAlso these multiple line commands should use textwrap.dedent('''...''') or \"\"\"...\"\"\" so that you dont need to put \\n in the message, and so that the reader doesnt need to check whether the strings on multiple lines are implicit string concats or have a comma, etc.  multiline strings should use Python's multiline strings syntax.\n(would be a possible enhancement to errbot to add a assertMultilineCommand which does the textwrap.dedent for the test writer.)", "diff": "@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',", "created_at": "2018-07-04T01:01:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzU3MQ==", "fields": {"body": "change all of these invalid URLs to contain constant strings which you can ignore using settings in the .coafile, and can be re-used in future so InvalidLinkBear doesnt need to be ignored all the time.\n(and where you are improving the style of tests, also switch to using consistent issue numbers instead of random numbers, which make the reader wonder whether those numbers have some impact on the tests.)\nhttps://github.com/coala/name/issues/23 -> https://github.com/coala/example/issues/999\nhttps://github.com/coala/s/issues/52 -> https://github.com/coala/example2/issues/999\nhttps://gitlab.com/ala/am/issues/532 -> https://gitlab.com/example/test/issues/999", "diff": "@@ -193,20 +201,27 @@ def test_unassign_cmd(self):\n         mock_iss.assignees = (None, )\n         mock_iss.unassign = MagicMock()\n \n-        testbot.assertCommand('!unassign https://github.com/coala/name/issues/23',\n-                              'you are unassigned now', timeout=10000)\n+        # Start ignoring InvalidLinkBear", "created_at": "2018-07-04T01:17:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzcxNw==", "fields": {"body": "please create a newcomer or low issue for this to be changed to https", "diff": "@@ -2,10 +2,13 @@\n \n extra_plugin_dir = 'plugins'\n \n+\n def test_search_cmd(testbot):\n-    testbot.assertCommand('!search api this is search string',\n-                          'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n-    testbot.assertCommand('!search user this is search string',\n-                          'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search api this is search string',\n+        'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search user this is search string',\n+        'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')", "created_at": "2018-07-04T01:19:31Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAxNjQ2MQ==", "fields": {"body": "id=\"search\" class=\"validate\" can you remove those suplimentar spaces there?", "diff": "@@ -1,8 +1,9 @@\n <section>\n <div class=\"main-content container\">\n \n-    <div class=\"col-md-8 col-md-offset-2\">\n-        <input ng-model=\"searchText\" placeholder=\"Search for a bear or a language\" id=\"search\" type=\"text\" class=\"validate\">\n+    <div class=\"col-md-8 col-md-offset-2 input-field\">\n+      <input ng-model=\"searchText\" placeholder=\"Search for a bear or a language\" id=\"search\"   class=\"validate\" type=\"search\" required>", "created_at": "2017-02-08T08:54:21Z", "last_edited_at": null, "author": "impmihai", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAyODE4Mg==", "fields": {"body": "@gkrishnan724  I think this will help text centering  to be backwards compatible as its in -moz-placeholder (firefox 18-)", "diff": "@@ -223,19 +227,19 @@ textarea.materialize-textarea {\n }\n :-moz-placeholder {\n   /* Firefox 18- */\n-\n+  text-align: center;", "created_at": "2017-02-08T09:56:30Z", "last_edited_at": "2017-02-08T09:57:35Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0MzQzMg==", "fields": {"body": "Can we have \"This helps devs whose favourite tools were not supported\"?", "diff": "@@ -1,39 +1,48 @@\n-This project enhances our linter framework and creates a number\n-of third party tool integrations.\n-\n A very easy way to cover a broad spectrum of analysis routines\n is wrapping linters into coala. Currently we have the `@linter` decorator\n which simplifies this integration. Based on this decorator, a large selection\n-of linters can be implemented rapidly. A tutorial on writing linter bears is\n+of linters can be implemented rapidly. \n+\n+This project would widen the range of existing linters coala supports and makes \n+them available for usage in coala. This helps devs that had their favourite tools\n+not supported before. It also enhances the testing API of linter bears, which are", "created_at": "2017-02-08T19:05:26Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NDQ0Ng==", "fields": {"body": "most students dont know what a cEP is. Maybe link to https://coala.io/cep", "diff": "@@ -1,28 +1,57 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. With it, coala runs\n+code analysis only on files that had changed since the last run, giving a\n+huge amortized performance improvement compared to simply running coala on\n+everything regardless. But it is still rather slow and there is still\n+room for improvement.\n \n-Own performance optimization ideas are highly encouraged!\n+For example, we recently discovered that we have been importing all\n+the required modules irrespective of the conditional branch the program\n+takes - some branches do not require some modules. We improved this\n+by lazy-loading only the required modules as and when they are required - and\n+this greatly improved coala's startup speed.\n \n+Performance is key to usability - with faster runtimes, users can get on\n+with their work quicker. And it's fun looking for performance bottlenecks!\n+\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n+\n+The student is also highly encouraged to come up with new solutions that may\n+increase performance even further.\n \n #### Milestones\n \n-##### GSOC 2017 COMMUNITY BONDING\n+##### PREPARATION/BONDING\n+\n+* The applicant has identified at least 3 other performance bottlenecks that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  ", "created_at": "2017-02-08T19:09:55Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NTU4Nw==", "fields": {"body": "they are in the .js file and displayed next to the text", "diff": "@@ -1,28 +1,57 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. With it, coala runs\n+code analysis only on files that had changed since the last run, giving a\n+huge amortized performance improvement compared to simply running coala on\n+everything regardless. But it is still rather slow and there is still\n+room for improvement.\n \n-Own performance optimization ideas are highly encouraged!\n+For example, we recently discovered that we have been importing all\n+the required modules irrespective of the conditional branch the program\n+takes - some branches do not require some modules. We improved this\n+by lazy-loading only the required modules as and when they are required - and\n+this greatly improved coala's startup speed.\n \n+Performance is key to usability - with faster runtimes, users can get on\n+with their work quicker. And it's fun looking for performance bottlenecks!\n+\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.", "created_at": "2017-02-08T19:15:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3ODM3NA==", "fields": {"body": "Two spaces before extracted to make it inline with the above point, also do the same with the other points", "diff": "@@ -0,0 +1,53 @@\n+[coala-quickstart](https://github.com/coala/coala-quickstart) is a tool that\n+helps users to quickly get started with coala. It generates a `.coafile`\n+(coala's configuration file) that is tailored to the project. Currently,\n+coala-quickstart automatically identifies relevant bears for the project\n+based on the languages used and has a clean and simple command-line interface \n+for taking user\u2019s input when required.\n+\n+However, there\u2019s scope for improvement in the following areas:\n+\n+- Utilizing information from common configuration files: Some projects have\n+  configuration files like `Gruntfile.js`, `Gulpfile.js`, `rakefile`,\n+  `package.json`, etc which may contain useful data that's relevant to\n+  coala-quickstart. For example, if a project's Gulpfile.js specifies which\n+  files are to be linted with csslint, we could use this information to target\n+  CSSLintBear at exactly these files.\n+- Improving the interface: \n+\t- Removing non user-friendly warnings.\n+\t- Increasing automation.\n+\t- Validate user input before writing to the generated coafile.\n+- Continuous Integration: Like other coala repositories, add Appveyor \n+  (Windows) and Travis (OSX) integartions.\n+\n+In addition to the above changes the applicants are encouraged to come up with\n+their own ideas.\n+\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+* The applicant has identified all the kinds configuration files to be worked\n+on in the project.\n+* The applicant has figured out all the useful information that could be\n+extracted from these files.\n+\n+##### CODING PHASE 1\n+\n+* The basic structure of the information extraction and filtering relevant\n+bears system is implemented.\n+* coala-quickstart is able to utilize information from at leaset one of the", "created_at": "2017-02-25T12:56:40Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MTg2OQ==", "fields": {"body": "Change an ->a so it would be a universal DistributionRequirement.", "diff": "@@ -18,30 +18,72 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.", "created_at": "2017-03-26T04:55:04Z", "last_edited_at": null, "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MjcxOA==", "fields": {"body": "\"Find dependencies for each bear in all platforms, and add them to the REQUIREMENTS tuple of that bear.\"", "diff": "@@ -18,30 +18,72 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.\n+\n+How this will work: Each requirement class will have an \"install_command\" and\n+an \"install\" method. We will just call requirement.install() and this will\n+run the command on its' own, not caring which platform you're on. Ideally,\n+requirement.install() will use \"install_command\" to generate the command and\n+run it with \"sarge\". For the DistributionRequirement class, the\n+\"install_command\" method will check on which platform you are, and it will\n+generate the according command.\n+If the package is named differently on each platform, it shall be specified\n+in the constructor. Take a mock example for a random bear:\n+\n+REQUIREMENTS=(DistributionRequirement(\n+  apt-get='csslint', dnf='csslinter', brew='csslt')\n+\n+If you're on Ubuntu, it will run \"apt-get install csslint\". If you're on\n+Fedora, it will run \"dnf install csslinter\", and so on.\n+If your package manager is not on the list, we should just print a warning\n+message so that the user tries to install it manually.\n+\n+So cib should not care what kind of requirement each is, it should just\n+iterate through requirement instances and run \"install_command()\" on each,\n+the requirement class handling the rest.\n+\n+Another special case is made of bears which hold different installations\n+for each distribution. A good example is DartLintBear: it has different\n+installation options for Linux (a wget script), Windows and Mac.\n+https://www.dartlang.org/install\n+\n+A good idea to treat these is Conda: a conda package contains a script\n+for each operating system (a .sh for Mac/Linux and a .bat for Windows).\n+When you try to install the conda package, it will run the according script.\n+\n+The last special case is made out of bears which have bear dependencies.\n+We have quite a few (the Clang bears). For these, we should have a\n+BearRequirement class which handles them.\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n * A cEP that describes cib is merged.\n * https://github.com/coala/coala-bears/issues/845 is solved.\n+* cib should be tested with full coverage.\n \n ##### CODING PHASE 1\n \n * All bears should have dependencies sorted out.\n+* The requirement classes should be rewritten so that most of the work is\n+  done within them, cib only having to run their methods and to gather the\n+  bears.\n * Tests should be written for all the dependencies and the classes.\n * All requirement classes shall be properly documented.\n \n ##### CODING PHASE 2\n \n * Platform dependencies should be working.", "created_at": "2017-03-26T06:13:05Z", "last_edited_at": null, "author": "vijeth-aradhya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1NDczNA==", "fields": {"body": "Isn't that repetetion of what he has explained earlier in the file?", "diff": "@@ -18,30 +18,72 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.\n+\n+How this will work: Each requirement class will have an \"install_command\" and\n+an \"install\" method. We will just call requirement.install() and this will\n+run the command on its' own, not caring which platform you're on. Ideally,\n+requirement.install() will use \"install_command\" to generate the command and\n+run it with \"sarge\". For the DistributionRequirement class, the\n+\"install_command\" method will check on which platform you are, and it will\n+generate the according command.\n+If the package is named differently on each platform, it shall be specified\n+in the constructor. Take a mock example for a random bear:\n+\n+REQUIREMENTS=(DistributionRequirement(\n+  apt-get='csslint', dnf='csslinter', brew='csslt')\n+\n+If you're on Ubuntu, it will run \"apt-get install csslint\". If you're on\n+Fedora, it will run \"dnf install csslinter\", and so on.\n+If your package manager is not on the list, we should just print a warning\n+message so that the user tries to install it manually.\n+\n+So cib should not care what kind of requirement each is, it should just\n+iterate through requirement instances and run \"install_command()\" on each,\n+the requirement class handling the rest.\n+\n+Another special case is made of bears which hold different installations\n+for each distribution. A good example is DartLintBear: it has different\n+installation options for Linux (a wget script), Windows and Mac.\n+https://www.dartlang.org/install\n+\n+A good idea to treat these is Conda: a conda package contains a script\n+for each operating system (a .sh for Mac/Linux and a .bat for Windows).\n+When you try to install the conda package, it will run the according script.\n+\n+The last special case is made out of bears which have bear dependencies.\n+We have quite a few (the Clang bears). For these, we should have a\n+BearRequirement class which handles them.\n \n #### Milestones\n \n ##### PREPARATION/BONDING\n \n * A cEP that describes cib is merged.\n * https://github.com/coala/coala-bears/issues/845 is solved.\n+* cib should be tested with full coverage.\n \n ##### CODING PHASE 1\n \n * All bears should have dependencies sorted out.\n+* The requirement classes should be rewritten so that most of the work is\n+  done within them, cib only having to run their methods and to gather the\n+  bears.\n * Tests should be written for all the dependencies and the classes.\n * All requirement classes shall be properly documented.\n \n ##### CODING PHASE 2\n \n * Platform dependencies should be working.\n+* Conda packages should be created for all bears which need such deps.", "created_at": "2017-03-26T08:13:33Z", "last_edited_at": null, "author": "madhukar01", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2MTk4NQ==", "fields": {"body": "its' -> its", "diff": "@@ -18,30 +18,73 @@ Each bear has a REQUIREMENTS tuple which holds instances of requirement classes,\n found here (https://gitlab.com/coala/package_manager), which should be\n reworked so that most operations in cib would be methods from these classes.\n \n-As a start for this project, EACH bear must have all its dependencies solved\n-out (>80% do), including the platform dependent ones. For this to be done,\n-DistributionRequirement should be reworked.\n+The problem right now is that some bears are not even getting installed by\n+cib. Besides those with which we have requirement classes, the rest\n+aren't even treated. So the plan is to create package managers for the\n+popular managers, and treat them all in an universal DistributionRequirement.\n+\n+How this will work: Each requirement class will have an \"install_command\" and\n+an \"install\" method. We will just call requirement.install() and this will\n+run the command on its' own, not caring which platform you're on. Ideally,", "created_at": "2017-03-26T14:29:42Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyODQwOA==", "fields": {"body": "But that could cause problems with all newcomers pinging for reviews.", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.", "created_at": "2017-03-29T16:49:36Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyOTA0Mg==", "fields": {"body": "Gamification could be a problem. Many people pinging for reviews. People complaining that they did not get reviews on time and hence were delayed. People fighting over badges depending on the weight they carry. We had this in the uni system for a while with assignment submissions and the gamification turned into an absolute nightmare. We could have newcomers fighting to get things merged rather than actually focusing on the process of learning. Statistics are okay as a motivator but gamification should be given a rethink.", "diff": "@@ -561,5 +561,26 @@ coala should support generating metrics for your code.\",\n \t  \"tags\" : [\"Information Extraction\", \"CLI\", \"CI\"],\n \t  \"markdown\" : \"enhance_coala_quickstart.md\",\n \t  \"collaborating_projects\" : [\"coala\"]\n+\t},\n+\t{\n+\t\t\"name\" : \"Newcomer metrics and gamification\",", "created_at": "2017-03-29T16:52:16Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjE5Ng==", "fields": {"body": "Irrelevant change :)", "diff": "@@ -561,5 +561,26 @@ coala should support generating metrics for your code.\",\n \t  \"tags\" : [\"Information Extraction\", \"CLI\", \"CI\"],\n \t  \"markdown\" : \"enhance_coala_quickstart.md\",\n \t  \"collaborating_projects\" : [\"coala\"]\n+\t},\n+\t{\n+\t\t\"name\" : \"Newcomer metrics and gamification\",\n+\t\t\"desc\" : \"Provide public metrics about newcomers and the newcomer process.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"At least one patch to each of coala-landing and coala-html should \\\n+\t\t\tbe accepted and merged.\",\n+\t\t\t\"The student should be familiar with web design tools & trends.\",\n+\t\t],\n+\t\t\"difficulty\" : \"medium\",\n+\t\t\"issues\" : [\n+\t\t\t\"https://github.com/coala/coala-quickstart/issues/22\",\n+\t\t\t\"https://github.com/coala/coala-quickstart/issues/42\"", "created_at": "2017-04-01T10:04:30Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjI4MQ==", "fields": {"body": "I think \"Number of gitter messages by the newcomer\" should not be considered, because either it will motivate them to spam or prevent them from asking/giving help for even the genuine problems (if large no. messages are penalized)\nimo it should be the quality of their questions/replies on the gitter that should be measured.", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer", "created_at": "2017-04-01T10:10:52Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4MjE3Ng==", "fields": {"body": "leaves.  koalas eat leaves ;P", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer\n+\n+All of those can be improved by considering the size (bytes, etc) in addition to the 'number'.", "created_at": "2017-04-03T10:17:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMjcyOA==", "fields": {"body": "\"large no. messages are penalized\" would be penalised, like all the others.  quality cant be measured, easily ;-)\nThe penalty for gitter messages would be lower than penalty for gitmate errors, and PR iterations.  Smart people decide to ask for help rather than screw up a PR. ;-)", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer", "created_at": "2017-04-02T16:14:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMzc2Mw==", "fields": {"body": "I've an idea to measure the quality of messages. We can have the weekly/monthly feed of all the messages of the contributor and have let every maintainer submit a rating (on scale of 10 maybe) of the feed. The quality is the averaged rating given by the maintainers.", "diff": "@@ -0,0 +1,20 @@\n+coala tries to be a welcoming organisation for newcomers, giving them clear pathways and as much direct assistance as needed and possible, and using automation tools to reduce the load on the core team.\n+\n+We need to measure our community's success in this department, in order to identify problems and constantly improve.\n+We can also use metrics to gamify this process, allowing newcomers to see how they performed at the newcomer process compared to other newcomers, and giving badges to newcomers who perform particularly well, and badges to developers who spend their time assisting a newcomer through the process successfully.\n+The inverse is also possible, allowing the core team to evaluate when someone has consumed too much time with too little progress, and allowing the newcomer and their peers to see cold facts that show who is taking too long to complete the process.\n+\n+The primary metric measured is the time period for each newcomer from first sighting on github/gitter, to the merge of a PR for a low difficulty issue that was not created by the newcomer, and a \u2018suggestions requested\u2019 review of a low difficulty PR by another community member and the review endorsed by a maintainer with a \u2018+1\u2019.(meta-reviews)\n+\n+This will require that issues are manually downgraded to 'difficulty/newcomer' if they were not actually the 'difficulty/low' originally expected, and\n+each newcomer knows they need to have a maintainer super-review their review, and actively beg for this super-review.\n+\n+Some other very basic metrics that can be used are:\n+\n+- Number of pushes\n+- Number of gitmate errors\n+- Number of reviewer comments\n+- Number of gitter messages by the newcomer\n+- Number of gitter messages to the newcomer", "created_at": "2017-04-02T16:55:54Z", "last_edited_at": null, "author": "satwikkansal", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDU0NzU3NA==", "fields": {"body": "why do you make a new class, doesn't p do the job?", "diff": "@@ -3,8 +3,16 @@\n         <div class=\"col-md-8 col-md-offset-2\">\n             <div class=\"title-get-involved\">about</div>\n             <br>\n-            <div class=\"get-description\">\n-                \n+            <div class=\"about-description\">", "created_at": "2017-04-09T17:14:52Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTAxMQ==", "fields": {"body": "You could add use vulture to report dead code for popular Python projects on github to the preparation phase (see jendrikseipp/vulture#38).", "diff": "@@ -42,16 +42,19 @@ References:\n ", "created_at": "2017-05-10T21:47:13Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTUwNw==", "fields": {"body": "Another point: refine default whitelist", "diff": "@@ -42,16 +42,19 @@ References:\n \n - Vulture offers its functionality as a library\n - The VultureBear uses the new vulture library\n-\n-##### CODING PHASE 2\n-\n - Confidence values are implemented for vulture results\n \n-##### CODING PHASE 3\n+##### CODING PHASE 2\n \n+- Configuring vulture so as to subsume a whitelist file by default.", "created_at": "2017-05-10T21:49:46Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTcxMA==", "fields": {"body": "Also: create whitelist files for popular Python frameworks like Django", "diff": "@@ -42,16 +42,19 @@ References:\n \n - Vulture offers its functionality as a library\n - The VultureBear uses the new vulture library\n-\n-##### CODING PHASE 2\n-\n - Confidence values are implemented for vulture results\n \n-##### CODING PHASE 3\n+##### CODING PHASE 2\n \n+- Configuring vulture so as to subsume a whitelist file by default.", "created_at": "2017-05-10T21:50:52Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTkzMDQ1NA==", "fields": {"body": "Yes, I think this is feasible. The default whitelist (like all whitelist files) will always be a work-in-progress, but I think we can lay a solid foundation here.", "diff": "@@ -42,16 +42,19 @@ References:\n \n - Vulture offers its functionality as a library\n - The VultureBear uses the new vulture library\n-\n-##### CODING PHASE 2\n-\n - Confidence values are implemented for vulture results\n \n-##### CODING PHASE 3\n+##### CODING PHASE 2\n \n+- Configuring vulture so as to subsume a whitelist file by default.\n - If a way was found to offer source ranges, the removal of dead code is\n   implemented for the VultureBear using a confidence value as threshold.\n - If no way was found, additional detection cases for vulture are implemented.\n   In this case the last milestone has to be reimplemented during the Bonding and\n   coding phase 1 in cooperation with the coala and vulture mentors.", "created_at": "2017-05-11T08:22:07Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYyMzQ0OQ==", "fields": {"body": "@Mixih stated to use this to get the rc2 in his blog post and gist, so used this. Anyway I'll change this after 0.11 is released", "diff": "@@ -0,0 +1,19 @@\n+language: python\n+python:\n+ - 3.6\n+\n+addons:\n+  apt:\n+    packages:\n+      - libssl-dev\n+      - python3-dev\n+\n+before_script:\n+  - pip install coala-bears[alldeps]==0.11.rc2 --pre -U", "created_at": "2017-05-21T05:26:04Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0NzQzMw==", "fields": {"body": "I think you should try to not change vulture at all for this part. Try to change VultureBear to use vulture as a library without changing vulture. If we notice that vulture is missing some function, we can implement it later.", "diff": "@@ -1,57 +1,105 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. Strategy here would be to:\n+\n+\t* Parse all files straight away from dict(filename: filecontent)  - This would highly improve the performance of the bear later due to the time we save of memory copying.\n+\t* Return a sorted list of tuples [(item.filename, item.lineno, item.typ, item)...] - which would be easily configurable.", "created_at": "2017-05-24T13:11:15Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0OTExNw==", "fields": {"body": "remove second \"default\"", "diff": "@@ -1,57 +1,105 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. Strategy here would be to:\n+\n+\t* Parse all files straight away from dict(filename: filecontent)  - This would highly improve the performance of the bear later due to the time we save of memory copying.\n+\t* Return a sorted list of tuples [(item.filename, item.lineno, item.typ, item)...] - which would be easily configurable.\n+\t*  This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed) \n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence the API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist default", "created_at": "2017-05-24T13:18:24Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQ2NDcyNA==", "fields": {"body": "you are missing a files statement here.", "diff": "@@ -13,3 +13,13 @@ max_lines_per_file = 200\n bears = FilenameBear\n files = **.yml, **.html, **.md, **.js, **.css\n ignore = vendors/**, data/projects/integrate-pyflakes-AST.md\n+\n+[spacing]\n+bears = SpaceConsistencyBear\n+ignore = vendors/**\n+use_spaces = True", "created_at": "2017-05-25T11:08:06Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQyOTU2OQ==", "fields": {"body": "Sure, I'll check with upstream", "diff": "@@ -0,0 +1,14 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+class Nevermind(BotPlugin):\n+    \"\"\"\n+    Doesn't mind", "created_at": "2017-05-25T06:58:41Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQzMzA4NA==", "fields": {"body": "Could you add a comment explaining so?", "diff": "@@ -0,0 +1,12 @@\n+import os\n+\n+from plugins.nevermind import Nevermind\n+\n+pytest_plugins = ['errbot.backends.test']\n+\n+extra_plugin_dir = '../plugins'", "created_at": "2017-05-25T07:28:10Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0NzU4NQ==", "fields": {"body": "remove \"the suitable\"", "diff": "@@ -1,57 +1,128 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed)\n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence the API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist\n+The first step here would be to make the whitelist default. The important thing would be to identify possible cases which might cause vulture to report a false positive. This can be achieved through extensive testing with major projects - trending python projects on github would cater to our need for the purpose. This approach would serve us many benefits:\n+\n+- We can identify instances of what should ideally be in our whitelist file - as we may find any lesser known constructs.\n+- We can test vulture for any unreported bugs.\n+- We can find many projects which use/might want to use vulture - they may further collaborate with us in making the whitelists together. (As proposed by [@jendrikseipp](https://github.com/jendrikseipp))\n+- We can also make whitelists for popular python frameworks like Django, etc.\n+\n+\n+##### 3.) Acquiring source range and implementing auto-removal\n+Analyse and discuss with the community the utilities of ast or enhanced pyflake ast for what would better cater to our problem and would offer simplicity for source-range acquisition and arrive at a concrete conclusion. Also, there was another proposal by [@m0hawk](https://bitbucket.org/m0hawk) to get everything until the next node starts. Dialogue here - [#25](https://github.com/jendrikseipp/vulture/issues/25)\n+\n+Also, if able to fetch the source range successfully, implement the pathway through which  the metadata flows in and out of API, this would not require much work because  we can easily change item.lineno (int) to item.dead_range (tuple of ints) and can parse them over in the VultureBear.\n+\n+##### 4.) Detecting unreachable code\n+We would first need to identify cases where code cannot be reached. Some of the common ones are:\n+\n+- `If False`\n+- `If True; else`\n+- Any code after `return` statement in the block containing return itself.\n+- `raise` statement  in `try` block.\n+\n+Similar constructs would have to be looked onto. The crude form of this would be:\n+\n+- Analyse the ast\u2019s\n+- Look for the if nodes\n+- Check the boolean affiliated to it, tracking previous arguments.\n+\n+\n+##### 5.) Implementing a confidence value for  results\n+We would need to analyse every construct individually on a case by case basis. For example, we already know that import statements can be predicted with 100% surety (except for * imports, where it would be 0%), but functions often have false-positives.\n+\n+The confidence value will be alike the ones given below: (The finer grained distinctions will need further discussion)\n+\n+- `import` -->  `100%`\n+- `from foo import *` --> `0%`\n+- `variable` --> `<100%`\n+- `function` --> `<100%`\n+- `class` --> `<100%`\n+- `if False` --> `100%`\n \n References:\n \n-- [vulture](https://bitbucket.org/jendrikseipp/vulture)\n+- [vulture](https://github.com/jendrikseipp/vulture)\n+- [Project Proposal](https://docs.google.com/document/d/1gzRH-rdJsiAD-TOEB0O4OqtcnTp0zotcNl6agAuXGHw/edit?usp=sharing)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### Pre - Community Bonding Period ( Up Till  May 4)\n+- Initial investigation and discussion on what features to be added to API, and start implementing them on the go.\n+- Continue discussion with the community on ast and enhanced pyflakes ast - What are the underlying differences, and what can be possible implementations for source range acquisition.\n+- Diagnose possible cases which would render the code unreachable.\n+- Inculcate a habit of downloading the trending project of the day, running vulture on it, analyzing the results and adding anything suitable to whitelist file. This would help us in maintaining a rich whitelist file.\n+- Prioritize all the goals and targets\n+\n+##### Community Bonding (May 5 - 30)\n+- Finalize what should be implemented for source range acquisition on the basis of discussions during pre - community bonding period.\n+- Implement API - At this point, we would have a fully functioning API, and we would be ready to incorporate these changes into the VultureBear.\n+- Refactor VultureBear to incorporate API - This would be relatively easy as the API would have had until now respected it\u2019s usage in the VultureBear.\n+\n+##### Week 1 & 2 (May 31 - June 13)\n+- Implement API - At this point, we would have a fully functioning API, and we would be ready to incorporate these changes into the VultureBear.\n+- Refactor VultureBear to incorporate API - This would be relatively easy as the API would have had until now respected it\u2019s usage in the VultureBear.\n+\n+##### Week 3 (June 14 - 20)\n+- Realize VultureBear completely - At this point, it should be able to execute vulture, parse output, produce the patch file for removing the dead code what so ever found.\n+Review the tests written so far and add relevant test cases.\n+- Document Bear\n+- API documentation including, but not limited to possible use cases, example code snippets\n+- See that code is completely documented in place\n+- Buffer time to finish pending work.\n \n-- A concept for the source range acquisition is finalized.\n+##### Week 4 (June 20 - 26)\n+- Develop an analysis report on what all constructs can we detect with complete surety,  partial surety and the ones we cannot detect for the sake of implementing a confidence value with results. (A crude version is here in this thread).\n+- Discuss on the levels of certainty we would need to have (perhaps four for highly accurate (100%), accurate (>80%), medium (70 - 80%) and can\u2019t say)\n \n-##### CODING PHASE 1\n+##### Week 5 (June 27 - July 4)\n+- Create whitelist files for popular Python frameworks like Django\n+- Configure vulture in order to ensure that whitelist is taken into account by default.\n+- Updating docs and writing tests.\n \n-- Vulture offers its functionality as a library\n-- The VultureBear uses the new vulture library\n+##### Week 6 (July 4 - 15)\n+- Adapt to the strategy worked during community bonding period for obtaining source range.\n \n-##### CODING PHASE 2\n+##### Week 7 & 8 (July 15 - 29)\n+- Diagnose the instances of unreachable code, our concern here would be to identify all such cases which would render the code unreachable, like the if False; if True: else; code after return statements, etc. - Adding this to the dead code classes, under a new category: get_unreachable\n \n-- Confidence values are implemented for vulture results\n+##### Week 9 (August 1 - 7)\n+- Integrate these results with the VultureBear, which would primarily consist of:\n+- Transmitting source range, and unreachable code instances through API\n+- Yielding the results of Bear in the new format.\n \n-##### CODING PHASE 3\n+##### Week 11 (August 8 - 17)\n+- Adding the suitable documentation for the new changes incorporated in the API, Bear and vulture itself.", "created_at": "2017-05-28T19:26:59Z", "last_edited_at": null, "author": "jendrikseipp", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUwNg==", "fields": {"body": "trailing blank line.", "diff": "@@ -0,0 +1,12 @@\n+[Core]\n+name = ship_it\n+module = ship_it\n+\n+[Documentation]\n+description = Show motivational ship it squirrel images.\n+\n+[Python]\n+version = 3\n+\n+[Errbot]\n+", "created_at": "2017-05-27T10:41:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUxMw==", "fields": {"body": "trailing blank line.", "diff": "@@ -19,3 +19,7 @@ default_actions = PEP8Bear: ApplyPatchAction\n \n [all.linelength]\n bears = LineLengthBear\n+\n+[all.links]\n+bears = InvalidLinkBear\n+", "created_at": "2017-05-27T10:41:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzMjQzNA==", "fields": {"body": "Why not use checkboxes? I don't know if the website will render it though.", "diff": "@@ -14,27 +14,30 @@ coala. The specific areas and points to focus on are:\n 5. Make the implementation of ApplyPatchAction log the applied patch.\n 6. Reprompt after running actions only if the action says so.\n \n-The end goal of the project is to make coala easier to use, hence the\n-project is going to rely heavily upon mockups and feedback from the\n-community. Also, in addition to the above changes the applicant is encouraged\n-to come up with their own ideas to improve the CLI.\n+The end goal of the project is to:\n+* _Make coala easier to use_\n+* _Adds new functionality so the user could have multiple options when he uses coala_", "created_at": "2017-05-28T03:38:45Z", "last_edited_at": null, "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTA5Njc4NQ==", "fields": {"body": "minor typo prioritization *", "diff": "@@ -38,33 +40,64 @@ The difference between this project and \"Convert Bears to Aspects\" is that the\n other project focuses on defining aspects on *each bears* while this project\n implements how the coala core is handling bears that use aspects.\n \n-References\n+**Implementation**\n+\n+This project could be divided into 3 main step, which is:\n+\n+1. aspect based configuration\n+\n+Define new option and variable that could be used on coafile to define list\n+of aspect and taste that user want to run over the project.\n+\n+2. Bear picking strategy\n+\n+Implement required algorithm to pick list of bear based on required aspect on\n+coafile. This involve collecting all bears metadata to read its capability and\n+prioritizing picking by few criteria like choosing bear that could fix the\n+problem (not only detect), minimizing number of individual bears, and\n+minimizing different runtime environment of external linter bear.\n+\n+3. Documentation, depreciation, and testing\n+\n+Writing or updating documentation on how aspect work and how to write new\n+configuration file. Also I plan to do an integration test that will run coala\n+with new aspect based configuration and the old one over an example project\n+and compare the result.\n+\n+**References**\n \n-* Aspects concept based on\n+* aspects concept based on\n   [cEP-0005](https://github.com/coala/cEPs/blob/master/cEP-0005.md)\n * Proposal on how new bears could be designed\n   [cEP-0002](https://github.com/coala/cEPs/blob/master/cEP-0002.md)\n-* Current aspects prototype\n-  [coala/aspect-docs](https://github.com/coala/aspect-docs)\n+* Current aspects code on\n+  [coala/coala](https://github.com/coala/coala/tree/master/coalib/bearlib/aspects)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### [PREPARATION/BONDING](https://gitlab.com/coala/GSoC-2017/milestones/36)\n \n * A solid plan for the implementation and the exact features exist.\n * Any needed changes to [cEP-0005](https://coala.io/cep5) have been merged.\n \n-##### CODING PHASE 1\n+##### [CODING PHASE 1](https://gitlab.com/coala/GSoC-2017/milestones/37)\n \n * coala understands the new aspect-based configuration file.\n * The new aspect-based configuration file is documented properly.\n+* Fix one issue on autoflake\n \n-##### CODING PHASE 2\n+##### [CODING PHASE 2](https://gitlab.com/coala/GSoC-2017/milestones/38)\n \n-* coala can choose the right bears for an aspect.\n+* coala can pick the right bears to resolve an aspect.\n+* coala use few prioritazion criteria to pick those bear.", "created_at": "2017-05-30T13:22:45Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MjQ1Mg==", "fields": {"body": "could you keep the phases section in the document, and put the relevant weeks inside them", "diff": "@@ -1,57 +1,126 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: ```get_unused_code```. This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed)\n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence the API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist\n+The first step here would be to make the whitelist default. The important thing would be to identify possible cases which might cause vulture to report a false positive. This can be achieved through extensive testing with major projects - trending python projects on github would cater to our need for the purpose. This approach would serve us many benefits:\n+\n+- We can identify instances of what should ideally be in our whitelist file - as we may find any lesser known constructs.\n+- We can test vulture for any unreported bugs.\n+- We can find many projects which use/might want to use vulture - they may further collaborate with us in making the whitelists together. (As proposed by [@jendrikseipp](https://github.com/jendrikseipp))\n+- We can also make whitelists for popular python frameworks like Django, etc.\n+\n+\n+##### 3.) Acquiring source range and implementing auto-removal\n+Analyse and discuss with the community the utilities of ast or enhanced pyflake ast for what would better cater to our problem and would offer simplicity for source-range acquisition and arrive at a concrete conclusion. Also, there was another proposal by [@m0hawk](https://bitbucket.org/m0hawk) to get everything until the next node starts. Dialogue here - [#25](https://github.com/jendrikseipp/vulture/issues/25)\n+\n+Also, if able to fetch the source range successfully, implement the pathway through which  the metadata flows in and out of API, this would not require much work because  we can easily change item.lineno (int) to item.dead_range (tuple of ints) and can parse them over in the VultureBear.\n+\n+##### 4.) Detecting unreachable code\n+We would first need to identify cases where code cannot be reached. Some of the common ones are:\n+\n+- `If False`\n+- `If True; else`\n+- Any code after `return` statement in the block containing return itself.\n+- `raise` statement  in `try` block.\n+\n+Similar constructs would have to be looked onto. The crude form of this would be:\n+\n+- Analyse the ast\u2019s\n+- Look for the if nodes\n+- Check the boolean affiliated to it, tracking previous arguments.\n+\n+\n+##### 5.) Implementing a confidence value for  results\n+We would need to analyse every construct individually on a case by case basis. For example, we already know that import statements can be predicted with 100% surety (except for * imports, where it would be 0%), but functions often have false-positives.\n+\n+The confidence value will be alike the ones given below: (The finer grained distinctions will need further discussion)\n+\n+- `import` -->  `100%`\n+- `from foo import *` --> `0%`\n+- `variable` --> `<100%`\n+- `function` --> `<100%`\n+- `class` --> `<100%`\n+- `if False` --> `100%`\n \n References:\n \n-- [vulture](https://bitbucket.org/jendrikseipp/vulture)\n+- [vulture](https://github.com/jendrikseipp/vulture)\n+- [Project Proposal](https://docs.google.com/document/d/1gzRH-rdJsiAD-TOEB0O4OqtcnTp0zotcNl6agAuXGHw/edit?usp=sharing)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### Pre - Community Bonding Period ( Up Till  May 4)\n+- Initial investigation and discussion on what features to be added to API, and start implementing them on the go.\n+- Continue discussion with the community on ast and enhanced pyflakes ast - What are the underlying differences, and what can be possible implementations for source range acquisition.\n+- Diagnose possible cases which would render the code unreachable.\n+- Inculcate a habit of downloading the trending project of the day, running vulture on it, analyzing the results and adding anything suitable to whitelist file. This would help us in maintaining a rich whitelist file.\n+- Prioritize all the goals and targets\n+\n+##### Community Bonding (May 5 - 30)\n+- Finalize what should be implemented for source range acquisition on the basis of discussions during pre - community bonding period.\n+\n+##### Week 1 & 2 (May 31 - June 13)\n+- Implement API - At this point, we would have a fully functioning API, and we would be ready to incorporate these changes into the VultureBear.\n+- Refactor VultureBear to incorporate API - This would be relatively easy as the API would have had until now respected it\u2019s usage in the VultureBear.\n+\n+##### Week 3 (June 14 - 20)\n+- Realize VultureBear completely - At this point, it should be able to execute vulture, parse output, produce the patch file for removing the dead code what so ever found.\n+Review the tests written so far and add relevant test cases.\n+- Document Bear\n+- API documentation including, but not limited to possible use cases, example code snippets\n+- See that code is completely documented in place\n+- Buffer time to finish pending work.\n \n-- A concept for the source range acquisition is finalized.\n+##### Week 4 (June 20 - 26)\n+- Develop an analysis report on what all constructs can we detect with complete surety,  partial surety and the ones we cannot detect for the sake of implementing a confidence value with results. (A crude version is here in this thread).\n+- Discuss on the levels of certainty we would need to have (perhaps four for highly accurate (100%), accurate (>80%), medium (70 - 80%) and can\u2019t say)\n \n-##### CODING PHASE 1", "created_at": "2017-05-30T17:22:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mjg1OA==", "fields": {"body": "please reformat/lint your markdown with remark or the MarkdownBear.\nWe will activate this bear soon.", "diff": "@@ -1,57 +1,126 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API", "created_at": "2017-05-30T17:24:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MzY3MA==", "fields": {"body": "trailing blank line.", "diff": "@@ -0,0 +1,113 @@\n+This project is about cobot, the automation chat bot that is used at coala.\n+Currently cobot is used for several things:\n+\n+- Assign issues\n+- Invite people\n+- Create issues\n+- Unassign issues\n+- label PRs\n+\n+etc. And cobot has proved as an extremely useful tool for the community and\n+convenient to the maintainers. But current cobot is based on the [hubot\n+framework](https://hubot.github.com) which requires the developers to write\n+plugins/scripts in coffeescript. coala is a python inclined community and\n+porting cobot to a python based chat bot framework will help cobot to grow. In\n+this project, the current cobot with current functionalities will be ported to\n+[errbot](http://errbot.io).\n+\n+Also the hubot scripts that are currently being used aren't tested. There are no\n+unit tests, no integrity tests which has lead to buggy scripts merged earlier\n+and required more human resources. Another goal of this project is to have all\n+the plugins tested, unit tests for each plugin.\n+\n+Another interesting feature that will be developed during this project is\n+auto-replying cobot when a question is triggered. So, next time, when a newcomer\n+asks \"What is rebase :/ ?\" cobot will automatically answer it after\n+intelligently searching/matching with the user, developer docs and newcomer\n+guide. That is this feature will be fueled by our existing documentation that\n+many people don't seem to respect/ignore knowingly or unknowingly not making it\n+worthwile having good up-to-date docs. We aim at using topic modeling i.e. take\n+help of machine learning and natural language processing(NLP) for this one.\n+\n+Repository: https://github.com/coala/corobo\n+Proposal PDF: https://meetmangukiya.github.io/GSoC_cobot_enhancement.pdf\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/2\n+\n+* The applicant has made a cEP of how the new plugins will be implemented, how\n+  will it be tested, etc.\n+\n+\n+##### CODING PHASE 1\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/23\n+\n+* Port all the plugins to errbot.\n+* Write half of the new features proposed.\n+* Write the test helper and all the merged plugins should have unit tests.\n+\n+##### CODING PHASE 2\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/24\n+\n+* Write the other half of the new features proposed.\n+* Start implementing the topic modeling functions, etc.\n+\n+##### CODING PHASE 3\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/25\n+\n+* Topic modeling should be implemented completely and should also be able to\n+  trace back to the related document in the training data.\n+* Document all the bot commands and the topic modeling process used, for future\n+  references.\n+\n+#### Process\n+\n+##### CODING PHASE 1\n+\n+In week 1 and 2: All the existing scripts in gitlab/coala/cobot should be\n+ported to github/coala/corobo. All the plugins should be tested with 100%\n+coverage.\n+\n+In week 3 and 4: At least two new plugins from\n+https://github.com/coala/corobo/milestone/5 should be written and tested.\n+\n+##### CODING PHASE 2\n+\n+In week 5 and 6:\n+1. Get all the PRs from CODING PHASE 1 merged.\n+2. Write the WSDL file for coala webservices. Generate coala-api-wrapper from\n+   the WSDL file and publish to PyPI.\n+3. Write all the plugins from https://github.com/coala/corobo/milestone/5 and\n+   use coala-api-wrapper instead of making raw API calls.\n+\n+In week 7 and 8:\n+1. Merge all the PRs from week 5 and 6.\n+2. Review all the plugin commands and fix any bugs that were detected during\n+   this period. Do a UX survey from the coala community about the commands.\n+   Do the necessary changes from the insights of the UX survey.\n+3. Lay the foundation of topic-modeling and create sane data sets from coala\n+   documentation.\n+\n+##### CODING PHASE 3\n+\n+In week 9 and 10:\n+1. Have least functionality that does the pre-processing and can retrieve topic\n+   from the given question, i.e. figuring out what is the expected answer.\n+2. Start working on the passage retrieval part to _get_ the answers from the\n+   documentation.\n+3. Working functionality to get answers from the docs and summarize the doc to\n+   answer in concise manner.\n+\n+In week 11 and 12:\n+1. Based on the scores determine if the question can be answered from our docs,\n+   if not just return a google result for the same question.\n+2. Buffer.\n+3. Documentation(particularly about the algorithm used for retrieving the\n+   answers).\n+", "created_at": "2017-05-30T17:27:18Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzc1NA==", "fields": {"body": "space before (", "diff": "@@ -0,0 +1,113 @@\n+This project is about cobot, the automation chat bot that is used at coala.\n+Currently cobot is used for several things:\n+\n+- Assign issues\n+- Invite people\n+- Create issues\n+- Unassign issues\n+- label PRs\n+\n+etc. And cobot has proved as an extremely useful tool for the community and\n+convenient to the maintainers. But current cobot is based on the [hubot\n+framework](https://hubot.github.com) which requires the developers to write\n+plugins/scripts in coffeescript. coala is a python inclined community and\n+porting cobot to a python based chat bot framework will help cobot to grow. In\n+this project, the current cobot with current functionalities will be ported to\n+[errbot](http://errbot.io).\n+\n+Also the hubot scripts that are currently being used aren't tested. There are no\n+unit tests, no integrity tests which has lead to buggy scripts merged earlier\n+and required more human resources. Another goal of this project is to have all\n+the plugins tested, unit tests for each plugin.\n+\n+Another interesting feature that will be developed during this project is\n+auto-replying cobot when a question is triggered. So, next time, when a newcomer\n+asks \"What is rebase :/ ?\" cobot will automatically answer it after\n+intelligently searching/matching with the user, developer docs and newcomer\n+guide. That is this feature will be fueled by our existing documentation that\n+many people don't seem to respect/ignore knowingly or unknowingly not making it\n+worthwile having good up-to-date docs. We aim at using topic modeling i.e. take\n+help of machine learning and natural language processing(NLP) for this one.\n+\n+Repository: https://github.com/coala/corobo\n+Proposal PDF: https://meetmangukiya.github.io/GSoC_cobot_enhancement.pdf\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/2\n+\n+* The applicant has made a cEP of how the new plugins will be implemented, how\n+  will it be tested, etc.\n+\n+\n+##### CODING PHASE 1\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/23\n+\n+* Port all the plugins to errbot.\n+* Write half of the new features proposed.\n+* Write the test helper and all the merged plugins should have unit tests.\n+\n+##### CODING PHASE 2\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/24\n+\n+* Write the other half of the new features proposed.\n+* Start implementing the topic modeling functions, etc.\n+\n+##### CODING PHASE 3\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/25\n+\n+* Topic modeling should be implemented completely and should also be able to\n+  trace back to the related document in the training data.\n+* Document all the bot commands and the topic modeling process used, for future\n+  references.\n+\n+#### Process\n+\n+##### CODING PHASE 1\n+\n+In week 1 and 2: All the existing scripts in gitlab/coala/cobot should be\n+ported to github/coala/corobo. All the plugins should be tested with 100%\n+coverage.\n+\n+In week 3 and 4: At least two new plugins from\n+https://github.com/coala/corobo/milestone/5 should be written and tested.\n+\n+##### CODING PHASE 2\n+\n+In week 5 and 6:\n+1. Get all the PRs from CODING PHASE 1 merged.\n+2. Write the WSDL file for coala webservices. Generate coala-api-wrapper from\n+   the WSDL file and publish to PyPI.\n+3. Write all the plugins from https://github.com/coala/corobo/milestone/5 and\n+   use coala-api-wrapper instead of making raw API calls.\n+\n+In week 7 and 8:\n+1. Merge all the PRs from week 5 and 6.\n+2. Review all the plugin commands and fix any bugs that were detected during\n+   this period. Do a UX survey from the coala community about the commands.\n+   Do the necessary changes from the insights of the UX survey.\n+3. Lay the foundation of topic-modeling and create sane data sets from coala\n+   documentation.\n+\n+##### CODING PHASE 3\n+\n+In week 9 and 10:\n+1. Have least functionality that does the pre-processing and can retrieve topic\n+   from the given question, i.e. figuring out what is the expected answer.\n+2. Start working on the passage retrieval part to _get_ the answers from the\n+   documentation.\n+3. Working functionality to get answers from the docs and summarize the doc to\n+   answer in concise manner.\n+\n+In week 11 and 12:\n+1. Based on the scores determine if the question can be answered from our docs,\n+   if not just return a google result for the same question.\n+2. Buffer.\n+3. Documentation(particularly about the algorithm used for retrieving the", "created_at": "2017-05-30T17:27:39Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzk4OQ==", "fields": {"body": "I think you need a blank line after this, to be proper markdown syntax.", "diff": "@@ -0,0 +1,113 @@\n+This project is about cobot, the automation chat bot that is used at coala.\n+Currently cobot is used for several things:\n+\n+- Assign issues\n+- Invite people\n+- Create issues\n+- Unassign issues\n+- label PRs\n+\n+etc. And cobot has proved as an extremely useful tool for the community and\n+convenient to the maintainers. But current cobot is based on the [hubot\n+framework](https://hubot.github.com) which requires the developers to write\n+plugins/scripts in coffeescript. coala is a python inclined community and\n+porting cobot to a python based chat bot framework will help cobot to grow. In\n+this project, the current cobot with current functionalities will be ported to\n+[errbot](http://errbot.io).\n+\n+Also the hubot scripts that are currently being used aren't tested. There are no\n+unit tests, no integrity tests which has lead to buggy scripts merged earlier\n+and required more human resources. Another goal of this project is to have all\n+the plugins tested, unit tests for each plugin.\n+\n+Another interesting feature that will be developed during this project is\n+auto-replying cobot when a question is triggered. So, next time, when a newcomer\n+asks \"What is rebase :/ ?\" cobot will automatically answer it after\n+intelligently searching/matching with the user, developer docs and newcomer\n+guide. That is this feature will be fueled by our existing documentation that\n+many people don't seem to respect/ignore knowingly or unknowingly not making it\n+worthwile having good up-to-date docs. We aim at using topic modeling i.e. take\n+help of machine learning and natural language processing(NLP) for this one.\n+\n+Repository: https://github.com/coala/corobo\n+Proposal PDF: https://meetmangukiya.github.io/GSoC_cobot_enhancement.pdf\n+\n+#### Milestones\n+\n+##### PREPARATION/BONDING\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/2\n+\n+* The applicant has made a cEP of how the new plugins will be implemented, how\n+  will it be tested, etc.\n+\n+\n+##### CODING PHASE 1\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/23\n+\n+* Port all the plugins to errbot.\n+* Write half of the new features proposed.\n+* Write the test helper and all the merged plugins should have unit tests.\n+\n+##### CODING PHASE 2\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/24\n+\n+* Write the other half of the new features proposed.\n+* Start implementing the topic modeling functions, etc.\n+\n+##### CODING PHASE 3\n+\n+Milestone: https://gitlab.com/coala/GSoC-2017/milestones/25\n+\n+* Topic modeling should be implemented completely and should also be able to\n+  trace back to the related document in the training data.\n+* Document all the bot commands and the topic modeling process used, for future\n+  references.\n+\n+#### Process\n+\n+##### CODING PHASE 1\n+\n+In week 1 and 2: All the existing scripts in gitlab/coala/cobot should be\n+ported to github/coala/corobo. All the plugins should be tested with 100%\n+coverage.\n+\n+In week 3 and 4: At least two new plugins from\n+https://github.com/coala/corobo/milestone/5 should be written and tested.\n+\n+##### CODING PHASE 2\n+\n+In week 5 and 6:", "created_at": "2017-05-30T17:28:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTI1MDYyMQ==", "fields": {"body": "why do you have a tab here?\nAnd please use a consistent line length\nno more than 120 please.", "diff": "@@ -1,57 +1,148 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all metadata through the API\n+and then to harness this utility in VultureBear for auto removing dead code, which would greatly optimise the bear. The\n+second part of this project focuses on offering the source range of the dead code which would make auto-removal much\n+easier. As of now, vulture only supplies the beginning of the dead code. Also, it proposes to enhance vulture in order to\n+detect unreachable code (like `if False`, `if True else`, any code written after return statements, etc). - this shall help\n+the user in trimming down their codebase without affecting usability. Also, the third part would be to implement a\n+confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract layer: `get_unused_code`. This can be easily implemented, given the already existing Vulture.scan(), Vulture.report() , Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient- we would have memory files passing (An extra layer of parsing would then be removed)", "created_at": "2017-05-31T01:00:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2Njc0Mg==", "fields": {"body": "typo", "diff": "@@ -0,0 +1,12 @@\n+[Core]\n+module = github\n+name = github\n+\n+[Documentation]\n+description = GitHub utilities exposed through errbpt", "created_at": "2017-06-01T09:22:53Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2NjgxOQ==", "fields": {"body": "use internal logging object provided by errbot instead", "diff": "@@ -0,0 +1,111 @@\n+import logging", "created_at": "2017-06-01T09:23:12Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMDUyMQ==", "fields": {"body": "Double quotes to single quotes. Quotes bear not throwing errors. Do that everywhere in this file.", "diff": "@@ -0,0 +1,27 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class The_rules(BotPlugin):\n+    \"\"\"\n+    List the bot rules\n+    \"\"\"\n+\n+    RULES = [\n+        \"A robot may not harm humanity, or, by inaction, allow humanity to \"", "created_at": "2017-06-01T01:13:57Z", "last_edited_at": "2017-06-01T01:14:23Z", "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI2NA==", "fields": {"body": "easily -> as well.", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"", "created_at": "2017-06-01T01:23:09Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI4Ng==", "fields": {"body": "then -> than", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"\n+        \"sure to try out a few things first - you're in a much better position \"\n+        \"to help yourself then we are. Try googling, thinking, the GitHub \"", "created_at": "2017-06-01T01:23:25Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTM3NQ==", "fields": {"body": "Let's link the git grep page here using markdown if possible.", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"\n+        \"sure to try out a few things first - you're in a much better position \"\n+        \"to help yourself then we are. Try googling, thinking, the GitHub \"\n+        \"search or git grep if you are looking for source code.\"", "created_at": "2017-06-01T01:24:29Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTMyNA==", "fields": {"body": "the github search -> searching on github.", "diff": "@@ -0,0 +1,27 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        \"Hey! You seem to have asked a question which could have been solved \"\n+        \"by other means easily.Click [this]({}) When you ask a question, be \"\n+        \"sure to try out a few things first - you're in a much better position \"\n+        \"to help yourself then we are. Try googling, thinking, the GitHub \"\n+        \"search or git grep if you are looking for source code.\"", "created_at": "2017-06-01T01:23:57Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyNjc1NQ==", "fields": {"body": "Quotes bear is set to double quotes though, it'll complain :/", "diff": "@@ -0,0 +1,27 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class The_rules(BotPlugin):\n+    \"\"\"\n+    List the bot rules\n+    \"\"\"\n+\n+    RULES = [\n+        \"A robot may not harm humanity, or, by inaction, allow humanity to \"", "created_at": "2017-06-01T04:42:32Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyODYwOQ==", "fields": {"body": "Not applying here, since applied in other PR, will merge that first and then this, so there are less conflicts \ud83d\udc4d", "diff": "@@ -0,0 +1,27 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class The_rules(BotPlugin):\n+    \"\"\"\n+    List the bot rules\n+    \"\"\"\n+\n+    RULES = [\n+        \"A robot may not harm humanity, or, by inaction, allow humanity to \"", "created_at": "2017-06-01T05:07:36Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzM0OQ==", "fields": {"body": "this is still a tab character.  Dont mix tabs and spaces.", "diff": "@@ -1,57 +1,175 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all\n+metadata through the API and then to harness this utility in VultureBear for auto removing dead code,\n+which would greatly optimise the bear. The second part of this project focuses on offering the source\n+range of the dead code which would make auto-removal much easier. As of now, vulture only supplies the\n+beginning of the dead code. Also, it proposes to enhance vulture in order to detect unreachable code(like `if False`, `if True else`, any code written after return statements, etc). - this shall helpthe user in trimming down their codebase without affecting usability. Also, the third part would beto implement a confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract\n+  layer: `get_unused_code`. This can be easily implemented, given the already existing Vulture.scan(),\n+  Vulture.report(),  Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient-", "created_at": "2017-06-01T06:37:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzQ1Mg==", "fields": {"body": "( Up Till May 4) -> (Up Till May 4)", "diff": "@@ -1,57 +1,175 @@\n-Vulture is a tool that finds unused classes, functions and variables in your\n-code.\n-This information is useful as unused code can be removed without changing the\n-behavior of a program while making it easier to maintain the remaining code\n-and slimming down a codebase.\n-Using the information from vulture, one would normally remove the dead code\n-manually.\n-But similar to auto formatting tools it would save a lot of work if there was\n-a way to remove the code automatically.\n-\n-This project's aim is to provide such an auto removal feature via a coala bear,\n-using the information vulture offers.\n-\n-To reach this goal the VultureBear should be modified to support removing a\n-source range that vulture declared dead code.\n-\n-To realize this, some work has to be done upstream at vulture. Namely:\n-\n-- Make vulture available as a library for easier use for the bear\n-- Implement a confidence value for results. This is necessary as vulture\n-  produces false positives so a threshold has to be set what to accept for auto\n-  removal.\n-- Make vulture offer source ranges for the dead code. Right now vulture only\n-  offers the beginning of the dead code, which makes removal hard. This could\n-  possibly be done by removing everything up to the next node in the python AST.\n-  Another possibility is that the enhanced AST of pyflakes could offer the\n-  necessary information.\n-- In case no way to offer source ranges is found, additional detection cases\n-  can be implemented for vulture. For example identifying `if False` cases.\n+#### Overview\n+\n+The motivation, here, is to extend the functionality of vulture as a library, and to pass on all\n+metadata through the API and then to harness this utility in VultureBear for auto removing dead code,\n+which would greatly optimise the bear. The second part of this project focuses on offering the source\n+range of the dead code which would make auto-removal much easier. As of now, vulture only supplies the\n+beginning of the dead code. Also, it proposes to enhance vulture in order to detect unreachable code(like `if False`, `if True else`, any code written after return statements, etc). - this shall helpthe user in trimming down their codebase without affecting usability. Also, the third part would beto implement a confidence value for every result, this shall be helpful when tackling false positives.\n+\n+![coala-VultureBear-Integration-picture](https://cloud.githubusercontent.com/assets/15556382/26275557/580cae2c-3d81-11e7-89ed-ac1ccbf9dc26.png)\n+\n+#### Goals\n+\n+- Modify vulture, such as to extend its core functionality as a library.\n+- Refactor VultureBear accordingly for ensuring optimal performance.\n+- Implement a method to acquire the source range of dead code and make suitable changes in the API and Bear.\n+- Detect the instances of unreachable code, like `if False` statements\n+- Analyse and implement a confidence value for results.\n+\n+#### Specifications\n+\n+##### 1.) Realise vulture\u2019s API in VultureBear\n+\n+- Extending vulture\u2019s API: This would allow the user to find all the unused code through a single abstract\n+  layer: `get_unused_code`. This can be easily implemented, given the already existing Vulture.scan(),\n+  Vulture.report(),  Vulture.unused_funcs(), etc. with minimal changes in vulture's code base.\n+\n+- Enhance VultureBear\n+\n+\t- Refactor VultureBear to directly fetch results through get_unused_code (API), thus making it more efficient-\n+\twe would have memory files passing (An extra layer of parsing would then be removed)\n+\t- Further enhancements in vulture (detect unreachable code and reporting ranges of dead code)  would influence\n+\tthe API, which would also need refactoring of the Bear.\n+\n+\n+##### 2.) Improving default whitelist\n+\n+The first step here would be to make the whitelist default. The important thing would be to identify possible\n+cases which might cause vulture to report a false positive. This can be achieved through extensive testing with\n+major projects - trending python projects on github would cater to our need for the purpose. This approach would\n+serve us many benefits:\n+\n+- We can identify instances of what should ideally be in our whitelist file - as we may find any lesser known\n+  constructs.\n+- We can test vulture for any unreported bugs.\n+- We can find many projects which use/might want to use vulture - they may further collaborate with us in making\n+  the whitelists together. (As proposed by [@jendrikseipp](https://github.com/jendrikseipp))\n+- We can also make whitelists for popular python frameworks like Django, etc.\n+\n+##### 3.) Acquiring source range and implementing auto-removal\n+\n+Analyse and discuss with the community the utilities of ast or enhanced pyflake ast for what would better cater to\n+our problem and would offer simplicity for source-range acquisition and arrive at a concrete conclusion. Also,\n+there was another proposal by [@m0hawk](https://bitbucket.org/m0hawk) to get everything until the next node\n+starts. Dialogue here - [#25](https://github.com/jendrikseipp/vulture/issues/25)\n+\n+Also, if able to fetch the source range successfully, implement the pathway through which  the metadata flows in\n+and out of API, this would not require much work because  we can easily change item.lineno (int) to\n+item.dead_range (tuple of ints) and can parse them over in the VultureBear.\n+\n+##### 4.) Detecting unreachable code\n+\n+We would first need to identify cases where code cannot be reached. Some of the common ones are:\n+\n+- `If False`\n+- `If True; else`\n+- Any code after `return` statement in the block containing return itself.\n+- `raise` statement  in `try` block.\n+\n+Similar constructs would have to be looked onto. The crude form of this would be:\n+\n+- Analyse the ast\u2019s\n+- Look for the if nodes\n+- Check the boolean affiliated to it, tracking previous arguments.\n+\n+##### 5.) Implementing a confidence value for results\n+\n+We would need to analyse every construct individually on a case by case basis. For example, we already know that\n+import statements can be predicted with 100% surety (except for \\* imports, where it would be 0%), but functions\n+often have false-positives.\n+\n+The confidence value will be alike the ones given below: (The finer grained distinctions will need further\n+discussion)\n+\n+- `import` -->  `100%`\n+- `from foo import *` --> `0%`\n+- `variable` --> `<100%`\n+- `function` --> `<100%`\n+- `class` --> `<100%`\n+- `if False` --> `100%`\n \n References:\n \n-- [vulture](https://bitbucket.org/jendrikseipp/vulture)\n+- [vulture](https://github.com/jendrikseipp/vulture)\n+- [Project Proposal](https://docs.google.com/document/d/1gzRH-rdJsiAD-TOEB0O4OqtcnTp0zotcNl6agAuXGHw/edit?usp=sharing)\n \n #### Milestones\n \n-##### PREPARATION/BONDING\n+##### Pre - Community Bonding Period ( Up Till  May 4)", "created_at": "2017-06-01T06:37:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNDI5MA==", "fields": {"body": "Docstring needed", "diff": "@@ -0,0 +1,25 @@\n+import os\n+\n+import wolframalpha\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class WolframAlpha(BotPlugin):\n+    \"\"\"\n+    Query the Computational Knowledge Engine\n+    \"\"\"\n+\n+    def activate(self):\n+        super().activate()\n+        self.client = wolframalpha.Client(os.environ.get('WA_TOKEN'))\n+\n+    @botcmd\n+    def wa(self, msg, arg):", "created_at": "2017-06-02T09:17:55Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNzg3Mw==", "fields": {"body": "remove this line", "diff": "@@ -0,0 +1,12 @@\n+[Core]\n+module = lmgtfy\n+name = lmgtfy\n+\n+[Documentation]\n+description = For all those people who find it more convenient to bother you with their question rather than search it for themselves.\n+\n+[Python]\n+version = 3\n+\n+[Errbot]\n+", "created_at": "2017-06-02T09:36:56Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNDcxMg==", "fields": {"body": "Better to say you are not a maintainer and hence you don't have the rights to invite. Nice try \ud83d\udca9 .", "diff": "@@ -1,7 +1,106 @@\n-from errbot import BotPlugin\n+import os\n+import re\n \n+import github3\n \n-class Labhub(BotPlugin):\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class LabHub(BotPlugin):\n     \"\"\"\n     GitHub and GitLab utilities\n     \"\"\"\n+\n+    INVITE_SUCCESS = {\n+        'newcomers': 'Welcome @{}! :tada:\\n\\nTo get started, please '\n+                     'follow our [newcomers guide](https://coala.io/newcomer).'\n+                     'Most issues will be explained there and in linked pages -'\n+                     ' it will save you a lot of time, just read it. *Really.*'\n+                     \"\\n\\n*Do not take an issue if you don't understand it on \"\n+                     'your own.* Especially if you are new you have to be '\n+                     'aware that getting started with an open source community '\n+                     'is not trivial: you will have to work hard and most '\n+                     'likely become a better coder than you are now just as we '\n+                     \"all did.\\n\\nDon't get us wrong: we are *very* glad to \"\n+                     'have you with us on this journey into open source! We '\n+                     'will also be there for you at all times to help you with '\n+                     'actual problems. :)',\n+        'developers': 'Wow @{}, you are a part of developers team now! :tada: '\n+                      'Welcome to our community!',\n+        'maintainers': '@{} you seem to be awesome! You are now a maintainer! '\n+                       ':tada: Please go through '\n+                       'https://github.com/coala/coala/wiki/Membership'\n+    }\n+\n+    def activate(self):\n+        super().activate()\n+        self.GH = LabHub.get_gh_obj(os.environ.get('GH_TOKEN'))\n+        self.ORG = LabHub.get_org(self.GH, 'coala')\n+        self.TEAMS = LabHub.get_teams(self.ORG)\n+\n+    @staticmethod\n+    def get_gh_obj(token):\n+        \"\"\"\n+        :param token:   github token\n+        :returns:       ``github3.GitHub`` object\n+        \"\"\"\n+        return github3.login(token=token)\n+\n+    @staticmethod\n+    def get_org(gh, org_name):\n+        \"\"\"\n+        :param gh:          ``github3.GitHub`` object\n+        :param org_name:    Name of the organization\n+        :returns:           ``github3.orgs.Organization`` object\n+        \"\"\"\n+        return gh.organization(org_name)\n+\n+    @staticmethod\n+    def get_teams(org):\n+        \"\"\"\n+        :param org: ``github3.orgs.Organization`` object\n+        :returns:   Dict containing team names as keys and corrosponding\n+                    ``github3.orgs.Team`` objects as values.\n+        \"\"\"\n+        teams = dict()\n+        for team in org.iter_teams():\n+            teams[team.name] = team\n+        return teams\n+\n+    @staticmethod\n+    def invite(user, team):\n+        \"\"\"\n+        Invite user to team.\n+        :param user:    Username\n+        :param team:    ``github3.orgs.Team`` object\n+        \"\"\"\n+        return team.invite(user)\n+\n+    @re_botcmd(pattern=r'(?:(?:invite)|(?:inv))\\s+(\\w+)\\s*(?:to)\\s+(\\w+)')\n+    def invite_cmd(self, msg, match):\n+        \"\"\"\n+        Invite given user to given team. By default it invites to\n+        \"coala newcomers\" team.\n+        \"\"\"\n+        invitee = match.group(1)\n+        inviter = msg.frm.nick\n+\n+        team = 'coala newcomers' if match.group(2) is None else match.group(2)\n+\n+        self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n+\n+        if self.TEAMS['coala maintainers'].is_member(invitee):\n+            valid_teams = ['newcomers', 'developers', 'maintainers']\n+            if team.lower() not in valid_teams:\n+                return 'Please select from one of the ' + ', '.join(valid_teams)\n+            team_mapping = {\n+                'newcomers': 'coala newcomers',\n+                'developers': 'coala developers',\n+                'maintainers': 'coala maintainers'\n+            }\n+\n+            # Call the helper method after all the validation is done\n+            LabHub.invite(invitee, self.TEAMS[team_mapping[team.lower()]])\n+            return self.INVITE_SUCCESS[team.lower()].format(invitee)\n+        else:\n+            return 'Nice try :poop:'", "created_at": "2017-06-04T16:46:23Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDcwNw==", "fields": {"body": "Missing space after period well. Click also missing period after this", "diff": "@@ -0,0 +1,28 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        'Hey! You seem to have asked a question which could have been solved '\n+        'by other means as well.Click [this]({}) When you ask a question, be '", "created_at": "2017-06-05T03:06:36Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDg3Mw==", "fields": {"body": "*not us", "diff": "@@ -0,0 +1,87 @@\n+import re\n+\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Explain(BotPlugin):\n+    \"\"\"\n+    Explain various terms\n+    \"\"\"\n+\n+    MSGS = {\n+        'review': 'After creating your `Pull Request`, it is under the review '\n+                  'process. This can be deduced from the `process/pending '\n+                  'review` label. Now you have to wait for the reviewers to '\n+                  'review your PR. You should *not* ask for reviews on our '\n+                  'Gitter channel - we review those PRs continuously.\\n\\n'\n+                  \"We're usually swamped with reviews, while you are waiting \"\n+                  \"**please review other people's PRs** at [coala.io/review]\"\n+                  '(https://coala.io/review): that helps you and will make '\n+                  'your review happen faster as well. As a rule of thumb, '\n+                  '*for every review you receive, give at least one review '\n+                  'to someone else!*\\n\\nFor a good review, look at every '\n+                  'commit on its own and place `<sha> is ready` or `<sha> '\n+                  'needs work` comments on the pull request, be sure to '\n+                  \"remove other spacing like tabs. If you're done with a \"\n+                  'pull request, you can use `cobot mark wip <pull URL>` '\n+                  'to mark it *work in progress* finally.',\n+        'closes': 'We use bug prediction in coala which relies on the `Fixes` '\n+                  'keyword in commit messages. To get good results from that '\n+                  'we need to use `Closes` for normal issues instead of `Fixes`'\n+                  ' which should only be used for real bugs. (See also [the '\n+                  'commit message docs](https://coala.io/commit).) To change '\n+                  'your message you just use `git commit --amend` and then '\n+                  '`git push --force` the new commit to replace the old one.',\n+        'fixes': 'We use bug prediction in coala which relies on the `Fixes` '\n+                 'keyword in commit messages. To get good results from that '\n+                 'we need to use `Fixes` for bugfix issues instead of '\n+                 '`Closes`. (See also [the commit message docs]'\n+                 '(https://coala.io/commit).) To change your message you '\n+                 'just use `git commit --amend` and then `git push --force` '\n+                 'the new commit to replace the old one.',\n+        'commit message': 'To change your message you just use `git commit '\n+                          '--amend` and then `git push --force` the new '\n+                          \"commit to replace the old one.\\n\\nIf you're just \"\n+                          'looking to fix an issue very quickly and not '\n+                          'interested in contributing to coala long term, we '\n+                          'can fix up the message for you - just tell us :).',\n+        'rebase': 'It looks like your PR is out of date and needs a rebase.'\n+                  '\\n\\n[This page](https://coala.io/git) may help you to get '\n+                  'started on this. We also have [a quick video tutorial on '\n+                  'how to rebase](https://asciinema.org/a/78683). That should '\n+                  'help you understand the basics of how it works and what you'\n+                  \"should be doing.\\n\\nIf you're just looking to fix an issue \"\n+                  'very quickly and not interested in contributing to coala '\n+                  'long term, we can fix it up for you - just tell us :).',\n+        'cep': \"At coala we're using [cEP's (coala Enhancement Proposals)]\"\n+               '(http://coala.io/cep) to define major design decisions - '\n+               \"they're a bit like PEP's but not quite as extensive and \"\n+               'obviously written with a lower case c.',\n+        'gitlab': 'We are currently evaluating on if we want to use GitLab for'\n+                  \"code hosting. That's why some repositories are already on \"\n+                  'GitLab, if you want to participate in the migration '\n+                  'discussion, please add information [at our GitLab wiki page]'\n+                  '(https://github.com/coala/coala/wiki/GitLab).',\n+        'google': 'Hey. This message was triggered because someone was too '\n+                  \"lazy to type this *again*. Don't take it personally. \"\n+                  'Please.\\n\\nWe all got to learn this: *use google*. Or '\n+                  'duckduckgo. Anything. The search engine that earned your '\n+                  'trust. You got a build error? Search for the first red '\n+                  'thing and google it. You got an exception? *Read the '\n+                  'message.* Search it. *Think.*\\n\\nKeep this in mind: *You*'\n+                  'are sitting in front of the problem, not we. You will have '", "created_at": "2017-06-05T03:09:09Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ0MTUyNA==", "fields": {"body": "double quotes", "diff": "@@ -0,0 +1,28 @@\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class Lmgtfy(BotPlugin):\n+    \"\"\"\n+    For all those people who find it more convenient to bother you with their\n+    question rather than search it for themselves.\n+    \"\"\"\n+\n+    MSG = (\n+        'Hey! You seem to have asked a question which could have been solved '\n+        'by other means as well. Click [this]({}). When you ask a question, be '\n+        \"sure to try out a few things first - you're in a much better position \"", "created_at": "2017-06-06T18:25:12Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1MjkzNw==", "fields": {"body": "I'd just make this comment multiline", "diff": "@@ -1,7 +1,105 @@\n-from errbot import BotPlugin\n+import json\n+import os\n+import re\n \n+import github3\n \n-class Labhub(BotPlugin):\n-    \"\"\"\n-    GitHub and GitLab utilities\n-    \"\"\"\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class LabHub(BotPlugin):\n+    \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear", "created_at": "2017-06-07T07:33:56Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTA3MjYyOA==", "fields": {"body": "this function is rather useless, a oneliner and only used once, I suggest inlining it", "diff": "@@ -1,7 +1,105 @@\n-from errbot import BotPlugin\n+import json\n+import os\n+import re\n \n+import github3\n \n-class Labhub(BotPlugin):\n-    \"\"\"\n-    GitHub and GitLab utilities\n-    \"\"\"\n+from errbot import BotPlugin, re_botcmd\n+\n+\n+class LabHub(BotPlugin):\n+    \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n+\n+    def activate(self):\n+        super().activate()\n+\n+        with open(os.path.join(os.environ.get('COBOT_ROOT', os.getcwd()),\n+                               'plugins/LabHub.json')) as f:\n+            config = f.read()\n+\n+        config = json.loads(config)\n+        self.INVITE_SUCCESS = config['INVITE_SUCCESS']\n+        self.ORG_USERNAME = config['ORG_USERNAME']\n+\n+        self.GH = LabHub.get_gh_obj(os.environ.get('GH_TOKEN'))\n+        self.ORG = LabHub.get_org(self.GH, self.ORG_USERNAME)\n+        self.TEAMS = LabHub.get_teams(self.ORG)\n+\n+    @staticmethod\n+    def get_gh_obj(token):\n+        \"\"\"\n+        :param token:   github token\n+        :returns:       ``github3.GitHub`` object\n+        \"\"\"\n+        return github3.login(token=token)\n+\n+    @staticmethod\n+    def get_org(gh, org_name):\n+        \"\"\"\n+        :param gh:          ``github3.GitHub`` object\n+        :param org_name:    Name of the organization\n+        :returns:           ``github3.orgs.Organization`` object\n+        \"\"\"\n+        return gh.organization(org_name)", "created_at": "2017-06-09T08:21:33Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg1MjgzMA==", "fields": {"body": "Any reason to use vcr instead of proper html requests?", "diff": "@@ -0,0 +1,12 @@\n+from plugins.wolfram_alpha import WolframAlpha\n+\n+import vcr\n+\n+pytest_plugins = ['errbot.backends.test']\n+extra_plugin_dir = 'plugins'\n+\n+my_vcr = vcr.VCR(match_on=['method', 'scheme', 'host', 'port', 'path'])", "created_at": "2017-06-14T04:41:25Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU4NjcwNA==", "fields": {"body": "; Please :P", "diff": "@@ -21,11 +21,11 @@ app.directive('languages',  ['$http',  '$timeout' ,function ($http, $timeout) {\n                 $http.get(api_link + '/list/bears')\n                     .then(function(data){\n                         arr = []", "created_at": "2017-06-18T09:49:11Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjk1NTMxNQ==", "fields": {"body": "Can you find a good Python git library? I really don't like going to shell", "diff": "@@ -0,0 +1,36 @@\n+import os\n+import subprocess\n+\n+from errbot import BotPlugin, botcmd\n+\n+run = lambda x: subprocess.Popen(x.split(),\n+                                 stdout=subprocess.PIPE).stdout.read()\n+\n+\n+class Utils(BotPlugin):\n+    \"\"\"\n+    Some random utilities\n+    \"\"\"\n+\n+    @botcmd\n+    def sync(self, msg, arg):\n+        \"\"\"Sync the repository from github.\"\"\"  # Ignore QuotesBear\n+        os.chdir(os.environ.get('COBOT_ROOT'))\n+        initial_head = run('git log --oneline -1')", "created_at": "2017-06-20T12:03:23Z", "last_edited_at": "2017-06-20T12:03:34Z", "author": "yukiisbored", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3NDIyNA==", "fields": {"body": "Add username as well, of the user that created the issue, so he remains in the loop", "diff": "@@ -136,9 +136,18 @@ def create_issut_cmd(self, msg, match):\n         repo_name = match.group(1)\n         iss_title = match.group(2)\n         iss_description = match.group(3) if match.group(3) is not None else ''\n+\n+        try:  # This is gitter backend specific\n+            link = '\\nOpened via [gitter](https://gitter.im/{}?at={})'.format(", "created_at": "2017-06-24T09:26:02Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDA1ODM0Ng==", "fields": {"body": "A comma missing after [\"coala\", \"vulture\"], therefore no projects are visible on #312 (comment)", "diff": "@@ -212,6 +215,7 @@ projects = [\n         \"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n         \"markdown\": \"vulture.md\",\n         \"collaborating_projects\" : [\"coala\", \"vulture\"]", "created_at": "2017-06-26T16:35:47Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDAzMjY4OQ==", "fields": {"body": "being a semi-colon nazi :P", "diff": "@@ -21,11 +21,11 @@ app.directive('languages',  ['$http',  '$timeout' ,function ($http, $timeout) {\n                 $http.get(api_link + '/list/bears')\n                     .then(function(data){\n                         arr = []", "created_at": "2017-06-26T14:58:25Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDI0MTIwMA==", "fields": {"body": "Here's the screenshot you requested earlier with the developer's involved field modified for a project.", "diff": "@@ -212,6 +215,7 @@ projects = [\n         \"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n         \"markdown\": \"vulture.md\",\n         \"collaborating_projects\" : [\"coala\", \"vulture\"]", "created_at": "2017-06-27T10:53:54Z", "last_edited_at": null, "author": "arrayslayer", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkyODU0OQ==", "fields": {"body": "oh boy, we need to split this file \ud83d\ude1f", "diff": "@@ -680,5 +680,57 @@ coala should support generating metrics for your code.\",\n         \"markdown\": \"cobot_enhancement.md\",\n         \"collaborating_projects\": [\"coala\"],\n         \"in_progress\": true\n+    },\n+    {\n+        \"name\": \"Use coala CI on a popular GitHub repository\",\n+        \"desc\": \"Use coala CI on a popular GitHub project, of your choice, using a Docker image on Travis CI, and report the results to the coala developers.\",\n+        \"requirements\" : [\n+            \"Joined http://coala.io/chat .\",\n+        ],\n+        \"difficulty\": \"beginner\",\n+        \"issues\": [\n+            \"https://github.com/coala/meta/issues/58\",\n+            \"https://github.com/coala/meta/issues/81\"\n+        ],\n+        \"mentors\" : [\n+            \"jayvdb\",\n+            \"sils\"\n+        ],\n+        \"initiatives\": [\"GCI\"],\n+        \"tags\": [\"community\", \"docker\"],\n+        \"markdown\": \"use_coala.md\",\n+        \"collaborating_projects\": [\"docker-coala-base\"]\n+    },\n+    {\n+        \"name\": \"Use coala CI on a popular GitHub repository - Advanced\",\n+        \"desc\": \"Fix a popular GitHub project so that the repository contents conform to linter rules that are verified by coala CI on each commit using Travis CI.\",\n+        \"requirements\" : [\n+            \"Completed task 'use_coala'.\",\n+        ],\n+        \"difficulty\": \"medium\",\n+        \"mentors\" : [\n+            \"jayvdb\",\n+            \"sils\"\n+        ],\n+        \"initiatives\": [\"GCI\"],\n+        \"tags\": [\"community\", \"docker\"],\n+        \"markdown\": \"use_coala_2.md\",\n+        \"collaborating_projects\": [\"docker-coala-base\"]\n+    },\n+    {\n+        \"name\": \"Use coala CI on a popular GitHub repository\",\n+        \"desc\": \"Use coala CI on a popular GitHub project, of your choice, using a Docker image on Travis CI, and report the results to the coala developers.\",\n+        \"requirements\" : [\n+            \"Completed task 'use_coala_2'.\",\n+        ],\n+        \"difficulty\": \"medium\",\n+        \"mentors\" : [\n+            \"jayvdb\",\n+            \"sils\"\n+        ],\n+        \"initiatives\": [\"GCI\"],\n+        \"tags\": [\"community\", \"docker\"],\n+        \"markdown\": \"use_coala_3.md\",\n+        \"collaborating_projects\": [\"docker-coala-base\"]", "created_at": "2017-06-29T22:34:46Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkzODk4OA==", "fields": {"body": "We can remove the headings from individual files as the heading will be already visible in the left side pane.", "diff": "@@ -0,0 +1,463 @@\n+# Use coala CI on a popular GitHub repository", "created_at": "2017-06-29T23:57:01Z", "last_edited_at": "2017-06-30T00:35:13Z", "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4MTEzMQ==", "fields": {"body": "Unnecessary.", "diff": "@@ -124,3 +127,116 @@ def ls(self, msg, match):\n                 yield ''.join(selected_bears) + ' |'\n             else:\n                 yield 'No bears found for {}'.format(lang)\n+\n+    @staticmethod\n+    def construct_settings(settings):\n+        settings = settings.strip().split()\n+\n+        def is_setting(x): return '=' in x  # Ignore PycodestyleBear (E731)\n+        setting_dict = OrderedDict()\n+        for candidate in settings:\n+            if not is_setting(candidate):  # bear\n+                setting_dict[candidate.strip()] = dict()\n+            else:\n+                key, value = candidate.strip().split('=')\n+                setting_dict[list(setting_dict.keys())[-1]][key] = value\n+        return setting_dict\n+\n+    @staticmethod\n+    def position(stl, stc, enl, enc):\n+        if stc is None and enc is None:\n+            if stl != enl:\n+                return 'Between lines {} and {}'.format(stl, enl)\n+            else:\n+                return 'At line {}'.format(stl)\n+        if stc is None and enc is not None:\n+            return 'Between line {} and position {}:{}'.format(stl, enl, enc)\n+        if stc is not None and enc is None:\n+            return 'Between position {}:{} and line {}'.format(stl, stc, enl)\n+        if stl == enl:\n+            if stc == enc:\n+                return \"At {}:{}\".format(stl, stc)\n+            else:\n+                return \"At line {}, between col {} and {}\".format(stl, stc, enc)\n+        else:\n+            return \"Between positions {}:{} and {}:{}\".format(stl, stc,\n+                                                              enl, enc)\n+\n+    # Ignore PycodestyleBear, LineLengthBear\n+    @re_botcmd(pattern=r'run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```')\n+    def run(self, msg, match):\n+        \"\"\"\n+        Run coala over the given code.\n+\n+        Example: `run Bear1 setting1=something setting2=something Bear2\\ncode`\n+        \"\"\"\n+        lang = match.group(1)\n+        bear_settings = type(self).construct_settings(match.group(2))\n+        code = match.group(3)\n+\n+        yield 'coala analysis in progress...'\n+\n+        data = {\n+            \"sections\": {\n+                \"corobo\": {\n+                    \"files\": \"**.gyp\",\n+                    \"bears\": dict(bear_settings),\n+                }\n+            },\n+            \"mode\": \"coala\",\n+            \"language\": lang,\n+            \"file_data\": code,\n+        }\n+\n+        # Ignore InvalidLinkBear, this only accepts post requests\n+        rq = requests.post('https://api.gitmate.io/coala_online/', json=data)\n+        try:\n+            results = rq.json()['response']['results']['corobo']\n+        except json.JSONDecodeError:\n+            went_wrong = '\\n - '.join([\n+                'Is the bear name correct? Note that bear names are '\n+                'case sensitive.'\n+                'Are all required settings provided? If a required setting is '\n+                'not provided, analysis will fail.'\n+            ])\n+            yield 'Something went wrong, things to check for:\\n' + went_wrong\n+            self.log.exception('Something went wrong, please try again')\n+        else:\n+            if not results:\n+                yield 'Your code is flawless :tada:'\n+                return\n+            else:", "created_at": "2017-07-12T15:06:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4NTc1OQ==", "fields": {"body": "^...$ for regex so we dont repeat the invite bugs?", "diff": "@@ -124,3 +127,116 @@ def ls(self, msg, match):\n                 yield ''.join(selected_bears) + ' |'\n             else:\n                 yield 'No bears found for {}'.format(lang)\n+\n+    @staticmethod\n+    def construct_settings(settings):\n+        settings = settings.strip().split()\n+\n+        def is_setting(x): return '=' in x  # Ignore PycodestyleBear (E731)\n+        setting_dict = OrderedDict()\n+        for candidate in settings:\n+            if not is_setting(candidate):  # bear\n+                setting_dict[candidate.strip()] = dict()\n+            else:\n+                key, value = candidate.strip().split('=')\n+                setting_dict[list(setting_dict.keys())[-1]][key] = value\n+        return setting_dict\n+\n+    @staticmethod\n+    def position(stl, stc, enl, enc):\n+        if stc is None and enc is None:\n+            if stl != enl:\n+                return 'Between lines {} and {}'.format(stl, enl)\n+            else:\n+                return 'At line {}'.format(stl)\n+        if stc is None and enc is not None:\n+            return 'Between line {} and position {}:{}'.format(stl, enl, enc)\n+        if stc is not None and enc is None:\n+            return 'Between position {}:{} and line {}'.format(stl, stc, enl)\n+        if stl == enl:\n+            if stc == enc:\n+                return \"At {}:{}\".format(stl, stc)\n+            else:\n+                return \"At line {}, between col {} and {}\".format(stl, stc, enc)\n+        else:\n+            return \"Between positions {}:{} and {}:{}\".format(stl, stc,\n+                                                              enl, enc)\n+\n+    # Ignore PycodestyleBear, LineLengthBear\n+    @re_botcmd(pattern=r'run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```')", "created_at": "2017-07-12T15:21:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjc5NQ==", "fields": {"body": "better written like this:\n$scope.$watch( function () {\n    return Languages.getData();\n}, function () {\n    $scope.setLanguage(Languages.getData());\n}, true);", "diff": "@@ -29,26 +68,69 @@\n         }\n     })\n \n-    app.directive('projects',  ['$http',  '$timeout', '$location', function ($http, $timeout, $location) {\n+    app.directive('projects',  ['$http',  '$timeout', '$location', 'Languages', function ($http, $timeout, $location, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/projects.html',\n-            controller: function ($scope, $location) {\n+            controller: function ($scope, $location, Languages) {\n                 self = this\n-                lang = $location.search().lang || window.localStorage.getItem('lang');\n-                $scope.projectList = projects\n+\n+                $scope.getDefaultProjectsMetadata = function () {\n+                    $http.get('data/projects.json')\n+                    .then(function (res) {\n+                        $scope.projectList = res.data;\n+                    })\n+                }\n+\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultProjectsMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);", "created_at": "2017-07-15T01:21:29Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjk4NQ==", "fields": {"body": "better written like this:\nif (selected_language.code) {\n    return selected_language.code;\n} else {\n    return $location.search().lang || window.localStorage.getItem('lang');\n}", "diff": "@@ -1,6 +1,37 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+        setData: function (val) {\n+            angular.forEach(langs, function(v, k){\n+                if (v.code == val){\n+                    window.localStorage.setItem('lang', val);\n+                    selected_language = v;\n+                }\n+            });\n+        },\n+        getData: function () {\n+            if(selected_language.code)\n+                return selected_language.code;\n+            else return $location.search().lang || window.localStorage.getItem('lang');", "created_at": "2017-07-15T01:28:14Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTA2MQ==", "fields": {"body": "this } should have same indentation level with getAllLanguages:... doesn't it?", "diff": "@@ -1,6 +1,37 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+        setData: function (val) {\n+            angular.forEach(langs, function(v, k){\n+                if (v.code == val){\n+                    window.localStorage.setItem('lang', val);\n+                    selected_language = v;\n+                }\n+            });\n+        },\n+        getData: function () {\n+            if(selected_language.code)\n+                return selected_language.code;\n+            else return $location.search().lang || window.localStorage.getItem('lang');\n+        },\n+        getAllLanguages: function () {\n+            return langs;\n+            }", "created_at": "2017-07-15T14:08:34Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTEzNw==", "fields": {"body": "this should be new indent.\nreturn {\n    setData: function (val) {\n        angular.....\n        ....\n    }\n}", "diff": "@@ -1,6 +1,37 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+        setData: function (val) {", "created_at": "2017-07-15T14:12:32Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTI3OA==", "fields": {"body": "Same here...\nShould be\n$http.get('data/faq.json')\n    .then(function (res) {\n        ....", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {", "created_at": "2017-07-15T14:21:55Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTIxMA==", "fields": {"body": "better like this\n$http.get('data/projects.json')\n    .then(function (res) {\n        $scope.projectList = res.data;\n    });", "diff": "@@ -29,26 +68,69 @@\n         }\n     })\n \n-    app.directive('projects',  ['$http',  '$timeout', '$location', function ($http, $timeout, $location) {\n+    app.directive('projects',  ['$http',  '$timeout', '$location', 'Languages', function ($http, $timeout, $location, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/projects.html',\n-            controller: function ($scope, $location) {\n+            controller: function ($scope, $location, Languages) {\n                 self = this\n-                lang = $location.search().lang || window.localStorage.getItem('lang');\n-                $scope.projectList = projects\n+\n+                $scope.getDefaultProjectsMetadata = function () {\n+                    $http.get('data/projects.json')\n+                    .then(function (res) {\n+                        $scope.projectList = res.data;\n+                    })", "created_at": "2017-07-15T14:18:17Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQ5MQ==", "fields": {"body": "its ok to make it in single line\n$http.get('data/locale/' + $scope.lang + '/faq/' + faq.markdown).then(function (res) {", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {", "created_at": "2017-07-15T14:33:45Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQyNw==", "fields": {"body": "Here \ud83d\ude04\n$scope.$watch( function () {\n    return Languages.getData();\n}, function () {\n    $scope.setLanguage(Languages.getData());\n}, true);", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);", "created_at": "2017-07-15T14:29:19Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU0MA==", "fields": {"body": "this }) should have same indentation level with .then", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {\n+                                $scope.faqs[key].answer = res.data\n+                            }, function (error) {\n+                                $http.get($scope.faqs[key].url)\n+                                    .then(function (res) {\n+                                        $scope.faqs[key].answer = res.data;\n+                                })", "created_at": "2017-07-15T14:36:05Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU3MA==", "fields": {"body": "again \ud83d\ude04\n$http....\n    .then....", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {\n+                                $scope.faqs[key].answer = res.data\n+                            }, function (error) {\n+                                $http.get($scope.faqs[key].url)\n+                                    .then(function (res) {\n+                                        $scope.faqs[key].answer = res.data;\n+                                })\n+                            });\n+                        })\n+                    } else {\n+                        $scope.faqs.forEach(function (f, k) {\n+                            $http.get($scope.faqs[k].url)\n+                            .then(function (res) {\n+                                $scope.faqs[k].answer = res.data\n+                            });", "created_at": "2017-07-15T14:37:15Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU4OA==", "fields": {"body": "same as above ;)", "diff": "@@ -240,27 +343,36 @@\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/mentors.html',\n-            controller: function ($scope) {\n+            controller: function ($scope, $rootScope) {\n                 self = this\n                 self.mentorsList = {}\n                 self.adminsList = {}\n-                angular.forEach(projects, function(value, key){\n-                    angular.forEach(value.mentors, function(value, key){\n-                        self.mentorsList[value] =  {\n+\n+                $http.get('data/projects.json')\n+                .then(function (res) {", "created_at": "2017-07-15T14:38:14Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTUxNw==", "fields": {"body": "this }) should have same indentation level with .then", "diff": "@@ -182,46 +246,85 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                    .then(function (res) {\n+                        $scope.faqs = res.data;\n+                        $scope.generateMarkdown();\n+                    })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData(); }, function () {\n+                        $scope.setLanguage(Languages.getData());\n+                }, true);\n+\n+\n+                $scope.setLanguage = function (val) {\n+                    $scope.lang = val;\n+                    $scope.updateFAQ();\n+                }\n+\n+                $scope.updateFAQ = function () {\n+                    if ($scope.lang != 'en') {\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                        $http.get('data/locale/'+$scope.lang+'/faq.json').then(function (res) {\n+\n+                            $scope.faqs.map(function (faq) {\n+\n+                                if (res.data[faq.markdown]) {\n+                                    Object.keys(faq).map(function (key) {\n+                                        if (res.data[faq.markdown]) {\n+                                            faq['question'] = res.data[faq.markdown]\n+\n+                                        }\n+                                    });\n+                                }\n                             });\n \n+                            $scope.generateMarkdown();\n                         });\n-                    });\n-                } else {\n-                    Object.keys(faq).map(function (key) {\n-                        self.setFromDefault(key)\n-                    });\n+                    } else {\n+                        $scope.getDefaultFAQMetadata();\n+                    }\n+                }\n+\n+                $scope.generateMarkdown = function() {\n+\n+                    if ($scope.lang != 'en') {\n+\n+                        $scope.faqs.forEach(function (faq, key) {\n+                            $http.get('data/locale/' + $scope.lang + '/faq/' +\n+                                faq.markdown).then(function (res) {\n+                                $scope.faqs[key].answer = res.data\n+                            }, function (error) {\n+                                $http.get($scope.faqs[key].url)\n+                                    .then(function (res) {\n+                                        $scope.faqs[key].answer = res.data;\n+                                })", "created_at": "2017-07-15T14:35:02Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NTk4Mg==", "fields": {"body": "usually\n} else {", "diff": "@@ -1,6 +1,40 @@\n (function(){\n     var app = angular.module('coala', ['ngSanitize','btford.markdown', 'ngRoute']);\n \n+    app.factory('Languages', function () {\n+        var langs = [{\n+            'name' : 'English',\n+            'code' : 'en'\n+        },\n+        {\n+            'name' : 'Bahasa',\n+            'code' : 'id'\n+        }];\n+        var selected_language = langs[0];\n+\n+        return {\n+            setData: function (val) {\n+                angular.forEach(langs, function(v, k){\n+                    if (v.code == val){\n+                        window.localStorage.setItem('lang', val);\n+                        selected_language = v;\n+                    }\n+                });\n+            },\n+            getData: function () {\n+                if(selected_language.code) {\n+                    return selected_language.code;\n+                }\n+                else {", "created_at": "2017-07-16T00:37:32Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA3MQ==", "fields": {"body": "$scope.setLanguage should have same indentation level with that return ....", "diff": "@@ -29,26 +71,71 @@\n         }\n     })\n \n-    app.directive('projects',  ['$http',  '$timeout', '$location', function ($http, $timeout, $location) {\n+    app.directive('projects',  ['$http',  '$timeout', '$location', 'Languages', function ($http, $timeout, $location, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/projects.html',\n-            controller: function ($scope, $location) {\n+            controller: function ($scope, $location, Languages) {\n                 self = this\n-                lang = $location.search().lang || window.localStorage.getItem('lang');\n-                $scope.projectList = projects\n+\n+                $scope.getDefaultProjectsMetadata = function () {\n+                    $http.get('data/projects.json')\n+                        .then(function (res) {\n+                            $scope.projectList = res.data;\n+                        })\n+                }\n+\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultProjectsMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData();\n+                }, function () {\n+                        $scope.setLanguage(Languages.getData());", "created_at": "2017-07-16T00:46:01Z", "last_edited_at": "2017-07-16T03:16:34Z", "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA4MA==", "fields": {"body": "as above", "diff": "@@ -182,46 +251,83 @@\n         }\n     }]);\n \n-    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache) {\n+    app.directive('faq',[ '$http', '$templateCache', function ($http, $templateCache, Languages) {\n         return {\n             restrict: 'E',\n             templateUrl: '/partials/tabs/faq.html',\n-            controller: function () {\n-                self = this\n-                lang = window.localStorage.getItem('lang')\n-                self.faqs = faq\n-\n-                self.setFromDefault = function (key) {\n-                    $http.get('data/faq/' + faq[key]).then(function (res) {\n-                        faq[key] = res.data;\n-                    }, function() {\n-                        faq[key] = 'No content';\n-                    });\n+            controller: function ($scope, Languages) {\n+                $scope.lang = Languages.getData();\n+\n+                $scope.getDefaultFAQMetadata = function () {\n+                    $http.get('data/faq.json')\n+                        .then(function (res) {\n+                            $scope.faqs = res.data;\n+                            $scope.generateMarkdown();\n+                        })\n                 }\n \n-                if (lang) {\n-                    $http.get('data/locale/' + lang + '/faq.json').then(function (res) {\n-                        Object.keys(faq).map(function (title) {\n-                            if (res.data[faq[title]]) {\n-                                faq[res.data[faq[title]]] = faq[title];\n-                                delete faq[title];\n-                            }\n-                        });\n+                $scope.lang = Languages.getData();\n \n-                        Object.keys(faq).map(function (key) {\n-                            $http.get('data/locale/' + lang +'/faq/' + faq[key]).then(function (res) {\n-                                faq[key] = res.data;\n-                            }, function() {\n-                                self.setFromDefault(key)\n+                $scope.getDefaultFAQMetadata();\n+\n+                $scope.$watch( function () {\n+                    return Languages.getData();\n+                }, function () {\n+                        $scope.setLanguage(Languages.getData());", "created_at": "2017-07-16T00:46:48Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk5ODExMQ==", "fields": {"body": "or change the ng-init?", "diff": "@@ -45,19 +44,17 @@\n       </div>\n       <div ng-view=\"\"></div>\n     </div>\n+    <div ng-controller=\"LanguageController as langCtrl\" style=\"position: fixed; left: 60px; bottom: 20px;\">\n+    <select ng-init=\"language=langs[0]\" ng-options=\"l as l.name for l in langs\" ng-model=\"language\" ng-change=\"update()\">", "created_at": "2017-07-18T14:49:46Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNzc3OA==", "fields": {"body": "console.log?", "diff": "@@ -16,8 +48,32 @@\n             }).\n             otherwise({\n                 redirectTo: '/projects'\n-                    });\n-        }]);\n+            });\n+    }]);\n+\n+    app.controller('LanguageController', function ($scope, Languages) {\n+        $scope.langs = Languages.getAllLanguages();\n+        $scope.update = function () {\n+            Languages.setData($scope.language.code);\n+        }\n+        $scope.init_language = Languages.getLanguageObject();\n+        console.log('OBJECT')\n+        console.log($scope.init_language)", "created_at": "2017-07-18T15:20:12Z", "last_edited_at": null, "author": "Arsfiqball", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNTAwNg==", "fields": {"body": "*nodes", "diff": "@@ -0,0 +1,94 @@\n+\"\"\"\n+Handles the parsing and extraction of information from rST doc files.\n+\"\"\"\n+\n+import os\n+\n+import docutils\n+import docutils.nodes\n+import docutils.parsers.rst\n+\n+# This is the variable in which all of the documentation will be parsed and\n+# stored.\n+# Documentation of section x-y-z is stored in DATA['x-y-z']\n+DATA = {}\n+\n+\n+class IgnoredDirective(docutils.parsers.rst.Directive):\n+\n+    \"\"\"Stub for unknown directives.\"\"\"\n+\n+    has_content = True\n+\n+    def run(self):\n+        \"\"\"Do nothing.\"\"\"\n+        return []\n+\n+docutils.parsers.rst.directives.register_directive('seealso', IgnoredDirective)\n+docutils.parsers.rst.directives.register_directive('argparse', IgnoredDirective)\n+\n+class Extractor(docutils.nodes.SparseNodeVisitor):\n+    \"\"\"\n+    Node visitor to extract information from nodes.\n+    \"\"\"\n+\n+    def __init__(self, document, name=''):\n+        super().__init__(document)\n+        self.name = name\n+\n+    def visit_section(self, node):\n+        non_section_childs = list(filter(\n+            lambda x: type(x) != docutils.nodes.section, node.children\n+        ))\n+        handle_non_section_nodes(node, non_section_childs, self.name)\n+\n+def parse_rst(path):\n+    \"\"\"\n+    :param path: The path of the rst file.\n+    :return: The document object\n+    \"\"\"\n+    rst = open(path)\n+    default_settings = docutils.frontend.OptionParser(\n+        components=(docutils.parsers.rst.Parser, )\n+        ).get_default_values()\n+    document = docutils.utils.new_document(rst.name, default_settings)\n+    parser =  docutils.parsers.rst.Parser()\n+    parser.parse(rst.read(), document)\n+    rst.close()\n+    return document\n+\n+def handle_non_section_nodes(section_node, non_section_child_nodes, doc_name):\n+    \"\"\"\n+    All the ndoes that are not section nodes are parsed here.", "created_at": "2017-07-18T21:47:57Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNjg1Mw==", "fields": {"body": "Definitely documentation needed over here.", "diff": "@@ -0,0 +1,99 @@\n+from collections import OrderedDict, Counter\n+import logging\n+\n+from gensim.parsing.preprocessing import STOPWORDS\n+from gensim.utils import simple_preprocess\n+import networkx\n+import nltk\n+import spacy\n+\n+from answers.extraction import DATA, parse_docs\n+\n+parse_docs()\n+\n+nlp = spacy.load('en_core_web_md')\n+\n+def grapheize(graph, doc, attrs={}):\n+    \"\"\"\n+    Create a graph from given piece of text. Nodes are formed from lemmatized\n+    tokens. Edges are created between a lemmatized token and lemma of head of\n+    the token.\n+    \"\"\"\n+    unallowed_tags = [\n+        'EX', 'HVS', 'MD', 'PDT',\n+        'IN', 'DT', 'TO', 'CD',\n+        'CC', '-LRB-', 'HYPH', ':'\n+    ]\n+    for token in doc:\n+        if (token.tag_ in unallowed_tags) or (token == token.head):\n+            continue\n+        nodes = [token.lemma_, token.head.lemma_]\n+        for node in nodes:\n+            if node not in graph:\n+                graph.add_node(node, token=token)\n+            node = graph.node.get(node)\n+            for key, value in attrs.items():\n+                node.setdefault(key, []).append(value)\n+        graph.add_edge(*nodes)\n+\n+def get_answer(question, graph, final=False):", "created_at": "2017-07-18T21:57:27Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYyMw==", "fields": {"body": "vendore ?", "diff": "@@ -1,27 +1,27 @@\n [global]\n bears = coalaBear\n files = **.yml, **.html, **.md, **.js, **.css, **.json\n-ignore = vendors/**, _site/**\n+ignore = resources/vendors/**, _site/**\n \n [linecount]\n files = **.yml, **.html, **.md, **.js\n bears = LineCountBear\n-ignore = vendors/**, data/projects.js, _site/**\n+ignore = resources/vendors/**, data/projects.js, _site/**\n max_lines_per_file = 500\n \n [filenames]\n bears = FilenameBear\n files = **.yml, **.html, **.md, **.js, **.css\n-ignore = vendors/**, _projects/integrate-pyflakes-AST.md, _site/**\n+ignore = resources/vendors/**, _projects/integrate-pyflakes-AST.md, _site/**\n \n [spacing]\n bears = SpaceConsistencyBear\n files = **.html, **.css, **.js, **.json\n-ignore = vendors/**, _site/**\n+ignore = resources/vendors/**, _site/**\n use_spaces = True\n \n [html]\n bears = HTMLLintBear\n files = **.html\n htmllint_ignore = optional_tag, protocol, indentation,  concerns_separation, capitalization\n-ignore = vendore/**, _site/**\n+ignore = resources/vendore/**, _site/**", "created_at": "2017-07-22T13:08:20Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYzMg==", "fields": {"body": "This change should be in the other commit, right? c579dc9", "diff": "@@ -51,7 +51,7 @@\n   </main>\n   <footer class=\"page-footer footer-light transparent\">\n     <div class=\"row\">\n-      <div class=\"col m6 offset-m3 center\"> <img class=\"footer-logo\" src=\"https://api.coala.io/en/latest/_static/images/coala_logo.svg\"> <span class=\"footer-title\">{{ site.organization }}</span> </div>\n+      <div class=\"col m6 offset-m3 center\"> <img class=\"footer-logo\" src=\"https://api.coala.io/en/latest/_static/images/coala_logo.svg\" alt=\"coala\"> <span class=\"footer-title\">{{ site.organization }}</span> </div>", "created_at": "2017-07-22T13:09:19Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQ5MTU2OQ==", "fields": {"body": "I find unindented multi line strings disrupt the flow when reading a function/file. You could use dedent to have the literal be properly indented and still not have the indentation in the actual string.\nHowever then you'll probably run into the line length limit.... Hmm.... maybe make the pitchfork a bit shorter? I did notice that on mobile I just saw the stick:", "diff": "@@ -0,0 +1,35 @@\n+import re\n+import string\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Pitchfork(BotPlugin):\n+    \"\"\"\n+    To pitchfork users down to ...\n+    \"\"\"\n+\n+    @botcmd\n+    def pitchfork(self, msg, arg):\n+        \"\"\"\n+        To pitchfork user down to ...\n+        \"\"\"\n+        match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n+                         arg)\n+        if match:\n+            user = match.group(1)\n+            place = match.group(2) if match.group(2) else 'offtopic'\n+            return (\n+                string.Template(\"\"\"", "created_at": "2017-07-26T06:40:46Z", "last_edited_at": null, "author": "NiklasMM", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw==", "fields": {"body": "Any reasons for migrating to materializecss? Please mention that in the commit message.", "diff": "@@ -11,15 +11,15 @@\n     <link rel=\"stylesheet\"\n           href=\"https://fonts.googleapis.com/css?family=Roboto:100,200,300,400,500,600,800,900\">\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n-    <link rel=\"stylesheet\"\n           href=\"bower_components/google-code-prettify/src/prettify.css\">\n-    <!-- Bootstrap Material Design -->\n     <link rel=\"stylesheet\"\n-          href=\"bower_components/bootstrap-material-design/dist/css/bootstrap-material-design.css\">\n+          href=\"bower_components/materialize/dist/css/materialize.min.css\">", "created_at": "2017-07-29T16:25:25Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTU0OA==", "fields": {"body": "\"You were a newcomer before, we'd like to know...\"", "diff": "@@ -30,7 +30,9 @@ class LabHub(BotPlugin):\n                      'also be there for you at all times to help you with '\n                      'actual problems. :)',\n         'developers': ' Wow @{}, you are a part of developers team now! :tada: '\n-                      'Welcome to ourcommunity!',\n+                      'Welcome to ourcommunity! You just passed the newcomers '\n+                      'phase, we\\'d like to know what could\\'ve been better, '", "created_at": "2017-08-06T10:27:36Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTUwNA==", "fields": {"body": "if its oftopic, we could make it a markdown link? that links to the offtopic channel", "diff": "@@ -0,0 +1,36 @@\n+import re\n+import string\n+import textwrap\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Pitchfork(BotPlugin):\n+    \"\"\"\n+    To pitchfork users down to ...\n+    \"\"\"\n+\n+    @botcmd\n+    def pitchfork(self, msg, arg):\n+        \"\"\"\n+        To pitchfork user down to ...\n+        \"\"\"\n+        match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n+                         arg)\n+        if match:\n+            user = match.group(1)\n+            place = match.group(2) if match.group(2) else 'offtopic'\n+            return textwrap.dedent((\n+                string.Template(\"\"\"\n+                    @$user, you are being pitchforked down to $place", "created_at": "2017-08-06T10:25:10Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY2OA==", "fields": {"body": "just helloworld? If we support \"Hello World\", better to mention that", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.", "created_at": "2017-08-13T10:43:37Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY5Mw==", "fields": {"body": "You may want to mention the user part explicitly", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.\n+2. Want to work on an issue, first assign yourself:\n+   ``corobo assign <issue-link>``\n+3. Assigned issue is time-consuming, no longer interesting? Wanna discontinue:\n+   ``corobo unassign <issue-link>``\n+4. Wanna file a new issue, but don't want to leave gitter?:\n+   ``corobo new issue <repo> <title>\\n[description\\n]+``\n+5. PR is up, waiting for a review. Consider reviewing other PRs while you wait\n+   for review of your PR. If the PR needs more work, mark it\n+   work-in-progress(wip):\n+   ``corobo mark wip <pr-link>``\n+6. Your PR was marked WIP, you did the changes and want it be reviewed again?\n+   Add ``pending_review`` label:\n+   ``corobo mark pending <pr-link>``\n+\n+coala utilities\n+---------------\n+\n+1. Wanna know stats regarding coala?:\n+\n+   a. Get user contribution stats using:\n+      ``corobo contrib stats meetmangukiya``", "created_at": "2017-08-13T10:44:41Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcwOA==", "fields": {"body": "This whole paragraph could be confusing for newcomers. Just mention about marking a PR as wip", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.\n+2. Want to work on an issue, first assign yourself:\n+   ``corobo assign <issue-link>``\n+3. Assigned issue is time-consuming, no longer interesting? Wanna discontinue:\n+   ``corobo unassign <issue-link>``\n+4. Wanna file a new issue, but don't want to leave gitter?:\n+   ``corobo new issue <repo> <title>\\n[description\\n]+``\n+5. PR is up, waiting for a review. Consider reviewing other PRs while you wait\n+   for review of your PR. If the PR needs more work, mark it\n+   work-in-progress(wip):", "created_at": "2017-08-13T10:45:47Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcyOQ==", "fields": {"body": "knowledge engine?", "diff": "@@ -0,0 +1,68 @@\n+Using corobo\n+============\n+\n+GitHub/GitLab utilities\n+-----------------------\n+\n+1. Getting invitation to the org:\n+   Send ``helloworld`` in the chat room.\n+2. Want to work on an issue, first assign yourself:\n+   ``corobo assign <issue-link>``\n+3. Assigned issue is time-consuming, no longer interesting? Wanna discontinue:\n+   ``corobo unassign <issue-link>``\n+4. Wanna file a new issue, but don't want to leave gitter?:\n+   ``corobo new issue <repo> <title>\\n[description\\n]+``\n+5. PR is up, waiting for a review. Consider reviewing other PRs while you wait\n+   for review of your PR. If the PR needs more work, mark it\n+   work-in-progress(wip):\n+   ``corobo mark wip <pr-link>``\n+6. Your PR was marked WIP, you did the changes and want it be reviewed again?\n+   Add ``pending_review`` label:\n+   ``corobo mark pending <pr-link>``\n+\n+coala utilities\n+---------------\n+\n+1. Wanna know stats regarding coala?:\n+\n+   a. Get user contribution stats using:\n+      ``corobo contrib stats meetmangukiya``\n+   b. Bear stats(all languages):\n+      ``corobo bear stats``\n+   c. Bear stats(particular languages):\n+      ``corobo bear stats python ruby go``\n+   d. Language stats:\n+      ``corobo lang stats``\n+   e. stats(both bear and lang stats(for summary stats)):\n+      ``corobo stats``\n+2. List bears of particular languages:\n+   ``corobo ls bears python python3 ...``\n+3. Run coala from chat itself!\n+   .. codeblock::\n+      corobo run Bear1 setting1=1 setting2=2 Bear2\n+      ```\n+      import this\n+      this = 3\n+      some = 'code'\n+      ```\n+\n+Answer\n+------\n+\n+You have got a question, no one's available to answer. Let bot try to answer it\n+for you:\n+``corobo answer your question string goes here``\n+\n+Misc.\n+-----\n+\n+1. Someone is asking a googlable question? Respond with a lmgtfy:\n+   ``corobo lmgtfy this is the search string``\n+2. Get bot to apologize:\n+   ``corobo nm``\n+3. Explain pre-defined terms:\n+   ``corobo explain rebase``\n+4. Is your PR ready to merge, go shipit!\n+   ``corobo ship it``\n+5. Ask a question to knowledge engine:", "created_at": "2017-08-13T10:46:48Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY4NzY5Nw==", "fields": {"body": "The docstring of this function contains that, which is also appended to this", "diff": "@@ -163,7 +165,9 @@ def position(stl, stc, enl, enc):\n                                                               enl, enc)\n \n     # Ignore PycodestyleBear, LineLengthBear\n-    @re_botcmd(pattern=r'^run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```$')\n+    @re_botcmd(pattern=r'^run\\s+(\\w+)((?:\\s+\\w+(?:\\s+\\w+=\\w+)*)+)\\n+```\\n([\\s\\S]+)\\n```$',\n+               re_cmd_name_help='run <Bear [[setting=value]+]>+\\n'\n+                                '```\\n<code>+\\n```')", "created_at": "2017-08-17T11:32:53Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzc4MQ==", "fields": {"body": "Same, see above comment", "diff": "@@ -0,0 +1,228 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/ProjectReport/HemangKumar\n+student: Hemang Kumar\n+organisation: coala\n+organisation_link : https://coala.io", "created_at": "2017-08-26T12:05:35Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzk4Mg==", "fields": {"body": "Yeah I think its better to have it configurable. Making it a default will require adding it in markup in _layout/reports.md file as I understand. But it'll be good to have just one configuration file (that is this file) and only file governing the layout  (_layouts/report.md , which just has the design and no config defaults)", "diff": "@@ -0,0 +1,228 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/ProjectReport/HemangKumar\n+student: Hemang Kumar\n+organisation: coala", "created_at": "2017-08-26T12:23:41Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4NzkyOA==", "fields": {"body": "Yeah thats the reason, no filter by author in GitLab", "diff": "@@ -0,0 +1,228 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/ProjectReport/HemangKumar\n+student: Hemang Kumar\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve coala Website & Supporting Tools\n+project_link: https://summerofcode.withgoogle.com/projects/#6012382913495040\n+tarball: https://github.com/hemangsk/GSoCReport/raw/master/hemangsk_coala.tar\n+mentors: >\n+ [Lasse Schuirmann](https://github.com/sils) & [Fabian Neuschmidt](https://github.com/fneu)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC-2017/milestones/3\n+ - Phase 1 : https://gitlab.com/coala/GSoC-2017/milestones/7\n+ - Phase 2 : https://gitlab.com/coala/GSoC-2017/milestones/8\n+ - Phase 3 : https://gitlab.com/coala/GSoC-2017/milestones/9\n+bio: >\n+ I'm a final year student of Computer Science & Engineering at University School of Information,\n+ Communication & Technology, GGS IP University. I participated in GSoC and worked with [coala](https://coala.io) to facilitate users to use coala online and functionality for one click Git Repository linting. I also worked on a bot to generate coafile, worked on improving UI of coala-html and configurability of coala-projects. I also worked on adding Notification and Thread support in the IGitt library.  \n+social:\n+ - GitHub:\n+   - username: hemangsk\n+   - link: https://github.com/hemangsk\n+ - GitLab:\n+   - username: hemangsk\n+   - link: https://gitlab.com/hemangsk\n+ - Gitter:\n+   - username: hemangsk\n+   - link: https://gitter.im/hemangsk\n+ - HackerRank:\n+   - username: hemangsk\n+   - link: https://hackerrank/hemang\n+email: hemangsk@gmail.com\n+blog: http://hemangsk.github.io/stories.html\n+activity:\n+ - 0:\n+   - repo: coala-quickstart \n+   - link: https://github.com/coala/coala-quickstart/commits/master?author=hemangsk\n+   - details: > \n+      Add --allow-incomplete-sections mode and bump coala version.\n+ - 1:\n+   - repo: coalaCSS\n+   - link: https://github.com/coala/coalaCSS/commits/master?author=hemangsk\n+   - details: >\n+      Create a CSS library to have consistency throughout coala web projects.\n+ - 2:\n+   - repo: coala Projects\n+   - link: https://github.com/coala/projects/commits/master?author=hemangsk\n+   - details: > \n+       Commits **f26ae52** through **6497def** were part of GSoC.\n+ - 3:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/718603aa2294a55206cfaa8806aa624791757ec4\n+   - details: Add put method\n+ - 4:\n+   - repo: IGitt", "created_at": "2017-08-26T12:19:31Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQ0Nw==", "fields": {"body": "Same here as Add action: is interpreted as a key by jekyll.", "diff": "@@ -0,0 +1,135 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/StatusReport/AlexMaxim\n+student: Alexandru-Sorin Maxim\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve the coala CLI\n+project_link: https://summerofcode.withgoogle.com/projects/#4940869170888704\n+tarball:\n+mentors: >\n+ [Adrian Zatreanu](https://github.com/Adrianzatreanu) & [Muhammad Kaisar Arkhan](https://github.com/yukiisbored)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC-2017/milestones/16\n+ - Phase 1 : https://gitlab.com/coala/GSoC-2017/milestones/17\n+ - Phase 2 : https://gitlab.com/coala/GSoC-2017/milestones/18\n+ - Phase 3 : https://gitlab.com/coala/GSoC-2017/milestones/19\n+bio: >\n+ I'm a 3rd year student of Computer Science & Engineering at Politehnica University of Bucharest. I participated in GSoC and worked with [coala](https://coala.io) to improve coala CLI experience. Most of the people who use a CLI program do not read the whole output, only a small part of it. Also, a large output from a command could tire them and could make them stop using our application. Remove the redundant information, keeping only the necessary information.  \n+social:\n+ - GitHub:\n+   - username: Nosferatul\n+   - link: https://github.com/Nosferatul\n+ - GitLab:\n+   - username: Nosferatul\n+   - link: https://gitlab.com/Nosferatul\n+ - Gitter:\n+   - username: Nosferatul\n+   - link: https://gitter.im/Nosferatul\n+email: alexandrus.maxim@gmail.com\n+blog: https://gsocsite.wordpress.com/category/gsoc/\n+activity:\n+ - 0:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4369/commits/d75d10ab7bb9be4abe7d14f201afc748fb1b96d6\n+   - details: >\n+      Change output for user.\n+ - 1:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4370/commits/3e590f5e34f019103f98f0ea9b32c94d01e05472\n+   - details: >\n+      Change the coafile warning/output.\n+ - 2:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/2f0f3116aea7e2933322d4cc2a44a9fef61981a4\n+   - details: >\n+       Change the actions name.\n+ - 3:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/8a25983187966a60a810756c200ece1d9bb59607\n+   - details: Change the input: Numbers to letters\n+ - 4:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4420/commits/0eb0be9e7bf4765dd829d0aeb5a6918fb00d05e1\n+   - details: Fix the ouput\n+ - 5:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4429/commits/45a7369dfcc7af78c0844f0203a1deb1a17a3c75\n+   - details: Add Chain Action\n+ - 6:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4462/commits/65feb308706c77ca5aac10123f757600cc639c1a\n+   - details: Add apply-single-action\n+ - 7:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4481/commits/149d59d28318954d4035c7e8f639cc344af061c0\n+   - details: Add Show Applied Action\n+ - 8:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4603/commits/0911078532a49c42afb06effec750be24a7b4139\n+   - details: Make Chain Action default\n+ - 9:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4626/commits/360a6245d88260631c8a9019de026e835e43df3d\n+   - details: Add line number for the diff ouput\n+ - 10:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4626/commits/2bd16a5d44d93edc211da3faf4cb17e93296cd70\n+   - details: Change Severity line from the ouput\n+ - 11:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4627/commits/377585d14cac6522546c9dc0a94f2890304eb7a5\n+   - details: Add line number inside \u201c[ ]\u201d in diffs\n+ - 12:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4627/commits/d03303c00d5e6afa543cb173288b3908a8945428\n+   - details: Fix color from the ouput\n+ - 13:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4629/commits/a6c376f054da150e2d29a90997a03ddd3ec7dba0\n+   - details: Add Do (N)othing action\n+ - 14:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4638/commits/f43bd5e7cb908c5d3a7b384924bc5f282a2e625a\n+   - details: Fix --no-color flag\n+ - 15:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4634/commits/25e019cdd944532f969d5cf1079afd7d62f41e19\n+   - details: Add Action: Generate Patches", "created_at": "2017-08-27T20:25:20Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQyOQ==", "fields": {"body": "Minor change, this throws an error because it interprets \"Change the input\" as a key because of the \":\" after it.\n\ndetails : Change the input numbers to letters\nor\ndetails: Change the input from numbers to letters will work perfect", "diff": "@@ -0,0 +1,135 @@\n+---\n+layout: report\n+permalink: /GSoC/2017/StatusReport/AlexMaxim\n+student: Alexandru-Sorin Maxim\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve the coala CLI\n+project_link: https://summerofcode.withgoogle.com/projects/#4940869170888704\n+tarball:\n+mentors: >\n+ [Adrian Zatreanu](https://github.com/Adrianzatreanu) & [Muhammad Kaisar Arkhan](https://github.com/yukiisbored)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC-2017/milestones/16\n+ - Phase 1 : https://gitlab.com/coala/GSoC-2017/milestones/17\n+ - Phase 2 : https://gitlab.com/coala/GSoC-2017/milestones/18\n+ - Phase 3 : https://gitlab.com/coala/GSoC-2017/milestones/19\n+bio: >\n+ I'm a 3rd year student of Computer Science & Engineering at Politehnica University of Bucharest. I participated in GSoC and worked with [coala](https://coala.io) to improve coala CLI experience. Most of the people who use a CLI program do not read the whole output, only a small part of it. Also, a large output from a command could tire them and could make them stop using our application. Remove the redundant information, keeping only the necessary information.  \n+social:\n+ - GitHub:\n+   - username: Nosferatul\n+   - link: https://github.com/Nosferatul\n+ - GitLab:\n+   - username: Nosferatul\n+   - link: https://gitlab.com/Nosferatul\n+ - Gitter:\n+   - username: Nosferatul\n+   - link: https://gitter.im/Nosferatul\n+email: alexandrus.maxim@gmail.com\n+blog: https://gsocsite.wordpress.com/category/gsoc/\n+activity:\n+ - 0:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4369/commits/d75d10ab7bb9be4abe7d14f201afc748fb1b96d6\n+   - details: >\n+      Change output for user.\n+ - 1:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4370/commits/3e590f5e34f019103f98f0ea9b32c94d01e05472\n+   - details: >\n+      Change the coafile warning/output.\n+ - 2:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/2f0f3116aea7e2933322d4cc2a44a9fef61981a4\n+   - details: >\n+       Change the actions name.\n+ - 3:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/pull/4390/commits/8a25983187966a60a810756c200ece1d9bb59607\n+   - details: Change the input: Numbers to letters", "created_at": "2017-08-27T20:24:53Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQwODcyMw==", "fields": {"body": "um you can put {{ }} to escape them, but this is fine, I guess", "diff": "@@ -0,0 +1,39 @@\n+import re\n+import string\n+import textwrap\n+\n+from errbot import BotPlugin, botcmd\n+\n+\n+class Pitchfork(BotPlugin):\n+    \"\"\"\n+    To pitchfork users down to ...\n+    \"\"\"\n+\n+    @botcmd\n+    def pitchfork(self, msg, arg):\n+        \"\"\"\n+        To pitchfork user down to ...\n+        \"\"\"\n+        match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n+                         arg)\n+        if match:\n+            user = match.group(1)\n+            place = match.group(2) if match.group(2) else 'offtopic'\n+            return textwrap.dedent((\n+                string.Template(\"\"\"\n+                    @$user, you are being pitchforked down to $place", "created_at": "2017-08-31T18:11:12Z", "last_edited_at": null, "author": "SanketDG", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODExMg==", "fields": {"body": "platforms since it's in plural context", "diff": "@@ -4,6 +4,31 @@\n [![Codecov branch](https://img.shields.io/codecov/c/github/coala/corobo/master.svg)](https://codecov.io/gh/coala/corobo)\n [![Semaphore branch](https://semaphoreci.com/api/v1/coala/corobo/branches/master/badge.svg)](https://semaphoreci.com/coala/corobo)\n [![Gitter Room](https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg)](https://gitter.im/coala/corobo)\n+\n+## About\n+\n+`corobo` is a Python based chatbot that could be connected to many messaging\n+platform including Slack, HipChat, Telegram, IRC, XMPP, Tox, Campfire, Gitter,", "created_at": "2017-09-16T14:44:30Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODIyNQ==", "fields": {"body": "...These command routines", "diff": "@@ -4,6 +4,31 @@\n [![Codecov branch](https://img.shields.io/codecov/c/github/coala/corobo/master.svg)](https://codecov.io/gh/coala/corobo)\n [![Semaphore branch](https://semaphoreci.com/api/v1/coala/corobo/branches/master/badge.svg)](https://semaphoreci.com/coala/corobo)\n [![Gitter Room](https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg)](https://gitter.im/coala/corobo)\n+\n+## About\n+\n+`corobo` is a Python based chatbot that could be connected to many messaging\n+platform including Slack, HipChat, Telegram, IRC, XMPP, Tox, Campfire, Gitter,\n+Skype. Check all the backends available\n+[here](http://errbot.io/en/latest/features.html#multiple-server-backends)\n+\n+This repository is mainly a collection of plugins that are written for\n+[errbot](http://errbot.io). Errbot is a Python based chatbot framework.\n+\n+As described on Errbot website:\n+> Errbot is a chatbot, a daemon that connects to your favorite chat service\n+  and brings your tools into the conversation.\n+\n+It handles sending messages to correct rooms/person, receiving messages,\n+calling your command routines on matching commands, etc. This command routines", "created_at": "2017-09-16T14:51:05Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDAyMzk4Mg==", "fields": {"body": "Actually I just need to add a linebreak (\\n) to each elements, since LocalBearTestHelper.get_results uses prepare_file to add the linebreaks to the lines before inputting it to bear.execute.\nIf I just use short_url_redirect directly as an argument for instancing Diff(), it will raise AssertionError, since the bear is actually processing the lines with the linebreaks added", "diff": "@@ -253,6 +255,11 @@ def test_redirect_threshold(self):\n             self.check_validity(self.uut, long_url_redirect,\n                                 settings={'follow_redirects': 'true'})\n \n+            with prepare_file(short_url_redirect, None) as (lines, _):", "created_at": "2018-07-04T06:57:09Z", "last_edited_at": "2018-07-04T07:19:24Z", "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI3MDUzMQ==", "fields": {"body": "There's Promise.resolve()\nBut returning whatever directly also wraps it  into promise because it's inside an async function.", "diff": "@@ -199,7 +199,30 @@ const issueStore = new class IssueStore extends EventEmitter {\n     }\n     let fetchPromise;\n     if (Client.canCacheLots()) {\n-      fetchPromise = Client.getOcto().repos(repoOwner, repoName).issues.fetchAll(opts);\n+      if (Client.useGraphQL()) {\n+        const [issues, pullRequests] = await Promise.all([\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .issues({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 100}),\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .pullRequests({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 30})\n+        ]);\n+        let result = [];\n+        if (issues) {\n+          result = result.concat(issues);\n+        }\n+        if (pullRequests) {\n+          result = result.concat(pullRequests);\n+        }\n+        fetchPromise = new Promise(resolve => resolve(", "created_at": "2018-07-05T08:30:36Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTE3NA==", "fields": {"body": "possibly deferred to a separate followup issue after this is merged ...\nWhat about adding a query parameter to force either GraphQL or standard API ?\nAnd (if still feasible) possibly add a env var which does the same for the pre-fetch and/or developer's local server?", "diff": "@@ -191,6 +193,17 @@ class Client extends EventEmitter {\n     let {token, password} = this.getCredentials();\n     return !!token || !!password;\n   }\n+  useGraphQL() {\n+    // use GraphQL when applicable, provided `hasCredentials()` is true\n+    // developers need to change the behaviour here in case they", "created_at": "2018-07-06T05:54:01Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTkwOQ==", "fields": {"body": "trailing comma ?\nI'll stop with the trailing comma here, in case you or @blazeu believe they are not appropriate in these contexts.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'", "created_at": "2018-07-06T05:59:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjI4Ng==", "fields": {"body": "ideally this coala specific config is not in this library, but is provided by separate configuration.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';", "created_at": "2018-07-06T06:02:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjQ0Ng==", "fields": {"body": "this is my python brain kicking in ....\nthe || .. here should be indented more so that it doesnt align with the console.log(..) on the next line.", "diff": "@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {", "created_at": "2018-07-06T06:03:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDY2OTI2Nw==", "fields": {"body": "omg .. of course that is ugly.  The purpose of dedent is to .. dedent ... it allows the string to be indented so that it follows python indentation style.\nfwiw, repr would be completely wrong, replacing the desired newline with literal \\ and n.\ntestbot_public.assertCommand(\n    textwrap.dedent('''\\\n        !new issue repository this is the title\n        first line of body\n        second line of body'\n    '''),\n    'Here you go')\nThe use of the \\ can be removed by creating wrapper as requested, such as assertMultilineCommand, because then the wrapper can do the following to remove the leading blank line\n'\\n'.join(textwrap.dedent(command).splitlines()[1:])\nAnd that can be improved to only remove the first line if it is blank.", "diff": "@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',", "created_at": "2018-07-06T14:24:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTg3NQ==", "fields": {"body": "dont use trailing \\.  especially when they are unnecessary.\nand move the !new .. string to the next line so it follows python indentation style, and split the string across multiple lines whenever there is a \\n.", "diff": "@@ -171,6 +188,14 @@ def test_create_issue_cmd(self):\n \n         testbot_public.assertCommand('!new issue coala title', 'repository that does not exist')\n \n+        # not a member of org\n+        self.mock_team.is_member.return_value = False\n+        labhub.REPOS = {'repository': self.mock_repo,\n+                        'repository.github.io': self.mock_repo}\n+        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+                                     'You need to be a member of this organization ' \\", "created_at": "2018-07-07T02:15:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkxMQ==", "fields": {"body": "never remove test logic without doing a git blame\nbfb1f9b\nIf this functionality needs to be removed to make progress, it needs to be done as a separate commit, with a separate issue, explaining the justification for the intentional regression.", "diff": "@@ -280,12 +321,6 @@ def test_assign_cmd(self):\n                               'not eligible to be assigned to this issue')\n         testbot.pop_message()\n \n-        # no assignee, newcomer, difficulty medium\n-        labhub.GH_ORG_NAME = 'not-coala'", "created_at": "2018-07-07T02:17:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkzMg==", "fields": {"body": "put this in setUp and then re-use it for each test method", "diff": "@@ -132,6 +141,12 @@ def test_create_issue_cmd(self):\n         plugins.labhub.GitHubToken = create_autospec(IGitt.GitHub.GitHubToken)\n         plugins.labhub.GitLabPrivateToken = create_autospec(IGitt.GitLab.GitLabPrivateToken)\n \n+        teams = {", "created_at": "2018-07-07T02:19:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDAyNg==", "fields": {"body": "yes, to forcefully include it despite other rules which ignore it.", "diff": "@@ -7,5 +7,6 @@\n *.patch\n *.orig\n *.diff\n+!*/src/lib/columns.js", "created_at": "2018-07-07T11:35:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3NzE3NQ==", "fields": {"body": "No. It installs the pre-release in pypi, from January 2018.\nWe still are not ready to do pre-releases yet, with coala-utils and dependency-management still needing more work and need to be released first.", "diff": "@@ -109,12 +110,8 @@ script:\n   - py.test\n   - python setup.py bdist_wheel\n   - pip install ./dist/coala-*.whl\n-  - pip install coala-bears[alldeps] --pre -U\n-  # https://github.com/coala/coala-bears/issues/1037\n-  - >\n-    if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-      sed -i.bak '/bears = GitCommitBear/d' .coafile\n-    fi\n+  - curl -fsSL -o coala-bears.zip $BEARS_ZIP_URL/master\n+  - pip install coala-bears.zip[alldeps] --pre -U", "created_at": "2018-07-09T17:02:54Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA==", "fields": {"body": "Why not just 'coala' like: a bear is a set of rules used by coala or a bear is a routine used by coala to check ...", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:34:38Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw==", "fields": {"body": "@sangamcse would 'libraries' be a better replacement for 'packages' ?", "diff": "@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for", "created_at": "2018-07-10T07:09:08Z", "last_edited_at": null, "author": "sarthakchakerverty", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM4OTIxOQ==", "fields": {"body": "https://gitter.im/coala/coala-bears?at=5b44c27a3c5abf52b64b54b8 will solve this problem", "diff": "@@ -1,20 +1,35 @@\n-services: docker\n+dist: \"trusty\"\n+sudo: required\n+\n+matrix:\n+  include:\n+    - language: python", "created_at": "2018-07-10T15:30:17Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM5MjgzNQ==", "fields": {"body": "gitmate went nuts on #593 , so we may need to wait a bit.", "diff": "@@ -1,20 +1,35 @@\n-services: docker\n+dist: \"trusty\"\n+sudo: required\n+\n+matrix:\n+  include:\n+    - language: python", "created_at": "2018-07-10T15:40:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ==", "fields": {"body": "line_length is not used\nThis example doesn't round up so nicely, SpaceConsistencyBear is similar, and what's especially weird is that you lint on message, not on file ;) Please provide a better example \ud83d\udc4d", "diff": "@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the\n+passed message contains character more than 79.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class CharCheckBear(LocalBear):\n+        def run(self, filename, file, message: str, line_length: int = 79):\n+            \"\"\"\n+            Detect if a passed string contain characters more than 79.\n+\n+            :param message:\n+                enter the message.\n+            \"\"\"\n+            if len(message)<=79:\n+                yield self.new_result(message=message, file=filename)\n+            else:\n+                yield self.new_result(message='message contains character '\n+                                              'more than 79', file=filename)", "created_at": "2018-07-10T20:04:49Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ==", "fields": {"body": "for your code sounds redundant, but I think it is acceptable.", "diff": "@@ -55,6 +55,16 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by coala to check your code\n+for lint issues. A group of these routines(bears) is used for defining\n+certain quality requirements in various languages. A bear can analyse code\n+for potential problems, calculate metrics and even provide corrections for\n+your code. While many of these bears for various languages are shipped along", "created_at": "2018-07-11T20:21:42Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjAzNjY4Mw==", "fields": {"body": "padding: 0", "diff": "@@ -0,0 +1,92 @@\n+.review {\n+  cursor: default;\n+  padding-top: 0;\n+  padding-right: 0;\n+  padding-bottom: 0;\n+  padding-left: 0;", "created_at": "2018-07-12T13:37:29Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5MjIyMg==", "fields": {"body": "@kriti21 , it would be helpful to indicate what features of IGitt would be useful for the VCS bears .\nOne helpful enhancement is https://gitlab.com/gitmate/open-source/IGitt/issues/111 , or similar, to convert a VCS remote string (e.g. git@github.com/...) to an object which includes identifying the hoster from the domain name in the VCS.", "diff": "@@ -0,0 +1,58 @@\n+---\n+name: \"IGitt SCM support\"\n+desc: \"Add support for git hosters in IGitt and convert coala VCS bears to\n+       use IGitt\"\n+requirements:\n+  - \"An enhancement to the coala VCS bears\"\n+  - \"An enhancement to IGitt\"\n+initiatives:\n+  - GSoC\n+collaborating_projects:\n+  - \"coala\"\n+  - \"IGitt\"\n+---\n+\n+[IGitt](https://gitlab.com/gitmate/open-source/IGitt) is a simple library\n+that allows you to access various git hosting services like GitHub, GitLab\n+and so on via one unified python interface.\n+\n+The coala bears project provides support for git and mercurial VCS but it\n+does not use IGitt. With this project, VCS in coala-bears should be\n+simplified using IGitt.\n+\n+However, there are some git hosters that are not yet supported by IGitt.\n+One such hoster is BitBucket. So it is necessary to add BitBucket support to\n+IGitt before using it to convert the VCS bears in coala-bears.\n+\n+Other git hosters like Gerrit and Phabricator are important for IGitt adoption \n+into large OSS organizations. So are some other non-git SCM, such as Fossil\n+and Launchpad. \n+\n+Support for all these git hosters should be added to IGitt.\n+\n+A recommended preparation task in addition to already mentioned requirements\n+for this project is to make an enhancement to https://github.com/guyzmo/git-repo\n+\n+#### Milestones\n+\n+##### GSOC 2018 COMMUNITY/BONDING\n+\n+* Create a cEP describing the details of how support for additional git\n+  hosters will be added to IGitt.\n+* Understand how bears for VCS are implemented in coala bears and describe\n+  details of how IGitt will be used to improve them.\n+* The participant has a merged enhancement to IGitt.\n+* The participant has completed the newcomer process.\n+\n+##### CODING PHASE 1\n+\n+* Add BitBucket (git & mecurial) support to IGitt.", "created_at": "2018-07-16T19:13:03Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5OTQzNQ==", "fields": {"body": "useless trailing comma.", "diff": "@@ -0,0 +1,41 @@\n+from errbot.backends.test import FullStackTest\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n+\n+import logging\n+\n+\n+class CoroboTestCase(FullStackTest):\n+\n+    def setUp(self,\n+              extra_plugin_dir=None,\n+              extra_test_file=None,\n+              loglevel=logging.DEBUG,\n+              extra_config=None,\n+              plug_filename=None,):", "created_at": "2018-07-16T19:38:21Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgwMTI0OQ==", "fields": {"body": "I think you can remove all these args.\nThey are not being used, and unittest and pytest do not use them.", "diff": "@@ -0,0 +1,41 @@\n+from errbot.backends.test import FullStackTest\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n+\n+import logging\n+\n+\n+class CoroboTestCase(FullStackTest):\n+\n+    def setUp(self,\n+              extra_plugin_dir=None,", "created_at": "2018-07-16T19:45:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjY3NQ==", "fields": {"body": "an approach you might like to try (test on a different fork; no PR necessary) is adding a bear setting for language : Language = Unknown , which you can pass to the Formatting aspect to make it happy.\nLocalBearTestHelper is in a different repo, so it needs to be a separate PR.", "diff": "@@ -49,4 +67,6 @@ def run(self,\n                     line=line_number + 1,\n                     column=max_line_length + 1,\n                     end_line=line_number + 1,\n-                    end_column=len(line))\n+                    end_column=len(line),\n+                    aspect=Formatting('py'),", "created_at": "2018-07-17T11:31:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzE0ODE3Mg==", "fields": {"body": "@Man-Jain  don't make changes to answers/* and push your commit again. I am not sure, but this might work.", "diff": "@@ -60,9 +59,7 @@ def get_answer(question, graph, final=False):\n \n     grapheize(q_graph, q_doc, attrs={'q_type': q_type})\n     scores = Counter()\n-    found_common = False\n     for start, end in q_graph.edges():\n-        found_common = True", "created_at": "2018-07-17T19:22:02Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MDYxMQ==", "fields": {"body": "It is better to make a new AspectsTestBear instead of changing the TestBear IMO.", "diff": "@@ -1,8 +1,20 @@\n from coalib.bears.LocalBear import LocalBear\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import TrailingSpace\n \n \n-class TestBear(LocalBear):\n+class TestBear(", "created_at": "2018-07-18T12:35:13Z", "last_edited_at": null, "author": "sangamcse", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTM0NQ==", "fields": {"body": "It uses the argcomplete import at the top of the file which ensures that the test module fails loudly with a suitable error message if it is not installed, instead of the import rather silently failing and the test method being a bit confusing in how it fails.", "diff": "@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete\n+\n+    def test_argcomplete_bear_names(self):\n+        self.assertEqual(_argcomplete_bears_names(), get_all_bears_names())\n+\n+    def test_missing_argcomplete(self):\n+        if coalib.parsing.DefaultArgParser.argcomplete is not None:\n+            coalib.parsing.DefaultArgParser.argcomplete = None\n+        fake_importer = Mock(side_effect=ImportError('import missing'))\n+        with patch('builtins.__import__', new=fake_importer):\n+            default_arg_parser()\n+        self.assertFalse(coalib.parsing.DefaultArgParser.argcomplete)\n+        # Dummy usage\n+        coalib.parsing.DefaultArgParser.argcomplete = argcomplete", "created_at": "2018-07-21T00:34:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTc2OQ==", "fields": {"body": "this doesnt belong in the checked in version", "diff": "@@ -24,6 +24,7 @@ class PySafetyBearTest(LocalBearTestHelper):\n \n     def setUp(self):\n         self.uut = PySafetyBear(Section('name'), Queue())\n+        self.maxDiff = None", "created_at": "2018-07-21T00:42:02Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw==", "fields": {"body": "split on . and use the first three", "diff": "@@ -0,0 +1,18 @@\n+Name: {{ name }}\n+{# cabal cannot parse .dev version syntax #}\n+Version: {{ version[:-4] }}", "created_at": "2018-07-20T18:17:41Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ==", "fields": {"body": "You have all your code wrapped in an if statement, though, so none of the code will be run if REPOSITORIES is undefined, right?", "diff": "@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {", "created_at": "2018-07-23T06:43:09Z", "last_edited_at": null, "author": "andrewda", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjYzNQ==", "fields": {"body": "No , advisory is additional detail", "diff": "@@ -39,9 +40,9 @@ def test_with_cve_vulnerability(self):\n             self.uut,\n             file_contents,\n             [Result.from_values('PySafetyBear',\n-                                'bottle<0.12.10 is vulnerable '\n-                                'to CVE-2016-9964 and your project '", "created_at": "2018-07-21T09:09:10Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTgzNQ==", "fields": {"body": "Keep it as it was, uncommented. Sorry if i was confusing.\nUse pragma nocover for now.", "diff": "@@ -11,21 +12,34 @@\n from coalib.settings.Setting import typed_list\n \n \n-def cve_key_checker(vulnerability):\n-    if 'cve' in vulnerability.data:\n-        if vulnerability.data['cve'] is None:\n-            return None\n-        else:\n-            return True\n-    else:\n-        return None\n+# It was for old versions of safety and those versions will be allow in future.\n+# def cve_key_checker(vulnerability):", "created_at": "2018-07-21T14:12:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTk4Mw==", "fields": {"body": "See other bears (inc CheckstyleBear ) for the type to use for paths", "diff": "@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,", "created_at": "2018-07-21T14:19:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTAyOA==", "fields": {"body": "Reorder class definition as SpammingAlert(DefaultConfigMixin, BotPlugin) and you can eliminate the get_configuration_template overriding completely.", "diff": "@@ -3,32 +3,28 @@\n from errbot import BotPlugin\n from errbot.templating import tenv\n \n-from plugins import constants\n+from utils.mixin import DefaultConfigMixin\n \n \n-class SpammingAlert(BotPlugin):\n+class SpammingAlert(BotPlugin, DefaultConfigMixin):\n     \"\"\"\n     A plugin which alerts the user that they might be spamming.\n     \"\"\"\n \n-    CONFIG_TEMPLATE = {\n-        'MAX_MSG_LEN': constants.MAX_MSG_LEN,\n-        'MAX_LINES': constants.MAX_LINES\n-    }\n-\n     def get_configuration_template(self):", "created_at": "2018-07-21T19:10:45Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTQwNg==", "fields": {"body": "create a configure method that does something like:\ndef configure(self, config):\n  new = self.bot_config.DEFAULT_CONFIG[self.name]\n  for key, value in config:\n    new[key] = value\n  self.config = new", "diff": "@@ -0,0 +1,18 @@\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):\n+            return self.bot_config.DEFAULT_CONFIG[self.name]\n+\n+    def __init__(self, bot, name=None):\n+        super().__init__(bot, name=name)\n+        default_config = self._default_config\n+        if default_config and not self.config:\n+            super().configure(default_config)\n+\n+    def get_configuration_template(self):\n+        default_config = self._default_config\n+        if default_config:\n+            return default_config", "created_at": "2018-07-21T19:27:01Z", "last_edited_at": null, "author": "meetmangukiya", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2Mw==", "fields": {"body": "josn", "diff": "@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'", "created_at": "2018-07-22T04:06:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzQwOA==", "fields": {"body": "put these in module level global _private variables so that people can access them easily if they need to.", "diff": "@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'", "created_at": "2018-07-22T04:09:35Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTgyNA==", "fields": {"body": "You don't need to change this to let since you still could do push. Also, uppercase words in a variable name must be use const.", "diff": "@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [", "created_at": "2018-07-22T10:51:25Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTk3Ng==", "fields": {"body": "Give a single whitespace after warning:.", "diff": "@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {\n+    const repoOwner = repos.split(':')[0];\n+    const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+    SAMPLE_REPOS.push({\n+      repoOwner, repoNames\n+    });\n+  };\n+} catch (error) {\n+  console.log('warning:', error);", "created_at": "2018-07-22T10:56:10Z", "last_edited_at": null, "author": "wisn", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDM5MQ==", "fields": {"body": "a count comparson sounds good.", "diff": "@@ -422,3 +424,38 @@ def test_get_all_bears_names(self):\n                  'TestDepBearAA',\n                  'AspectTestBear',\n                  'TestDepBearDependsAAndAA'})\n+\n+    def test_get_all_languages(self):\n+        with bear_test_module():\n+            languages = get_all_languages()\n+            assert isinstance(languages, tuple)\n+            self.assertSetEqual(\n+                {str(language) for language in languages},\n+                {'C',\n+                 'C#',\n+                 'CPP',\n+                 'CSS',\n+                 'Fortran',\n+                 'Golang',\n+                 'Hypertext Markup Language 2.0, 3.2, 4.0, 4.1, 5, 5.1',\n+                 'Java',\n+                 'JavaScript',\n+                 'JavaServer Pages',\n+                 'Jinja2',\n+                 'Markdown',\n+                 'Matlab',\n+                 'ObjectiveC',\n+                 'PHP',\n+                 'PLSQL',\n+                 'PowerShell',\n+                 'Python 2.7, 3.3, 3.4, 3.5, 3.6',\n+                 'Ruby',\n+                 'Scala',\n+                 'Shell',\n+                 'Swift',\n+                 'Tcl',\n+                 'TypeScript',\n+                 'Unknown',\n+                 'Vala',\n+                 'VisualBasic',\n+                 'm4'})", "created_at": "2018-07-23T09:55:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1MDg2OQ==", "fields": {"body": "This would be the correct sorted order\nTEST_BEAR_NAME_REPRS = [\n    \"<class 'AspectTestBear.AspectTestBear'>\",\n    \"<class 'DependentBear.DependentBear'>\",\n    \"<EchoBear linter class (wrapping 'echo')>\",\n    \"<ErrorTestBear linter class (wrapping 'I_do_not_exist')>\",\n    \"<class 'JavaTestBear.JavaTestBear'>\",\n    \"<class 'LineCountTestBear.LineCountTestBear'>\",\n    \"<class 'RaiseTestBear.RaiseTestBear'>\",\n    \"<class 'SpaceConsistencyTestBear.SpaceConsistencyTestBear'>\",\n    \"<class 'TestBear.TestBear'>\",\n    \"<class 'TestBearDep.TestDepBearA'>\",\n    \"<class 'TestBearDep.TestDepBearAA'>\",\n    \"<class 'TestBearDep.TestDepBearBDependsA'>\",\n    \"<class 'TestBearDep.TestDepBearCDependsB'>\",\n    \"<class 'TestBearDep.TestDepBearDependsAAndAA'>\"\n]", "diff": "@@ -5,16 +5,35 @@\n \n from coala_utils.ContextManagers import retrieve_stdout, retrieve_stderr\n \n-TEST_BEARS_COUNT = 14\n+# This list is sorted alphabetically\n+TEST_BEAR_NAMES = (\n+    'AspectTestBear',\n+    'DependentBear',\n+    'EchoBear',\n+    'ErrorTestBear',\n+    'JavaTestBear',\n+    'LineCountTestBear',\n+    'RaiseTestBear',\n+    'SpaceConsistencyTestBear',\n+    'TestBear',\n+    'TestDepBearA',\n+    'TestDepBearAA',\n+    'TestDepBearBDependsA',\n+    'TestDepBearCDependsB',\n+    'TestDepBearDependsAAndAA',\n+)\n+\n+TEST_BEARS_COUNT = len(TEST_BEAR_NAMES)\n \n # This list is sorted by filename of the bears, then name within the modules\n-TEST_BEAR_NAMES = [\n+TEST_BEAR_NAME_REPRS = [", "created_at": "2018-07-23T10:20:16Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw==", "fields": {"body": "Check for the type instead, typeof REPOSITORIES !== 'undefined'", "diff": "@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {", "created_at": "2018-07-23T12:09:47Z", "last_edited_at": "2018-07-23T12:10:31Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMDQyMg==", "fields": {"body": "I see, I'll keep it here for now else the tests won't pass. Would rebase as soon as you get the issue solved \ud83d\udc4d", "diff": "@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={", "created_at": "2018-07-23T09:07:09Z", "last_edited_at": null, "author": "pareksha", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTIwNw==", "fields": {"body": "It is ready", "diff": "@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={", "created_at": "2018-07-23T17:45:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjE1Ng==", "fields": {"body": "shouldn't be there another newline here? Not sure if RST requires that", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to\n+optimize its performance.\n+\n+The profiler will start by profiling the run() method of bears because it\n+consumes most of the bears time. So, this is part where bear writer will spend\n+time, as rest of the part like loading the files, collecting the settings,\n+etc. are done by coala itself.\n+\n+.. note::", "created_at": "2018-07-26T09:05:43Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM5OTAwOA==", "fields": {"body": "Why not assert the instances of all three bears.", "diff": "@@ -470,9 +470,9 @@ def test_get_filtered_bears(self):\n         local_bears['cli'] = _sort_bears(local_bears['cli'])\n         global_bears['cli'] = _sort_bears(global_bears['cli'])\n \n-        self.assertEqual(len(local_bears['cli']), 2)\n-        self.assertEqual(str(local_bears['cli'][0]),\n-                         \"<class 'JavaTestBear.JavaTestBear'>\")\n+        self.assertEqual(len(local_bears['cli']), 3)\n         self.assertEqual(str(local_bears['cli'][1]),", "created_at": "2018-07-26T09:59:01Z", "last_edited_at": null, "author": "MacBox7", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2ODEzNA==", "fields": {"body": "Usage of the--devoption is deprecated. Use--only=devinstead.\nc.f. https://travis-ci.org/coala/gh-board/jobs/408440200#L458", "diff": "@@ -26,6 +26,12 @@ before_script:\n   - sh -e /etc/init.d/xvfb start\n   - sleep 3 # give xvfb some time to start\n \n+before_install:\n+  - npm install --no-save --no-optional --dev npm@5.8.0", "created_at": "2018-07-26T14:00:59Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczMjE2Nw==", "fields": {"body": "Just noting that when I run eslint with airbnb on the new files of this PR (not issue-store.js)...\nnpx install-peerdeps --dev eslint-config-airbnb\n..\n./node_modules/.bin/eslint script/queries/export.js script/queries/github_issue_info.js script/queries/github_label_info.js script/queries/github_pr_info.js script/queries/github_reaction_info.js src/github-client.js src/github-graphql.js\n\n\u2716 119 problems (114 errors, 5 warnings)\n  88 errors, 0 warnings potentially fixable with the `--fix` option.\n\ne.g.\nsrc/github-graphql.js:\n   2:1   error  Dependency cycle detected  import/no-cycle\n  15:26  error  Missing trailing comma     comma-dangle\n  22:5   error  Unary operator '++' used   no-plusplus", "diff": "@@ -0,0 +1,26 @@\n+import GraphQLClientBase from './github-graphql-base';\n+import Client from './github-client';\n+\n+// global event id\n+let EVENT_ID = 0;\n+\n+class GraphQLClient extends GraphQLClientBase {\n+  _updateRateLimit(rateLimit) {\n+    this.remaining = rateLimit.remaining;\n+    this.limit = rateLimit.limit;\n+    this.resetAt = rateLimit.resetAt;\n+    const emitterRate = {\n+      remaining: this.remaining,\n+      limit: this.limit,\n+      reset: this.resetAt\n+    };\n+    // to match Restful API style\n+    const responseStatus = 200;\n+    // config = {method, path, data, options}\n+    const config = null;\n+    Client.emit('end', EVENT_ID, config, responseStatus, emitterRate);\n+    EVENT_ID++;", "created_at": "2018-07-27T10:28:26Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NDM5NA==", "fields": {"body": "Sounds like a good idea,.\nhttps://gitlab.com/coala/mobans/issues/74", "diff": "@@ -1,5 +1,10 @@\n-from pytest_reqs import check_requirements\n+# Allow import to fail to avoid annoying developers\n+try:\n+    from pytest_reqs import check_requirements\n+except ImportError:", "created_at": "2018-07-28T14:08:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1ODMxMA==", "fields": {"body": "you should use BOT_DATA_DIR", "diff": "@@ -54,6 +54,16 @@\n \n HIDE_RESTRICTED_COMMANDS = True\n \n+\n+def make_dir(path):\n+    try:\n+        os.mkdir(os.path.join(BOT_ROOT, path))\n+    except OSError:\n+        if os.path.isdir(os.path.join(BOT_ROOT, path)):\n+            pass\n+\n+\n+make_dir('data')", "created_at": "2018-07-29T01:39:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDc2MA==", "fields": {"body": "the helper would take an argument obviously for the setting name.\nIf necessary, create two helpers.\nAt the moment these are gibberish logic which I am assuming is similar because it isnt python code which is readable and intuitive.", "diff": "@@ -301,7 +302,12 @@ def __init__(self,\n         self.section = section\n         self.message_queue = message_queue\n         self.timeout = timeout\n-        self.debugger = debugger\n+        self.debugger = (False if 'debug_bears' not in section or (", "created_at": "2018-07-29T04:57:06Z", "last_edited_at": "2018-07-29T04:57:24Z", "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIzOQ==", "fields": {"body": "Extract this fom webpack conf\n\n  \n    \n      gh-board/webpack.config.js\n    \n    \n        Lines 29 to 38\n      in\n      3c8b0e5\n    \n    \n    \n    \n\n        \n          \n           options: { \n        \n\n        \n          \n             presets: [ \n        \n\n        \n          \n               'react', \n        \n\n        \n          \n               'env' \n        \n\n        \n          \n             ], \n        \n\n        \n          \n             plugins: [ \n        \n\n        \n          \n               'react-require', \n        \n\n        \n          \n               'transform-object-rest-spread', \n        \n\n        \n          \n               'transform-class-properties' \n        \n\n        \n          \n             ], \n        \n    \n  \n\n\nbabel-loader will also read from .babelrc if it exists.", "diff": "@@ -0,0 +1,3 @@\n+{\n+  \"presets\": [\"es2015\", \"react\"]", "created_at": "2018-07-29T05:26:58Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTU0OQ==", "fields": {"body": "I'll skip this one as then the comment has to move as well.\nI'm trying to get their code in with least amount of changes, but basic style consistency changes are doable.", "diff": "@@ -30,16 +29,26 @@ const EtherpadInner = createReactClass({\n   },\n   poll() {\n     // Start polling\n-    Client.getAnonymousOcto().fromUrl(`${this.getUrl()}/export/txt`).read().then((text) => {\n-      this.setState({text});\n-      // This is the magic text inside a newly-created pad.\n-      // Defined in `etherpad-lite-heroku`'s settings file\n-      if (text.indexOf('Welcome to Etherpad!') >= 0) {\n-        this.loadIssueBody().then(() => {\n-          this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n-        });\n+    const etherpad = EtherpadClient.connect(\n+      this.getEtherpadInfo()\n+    );\n+    etherpad.getText({padID: this.props.padName}, (error, data) => {\n+      if(error) {\n+        console.error('Error creating pad: ' + error.message);\n+        if(error.message === 'padID does not exist') {\n+          this.loadIssueBody().then(() => {\n+            this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n+          });", "created_at": "2018-07-29T05:47:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDk0OQ==", "fields": {"body": "Yeah, this can also be used in #131, but not moved.", "diff": "@@ -91,11 +92,28 @@ function ReviewColumn(props) {\n }\n \n class KanbanRepo extends Component {\n+  state = {login: null};\n+\n   componentDidMount() {\n     const repoTitle = titlecaps(this.props.repoInfos[0].repoName);\n     document.title = `${repoTitle} Kanban Board`;\n+    Client.on('changeToken', this.onChangeToken);", "created_at": "2018-07-29T08:14:35Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzA1NA==", "fields": {"body": "what does this do?\nthe function name should describe it.\nthe docstring should explain it.", "diff": "@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):", "created_at": "2018-07-29T09:35:34Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw==", "fields": {"body": "you can return the result of bear.name.lower() in ... directly instead of using an if, it's like if True: return True else: return False now", "diff": "@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):\n+        return False\n+    elif bear.name.lower() in (\n+            map(str.lower, typed_list(str)(bear.section['debug_bears']))) or (\n+                typed_list(str)(bear.section['debug_bears'])[0].lower() in\n+            TRUE_STRINGS):\n+        return True\n+    else:\n+        return False", "created_at": "2018-07-29T10:35:23Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTMwNQ==", "fields": {"body": "We don't need this now since we have the same config as webpack?", "diff": "@@ -1,3 +1,4 @@\n+import React from 'react';", "created_at": "2018-07-29T12:11:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NDk5MA==", "fields": {"body": "Yes, but we will need to prevent this component loading if it is not set correctly.  It is useless fixing this here.\nEtherpadClient.connect(self.getEtherpadInfo()) is going to fail if this doesnt return a valid connection metadata.\ne.g. if I put in foo as the URL setting.\nIdeally the validation of the user setting is moved to the modal.\nBut this PR gives credit where it is due, and lets us build on top.\nFirst step is disabling the editor everywhere if the setting is empty.\nThen the problems of this entire component are much less critical as the user cant encounter the problems in the first few clicks.", "diff": "@@ -52,18 +61,27 @@ const EtherpadInner = createReactClass({\n     // from https://github.com/ether/etherpad-lite-jquery-plugin/blob/master/js/etherpad.js\n     return `${hostName}/p/${padName}`;\n   },\n+  getEtherpadInfo() {\n+    const reg = /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*):([0-9]+))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/;\n+    let m = window.localStorage.getItem('ep-url').match(reg);", "created_at": "2018-07-29T13:58:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NjI3MA==", "fields": {"body": "storing .graphql files inside a .js file isnt ideal.\ncant we load these files as const's ?\nSomething like https://github.com/ahalimkara/babel-plugin-import-static-files", "diff": "@@ -1,13 +0,0 @@\n-query($owner: String!, $name: String!) {", "created_at": "2018-07-30T01:22:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDk5Mw==", "fields": {"body": "Like @jayvdb mentioned, we don't need a configuration to publish code coverage to codecov.", "diff": "@@ -0,0 +1,9 @@\n+comment: false", "created_at": "2018-07-30T05:54:40Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDkyOA==", "fields": {"body": "This change is welcoming. Most of the text editors these days automatically pick up babelrc files and provide autocompletion features based on babel configuration.", "diff": "@@ -0,0 +1,11 @@\n+{", "created_at": "2018-07-30T05:54:08Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzMwOA==", "fields": {"body": "Use array.some or array.every ?", "diff": "@@ -350,3 +357,58 @@ export function filterCardsByFilter(cards, filter) {\n     return true;\n   });\n }\n+\n+// Filters the list of reviews by the criteria set in the URL.\n+// Note this happens after `issues/prs` get filtered. A review is\n+// just a part of a pull request, so this would only take effect\n+// if its corresponding issue is not filtered out.\n+// Used by FilterStore.filterAndSortReviews()\n+export function filterReviewsByFilter(reviews, filter, user) {\n+  filter = filter || getFilters();\n+  const {reviews: reviewOptions} = filter.getState();\n+\n+  let myReviews, reviewsUnderMyPr, myMetaReviews, others;\n+  for (const reviewOption of reviewOptions) {\n+    switch (reviewOption) {\n+    case 'my-reviews':\n+      myReviews = true;\n+      break;\n+    case 'reviews-under-my-pr':\n+      reviewsUnderMyPr = true;\n+      break;\n+    case 'my-meta-reviews':\n+      myMetaReviews = true;\n+      break;\n+    case 'others':\n+      others = true;\n+      break;\n+    default:\n+      throw new Error('Review filter is invalid!');\n+    }\n+  }\n+\n+  return reviews.filter(review => {\n+    const isMyReview = review.author && review.author.login && review.author.login === user;\n+    const isReviewUnderMyPr = review.prAuthor === user;\n+    const hasMyMetaReview = (() => {", "created_at": "2018-07-30T11:47:47Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTEzOQ==", "fields": {"body": "lines with an if clause should be indented four additional spaces so that do not align with the statements in the indented block", "diff": "@@ -0,0 +1,38 @@\n+from itertools import chain\n+\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):", "created_at": "2018-07-30T11:54:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTU0Nw==", "fields": {"body": "extra config here should override the plugin defaults, so these tests passing show that your code is not working correctly.\nAnyway, dont add extra_config here.  This test class is good without it.\nCreate an additional test class TestSpamExtraConfig which verifies the extra config overrides the plugin defaults.", "diff": "@@ -7,8 +7,17 @@\n class TestSpam(unittest.TestCase):\n \n     def setUp(self):\n+        extra_config = {\n+            'DEFAULT_CONFIG': {\n+                'SpammingAlert': {\n+                    'MAX_MSG_LEN': 1000,\n+                    'MAX_LINES': 10,\n+                }\n+            }\n+        }\n         self.testbot = TestBot(extra_plugin_dir='plugins',\n-                               loglevel=logging.ERROR)\n+                               loglevel=logging.ERROR,\n+                               extra_config=extra_config)", "created_at": "2018-07-30T11:56:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyMjkxMg==", "fields": {"body": "split into multiple lines?\nalso noting that these methods are horribly repetitive. (i.e. renderTypes / renderStates / etc), but that should get fixed in a separate PR before or after this one, maybe by someone else ;-)", "diff": "@@ -243,6 +243,17 @@ class FilterDropdown extends Component {\n     return (<FilterCategory noSearch items={items}/>);\n   };\n \n+  renderReviews = () => {\n+    const filters = getFilters();\n+    const {reviews} = filters.getState();\n+\n+    const items = ['my-reviews', 'reviews-under-my-pr', 'my-meta-reviews', 'others'].map((review) => {\n+      return {text: review, isSelected: reviews.indexOf(review) >= 0, toggleHref: filters.toggleReviews(review).url() };", "created_at": "2018-07-30T12:59:08Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMxMTU4MA==", "fields": {"body": "dirname or dirpath, choose wisely :P", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled\n+files will be saved to current working directory. If specified directory does\n+not exists it will create one and if path specified is already a file path then\n+it will throw ``FileExistsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format ``{section.name}_{bear.name}.prof``.\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument.\n+\n+- To dump profile files in current working directory:\n+\n+  .. code:: shell\n+\n+      $coala -b PEP8Bear,PyUnusedCodeBear -f <filename> --profile\n+\n+- To dump profile files to a specified directory:\n+\n+  .. code:: shell\n+\n+      $coala -b PEP8Bear,MypyBear -f <filename> --profile <dirpath>\n+\n+coafile\n+^^^^^^^\n+\n+Users can specify to profile bears using a ``.coafile`` as well.\n+\n+- To dump profile files in current working directory:\n+\n+  ::\n+\n+      [all]\n+      bears = PEP8Bear,MypyBear\n+      files = <filename>\n+      profile = True\n+\n+- To dump profile files to a specified directory:\n+\n+  ::\n+\n+      [all]\n+      bears = PEP8Bear,MypyBear\n+      files = <filename>\n+      profile = DirName/Dirpath", "created_at": "2018-07-30T20:33:07Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjQ5NTUxOQ==", "fields": {"body": "Use https://www.npmjs.com/package/babel-plugin-inline-import", "diff": "@@ -1,13 +0,0 @@\n-query($owner: String!, $name: String!) {", "created_at": "2018-07-31T11:50:30Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTgwOQ==", "fields": {"body": "When reading this sounds a bit confusing, it reads like it takes either \"an additional parameter\", or either a \"directory name\" or a \"directory path\". Would recommend following:\n\n... accepts an additional parameter: a directory path where profiled files will be ...", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled", "created_at": "2018-07-31T19:32:40Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTk5OQ==", "fields": {"body": "question is what that means to the regular user, but let's put that aside for now, I'm not sure how coala should handle such \"user-exceptions\" properly (which are intended to generate an error-log and exit).", "diff": "@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled\n+files will be saved to current working directory. If the specified directory\n+does not exist it will be created. If the specified path points to an already\n+existing file a ``FileExistsError`` is thrown.", "created_at": "2018-07-31T19:33:20Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc3NDQ5NQ==", "fields": {"body": "@jayvdb this sets the config MAX_MSG_LEN = 1 for the testbot. So when the command msg !plugin config SpammingAlert is executed in the next line. The bot interprets the cmd msg as a spam since MAX_MSG_LEN is set to 1. So I increased the MAX_MSG_LEN to 20.", "diff": "@@ -19,6 +23,50 @@ def test_spam_configuration(self):\n         self.testbot.assertCommand('!plugin config SpammingAlert '\n                                    '{\\'MAX_LINES\\': 10}',\n                                    'configuration done')\n+        self.testbot.assertCommand('!plugin config SpammingAlert',\n+                                   '{\\'MAX_LINES\\': 10}')\n+        self.testbot.assertCommand('!plugin config SpammingAlert '\n+                                   '{\\'MAX_LINES\\': 20, \\'MAX_MSG_LEN\\': 200}',", "created_at": "2018-08-01T07:08:39Z", "last_edited_at": "2018-08-01T07:11:08Z", "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc4ODk4Nw==", "fields": {"body": "Please do not put any overrides here.\nThese are the same as the bot defaults, so unnecessary.", "diff": "@@ -111,3 +111,10 @@\n     'LabHub:*': {'allowprivate': False}}\n \n AUTOINSTALL_DEPS = True\n+\n+DEFAULT_CONFIG = {\n+    'SpammingAlert': {", "created_at": "2018-08-01T08:09:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjcyNzAwMg==", "fields": {"body": "please add a disable_global variable like https://github.com/coala/git-task-list/blob/master/.travis.yml#L13 , so all extra jobs can re-use it.", "diff": "@@ -18,18 +20,33 @@ jobs:\n       before_script: false\n       script: .ci/check_moban.sh\n       after_success: false\n+      after_failure: false", "created_at": "2018-08-01T00:55:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MjA3OQ==", "fields": {"body": "no.  we fall back to the setting , which will be in the arg max_line_length, which defaults to 79 cpl.\nBut most Language will never have a max_line_length, because most languages dont restrict that, so this warning is not user friendly, nor is it developer friendly.  We dont want patches for adding max_line_length to language definitions unless the language does restrict line length, and we know that is rare.", "diff": "@@ -30,7 +47,30 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.\n         '''\n+        if language:\n+            try:\n+                language = Language[language]\n+            except UnknownLanguageError:\n+                logging.warn(\n+                    language + ' is an invalid language name '\n+                    'or is not recognized by coala. Language specific '\n+                    'line length limitation can not be applied.'\n+                )\n+                language = Language['Unknown']\n+            else:\n+                if 'max_line_length' in language.attributes:\n+                    max_line_length = language.max_line_length\n+                else:\n+                    logging.warn(\n+                        'Language ' + str(language) + ' does not have '\n+                        '`maximum line length` defined in coalang. '\n+                        'Falling back to 80 characters as maximum line length.'", "created_at": "2018-08-02T22:18:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU0MTM5NQ==", "fields": {"body": "should have also been moved up", "diff": "@@ -30,7 +46,11 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.", "created_at": "2018-08-03T13:20:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU5Njc5Mw==", "fields": {"body": "we had coverage of this.  Add tests which cover this.", "diff": "@@ -33,47 +32,54 @@ def wrapper(*args, **kwargs):\n     return wrapper\n \n \n-class LabHub(BotPlugin):\n+class LabHub(BotPlugin, DefaultConfigMixin):\n     \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n \n-    GH_ORG_NAME = constants.GH_ORG_NAME\n-    GL_ORG_NAME = constants.GL_ORG_NAME\n+    CONFIG_TEMPLATE = {\n+        'GH_ORG_NAME': 'org_name',\n+        'GH_TOKEN': 'token',\n+        'GL_ORG_NAME': 'org_name',\n+        'GL_TOKEN': 'token',\n+    }\n \n-    def __init__(self, bot, name=None):\n-        super().__init__(bot, name)\n+    def get_configuration_template(self):\n+        DefaultConfigMixin.get_configuration_template(self)\n+\n+    def activate(self):\n+        BotPlugin.activate(self)\n \n         teams = dict()\n         try:\n-            gh = github3.login(token=os.environ.get('GH_TOKEN'))\n+            gh = github3.login(token=self.config['GH_TOKEN'])\n             assert gh is not None\n-        except AssertionError:\n+        except AssertionError:  # pragma: no cover, for logging", "created_at": "2018-08-03T16:17:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDM1MA==", "fields": {"body": "again, dont use tags that are a language .  it is confusing.", "diff": "@@ -68,3 +105,53 @@ def apply_filters(filters, bears=None):\n         filter_name, *filter_args = filter\n         bears = apply_filter(filter_name, filter_args, bears)\n     return bears\n+\n+\n+def apply_section_filters(filters, sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filters``. It returns\n+    intersection of sections if more than one element is present in ``filters``\n+    list.\n+\n+    :param filters:\n+        List of args based on ``sections`` has to be filtered.\n+        For example:\n+        ``[['tags', ('save', 'change')], ['exclude', ('css', '!python')]]``", "created_at": "2018-08-05T15:38:06Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMwMg==", "fields": {"body": "This belongs before --bear-dirs , probably after --files .\nLets wait for more feedback on position", "diff": "@@ -177,6 +177,10 @@ def default_arg_parser(formatter_class=None):\n         '-d', '--bear-dirs', type=PathArg, nargs='+', metavar='DIR',\n         help='additional directories which may contain bears')\n \n+    inputs_group.add_argument(", "created_at": "2018-08-05T15:35:45Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMzMA==", "fields": {"body": "please use exampes from your cEP, and your own real needs.\nthis looks like language , not a tag which should be an arbitrary grouping which couldnt be achieved via any other means.", "diff": "@@ -49,6 +55,37 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n+def apply_section_filter(filter_name, filter_args, all_sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filter_args``. It returns\n+    all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the filter.\n+    :param filter_args:\n+        Arguments of the filter to be passed in.\n+        For example:\n+        ``['tags', ('java',)]``", "created_at": "2018-08-05T15:37:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDQ0Mw==", "fields": {"body": "move the '-c', back to the next line, so you dont modify that line.\nit is also confusing to have the '-c', on this line when its arg is on the next line.", "diff": "@@ -198,12 +198,16 @@ def test_merge_defaults(self):\n                 gather_configuration(lambda *args: True,\n                                      self.log_printer,\n                                      arg_list=['-S', 'value=1', 'test.value=2',\n-                                               '-c', escape(temporary, '\\\\')] +\n+                                               '--tags', 'save', '-c',", "created_at": "2018-08-05T15:41:19Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTY4Ng==", "fields": {"body": "Please see how this is used by core and bears. I believe there are no equivalent in xml.", "diff": "@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}\n+    multiline_string_delimiters = string_delimiters\n+    encapsulators = {'<': '>'}", "created_at": "2018-08-05T21:57:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTcyNA==", "fields": {"body": "Also add cdata", "diff": "@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}", "created_at": "2018-08-05T21:58:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2MDE2NQ==", "fields": {"body": "great. removing this is necessary, because the decorator uses self.section.aspects , and so self is needed.", "diff": "@@ -21,9 +23,14 @@ class PycodestyleBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting'}\n \n-    @staticmethod", "created_at": "2018-08-06T02:03:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2OTAxOQ==", "fields": {"body": "I think we could remove the last ,", "diff": "@@ -159,6 +161,15 @@ def run_coala(console_printer=None,\n                 (section_name, sections[section_name])\n                 for section_name in targets)\n \n+        # Collect all the section filters which are based on args,", "created_at": "2018-08-06T03:54:24Z", "last_edited_at": null, "author": "gaocegege", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjg5Mw==", "fields": {"body": "Please don't use subclass, it's an antipattern in React. Instead, extract the logic into separate component or use HOC", "diff": "@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {", "created_at": "2018-08-04T11:50:22Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjkyNw==", "fields": {"body": "Remember to use onClick = () => {} in class method so it autobinds.", "diff": "@@ -1,45 +1,180 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '\ud83d\udc4d',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '\ud83d\udc4e',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '\ud83d\ude04',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '\ud83c\udf89',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '\ud83d\ude15',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '\u2764\ufe0f',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  async onClick(id, content) {\n+    const canAdd = this.state.canAdd[content];\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n+    }\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '\ud83d\udc4d',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '\ud83d\udc4e',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '\ud83d\ude04',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '\ud83c\udf89',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '\ud83d\ude15',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '\u2764\ufe0f',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={this.onClick.bind(this, id, reaction.name)}", "created_at": "2018-08-04T11:52:33Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNzg4MA==", "fields": {"body": "Component approach can be done by making a component that takes a children as a function or a render prop that gives back data. i.e.\nconst Auth = ({ children }) => {\n  return children(loginInfo) // get loginInfo from somewhere (componentDidMount?)\n}\n\n// or with render prop\n\nconst Auth = ({ render }) => {\n  return render(loginInfo)\n}\nusage:\n<Auth>\n{loginInfo => {\n  ... add logic here or render component\n}}\n</Auth>\n\n// or\n\n<Auth render={{loginInfo => { ... }}} />\nHOC is just a function that wraps other component, gives it extra prop, and returns it\nfunction withAuth(WrapperComponent) {\n  return class WithAuth extends Component {\n    render() {\n      return <WrapperComponent {...this.props} loginInfo={this.loginInfo} />\n    }\n  }\n}\nHOC usage:\nconst ReviewCard = ({ loginInfo }) => <div>{loginInfo.something}</div>\n\nexport default withAuth(ReviewCard)\nhttps://reactjs.org/docs/render-props.html\nhttps://reactjs.org/docs/higher-order-components.html", "diff": "@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {", "created_at": "2018-08-04T12:44:10Z", "last_edited_at": "2018-08-04T12:47:54Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODkyMg==", "fields": {"body": "We can have a alternate way, check this out https://medium.com/@george.shuklin/how-to-test-if-name-main-1928367290cb", "diff": "@@ -67,3 +67,4 @@ exclude_lines =\n   pragma ${PLATFORM_SYSTEM}: no cover\n   pragma ${OS_NAME}: no cover\n   pragma Python [0-9.,]*${PYTHON_VERSION}[0-9.,]*: no cover\n+  sys.exit\\(main\\(\\)\\)", "created_at": "2018-08-04T13:39:36Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNDg2MQ==", "fields": {"body": "Why change from 500 to 50?", "diff": "@@ -38,8 +38,7 @@ def setUp(self):\n         extra_config = {\n             'DEFAULT_CONFIG': {\n                 'SpammingAlert': {\n-                    'MAX_MSG_LEN': 500,\n-                    'MAX_LINES': 5,\n+                    'MAX_MSG_LEN': 50,", "created_at": "2018-08-04T17:47:36Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNzkxNg==", "fields": {"body": "misjudgement", "diff": "@@ -38,8 +38,7 @@ def setUp(self):\n         extra_config = {\n             'DEFAULT_CONFIG': {\n                 'SpammingAlert': {\n-                    'MAX_MSG_LEN': 500,\n-                    'MAX_LINES': 5,\n+                    'MAX_MSG_LEN': 50,", "created_at": "2018-08-04T19:52:10Z", "last_edited_at": null, "author": "nvzard", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyMjgwMA==", "fields": {"body": "Many of our plugins which be changed to using labhub permissions.\ncreate a LabHubTestCase subclassing CoroboTestCase which does all the setUp necessary for testing a plugin which depends on LabHub.", "diff": "@@ -1,9 +1,54 @@\n-pytest_plugins = ['errbot.backends.test']\n-extra_plugin_dir = 'plugins'\n+import github3\n+import IGitt\n+import plugins.labhub\n+import plugins.pitchfork\n \n+from unittest.mock import PropertyMock\n+from unittest.mock import create_autospec\n+from tests.corobo_test_case import CoroboTestCase\n \n-def test(testbot):\n-    testbot.assertCommand('!pitchfork @meet', 'being pitchforked')\n-    testbot.assertCommand('!pitchfork @meet down to hell', 'being pitchforked')\n-    testbot.assertCommand('!pitchfork meet to hell', 'being pitchforked')\n-    testbot.assertCommand('!pitchfork', 'Usage')\n+\n+class TestPitchfork(CoroboTestCase):", "created_at": "2018-08-05T01:02:15Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0NQ==", "fields": {"body": "code repetition here, no need to reassign the same value", "diff": "@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')", "created_at": "2018-08-05T07:12:47Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0Ng==", "fields": {"body": "same ^^", "diff": "@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []", "created_at": "2018-08-05T07:13:01Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMDA0NQ==", "fields": {"body": "FileExistsError will be thrown and it raise SystemExit when user provide a filepath in --profile but if user provide a directory path and that directory already have profiled files then in the next run of coala file with the same name gets overwritten", "diff": "@@ -0,0 +1,76 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter: a directory path where\n+profiled files will be dumped, if ``True`` is provided profiled files will be\n+saved to current working directory. If the specified directory does not exist\n+it will be created. If the specified path points to an already existing file\n+a error is raised. Profiled files will get overwritten, if specified directory", "created_at": "2018-08-06T07:48:07Z", "last_edited_at": "2018-08-06T07:48:40Z", "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyMDM2OQ==", "fields": {"body": "not all pycodestyle errors are LineLength('py').\nPlease decode the pycodestyle errors and use appropriate aspects", "diff": "@@ -61,3 +67,24 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        output_regex = (r'(?P<line>\\d+) (?P<column>\\d+) '\n+                        r'(?P<message>(?P<origin>\\S+).*)')\n+        result = re.match(output_regex, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        yield Result.from_values(\n+            origin=self,\n+            message=message,\n+            file=filename,\n+            line=int(line),\n+            column=int(column),\n+            aspect=LineLength('py'),", "created_at": "2018-08-06T14:52:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyOTUxMQ==", "fields": {"body": "I think it would've been possible to chain onChangeToken if it's component with render prop instead of HOC\nclass Dashboard extends Component {\n  onChangeToken() {\n    ...\n  }\n  \n  renderDashboard(loginInfo) {\n    return (...)\n  }\n  \n  render() {\n    return (\n      <Auth\n        onChangeToken={this.onChangeToken}\n        render={this.renderDashboard}\n      />\n    )\n  }\n}\nThe onChangeToken in Auth component (currently withAuth HOC) should also call this.props.onChangeToken, after setting its own state.\nYou could also pass Client down with this.props.onChangeToken so it's not leaking (although I'm not so sure, is Client related to auth?)", "diff": "@@ -1,125 +1,186 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n import classnames from 'classnames';\n import {Link} from 'react-router';\n \n import {getFilters} from '../route-utils';\n import IssueStore from '../issue-store';\n+import Database from '../database';\n \n import GithubFlavoredMarkdown from './gfm';\n import Time from './time';\n import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n+import withAuth from './login-auth';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {\n+  saveToDatabase = (content, isAdd) => {\n+    // reviewCard is just part of issueCard\n+    const {card, loginInfo} = this.props;\n+    const {repoOwner, repoName, number} = card;\n+    const {login} = loginInfo;\n+    if (isAdd) {\n+      // add a new reaction\n+      if (!card.reactions) card.reactions = [];\n+      card.reactions.push({\n+        content,\n+        user: {\n+          login,\n+        },\n+      });\n+    } else {\n+      // remove an existing reaction\n+      card.reactions = card.reactions.filter((reaction) => {\n+        return !(reaction.user.login === login && reaction.content === content);\n+      });\n+    }\n+    // find the corresponding issueCard\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    // update corresponding issueCard\n+    issueCard.issue.pullRequest.comments.forEach(reviewCard => {\n+      if (reviewCard.id === card.id) {\n+        reviewCard = card;\n+      }\n+    });\n+    Database.putCards([issueCard]);\n+  }\n+\n+  render() {\n+    const {card, primaryRepoName, loginInfo} = this.props;\n+    const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n+    const key = `${repoOwner}/${repoName}#${number}-${id}`;\n+\n+    // comment updatedAt is updated when comment content is edited.\n+    // Note that the default `updatedAt` field of review comment\n+    // provided by GraphQL API is inaccurate. Thus, we use our custom\n+    // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n+    const updatedAt = card.updatedAt;\n+\n+    const user = card.author;\n+    const assignedAvatar = (\n+      <Link to={getFilters().toggleUserName(user.login).url()}>\n+        <img\n+          key='avatar'\n+          className='avatar-image'\n+          title={'Click to filter on ' + user.login}\n+          src={user.avatarUrl}/>\n+      </Link>\n+    );\n+    // stop highlighting after 5min\n+    const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n+\n+    // put the corresponding pull request as related card\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    const relatedCards = [issueCard].map((issueCard) => {\n+      let title;\n+      if (issueCard.issue) {\n+        title = (\n+          <span className='related-issue-title'>{issueCard.issue.title}</span>\n+        );\n+      }\n+      return (\n+        <div key={issueCard.key()} className='related-issue'>\n+          <IssueOrPullRequestBlurb\n+            card={issueCard}\n+            primaryRepoName={card.repoName}/>\n+          {title}\n+        </div>\n       );\n+    });\n+\n+    const classes = {\n+      'review': true,\n+      'is-updated': isUpdated,\n+    };\n+\n+    const header = [\n+      <ReviewBlurb key='review-blurb'\n+        card={card}\n+        primaryRepoName={primaryRepoName} />,\n+    ];\n+\n+    let reactionsStat = {\n+      THUMBS_UP: 0,\n+      THUMBS_DOWN: 0,\n+      LAUGH: 0,\n+      HOORAY: 0,\n+      HEART: 0,\n+      CONFUSED: 0\n+    };\n+    if (reactions) {\n+      reactions.forEach(reaction => reactionsStat[reaction.content]++);\n     }\n+\n+    let noReactionByMe;\n+    let hasLogin = false;\n+    if (loginInfo) {\n+      hasLogin = true;\n+      noReactionByMe = {\n+        THUMBS_UP: true,\n+        THUMBS_DOWN: true,\n+        LAUGH: true,\n+        HOORAY: true,\n+        HEART: true,\n+        CONFUSED: true\n+      };\n+      if (reactions) {\n+        reactions.forEach(reaction => {\n+          if (reaction.user && reaction.user.login === loginInfo.login) {\n+            noReactionByMe[reaction.content] = false;\n+          }\n+        });\n+      }\n+    }\n+\n     return (\n-      <div key={issueCard.key()} className='related-issue'>\n-        <IssueOrPullRequestBlurb\n-          card={issueCard}\n-          primaryRepoName={card.repoName}/>\n-        {title}\n-      </div>\n-    );\n-  });\n-\n-  const classes = {\n-    'review': true,\n-    'is-updated': isUpdated,\n-  };\n-\n-  const header = [\n-    <ReviewBlurb key='review-blurb'\n-      card={card}\n-      primaryRepoName={primaryRepoName} />,\n-  ];\n-\n-  let reactionsStat = {\n-    THUMBS_UP: 0,\n-    THUMBS_DOWN: 0,\n-    LAUGH: 0,\n-    HOORAY: 0,\n-    HEART: 0,\n-    CONFUSED: 0\n-  };\n-  if (reactions) {\n-    reactions.forEach(reaction => reactionsStat[reaction.content]++);\n-  }\n+      <div className='-card-and-related'>\n+        <BS.ListGroupItem\n+          key={key}\n+          header={header}\n+          className={classnames(classes)}>\n \n-  return (\n-    <div className='-card-and-related'>\n-      <BS.ListGroupItem\n-        key={key}\n-        header={header}\n-        className={classnames(classes)}>\n-\n-        <span className='-extra-span-for-inline-popover'>\n-          <a\n-            key='link'\n-            className='review-title'\n-            target='_blank'\n-            href={url}>\n-              <GithubFlavoredMarkdown\n-                inline\n-                repoOwner={repoOwner}\n-                repoName={repoName}\n-                text={bodyText}/>\n-          </a>\n-        </span>\n-\n-        <span key='footer' className='review-footer'>\n-          <span key='left-footer' className='comment-reactions'>\n-            <Reactions stat={reactionsStat}/>\n+          <span className='-extra-span-for-inline-popover'>\n+            <a\n+              key='link'\n+              className='review-title'\n+              target='_blank'\n+              href={url}>\n+                <GithubFlavoredMarkdown\n+                  inline\n+                  repoOwner={repoOwner}\n+                  repoName={repoName}\n+                  text={bodyText}/>\n+            </a>\n           </span>\n-          <span key='right-footer' className='review-time-and-user'>\n-            <Time key='time' className='updated-at' dateTime={updatedAt}/>\n-            {assignedAvatar}\n+\n+          <span key='footer' className='review-footer'>\n+            <span key='left-footer' className='comment-reactions'>\n+              <Reactions\n+                id={id}\n+                stat={reactionsStat}\n+                noReactionByMe={noReactionByMe}\n+                hasLogin={hasLogin}\n+                saveCallBack={this.saveToDatabase}/>\n+            </span>\n+            <span key='right-footer' className='review-time-and-user'>\n+              <Time key='time' className='updated-at' dateTime={updatedAt}/>\n+              {assignedAvatar}\n+            </span>\n           </span>\n-        </span>\n-      </BS.ListGroupItem>\n-      <div key='related' className='related-issues'>\n-        {relatedCards}\n+        </BS.ListGroupItem>\n+        <div key='related' className='related-issues'>\n+          {relatedCards}\n+        </div>\n       </div>\n-    </div>\n-  );\n+    );\n+  }\n }\n \n-function Review({review}) {\n+function Review({review, loginInfo}) {\n   return (\n-    <ReviewCard card={review}/>\n+    <ReviewCard card={review} loginInfo={loginInfo}/>\n   );\n }\n \n-export default Review;\n+export default withAuth(Review);", "created_at": "2018-08-06T15:17:49Z", "last_edited_at": "2018-08-06T15:23:46Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MDI2MA==", "fields": {"body": "move this after the apply_filters function so that the diff better aligns, and probably at the end as it is a private function", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):", "created_at": "2018-08-06T21:49:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng==", "fields": {"body": "(almost) very generic ... belongs in coala_utils::decorators.py\nand this is enforce_duck_type or enforce_duct_tape ? ;-)\nand to make calling generic, use\n@typed_filter(bear='bearclass')\ndef language_filter(bear, args):\n```", "diff": "@@ -0,0 +1,42 @@\n+from inspect import getmro\n+from functools import wraps\n+\n+\n+def typed_filter(type_classes, msg=None):", "created_at": "2018-08-06T21:58:04Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjI0OA==", "fields": {"body": "thing -> obj or object_", "diff": "@@ -0,0 +1,42 @@\n+from inspect import getmro\n+from functools import wraps\n+\n+\n+def typed_filter(type_classes, msg=None):\n+    \"\"\"\n+    Used to enforce type of the first argument of a method\n+    by its class name as string. Raises NotImplementedError\n+    if the type does not match. Primarily used to enforce\n+    type of a filter.\n+\n+    :param type_classes:    list or tuple of acceptable class names\n+                            as strings for the first argument of the\n+                            method being decorated.\n+    :param msg:             Message to pass with NotImplementedError.\n+    \"\"\"\n+    if (type(type_classes) not in (tuple, list)):\n+        type_classes = (type_classes,)\n+\n+    def decorator(filter):\n+\n+        @wraps(filter)\n+        def decorated_filter(thing, *args, **kargs):", "created_at": "2018-08-06T21:58:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0NDM1Nw==", "fields": {"body": "section_tag_filter", "diff": "@@ -0,0 +1,31 @@\n+from coalib.parsing.filters.decorators import typed_filter\n+\n+\n+@typed_filter(('bearclass', 'Bear', 'Section'))\n+def tag_section_filter(section_or_bear, args):", "created_at": "2018-08-06T22:09:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTA0OQ==", "fields": {"body": "Let's call it items rather than things", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears", "created_at": "2018-08-06T20:50:01Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTQ0OQ==", "fields": {"body": "Do we have any practical case for this condition ?\nIf so, is there way we can check this before calling this function ?", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:", "created_at": "2018-08-06T20:51:36Z", "last_edited_at": null, "author": "shreyans800755", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAzOTExNQ==", "fields": {"body": "Now we need a test class which verifies that the aspect is used when the line length is exceeded.", "diff": "@@ -63,3 +69,22 @@ def hello():\n     valid_files=(file_with_very_long_line,),\n     invalid_files=(),\n     settings={'max_line_length': 0})\n+\n+PycodestyleBearAspectsTest = verify_local_bear(", "created_at": "2018-08-06T21:45:07Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwODgwMw==", "fields": {"body": "run_coala\n\n:param arg_parser:        Instance of ArgParser that is used to non-setting arguments.\n:param arg_list:              The CLI argument list.\n:param args:                   Alternative pre-parsed CLI arguments.\n\nThis is not just about the tests, since args to run_coala() can be optionally passed instead of arg_list, I think we need to merge opts from both, so as to enable the internal usage of this filter. Tests also use can use this by directly calling run_coala() with an arg list.", "diff": "@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:", "created_at": "2018-08-07T06:12:25Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjkyMw==", "fields": {"body": "missing key property\nhttps://reactjs.org/docs/lists-and-keys.html", "diff": "@@ -1,45 +1,185 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '\ud83d\udc4d',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '\ud83d\udc4e',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '\ud83d\ude04',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '\ud83c\udf89',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '\ud83d\ude15',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '\u2764\ufe0f',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  onClick = async (id, content) => {\n+    const canAdd = this.state.canAdd[content];\n+    const saveToDatabase = this.props.saveCallBack;\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, true);\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, false);\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n+    }\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '\ud83d\udc4d',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '\ud83d\udc4e',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '\ud83d\ude04',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '\ud83c\udf89',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '\ud83d\ude15',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '\u2764\ufe0f',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={() => this.onClick(id, reaction.name)}\n+          disabled={!hasLogin}>", "created_at": "2018-08-07T13:38:34Z", "last_edited_at": null, "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMzE2Nw==", "fields": {"body": "^ Seems like the old one doesn't have it either, React should've warned about this.", "diff": "@@ -1,45 +1,185 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '\ud83d\udc4d',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '\ud83d\udc4e',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '\ud83d\ude04',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '\ud83c\udf89',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '\ud83d\ude15',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '\u2764\ufe0f',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  onClick = async (id, content) => {\n+    const canAdd = this.state.canAdd[content];\n+    const saveToDatabase = this.props.saveCallBack;\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, true);\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, false);\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n+    }\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '\ud83d\udc4d',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '\ud83d\udc4e',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '\ud83d\ude04',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '\ud83c\udf89',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '\ud83d\ude15',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '\u2764\ufe0f',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={() => this.onClick(id, reaction.name)}\n+          disabled={!hasLogin}>", "created_at": "2018-08-07T13:39:05Z", "last_edited_at": "2018-08-07T13:39:42Z", "author": "blazeu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0Nzg0NA==", "fields": {"body": "def get_configuration_template(self):\n        default_config = self._default_config\n        if default_config:\n            return default_config\n        else self.CONFIG_TEMPLATE:\n            return self.CONFIG_TEMPLATE\n        return\n?", "diff": "@@ -20,6 +20,8 @@ def get_configuration_template(self):\n             return default_config\n         elif self.CONFIG_TEMPLATE:\n             return self.CONFIG_TEMPLATE\n+        else:  # pragma: no cover", "created_at": "2018-08-09T08:36:44Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0ODc3OA==", "fields": {"body": "No need for else IMO when this will be the last condition instead directly return", "diff": "@@ -30,7 +30,7 @@ def search(self, msg, arg):\n             return (self.API_DOCS +\n                     '/search.html?q=' +\n                     '+'.join(re.split(r'\\s+', search_string)))\n-        elif doc_type.lower() == 'user':\n+        else:", "created_at": "2018-08-09T08:39:46Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0OTQ3OA==", "fields": {"body": "https://github.com/coala/corobo/pull/613/files#r208848778", "diff": "@@ -93,7 +93,7 @@ def contrib_stats(self, msg, match):\n                 len(Coatils.all_langs())\n             )\n         # stats\n-        elif stat_type == '' and entity == '':\n+        else:", "created_at": "2018-08-09T08:41:42Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg1MDI0Mw==", "fields": {"body": "https://github.com/coala/corobo/pull/613/files#r208848778", "diff": "@@ -20,6 +20,8 @@ def construct_link(text):\n         elif 'documentation/' in text:\n             text = text.split('documentation/')[-1]\n             return 'https://docs.coala.io/en/latest/' + text\n+        else:  # pragma: no cover", "created_at": "2018-08-09T08:44:03Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg1MDg4Mw==", "fields": {"body": "else self.CONFIG_TEMPLATE: is syntax error ;-)", "diff": "@@ -20,6 +20,8 @@ def get_configuration_template(self):\n             return default_config\n         elif self.CONFIG_TEMPLATE:\n             return self.CONFIG_TEMPLATE\n+        else:  # pragma: no cover", "created_at": "2018-08-09T08:45:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg3OTc2NA==", "fields": {"body": "My own words thrown back at me ? ;)", "diff": "@@ -30,7 +30,7 @@ def search(self, msg, arg):\n             return (self.API_DOCS +\n                     '/search.html?q=' +\n                     '+'.join(re.split(r'\\s+', search_string)))\n-        elif doc_type.lower() == 'user':\n+        else:", "created_at": "2018-08-09T10:25:10Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg5OTE0OA==", "fields": {"body": "This isnt as simple as the other one.  Each branch yields, and then goes to the end.\nTo remove this else branch, we would need to add returns to all of the other branches, which isnt very helpful.", "diff": "@@ -93,7 +93,7 @@ def contrib_stats(self, msg, match):\n                 len(Coatils.all_langs())\n             )\n         # stats\n-        elif stat_type == '' and entity == '':\n+        else:", "created_at": "2018-08-09T11:47:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODgwNTYyNw==", "fields": {"body": "you sure you need this?\nit isnt doing anything afaics", "diff": "@@ -0,0 +1,363 @@\n+import logging\n+from os import path\n+\n+from coala_utils.FileUtils import detect_encoding\n+from coala_utils.decorators import (enforce_signature, generate_eq,)\n+\n+\n+class FileNameError(LookupError):\n+    def __init__(self, error_message):", "created_at": "2018-08-09T04:50:11Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODk2ODExOQ==", "fields": {"body": "I've explained on https://gitlab.com/coala/mobans/issues/84 why I think that is unnecessary.\nIf necessary, we have a check script which verifies that all entry points defined in the yaml have exactly these two lines at end of the file.  That prevents these sequences from being different in multiple entry points, and also ensures they are identical on all repos with entry points.", "diff": "@@ -67,3 +67,4 @@ exclude_lines =\n   pragma ${PLATFORM_SYSTEM}: no cover\n   pragma ${OS_NAME}: no cover\n   pragma Python [0-9.,]*${PYTHON_VERSION}[0-9.,]*: no cover\n+  sys.exit\\(main\\(\\)\\)", "created_at": "2018-08-09T15:10:46Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjQ4Mg==", "fields": {"body": "self.testbot = self", "diff": "@@ -43,30 +33,24 @@ def setUp(self):\n                 }\n             }\n         }\n-        self.testbot = TestBot(extra_plugin_dir='plugins',", "created_at": "2018-08-10T06:31:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjY3MQ==", "fields": {"body": "single quotes", "diff": "@@ -1,15 +1,15 @@\n import requests_mock\n import vcr\n \n-pytest_plugins = ['errbot.backends.test']\n+from tests.isolated_testcase import IsolatedTestCase\n \n-extra_plugin_dir = 'plugins'\n \n+class GhettoTest(IsolatedTestCase):\n \n-@vcr.use_cassette('tests/cassettes/ghetto.yaml')\n-def test_ghetto(testbot):\n-    testbot.assertCommand(\"!ghetto hi, whats up?\", \"hi, wassup?\")\n-    with requests_mock.Mocker() as m:\n-        m.register_uri('POST', 'http://www.gizoogle.net/textilizer.php',\n-                       text='test text which will not match with the regex')\n-        testbot.assertCommand(\"!ghetto ...\", \"Shiznit happens!\")\n+    @vcr.use_cassette('tests/cassettes/ghetto.yaml')\n+    def test_ghetto(self):\n+        self.assertCommand(\"!ghetto hi, whats up?\", \"hi, wassup?\")\n+        with requests_mock.Mocker() as m:\n+            m.register_uri('POST', 'http://www.gizoogle.net/textilizer.php',\n+                           text='test text which will not match with the regex')\n+            self.assertCommand(\"!ghetto ...\", \"Shiznit happens!\")", "created_at": "2018-08-10T06:32:57Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjYzNg==", "fields": {"body": "single quotes", "diff": "@@ -1,15 +1,15 @@\n import requests_mock\n import vcr\n \n-pytest_plugins = ['errbot.backends.test']\n+from tests.isolated_testcase import IsolatedTestCase\n \n-extra_plugin_dir = 'plugins'\n \n+class GhettoTest(IsolatedTestCase):\n \n-@vcr.use_cassette('tests/cassettes/ghetto.yaml')\n-def test_ghetto(testbot):\n-    testbot.assertCommand(\"!ghetto hi, whats up?\", \"hi, wassup?\")\n-    with requests_mock.Mocker() as m:\n-        m.register_uri('POST', 'http://www.gizoogle.net/textilizer.php',\n-                       text='test text which will not match with the regex')\n-        testbot.assertCommand(\"!ghetto ...\", \"Shiznit happens!\")\n+    @vcr.use_cassette('tests/cassettes/ghetto.yaml')\n+    def test_ghetto(self):\n+        self.assertCommand(\"!ghetto hi, whats up?\", \"hi, wassup?\")", "created_at": "2018-08-10T06:32:43Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NzMyMQ==", "fields": {"body": "you should be able to use requests-mock to break IGitt so it gives a RuntimeError , but ... not critical ... this is OK for now", "diff": "@@ -65,7 +68,7 @@ def __init__(self, bot, name=None):\n                              filter(lambda x: (x.full_name.split('/')[0] ==\n                                                self.GH_ORG_NAME),\n                                     self.IGH.write_repositories)}\n-        except RuntimeError:\n+        except RuntimeError:  # pragma: no cover, for logging", "created_at": "2018-08-10T06:36:20Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTExMzEyMA==", "fields": {"body": "do class initialisation in setUpClass , including creating the hidden directory , and then remove the directory in tearDownClass.", "diff": "@@ -0,0 +1,23 @@\n+import logging\n+import os\n+\n+from errbot.backends.test import FullStackTest\n+from pathlib import Path\n+\n+\n+class IsolatedTestCase(FullStackTest):\n+\n+    def setUp(self, extra_config=None):\n+        file_name = 'labhub.plug'\n+        file_rename = 'hidden'", "created_at": "2018-08-09T23:56:05Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MDA4OA==", "fields": {"body": "Undefined minimum_similarity_ratio", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:\n+            with open(file_name, 'r') as f:\n+                expected_revert_file_content = f.read()\n+\n+            matcher = SequenceMatcher(\n+                None, revert_file_content, expected_revert_file_content)\n+            similarity_ratio = matcher.real_quick_ratio()\n+            if similarity_ratio < minimum_similarity_ratio:", "created_at": "2018-08-10T14:04:50Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTMzMQ==", "fields": {"body": "I think we might wanna change this function into a private function (by adding _ prefix in front of the function name), since this function probably wouldn't be called neither by the programmer nor user in another source code", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):", "created_at": "2018-08-10T14:08:33Z", "last_edited_at": "2018-08-10T15:40:08Z", "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTY4Nw==", "fields": {"body": "I think we don't need to add this check again, as it's already done in line 142", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:", "created_at": "2018-08-10T14:09:38Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTM5NjYxNw==", "fields": {"body": "I think you have to add a report_year variable as well", "diff": "@@ -0,0 +1,356 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/li-boxuan", "created_at": "2018-08-10T22:14:57Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMTA4Mg==", "fields": {"body": "These files are of the \"expected revert commit\" that we are creating for comparison.\nLine 142 checks files in the reverted commit. So as to check any extra added or deleted files.", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:", "created_at": "2018-08-10T15:38:07Z", "last_edited_at": null, "author": "kriti21", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMjQyMw==", "fields": {"body": "yield from self.check_modified..", "diff": "@@ -0,0 +1,149 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_path, reverted_commit_sha):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:           Relative path to the modified file.\n+        :param reverted_commit_sha: Commit HASH of reverted commit.\n+        \"\"\"\n+        with open(file_name, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+        files_modified = ('git show --pretty=\"\" --name-status %s' %\n+                          (expected_revert_commit_sha))\n+        files_modified_list = []\n+        for line in files_modified:\n+            pos = line.find('\\t')\n+            change = line[:pos]\n+            if change == 'M':\n+                files_modified_list.append(line[pos+1:])\n+\n+        if file_name in files_modified_list:\n+            with open(file_name, 'r') as f:\n+                expected_revert_file_content = f.read()\n+\n+            matcher = SequenceMatcher(\n+                None, revert_file_content, expected_revert_file_content)\n+            similarity_ratio = matcher.real_quick_ratio()\n+            if similarity_ratio < minimum_similarity_ratio:\n+                yield Result(self, 'Changes in modified file %s of '\n+                             'revert commit are not exactly '\n+                             'revert of changes in reverted '\n+                             'commit.' %\n+                             file_name)\n+\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+\n+        return\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name in reverted_commit_modified_files_list:\n+                    self.check_modified_file_similarity(", "created_at": "2018-08-10T15:42:23Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NDkyOQ==", "fields": {"body": "gitlab --> GitLab, gitter --> Gitter, hackerrank --> HackerRank, openhub --> OpenHub", "diff": "@@ -8,36 +8,41 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+tarball_hash: <shasum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>\n+  - Phase 1 : <phase1 milsetone link>\n+  - Phase 2 : <phase2 milsetone link>\n+  - Phase 3 : <phase3 milsetone link>\n bio: >\n- <your bio goes here>\n+  <your bio goes here>\n social:\n- - GitHub:\n-   - username: <github username>\n-   - link: https://github.com/<github username>\n- - GitLab:\n-   - username: <gitlab username>\n-   - link: https://gitlab.com/<gitlab username>\n- - Gitter:\n-   - username: <gitter username>\n-   - link: https://gitter.im/<gitter username>\n- - HackerRank:\n-   - username: <hackerrank username>\n-   - link: https://hackerrank.com/<hackerrank username>\n+  - GitHub:\n+    - username: <github username>\n+    - link: https://github.com/<github username>\n+  - gitlab:", "created_at": "2018-08-12T06:58:29Z", "last_edited_at": null, "author": "Vamshi99", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NTA3Mg==", "fields": {"body": "it has become named sha256sum:", "diff": "@@ -8,36 +8,41 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+tarball_hash: <shasum of tarball>", "created_at": "2018-08-12T07:03:23Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NTE0Ng==", "fields": {"body": "do a few example entries.\nand the link should include a hash which is only 8 long.\nhttps://github.com/coala/cEPs/commit/e9f75878\nnot\nhttps://github.com/coala/cEPs/commit/e9f7587856e1c236d37e96f54a0cb4d72069776d\nto avoid line length errors", "diff": "@@ -8,36 +8,41 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+tarball_hash: <shasum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>\n+  - Phase 1 : <phase1 milsetone link>\n+  - Phase 2 : <phase2 milsetone link>\n+  - Phase 3 : <phase3 milsetone link>\n bio: >\n- <your bio goes here>\n+  <your bio goes here>\n social:\n- - GitHub:\n-   - username: <github username>\n-   - link: https://github.com/<github username>\n- - GitLab:\n-   - username: <gitlab username>\n-   - link: https://gitlab.com/<gitlab username>\n- - Gitter:\n-   - username: <gitter username>\n-   - link: https://gitter.im/<gitter username>\n- - HackerRank:\n-   - username: <hackerrank username>\n-   - link: https://hackerrank.com/<hackerrank username>\n+  - GitHub:\n+    - username: <github username>\n+    - link: https://github.com/<github username>\n+  - gitlab:\n+    - username: <gitlab username>\n+    - link: https://gitlab.com/<gitlab username>\n+  - gitter:\n+    - username: <gitter username>\n+    - link: https://gitter.im/<gitter username>\n+  - hackerrank:\n+    - username: <hackerrank username>\n+    - link: https://hackerrank.com/<hackerrank username>\n+  - openhub:\n+    - username: <openhub username>\n+    - link: https://openhub.net/accounts/<openhub username>\n email: <email>\n blog: <link to your blog>\n activity:\n- - <number>:\n-   - repo: <repo name>\n-   - link: <link>\n-   - details: >\n+  - <number>:", "created_at": "2018-08-12T07:06:17Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjUwNw==", "fields": {"body": "no space before :. YAMLlintbear will complain about that.", "diff": "@@ -8,36 +8,46 @@ organisation: coala\n organisation_link : https://coala.io", "created_at": "2018-08-12T07:55:52Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0Njc1OA==", "fields": {"body": "There should be 6 spaces before - username, not 4. Otherwise, YAMLlintbear will complain.\nSee https://docs.saltstack.com/en/latest/topics/troubleshooting/yaml_idiosyncrasies.html", "diff": "@@ -8,36 +8,46 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+sha256sum: <sha256sum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>\n+  - Phase 1 : <phase1 milsetone link>\n+  - Phase 2 : <phase2 milsetone link>\n+  - Phase 3 : <phase3 milsetone link>\n bio: >\n- <your bio goes here>\n+  <your bio goes here>\n social:\n- - GitHub:\n-   - username: <github username>\n-   - link: https://github.com/<github username>\n- - GitLab:\n-   - username: <gitlab username>\n-   - link: https://gitlab.com/<gitlab username>\n- - Gitter:\n-   - username: <gitter username>\n-   - link: https://gitter.im/<gitter username>\n- - HackerRank:\n-   - username: <hackerrank username>\n-   - link: https://hackerrank.com/<hackerrank username>\n+  - GitHub:\n+    - username: <github username>", "created_at": "2018-08-12T08:04:20Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjgwMw==", "fields": {"body": "Same as above.", "diff": "@@ -8,36 +8,46 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+sha256sum: <sha256sum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>\n+  - Phase 1 : <phase1 milsetone link>\n+  - Phase 2 : <phase2 milsetone link>\n+  - Phase 3 : <phase3 milsetone link>\n bio: >\n- <your bio goes here>\n+  <your bio goes here>\n social:\n- - GitHub:\n-   - username: <github username>\n-   - link: https://github.com/<github username>\n- - GitLab:\n-   - username: <gitlab username>\n-   - link: https://gitlab.com/<gitlab username>\n- - Gitter:\n-   - username: <gitter username>\n-   - link: https://gitter.im/<gitter username>\n- - HackerRank:\n-   - username: <hackerrank username>\n-   - link: https://hackerrank.com/<hackerrank username>\n+  - GitHub:\n+    - username: <github username>\n+    - link: https://github.com/<github username>\n+  - GitLab:\n+    - username: <gitlab username>\n+    - link: https://gitlab.com/<gitlab username>\n+  - Gitter:\n+    - username: <gitter username>\n+    - link: https://gitter.im/<gitter username>\n+  - HackerRank:\n+    - username: <hackerrank username>\n+    - link: https://hackerrank.com/<hackerrank username>\n+  - OpenHub:\n+    - username: <openhub username>\n+    - link: https://openhub.net/accounts/<openhub username>\n email: <email>\n blog: <link to your blog>\n activity:\n- - <number>:\n-   - repo: <repo name>\n-   - link: <link>\n-   - details: >\n+  - 1:\n+    - repo: cEPs", "created_at": "2018-08-12T08:05:56Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjgyOQ==", "fields": {"body": "milstone was a typo, and you copied that without detecting typo ;)", "diff": "@@ -8,36 +8,46 @@ organisation: coala\n organisation_link : https://coala.io\n project: <project title>\n project_link: <project link>\n+report_year: <year of completing GSoC>\n tarball: <tarball of patches' link>\n+sha256sum: <sha256sum of tarball>\n mentors: >\n- [mentor1]<link1> & [mentor2]<link2>\n+  [mentor1]<link1> & [mentor2]<link2>\n phase:\n- - Bonding : <bonding milstone link>\n- - Phase 1 : <phase1 milsetone link>\n- - Phase 2 : <phase2 milsetone link>\n- - Phase 3 : <phase3 milsetone link>\n+  - Bonding : <bonding milstone link>", "created_at": "2018-08-12T08:06:44Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTAyMw==", "fields": {"body": "Move this function definition into the inside of _check_modified_file_similarity() as this function would probably only called there.\nAnd it can be as simple as\ndef clean_inspect_revert_branch():\n    run_shell_command(switch_branch_command)\n    run_shell_command('git branch -D inspectrevertbranch')", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):", "created_at": "2018-08-12T10:56:03Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwMg==", "fields": {"body": ".. not in the reverted ..", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '", "created_at": "2018-08-12T10:59:55Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwNw==", "fields": {"body": ".. not in the reverted ...", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.deleted_files:\n+                if file_path not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '", "created_at": "2018-08-12T11:00:14Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTExNA==", "fields": {"body": "... not in the reverted ...", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.deleted_files:\n+                if file_path not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.modified_files:\n+                if file_path in reverted_commit_modified_files_list:\n+                    yield from self._check_modified_file_similarity(\n+                        file_path, reverted_commit_sha,\n+                        minimum_similarity_ratio)\n+\n+                else:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                 'file %s that is not in reverted '", "created_at": "2018-08-12T11:00:27Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTk3OQ==", "fields": {"body": "This string should be a constant, with substitution variable for \"added\", \"deleted\" & \"modified\"", "diff": "@@ -0,0 +1,148 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def clean_inspect_revert_branch(self, branchname):\n+        \"\"\"\n+        Delete git branch.\n+\n+        branchname:     Name of the branch to be deleted.\n+        \"\"\"\n+        switch_branch_command = 'git checkout ' + branchname\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+    def _check_modified_file_similarity(self, file_path,\n+                                        reverted_commit_sha,\n+                                        minimum_similarity_ratio):\n+        \"\"\"\n+        Compare the changes in file modified by the\n+        revert commit with the changes actually\n+        expected in the revert commit.\n+\n+        :param file_path:                   Relative path to the modified\n+                                            file.\n+        :param reverted_commit_sha:         Commit hash of reverted commit.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        with open(file_path, 'r') as f:\n+            revert_file_content = f.read()\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:  # pragma: no cover\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            self.clean_inspect_revert_branch('inspectrevertbranch')\n+            return\n+\n+        expected_revert_commit_sha = run_shell_command(\n+            'git rev-parse HEAD')[0].strip('\\n')\n+\n+        with open(file_path, 'r') as f:\n+            expected_revert_file_content = f.read()\n+\n+        matcher = SequenceMatcher(\n+            None, revert_file_content, expected_revert_file_content)\n+        similarity_ratio = matcher.real_quick_ratio()\n+        if similarity_ratio < minimum_similarity_ratio:\n+            yield Result(self, 'Changes in modified file %s of '\n+                         'revert commit are not exactly '\n+                         'revert of changes in reverted '\n+                         'commit.' %\n+                         file_path)\n+\n+        self.clean_inspect_revert_branch('inspectrevertbranch')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 reverted_commit_sha)\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_path in result.added_files:\n+                if file_path not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.deleted_files:\n+                if file_path not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % file_path)\n+\n+            for file_path in result.modified_files:\n+                if file_path in reverted_commit_modified_files_list:\n+                    yield from self._check_modified_file_similarity(\n+                        file_path, reverted_commit_sha,\n+                        minimum_similarity_ratio)\n+\n+                else:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                 'file %s that is not in reverted '", "created_at": "2018-08-12T11:35:37Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzA2Ng==", "fields": {"body": "You've created it right? maybe rephrase as-->which has the ability.. ?", "diff": "@@ -0,0 +1,195 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: '2018'\n+student: Vaibhav Kumar Rai\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Debug and Profile Bears\n+project_link: https://summerofcode.withgoogle.com/projects/#6109762077327360\n+tarball: https://rawgit.com/RaiVaibhav/GSoC-Report/master/project.tar.gz\n+sha256sum: d61862f8f8be5ec168b07741c09781ef2dcc991e44d87edc05e6d237044052b0\n+mentors: >\n+  [Mischa Kr\u00fcger](https://github.com/Makman2),\n+  [Fabian Neuschmidt](https://github.com/fneu),\n+  [Arjun Singh Yadav](https://github.com/arjunsinghy96)\n+phase:\n+ - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/18\n+ - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/52\n+ - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/53\n+ - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/54\n+bio: >\n+ I am third year student of B.Tech Computer Science Engineering at Shri Mata\n+ Vaishno Devi Uiversity, Katra, Jammu and Kashmir. I participated in GSoC and\n+ worked with [coala](https://coala.io) to create a better quality Bears by\n+ creating a tool which will have the ability to jump directly into Bear code", "created_at": "2018-08-12T12:12:25Z", "last_edited_at": null, "author": "sks444", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY0Ng==", "fields": {"body": "A\n---\n\nis needed here", "diff": "@@ -0,0 +1,248 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2>\n+  - Phase 1 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19>\n+  - Phase 2 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43>\n+  - Phase 3 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44>\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+      GitCommitBear: Parse remote with giturlparse\n+  - 2:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/8dfe8376\n+    - details: >\n+      Jinja2.py: Add support for ignore comments\n+  - 3:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/1ec5b92c\n+    - details: >\n+      cEP-0020: Add Newcomer metrics and Gamification system\n+  - 4:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/77f8802e\n+    - details: >\n+      org/cron.py: Use dict.get method to r_json\n+  - 5:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/791baab0\n+    - details: >\n+      Add IGitt Cache mechanism\n+  - 6:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1b8058c0\n+    - details: >\n+      requirements.txt: Use == for installing IGitt\n+  - 7:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/00f3081e\n+    - details: >\n+      Serialize coala issues on GitHub and GitLab\n+  - 8:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/10f622cc\n+    - details: >\n+      Add teams to Contributor Model\n+  - 9:\n+    - repo: IGitt\n+    - link: https://gitlab.com/gitmate/open-source/IGitt/commit/b3caeceb\n+    - details: >\n+      Repository: Add filter_merge_requests method\n+  - 10:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/bafb226b\n+    - details: >\n+      backend/db.sqlite3: Add old database files\n+  - 11:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/29c2fc4c\n+    - details: >\n+      org/: Only pass valid usernames to methods\n+  - 12:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/85372c2d\n+    - details: >\n+      org/cron.py: Fix contributors cron job\n+  - 13:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/d68a6684\n+    - details: >\n+      Serialize coala mrs on GitHub and GitLab\n+  - 14:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/d8e760bf\n+    - details: >\n+      data/tests/: Add tests for data app\n+  - 15:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/baae2218\n+    - details: >\n+      test_management_commands.py: Fix webservices error\n+  - 16:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/e09ae105\n+    - details: >\n+      data/: Fix import_contributors_data command\n+  - 17:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/829ceba7\n+    - details: >\n+      test_models.py: Fix tests\n+  - 18:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/34748e4b\n+    - detials: >\n+      Get 100% test coverage for the data app\n+  - 19:\n+    - repo: webservices.coala.io\n+    - link: https://github.com/sks444/webservices.coala.io/commit/9d263725\n+    - details: >\n+      Generate a fake api similar to coala's webservices\n+  - 20:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/537602ec\n+    - details: >\n+      data/: Import IGitt data\n+  - 21:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/68556ccb\n+    - details: >\n+      data/: Add url field to Issue and MergeRequest model\n+  - 22:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/ef814f6e\n+    - details: >\n+      Add gamification app\n+  - 23:\n+    - repo: igitt-django\n+    - link: https://gitlab.com/sks444/igitt-django/commit/824ced17\n+    - details: >\n+      Switch to sqlite3\n+  - 24:\n+    - repo: community\n+    - link: https://github.com/coala/community/pull/145/commits/b1ca875c\n+    - details: >\n+      [WIP] gitter/: Messages, Analysis and Import\n+  - 25:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/merge_requests/45/diffs?commit_id=993a6825\n+    - details: >\n+      [WIP] Serialize messages on gitter by newcomers\n+  - 26:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/merge_requests/59/diffs?commit_id=0581b4c8\n+    - details: >\n+      [WIP] org/: Use igitt_django models to save igitt data\n+  - 27:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/merge_requests/60/diffs?commit_id=25e750d6\n+    - details: >\n+      [WIP] org/: Make an api to show active newcomers\n+", "created_at": "2018-08-12T12:33:55Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY2MA==", "fields": {"body": "typo in details", "diff": "@@ -0,0 +1,248 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2>\n+  - Phase 1 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19>\n+  - Phase 2 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43>\n+  - Phase 3 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44>\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+      GitCommitBear: Parse remote with giturlparse\n+  - 2:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/8dfe8376\n+    - details: >\n+      Jinja2.py: Add support for ignore comments\n+  - 3:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/1ec5b92c\n+    - details: >\n+      cEP-0020: Add Newcomer metrics and Gamification system\n+  - 4:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/77f8802e\n+    - details: >\n+      org/cron.py: Use dict.get method to r_json\n+  - 5:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/791baab0\n+    - details: >\n+      Add IGitt Cache mechanism\n+  - 6:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1b8058c0\n+    - details: >\n+      requirements.txt: Use == for installing IGitt\n+  - 7:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/00f3081e\n+    - details: >\n+      Serialize coala issues on GitHub and GitLab\n+  - 8:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/10f622cc\n+    - details: >\n+      Add teams to Contributor Model\n+  - 9:\n+    - repo: IGitt\n+    - link: https://gitlab.com/gitmate/open-source/IGitt/commit/b3caeceb\n+    - details: >\n+      Repository: Add filter_merge_requests method\n+  - 10:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/bafb226b\n+    - details: >\n+      backend/db.sqlite3: Add old database files\n+  - 11:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/29c2fc4c\n+    - details: >\n+      org/: Only pass valid usernames to methods\n+  - 12:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/85372c2d\n+    - details: >\n+      org/cron.py: Fix contributors cron job\n+  - 13:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/d68a6684\n+    - details: >\n+      Serialize coala mrs on GitHub and GitLab\n+  - 14:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/d8e760bf\n+    - details: >\n+      data/tests/: Add tests for data app\n+  - 15:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/baae2218\n+    - details: >\n+      test_management_commands.py: Fix webservices error\n+  - 16:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/e09ae105\n+    - details: >\n+      data/: Fix import_contributors_data command\n+  - 17:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/829ceba7\n+    - details: >\n+      test_models.py: Fix tests\n+  - 18:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/34748e4b\n+    - detials: >", "created_at": "2018-08-12T12:34:17Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY4MA==", "fields": {"body": "You'll have to add indents in all descriptions\nWithout an indent jekyll will throw errors", "diff": "@@ -0,0 +1,248 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2>\n+  - Phase 1 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19>\n+  - Phase 2 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43>\n+  - Phase 3 : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44>\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+      GitCommitBear: Parse remote with giturlparse", "created_at": "2018-08-12T12:35:00Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1Mzg2Ng==", "fields": {"body": "Also consider removing the < since it might lead to incorrect links", "diff": "@@ -0,0 +1,248 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : <https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2>", "created_at": "2018-08-12T12:40:57Z", "last_edited_at": null, "author": "virresh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1NDM3MA==", "fields": {"body": "need to submit MRs\nhttps://gitlab.com/gitmate/open-source/igitt-django/merge_requests", "diff": "@@ -0,0 +1,250 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: f5b22d4d8a8fe0d24f322c65c633e0f1304ac3f1e6f9cc0fb105d6e1a04f1278\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2\n+  - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19\n+  - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43\n+  - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+       GitCommitBear: Parse remote with giturlparse\n+  - 2:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/8dfe8376\n+    - details: >\n+       Jinja2.py: Add support for ignore comments\n+  - 3:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/1ec5b92c\n+    - details: >\n+       cEP-0020: Add Newcomer metrics and Gamification system\n+  - 4:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/77f8802e\n+    - details: >\n+       org/cron.py: Use dict.get method to r_json\n+  - 5:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/791baab0\n+    - details: >\n+       Add IGitt Cache mechanism\n+  - 6:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1b8058c0\n+    - details: >\n+       requirements.txt: Use == for installing IGitt\n+  - 7:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/00f3081e\n+    - details: >\n+       Serialize coala issues on GitHub and GitLab\n+  - 8:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/10f622cc\n+    - details: >\n+       Add teams to Contributor Model\n+  - 9:\n+    - repo: IGitt\n+    - link: https://gitlab.com/gitmate/open-source/IGitt/commit/b3caeceb\n+    - details: >\n+       Repository: Add filter_merge_requests method\n+  - 10:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/bafb226b\n+    - details: >\n+       backend/db.sqlite3: Add old database files\n+  - 11:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/29c2fc4c\n+    - details: >\n+       org/: Only pass valid usernames to methods\n+  - 12:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/85372c2d\n+    - details: >\n+       org/cron.py: Fix contributors cron job\n+  - 13:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/d68a6684\n+    - details: >\n+       Serialize coala mrs on GitHub and GitLab\n+  - 14:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/d8e760bf\n+    - details: >\n+       data/tests/: Add tests for data app\n+  - 15:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/baae2218\n+    - details: >\n+       test_management_commands.py: Fix webservices error\n+  - 16:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/e09ae105\n+    - details: >\n+       data/: Fix import_contributors_data command\n+  - 17:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/829ceba7\n+    - details: >\n+       test_models.py: Fix tests\n+  - 18:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/34748e4b\n+    - details: >\n+       Get 100% test coverage for the data app\n+  - 19:\n+    - repo: webservices.coala.io\n+    - link: https://github.com/sks444/webservices.coala.io/commit/9d263725\n+    - details: >\n+       Generate a fake api similar to coala's webservices\n+  - 20:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/537602ec\n+    - details: >\n+       data/: Import IGitt data\n+  - 21:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/68556ccb\n+    - details: >\n+       data/: Add url field to Issue and MergeRequest model\n+  - 22:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/ef814f6e\n+    - details: >\n+       Add gamification app\n+  - 23:\n+    - repo: igitt-django\n+    - link: https://gitlab.com/sks444/igitt-django/commit/824ced17", "created_at": "2018-08-12T12:56:27Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDI5MQ==", "fields": {"body": "doesnt count", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585", "created_at": "2018-08-12T16:11:14Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDM0OQ==", "fields": {"body": "give this a better description, as it does more than just Ignore dist/ , and Ignore dist/ should have been an automated part of setting up a repo", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/", "created_at": "2018-08-12T16:13:53Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDMwOA==", "fields": {"body": "doesnt count.\nthis should have been automated with cookiecutter or moban", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a", "created_at": "2018-08-12T16:12:16Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDMyNA==", "fields": {"body": "nothing much done here", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3", "created_at": "2018-08-12T16:12:51Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ0Nw==", "fields": {"body": "doesnt count", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f", "created_at": "2018-08-12T16:15:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ3Nw==", "fields": {"body": "should have been automated; doesnt count", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf", "created_at": "2018-08-12T16:16:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ5NA==", "fields": {"body": "we provide templates for this; doesnt count", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7", "created_at": "2018-08-12T16:17:38Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQxNg==", "fields": {"body": "wouldnt have made it through any review; should have been squashed into a proper commit", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34", "created_at": "2018-08-12T16:15:40Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDU1NQ==", "fields": {"body": "this type of addition is being excluded by other students as it didnt involve any additional work", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7\n+   - details: Add setup.cfg\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8de282f0d31fb8e46e2eb96ef93b48004e60ab85", "created_at": "2018-08-12T16:19:49Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDU3Nw==", "fields": {"body": "should never have been merged with this in it", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7\n+   - details: Add setup.cfg\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8de282f0d31fb8e46e2eb96ef93b48004e60ab85\n+   - details: Support py37\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ec86b525cd9edd8b8eef181dc529e7d53fff3aad", "created_at": "2018-08-12T16:20:33Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDY0Ng==", "fields": {"body": "not suitable for activity report", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7\n+   - details: Add setup.cfg\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8de282f0d31fb8e46e2eb96ef93b48004e60ab85\n+   - details: Support py37\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ec86b525cd9edd8b8eef181dc529e7d53fff3aad\n+   - details: Debug Travis\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/0eeb52e867c2d01680adba4841a890d282c43e46\n+   - details: \".gitignore: Track MANIFEST.in and remove gibberish\"\n+\n+ - 28:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/34bbf0b780b6ae2b04dad3be5cecbe4100daedbc\n+   - details: \"README.rst: Minor nitpicks and cosmetics\"\n+\n+ - 29:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/234cb936a6f3fa59ca03a810212fbe1bb9e5441c\n+   - details: \"setup.py: mention lxml only in install_requires\"\n+\n+ - 30:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/2e40a6a3c45be434214e4b328fbbd489792ab5f0\n+   - details: \"setup.py: Remove pytest runner and import version correctly\"\n+\n+ - 31:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/e58e15ae7f22c466dd0488cee8d1e9e4a2250d7f\n+   - details: \"tests/__init__.py: TESTS and DIR are same\"\n+\n+ - 32:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/77c172ad74f53cdad29b75db234f1a145faa389d\n+   - details: Use Creator object to register new creators\n+\n+ - 33:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4ef597c5394df9d6cce86b50f9aff1aa33bb10da\n+   - details: \"tests/test_with_vulture.py: Use pytest.fixture\"\n+\n+ - 34:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/5dfd9655e34b73fc759037cb10e0250d4efb8900\n+   - details: \"tests/test_with_vulture.py: Use textwrap.dedent\"\n+\n+ - 35:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c68aa692d8d4b9fb8b15de72d5e9867c48c6023b\n+   - details: Use absolute imports everywhere\n+\n+ - 36:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ff49ab876363a173d7228a84037332009c1b1c1f\n+   - details: \"Use python's logging module.\"\n+\n+ - 37:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/bc3af5a9fe6af88433278b35db5026437a6da861\n+   - details: \"Define __version__ in vulture_whitelist/__main__.py\"\n+\n+ - 38:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d203f12a6f276ac60dab196f1fb2e3b24d1bb8ae\n+   - details: Bump up PyQt versions, update features\n+\n+ - 39:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b3dc28a1502920fd2d824b7b7c3e064bfcb5ed79\n+   - details: Use pytest's tmpdir fixture\n+\n+ - 40:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/aad70ab17bfec8e389292b3c645d0d4b6d931c3a\n+   - details: Single source package version\n+\n+ - 41:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/8efe8af\n+   - details: \"README.rst: Add examples to setup (#114)\"\n+\n+ - 42:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/7987889", "created_at": "2018-08-12T16:22:55Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDYyMg==", "fields": {"body": "should have been automated", "diff": "@@ -0,0 +1,439 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/RahulJha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+report_year: 2018\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp) & [Abdeali Kothari](https://github.com/AbdealiJK) & [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b8a8ec8b42b24287560fd07ff3cafe30e92fb585\n+   - details: Initial commit\n+\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/43f6dae0818cdba691fb3f78e6bb4381867beeb3\n+   - details: Create LICENSE\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/312313ad96e22386653ca39686a2eedfa00de82c\n+   - details: Use README.rst and LICENSE.txt\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d2fd1251e69e2e263645f9189c784a82fec81b4a\n+   - details: Add .gitignore\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/22fbb2281503fc75b8960df528e878e2cfa24ed3\n+   - details: Add docs and news\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package codet\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: Ignore dist/\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f8d854059f740d14147dc92906842e5c1bc04c34\n+   - details: Supply packages in setup.py\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/50e5dc1ec3578d02ac01804fda733bdec612998f\n+   - details: Ignore build/\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/836b31fd0a21407224c0f7d7381d1d03047b22f8\n+   - details: Ignore MANIFEST\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1ec97c5eb83ad7cb0872f96931309fc46e0d8caf\n+   - details: Set up .gitignore\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/186498c4ff7c91811620a5d6152ac8b2b2253eb7\n+   - details: Add setup.cfg\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8de282f0d31fb8e46e2eb96ef93b48004e60ab85\n+   - details: Support py37\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ec86b525cd9edd8b8eef181dc529e7d53fff3aad\n+   - details: Debug Travis\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/0eeb52e867c2d01680adba4841a890d282c43e46", "created_at": "2018-08-12T16:21:50Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ3NTU3Ng==", "fields": {"body": "remove this paragraph.\nWork to be done is not about you doing the work; it is just stuff which is left over.\nWhile we hope you'll continue, this work report is the end of your commitment.", "diff": "@@ -0,0 +1,187 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+report_year: 2018\n+date: 2018-08-12\n+student: Palash Nigam\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Optimize Caching for the NextGen-Core\n+project_link: https://summerofcode.withgoogle.com/projects/#6434190552203264\n+tarball: \n+sha256sum: \n+mentors: >\n+  [Mischa Kr\u00fcger](https://github.com/Makman2),\n+  [Shreyans Doshi](https://github.com/shreyans800755),\n+  [Fabian Neuschmidt](https://github.com/fneu)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/32\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/33\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/34\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/35\n+bio: >\n+  I am second year student of B.Tech Computer Science and Engineering at\n+  International Institute of Information and Technology, Bhubaneswar,\n+  Odisha, India. I worked as a GSoC student under coala to improve coala's\n+  I/O mechanism using `FileFactory` class and adding features to provide\n+  more support for NextGen-Core's caching mechanism.\n+social:\n+  - GitHub:\n+      - username: palash25\n+      - link: https://github.com/palash25\n+  - GitLab:\n+      - username: palash25\n+      - link: https://gitlab.com/palash25\n+  - Gitter:\n+      - username: palash25\n+      - link: https://gitter.im/palash25\n+  - Openhub:\n+      - username: palash25\n+      - link: https://www.openhub.net/accounts/palash25\n+email: npalash25@gmail.com\n+blog: https://medium.com/gsoc-with-coala/\n+activity:\n+  - 1:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/7272ff6b9463a5cff33c431f73a416e5a999f4ac\n+      - details: >\n+         cEP-0026.md: Adds optimize caching cEP.\n+  - 2:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/a228c2b39ef17b3c6d3572853601dfa05b938173\n+      - details: >\n+         Updated the details of Optimize Caching project.\n+  - 3:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/759f74f88206c58ac80dd7acd12cadbae13f28cb\n+      - details: >\n+         optimize_caching.md: Changed primary mentor from adtac to Makman2.\n+  - 4:\n+      - repo: devops\n+      - link: https://github.com/coala/devops/commit/e309383bc5aacb007c4986bd74197238a4fcc96d\n+      - details: >\n+         planet.ini: Add palash25 gsoc blog feed.\n+  - 5:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/b06dfe44fa99ffeb997f6f0a4bf302938fb9734c\n+      - details: >\n+         Added `FileFactory` class. Objects of this class are used\n+         to represent files and replace file contents in the file dict.\n+  - 6:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/77c1dca15dc82d1753aa0962017899392d0033ec\n+      - details: >\n+         Added `Directory` class. This class will act as an interface\n+         to directories providing useful information about them. The\n+         objects of this class can be used by bears that operate only\n+         on directories and perform analysis based on the things like\n+         directory structure.\n+  - 7:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/fc568a01ba489376b4d6efac12ea772cb3cb1573\n+      - details: >\n+         Added `memoized_property`. `memoized_property` is a decorator\n+         that caches the properties of `FileFactory` class.\n+  - 8:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/81bbca42f82319aed22ba7f90781d886d559d4dd\n+      - details: >\n+         NextGen_Core.rst: Update caching section. \n+  - 9:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/7bc5d7f7b84e91da9f6aa2f77d40f92e66c850d5\n+      - details: >\n+         IO.rst: Add FileFactory docs.\n+  - 10:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/7bc5d7f7b84e91da9f6aa2f77d40f92e66c850d5\n+      - details: >\n+         NextGen_Core.rst: Add link to IO docs.\n+  - 11:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/54622c2b03e1b84bb122130af182424d706d3de4\n+      - details: >\n+         `FileFactory`: Use `cached_property` instead of `memoized_property`.\n+  - 12:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/415361f5a4c12cd65dd4cc171d2a8ebbba3bc92c\n+      - details: >\n+         A new attribute `newline` was added to `FileFactory` to force\n+         newlines on the file content.\n+  - 13:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/fbe8452360eb39340ace4334c2df133a1ee6de97\n+      - details: >\n+         Processing: Add middleware `FileDict` that provides the bears\n+         with the actual file contents instead of the `FileFactory` objects.\n+  - 14:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/e138e4875fc6d1474a93758881f550e05df8e329\n+      - details: >\n+         Processing: Modify tests to use actual files instead of hard coded\n+         tuples as file content.\n+  - 15:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/3ae03bec665943aa6173047245ca929a0a754c69\n+      - details: >\n+         Added support for collection types like `dict` and `set` for\n+         `persistent_hash`.\n+---\n+\n+### Optimize Caching for the NextGen-Core\n+\n+#### Work Done\n+\n+1. Improved I/O mechanism for coala.\n+   1. Added a class `FileFactory` to interface with files and to provide file\n+      contents in different forms like string, binary data or as a tuple.\n+   2. Added a `Directory` class to interface with directories and provide\n+      useful information about them such as the directory path, parent\n+      directory and timestamps. This will be later used to implement ignore\n+      directories functionality.\n+   3. Added documentation for `FileFactory` and improved the NextGen-Core\n+      docs.\n+\n+2. Caching support.\n+   1. Cached the properties of `FileFactory` which turned out to be a\n+      significant performance boost in consecutive coala runs.\n+   2. Added support for unordered collection types in `persistent_hash`\n+      which improved the NextGen-Core's ability to hash much more\n+      complex task objects (which are used in NextGen caching).\n+\n+3. Integrated `FileFactory` with the core.\n+   1. Added line endings support for `FileFactory`.\n+   2. Implemented a middleware `FileDict` that mimics a dictionary\n+      and provides the bears in the old core with the actual file\n+      contents instead of the `FileFactory` objects thereby maintaining\n+      backwards compatibility with the old core.\n+   3. Modified the tests to use actual files and the `FileFactory` objects\n+      instead of hard-coded file contents.\n+\n+#### Challenges\n+\n+One of the first challenges I faced was designing the `FileFactory`.\n+But with my mentors help we were able to come up with a design that\n+could be used for the NextGen-Core and also maintained compatibility\n+with the old core.\n+\n+The biggest challenge that I faced these three months for the integration\n+of the aforementioned `FileFactory` with the core. Initially about thirty\n+tests were failing but after discussing the idea of using a middleware\n+(`FileDict`) to maintain backwards compatibilty with the old core the test\n+failures were significantly reduced to just six. After a while I discovered\n+that `FileFactory` was somehow removing line-endings from the file contents\n+which was fixed by adding support for newlines in `FileFactory` which in turn\n+led to a successful integration.\n+\n+#### Work to be done\n+\n+Two major features were left out because of time constraints:\n+1. Ignore directories functionality for the NextGen-Core.\n+2. Cache control flags for the NextGen-Core (which was\n+   already mentioned as a stretch issue in my GSoC proposal).\n+\n+I have started the work on implementing the cache control flags and will", "created_at": "2018-08-13T01:11:13Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODA5NA==", "fields": {"body": "It would be good to explain motivation/target being flask and other web frameworks (and usable for other-usecases too)", "diff": "@@ -0,0 +1,388 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: 2018\n+title: Rahul Jha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp), [Abdeali Kothari](https://github.com/AbdealiJK), [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/commit/f551a2e\n+   - details: Add automatic whitelist generator for Vulture\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package code in modules and improve documentation\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: \"Ignore dist/; minor improvements to docs\"\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/34bbf0b780b6ae2b04dad3be5cecbe4100daedbc\n+   - details: \"README.rst: Minor nitpicks and cosmetics\"\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/234cb936a6f3fa59ca03a810212fbe1bb9e5441c\n+   - details: \"setup.py: mention lxml only in install_requires\"\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/2e40a6a3c45be434214e4b328fbbd489792ab5f0\n+   - details: \"setup.py: Remove pytest runner and import version correctly\"\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/e58e15ae7f22c466dd0488cee8d1e9e4a2250d7f\n+   - details: \"tests/__init__.py: TESTS and DIR are same\"\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/77c172ad74f53cdad29b75db234f1a145faa389d\n+   - details: Use Creator object to register new creators\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4ef597c5394df9d6cce86b50f9aff1aa33bb10da\n+   - details: \"tests/test_with_vulture.py: Use pytest.fixture\"\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/5dfd9655e34b73fc759037cb10e0250d4efb8900\n+   - details: \"tests/test_with_vulture.py: Use textwrap.dedent\"\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c68aa692d8d4b9fb8b15de72d5e9867c48c6023b\n+   - details: Use absolute imports everywhere\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ff49ab876363a173d7228a84037332009c1b1c1f\n+   - details: \"Use python's logging module.\"\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/bc3af5a9fe6af88433278b35db5026437a6da861\n+   - details: \"Define __version__ in vulture_whitelist/__main__.py\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d203f12a6f276ac60dab196f1fb2e3b24d1bb8ae\n+   - details: Bump up PyQt versions, update features\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b3dc28a1502920fd2d824b7b7c3e064bfcb5ed79\n+   - details: Use pytest's tmpdir fixture\n+\n+ - 28:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/aad70ab17bfec8e389292b3c645d0d4b6d931c3a\n+   - details: Single source package version\n+\n+ - 29:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/8efe8af\n+   - details: \"README.rst: Add examples to setup (#114)\"\n+\n+ - 30:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/f216902\n+   - details: \"Update tests to only pass supported arguments to literal_eval (#118)\"\n+\n+ - 31:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/1c22682\n+   - details: \"Fix PEP8 issues (#120)\"\n+\n+ - 32:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/ade4e44\n+   - details: \"Update TODO file (#122)\"\n+\n+ - 33:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/4cb052a\n+   - details: \"Add coveralls support to track code coverage (#124)\"\n+\n+ - 34:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e0e384e\n+   - details: \"Document exit codes (#123)\"\n+\n+ - 35:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/01a5031\n+   - details: \"Increase test coverage (#126)\"\n+\n+ - 36:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/5f77d81\n+   - details: \"Add coveralls badge to README (#127)\"\n+\n+ - 37:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e3ea074\n+   - details: \"Use argparse instead of optparse (#119)\"\n+\n+ - 38:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e425c9a\n+   - details: \"Test file with non utf-8 encoding (#121)\"\n+\n+ - 39:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/7ff8d68\n+   - details: \"Skip async tests correctly (#128)\"\n+\n+ - 40:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/d135592\n+   - details: \"tests/test_errors.py: Use pytest's tmpdir fixture (#131)\"\n+\n+ - 41:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/544f960\n+   - details: \"Use absolute imports (#132)\"\n+\n+ - 42:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/fcd9df8\n+   - details: \"Single-source package version string (#134)\"\n+\n+ - 43:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/3899b22\n+   - details: \"Whitelists: use non-dynamic objects directly instead of mocking them. (#137)\"\n+\n+ - 44:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/527b93c\n+   - details: \"Add --make-whitelist flag (#135). \"\n+\n+ - 45:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/47116ab\n+   - details: \"Add --ignore-names flag (#139).\"\n+\n+ - 46:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/932e52a28a65286e886d98a4691f9008a5f5e892\n+   - details: Add analysis report for localstack\n+\n+ - 47:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/36f88da77dde12334e97c31d5f5a752e79a3a12c\n+   - details: Pre-format logs\n+\n+ - 48:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e50a54e82f7d63ec2892d5fa28f49ab09d277708\n+   - details: Update localstack_analysis.md\n+\n+ - 49:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/b47fc3691055d618576f9142d36832cd1f94fd8c\n+   - details: Make report conform to the given template\n+\n+ - 50:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/513e41cc4904760196e591602e3356bd1a504a5c\n+   - details: Update localstack_analysis.md\n+\n+ - 51:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/3ab0a800db0c2200f0c666d4e198c8558c5fc325\n+   - details: create analysis report for system design primer\n+\n+ - 52:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e40be61b4e6e9cf97d689a328e8aa27c2637a85c\n+   - details: Organise reports into folders.\n+\n+ - 53:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/85de1d41b14544e634a65fe5cb215dfee31eb2cf\n+   - details: add header for localstack\n+\n+ - 54:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/89bfb08fc7fdcada02389bd4251632140a7da86c\n+   - details: Add report for relational-networks\n+\n+ - 55:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/00a0492071c449ee34e36fec7a59254133be2f1b\n+   - details: Add footer\n+\n+ - 56:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/43253a9384cc655c9e854766714cc3f5240e55bb\n+   - details: \"Add report for qutebrowser (#4)\"\n+\n+ - 57:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/5bfabaca9902017815cc01d3b38e92a21107d86d\n+   - details: \"Add report for Sharppy (#5)\"\n+---\n+\n+### Improving whitelisting infrastructure for Vulture\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) Created a command line tool which takes in sip files as input and spits a\n+whitelist with all the virtual functions defined in the [sip][sip] files. This\n+tool was further used to create a whitelist for PyQt which can hereby be used\n+with any project using PyQt. The tool is now completely tested and documented.\n+\n+<br>\n+\n+2.) Created `--make-whitelist` flag to enable reporting of the results in a\n+format which can be directly used as a whitelist. This significantly eased the\n+process of creating and maintaing a whitelist for a project.\n+\n+<br>\n+\n+3.) Implemented a ignoring mechanism for Vulture (`--ignore-names` and", "created_at": "2018-08-13T04:11:12Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODAwMA==", "fields": {"body": "Grammar: an* ignoring\n:D", "diff": "@@ -0,0 +1,388 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: 2018\n+title: Rahul Jha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp), [Abdeali Kothari](https://github.com/AbdealiJK), [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/commit/f551a2e\n+   - details: Add automatic whitelist generator for Vulture\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package code in modules and improve documentation\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: \"Ignore dist/; minor improvements to docs\"\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/34bbf0b780b6ae2b04dad3be5cecbe4100daedbc\n+   - details: \"README.rst: Minor nitpicks and cosmetics\"\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/234cb936a6f3fa59ca03a810212fbe1bb9e5441c\n+   - details: \"setup.py: mention lxml only in install_requires\"\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/2e40a6a3c45be434214e4b328fbbd489792ab5f0\n+   - details: \"setup.py: Remove pytest runner and import version correctly\"\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/e58e15ae7f22c466dd0488cee8d1e9e4a2250d7f\n+   - details: \"tests/__init__.py: TESTS and DIR are same\"\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/77c172ad74f53cdad29b75db234f1a145faa389d\n+   - details: Use Creator object to register new creators\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4ef597c5394df9d6cce86b50f9aff1aa33bb10da\n+   - details: \"tests/test_with_vulture.py: Use pytest.fixture\"\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/5dfd9655e34b73fc759037cb10e0250d4efb8900\n+   - details: \"tests/test_with_vulture.py: Use textwrap.dedent\"\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c68aa692d8d4b9fb8b15de72d5e9867c48c6023b\n+   - details: Use absolute imports everywhere\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ff49ab876363a173d7228a84037332009c1b1c1f\n+   - details: \"Use python's logging module.\"\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/bc3af5a9fe6af88433278b35db5026437a6da861\n+   - details: \"Define __version__ in vulture_whitelist/__main__.py\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d203f12a6f276ac60dab196f1fb2e3b24d1bb8ae\n+   - details: Bump up PyQt versions, update features\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b3dc28a1502920fd2d824b7b7c3e064bfcb5ed79\n+   - details: Use pytest's tmpdir fixture\n+\n+ - 28:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/aad70ab17bfec8e389292b3c645d0d4b6d931c3a\n+   - details: Single source package version\n+\n+ - 29:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/8efe8af\n+   - details: \"README.rst: Add examples to setup (#114)\"\n+\n+ - 30:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/f216902\n+   - details: \"Update tests to only pass supported arguments to literal_eval (#118)\"\n+\n+ - 31:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/1c22682\n+   - details: \"Fix PEP8 issues (#120)\"\n+\n+ - 32:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/ade4e44\n+   - details: \"Update TODO file (#122)\"\n+\n+ - 33:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/4cb052a\n+   - details: \"Add coveralls support to track code coverage (#124)\"\n+\n+ - 34:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e0e384e\n+   - details: \"Document exit codes (#123)\"\n+\n+ - 35:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/01a5031\n+   - details: \"Increase test coverage (#126)\"\n+\n+ - 36:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/5f77d81\n+   - details: \"Add coveralls badge to README (#127)\"\n+\n+ - 37:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e3ea074\n+   - details: \"Use argparse instead of optparse (#119)\"\n+\n+ - 38:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e425c9a\n+   - details: \"Test file with non utf-8 encoding (#121)\"\n+\n+ - 39:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/7ff8d68\n+   - details: \"Skip async tests correctly (#128)\"\n+\n+ - 40:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/d135592\n+   - details: \"tests/test_errors.py: Use pytest's tmpdir fixture (#131)\"\n+\n+ - 41:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/544f960\n+   - details: \"Use absolute imports (#132)\"\n+\n+ - 42:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/fcd9df8\n+   - details: \"Single-source package version string (#134)\"\n+\n+ - 43:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/3899b22\n+   - details: \"Whitelists: use non-dynamic objects directly instead of mocking them. (#137)\"\n+\n+ - 44:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/527b93c\n+   - details: \"Add --make-whitelist flag (#135). \"\n+\n+ - 45:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/47116ab\n+   - details: \"Add --ignore-names flag (#139).\"\n+\n+ - 46:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/932e52a28a65286e886d98a4691f9008a5f5e892\n+   - details: Add analysis report for localstack\n+\n+ - 47:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/36f88da77dde12334e97c31d5f5a752e79a3a12c\n+   - details: Pre-format logs\n+\n+ - 48:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e50a54e82f7d63ec2892d5fa28f49ab09d277708\n+   - details: Update localstack_analysis.md\n+\n+ - 49:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/b47fc3691055d618576f9142d36832cd1f94fd8c\n+   - details: Make report conform to the given template\n+\n+ - 50:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/513e41cc4904760196e591602e3356bd1a504a5c\n+   - details: Update localstack_analysis.md\n+\n+ - 51:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/3ab0a800db0c2200f0c666d4e198c8558c5fc325\n+   - details: create analysis report for system design primer\n+\n+ - 52:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e40be61b4e6e9cf97d689a328e8aa27c2637a85c\n+   - details: Organise reports into folders.\n+\n+ - 53:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/85de1d41b14544e634a65fe5cb215dfee31eb2cf\n+   - details: add header for localstack\n+\n+ - 54:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/89bfb08fc7fdcada02389bd4251632140a7da86c\n+   - details: Add report for relational-networks\n+\n+ - 55:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/00a0492071c449ee34e36fec7a59254133be2f1b\n+   - details: Add footer\n+\n+ - 56:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/43253a9384cc655c9e854766714cc3f5240e55bb\n+   - details: \"Add report for qutebrowser (#4)\"\n+\n+ - 57:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/5bfabaca9902017815cc01d3b38e92a21107d86d\n+   - details: \"Add report for Sharppy (#5)\"\n+---\n+\n+### Improving whitelisting infrastructure for Vulture\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) Created a command line tool which takes in sip files as input and spits a\n+whitelist with all the virtual functions defined in the [sip][sip] files. This\n+tool was further used to create a whitelist for PyQt which can hereby be used\n+with any project using PyQt. The tool is now completely tested and documented.\n+\n+<br>\n+\n+2.) Created `--make-whitelist` flag to enable reporting of the results in a\n+format which can be directly used as a whitelist. This significantly eased the\n+process of creating and maintaing a whitelist for a project.\n+\n+<br>\n+\n+3.) Implemented a ignoring mechanism for Vulture (`--ignore-names` and", "created_at": "2018-08-13T04:10:27Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODIyMw==", "fields": {"body": "Minor: 100\"%\"\nTo be a bit pedantic: The python3.7 one is not fix-tests (as they were never tested before) but \"ensure support for py3.7 in CI/CD\" or similar\nAnd should probably be merged with the below point", "diff": "@@ -0,0 +1,388 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: 2018\n+title: Rahul Jha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp), [Abdeali Kothari](https://github.com/AbdealiJK), [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/29\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/30\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/31\n+bio: >\n+ Rahul is currently a junior, studying Electronics Engineering at Zakir Hussain\n+ College of Engineering and Technology, Aligarh Muslim University. He loves the\n+ ideology behind Free and Open Source Software and reads about the history of\n+ this revolutionary movement in his leisure time.\n+social:\n+ - GitHub:\n+   - username: RJ722\n+   - link: https://github.com/RJ722\n+ - GitLab:\n+   - username: RJ722\n+   - link: https://gitlab.com/RJ722\n+ - Gitter:\n+   - username: RJ722\n+   - link: https://gitter.im/RJ722\n+ - Openhub:\n+   - username: RJ722\n+   - link: https://openhub.net/accounts/RJ722\n+email: rj722@protonmail.com\n+blog: https://rj722.github.io/blog\n+activity:\n+ - 1:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/commit/f551a2e\n+   - details: Add automatic whitelist generator for Vulture\n+ - 2:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/7fc63f7097ba83093740b4b3c1eea788fd485dd1\n+   - details: Package code in modules and improve documentation\n+\n+ - 3:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/680cc58051d3640b73f9ae1ce936193843b9b604\n+   - details: \"Ignore dist/; minor improvements to docs\"\n+\n+ - 4:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/111bc5d5cab4c516a7eecb75dd637722f1b1aa37\n+   - details: Remove nargs=1\n+\n+ - 5:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/cbdbd4e391925b69c93d64c794d925422b9a10e6\n+   - details: Minor Cosmetics\n+\n+ - 6:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c6c25145b9bdd8372b4f4388eddbbbeeab13ff7b\n+   - details: Rename genereators/qt_utils.py to generators/qt.py\n+\n+ - 7:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/1fccd02ac6fdd893801df0dc498b96b22ef976af\n+   - details: Rename generators to vulture_whitelist\n+\n+ - 8:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/67c3f185452bfb222ff0e78ae6ddb3b15a04782b\n+   - details: Use QtWhitelistCreator as a Creator object\n+\n+ - 9:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/473df29f75460120bbcd97dbb328ac5277032a71\n+   - details: Add tests and configure test suite\n+\n+ - 10:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/fbb42e54b52d88fff95a86eb8cf35da4167a4ad8\n+   - details: Add travis and coveralls\n+\n+ - 11:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/f5c6dfea2ab0b8014413745690dbd299aaa29770\n+   - details: Add sip as a dependency\n+\n+ - 12:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/870b9591fbf84116b9e36a00f377676cead01121\n+   - details: Install sip in travis\n+\n+ - 13:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4170429aa6372e80a7f5698d7908b29f9aaec920\n+   - details: Sort before writing xml\n+\n+ - 14:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/9c0307a379b7c83ca885e6e79ea4d1620fe8765d\n+   - details: \"Install lxml when using local repository.\"\n+\n+ - 15:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/8b6cbd5b5cb03302c90c818848e6992fcf45b74a\n+   - details: \"setup.py: test requires vulture, not sip\"\n+\n+ - 16:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/34bbf0b780b6ae2b04dad3be5cecbe4100daedbc\n+   - details: \"README.rst: Minor nitpicks and cosmetics\"\n+\n+ - 17:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/234cb936a6f3fa59ca03a810212fbe1bb9e5441c\n+   - details: \"setup.py: mention lxml only in install_requires\"\n+\n+ - 18:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/2e40a6a3c45be434214e4b328fbbd489792ab5f0\n+   - details: \"setup.py: Remove pytest runner and import version correctly\"\n+\n+ - 19:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/e58e15ae7f22c466dd0488cee8d1e9e4a2250d7f\n+   - details: \"tests/__init__.py: TESTS and DIR are same\"\n+\n+ - 20:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/77c172ad74f53cdad29b75db234f1a145faa389d\n+   - details: Use Creator object to register new creators\n+\n+ - 21:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/4ef597c5394df9d6cce86b50f9aff1aa33bb10da\n+   - details: \"tests/test_with_vulture.py: Use pytest.fixture\"\n+\n+ - 22:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/5dfd9655e34b73fc759037cb10e0250d4efb8900\n+   - details: \"tests/test_with_vulture.py: Use textwrap.dedent\"\n+\n+ - 23:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/c68aa692d8d4b9fb8b15de72d5e9867c48c6023b\n+   - details: Use absolute imports everywhere\n+\n+ - 24:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/ff49ab876363a173d7228a84037332009c1b1c1f\n+   - details: \"Use python's logging module.\"\n+\n+ - 25:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/bc3af5a9fe6af88433278b35db5026437a6da861\n+   - details: \"Define __version__ in vulture_whitelist/__main__.py\"\n+\n+ - 26:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/d203f12a6f276ac60dab196f1fb2e3b24d1bb8ae\n+   - details: Bump up PyQt versions, update features\n+\n+ - 27:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/b3dc28a1502920fd2d824b7b7c3e064bfcb5ed79\n+   - details: Use pytest's tmpdir fixture\n+\n+ - 28:\n+   - repo: vulture-whitelist-generators\n+   - link: https://github.com/RJ722/vulture-whitelist-generators/commit/aad70ab17bfec8e389292b3c645d0d4b6d931c3a\n+   - details: Single source package version\n+\n+ - 29:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/8efe8af\n+   - details: \"README.rst: Add examples to setup (#114)\"\n+\n+ - 30:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/f216902\n+   - details: \"Update tests to only pass supported arguments to literal_eval (#118)\"\n+\n+ - 31:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/1c22682\n+   - details: \"Fix PEP8 issues (#120)\"\n+\n+ - 32:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/ade4e44\n+   - details: \"Update TODO file (#122)\"\n+\n+ - 33:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/4cb052a\n+   - details: \"Add coveralls support to track code coverage (#124)\"\n+\n+ - 34:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e0e384e\n+   - details: \"Document exit codes (#123)\"\n+\n+ - 35:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/01a5031\n+   - details: \"Increase test coverage (#126)\"\n+\n+ - 36:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/5f77d81\n+   - details: \"Add coveralls badge to README (#127)\"\n+\n+ - 37:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e3ea074\n+   - details: \"Use argparse instead of optparse (#119)\"\n+\n+ - 38:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/e425c9a\n+   - details: \"Test file with non utf-8 encoding (#121)\"\n+\n+ - 39:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/7ff8d68\n+   - details: \"Skip async tests correctly (#128)\"\n+\n+ - 40:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/d135592\n+   - details: \"tests/test_errors.py: Use pytest's tmpdir fixture (#131)\"\n+\n+ - 41:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/544f960\n+   - details: \"Use absolute imports (#132)\"\n+\n+ - 42:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/fcd9df8\n+   - details: \"Single-source package version string (#134)\"\n+\n+ - 43:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/3899b22\n+   - details: \"Whitelists: use non-dynamic objects directly instead of mocking them. (#137)\"\n+\n+ - 44:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/527b93c\n+   - details: \"Add --make-whitelist flag (#135). \"\n+\n+ - 45:\n+   - repo: vulture\n+   - link: https://github.com/jendrikseipp/vulture/commit/47116ab\n+   - details: \"Add --ignore-names flag (#139).\"\n+\n+ - 46:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/932e52a28a65286e886d98a4691f9008a5f5e892\n+   - details: Add analysis report for localstack\n+\n+ - 47:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/36f88da77dde12334e97c31d5f5a752e79a3a12c\n+   - details: Pre-format logs\n+\n+ - 48:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e50a54e82f7d63ec2892d5fa28f49ab09d277708\n+   - details: Update localstack_analysis.md\n+\n+ - 49:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/b47fc3691055d618576f9142d36832cd1f94fd8c\n+   - details: Make report conform to the given template\n+\n+ - 50:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/513e41cc4904760196e591602e3356bd1a504a5c\n+   - details: Update localstack_analysis.md\n+\n+ - 51:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/3ab0a800db0c2200f0c666d4e198c8558c5fc325\n+   - details: create analysis report for system design primer\n+\n+ - 52:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/e40be61b4e6e9cf97d689a328e8aa27c2637a85c\n+   - details: Organise reports into folders.\n+\n+ - 53:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/85de1d41b14544e634a65fe5cb215dfee31eb2cf\n+   - details: add header for localstack\n+\n+ - 54:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/89bfb08fc7fdcada02389bd4251632140a7da86c\n+   - details: Add report for relational-networks\n+\n+ - 55:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/00a0492071c449ee34e36fec7a59254133be2f1b\n+   - details: Add footer\n+\n+ - 56:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/43253a9384cc655c9e854766714cc3f5240e55bb\n+   - details: \"Add report for qutebrowser (#4)\"\n+\n+ - 57:\n+   - repo: vulture-analysis\n+   - link: https://github.com/jendrikseipp/vulture-analysis/commit/5bfabaca9902017815cc01d3b38e92a21107d86d\n+   - details: \"Add report for Sharppy (#5)\"\n+---\n+\n+### Improving whitelisting infrastructure for Vulture\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) Created a command line tool which takes in sip files as input and spits a\n+whitelist with all the virtual functions defined in the [sip][sip] files. This\n+tool was further used to create a whitelist for PyQt which can hereby be used\n+with any project using PyQt. The tool is now completely tested and documented.\n+\n+<br>\n+\n+2.) Created `--make-whitelist` flag to enable reporting of the results in a\n+format which can be directly used as a whitelist. This significantly eased the\n+process of creating and maintaing a whitelist for a project.\n+\n+<br>\n+\n+3.) Implemented a ignoring mechanism for Vulture (`--ignore-names` and\n+`--ignore-decorators`) - thereby enabling users to omit the result(s) which\n+match with the given argument(s) (a glob pattern).\n+\n+<br>\n+\n+4.) Increased test coverage of Vulture from already excellent 95% to 100. Also,", "created_at": "2018-08-13T04:12:59Z", "last_edited_at": null, "author": "AbdealiJK", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4OTU4NA==", "fields": {"body": "indentation must pass yamllint", "diff": "@@ -0,0 +1,388 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+report_year: 2018\n+title: Rahul Jha\n+student: Rahul Jha\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Improve Whitelisting Infrastructure for Vulture\n+project_link: https://summerofcode.withgoogle.com/projects/#5620743946108928\n+tarball: https://drive.google.com/file/d/12HgBb2Wdjl6Zzm7mDqCt13ke8VHj7_Bb/view\n+mentors: >\n+ [Jendrik Seipp](https://github.com/jendrikseipp), [Abdeali Kothari](https://github.com/AbdealiJK), [Florian Bruhin](https://github.com/The-Compiler)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/28", "created_at": "2018-08-13T04:29:29Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDQ5OQ==", "fields": {"body": "Capitalize VCS as it's an abbreviation", "diff": "@@ -0,0 +1,141 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/KritiRohilla\n+student: Kriti Rohilla\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Git Commit Content Inspection\n+project_link: https://summerofcode.withgoogle.com/projects/#5636421247827968\n+tarball: https://raw.githubusercontent.com/kriti21/GSoC-2018-Report/master/ProjectPatches.tar\n+mentors: >\n+ [Saurav Singh](https://github.com/damngamerz)\n+ [Rafid Aslam](https://github.com/refeed)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/9\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/36\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/41\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/42\n+bio: >\n+ I am in my pre-final year at University Institute of Engineering and Technology,\n+ Panjab University. As part of my GSoC 2018 project, I worked on vcs related bears", "created_at": "2018-08-11T03:03:56Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDU5Ng==", "fields": {"body": "I think markdown syntax for ordered-list is enough (1. .... (without the ))", "diff": "@@ -0,0 +1,141 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/KritiRohilla\n+student: Kriti Rohilla\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Git Commit Content Inspection\n+project_link: https://summerofcode.withgoogle.com/projects/#5636421247827968\n+tarball: https://raw.githubusercontent.com/kriti21/GSoC-2018-Report/master/ProjectPatches.tar\n+mentors: >\n+ [Saurav Singh](https://github.com/damngamerz)\n+ [Rafid Aslam](https://github.com/refeed)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/9\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/36\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/41\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/42\n+bio: >\n+ I am in my pre-final year at University Institute of Engineering and Technology,\n+ Panjab University. As part of my GSoC 2018 project, I worked on vcs related bears\n+ in [coala-bears](https://github.com/coala/coala-bears/) project. The main task was\n+ to detect special git commits like `git revert`, `git merge` and commits that skip\n+ CI build and inspect such commits to see whether they meet the requirements of the\n+ project.\n+social:\n+ - GitHub:\n+   - username: kriti21\n+   - link: https://github.com/kriti21\n+ - GitLab:\n+   - username: kriti21\n+   - link: https://gitlab.com/kriti21\n+ - Gitter:\n+   - username: kriti21\n+   - link: https://gitter.im/kriti21\n+email: kritirohilla567@gmail.com\n+blog: https://kriti21.github.io/\n+activity:\n+ - 0:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/pull/562/commits/52c11a2c85087e705b2a78197aed754d47221174\n+   - details: >\n+      commit-content-checks.md: Add issue link to project description.\n+ - 1:\n+   - repo: cEPs\n+   - link: https://github.com/coala/cEPs/pull/114/commits/ea25f09ae08b4bc7423453460b14cb16eb3a0db6\n+   - details: > \n+      cEP-0016.md: Add cEP for the project.\n+ - 2:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2484/commits/9332d3d1e63f6098ae4e39e53bbf8679dce4c9a3\n+   - details: >\n+      CommitBear.py: Fix regex for issue id in CommitBear.\n+ - 3:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2501/commits/ef0d8e04b55755eccb68219dd61eb28eb0011d83\n+   - details: >\n+      GitCommitBear.py: Add settings to ignore GitHub PR merge commits.\n+ - 4:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/pull/600\n+   - details: >\n+      .travis.yml: Remove GitHub PR merge commit workaround.\n+ - 5:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2543/commits/582e38330d03c696bc7476e102acaa833c9b33af\n+   - details: >\n+      VCSCommitMetadataBear.py: Add new metabear to analyze git commits.\n+ - 6:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2576/commits/b51144b2bcc90bbf8a147c6a9e85cc009869bccb\n+   - details: >\n+      generate_package.py: Replace touch funtion with library function Path.\n+ - 7:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2600/commits/58b2f0743d4aed1fb6eea0ea38d195e51851e9d8\n+   - details: >\n+      GitLinearCommitBear.py: Add new bear to inspect `git merge` commits.\n+ - 8:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2523/commits/c7952afc9b26cb011c154cc303b3aed32ff68211\n+   - details: >\n+      CISkipInspectBear.py: Add bear to inspect commits that disable CI builds.\n+ - 9:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2652\n+   - details: >\n+      GitRevertInspectBear.py: Add new bear to inspect `git revert` commits.\n+---\n+\n+### Git Commit Content Inspection\n+coala has a `GitCommitBear` that is responsible for verifying that commits\n+made to a project are as per the set standards. This project adds some new\n+bears so that coala is more useful in handling the special git commits\n+as well. It includes adding settings to inspect special git commits like\n+`git merge`, `git revert` and commits that disable CI builds. These commits\n+are used only under specific conditions and when certain requirements are met.\n+With the implementation of these new bears, projects can easily configure\n+the `.coafile` to manage such commits according to their requirements.\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) A metadata bear called `VCSCommitMetadataBear` has been implemented which", "created_at": "2018-08-11T03:08:47Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYwOQ==", "fields": {"body": "Travis-CI", "diff": "@@ -0,0 +1,141 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/KritiRohilla\n+student: Kriti Rohilla\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Git Commit Content Inspection\n+project_link: https://summerofcode.withgoogle.com/projects/#5636421247827968\n+tarball: https://raw.githubusercontent.com/kriti21/GSoC-2018-Report/master/ProjectPatches.tar\n+mentors: >\n+ [Saurav Singh](https://github.com/damngamerz)\n+ [Rafid Aslam](https://github.com/refeed)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/9\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/36\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/41\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/42\n+bio: >\n+ I am in my pre-final year at University Institute of Engineering and Technology,\n+ Panjab University. As part of my GSoC 2018 project, I worked on vcs related bears\n+ in [coala-bears](https://github.com/coala/coala-bears/) project. The main task was\n+ to detect special git commits like `git revert`, `git merge` and commits that skip\n+ CI build and inspect such commits to see whether they meet the requirements of the\n+ project.\n+social:\n+ - GitHub:\n+   - username: kriti21\n+   - link: https://github.com/kriti21\n+ - GitLab:\n+   - username: kriti21\n+   - link: https://gitlab.com/kriti21\n+ - Gitter:\n+   - username: kriti21\n+   - link: https://gitter.im/kriti21\n+email: kritirohilla567@gmail.com\n+blog: https://kriti21.github.io/\n+activity:\n+ - 0:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/pull/562/commits/52c11a2c85087e705b2a78197aed754d47221174\n+   - details: >\n+      commit-content-checks.md: Add issue link to project description.\n+ - 1:\n+   - repo: cEPs\n+   - link: https://github.com/coala/cEPs/pull/114/commits/ea25f09ae08b4bc7423453460b14cb16eb3a0db6\n+   - details: > \n+      cEP-0016.md: Add cEP for the project.\n+ - 2:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2484/commits/9332d3d1e63f6098ae4e39e53bbf8679dce4c9a3\n+   - details: >\n+      CommitBear.py: Fix regex for issue id in CommitBear.\n+ - 3:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2501/commits/ef0d8e04b55755eccb68219dd61eb28eb0011d83\n+   - details: >\n+      GitCommitBear.py: Add settings to ignore GitHub PR merge commits.\n+ - 4:\n+   - repo: projects\n+   - link: https://github.com/coala/projects/pull/600\n+   - details: >\n+      .travis.yml: Remove GitHub PR merge commit workaround.\n+ - 5:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2543/commits/582e38330d03c696bc7476e102acaa833c9b33af\n+   - details: >\n+      VCSCommitMetadataBear.py: Add new metabear to analyze git commits.\n+ - 6:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2576/commits/b51144b2bcc90bbf8a147c6a9e85cc009869bccb\n+   - details: >\n+      generate_package.py: Replace touch funtion with library function Path.\n+ - 7:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2600/commits/58b2f0743d4aed1fb6eea0ea38d195e51851e9d8\n+   - details: >\n+      GitLinearCommitBear.py: Add new bear to inspect `git merge` commits.\n+ - 8:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2523/commits/c7952afc9b26cb011c154cc303b3aed32ff68211\n+   - details: >\n+      CISkipInspectBear.py: Add bear to inspect commits that disable CI builds.\n+ - 9:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/pull/2652\n+   - details: >\n+      GitRevertInspectBear.py: Add new bear to inspect `git revert` commits.\n+---\n+\n+### Git Commit Content Inspection\n+coala has a `GitCommitBear` that is responsible for verifying that commits\n+made to a project are as per the set standards. This project adds some new\n+bears so that coala is more useful in handling the special git commits\n+as well. It includes adding settings to inspect special git commits like\n+`git merge`, `git revert` and commits that disable CI builds. These commits\n+are used only under specific conditions and when certain requirements are met.\n+With the implementation of these new bears, projects can easily configure\n+the `.coafile` to manage such commits according to their requirements.\n+\n+#### Work Done\n+\n+<br>\n+\n+1.) A metadata bear called `VCSCommitMetadataBear` has been implemented which\n+analyzes the commit at HEAD and returns all relevant information about it\n+as `HiddenResult` to the bear using it.\n+\n+<br>\n+\n+2.) GitHub PR merge commits were responsible for travis build failure. Settings", "created_at": "2018-08-11T03:09:22Z", "last_edited_at": null, "author": "refeed", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYzMA==", "fields": {"body": "no trailing , if followed by )", "diff": "@@ -0,0 +1,358 @@\n+import logging\n+from os import path\n+\n+from coala_utils.FileUtils import detect_encoding\n+from coala_utils.decorators import (enforce_signature, generate_eq,)", "created_at": "2018-08-11T03:10:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNTgyNg==", "fields": {"body": "This should be put into css file instead.", "diff": "@@ -30,6 +30,17 @@\n   <link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n </head>\n \n+<style type=\"text/css\">", "created_at": "2018-08-11T04:11:01Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNzY5NQ==", "fields": {"body": "See changes requested at #615", "diff": "@@ -0,0 +1,268 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/virresh\n+student: Viresh Gupta\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Integrate ANTLR v4 to coala\n+project_link: https://summerofcode.withgoogle.com/projects/#6067962113425408\n+report_year: 2018\n+tarball: https://github.com/virresh/GSoC-18_Report/raw/master/patches.tar\n+mentors: >\n+ [Dong-hee Na](https://github.com/corona10) &\n+ [Udayan Tandon](https://github.com/Udayan12167)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/37\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/38\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/39\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/40\n+bio: >\n+ Hi ! I am Viresh, an undergrad student at Indraprastha Institute of \n+ Information Technology, Delhi, India. I love coding in and out and like to\n+ lay my hands on whatever tech I can find. I also love to read books, observe\n+ nature and star gaze in my free time. I chose coala for my GSoC project\n+ because I think it's awesome to be able to push my friends a friendly reminder\n+ to indent their code properly, and programmatically detect when they went lazy\n+ in doing so, which helps me to focus on the main logic when working on a team\n+ project.\n+social:\n+ - GitHub:\n+   - username: virresh\n+   - link: https://github.com/virresh\n+ - GitLab:\n+   - username: virresh\n+   - link: https://gitlab.com/virresh\n+ - Gitter:\n+   - username: virresh\n+   - link: https://gitter.im/virresh\n+ - Openhub:\n+   - username: virresh\n+   - link: https://www.openhub.net/accounts/virresh\n+email: viresh16118@iiitd.ac.in\n+blog: https://virresh.wordpress.com/\n+activity:\n+ - 0:", "created_at": "2018-08-11T06:04:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNzk3OQ==", "fields": {"body": "just remove this paragraph.  It is described above.  that is enough.  add an issue link if you want", "diff": "@@ -0,0 +1,174 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/VaibhavRai\n+student: Vaibhav Kumar Rai\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Debug and Profile Bears\n+project_link: https://summerofcode.withgoogle.com/projects/#6109762077327360\n+tarball: https://rawgit.com/RaiVaibhav/GSoC-Report/master/project.tar\n+mentors: >\n+ [Mischa Kr\u00fcger](https://github.com/Makman2),\n+ [Fabian Neuschmidt](https://github.com/fneu),\n+ [Arjun Singh Yadav](https://github.com/arjunsinghy96)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/18\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/52\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/53\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/54\n+bio: >\n+ I am third year student of B.Tech Computer Science Engineering at Shri Mata\n+ Vaishno Devi Uiversity, Katra, Jammu and Kashmir. I participated in GSoC and\n+ worked with [coala](https://coala.io) to create a better quality Bears by\n+ creating a tool which will have the ability to jump directly into Bear code\n+ and move through it using a debugger interface such as pdb and make debugging\n+ of Bears as easy as writing the Bear.\n+ A Debugger should also the ability to investigate the settings passed to the\n+ Bear.\n+ I also implemented a Profiler Interface which provides abilities to profile\n+ Bear code to optimize its performance.\n+social:\n+ - GitHub:\n+   - username: RaiVaibhav\n+   - link: https://github.com/RaiVaibhav\n+ - GitLab:\n+   - username: RaiVaibhav\n+   - link: https://gitlab.com/RaiVaibhav\n+ - Gitter:\n+   - username: RaiVaibhav\n+   - link: https://gitter.im/RaiVaibhav\n+email: raivaibhav08@gmail.com\n+blog: https://raivaibhav.github.io\n+activity:\n+ - 0:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/d6186cd1bc3f4e049acac21c657b5a21c55393de\n+   - details: >\n+      Removed the `filter_raising_callables` function and inline it, to decrease\n+      the complexity of code for future modification in Debugger<br>Interface pull\n+      request.\n+ - 1:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/c1184ca58a9cca30afc144e7ad7a1bf7c5fe5f55\n+   - details: >\n+      Added Debugger Interface with `--debug-bears` argument and debug bears\n+      process so that pdb work in single process environment and<br>bear developer\n+      can debug specified bear.\n+ - 2:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/4cb1a6c5bb85bc42a315d118a2f66123465ab4ed\n+   - details: >\n+      Debug_Bears.rst: Added Debugger Interface document with demo.\n+ - 3:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/89833995c1380b813f30bf2048e3f63d495dd71a\n+   - details: >\n+      Prevent bear test from failing, replaced httpstat with Google teapot\n+      because of SSL certification error.\n+ - 4:\n+   - repo: coala-bears\n+   - link: https://github.com/coala/coala-bears/commit/8faa08ef573105a75cf31c57298d6b6ba9201d8e\n+   - details: >\n+      Debugged PySafetyBear to get the cause of upstream problem and failure of\n+      appveyor CI, updated PySafetyBear to support lastest version<br>of safety.\n+ - 5:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/e9e7e3770791b6df41b414a01c5a956c2b8b356f\n+   - details: >\n+      Added Settings inspection toolset through which user can access the\n+      settings of a Bear in Debug environment.\n+ - 6:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/80f8bc955bf4db2892d52262396d824f3050fb71\n+   - details: >\n+      Debug_bears.rst: Added Settings inspection toolset document with demo.\n+ - 7:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/3cb58246351ecbabd9768151cb6b9fe28c3790fc\n+   - details: >\n+      Removed `debugger` flag from `init` of bear Base class because of the API\n+      breakage issue for the existing users.\n+ - 8:\n+   - repo: coala-utils\n+   - link: https://gitlab.com/coala/coala-utils/merge_requests/79/diffs?commit_id=ba2e0789d0f1c405af93e313e692087077b45954\n+   - details: >\n+      Enhance TRUE and FALSE STRINGS in coala-utils `constants` so that\n+      settings like debugger and profiler can be enable and disable with<br>the\n+      value like `ok`, `positive`, `none`, `negative` etc.\n+ - 9:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/fea6e01bd0b5300b0f46c3528981c1e6558e1867\n+   - details: >\n+      Added Profiler Interface on coala with `--profile` argument to profile\n+      execution of bear.\n+ - 10:\n+   - repo: coala\n+   - link: https://github.com/coala/coala/commit/0e075217ea1bc5732d9deac57355431db00ef4ee\n+   - details: >\n+      Profile_Bears.rst: Add Profiling Interface document with demo.\n+---\n+\n+### Debug and Profile Bears\n+\n+#### Work Done\n+\n+1. Debugger Interface added in coala.\n+   1. Step into the `run()` method of a bear move through it using a debugger\n+      interface such as `pdb` and exits as soon as `run()` is left.\n+   2. Pdb's quit-command (`q`) remapped so coala continues its normal execution\n+      without aborting. So, `quit` or `q` will first clear all breakpoints and\n+      then continue execution.\n+   3. Users can specify the bear they want to debug using `--debug-bears`.\n+   4. Users can specify to debug bears using a `.coafile`.\n+\n+2. A new command `settings` is included in coala's Debugging Interface to\n+   inspect Bear settings in the debugging environment. It displays all passed\n+   settings of a Bear and their values so bear developer can quickly inspect\n+   them.\n+\n+3. Profiler Interface added in coala.\n+   1. The profiler will start by profiling the `run()` method of bears because\n+      this is the part where bear writers will spend time on, as rest of the\n+      part like loading the files, collecting the settings, etc. are done by\n+      coala itself.\n+   2. `--profile-bears` or `profile_bears` (using .coafile) is the main argument\n+      to enable profiling.\n+   3. Accept an additional parameter `directory_path` through which bear\n+      developers can specify where to store the profiled data files.\n+\n+#### Challenges\n+\n+I had difficulties with testing of Debugger interface. With the help of `Mock`,\n+test for debugger interface was created, though code coverage was 100% but\n+`mock` test was not the ideal test, so after hours of discussion with Mischa we\n+decided to capture the `pdb stdout` and assert the the output with the real\n+output but problem arised, the ideal tests passes but somehow it didn't showed\n+the code coverage to 100% not only that it also removed the coverage of the\n+previous tests, at first I thought created test have some problem but seems\n+like `pytest-cov` had a problem, so to confirm that I created a\n+[test repo](https://github.com/RaiVaibhav/test_repo) and enable the\n+[CI](https://travis-ci.org/RaiVaibhav/test_repo) on that repo to check the\n+coverage report, it also showed same failure. So, I created a issue on\n+`pytest-cov` repo but actual problem was, both coverage and debugger use the\n+same trace feature, so it was not possible to run coverage and debugger in\n+parallel or say it is not possible to chain the trace functions, so Mischa gave\n+a idea to restore the trace callbacks and then run test, it worked finally so I\n+included both ideal and `Mock` test so that the coverage remain 100, but in all\n+of these I lagged around 3 week from my schedule. So I couldn't implement one of\n+the proposed feature.\n+\n+#### Work to be done\n+\n+A tool which will provide the ability to inspect result instances like\n+`origin`, `diffs`, `file`, `severity`, `message`, `aspects` and several other\n+attributes in debugging environment or in a seperate python console where all\n+where user can easily access there values. Information about result will help\n+bear developer in creating a better performant Bears.\n+\n+Result inspection tool will not only help in debugging the bear results but\n+also help in testing the bear by asserting the various attributes of expected\n+result with actual result.\n+\n+So, after `GSoC` my first task will be to add the inspection tool in the coala", "created_at": "2018-08-11T06:18:47Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyMjk4MQ==", "fields": {"body": "there are 52 pages in your tarball, but only 49 here.  Some intentionally left out of this list ?  Too small to mention ?\nare these upstream PRs in your tarball ?\nIt isnt work completed, and they are derivatives of your other patches, so listing them here isnt ideal.\nAnd including them in your tarball probably isnt good either.\nI suggest you move these two upstream PRs into the prose below, describing the fact that our enhancements are generic for any gh-board user, and we have been hoping that the upstream gh-board repos will become better maintained.", "diff": "@@ -0,0 +1,371 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/li-boxuan\n+student: Boxuan Li\n+organisation: coala\n+organisation_link : https://coala.io\n+report_year: 2018\n+project: Meta-review\n+project_link: https://summerofcode.withgoogle.com/projects/#5188493739819008\n+tarball: https://github.com/li-boxuan/GSoCReport/raw/master/li-boxuan_coala.tar\n+mentors: >\n+  [Hemang Kumar](https://github.com/hemangsk/) &\n+  [Surya Widi](https://github.com/blazeu) &\n+  [Andrew Dassonville](https://github.com/andrewda)\n+phase:\n+  - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/14\n+  - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/15\n+  - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/16\n+  - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/17\n+bio: >\n+  I am a final year student (expected graduation date: May 2019) of Computer\n+  Science at The University of Hong Kong. I participated in GSoC and worked\n+  with [coala](http://coala.io) to implement a meta-review system, which\n+  collects and tracks GitHub reactions used by coala community to generate\n+  meaningful analysis. I also improved usability of\n+  [gh-board](http://github.com/coala/gh-board), a serverless kanban board,\n+  fixing some issues and extending it to track reviews & meta-reviews.\n+social:\n+  - GitHub:\n+    - username: li-boxuan\n+    - link: https://github.com/li-boxuan\n+  - GitLab:\n+    - username: li-boxuan\n+    - link: https://gitlab.com/li-boxuan\n+  - Gitter:\n+    - username: li-boxuan\n+    - link: https://gitter.im/li-boxuan\n+  - Openhub:\n+    - username: li-boxuan\n+    - link: https://www.openhub.net/accounts/li-boxuan\n+email: liboxuanhk@gmail.com\n+blog: http://li-boxuan.github.io/\n+activity:\n+\n+  - 1:\n+    - repo: projects\n+    - link: https://github.com/coala/projects/commit/6c83d70a8559d1368fba1d80ad412b31ada7dad3\n+    - details: >\n+       [Bonding Period Work] meta_review.md: Add meta review project\n+\n+  - 2:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/e9f7587856e1c236d37e96f54a0cb4d72069776d\n+    - details: >\n+       cEP-0019.md: Meta-review system\n+\n+  - 3:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/2929576df9c20144aad9db8a5e326c1853375158\n+    - details: >\n+       Set up meta_review app\n+\n+  - 4:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/aae015127c96b85a1cd9188199a6e4a46693d9f7\n+    - details: >\n+       Change meta-review models\n+\n+  - 5:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/78e1e3a542a1654982f55cde4e08bbf97ec81c3c\n+    - details: >\n+       Implement meta-review scoring & ranking system\n+\n+  - 6:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/16f8e84036a9ba47d434c60400da021d90a1a740\n+    - details: >\n+       [Bonding Period Work] fetch-issues.js: Build custom generator\n+\n+  - 7:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/46f1ad5ce83d5d72aa95ea00703b92c2fc38b2dc\n+    - details: >\n+       [Bonding Period Work] Remove TODOs in components code\n+\n+  - 8:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/60b8a10f123d2bec71c22c31f3e281ad9609fa07\n+    - details: >\n+       [Bonding Period Work] Modernize existing React component code\n+\n+  - 9:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/e452f41ddda6abe149442d5240675b3ae3333e6a\n+    - details: >\n+       nav.jsx: Fix broken link on header\n+\n+  - 10:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/77830f4146de9d4d29b539740423a0ca43ee219f\n+    - details: >\n+       Pre-fetch pull request review comments & reactions\n+\n+  - 11:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/2a7338b3edff6d1c9f5b019ea07c28640996267a\n+    - details: >\n+       package.json: Add linting on script & test\n+\n+  - 12:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d3c6debe198b369901166be791a9ae53f23b26a0\n+    - details: >\n+       Get test suite working\n+\n+  - 13:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/671f13de1999001e718df9ce5187d7abf278791d\n+    - details: >\n+       Set pre-fetch time limit for pull requests\n+\n+  - 14:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/91fffbbce1713a1d56276122d51cb16c7079b626\n+    - details: >\n+       Fix Travis failure\n+\n+  - 15:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/c33cc70bcab57a4ac13e4f352a255abc213dc874\n+    - details: >\n+       database.js: Fix `closed` filter bug\n+\n+  - 16:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/a2957290794424c6b8a0162ab49694cd771c2445\n+    - details: >\n+       .travis.yml: Enable keep-history\n+\n+  - 17:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/aca0d61832ffe1bac2b2c9d2615ea4219f68d3b6\n+    - details: >\n+       .travis.yml: Let moban task not deploy\n+\n+  - 18:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/4b82e679b83339f500d686967d3b6b843f7e1d40\n+    - details: >\n+       run-test.sh: Verify files exist\n+\n+  - 19:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/0f9f4a45bfdf341c5705d7543688adea7195c5cb\n+    - details: >\n+       Increase test timeout threshold\n+\n+  - 20:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/34c2e6de21ed2933d8f19cca3b6dd177ce32c86f\n+    - details: >\n+       login-modal.jsx: Add exception for default api url\n+\n+  - 21:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/828be376832687373b984df38ca71c1684651aa7\n+    - details: >\n+       Add `meta-review in need` column\n+\n+  - 22:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/ac8b0709b0e82963fd3d6680b37005359225effc\n+    - details: >\n+       Display reactions of reviews\n+\n+  - 23:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/892b87ff808ac188166c9500d1169b1590b8d791\n+    - details: >\n+       dashboard.jsx: Add environment REPOSITORIES\n+\n+  - 24:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/e791bee60bf4af32aec889211d4de63d6418d7ed\n+    - details: >\n+       Setup GraphQL client\n+\n+  - 25:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/5480420793979b9ae4b53117c6d5d757f12013bb\n+    - details: >\n+       Use new graphql client to sync issues\n+\n+  - 26:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/93c842bca04298c8afc2d71d167efe04d432d11f\n+    - details: >\n+       dashboard.jsx: Load repos automatically after login\n+\n+  - 27:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/9eae16877612d21f3ceed99ec23a097ec32e21b3\n+    - details: >\n+       Add review filters functionality\n+\n+  - 28:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d32b25729ee1d9bc7972dce4a898a0bea9146098\n+    - details: >\n+       Refactor pre-fetching\n+\n+  - 29:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/faf793a3679ab32cb4e42c8ac54f174695b6bebc\n+    - details: >\n+       github-graphql.js: Fix several issues\n+\n+  - 30:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/59e9cba6ca38a8fb6396a0864ff43bf749f1d6ec\n+    - details: >\n+       Setup Jest configurations\n+\n+  - 31:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/8a3c49befc2c3d2b68ed11c5f2e217cb177caf57\n+    - details: >\n+       reactions.jsx: Add snapshot test\n+\n+  - 32:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/1f88cfa9c369f5b3f4bd7abafa6c15970196de80\n+    - details: >\n+       Add codecov\n+\n+  - 33:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/3638063072aeea1925bab5f9565d7765bf8d4cf4\n+    - details: >\n+       Separate test logic\n+\n+  - 34:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/10003d073c16c18da669b66f235c0e9abc1230f1\n+    - details: >\n+       netlify.toml: Verify pre-fetched files exist\n+\n+  - 35:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d1a7ea3ea66c7af7a51a9717f67fc635fc35cf41\n+    - details: >\n+       Enhance meta-review UI\n+\n+  - 36:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/b062087825f01c1169accb646f0eaf0d1f0e7cb8\n+    - details: >\n+       Add reaction mutation functionality\n+\n+  - 37:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d4705c5332ecd8e4329f0b62f7df3c9312c35a01\n+    - details: >\n+       repo-kanban.jsx: Use withAuth wrapper\n+\n+  - 38:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d1a9bf25061800510cd9cf7d1c089900d2cbd1f1\n+    - details: >\n+       dashboard.jsx: Use withAuth wrapper\n+\n+  - 39:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/dc2cc6a82f72644da55f509f8d4a50ba8fa694ba\n+    - details: >\n+       Linter: Add option to remove 0 number\n+\n+  - 40:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/dfa92b64435b86b10b9a725ee32267896450e565\n+    - details: >\n+       Meta-review.rst: Add meta-review docs\n+\n+  - 41:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/42a3ffac059f279cd65c9539b8e44bf222782773\n+    - details: >\n+       Newcomers_Guide.rst: Add meta-review process\n+\n+  - 42:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/2f6f58b4afa0b139aa25062c3d3fcb27df3ea0d5\n+    - details: >\n+       PyLintBear: Fix column number convention\n+\n+  - 43:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/1f3325519a72cb98669185149b03b11c1ec25f70\n+    - details: >\n+       CPPLintBear: Fix line number convention\n+\n+  - 44:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/705f9db98d957cc9d27e675b1d58f369feb54255\n+    - details: >\n+       HAMLLintBear: Fix line number convention\n+\n+  - 45:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/e5df6bcac33aa06bec70bf21217972620c34e888\n+    - details: >\n+       WriteGoodLintBear: Fix column number convention\n+\n+  - 46:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/e445c04e28e95b7f21983e9e2dd770e81838aa69\n+    - details: >\n+       StylintBear: Fix column number convention\n+\n+  - 47:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/401fa883ffbe21b78a8a4899160592a293f3d4cd\n+    - details: >\n+       CheckStyleBear: Fix offset convention\n+\n+  - 48:\n+    - repo: philschatz/gh-board (upstream)\n+    - link: https://github.com/philschatz/gh-board/pull/147\n+    - details: >\n+       Modernise React code, update packages, fix warnings and improve build (open)\n+\n+  - 49:", "created_at": "2018-08-11T10:14:58Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyMzE5OA==", "fields": {"body": "Some ... are too small to mention?\n\n\n\nYes, I have several small commits which just do gitignore sync, so I didn't mention them in the report.\n\n\n\nare these upstream PRs in your tarball\n\n\n\nI didn't put upstream PRs in my tarball.\n\n\n\nI suggest you move these two upstream PRs into the prose below\n\n\n\nSounds good. Will do that.", "diff": "@@ -0,0 +1,371 @@\n+---\n+layout: report\n+permalink: /GSoC/2018/StatusReport/li-boxuan\n+student: Boxuan Li\n+organisation: coala\n+organisation_link : https://coala.io\n+report_year: 2018\n+project: Meta-review\n+project_link: https://summerofcode.withgoogle.com/projects/#5188493739819008\n+tarball: https://github.com/li-boxuan/GSoCReport/raw/master/li-boxuan_coala.tar\n+mentors: >\n+  [Hemang Kumar](https://github.com/hemangsk/) &\n+  [Surya Widi](https://github.com/blazeu) &\n+  [Andrew Dassonville](https://github.com/andrewda)\n+phase:\n+  - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/14\n+  - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/15\n+  - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/16\n+  - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/17\n+bio: >\n+  I am a final year student (expected graduation date: May 2019) of Computer\n+  Science at The University of Hong Kong. I participated in GSoC and worked\n+  with [coala](http://coala.io) to implement a meta-review system, which\n+  collects and tracks GitHub reactions used by coala community to generate\n+  meaningful analysis. I also improved usability of\n+  [gh-board](http://github.com/coala/gh-board), a serverless kanban board,\n+  fixing some issues and extending it to track reviews & meta-reviews.\n+social:\n+  - GitHub:\n+    - username: li-boxuan\n+    - link: https://github.com/li-boxuan\n+  - GitLab:\n+    - username: li-boxuan\n+    - link: https://gitlab.com/li-boxuan\n+  - Gitter:\n+    - username: li-boxuan\n+    - link: https://gitter.im/li-boxuan\n+  - Openhub:\n+    - username: li-boxuan\n+    - link: https://www.openhub.net/accounts/li-boxuan\n+email: liboxuanhk@gmail.com\n+blog: http://li-boxuan.github.io/\n+activity:\n+\n+  - 1:\n+    - repo: projects\n+    - link: https://github.com/coala/projects/commit/6c83d70a8559d1368fba1d80ad412b31ada7dad3\n+    - details: >\n+       [Bonding Period Work] meta_review.md: Add meta review project\n+\n+  - 2:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/e9f7587856e1c236d37e96f54a0cb4d72069776d\n+    - details: >\n+       cEP-0019.md: Meta-review system\n+\n+  - 3:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/2929576df9c20144aad9db8a5e326c1853375158\n+    - details: >\n+       Set up meta_review app\n+\n+  - 4:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/aae015127c96b85a1cd9188199a6e4a46693d9f7\n+    - details: >\n+       Change meta-review models\n+\n+  - 5:\n+    - repo: community\n+    - link: https://github.com/coala/community/commit/78e1e3a542a1654982f55cde4e08bbf97ec81c3c\n+    - details: >\n+       Implement meta-review scoring & ranking system\n+\n+  - 6:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/16f8e84036a9ba47d434c60400da021d90a1a740\n+    - details: >\n+       [Bonding Period Work] fetch-issues.js: Build custom generator\n+\n+  - 7:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/46f1ad5ce83d5d72aa95ea00703b92c2fc38b2dc\n+    - details: >\n+       [Bonding Period Work] Remove TODOs in components code\n+\n+  - 8:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/60b8a10f123d2bec71c22c31f3e281ad9609fa07\n+    - details: >\n+       [Bonding Period Work] Modernize existing React component code\n+\n+  - 9:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/e452f41ddda6abe149442d5240675b3ae3333e6a\n+    - details: >\n+       nav.jsx: Fix broken link on header\n+\n+  - 10:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/77830f4146de9d4d29b539740423a0ca43ee219f\n+    - details: >\n+       Pre-fetch pull request review comments & reactions\n+\n+  - 11:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/2a7338b3edff6d1c9f5b019ea07c28640996267a\n+    - details: >\n+       package.json: Add linting on script & test\n+\n+  - 12:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d3c6debe198b369901166be791a9ae53f23b26a0\n+    - details: >\n+       Get test suite working\n+\n+  - 13:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/671f13de1999001e718df9ce5187d7abf278791d\n+    - details: >\n+       Set pre-fetch time limit for pull requests\n+\n+  - 14:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/91fffbbce1713a1d56276122d51cb16c7079b626\n+    - details: >\n+       Fix Travis failure\n+\n+  - 15:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/c33cc70bcab57a4ac13e4f352a255abc213dc874\n+    - details: >\n+       database.js: Fix `closed` filter bug\n+\n+  - 16:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/a2957290794424c6b8a0162ab49694cd771c2445\n+    - details: >\n+       .travis.yml: Enable keep-history\n+\n+  - 17:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/aca0d61832ffe1bac2b2c9d2615ea4219f68d3b6\n+    - details: >\n+       .travis.yml: Let moban task not deploy\n+\n+  - 18:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/4b82e679b83339f500d686967d3b6b843f7e1d40\n+    - details: >\n+       run-test.sh: Verify files exist\n+\n+  - 19:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/0f9f4a45bfdf341c5705d7543688adea7195c5cb\n+    - details: >\n+       Increase test timeout threshold\n+\n+  - 20:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/34c2e6de21ed2933d8f19cca3b6dd177ce32c86f\n+    - details: >\n+       login-modal.jsx: Add exception for default api url\n+\n+  - 21:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/828be376832687373b984df38ca71c1684651aa7\n+    - details: >\n+       Add `meta-review in need` column\n+\n+  - 22:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/ac8b0709b0e82963fd3d6680b37005359225effc\n+    - details: >\n+       Display reactions of reviews\n+\n+  - 23:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/892b87ff808ac188166c9500d1169b1590b8d791\n+    - details: >\n+       dashboard.jsx: Add environment REPOSITORIES\n+\n+  - 24:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/e791bee60bf4af32aec889211d4de63d6418d7ed\n+    - details: >\n+       Setup GraphQL client\n+\n+  - 25:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/5480420793979b9ae4b53117c6d5d757f12013bb\n+    - details: >\n+       Use new graphql client to sync issues\n+\n+  - 26:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/93c842bca04298c8afc2d71d167efe04d432d11f\n+    - details: >\n+       dashboard.jsx: Load repos automatically after login\n+\n+  - 27:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/9eae16877612d21f3ceed99ec23a097ec32e21b3\n+    - details: >\n+       Add review filters functionality\n+\n+  - 28:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d32b25729ee1d9bc7972dce4a898a0bea9146098\n+    - details: >\n+       Refactor pre-fetching\n+\n+  - 29:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/faf793a3679ab32cb4e42c8ac54f174695b6bebc\n+    - details: >\n+       github-graphql.js: Fix several issues\n+\n+  - 30:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/59e9cba6ca38a8fb6396a0864ff43bf749f1d6ec\n+    - details: >\n+       Setup Jest configurations\n+\n+  - 31:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/8a3c49befc2c3d2b68ed11c5f2e217cb177caf57\n+    - details: >\n+       reactions.jsx: Add snapshot test\n+\n+  - 32:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/1f88cfa9c369f5b3f4bd7abafa6c15970196de80\n+    - details: >\n+       Add codecov\n+\n+  - 33:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/3638063072aeea1925bab5f9565d7765bf8d4cf4\n+    - details: >\n+       Separate test logic\n+\n+  - 34:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/10003d073c16c18da669b66f235c0e9abc1230f1\n+    - details: >\n+       netlify.toml: Verify pre-fetched files exist\n+\n+  - 35:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d1a7ea3ea66c7af7a51a9717f67fc635fc35cf41\n+    - details: >\n+       Enhance meta-review UI\n+\n+  - 36:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/b062087825f01c1169accb646f0eaf0d1f0e7cb8\n+    - details: >\n+       Add reaction mutation functionality\n+\n+  - 37:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d4705c5332ecd8e4329f0b62f7df3c9312c35a01\n+    - details: >\n+       repo-kanban.jsx: Use withAuth wrapper\n+\n+  - 38:\n+    - repo: gh-board\n+    - link: https://github.com/coala/gh-board/commit/d1a9bf25061800510cd9cf7d1c089900d2cbd1f1\n+    - details: >\n+       dashboard.jsx: Use withAuth wrapper\n+\n+  - 39:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/dc2cc6a82f72644da55f509f8d4a50ba8fa694ba\n+    - details: >\n+       Linter: Add option to remove 0 number\n+\n+  - 40:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/dfa92b64435b86b10b9a725ee32267896450e565\n+    - details: >\n+       Meta-review.rst: Add meta-review docs\n+\n+  - 41:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/42a3ffac059f279cd65c9539b8e44bf222782773\n+    - details: >\n+       Newcomers_Guide.rst: Add meta-review process\n+\n+  - 42:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/2f6f58b4afa0b139aa25062c3d3fcb27df3ea0d5\n+    - details: >\n+       PyLintBear: Fix column number convention\n+\n+  - 43:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/1f3325519a72cb98669185149b03b11c1ec25f70\n+    - details: >\n+       CPPLintBear: Fix line number convention\n+\n+  - 44:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/705f9db98d957cc9d27e675b1d58f369feb54255\n+    - details: >\n+       HAMLLintBear: Fix line number convention\n+\n+  - 45:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/e5df6bcac33aa06bec70bf21217972620c34e888\n+    - details: >\n+       WriteGoodLintBear: Fix column number convention\n+\n+  - 46:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/e445c04e28e95b7f21983e9e2dd770e81838aa69\n+    - details: >\n+       StylintBear: Fix column number convention\n+\n+  - 47:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/401fa883ffbe21b78a8a4899160592a293f3d4cd\n+    - details: >\n+       CheckStyleBear: Fix offset convention\n+\n+  - 48:\n+    - repo: philschatz/gh-board (upstream)\n+    - link: https://github.com/philschatz/gh-board/pull/147\n+    - details: >\n+       Modernise React code, update packages, fix warnings and improve build (open)\n+\n+  - 49:", "created_at": "2018-08-11T10:26:23Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyNjY4Nw==", "fields": {"body": "@Vamshi99 please remove this from the list of done 'activities', because it isn't finished yet. Missing migrations and the commits are still marked WIP. Move it down to the work to be done section.", "diff": "@@ -0,0 +1,209 @@\n+---\n+layout: report\n+report_year: '2018'\n+permalink: /GSoC/2018/StatusReport/VamshiKrishna\n+student: Vamshi Krishna Bommerla\n+organisation: coala\n+organisation_link : https://coala.io\n+project: Implement GitMate automations and plugins for coala\n+project_link: https://summerofcode.withgoogle.com/projects/#5344316227059712\n+tarball: https://rawgit.com/Vamshi99/GSoCReport/master/project.tar\n+mentors: >\n+ [Naveen Kumar Sangi](https://github.com/nkprince007),\n+ [Lasse Schuirmann](https://github.com/sils),\n+ [Manvendra Singh](https://github.com/manu-chroma),\n+ [Hizkia Felix](https://github.com/HizkiFW)\n+phase:\n+ - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/4\n+ - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/5\n+ - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/6\n+ - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/7\n+bio: >\n+ I am third year student of B.Tech Computer Science Engineering at Amrita\n+ University, Amritapuri, Kerala. I participated in GSoC and worked with\n+ [coala](https://coala.io) and [GitMate](https://gitmate.io) to implement\n+ GitMate plugins and automation which help coala development workflow. I worked\n+ on adding plugins which auto-reject, auto-review, auto-assign PRs and notify\n+ merge conflicts in a PR. I also implemented a assign request plugin to assign\n+ issues to a user if he/she satisfies defined eligibilty conditions.\n+social:\n+ - GitHub:\n+   - username: Vamshi99\n+   - link: https://github.com/Vamshi99\n+ - GitLab:\n+   - username: Vamshi99\n+   - link: https://gitlab.com/Vamshi99\n+ - Gitter:\n+   - username: Vamshi99\n+   - link: https://gitter.im/Vamshi99\n+ - OpenHub:\n+   - username: Vamshi99\n+   - link: https://www.openhub.net/accounts/Vamshi99\n+email: bommvams72@gmail.com\n+blog: https://vamshi99.blogspot.com\n+activity:\n+ - 0:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/225a88e695794535f50996b4997466b72e9d47ea\n+   - details: >\n+      Add gitmate pr rejector plugin\n+ - 1:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/847afeb5460ce2866ecb2cc38593c0c486aa0271\n+   - details: >\n+      Commit.py: Add mentioned_issues, closes_issues propeties\n+ - 2:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/05062b4f9758068291445f87469e4d9d2a4f9707\n+   - details: >\n+      Upgrade IGitt\n+ - 3:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/3d2164d71722e55a6432a8911149c64897851564\n+   - details: >\n+      Add Fixes vs Closes automated checking plugin\n+ - 4:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/4a044453f5d34c9f1b8227b7f57b8a0fd0caba57\n+   - details: >\n+      MergeRequest.py: Add fix_issues, close_issues, resolve_issues properties\n+ - 5:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/ffd554de617d619809f11b0284eaa032c2d9df83\n+   - details: >\n+      Auto assign issue based on commit mention in PR\n+ - 6:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/0eec2ec32e7afd7d017cad4c67a741c688e1bfc4\n+   - details: >\n+      apps.py: Add helper function to fetch plugin settings\n+ - 7:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/e2224d7d1f61a34065f741535e53e676dc51ff4b\n+   - details: >\n+      Add Team class\n+ - 8:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/f9d08c9a88c0b958a4c2ec5eb813fcd124b5300e\n+   - details: >\n+      Mark PR as WIP if coala plugin detects errors\n+ - 9:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/c4abdd4f9367af8ce73f39f525383def68de6b62\n+   - details: >\n+      MergeRequest: Add mergeable property\n+ - 10:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/db76142d3ecb1e6cd9cd10885ae2475cb07c4d3d\n+   - details: >\n+      Notify merge conflicts in a PR\n+ - 11:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/ad5480c9b0a124d98020a4ad3fd3caf20fa1e321\n+   - details: >\n+      pr_rejector: Support regex in branch names\n+ - 12:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/94735ff0f1024d6f293db90516087d8e4d2c353d\n+   - details: >\n+      Organization: Add issues property and filter_issues method\n+ - 13:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/fff0d568f1f2731c5055995ff19bbc93be842d5f\n+   - details: >\n+      Repository: Filter issues by label, assignee\n+ - 14:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/c025311167b07da5e825433a4d4d5e376adfed62\n+   - details: >\n+      GitLabUser: Fetch user id from username\n+ - 15:\n+   - repo: mr-rebaser\n+   - link: https://gitlab.com/gitmate/open-source/mr-rebaser/commit/fad8305823a1058e93cd2397b5239a882b66c3f9\n+   - details: >\n+      Add squash pull request command\n+ - 16:\n+   - repo: mr-rebaser\n+   - link: https://gitlab.com/gitmate/open-source/mr-rebaser/commit/3124c07ca5cd46acf985dc25fe22889e5a4744d0\n+   - details: >\n+      Dockerfile: Install requirements\n+ - 17:\n+   - repo: mr-rebaser\n+   - link: https://gitlab.com/gitmate/open-source/mr-rebaser/commit/68360f3f0fac686907c7eb44c1a70bfa9e276d42\n+   - details: >\n+      run.py: Update squash command\n+ - 18:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/commit/dda98a8ab67d01376d3199bb82260838cebab7b0\n+   - details: >\n+      rebaser: Add squash command\n+ - 19:\n+   - repo: IGitt\n+   - link: https://gitlab.com/gitmate/open-source/IGitt/commit/f4ec3c602745bcf08405479a684876cc1080a21f\n+   - details: >\n+      Issue: Add available_assignees property\n+ - 20:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/merge_requests/525\n+   - details: >\n+      Add assign request command\n+ - 21:\n+   - repo: gitmate-2\n+   - link: https://gitlab.com/gitmate/open-source/gitmate-2/merge_requests/524\n+   - details: >\n+      Add review plugin", "created_at": "2018-08-11T13:31:59Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTUwNTI3Mw==", "fields": {"body": "it needs -", "diff": "@@ -0,0 +1,255 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Shrikrishna Singh\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Newcomer Metrics and Gamification\n+project_link: https://summerofcode.withgoogle.com/projects/#5892040252981248\n+tarball: https://github.com/sks444/GSoC-18-Patches/raw/master/project.tar.gz\n+sha256sum: 43e4291bf4a8b6d83b004483d260cf2dfdd0d3ae139d598f40e473d05513f9c6\n+mentors: >\n+  [John Vandenberg](http://github.com/jayvdb),\n+  [Pranav Dixit](https://github.com/prnvdixit),\n+  [Andrew Dassonville](https://github.com/andrewda) &\n+  [Gopala](https://github.com/gkrishnan724)\n+phase:\n+  - Bonding : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/2\n+  - Phase 1 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/19\n+  - Phase 2 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/43\n+  - Phase 3 : https://gitlab.com/coala/GSoC/GSoC-2018/milestones/44\n+bio: >\n+  I am a final year Computer Science and Engineering undergraduate at\n+  Shri Mata Vaishno Devi University. As part of the GSoC'18 I worked on\n+  [community](https://github.com/coala/community) and\n+  [webservices](https://gitlab.com/coala/landing/) project to build a\n+  gamification system for all the active newcomers at coala.\n+\n+social:\n+  - GitHub:\n+    - username: sks444\n+    - link: https://github.com/sks444\n+  - GitLab:\n+    - username: sks444\n+    - link: https://gitlab.com/sks444\n+  - Gitter:\n+    - username: sks444\n+    - link: https://gitter.im/sks444\n+  - OpenHub:\n+    - username: sks444\n+    - link: https://www.openhub.net/accounts/sks444\n+email: krishnasingh.ss30@gmail.com\n+blog: https://sks444.github.io\n+activity:\n+  - 1:\n+    - repo: coala-bears\n+    - link: https://github.com/coala/coala-bears/commit/d35238fd\n+    - details: >\n+       GitCommitBear: Parse remote with giturlparse\n+  - 2:\n+    - repo: coala\n+    - link: https://github.com/coala/coala/commit/8dfe8376\n+    - details: >\n+       Jinja2.py: Add support for ignore comments\n+  - 3:\n+    - repo: cEPs\n+    - link: https://github.com/coala/cEPs/commit/1ec5b92c\n+    - details: >\n+       cEP-0020: Add Newcomer metrics and Gamification system\n+  - 4:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/77f8802e\n+    - details: >\n+       org/cron.py: Use dict.get method to r_json\n+  - 5:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/791baab0\n+    - details: >\n+       Add IGitt Cache mechanism\n+  - 6:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1b8058c0\n+    - details: >\n+       requirements.txt: Use == for installing IGitt\n+  - 7:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/00f3081e\n+    - details: >\n+       Serialize coala issues on GitHub and GitLab\n+  - 8:\n+    - repo: webservices\n+    - link: https://gitlab.com/coala/landing/commit/1398c931\n+      details: >\n+       Implement logging", "created_at": "2018-08-13T06:50:21Z", "last_edited_at": null, "author": "RaiVaibhav", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTUyODA5OA==", "fields": {"body": "Sorry I forgot the cEP patch", "diff": "@@ -0,0 +1,184 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+report_year: 2018\n+date: 2018-08-12\n+student: Palash Nigam\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Optimize Caching for the NextGen-Core\n+project_link: https://summerofcode.withgoogle.com/projects/#6434190552203264\n+tarball: https://rawgit.com/palash25/gsoc-18-report/master/project.tar.gz\n+sha256sum: 0af1551d96663f82c5ccf05437008ba00fade628a5a1659bdb78364b3546caf4\n+mentors: >\n+  [Mischa Kr\u00fcger](https://github.com/Makman2),\n+  [Shreyans Doshi](https://github.com/shreyans800755),\n+  [Fabian Neuschmidt](https://github.com/fneu)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/32\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/33\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/34\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/35\n+bio: >\n+  I am second year student of B.Tech Computer Science and Engineering at\n+  International Institute of Information and Technology, Bhubaneswar,\n+  Odisha, India. I worked as a GSoC student under coala to improve coala's\n+  I/O mechanism using `FileFactory` class and adding features to provide\n+  more support for NextGen-Core's caching mechanism.\n+social:\n+  - GitHub:\n+      - username: palash25\n+      - link: https://github.com/palash25\n+  - GitLab:\n+      - username: palash25\n+      - link: https://gitlab.com/palash25\n+  - Gitter:\n+      - username: palash25\n+      - link: https://gitter.im/palash25\n+  - Openhub:\n+      - username: palash25\n+      - link: https://www.openhub.net/accounts/palash25\n+email: npalash25@gmail.com\n+blog: https://medium.com/gsoc-with-coala/\n+activity:\n+  - 1:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/7272ff6b9463a5cff33c431f73a416e5a999f4ac\n+      - details: >\n+         cEP-0026.md: Adds optimize caching cEP.\n+  - 2:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/a228c2b39ef17b3c6d3572853601dfa05b938173\n+      - details: >\n+         Updated the details of Optimize Caching project.\n+  - 3:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/759f74f88206c58ac80dd7acd12cadbae13f28cb\n+      - details: >\n+         optimize_caching.md: Changed primary mentor from adtac to Makman2.\n+  - 4:\n+      - repo: devops\n+      - link: https://github.com/coala/devops/commit/e309383bc5aacb007c4986bd74197238a4fcc96d\n+      - details: >\n+         planet.ini: Add palash25 gsoc blog feed.\n+  - 5:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/b06dfe44fa99ffeb997f6f0a4bf302938fb9734c\n+      - details: >\n+         Added `FileFactory` class. Objects of this class are used\n+         to represent files and replace file contents in the file dict.\n+  - 6:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/77c1dca15dc82d1753aa0962017899392d0033ec\n+      - details: >\n+         Added `Directory` class. This class will act as an interface\n+         to directories providing useful information about them. The\n+         objects of this class can be used by bears that operate only\n+         on directories and perform analysis based on the things like\n+         directory structure.\n+  - 7:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/fc568a01ba489376b4d6efac12ea772cb3cb1573\n+      - details: >\n+         Added `memoized_property`. `memoized_property` is a decorator\n+         that caches the properties of `FileFactory` class.\n+  - 8:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/81bbca42f82319aed22ba7f90781d886d559d4dd\n+      - details: >\n+         NextGen_Core.rst: Update caching section. \n+  - 9:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/87d3dffd1a52c42ac60da0199ee34bd95827b8ff\n+      - details: >\n+         IO.rst: Add FileFactory docs.\n+  - 10:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/7bc5d7f7b84e91da9f6aa2f77d40f92e66c850d5\n+      - details: >\n+         NextGen_Core.rst: Add link to IO docs.\n+  - 11:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/54622c2b03e1b84bb122130af182424d706d3de4\n+      - details: >\n+         `FileFactory`: Use `cached_property` instead of `memoized_property`.\n+  - 12:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/415361f5a4c12cd65dd4cc171d2a8ebbba3bc92c\n+      - details: >\n+         A new attribute `newline` was added to `FileFactory` to force\n+         newlines on the file content.\n+  - 13:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/fbe8452360eb39340ace4334c2df133a1ee6de97\n+      - details: >\n+         Processing: Add middleware `FileDict` that provides the bears\n+         with the actual file contents instead of the `FileFactory` objects.\n+  - 14:\n+      - repo: coala\n+      - link: https://github.com/coala/coala/commit/e138e4875fc6d1474a93758881f550e05df8e329\n+      - details: >\n+         Processing: Modify tests to use actual files instead of hard coded\n+         tuples as file content.\n+  - 15:", "created_at": "2018-08-13T08:31:10Z", "last_edited_at": null, "author": "palash25", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY0MzQxNw==", "fields": {"body": "alright added some more", "diff": "@@ -0,0 +1,269 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+report_year: 2018\n+date: 2018-08-12\n+student: Saksham Bansal\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Improve installation of coala and coala-bears\n+project_link: https://summerofcode.withgoogle.com/projects/#4642118669172736\n+tarball: https://rawgit.com/anctartica/GSoC-Report/master/work.tar.gz\n+sha256sum: f413963583c7e18a5ccb42f21405290edcf79a0f8c61106ff21671efe0b98238\n+mentors: >\n+  [Muhammad Kaisar Arkhan](https://github.com/yukiisbored),\n+  [Matt Bodenhamer](https://github.com/mbodenhamer),\n+  [Andrey Safonov](https://github.com/xferra)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/10\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/11\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/12\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/13\n+bio: >\n+ I'm a sophomore year student studying Computer Science at Netaji Subhash\n+ Institute of Technology, Dehli. I am always looking for opportunities to\n+ put my programming skill to good use by contributing to open source which also\n+ allows me to improve my own skill.\n+social:\n+  - GitHub:\n+      - username: anctartica\n+      - link: https://github.com/anctartica\n+  - GitLab:\n+      - username: anctartica\n+      - link: https://gitlab.com/anctartica\n+  - Gitter:\n+      - username: anctartica\n+      - link: https://gitter.im/anctartica\n+  - OpenHub:\n+      - username: anctartica\n+      - link: https://www.openhub.net/accounts/anctartica\n+email: sakshamb.co.17@nsit.net.in\n+blog: https://medium.com/@sakshamb.co.17\n+activity:\n+  - 1:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/ca27c58eef778fd7b3aff3b874b0e58f56e4a559\n+      - details: >\n+          Create a proposal regarding the project.\n+  - 2:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/b9f35115b42b105c550cf53c44a01f1257680697\n+      - details: >\n+          Add appveyor CI.\n+  - 3:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/1e2d7170f4f9eb232c48f4d372d957b3c423d05c\n+      - details: >\n+         Use dependency management master\n+  - 4:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/5e8cffc70834ab7263316a7e1648c037b52e2206\n+      - details: >\n+         Fix docopt usage pattern.\n+  - 5:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/aa5e957018331db0d09099963bad1c2b86d147c5\n+      - details: >\n+         Fix incorrect behaviour\n+  - 6:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/437a8e527d2b64d471d3022996ddf24ab754cb5a\n+      - details: >\n+         Clean up code required for 100% coverage\n+  - 7:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/551516fcd5aac2bf46615d6a7827a7a9e8e7505a\n+      - details: >\n+         Add unittests for 100% coverage\n+  - 8:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/df1ffac4e49eead45e56e8649d1378f62330a2a4\n+      - details: >\n+         Mobanise setup.cfg\n+  - 9:\n+      - repo: cib\n+      - link: https://gitlab.com/coala/cib/commit/139490a906645afb704aa083dfbc26727c2a412f\n+      - details: >\n+         Allow showing multiple bears\n+  - 10:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/3f0557bfe4fca5e9bf99ae0226b091f19f5589ab\n+      - details: >\n+         Remove test_pyversion\n+  - 11:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/943e54125c7d354098ee11370251b0eec4ac81ef\n+      - details: >\n+         Add variable for cache dir on appveyor\n+  - 12:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/a7b8f2ff0f3e68bd56afa98a12d88054d6080ab2\n+      - details: >\n+         Add option for Python 3.6 jobs on all repos\n+  - 13:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/dd81996f93b3a48efe18b907fc2190f40ee11bdd\n+      - details: >\n+         Add template for init file for exporting version\n+  - 14:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/8eaac28f36ed8c48ef2462268b764c7d0f484346\n+      - details: >\n+         Remove brackets around string with one item in setup.py template\n+  - 15:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/c3bfe9a235613fd5701cd55f3e2fc5ea4f9f761c\n+      - details: >\n+         Run coala static code analysis from Appveyor\n+  - 16:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/b10ecd5acdfd1c6fc0cb64a696ca8b40ecc8abc2\n+      - details: >\n+         Pin setuptool to 21 for supporting environment markers\n+  - 17:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/7aeb5b7c197cf3d2f5d7a6ed947bed8a1fcf7078\n+      - details: >\n+         Use coala-bears master for coala analysis on Appveyor\n+  - 18:\n+      - repo: coala-mobans\n+      - link: https://gitlab.com/coala/mobans/commit/431d06caaf60eb45d36688244ed110f90f6a58ec\n+      - details: >\n+         Create coveragerc template to resolve a bug with coverage on cib\n+  - 19:\n+      - repo: coala-utils\n+      - link: https://gitlab.com/coala/coala-utils/commit/43c81871476e14ce0d777129bff8cdfc557be342\n+      - details: >\n+         Remove error handling on import for complete test coverage on Appveyor build\n+  - 20:\n+      - repo: coala-utils\n+      - link: https://gitlab.com/coala/coala-utils/commit/18c91bb2824e6bcb09de14af3ae38ec279b8d9e3\n+      - details: >\n+         use __all__ for exports to prevent failing coala --ci check\n+  - 21:\n+      - repo: coala-utils\n+      - link: https://gitlab.com/coala/coala-utils/commit/25cc5a3178586a1d51d0385eca12a176914a0b8c\n+      - details: >\n+         Use appveyor template for coala-utils\n+  - 22:\n+      - repo: coala-bears\n+      - link: https://github.com/coala/coala-bears/commit/c35a2ed04935fd7665514e6af7828f1bfd931a03\n+      - details: >\n+         Improve and cleanup script for generating bear requirements and generate cabal requirements\n+  - 23:\n+      - repo: coala-bears\n+      - link: https://github.com/coala/coala-bears/commit/26b696969dd38ca1a1ab91163e0154f6c905e252\n+      - details: >\n+         Move the generate_package script from the coala-bears package to .ci directory\n+  - 24:\n+      - repo: coala-bears\n+      - link: https://github.com/coala/coala-bears/commit/efdfbc1cec98db76a5bb2c75fbfa414686be4db8\n+      - details: >\n+         Use CabalRequirement for HaskellLintBear\n+  - 25:\n+      - repo: coala-bears\n+      - link: https://github.com/coala/coala-bears/commit/e62d16f8315e4dcd10c9c57af3ab3e5973b10d73\n+      - details: >\n+         Add language setting for ESLintBear using various plugins for eslint\n+  - 26:\n+      - repo: coala-bears\n+      - link: https://gitlab.com/coala/package_manager/commit/a786450e5cdfd3172caf86c60786c0d1ce6ee10f\n+      - details: >\n+         Add GherkinLintBear\n+  - 27:\n+      - repo: coala-bears\n+      - link: https://gitlab.com/coala/package_manager/commit/868afe0dcdf6ab0c964f1ce72152fedb132f44cb\n+      - details: >\n+         Add BashateBear\n+  - 28:\n+      - repo: dependency_management\n+      - link: https://gitlab.com/coala/package_manager/commit/75b3c37f7ffd7b6c9f693d131bf4f627fd95373d\n+      - details: >\n+         Add PlatformRequirement class for system specific package managers\n+  - 29:\n+      - repo: dependency_management\n+      - link: https://gitlab.com/coala/package_manager/commit/a786450e5cdfd3172caf86c60786c0d1ce6ee10f\n+      - details: >\n+         Return exitcode after running the install command\n+  - 30:\n+      - repo: dependency_management\n+      - link: https://gitlab.com/coala/package_manager/commit/868afe0dcdf6ab0c964f1ce72152fedb132f44cb\n+      - details: >\n+         Add CabalRequirement for backwards compatibility\n+  - 31:\n+      - repo: dependency_management\n+      - link: https://gitlab.com/coala/package_manager/commit/995b50ba1861296d333442be9e16ba2b1c4a47b6\n+      - details: >\n+         Run pip as python module\n+  - 32:\n+      - repo: bear-install-playbook\n+      - link: https://gitlab.com/coala/bear-install-playbook/commit/7ba1c3ef9c29dc58a1c5b0109328317f3b0924df\n+      - details: >\n+         Add playbook for installing individual bears\n+  - 33:\n+      - repo: bear-install-playbook\n+      - link: https://gitlab.com/coala/bear-install-playbook/commit/1b288844aa157ff4e8c80a3179c5d58163a2719f\n+      - details: >\n+         Test playbook using docker + Travic CI\n+  - 34:\n+      - repo: bear-install-playbook\n+      - link: https://gitlab.com/coala/bear-install-playbook/commit/7dee7591927c0883269f5741102b90bfb93f84ff\n+      - details: >\n+         Add instructions on using playbook\n+  - 35:", "created_at": "2018-08-13T15:01:45Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY0NDM5NA==", "fields": {"body": "This was due to BSD tar (on mac) vs. GNU tar.\nShould be fixed now", "diff": "@@ -0,0 +1,269 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+report_year: 2018\n+date: 2018-08-12\n+student: Saksham Bansal\n+organisation: coala\n+organisation_link: https://coala.io\n+project: Improve installation of coala and coala-bears\n+project_link: https://summerofcode.withgoogle.com/projects/#4642118669172736\n+tarball: https://rawgit.com/anctartica/GSoC-Report/master/work.tar.gz", "created_at": "2018-08-13T15:04:24Z", "last_edited_at": null, "author": "anctartica", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTYwMDk0MA==", "fields": {"body": "can stay in your patches, but doesnt belong in the activity report", "diff": "@@ -0,0 +1,444 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Kilari Teja\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: coala language server\n+project_link: https://summerofcode.withgoogle.com/projects/#4971369184362496\n+tarball: https://github.com/ksdme/GSoCReport/raw/master/ksdme_coala.tar.gz\n+sha256sum: 71985d45fbf7648029ac14541b7012d5ff51bcc0e9b2ebf7032a3f69f3ce5b1a\n+mentors: >\n+  [Ce Gao](https://github.com/gaocegege) &\n+  [Nicholas Gates](https://github.com/gatesn) &\n+  [Nalin Bhardwaj](https://github.com/nalinbhardwaj)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/47\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/48\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/49\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/50\n+bio: >\n+  I am Kilari Teja, a final year student of Computer Science Engineering at\n+  Guru Gobind Singh Indraprastha University, located in Delhi, India. I have\n+  been a GSoC'18 student for [coala](http://coala.io) working on bringing\n+  coala to code editors via language server protocol. My projects makes it\n+  possible for linting and fixing code to be performed right from the code\n+  editor using coala.\n+social:\n+  - GitHub:\n+      - username: ksdme\n+      - link: https://github.com/ksdme\n+  - GitLab:\n+      - username: ksdme\n+      - link: https://gitlab.com/ksdme\n+  - Gitter:\n+      - username: ksdme\n+      - link: https://gitter.im/ksdme\n+  - OpenHub:\n+      - username: ksdme\n+      - link: https://www.openhub.net/accounts/ksdme\n+email: ksdme9@gmail.com\n+blog: http://medium.com/ksdme-coala-and-gsoc\n+activity:\n+\n+  - 1:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/10d706aa14325147caacd053e20c4fb77af56376\n+      - details: >\n+         coala_language_server.md: Update project details\n+\n+  - 2:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/07a63ec9661b1d32f7fc7002bf14f74cfc77447e\n+      - details: >\n+         cEP-0028: Optimizing coala for language server\n+\n+  - 3:\n+      - repo: solar/shortlinks\n+      - link: https://gitlab.com/coala/solar/shortlinks/commit/bb881df7bb17ce997de0c37d2ac31b9ee749d745\n+      - details: >\n+         cEP-0028: Fix wiki link template\n+\n+  - 4:\n+      - repo: solar/shortlinks\n+      - link: https://gitlab.com/coala/solar/shortlinks/commit/ebfd0492fc9b424db9af1b635453ea3701b9f097\n+      - details: >\n+         Fix misconfigured endpoints\n+  - 5:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/pull/32/commits/bd12657c67b257ed4b0f498c14cab389f96cc91a\n+      - details: >\n+         [Bonding Period Work] langserver.py: Update to use jsonrpc\n+\n+  - 6:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/305a441742f109166bcae241e10b101ad5d908c9\n+      - details: >\n+         coala_langserver: Drop codebase and tests\n+\n+  - 7:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/b1f5ae490fbafe06a14dcb34fa5578e2fbb118a7\n+      - details: >\n+         .vscode-client: Drop vscode client\n+\n+  - 8:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/6bbad87389004b872affdd6e13e7b079e81b2108\n+      - details: >\n+         tests: Add test helpers and resources\n+\n+  - 9:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/5d4c230cd1a819572d423a5ba90a537d0ca1b91c\n+      - details: >\n+         coalals.utils.log: Add log configuration\n+\n+  - 10:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/3e7defd3b78e2b5a93fedc856cf871bd0f691d52\n+      - details: >\n+         coalals.interface: Add initial coala wrapper\n+\n+  - 11:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/f10159391befe2f184c453183932e5e3747a2c34\n+      - details: >\n+         coalals.results: Add result processing module\n+\n+  - 12:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/9e8473120d2ea998e6b4b1e2e6812e2ff6a56505\n+      - details: >\n+         coalals.langserver: Add language server module\n+\n+  - 13:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/1a5f1c0b71afc1ff0f8455ddc43d89bff20f8436\n+      - details: >\n+         coalals.main: Add main.py\n+\n+  - 14:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/5c5f87f50fe4d61a1fd921a7d03801b669c0ea03\n+      - details: >\n+         test-requirements.txt: Update test requirements\n+\n+  - 15:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8c64f2af8176f1590be6b7d227d0d62bf28912fd\n+      - details: >\n+         requirements.txt: Update requirements\n+\n+  - 16:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/d56adf2e2c7ef5d2a17ecd47748b35d27291f51c\n+      - details: >\n+         Update test configuration\n+\n+  - 17:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/c60a565ef8392bbda571049e29109bdfd231de26\n+      - details: >\n+         coala-ls.sh: Add coala-ls.sh\n+\n+  - 18:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/cee8c2c7c047999d639b03802e0e3c0f029e169e\n+      - details: >\n+         README: Update README.md and assets\n+\n+  - 19:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/ef8dc592c80d629d90c0596bb1a2be3df75c7b40\n+      - details: >\n+         .coafile: Update config and globs\n+\n+  - 20:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8d7f8d05e506b252179c92335f98cb365102a405\n+      - details: >\n+         perf-metrics.md: Add performance metrics\n+\n+  - 21:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/32fe61caa96d8a039cb532bb46eb1ed8e10cbfb4\n+      - details: >\n+         coalals.results: Refactor to submodule\n+\n+  - 22:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/e9745d34b9705787bad41df12a1801eee4cfab7e\n+      - details: >\n+         requirements.txt: coalals.utils.files: Add get_disk_contents()\n+\n+  - 23:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/88d79837106185382d3feadc8c9330f219ea271e\n+      - details: >\n+         requirements.txt: Add whatthepatch\n+\n+  - 24:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/e9745d34b9705787bad41df12a1801eee4cfab7e\n+      - details: >\n+         coalals.results.fixes: Add fixes parsing & lsp models\n+\n+  - 25:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 26:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8e75ead740fac57b461bb12497db4147f78d4d19\n+      - details: >\n+         coalals.langserver: Add support for textDocument/formatting\n+\n+  - 27:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/99c0663b0177bba30a4b8025615530d15e4d441b\n+      - details: >\n+         coalals.langserver: Add support for showMessageRequest\n+\n+  - 28:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 29:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 30:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/6e095ca6c18813878766e9767d99a4bec10ec4a8\n+      - details: >\n+         perf-metrics.md: Update perf-metrics for Phase-2\n+\n+  - 31:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/6648e76bd6374ee826fdbf0a2aafa800d6c101bb\n+      - details: >\n+         Fix single line docstring\n+\n+  - 32:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/de0098b2c7c1b5593fd39fdcdeb98fa24c755a2e\n+      - details: >\n+         .codecov.yml: Increase test coverage target\n+\n+  - 33:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/bd12657c67b257ed4b0f498c14cab389f96cc91a\n+      - details: >\n+         Update to jsonrpc lib\n+\n+  - 34:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/a0b59d36c33ae537b33ffd01d0f1a383ce1cdd57\n+      - details: >\n+         README.md: Update README.md\n+\n+  - 35:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/2618f470e509a129e05f29ebf6cd9a7f300e9867", "created_at": "2018-08-13T13:07:25Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTYwMTA1MQ==", "fields": {"body": "can stay in your patches, but doesnt belong in the activity report", "diff": "@@ -0,0 +1,444 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-12\n+student: Kilari Teja\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: coala language server\n+project_link: https://summerofcode.withgoogle.com/projects/#4971369184362496\n+tarball: https://github.com/ksdme/GSoCReport/raw/master/ksdme_coala.tar.gz\n+sha256sum: 71985d45fbf7648029ac14541b7012d5ff51bcc0e9b2ebf7032a3f69f3ce5b1a\n+mentors: >\n+  [Ce Gao](https://github.com/gaocegege) &\n+  [Nicholas Gates](https://github.com/gatesn) &\n+  [Nalin Bhardwaj](https://github.com/nalinbhardwaj)\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/47\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/48\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/49\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/50\n+bio: >\n+  I am Kilari Teja, a final year student of Computer Science Engineering at\n+  Guru Gobind Singh Indraprastha University, located in Delhi, India. I have\n+  been a GSoC'18 student for [coala](http://coala.io) working on bringing\n+  coala to code editors via language server protocol. My projects makes it\n+  possible for linting and fixing code to be performed right from the code\n+  editor using coala.\n+social:\n+  - GitHub:\n+      - username: ksdme\n+      - link: https://github.com/ksdme\n+  - GitLab:\n+      - username: ksdme\n+      - link: https://gitlab.com/ksdme\n+  - Gitter:\n+      - username: ksdme\n+      - link: https://gitter.im/ksdme\n+  - OpenHub:\n+      - username: ksdme\n+      - link: https://www.openhub.net/accounts/ksdme\n+email: ksdme9@gmail.com\n+blog: http://medium.com/ksdme-coala-and-gsoc\n+activity:\n+\n+  - 1:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/10d706aa14325147caacd053e20c4fb77af56376\n+      - details: >\n+         coala_language_server.md: Update project details\n+\n+  - 2:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/07a63ec9661b1d32f7fc7002bf14f74cfc77447e\n+      - details: >\n+         cEP-0028: Optimizing coala for language server\n+\n+  - 3:\n+      - repo: solar/shortlinks\n+      - link: https://gitlab.com/coala/solar/shortlinks/commit/bb881df7bb17ce997de0c37d2ac31b9ee749d745\n+      - details: >\n+         cEP-0028: Fix wiki link template\n+\n+  - 4:\n+      - repo: solar/shortlinks\n+      - link: https://gitlab.com/coala/solar/shortlinks/commit/ebfd0492fc9b424db9af1b635453ea3701b9f097\n+      - details: >\n+         Fix misconfigured endpoints\n+  - 5:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/pull/32/commits/bd12657c67b257ed4b0f498c14cab389f96cc91a\n+      - details: >\n+         [Bonding Period Work] langserver.py: Update to use jsonrpc\n+\n+  - 6:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/305a441742f109166bcae241e10b101ad5d908c9\n+      - details: >\n+         coala_langserver: Drop codebase and tests\n+\n+  - 7:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/b1f5ae490fbafe06a14dcb34fa5578e2fbb118a7\n+      - details: >\n+         .vscode-client: Drop vscode client\n+\n+  - 8:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/6bbad87389004b872affdd6e13e7b079e81b2108\n+      - details: >\n+         tests: Add test helpers and resources\n+\n+  - 9:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/5d4c230cd1a819572d423a5ba90a537d0ca1b91c\n+      - details: >\n+         coalals.utils.log: Add log configuration\n+\n+  - 10:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/3e7defd3b78e2b5a93fedc856cf871bd0f691d52\n+      - details: >\n+         coalals.interface: Add initial coala wrapper\n+\n+  - 11:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/f10159391befe2f184c453183932e5e3747a2c34\n+      - details: >\n+         coalals.results: Add result processing module\n+\n+  - 12:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/9e8473120d2ea998e6b4b1e2e6812e2ff6a56505\n+      - details: >\n+         coalals.langserver: Add language server module\n+\n+  - 13:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/1a5f1c0b71afc1ff0f8455ddc43d89bff20f8436\n+      - details: >\n+         coalals.main: Add main.py\n+\n+  - 14:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/5c5f87f50fe4d61a1fd921a7d03801b669c0ea03\n+      - details: >\n+         test-requirements.txt: Update test requirements\n+\n+  - 15:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8c64f2af8176f1590be6b7d227d0d62bf28912fd\n+      - details: >\n+         requirements.txt: Update requirements\n+\n+  - 16:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/d56adf2e2c7ef5d2a17ecd47748b35d27291f51c\n+      - details: >\n+         Update test configuration\n+\n+  - 17:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/c60a565ef8392bbda571049e29109bdfd231de26\n+      - details: >\n+         coala-ls.sh: Add coala-ls.sh\n+\n+  - 18:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/cee8c2c7c047999d639b03802e0e3c0f029e169e\n+      - details: >\n+         README: Update README.md and assets\n+\n+  - 19:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/ef8dc592c80d629d90c0596bb1a2be3df75c7b40\n+      - details: >\n+         .coafile: Update config and globs\n+\n+  - 20:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8d7f8d05e506b252179c92335f98cb365102a405\n+      - details: >\n+         perf-metrics.md: Add performance metrics\n+\n+  - 21:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/32fe61caa96d8a039cb532bb46eb1ed8e10cbfb4\n+      - details: >\n+         coalals.results: Refactor to submodule\n+\n+  - 22:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/e9745d34b9705787bad41df12a1801eee4cfab7e\n+      - details: >\n+         requirements.txt: coalals.utils.files: Add get_disk_contents()\n+\n+  - 23:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/88d79837106185382d3feadc8c9330f219ea271e\n+      - details: >\n+         requirements.txt: Add whatthepatch\n+\n+  - 24:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/e9745d34b9705787bad41df12a1801eee4cfab7e\n+      - details: >\n+         coalals.results.fixes: Add fixes parsing & lsp models\n+\n+  - 25:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 26:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/8e75ead740fac57b461bb12497db4147f78d4d19\n+      - details: >\n+         coalals.langserver: Add support for textDocument/formatting\n+\n+  - 27:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/99c0663b0177bba30a4b8025615530d15e4d441b\n+      - details: >\n+         coalals.langserver: Add support for showMessageRequest\n+\n+  - 28:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 29:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/7b4d59d0422be7017dc5fa14a4a7879bc5361c63\n+      - details: >\n+         coalals.results.diagnostics: Support fixes collection\n+\n+  - 30:\n+      - repo: coala-ls-gsoc\n+      - link: https://github.com/ksdme/coala-ls-gsoc/commit/6e095ca6c18813878766e9767d99a4bec10ec4a8\n+      - details: >\n+         perf-metrics.md: Update perf-metrics for Phase-2\n+\n+  - 31:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/6648e76bd6374ee826fdbf0a2aafa800d6c101bb\n+      - details: >\n+         Fix single line docstring\n+\n+  - 32:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/de0098b2c7c1b5593fd39fdcdeb98fa24c755a2e\n+      - details: >\n+         .codecov.yml: Increase test coverage target\n+\n+  - 33:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/bd12657c67b257ed4b0f498c14cab389f96cc91a\n+      - details: >\n+         Update to jsonrpc lib\n+\n+  - 34:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/a0b59d36c33ae537b33ffd01d0f1a383ce1cdd57\n+      - details: >\n+         README.md: Update README.md\n+\n+  - 35:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/2618f470e509a129e05f29ebf6cd9a7f300e9867\n+      - details: >\n+         Clean Repository\n+\n+  - 36:\n+      - repo: coala-vs-code\n+      - link: https://github.com/coala/coala-vs-code/commit/9a9ace96b7bb498d6521f1e2b8944290ed3d331f", "created_at": "2018-08-13T13:07:48Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTg4OTk3MA==", "fields": {"body": "Ah I see , they are squashing into one commit.\nOk, then this checks out.  Thanks", "diff": "@@ -266,61 +267,66 @@ activity:\n       - details: \"Add --ignore-names flag (#139).\"\n \n   - 46:\n+      - repo: vulture\n+      - link: https://github.com/jendrikseipp/vulture/commit/3c965e2\n+      - details: \"Add Item.get_whitelist_string. (#144)\"", "created_at": "2018-08-14T09:42:44Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTk4NzA5OA==", "fields": {"body": "Green Mode", "diff": "@@ -0,0 +1,162 @@\n+---\n+categories:\n+  - GSoC\n+  - 2018\n+  - StatusReport\n+date: 2018-08-14\n+student: Ishan Srivastava\n+organisation: coala\n+organisation_link: https://coala.io\n+report_year: 2018\n+project: Quickstart Green Mode\n+project_link: https://summerofcode.withgoogle.com/projects/#5792652830703616\n+tarball: https://cdn.rawgit.com/ishanSrt/ishanSrt.github.io/d859b05e/ishanSrt.tar.gz\n+sha256sum: 4dcee0f017d832965ca44a76d0a8b20f92d68fd2fb820975984a51b4ff34806a\n+mentors: >\n+  [Satwik Kansal](https://github.com/satwikkansal) &\n+  [Adhityaa Chandrasekar](https://github.com/adtac) &\n+phase:\n+  - Bonding: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/46\n+  - Phase 1: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/56\n+  - Phase 2: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/70\n+  - Phase 3: https://gitlab.com/coala/GSoC/GSoC-2018/milestones/72\n+bio: >\n+  I am a third year student (expected graduation date: May 2020) of Computer\n+  Science and Engineering at Indian Institute of Technology Dharwad. I\n+  participated in GSoC and worked with [coala](http://coala.io) to implement\n+  the coala-quickstart Green Mode for the repository\n+  [coala-quickstart](https://github.com/coala/coala-quickstart) to generate\n+  project dependent configuration files for the coala project, which make\n+  coala show no inconsistencies in the code base and are helpful in detecting\n+  inconsistencies in future commits. I also solved and contributed small\n+  patches to other coala repositories during the time period of GSoC.\n+social:\n+  - GitHub:\n+      - username: ishanSrt\n+      - link: https://github.com/ishanSrt\n+  - GitLab:\n+      - username: ishanSrt\n+      - link: https://gitlab.com/ishanSrt\n+  - Gitter:\n+      - username: ishanSrt\n+      - link: https://gitter.im/ishanSrt\n+  - OpenHub:\n+      - username: ishanSrt\n+      - link: https://www.openhub.net/accounts/ishanSrt\n+email: ishan.srt@gmail.com\n+blog: https://www.dowhatucant.com/gsoc_archive.html\n+activity:\n+\n+  - 1:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/e5724fa9b0be71304277e508c2f317318aeed1c4\n+      - details: >\n+         [Bonding Period Work] quickstart_green_mode.md: Add Quickstart Green Mode Project\n+\n+  - 2:\n+      - repo: projects\n+      - link: https://github.com/coala/projects/commit/ea3f0ac7e8d98cdf1afa5d6e99345a760f83dc39\n+      - details: >\n+         [Bonding Period Work] .gitignore: Add .DS_Store\n+\n+  - 3:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/0daa94289919d5dff171ce771b24f057c64f33d5\n+      - details: >\n+         README.md: Add green mode cEP\n+\n+  - 4:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/e58b935be77459b9323a80ef9b47267d445d8c5c\n+      - details: >\n+         cEP-0022.md: Add cEP for quickstart green mode\n+\n+  - 5:\n+      - repo: cEPs\n+      - link: https://github.com/coala/cEPs/commit/f423227b4868376496f2280ee5e69aeb2db66724\n+      - details: >\n+         CODEOWNERS: Add a list of developers\n+\n+  - 6:\n+      - repo: coala-quickstart\n+      - link: https://github.com/coala/coala-quickstart/commit/a725f019c898a3422c856e1deae9cca906594883\n+      - details: >\n+         green_mode.py: Run BEAR_DEPS bears while testing\n+\n+  - 7:\n+      - repo: coala-quickstart\n+      - link: https://github.com/coala/coala-quickstart/commit/9e91285ac87cd36ee846743f1c9d891c324f8c18\n+      - details: >\n+         bear_settings.yaml: Fix wrong bear for settings\n+\n+  - 8:\n+      - repo: coala-quickstart\n+      - link: Project.py: Fix bug while printing languages\n+      - details: >\n+         Project.py: Fix bug while printing languages\n+\n+  - 9:\n+      - repo: coala-quickstart\n+      - link: https://github.com/coala/coala-quickstart/commit/8bbd4dab13853e61a1cd1a2634d0c6da72b09716\n+      - details: >\n+         green_mode_core.py: Fix a bug\n+\n+  - 10:\n+      - repo: coala-quickstart\n+      - link: https://github.com/coala/coala-quickstart/commit/94e9eda139234e8b9183ce5462bd7c9a9d97e197\n+      - details: >\n+         Aggregate green mode per file results\n+\n+\n+---\n+\n+### Meta-review", "created_at": "2018-08-14T15:02:59Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA3MDEwMA==", "fields": {"body": "Yup it works. Thanks :)", "diff": "@@ -776,6 +776,11 @@ a.chip i {\n   cursor: pointer;\n }\n \n+.coala-online .add-bear {", "created_at": "2018-08-18T09:25:13Z", "last_edited_at": null, "author": "Akhelesh", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA4MDA4Mw==", "fields": {"body": "Don't worry, this shows how insistent you are on learning.", "diff": "@@ -146,8 +146,8 @@ <h4>Optional Settings</h4>\n         <div class=\"row blue-grey darken-4 white-text z-depth-1 no-margin\">\n           <span>\n             <a class=\"waves-effect grey-text text-lighten-2\">\n-              <i ng-click=\"add_bears(section)\" class=\"fa fa-plus-circle bears-icon-small\" aria-hidden=\"true\"> &nbsp;ADD BEAR\n-              </i>\n+              <i ng-click=\"add_bears(section)\" class=\"fa fa-plus-circle bears-icon-small\" aria-hidden=\"true\"></i>\n+              &nbsp;ADD BEAR", "created_at": "2018-08-18T16:14:38Z", "last_edited_at": null, "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjA3NjY1MA==", "fields": {"body": "An h1 heading on top saying something as 'coala GSoC reports' would be nice", "diff": "@@ -0,0 +1,25 @@\n+---\n+title: Project reports\n+---\n+", "created_at": "2018-08-22T19:19:15Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjUyOTEzNw==", "fields": {"body": "Yes.", "diff": "@@ -43,7 +42,6 @@ requirements:\n   - \"The participant should have at least one patch to\n      [GitMate](https://gitlab.com/gitmate/open-source/gitmate-2) accepted.\"\n   - \"The participant should demonstrate that he can operate Jira from the Python shell in his proposal.\"\n-status: in_progress", "created_at": "2018-08-24T06:08:01Z", "last_edited_at": null, "author": "nkprince007", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUxNjU2Mw==", "fields": {"body": "To make python 3.6 section more intuitive and readable, can we consider merging disable_global in this section too and then overriding install?", "diff": "@@ -38,12 +42,15 @@ jobs:\n     # OSX build removed due to long build startup delays\n     # Restore matrix job entry from d2d67fab to test OSX\n     - python: 2.7\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.3\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.4.3\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.6", "created_at": "2018-09-01T15:33:44Z", "last_edited_at": "2018-09-01T15:36:43Z", "author": "ksdme", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUzNTE5OQ==", "fields": {"body": "Feel free to create a newcomer issue about the bears one; explain it fairly clearly, so domain knowledge isnt needed - only expect yaml skills to complete the task.", "diff": "@@ -38,12 +42,15 @@ jobs:\n     # OSX build removed due to long build startup delays\n     # Restore matrix job entry from d2d67fab to test OSX\n     - python: 2.7\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.3\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.4.3\n+      <<: *disable_global\n       stage: unsupported\n       script: .misc/check_unsupported.sh\n     - python: 3.6", "created_at": "2018-09-02T10:06:24Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTI1OTUxNw==", "fields": {"body": "After reading the definition out loud a couple of times, i figured i since stdin input is not been taken anymore, i need to return the filename myself.\nI am trying to decipher further!\nIn the meanwhile, thanks for the help! \ud83d\ude04", "diff": "@@ -7,15 +7,14 @@\n \n @linter(executable='csscomb',\n         output_format='corrected',\n-        use_stdin=True,", "created_at": "2018-09-05T13:02:46Z", "last_edited_at": null, "author": "atb00ker", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTI2MTM2Ng==", "fields": {"body": "This is a linter bear so you should read http://api.coala.io/en/latest/Developers/Writing_Linter_Bears.html and http://api.coala.io/en/latest/Developers/Linter_Bears_Advanced.html. If you cannot find everything you need, read the source code ;)", "diff": "@@ -7,15 +7,14 @@\n \n @linter(executable='csscomb',\n         output_format='corrected',\n-        use_stdin=True,", "created_at": "2018-09-05T13:08:44Z", "last_edited_at": null, "author": "li-boxuan", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTkzMjgwMQ==", "fields": {"body": "Blank space not needed.", "diff": "@@ -0,0 +1,11 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+", "created_at": "2018-09-07T11:45:51Z", "last_edited_at": null, "author": "shikharvaish28", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkxNzYxNA==", "fields": {"body": "First you say make the tuple of this. When I make tuple then you say previous one is right .", "diff": "@@ -0,0 +1,16 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class Haskell:\n+    extensions = ('.hs')", "created_at": "2018-09-16T15:10:28Z", "last_edited_at": null, "author": "rishabhgarg25699", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODk0MTI1NQ==", "fields": {"body": "I think these are all in alphabetical order. So Haskell should come above HTML.", "diff": "@@ -42,6 +42,7 @@\n     'Fortran',\n     'Golang',\n     'Hypertext Markup Language 2.0, 3.2, 4.0, 4.1, 5, 5.1',\n+    'Haskell 1.0, 1.1, 1.2, 1.3, 1.4',", "created_at": "2018-09-19T19:51:38Z", "last_edited_at": null, "author": "Man-Jain", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTczMTk1MA==", "fields": {"body": "In this route, if the user hit the /dashboard path in URL then he will be directed to /.  so in this function, we are not changing any state of the component. so it was used but its value is not used.", "diff": "@@ -27,7 +27,7 @@ import {parseRoute, buildRoute} from './route-utils';\n const routes = [\n   // Redirect from `/dashboard` to `/`\n   { path: '/dashboard',\n-    onEnter: (state, replace) => browserHistory.push('/')", "created_at": "2018-09-24T05:30:21Z", "last_edited_at": null, "author": "aditya81070", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQxODM3NQ==", "fields": {"body": "I think yes because line no. 120 in this program has also the same concept . It has also the gap of one line .", "diff": "@@ -84,13 +85,17 @@ def run(self, filename, file,\n         will not change functionality of the code in any way.\n \n         :param max_line_length:   Maximum number of characters for a line.\n+                                  When set to 0 allows infinite line length.\n         :param indent_size:       Number of spaces per indent level.\n         :param pep_ignore:        A list of errors/warnings to ignore.\n         :param pep_select:        A list of errors/warnings to exclusively\n                                   apply.\n         :param local_pep8_config: Set to true if autopep8 should use a config\n                                   file as if run normally from this directory.\n         \"\"\"\n+        if not max_line_length:\n+            max_line_length = sys.maxsize\n+", "created_at": "2018-09-29T06:43:50Z", "last_edited_at": null, "author": "rishabhgarg25699", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE0NzQ1OA==", "fields": {"body": "Centering the links in small screen does not look good.", "diff": "@@ -152,3 +152,7 @@ img {\n .highlight .nn, .highlight .nc {\n     text-decoration: none;\n }\n+\n+.shorturl {\n+    overflow-x: auto;\n+}", "created_at": "2018-10-05T21:50:21Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE0ODA3Nw==", "fields": {"body": "Not completely sure myself, that's why I just question it ;)", "diff": "@@ -1,6 +1,12 @@\n Welcome to the Newcomers' Guide!\n ================================\n \n+.. container:: shorturl\n+\n+    +-----------+---------------------------+-----------------------------+\n+    | Short-URL | https://coala.io/newcomer | https://coala.io/newcomers  |\n+    +-----------+---------------------------+-----------------------------+", "created_at": "2018-10-05T21:53:46Z", "last_edited_at": null, "author": "Makman2", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE3MjY4Mw==", "fields": {"body": "Actually here: #5788 (comment) makman suggested to change to Redirect from.", "diff": "@@ -1,6 +1,12 @@\n Welcome to the Newcomers' Guide!\n ================================\n \n+.. container:: shorturl\n+\n+    +-----------------+-------------------------------------------------------+\n+    | Redirects from  | https://coala.io/newcomer  https://coala.io/newcomers |", "created_at": "2018-10-06T05:45:13Z", "last_edited_at": null, "author": "ayan-b", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE4MDkzMg==", "fields": {"body": "As per my knowledge the issue is to add infinite line length so use execution_count\": 2, using this cell 2 which is this version will be able to reference the variables at cell 1.\nAlthough i am unaware of what actually you did at :\n \"source\": [\n    \"x = 'int\\nmain ()\\n' +\n         '{\\n' +\n         ' ' * 1000 + 'return 0;\\n' +\n         '}'\"\n   ]\n\nOther reviewers will tell you, most probably maintainers.", "diff": "@@ -22,6 +22,20 @@\n    \"source\": [\n     \"a markdown cell is not a code cell\"\n    ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 1,", "created_at": "2018-10-06T12:18:11Z", "last_edited_at": null, "author": "Dhiraj240", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzIwNTY2NQ==", "fields": {"body": "I am so sorry, if you need my help in any issue I would love to assist you.", "diff": "@@ -461,13 +461,16 @@ def execute(self, *args, debug=False, **kwargs):\n                          .format(name), str(exc))\n \n             if self.kind() == BEAR_KIND.LOCAL:\n-                self.err('Bear {} failed to run on file {}. Take a look '\n-                         'at debug messages (`-V`) for further '\n-                         'information.'.format(name, args[0]))\n+                if self.section['log_level'].value == 'DEBUG':\n+                    pass\n+                else:\n+                    self.err('Bear {} failed to run on file {}. Take a look '\n+                        'at debug messages (`-V`) for further '", "created_at": "2018-10-07T08:46:58Z", "last_edited_at": null, "author": "sladyn98", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzMxMjA0Ng==", "fields": {"body": "No.\nWe dont fix this here.\nhttps://gitlab.com/coala/mobans/blob/master/test-requirements.txt#L23 is where the problem is.\nAfter that is fixed, we sync it to all repos.", "diff": "@@ -20,6 +20,6 @@ pytest-timeout~=1.3.0\n pytest-travis-fold~=1.3.0\n pytest-xdist~=1.15\n requests-mock~=1.2\n-pip!=9.0.2, !=10.0.*, !=18.0\n+pip!=9.0.2, !=10.0.*, !=18.*", "created_at": "2018-10-08T10:12:30Z", "last_edited_at": null, "author": "jayvdb", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTQzMzg4", "fields": {"body": "sounds good. atm I have no idea how to edit the js file with rebase edit as it creates conflicts\nwill do later :)", "diff": "@@ -147,5 +147,133 @@ coala should support generating metrics for your code.\",\n \t\t\"initiatives\" : [\"GSoC\"],\n \t\t\"tags\" : [\"Web\", \"Blog\"],\n \t\t\"markdown\": \"coala_web.md\"\n+\t},\n+\t{\n+\t\t\"name\" : \"Optimize Caching\",\n+\t\t\"desc\" : \"Improve coala's performance by implementing caching strategies.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"At least one patch to the coala core should be accepted and merged.\",\n+\t\t\t\"The student should be familiar with ongoing technical cEPs.\",\n+\t\t\t\"The proposal needs to show some familiarity with coala's caching \\\n+\t\t\timplementation.\",\n+\t\t\t\"The student should have understanding of the current caching mechanism\"\n+\t\t],\n+\t\t\"difficulty\" : \"medium\",\n+\t\t\"issues\" : [\n+\t\t\t\"https://github.com/coala/coala/issues/2541\",\n+\t\t\t\"https://github.com/coala/coala/issues/2699\",\n+\t\t\t\"https://github.com/coala/coala/issues/2912\"\n+\t\t],\n+\t\t\"mentors\" : [\n+\t\t\t\"adtac\",\n+\t\t\t\"sils\"\n+\t\t],\n+\t\t\"initiatives\" : [\"GSoC\"],\n+\t\t\"tags\" : [\"Core\", \"Bears\"],\n+\t\t\"markdown\": \"optimize_caching.md\"\n+\t},\n+\t{\n+\t\t\"name\" : \"Cohesive Editor Support\",\n+\t\t\"desc\" : \"\",", "created_at": "2017-01-19T19:53:25Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3OTM5NjQ2", "fields": {"body": "I'm against this addition, getting stuff merged is mandantory. Period. If there's a problem with the goals that can be adjusted but this is not negotiable.", "diff": "@@ -4,6 +4,12 @@ We expect you to:\n * Blog at least once per week (this will be aggregated on\n [blog.coala.io](https://blog.coala.io)).\n * Participate in weekly meetings with your mentor.\n-* Get stuff merged, before the deadlines!\n-* Get in contact with your mentors or the admins if any even remotely\n-potential problems arise.\n+* Get stuff merged, before the deadlines! If this, for whatever reason, looks\n+to be problematic, talk to your mentor or an admin!", "created_at": "2017-01-26T07:10:20Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3", "fields": {"body": "@hemang \ud83d\udc4d  This solves the page refresh problem", "diff": "@@ -12,16 +32,17 @@\n \t\t})\n \t})\n \n-\tapp.controller('TabController', function () {\n-\t\tthis.tab = 1\n-\t\tthis.setTab = function (stab) {\n-\t\t\tthis.tab = stab\n-\t\t\t$(\".button-collapse\").sideNav('hide');\n-\t\t}\n-\t\tthis.isSet = function (stab) {\n-\t\t\treturn this.tab == stab\n-\t\t}\n-\t})\n+    app.controller('TabController', function ($location) {\n+        this.tab = \"/home\";", "created_at": "2017-01-27T09:48:19Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MzM0Mzcw", "fields": {"body": "I'd say \"Half of the choosen issues\" or so", "diff": "@@ -0,0 +1,28 @@\n+The Project is about fixing issues with Generic Bears.\n+\n+Generic Bears have the potential to be awesome, and they have started to get\n+their, but still require a some issues to be fixed. For eg: QuotesBear is not\n+reliable, AnnotationBear needs to give a better more detailed API, \n+IndentationBear looks cool but is not usable yet. These bears can be found \n+[here](https://github.com/coala/coala-bears/tree/master/bears/general).\n+\n+The task is to fix as many issues with these bears and make them as usable\n+as possible.\n+\n+### Milestones\n+\n+##### GSoC 2017 Coding Starts\n+\n+ * All issues are disccused, and a general idea behind the algorithm of\n+ most generic bears is developed.\n+ * New changes to these algorithms(if required) are proposed.\n+\n+##### GSoC 2017 Midterm\n+\n+ * A given set of issues defined in the proposal are resolved.", "created_at": "2017-01-28T16:42:48Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4NDEzODUy", "fields": {"body": "why not just apply the center-block class? Should be avail by default in bootstrap", "diff": "@@ -47,7 +47,7 @@\n             <div  ng-repeat=\"member in gic.adminsList\" class=\"card card-main showcase-card-gi\">\n                 <div class=\"empty\"></div>\n                 <div class=\"card-action profile-data\" >\n-                  <center><img class=\"profile-img\" height=\"100\" ng-src=\"{{ member.github_avatar_url }}\"></center>\n+                  <img class=\"profile-img\" height=\"100\" ng-src=\"{{ member.github_avatar_url }}\">", "created_at": "2017-01-30T10:36:12Z", "last_edited_at": null, "author": "sils", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MzczMzU4", "fields": {"body": "maybe add pyflakes?", "diff": "@@ -419,5 +419,24 @@ coala should support generating metrics for your code.\",\n \t\t\"tags\" : [\"Jetbrains IDEs\", \"Plugins\"],\n \t\t\"markdown\": \"jetbrains-ide-plugin.md\",\n \t\t\"collaborating_projects\" : [\"coala\", \"jetbrains\"]\n+\t},\n+\t{\n+\t\t\"name\" : \"Integrate pyflakes-enhanced AST into coala \",\n+\t\t\"desc\" : \"Integrate pyflakes-enhanced AST into coala \\\n+\t\tso that bears can access it.\",\n+\t\t\"requirements\" : [\n+                                \"Integrate pyflakes-enhanced AST into coala by creating \\\n+                                a meta-bear i.e PyflakesASTBear\",\n+\t\t\t\t\"Create two bears that wrap the flake8 AST plugins \\\n+\t\t\t\t'flake8-future-import' and 'flake8-string-format' \\\n+                                using the PyflakesASTBear.\"\n+\t\t],\n+\t\t\"difficulty\" : \"medium\",\n+\t\t\"issues\" : [],\n+\t\t\"mentors\" : [\"jayvdb\", \"srisankethu\"],\n+\t\t\"initiatives\" : [\"GSoC\", \"RGSoC\"],\n+\t\t\"tags\" : [\"Bears\"],", "created_at": "2017-02-03T16:37:36Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx", "fields": {"body": "space before justify", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align:justify;", "created_at": "2017-02-03T19:23:58Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0", "fields": {"body": "space after .description and before {", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{", "created_at": "2017-02-03T19:24:25Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MjEw", "fields": {"body": "space before {", "diff": "@@ -45,9 +45,23 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description{\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align:justify;\n+  font-weight: 300;    \n+}\n+.container .gi-container-title{\n+  font-size: 5em;\n+  font-weight: 300;\n+}\n+.description a:hover{", "created_at": "2017-02-03T19:25:13Z", "last_edited_at": null, "author": "Mariatta", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMTkw", "fields": {"body": "@Shruti9520 There is extra whitespace on Line 55 after font-weight:300, so you'll have to remove that extra whitespace. And a new PR shouldn't be created after every review iteration, you can follow the newcomer guide to see how to amend your commit and to push the changes in this PR itself \ud83d\ude03", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description {\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align: justify;\n+  font-weight: 300;    ", "created_at": "2017-02-04T07:59:51Z", "last_edited_at": null, "author": "hemangsk", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMjk3", "fields": {"body": "\ud83d\udc4d I'll work on it", "diff": "@@ -4,18 +4,19 @@\n \tapp.config(['$routeProvider',\n \t\tfunction($routeProvider) {\n \t\t\t$routeProvider.\n-\t\t\twhen('/', {\n-\t\t\t\tredirectTo: '/projects'\n-\t\t\t}).\n \t\t\twhen('/projects', {\n-\t\t\t\ttemplate: '<projects></projects>'\n+\t\t\t\ttemplate: '<projects></projects>',\n+\t\t\t\treloadOnSearch: false\n \t\t\t}).\n \t\t\twhen('/mentors', {\n \t\t\t\ttemplate: '<mentors></mentors>'\n \t\t\t}).\n \t\t\twhen('/faq', {\n \t\t\t\ttemplate: '<faq></faq>'\n-\t\t\t})\n+\t\t\t}).\n+\t\t\totherwise({\n+                redirectTo: '/projects'", "created_at": "2017-02-04T08:09:16Z", "last_edited_at": null, "author": "gkrishnan724", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzY0", "fields": {"body": "hey, your shortlog isnt according to our standards. It should be \"Improve\" instead of \"Improved\"..see the imperative form :) ?\nalso, enclose \"Get Involved\" in double backticks: ``", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;", "created_at": "2017-02-04T09:58:42Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzcz", "fields": {"body": "you can also run \"coala\" and it fixes everything for you automatically, if you have it installed :)", "diff": "@@ -45,9 +45,22 @@\n .title-get-involved {\n   font-family: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;\n   font-size: 5em;\n-  font-weight: 100;\n+  font-weight: 300;\n   text-align: center;\n }\n+.row .description {\n+  font-family: Roboto;\n+  font-size: 1.6em;\n+  text-align: justify;\n+  font-weight: 300;    ", "created_at": "2017-02-04T09:59:12Z", "last_edited_at": null, "author": "Adrianzatreanu", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NTg4OTk0", "fields": {"body": "Can you link these frameworks?", "diff": "@@ -13,6 +13,28 @@ plugins. For some editors like sublime and gedit, running tests is not easy and\n there is no api to do it. In such cases we  would want to use dogtail\n (a GUI tester) or a similar tool to do this.\n \n+Other details (for testing): \n+\n+For sublime, we'll be using the unittest plugin which is a plugin by itself. ", "created_at": "2017-02-06T13:58:32Z", "last_edited_at": null, "author": "Udayan12167", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcwNTY4", "fields": {"body": "\"rely heavily upon\" sounds better imo", "diff": "@@ -1,24 +1,53 @@\n-[cEP-0004](https://github.com/coala/cEPs/pull/29/files) was meant to improve\n-the usability of coala. It is a very important proposal that never got the time\n-and love it deserved.\n+coala has come a long way from it's early days in terms of it's usability. But\n+all the changes that have been made are improvisations. A proper and planned\n+overhaul of the user interface would help coala become much more user\n+friendly and intuitive. At it's core any software is as good as it's\n+interface with the user and this project aims to improve that.\n+\n+In this project we are going to focus on the command line interface(CLI) of\n+coala. The specific areas and points to focus on are:\n+\n+1. Remove most of the text from the action selection screen.\n+2. Use letters instead of numbers for selecting actions.\n+3. Allow chaining actions in a single input.\n+4. Add a 'select action for all results' operator.\n+5. Make ApplyPatchAction log the applied patch.\n+6. Reprompt after running actions only if the action says so.\n+7. Set 'Do nothing' as the default action.\n+\n+The end goal of the project is to make coala easier to use and hence the\n+project is going to be heavy on mockups and feedback from the community.", "created_at": "2017-02-07T08:51:39Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNTQ2", "fields": {"body": "I think the second sentence is general to all projects of coala, and can be removed.", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.", "created_at": "2017-02-07T09:02:55Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNzM3", "fields": {"body": "\"Priliminary\" -> \"Preliminary\"", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Priliminary tests have been performed to validate the proposed changes'  ", "created_at": "2017-02-07T09:04:01Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyOTA5", "fields": {"body": "\"implmented\" -> \"implemented\"\n\"Section based\" -> \"Section-based\"", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Priliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL\n+\n+* Section based caching has been implmented.", "created_at": "2017-02-07T09:04:51Z", "last_edited_at": null, "author": "RohanVB", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1NzMz", "fields": {"body": "PREPARATION/BONDING", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING", "created_at": "2017-02-07T10:09:52Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODAz", "fields": {"body": "CODING PHASE 3", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL\n+\n+* Section-based caching has been implemented.\n+* The corresponding code has been thoroughly tested, documented, reviewed, and  \n+  merged.\n \n ##### GSOC 2017 FINAL", "created_at": "2017-02-07T10:10:13Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODQx", "fields": {"body": "CODING PHASE 1", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM", "created_at": "2017-02-07T10:10:27Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1OTM4", "fields": {"body": "This and midterm are CODING PHASE 2\nMilestones probably have to me moved around a little bit", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL", "created_at": "2017-02-07T10:10:57Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg2NjEy", "fields": {"body": "one other -> an additional", "diff": "@@ -1,28 +1,50 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run.\n \n-Own performance optimization ideas are highly encouraged!\n+In this project, you're to improve on the current strategies. Some enhancements\n+such as section-level caching, globbing improvements to not expand on\n+unmodified directories, and others have been preliminarily explored. Please\n+refer to the related issues to learn more about these.\n \n+The student is also highly encouraged to come up with newer solutions that may\n+increase performance even further. The applicant is allowed to flexibly change\n+the milestones depending on how major the newly proposed solutions are, after\n+explicit approval from the mentors and admin.\n \n #### Milestones\n \n ##### GSOC 2017 COMMUNITY BONDING\n \n-* The applicant has determined a number of circumstances where coala needlessly\n-checks unmodified files.\n-* The applicant has created testcases to validate performance improvements\n-* A cEP describing the changes is merged.\n+* The applicant has identified at least 3 other performance hotspots that can be  \n+  improved. These can be smaller improvements, focussing on one particular  \n+  aspect of coala's core.\n+* The applicant has drafted and merged a cEP describing all the proposed  \n+  changes thoroughly.\n+* Preliminary tests have been performed to validate the proposed changes'  \n+  performance improvements.\n+\n+##### GSOC 2017 PRE-MIDTERM\n+\n+* Proposed change to not explore unchanged directories has been implemented.\n+* Thorough tests have been performed to concretely ascertain a measurable  \n+  performance gain.\n \n ##### GSOC 2017 MIDTERM\n \n-* The applicant has achieved a measurable performance benefit in at least one\n-of the above cases.\n-* The respective code has been properly tested, documented and merged.\n+* The corresponding code is properly tested, documented, reviewed, and merged.\n+* At least one of the proposed performance hotspot improvements have been  \n+  implemented, tested, documented, and merged.\n+\n+##### GSOC 2017 PRE-FINAL\n+\n+* Section-based caching has been implemented.\n+* The corresponding code has been thoroughly tested, documented, reviewed, and  \n+  merged.\n \n ##### GSOC 2017 FINAL\n \n-* At least two more cases have been 'solved' in a similar fashion.\n-* The respective code has been properly tested, documented and merged.\n+* At least one other proposed performance hotspot improvement has been  ", "created_at": "2017-02-07T10:13:27Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMjM5", "fields": {"body": "this sentence sounds not right to me...\nmaybe \"With it, coala only runs on files that changes since the last run, potentially giving huge performance improvements compared to simply running coala on everything regardless.\"", "diff": "@@ -1,28 +1,46 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files", "created_at": "2017-02-07T10:42:43Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMzU0", "fields": {"body": "this is especially important for large projects. Add some story to this maybe.", "diff": "@@ -1,28 +1,46 @@\n-This project involves improving coala's performance by implementing caching\n-strategies. One example is to use git-like approach at file-collection level\n-to not explore directories that haven't been modified. Caching per section can\n-also be implemented so sections without issues don't rerun on all files where\n-issues in other sections occurred.\n+Currently, coala supports caching of project files. This was a big performance\n+improvement over running code analysis for all files, even if most files\n+are unchanged since the last run. But coala is still rather slow and could be\n+much faster.", "created_at": "2017-02-07T10:43:25Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MTYy", "fields": {"body": "an -> a", "diff": "@@ -441,5 +441,24 @@ coala should support generating metrics for your code.\",\n \t\t\"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n \t\t\"markdown\": \"vulture.md\",\n \t\t\"collaborating_projects\" : [\"coala\", \"vulture\"]\n+    },\n+    {\n+\t\t\"name\" : \"Documentation Extraction and Parsing\",\n+\t\t\"desc\" : \"The Project is about writing language independent \\\n+\t\t\t\t  documentation extraction and parsing algorithms.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"The participant should have one bugfix patch to any bear accepted.\",\n+\t\t\t\"The participant should have an basic understanding of the algorithms \\", "created_at": "2017-02-07T22:31:05Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MzEx", "fields": {"body": "This is true for all proposals and can be removed", "diff": "@@ -441,5 +441,24 @@ coala should support generating metrics for your code.\",\n \t\t\"tags\" : [\"Vulture\", \"AST\", \"Bears\"],\n \t\t\"markdown\": \"vulture.md\",\n \t\t\"collaborating_projects\" : [\"coala\", \"vulture\"]\n+    },\n+    {\n+\t\t\"name\" : \"Documentation Extraction and Parsing\",\n+\t\t\"desc\" : \"The Project is about writing language independent \\\n+\t\t\t\t  documentation extraction and parsing algorithms.\",\n+\t\t\"requirements\" : [\n+\t\t\t\"The participant should have one bugfix patch to any bear accepted.\",\n+\t\t\t\"The participant should have an basic understanding of the algorithms \\\n+\t\t\tbehind existing documentation extraction routines.\",\n+\t\t\t\"The proposal timeline should contain issues which are planned to be \\", "created_at": "2017-02-07T22:31:55Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NTE3", "fields": {"body": "This needs a little story as motivation. What Problem are we trying to fix? How would coala and its users benefit from the project?", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.", "created_at": "2017-02-07T22:33:06Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3Njc1", "fields": {"body": "rename to PREPARATION/BONDING", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING", "created_at": "2017-02-07T22:33:52Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzMx", "fields": {"body": "rename to CODING PHASE 1", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM", "created_at": "2017-02-07T22:34:11Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzU3", "fields": {"body": "rename to CODING PHASE 3", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.\n+* Create a base class that does the extraction and parsing for us. \n+  [#2659](https://github.com/coala/coala/issues/2659)\n+* Fix [#2143](https://github.com/coala/coala/issues/2143)\n+\n+##### GSOC 2017 FINAL", "created_at": "2017-02-07T22:34:19Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MDU5", "fields": {"body": "Does this need a cEP? or just a concept?\nThe first two milestones are not realy measurable. So maybe just have \"A concept for the design of an efficient parsing system exists\", which implies the first two points", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.", "created_at": "2017-02-07T22:35:45Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MzM3", "fields": {"body": "atleast -> at least", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.", "created_at": "2017-02-07T22:37:13Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4NjIw", "fields": {"body": "Milestones should describe a state that is/has to be reached.\nSo this could be:!A base class, that does the extraction and parsing, is implemented. Fixing \nand the one below could be:\" is fixed. with context what it is about.", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.\n+* Create a base class that does the extraction and parsing for us. ", "created_at": "2017-02-07T22:38:49Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.comment", "pk": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4Njg5", "fields": {"body": "Again make these states not orders.", "diff": "@@ -0,0 +1,33 @@\n+Code needs documentation. Most programming languages have some form of inline \n+documentation standard.\n+\n+For python, its [docstrings](https://www.python.org/dev/peps/pep-0257/)\n+\n+The aim of the project is to develop a language independent analyzing routine \n+that will find all documentation strings in a file, parse them into specific \n+groups and check them against a specified documentation style given by the \n+user. The functionality can be extended so that the analyzing routine provides\n+a patch that re-formats the documentation correctly, check for grammatical \n+errors and perform other aesthetical fixes.\n+\n+\n+#### Milestones\n+\n+##### GSOC 2017 COMMUNITY BONDING\n+\n+* Learn about how different languages have their own documentation standards.\n+* Learn about the work already done.\n+* Design an effecient parsing system.\n+\n+##### GSOC 2017 MIDTERM\n+\n+* Make DocumentationStyleBear work for atleast one language, preferably python.\n+* Create a base class that does the extraction and parsing for us. \n+  [#2659](https://github.com/coala/coala/issues/2659)\n+* Fix [#2143](https://github.com/coala/coala/issues/2143)\n+\n+##### GSOC 2017 FINAL\n+\n+* Implement a DocumentationGrammarBear that fixes grammar inside documentation.", "created_at": "2017-02-07T22:39:08Z", "last_edited_at": null, "author": "sims1253", "pos": 0, "weighted_pos": 0.0, "neg": 0, "weighted_neg": 0.0, "score": 0.0}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDYxNDQx", "fields": {"created_at": "2017-01-19T20:10:44Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTQzMzg4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NDg3MDg2", "fields": {"created_at": "2017-01-20T16:09:58Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NDEwODM3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTEzNDEx", "fields": {"created_at": "2017-01-22T12:51:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "SiddharthKumar02", "review": "MDEyOklzc3VlQ29tbWVudDI3NDMyODkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NTQxMDE2", "fields": {"created_at": "2017-01-23T17:54:34Z", "content": "THUMBS_UP", "giver": "HitRam", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3NDU2Mjg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjI0NjU4", "fields": {"created_at": "2017-01-26T00:50:56Z", "content": "HOORAY", "giver": "gaocegege", "receiver": "traff", "review": "MDEyOklzc3VlQ29tbWVudDI3NTI1NjQ1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjI5NTEz", "fields": {"created_at": "2017-01-26T07:27:21Z", "content": "THUMBS_UP", "giver": "sils", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDI3NTI5MjU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjUzMjAy", "fields": {"created_at": "2017-01-26T21:10:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3OTM5NjQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY0NDI0", "fields": {"created_at": "2017-01-27T08:30:50Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3OTM5NjQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY2MTk0", "fields": {"created_at": "2017-01-27T09:51:40Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NjY2MjEz", "fields": {"created_at": "2017-01-27T09:52:33Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MTcwNDc3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzAxMjEy", "fields": {"created_at": "2017-01-29T06:17:33Z", "content": "THUMBS_UP", "giver": "abhsag24", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MzM0Mzcw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzE3NjQz", "fields": {"created_at": "2017-01-30T10:40:17Z", "content": "LAUGH", "giver": "NiklasMM", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NjAyNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzE5MzI0", "fields": {"created_at": "2017-01-30T11:52:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4NDEzODUy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242NzIwNzI4", "fields": {"created_at": "2017-01-30T12:58:58Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4NDEzODUy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODE5Mzk3", "fields": {"created_at": "2017-02-02T04:02:45Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODIzMzMx", "fields": {"created_at": "2017-02-02T08:17:23Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODM0NDg4", "fields": {"created_at": "2017-02-02T14:26:00Z", "content": "THUMBS_UP", "giver": "etotientz", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3Njk3MDY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY1NjYx", "fields": {"created_at": "2017-02-03T10:02:00Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "supergr35", "review": "MDEyOklzc3VlQ29tbWVudDI3Njc3MjU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY4NzI4", "fields": {"created_at": "2017-02-03T11:56:59Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODY4NzMx", "fields": {"created_at": "2017-02-03T11:57:05Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3NzIyOTYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc1Mjc0", "fields": {"created_at": "2017-02-03T15:43:33Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI4MTA4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODc3NTkz", "fields": {"created_at": "2017-02-03T16:46:11Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI3NTQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODczMTI5", "fields": {"created_at": "2017-02-03T14:45:35Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzI2MzkwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODg0MjAw", "fields": {"created_at": "2017-02-03T20:10:00Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Shruti9520", "review": "MDEyOklzc3VlQ29tbWVudDI3NzM0MTE0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODM3", "fields": {"created_at": "2017-02-03T19:26:53Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODQx", "fields": {"created_at": "2017-02-03T19:26:57Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MDU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODU0", "fields": {"created_at": "2017-02-03T19:27:13Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyODU4", "fields": {"created_at": "2017-02-03T19:27:17Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA0OTcx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgyOTg2", "fields": {"created_at": "2017-02-03T19:30:46Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDA1MjEw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODgzMTM4", "fields": {"created_at": "2017-02-03T19:35:54Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Mariatta", "review": "MDEyOklzc3VlQ29tbWVudDI3NzMzOTEyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTQ0", "fields": {"created_at": "2017-02-04T15:34:32Z", "content": "HOORAY", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMTkw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTQx", "fields": {"created_at": "2017-02-04T15:34:26Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzcz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk2OTUx", "fields": {"created_at": "2017-02-04T15:35:35Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "Adrianzatreanu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYzNzY0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODk5Mzgz", "fields": {"created_at": "2017-02-04T19:40:23Z", "content": "THUMBS_UP", "giver": "aalind0", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzQ2OTcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODkxMzUy", "fields": {"created_at": "2017-02-04T02:48:51Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MzczMzU4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242ODkzMzgx", "fields": {"created_at": "2017-02-04T08:14:28Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NDYyMjk3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTEwNTU5", "fields": {"created_at": "2017-02-05T19:51:42Z", "content": "THUMBS_UP", "giver": "Shruti9520", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3NzU0MTkzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTI3NTEy", "fields": {"created_at": "2017-02-06T14:00:53Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NTg4OTk0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTMyNDc1", "fields": {"created_at": "2017-02-06T16:22:14Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "Mariatta", "review": "MDEyOklzc3VlQ29tbWVudDI3NzU1NDUzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2MjAx", "fields": {"created_at": "2017-02-07T09:11:18Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcwNTY4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2NTQ0", "fields": {"created_at": "2017-02-07T09:23:13Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNzM3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2NTY5", "fields": {"created_at": "2017-02-07T09:23:53Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyOTA5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU2NTcx", "fields": {"created_at": "2017-02-07T09:23:55Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNTQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTM1", "fields": {"created_at": "2017-02-07T10:25:38Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1NzMz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTM4", "fields": {"created_at": "2017-02-07T10:25:41Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODQx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTQ3", "fields": {"created_at": "2017-02-07T10:25:51Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1ODAz"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTQz", "fields": {"created_at": "2017-02-07T10:25:47Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg1OTM4"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4NTU1", "fields": {"created_at": "2017-02-07T10:26:04Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5Nzg2NjEy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU4ODQx", "fields": {"created_at": "2017-02-07T10:36:03Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzcyNTQ2"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTU5Mjkx", "fields": {"created_at": "2017-02-07T10:51:28Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMjM5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTY2NzI3", "fields": {"created_at": "2017-02-07T14:56:53Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "rahulkrishnan98", "review": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTc0NDI0", "fields": {"created_at": "2017-02-07T18:14:31Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODA4NTg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTc0OTgx", "fields": {"created_at": "2017-02-07T18:27:41Z", "content": "THUMBS_UP", "giver": "maweki", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODA4MDE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0Nzk2", "fields": {"created_at": "2017-02-07T23:03:01Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MTYy"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0Nzk3", "fields": {"created_at": "2017-02-07T23:03:04Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3MzEx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODA5", "fields": {"created_at": "2017-02-07T23:03:24Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NTE3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODE2", "fields": {"created_at": "2017-02-07T23:03:34Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzMx"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODE4", "fields": {"created_at": "2017-02-07T23:03:37Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MzM3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODE5", "fields": {"created_at": "2017-02-07T23:03:40Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4NjIw"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODEx", "fields": {"created_at": "2017-02-07T23:03:28Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3Njc1"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODEz", "fields": {"created_at": "2017-02-07T23:03:31Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4MDU5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODIx", "fields": {"created_at": "2017-02-07T23:03:43Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ3NzU3"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTg0ODIy", "fields": {"created_at": "2017-02-07T23:03:47Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5OTQ4Njg5"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTk2MzI5", "fields": {"created_at": "2017-02-08T08:59:04Z", "content": "THUMBS_UP", "giver": "rahulkrishnan98", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3ODIyMzgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTk4OTQy", "fields": {"created_at": "2017-02-08T10:22:43Z", "content": "THUMBS_UP", "giver": "rahulkrishnan98", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAyODE4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb242OTkxODM0", "fields": {"created_at": "2017-02-08T05:29:08Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "rahulkrishnan98", "review": "MDEyOklzc3VlQ29tbWVudDI3ODAyMzA3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDA0NjUw", "fields": {"created_at": "2017-02-08T13:37:04Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODA4NTg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE2Nzk0", "fields": {"created_at": "2017-02-08T18:58:39Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzkyMzU0"}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3Mjc4", "fields": {"created_at": "2017-02-08T19:11:51Z", "content": "THUMBS_UP", "giver": "sims1253", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0MzQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3NDQ1", "fields": {"created_at": "2017-02-08T19:17:00Z", "content": "THUMBS_UP", "giver": "sims1253", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NDQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3NTMy", "fields": {"created_at": "2017-02-08T19:19:33Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NTU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDE3NzYz", "fields": {"created_at": "2017-02-08T19:25:25Z", "content": "THUMBS_UP", "giver": "adtac", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NDQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDExNzQz", "fields": {"created_at": "2017-02-08T16:38:40Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4MDIyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEyNjE5", "fields": {"created_at": "2017-02-08T17:01:22Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEyNzQ3", "fields": {"created_at": "2017-02-08T17:04:10Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTI5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEyNzU3", "fields": {"created_at": "2017-02-08T17:04:22Z", "content": "THUMBS_UP", "giver": "arnab1896", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM4OTc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDEzODU4", "fields": {"created_at": "2017-02-08T17:34:24Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "aalind0", "review": "MDEyOklzc3VlQ29tbWVudDI3ODM5MTI4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDIwMjk2", "fields": {"created_at": "2017-02-08T20:36:57Z", "content": "THUMBS_UP", "giver": "raj-maurya", "receiver": "dracarys09", "review": "MDEyOklzc3VlQ29tbWVudDI3ODQ0MDQ1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243MDIwNTEz", "fields": {"created_at": "2017-02-08T20:43:42Z", "content": "THUMBS_UP", "giver": "raj-maurya", "receiver": "arnab1896", "review": "MDEyOklzc3VlQ29tbWVudDI3ODQxOTcyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243Mjk5Mzk5", "fields": {"created_at": "2017-02-17T15:49:25Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI4MDY2MTY3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb243NTI3MDE1", "fields": {"created_at": "2017-02-25T13:14:06Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "RohanVB", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3ODM3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MDg2Mzc5", "fields": {"created_at": "2017-03-15T23:44:47Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDI4Njc0NDA3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTA4NzYw", "fields": {"created_at": "2017-03-16T15:19:43Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDI4NzA4Nzg1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTc4MDQ5", "fields": {"created_at": "2017-03-19T16:49:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sahilarora535", "review": "MDEyOklzc3VlQ29tbWVudDI4NzYyMzcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MTkyMzk1", "fields": {"created_at": "2017-03-20T11:46:02Z", "content": "THUMBS_UP", "giver": "NiklasMM", "receiver": "SanketDG", "review": "MDEyOklzc3VlQ29tbWVudDI4NzYxNTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzU1OTQ5", "fields": {"created_at": "2017-03-24T12:18:36Z", "content": "THUMBS_UP", "giver": "kaustubhhiware", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI4OTAwNzQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzY2MzY0", "fields": {"created_at": "2017-03-24T16:59:59Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI4OTA3Mzc4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzY2MzYy", "fields": {"created_at": "2017-03-24T16:59:57Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI4OTA3Mzc4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzkzMDA0", "fields": {"created_at": "2017-03-26T12:33:50Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "madhukar01", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1NDczNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244MzkzMDE4", "fields": {"created_at": "2017-03-26T12:34:47Z", "content": "THUMBS_UP", "giver": "Adrianzatreanu", "receiver": "vijeth-aradhya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MjcxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTM5NDQy", "fields": {"created_at": "2017-03-30T13:40:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyOTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NTM5NTYw", "fields": {"created_at": "2017-03-30T13:43:08Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcyODQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE0MTQ5", "fields": {"created_at": "2017-04-02T15:35:08Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjE5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE0MjE1", "fields": {"created_at": "2017-04-02T15:41:04Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sils", "review": "MDEyOklzc3VlQ29tbWVudDI5MDk5MzE2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE0ODgz", "fields": {"created_at": "2017-04-02T16:51:38Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMjcyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzM4", "fields": {"created_at": "2017-04-02T19:19:07Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTI4MjI4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzMw", "fields": {"created_at": "2017-04-02T19:18:39Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMjcyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjE2MzQ0", "fields": {"created_at": "2017-04-02T19:19:30Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMzc2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjI5MDEw", "fields": {"created_at": "2017-04-03T10:16:30Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "satwikkansal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxMzc2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjM0NTE5", "fields": {"created_at": "2017-04-03T13:41:02Z", "content": "THUMBS_UP", "giver": "kaustubhhiware", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDI5MTE0NTg1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjMwNjQ0", "fields": {"created_at": "2017-04-03T11:20:37Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4MjE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjMxODc3", "fields": {"created_at": "2017-04-03T12:09:45Z", "content": "LAUGH", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTM4MjE3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjQ1MTgz", "fields": {"created_at": "2017-04-03T18:27:53Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI5MTIwNjgzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244NjQxOTY3", "fields": {"created_at": "2017-04-03T16:55:24Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "kaustubhhiware", "review": "MDEyOklzc3VlQ29tbWVudDI5MTE4NDc3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI1MDAy", "fields": {"created_at": "2017-04-09T06:50:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "impmihai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDAxNjQ2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODI5ODQz", "fields": {"created_at": "2017-04-09T17:15:54Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDU0NzU3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODU2NDQ5", "fields": {"created_at": "2017-04-10T16:11:45Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA2MTk4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb244ODU2NDU3", "fields": {"created_at": "2017-04-10T16:11:59Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "madhukar01", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1MTg2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjMxMTg2", "fields": {"created_at": "2017-04-22T20:51:21Z", "content": "THUMBS_UP", "giver": "Techievena", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDI5NjM4MjY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MjY1Mzky", "fields": {"created_at": "2017-04-24T15:53:29Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzI2MjI3", "fields": {"created_at": "2017-04-26T04:30:51Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzIzOTA4", "fields": {"created_at": "2017-04-26T02:07:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "gkrishnan724", "review": "MDEyOklzc3VlQ29tbWVudDI5NjY5MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245MzgxODMw", "fields": {"created_at": "2017-04-27T13:31:54Z", "content": "THUMBS_UP", "giver": "gkrishnan724", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI5NzY3MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDE1Mjg3", "fields": {"created_at": "2017-04-28T10:51:24Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NzkyMDkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDE1Mjg5", "fields": {"created_at": "2017-04-28T10:51:28Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "RohanVB", "review": "MDEyOklzc3VlQ29tbWVudDI5Nzk2Nzk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDExNDE3", "fields": {"created_at": "2017-04-28T08:27:38Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDEyOklzc3VlQ29tbWVudDI5NzY3MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NDI1NjEx", "fields": {"created_at": "2017-04-28T16:22:19Z", "content": "THUMBS_UP", "giver": "RohanVB", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDI5NzkyMDkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Nzc5MDU1", "fields": {"created_at": "2017-05-11T06:45:21Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTAxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Nzc5MDc4", "fields": {"created_at": "2017-05-11T06:46:13Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTUwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245Nzc5ODQ3", "fields": {"created_at": "2017-05-11T07:17:07Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2MTcxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245NzgzNDEx", "fields": {"created_at": "2017-05-11T09:05:52Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTkzMDQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb245ODM0MTI4", "fields": {"created_at": "2017-05-12T14:09:04Z", "content": "HEART", "giver": "NiklasMM", "receiver": "damngamerz", "review": "MDEyOklzc3VlQ29tbWVudDMwMTA4NDU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDA4NTQ0Mg==", "fields": {"created_at": "2017-05-21T08:08:04Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzYyMzQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDE5ODMyOQ==", "fields": {"created_at": "2017-05-24T13:15:51Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0NzQzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI0MDUxOA==", "fields": {"created_at": "2017-05-25T14:29:40Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQzMzA4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI5NzUyNQ==", "fields": {"created_at": "2017-05-27T10:57:10Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDI5NzUyNg==", "fields": {"created_at": "2017-05-27T10:57:16Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgxODUwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIxMTAzNg==", "fields": {"created_at": "2017-05-24T18:19:50Z", "content": "LAUGH", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODI0OTExNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIyOTUyMw==", "fields": {"created_at": "2017-05-25T07:28:17Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQyOTU2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDIzNTIzMw==", "fields": {"created_at": "2017-05-25T11:15:08Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "sims1253", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQ2NDcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM2MzI5MQ==", "fields": {"created_at": "2017-05-30T14:41:01Z", "content": "THUMBS_UP", "giver": "adhikasp", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTA5Njc4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM3MjA0OA==", "fields": {"created_at": "2017-05-30T18:00:17Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MjQ1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM3MjA0OQ==", "fields": {"created_at": "2017-05-30T18:00:22Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mjg1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4NzM1OQ==", "fields": {"created_at": "2017-05-31T03:21:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzk4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4NzM2MQ==", "fields": {"created_at": "2017-05-31T03:21:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2Mzc1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDM4NzM2Mg==", "fields": {"created_at": "2017-05-31T03:21:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTE2MzY3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwNTU5Mg==", "fields": {"created_at": "2017-05-28T06:55:13Z", "content": "HEART", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzMjQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMwNTU5Mw==", "fields": {"created_at": "2017-05-28T06:55:15Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODgzMjQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDMzNDczMg==", "fields": {"created_at": "2017-05-29T16:43:01Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODg0NzU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDA1MQ==", "fields": {"created_at": "2017-06-02T09:21:07Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMwNTM5MDU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDAxMQ==", "fields": {"created_at": "2017-06-02T09:20:01Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNDI5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDQ4OA==", "fields": {"created_at": "2017-06-02T09:33:37Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyNjc1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDQ5Mg==", "fields": {"created_at": "2017-06-02T09:33:43Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUyODYwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDYyMQ==", "fields": {"created_at": "2017-06-02T09:37:56Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTgxNzg3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4MDYzMg==", "fields": {"created_at": "2017-06-02T09:38:18Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMDUyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQ4Mjg0Nw==", "fields": {"created_at": "2017-06-02T10:54:48Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Adrianzatreanu", "review": "MDEyOklzc3VlQ29tbWVudDMwNTc0MTc0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQwODc2MA==", "fields": {"created_at": "2017-05-31T15:26:34Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTI1MDYyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDg0Nw==", "fields": {"created_at": "2017-06-01T04:50:48Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDgxNQ==", "fields": {"created_at": "2017-06-01T04:48:52Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDgyMA==", "fields": {"created_at": "2017-06-01T04:49:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzMDgyOQ==", "fields": {"created_at": "2017-06-01T04:49:39Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUxMTMyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzNTEwMQ==", "fields": {"created_at": "2017-06-01T08:01:57Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzM0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzNTEwNw==", "fields": {"created_at": "2017-06-01T08:02:04Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTUzNzQ1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzODI1OQ==", "fields": {"created_at": "2017-06-01T09:29:29Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2NjgxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDQzODIyMA==", "fields": {"created_at": "2017-06-01T09:28:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTU2Njc0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDU5MzQ0NA==", "fields": {"created_at": "2017-06-06T18:27:30Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ0MTUyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUyNDk1MA==", "fields": {"created_at": "2017-06-04T18:40:13Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAxNDcxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUzMjMzNg==", "fields": {"created_at": "2017-06-05T06:13:46Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDg3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDUzMjU5Ng==", "fields": {"created_at": "2017-06-05T06:32:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDAzNDcwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDY5ODU2Nw==", "fields": {"created_at": "2017-06-09T08:53:58Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDU1MjkzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDcxODU4NA==", "fields": {"created_at": "2017-06-09T19:13:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "sils", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTA3MjYyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMDg0NTUyOA==", "fields": {"created_at": "2017-06-14T11:01:59Z", "content": "THUMBS_DOWN", "giver": "sadovnychyi", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTg1MjgzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAyOTg2Mw==", "fields": {"created_at": "2017-06-20T12:41:43Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjk1NTMxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTAzOTc0MA==", "fields": {"created_at": "2017-06-20T16:21:56Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMwOTgxMDM2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4MDQ2Mw==", "fields": {"created_at": "2017-06-24T09:53:19Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3NDIyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTE4MTcwMw==", "fields": {"created_at": "2017-06-24T12:54:18Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzg3NDIyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI0OTAzNQ==", "fields": {"created_at": "2017-06-27T10:51:22Z", "content": "THUMBS_UP", "giver": "arrayslayer", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDA1ODM0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTI0OTQyOA==", "fields": {"created_at": "2017-06-27T11:07:04Z", "content": "HEART", "giver": "hemangsk", "receiver": "arrayslayer", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDI0MTIwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODI3OQ==", "fields": {"created_at": "2017-06-26T15:22:28Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDAzMjY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODI4MA==", "fields": {"created_at": "2017-06-26T15:22:31Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU4NjcwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODMxNg==", "fields": {"created_at": "2017-06-26T15:23:19Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "gkrishnan724", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjU4NjcwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIxODMxOA==", "fields": {"created_at": "2017-06-26T15:23:23Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDAzMjY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTIyMTE0OQ==", "fields": {"created_at": "2017-06-26T16:36:10Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "arrayslayer", "review": "MDEyOklzc3VlQ29tbWVudDMxMDk2MTQ1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTM2MTYwOA==", "fields": {"created_at": "2017-06-29T22:45:48Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkyODU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTM2MTYwOQ==", "fields": {"created_at": "2017-06-29T22:45:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkyODU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTU4MzEwNQ==", "fields": {"created_at": "2017-07-07T10:56:56Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDkzODk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjQ5Nw==", "fields": {"created_at": "2017-07-05T13:22:42Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwMjUwMw==", "fields": {"created_at": "2017-07-05T13:22:50Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUwOTE4NQ==", "fields": {"created_at": "2017-07-05T15:51:33Z", "content": "HOORAY", "giver": "IpshitaC", "receiver": "raghavmittal101", "review": "MDEyOklzc3VlQ29tbWVudDMxMzEwMDczNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTUzMTU1Mw==", "fields": {"created_at": "2017-07-06T05:48:35Z", "content": "HOORAY", "giver": "IpshitaC", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxMzI4NDM2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTc0MDcyOA==", "fields": {"created_at": "2017-07-12T15:31:58Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4NTc1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTcyNjAyNg==", "fields": {"created_at": "2017-07-12T09:18:08Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMxNDY2NDgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTczOTY1Nw==", "fields": {"created_at": "2017-07-12T15:10:21Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjk4MTEzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4Mw==", "fields": {"created_at": "2017-07-15T15:00:26Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4NQ==", "fields": {"created_at": "2017-07-15T15:00:29Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4Nw==", "fields": {"created_at": "2017-07-15T15:00:36Z", "content": "HEART", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxNTUzODQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY4OQ==", "fields": {"created_at": "2017-07-15T15:00:38Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDEyOklzc3VlQ29tbWVudDMxNTUzODQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5MA==", "fields": {"created_at": "2017-07-15T15:00:43Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTU0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5Mg==", "fields": {"created_at": "2017-07-15T15:00:46Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTUxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5NQ==", "fields": {"created_at": "2017-07-15T15:00:49Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQ5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTY5OA==", "fields": {"created_at": "2017-07-15T15:00:52Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwMg==", "fields": {"created_at": "2017-07-15T15:00:55Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTI3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwMw==", "fields": {"created_at": "2017-07-15T15:00:59Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwNQ==", "fields": {"created_at": "2017-07-15T15:01:02Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTIxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwNg==", "fields": {"created_at": "2017-07-15T15:01:06Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcwNw==", "fields": {"created_at": "2017-07-15T15:01:09Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU3Mjk4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg0NTcxMA==", "fields": {"created_at": "2017-07-15T15:01:16Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU4NTEzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDA1MQ==", "fields": {"created_at": "2017-07-16T09:55:59Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": null, "review": "MDEyOklzc3VlQ29tbWVudDMxNTU5NTQwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDM1Nw==", "fields": {"created_at": "2017-07-16T10:31:41Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NTk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDM1OQ==", "fields": {"created_at": "2017-07-16T10:31:45Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDM2MA==", "fields": {"created_at": "2017-07-16T10:31:47Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzU5NjA4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg1NDU1NA==", "fields": {"created_at": "2017-07-16T11:00:19Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTU5OTk2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg4NzExMg==", "fields": {"created_at": "2017-07-17T17:32:11Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTYwNjU4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg4NzM1NA==", "fields": {"created_at": "2017-07-17T17:37:51Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTg4NzM1Ng==", "fields": {"created_at": "2017-07-17T17:37:53Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk4MTk2Nw==", "fields": {"created_at": "2017-07-19T18:54:54Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNTAwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTk4MjQ4MQ==", "fields": {"created_at": "2017-07-19T19:08:09Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "Udayan12167", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODEwNjg1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2NQ==", "fields": {"created_at": "2017-07-18T06:06:07Z", "content": "HOORAY", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2Ng==", "fields": {"created_at": "2017-07-18T06:06:07Z", "content": "THUMBS_UP", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2Nw==", "fields": {"created_at": "2017-07-18T06:06:08Z", "content": "LAUGH", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkwNjg2OQ==", "fields": {"created_at": "2017-07-18T06:06:13Z", "content": "HEART", "giver": "Arsfiqball", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxNTkwOTcyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkxNDcxNw==", "fields": {"created_at": "2017-07-18T10:13:56Z", "content": "THUMBS_UP", "giver": "sidharthskumar", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMxNTgyNDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNTc4OA==", "fields": {"created_at": "2017-07-18T15:03:48Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzk5ODExMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNzEwNQ==", "fields": {"created_at": "2017-07-18T15:29:42Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNzc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMTkyNzEwOA==", "fields": {"created_at": "2017-07-18T15:29:45Z", "content": "LAUGH", "giver": "hemangsk", "receiver": "Arsfiqball", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODAwNzc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA3OTg0OQ==", "fields": {"created_at": "2017-07-22T13:22:07Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjA3OTg3NQ==", "fields": {"created_at": "2017-07-22T13:25:50Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg5NjYyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjE1OTAxNQ==", "fields": {"created_at": "2017-07-25T12:25:22Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "ashwini0529", "review": "MDEyOklzc3VlQ29tbWVudDMxNzU3MjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjE1OTAxNg==", "fields": {"created_at": "2017-07-25T12:25:22Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "ashwini0529", "review": "MDEyOklzc3VlQ29tbWVudDMxNzU3MjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjIwOTMwNA==", "fields": {"created_at": "2017-07-26T13:55:39Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "NiklasMM", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQ5MTU2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2MjI1MA==", "fields": {"created_at": "2017-07-31T15:38:49Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMxOTEwNzcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2MjIwNQ==", "fields": {"created_at": "2017-07-31T15:37:49Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMxOTA1Njg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjM2NDYwNw==", "fields": {"created_at": "2017-07-31T16:44:05Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "adtac", "review": "MDEyOklzc3VlQ29tbWVudDMxOTEyNjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjMyNTE2MQ==", "fields": {"created_at": "2017-07-29T17:10:49Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDIyMzYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MDM1MQ==", "fields": {"created_at": "2017-08-06T11:04:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTUwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU3MDMwNg==", "fields": {"created_at": "2017-08-06T10:56:39Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzOTU0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjU5NzU0MQ==", "fields": {"created_at": "2017-08-07T14:31:26Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMyMDQ2MzYxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDI1NQ==", "fields": {"created_at": "2017-08-10T15:40:20Z", "content": "THUMBS_UP", "giver": "hemangsk", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNDU1MA==", "fields": {"created_at": "2017-08-10T15:46:20Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTQzNjQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjczNjc1OA==", "fields": {"created_at": "2017-08-10T16:34:26Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyMTU5NjA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwMDE3Nw==", "fields": {"created_at": "2017-08-12T15:45:34Z", "content": "THUMBS_UP", "giver": "FosterSamuel", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDMyMTk0MTEyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2Mw==", "fields": {"created_at": "2017-08-13T11:05:41Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2NQ==", "fields": {"created_at": "2017-08-13T11:05:45Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2Ng==", "fields": {"created_at": "2017-08-13T11:05:48Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjgwNzg2Nw==", "fields": {"created_at": "2017-08-13T11:05:51Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzNzcyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk2NjIyNw==", "fields": {"created_at": "2017-08-17T16:06:29Z", "content": "THUMBS_UP", "giver": "SanketDG", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzY4NzY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMjk5NjkyNQ==", "fields": {"created_at": "2017-08-18T10:32:38Z", "content": "HOORAY", "giver": "userzimmermann", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDMyMzMxODIwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njc4OA==", "fields": {"created_at": "2017-08-26T12:34:40Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njc5MA==", "fields": {"created_at": "2017-08-26T12:34:58Z", "content": "THUMBS_DOWN", "giver": "meetmangukiya", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4Nzc4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI2Njc5Mw==", "fields": {"created_at": "2017-08-26T12:35:11Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTM4NzkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI4MjA0Mg==", "fields": {"created_at": "2017-08-27T20:56:42Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI4MjA0Mw==", "fields": {"created_at": "2017-08-27T20:56:45Z", "content": "THUMBS_UP", "giver": "Nosferatul", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTQyMDQ0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI5MDQ3Nw==", "fields": {"created_at": "2017-08-28T07:45:46Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jendrikseipp", "review": "MDEyOklzc3VlQ29tbWVudDMyNTI4Mjg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzI5MzA3MQ==", "fields": {"created_at": "2017-08-28T09:06:51Z", "content": "HEART", "giver": "hemangsk", "receiver": "Nosferatul", "review": "MDEyOklzc3VlQ29tbWVudDMyNTMwMDc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzM0MTA2Mw==", "fields": {"created_at": "2017-08-29T11:08:23Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDMyNTUzODU5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQ0MjMwNA==", "fields": {"created_at": "2017-08-31T14:22:14Z", "content": "HOORAY", "giver": "hemangsk", "receiver": "nkprince007", "review": "MDEyOklzc3VlQ29tbWVudDMyNjE0ODYwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzQ1MjUzMg==", "fields": {"created_at": "2017-08-31T18:19:17Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "SanketDG", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQwODcyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzk5MTM5MQ==", "fields": {"created_at": "2017-09-17T10:36:02Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODIyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xMzk5MTM5Mg==", "fields": {"created_at": "2017-09-17T10:36:05Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI4ODExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3NjMxOQ==", "fields": {"created_at": "2017-10-03T16:25:28Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzMjQxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNDU3NjQxNQ==", "fields": {"created_at": "2017-10-03T16:27:37Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQzNDEyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjIwMg==", "fields": {"created_at": "2017-10-18T06:32:58Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "swapagarwal", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjI3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjU1OQ==", "fields": {"created_at": "2017-10-18T06:45:46Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "swapagarwal", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ3MjUyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjcwNQ==", "fields": {"created_at": "2017-10-18T06:50:39Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "swapagarwal", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ2NTI0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyNjkzMg==", "fields": {"created_at": "2017-10-18T06:58:24Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ3Nzc5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTEyODcyMQ==", "fields": {"created_at": "2017-10-18T07:52:52Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDMzNzQ5MDUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTI1MDAyMg==", "fields": {"created_at": "2017-10-20T21:15:39Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "cornu-ammonis", "review": "MDEyOklzc3VlQ29tbWVudDMzODMyMzk4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTM4OTg4Ng==", "fields": {"created_at": "2017-10-25T06:31:25Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDMzODg5NTQwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTM4OTg5MA==", "fields": {"created_at": "2017-10-25T06:31:30Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "kartikeys98", "review": "MDEyOklzc3VlQ29tbWVudDMzOTAxNDI5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTMxNjY0OA==", "fields": {"created_at": "2017-10-23T18:08:08Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "acashmkj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjMzNTU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYwNjk5Mg==", "fields": {"created_at": "2017-10-31T07:36:30Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "anshumanv", "review": "MDEyOklzc3VlQ29tbWVudDM0MDY4MjcxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYyMjY0OA==", "fields": {"created_at": "2017-10-31T14:34:18Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "mohitkyadav", "review": "MDEyOklzc3VlQ29tbWVudDM0MDc4MDU1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTYyOTk0Mg==", "fields": {"created_at": "2017-10-31T16:51:19Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MDgyNjgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc0OTQwNA==", "fields": {"created_at": "2017-11-03T08:20:43Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTY0MzExMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2MDc1OA==", "fields": {"created_at": "2017-11-03T13:58:18Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc2ODE0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc2Mjk2NQ==", "fields": {"created_at": "2017-11-03T14:42:36Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc4ODMzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4MzEwOA==", "fields": {"created_at": "2017-11-03T23:47:35Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "troublemagnet", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODc5ODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4ODI1Nw==", "fields": {"created_at": "2017-11-04T09:51:09Z", "content": "THUMBS_UP", "giver": "yashasingh", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0MTcxMTAyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc4OTU2OA==", "fields": {"created_at": "2017-11-04T12:07:59Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkyODgyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc5NDAzMw==", "fields": {"created_at": "2017-11-04T18:33:57Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkxODYyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTc5NjEwMg==", "fields": {"created_at": "2017-11-04T21:39:41Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkyNzQ2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk2NTg2Nw==", "fields": {"created_at": "2017-11-09T02:37:20Z", "content": "HOORAY", "giver": "prashant0598", "receiver": "solutusimmensus", "review": "MDEyOklzc3VlQ29tbWVudDM0Mjk1ODc5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk5OTE0Mg==", "fields": {"created_at": "2017-11-09T17:42:35Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "neelanshsahai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkwODkzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTk5OTE0OA==", "fields": {"created_at": "2017-11-09T17:42:40Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "neelanshsahai", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTkxMDE3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkxMzkzNA==", "fields": {"created_at": "2017-11-08T03:14:25Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0MTkyMDEyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkyOTY1MA==", "fields": {"created_at": "2017-11-08T12:10:03Z", "content": "LAUGH", "giver": "prashant0598", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0MjUyMjkxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNTkzNjc4Mg==", "fields": {"created_at": "2017-11-08T14:50:21Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0MjgzNTQwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA1Mzk3Mg==", "fields": {"created_at": "2017-11-10T21:19:59Z", "content": "HOORAY", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDMzNjMwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjA2NDE0Ng==", "fields": {"created_at": "2017-11-11T12:00:39Z", "content": "THUMBS_UP", "giver": "troublemagnet", "receiver": "newbazz", "review": "MDEyOklzc3VlQ29tbWVudDM0MzY1OTYwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE0NTQ5NQ==", "fields": {"created_at": "2017-11-14T09:16:08Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE4OTY5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE0NjA3OQ==", "fields": {"created_at": "2017-11-14T09:30:08Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE5NDk5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE0NzAxNg==", "fields": {"created_at": "2017-11-14T09:51:33Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE5ODY2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjE3Mjc4MA==", "fields": {"created_at": "2017-11-14T19:07:24Z", "content": "THUMBS_UP", "giver": "supergr35", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE5ODY2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjEzMjUzOQ==", "fields": {"created_at": "2017-11-14T00:29:51Z", "content": "THUMBS_UP", "giver": "Mixih", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDcwMzk4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjEzOTAzNA==", "fields": {"created_at": "2017-11-14T05:24:02Z", "content": "THUMBS_UP", "giver": "gabru-md", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NDE0OTkzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjI1Nzc3MQ==", "fields": {"created_at": "2017-11-16T12:19:59Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDgyMTIzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIwNzI3OA==", "fields": {"created_at": "2017-11-15T13:06:13Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIwNzg4OA==", "fields": {"created_at": "2017-11-15T13:21:19Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0NDU4NjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIxNTE3Mg==", "fields": {"created_at": "2017-11-15T15:50:10Z", "content": "THUMBS_UP", "giver": "amitsin6h", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIxNTM2NA==", "fields": {"created_at": "2017-11-15T15:53:07Z", "content": "THUMBS_UP", "giver": "amitsin6h", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NDYzMTQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjIyMTI4Mg==", "fields": {"created_at": "2017-11-15T17:54:51Z", "content": "THUMBS_UP", "giver": "acashmkj", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTE5NDkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3MQ==", "fields": {"created_at": "2017-11-18T18:57:32Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTg0NDA2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3NQ==", "fields": {"created_at": "2017-11-18T18:57:41Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3OA==", "fields": {"created_at": "2017-11-18T18:57:57Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDQ3OQ==", "fields": {"created_at": "2017-11-18T18:58:02Z", "content": "THUMBS_UP", "giver": "ihsraham", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjcyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDUwNA==", "fields": {"created_at": "2017-11-18T18:59:45Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "yashovardhanagrawal", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2Mjk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM0NDcwMw==", "fields": {"created_at": "2017-11-18T19:16:03Z", "content": "THUMBS_UP", "giver": "prashant0598", "receiver": "ihsraham", "review": "MDEyOklzc3VlQ29tbWVudDM0NTQ2NDE1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjM3MTY2Mg==", "fields": {"created_at": "2017-11-20T09:23:57Z", "content": "THUMBS_UP", "giver": "neelanshsahai", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTYzNzE4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMQ==", "fields": {"created_at": "2017-11-17T17:41:24Z", "content": "HOORAY", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjMyMTYwMg==", "fields": {"created_at": "2017-11-17T17:41:27Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NTMxMjIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY2NDA4NQ==", "fields": {"created_at": "2017-11-28T12:41:17Z", "content": "THUMBS_UP", "giver": "mohitkyadav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzUwOTY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY4Nzk3MA==", "fields": {"created_at": "2017-11-28T20:58:50Z", "content": "THUMBS_UP", "giver": "shreyans800755", "receiver": "Lyrenhex", "review": "MDEyOklzc3VlQ29tbWVudDM0NzY2MTM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjY5Nzg3NQ==", "fields": {"created_at": "2017-11-29T02:04:43Z", "content": "HOORAY", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzcyODE2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMTgxNQ==", "fields": {"created_at": "2017-11-27T05:39:45Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0Njk4NTcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjM2Nw==", "fields": {"created_at": "2017-11-27T06:14:40Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjQ4MQ==", "fields": {"created_at": "2017-11-27T06:21:01Z", "content": "THUMBS_UP", "giver": "0x48piraj", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMjc0NQ==", "fields": {"created_at": "2017-11-27T06:34:18Z", "content": "THUMBS_UP", "giver": "khanchi97", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4MzYzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwMzY2Mw==", "fields": {"created_at": "2017-11-27T07:19:24Z", "content": "HOORAY", "giver": "prnvdixit", "receiver": "0x48piraj", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA5MzA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYwNDU4OA==", "fields": {"created_at": "2017-11-27T07:58:27Z", "content": "LAUGH", "giver": "yashovardhanagrawal", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0NzA4OTQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjYyMjM4Mw==", "fields": {"created_at": "2017-11-27T15:35:21Z", "content": "THUMBS_UP", "giver": "mohitkyadav", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzIyODU2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjc1NDc1MQ==", "fields": {"created_at": "2017-11-30T06:54:34Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0ODA5OTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjc1NDkwMw==", "fields": {"created_at": "2017-11-30T07:02:01Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0ODA5OTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjc1NDkzMg==", "fields": {"created_at": "2017-11-30T07:03:00Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "prashant0598", "review": "MDEyOklzc3VlQ29tbWVudDM0ODA5OTA0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjc3NDczNw==", "fields": {"created_at": "2017-11-30T15:26:18Z", "content": "THUMBS_UP", "giver": "yashasingh", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM0ODIwNTcwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcwMTkyNg==", "fields": {"created_at": "2017-11-29T05:24:22Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0Nzc1MzM4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcwMzAxNA==", "fields": {"created_at": "2017-11-29T06:16:32Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "mridubhatnagar", "review": "MDEyOklzc3VlQ29tbWVudDM0Nzc2Mzk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcwMzY2MQ==", "fields": {"created_at": "2017-11-29T06:44:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzcwMzcxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcwNTAyMA==", "fields": {"created_at": "2017-11-29T07:38:49Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzcxMDQ4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjcxODM2NQ==", "fields": {"created_at": "2017-11-29T13:34:02Z", "content": "THUMBS_UP", "giver": "yukiisbored", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzY3NzIyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0MDg0Mg==", "fields": {"created_at": "2017-12-02T00:45:54Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQyOTQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0Mjg4MQ==", "fields": {"created_at": "2017-12-02T04:38:45Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQxOTg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg0NDkxOQ==", "fields": {"created_at": "2017-12-02T09:48:06Z", "content": "THUMBS_DOWN", "giver": "shaipranesh11", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM0ODU4ODMzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg1NjM1OA==", "fields": {"created_at": "2017-12-03T07:10:37Z", "content": "THUMBS_UP", "giver": "bhavishyagopesh", "receiver": "UnimaginaryUnit", "review": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTM5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg2MjE2Nw==", "fields": {"created_at": "2017-12-03T17:07:57Z", "content": "THUMBS_UP", "giver": "mohitkyadav", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzI3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjg2MjI3NQ==", "fields": {"created_at": "2017-12-03T17:16:16Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "mohitkyadav", "review": "MDEyOklzc3VlQ29tbWVudDM0ODc5NzEwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk0ODQwMw==", "fields": {"created_at": "2017-12-05T17:19:46Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDk5MzIyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk1MjM1NA==", "fields": {"created_at": "2017-12-05T18:47:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2MTQyNA==", "fields": {"created_at": "2017-12-05T22:27:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAyMTcxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2NDgyNA==", "fields": {"created_at": "2017-12-06T00:15:50Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTExMTMyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk2ODI4OQ==", "fields": {"created_at": "2017-12-06T02:41:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTEyOTMwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3MTQxNg==", "fields": {"created_at": "2017-12-06T05:30:17Z", "content": "LAUGH", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM0OTUzNzk1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg2NQ==", "fields": {"created_at": "2017-12-06T08:29:06Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM0OTU2OTI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NTg5OA==", "fields": {"created_at": "2017-12-06T08:30:16Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE3MDc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjk3NzExNg==", "fields": {"created_at": "2017-12-06T09:01:32Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4Nzg3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkxODU1MA==", "fields": {"created_at": "2017-12-05T03:36:41Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "indmind", "review": "MDEyOklzc3VlQ29tbWVudDM0OTE4NDc1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMDY1OQ==", "fields": {"created_at": "2017-12-05T05:36:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg1MDEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzU3OA==", "fields": {"created_at": "2017-12-05T07:48:42Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkyMzg2NA==", "fields": {"created_at": "2017-12-05T07:58:40Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "prnvdixit", "review": "MDEyOklzc3VlQ29tbWVudDM0OTIyMzExMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkzNTEzMA==", "fields": {"created_at": "2017-12-05T12:49:42Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg4OTY3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNjkzNTM5NA==", "fields": {"created_at": "2017-12-05T12:55:42Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDg5MjE2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MDAwNg==", "fields": {"created_at": "2017-12-08T04:21:56Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTcwMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MTg0Mw==", "fields": {"created_at": "2017-12-08T06:15:44Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4MTY4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MjcyMQ==", "fields": {"created_at": "2017-12-08T07:00:40Z", "content": "HEART", "giver": "synicalsyntax", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzA0OQ==", "fields": {"created_at": "2017-12-08T07:14:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "hemangsk", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA3MzE1MQ==", "fields": {"created_at": "2017-12-08T07:18:57Z", "content": "THUMBS_UP", "giver": "synicalsyntax", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MDE4OTk4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzA5MzI2Mg==", "fields": {"created_at": "2017-12-08T17:00:48Z", "content": "THUMBS_UP", "giver": "mridubhatnagar", "receiver": "Mixih", "review": "MDEyOklzc3VlQ29tbWVudDM1MDMxMDA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzAzMDc5NA==", "fields": {"created_at": "2017-12-07T10:17:48Z", "content": "THUMBS_UP", "giver": "indmind", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM0OTkyMzUzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE0MTA5OQ==", "fields": {"created_at": "2017-12-11T08:18:04Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjAwMzc2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzE4NjMwMg==", "fields": {"created_at": "2017-12-12T04:35:25Z", "content": "HEART", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjI2OTQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzExMjQwOA==", "fields": {"created_at": "2017-12-09T11:27:49Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDQ1MDU0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNTY1Nw==", "fields": {"created_at": "2017-12-10T13:20:53Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "Grox-Ni", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzM4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjI2Mg==", "fields": {"created_at": "2017-12-10T14:22:11Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0ODk5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjM5Mg==", "fields": {"created_at": "2017-12-10T14:33:36Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTA3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjMyMw==", "fields": {"created_at": "2017-12-10T14:26:52Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0OTI0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNjk2MA==", "fields": {"created_at": "2017-12-10T15:22:18Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MDgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Ng==", "fields": {"created_at": "2017-12-10T16:45:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEyNzg3Nw==", "fields": {"created_at": "2017-12-10T16:45:25Z", "content": "HEART", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk1MTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMTgyNQ==", "fields": {"created_at": "2017-12-10T22:39:57Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk2MjYyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzMzY2OA==", "fields": {"created_at": "2017-12-11T01:19:09Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk0NzUzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzNzM1MQ==", "fields": {"created_at": "2017-12-11T05:24:19Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk4NjE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mg==", "fields": {"created_at": "2017-12-11T06:36:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODY5Mw==", "fields": {"created_at": "2017-12-11T06:36:03Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk1Ng==", "fields": {"created_at": "2017-12-11T06:47:31Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODk4Nw==", "fields": {"created_at": "2017-12-11T06:48:35Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MDYzNTg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNQ==", "fields": {"created_at": "2017-12-11T06:46:22Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MTIzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzEzODkzNw==", "fields": {"created_at": "2017-12-11T06:46:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTk5MDg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MDQ3NQ==", "fields": {"created_at": "2017-12-13T07:34:04Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3OTExOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MTkyMQ==", "fields": {"created_at": "2017-12-13T08:24:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI0MjE0OQ==", "fields": {"created_at": "2017-12-13T08:30:29Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MTMxNzk0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzI4ODUzNw==", "fields": {"created_at": "2017-12-14T05:40:01Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNjk2NA==", "fields": {"created_at": "2017-12-12T22:08:24Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIyNzUxNg==", "fields": {"created_at": "2017-12-12T22:22:46Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM4Mg==", "fields": {"created_at": "2017-12-13T02:42:18Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjUwOTcxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNDM5OQ==", "fields": {"created_at": "2017-12-13T02:42:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTIxMDUwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzNjc4MA==", "fields": {"created_at": "2017-12-13T04:52:17Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU2MjMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzIzOTU3Mw==", "fields": {"created_at": "2017-12-13T06:56:58Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjU3NTQ4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM0OTYyNA==", "fields": {"created_at": "2017-12-15T13:06:08Z", "content": "CONFUSED", "giver": "Vamshi99", "receiver": "mohitkyadav", "review": "MDEyOklzc3VlQ29tbWVudDM1MTk4NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3MzczOA==", "fields": {"created_at": "2017-12-16T03:40:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njg2MTQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA1OQ==", "fields": {"created_at": "2017-12-16T09:26:26Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzI5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM3NjA2Mg==", "fields": {"created_at": "2017-12-16T09:27:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzExNzExNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3NA==", "fields": {"created_at": "2017-12-16T22:16:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4MzY3Ng==", "fields": {"created_at": "2017-12-16T22:16:25Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MjA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4Mzg4MA==", "fields": {"created_at": "2017-12-16T22:36:00Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "margobra8", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0NDIzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM4NjE4OQ==", "fields": {"created_at": "2017-12-17T04:08:37Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM0MTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjg4Ng==", "fields": {"created_at": "2017-12-17T17:37:51Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5Mjk0Mw==", "fields": {"created_at": "2017-12-17T17:41:56Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzM5MzA4MQ==", "fields": {"created_at": "2017-12-17T17:54:58Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MzEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzMxMDMzNg==", "fields": {"created_at": "2017-12-14T15:45:12Z", "content": "THUMBS_UP", "giver": "myfrom", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MTU5NzE2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNDIwNQ==", "fields": {"created_at": "2017-12-18T07:43:12Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDM1MjI3MDcwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQwNzA0Ng==", "fields": {"created_at": "2017-12-18T09:18:14Z", "content": "THUMBS_UP", "giver": "Grox-Ni", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM1MDk2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzQxMDU3Nw==", "fields": {"created_at": "2017-12-18T10:49:42Z", "content": "THUMBS_UP", "giver": "Rahmeen14", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MjM3NTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MDU4Ng==", "fields": {"created_at": "2017-12-21T04:33:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0MjI3MQ==", "fields": {"created_at": "2017-12-21T06:13:45Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1MzI2NjQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU0NDMwOA==", "fields": {"created_at": "2017-12-21T07:45:42Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1MzIyMzc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NDEyMQ==", "fields": {"created_at": "2017-12-22T04:47:28Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4NTM5NA==", "fields": {"created_at": "2017-12-22T06:06:15Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzUyNzEzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU4ODExNg==", "fields": {"created_at": "2017-12-22T08:20:27Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzU0NzAxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzU5MTMxMA==", "fields": {"created_at": "2017-12-22T10:09:34Z", "content": "THUMBS_UP", "giver": "k4ni5h", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDM1MzQ0MjMzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTI3Mw==", "fields": {"created_at": "2017-12-20T10:45:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM1MzAyODg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUwNTU4Mw==", "fields": {"created_at": "2017-12-20T10:54:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzk5MTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUxMDM0NA==", "fields": {"created_at": "2017-12-20T13:18:28Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAxMjAwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYwNg==", "fields": {"created_at": "2017-12-20T17:26:03Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwNTQzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTYzNw==", "fields": {"created_at": "2017-12-20T17:26:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMTc2Ng==", "fields": {"created_at": "2017-12-20T17:30:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4NjAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUyMjA1Mg==", "fields": {"created_at": "2017-12-20T17:37:29Z", "content": "LAUGH", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODAwMjU5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzUzMDIwNA==", "fields": {"created_at": "2017-12-20T21:08:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "dob9601", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEzNTY5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc2OQ==", "fields": {"created_at": "2017-12-25T15:06:32Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3MA==", "fields": {"created_at": "2017-12-25T15:06:34Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0MTc3Mg==", "fields": {"created_at": "2017-12-25T15:06:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjUyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQyMw==", "fields": {"created_at": "2017-12-25T21:04:23Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0NDQzNg==", "fields": {"created_at": "2017-12-25T21:06:08Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY0OTAzNg==", "fields": {"created_at": "2017-12-26T05:33:40Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY2ODc2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY1NTYzMA==", "fields": {"created_at": "2017-12-26T12:00:10Z", "content": "THUMBS_UP", "giver": "dob9601", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzY4Mzk3Nw==", "fields": {"created_at": "2017-12-27T13:03:33Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODY0NjMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYwMjcxMA==", "fields": {"created_at": "2017-12-22T16:39:35Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1MzYyMDA5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNg==", "fields": {"created_at": "2017-12-24T02:00:01Z", "content": "HEART", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyMzkyNw==", "fields": {"created_at": "2017-12-24T02:00:25Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1Mzc1ODA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNDAzMg==", "fields": {"created_at": "2017-12-24T02:24:02Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "Mixih", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQyOTQ5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNDEyOA==", "fields": {"created_at": "2017-12-24T02:47:33Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MjQwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQ2OQ==", "fields": {"created_at": "2017-12-24T07:02:47Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDg5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQwOQ==", "fields": {"created_at": "2017-12-24T06:52:39Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDczNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYyNTQxMA==", "fields": {"created_at": "2017-12-24T06:52:44Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5NDc2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzMjI4MQ==", "fields": {"created_at": "2017-12-24T23:35:38Z", "content": "HEART", "giver": "dob9601", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MTU3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzYzOTI2NA==", "fields": {"created_at": "2017-12-25T10:45:55Z", "content": "THUMBS_UP", "giver": "Monal5031", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODU5MzM5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc0NDc1OA==", "fields": {"created_at": "2017-12-29T18:22:08Z", "content": "THUMBS_UP", "giver": "adi23arora", "receiver": "namantw", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQyNDEwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc1ODY3MA==", "fields": {"created_at": "2017-12-30T18:47:47Z", "content": "THUMBS_UP", "giver": "namantw", "receiver": "pareksha", "review": "MDEyOklzc3VlQ29tbWVudDM1NDU1Njg0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzc2NTEzMg==", "fields": {"created_at": "2017-12-31T10:10:34Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDM1NDU5NTUzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDExNw==", "fields": {"created_at": "2017-12-28T06:33:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzNzE1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNDMzNA==", "fields": {"created_at": "2017-12-28T06:48:01Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "zwliew", "review": "MDEyOklzc3VlQ29tbWVudDM1NDIzODAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNTYyNg==", "fields": {"created_at": "2017-12-28T07:58:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkwODE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzcwNjE4Nw==", "fields": {"created_at": "2017-12-28T08:24:19Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODkxMTM4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDE0MQ==", "fields": {"created_at": "2017-12-29T09:31:03Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTAyOTE1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzczNDQ3OA==", "fields": {"created_at": "2017-12-29T09:50:54Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM1NDQxNDA1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzg2MjY5NQ==", "fields": {"created_at": "2018-01-04T04:48:24Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM1NTAyNTE4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk1MzY0Nw==", "fields": {"created_at": "2018-01-06T15:55:07Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "dob9601", "review": "MDEyOklzc3VlQ29tbWVudDM1NTc1Mjk4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xNzk3MjI1Ng==", "fields": {"created_at": "2018-01-07T17:19:37Z", "content": "THUMBS_UP", "giver": "namantw", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTYwMzgxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODEzNDI0Nw==", "fields": {"created_at": "2018-01-11T08:05:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg4NTAxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODEzODU1MQ==", "fields": {"created_at": "2018-01-11T09:48:46Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "Prabhat-IIT", "review": "MDEyOklzc3VlQ29tbWVudDM1Njg4MTQ5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODI0MTkyNw==", "fields": {"created_at": "2018-01-14T09:25:28Z", "content": "LAUGH", "giver": "newbazz", "receiver": "nalinbhardwaj", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM5MTY0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODM5MDg1NA==", "fields": {"created_at": "2018-01-17T18:57:28Z", "content": "THUMBS_UP", "giver": "vipuldcoder", "receiver": "yukiisbored", "review": "MDEyOklzc3VlQ29tbWVudDM0NDg4OTc3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODQ1NDg5NA==", "fields": {"created_at": "2018-01-18T22:12:14Z", "content": "THUMBS_UP", "giver": "ShivamSinghania", "receiver": "khanchi97", "review": "MDEyOklzc3VlQ29tbWVudDM1ODc5ODc5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1NzgyNA==", "fields": {"created_at": "2018-01-22T12:58:45Z", "content": "THUMBS_DOWN", "giver": "realslimshanky", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjg4ODc0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1ODE2MQ==", "fields": {"created_at": "2018-01-22T13:06:57Z", "content": "THUMBS_DOWN", "giver": "anctartica", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwNg==", "fields": {"created_at": "2018-01-22T13:43:34Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkzMDczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU1OTcwOQ==", "fields": {"created_at": "2018-01-22T13:43:36Z", "content": "THUMBS_DOWN", "giver": "newbazz", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjkyOTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM4Nw==", "fields": {"created_at": "2018-01-22T13:57:59Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDM5MQ==", "fields": {"created_at": "2018-01-22T13:58:07Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjMyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2MDU1Ng==", "fields": {"created_at": "2018-01-22T14:02:36Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2ODkyNg==", "fields": {"created_at": "2018-01-22T16:30:41Z", "content": "THUMBS_UP", "giver": "realslimshanky", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk0MjE4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODU2OTM3OA==", "fields": {"created_at": "2018-01-22T16:39:13Z", "content": "THUMBS_UP", "giver": "diveshuttam", "receiver": "realslimshanky", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjk5MTY0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODc1MDQwOQ==", "fields": {"created_at": "2018-01-25T20:00:07Z", "content": "THUMBS_UP", "giver": "Kagamihime", "receiver": "diveshuttam", "review": "MDEyOklzc3VlQ29tbWVudDM1OTQzMTI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODgyMzY1Nw==", "fields": {"created_at": "2018-01-28T00:02:09Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDM2MTAyMjcyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODgzNTExNw==", "fields": {"created_at": "2018-01-28T20:04:17Z", "content": "LAUGH", "giver": "Makman2", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM2MTA3NDcxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xODkyMjY3MA==", "fields": {"created_at": "2018-01-30T15:29:04Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM2MTQ4NDEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE0NDcyNw==", "fields": {"created_at": "2018-02-05T05:40:04Z", "content": "THUMBS_UP", "giver": "mvinoba", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTE5OTYwMw==", "fields": {"created_at": "2018-02-06T06:52:29Z", "content": "THUMBS_UP", "giver": "newbazz", "receiver": "mvinoba", "review": "MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTUyMDYzOQ==", "fields": {"created_at": "2018-02-13T11:28:23Z", "content": "HOORAY", "giver": "realslimshanky", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2NTIzODc5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTY5MzcwNw==", "fields": {"created_at": "2018-02-16T14:44:19Z", "content": "LAUGH", "giver": "Makman2", "receiver": "nguptaa", "review": "MDEyOklzc3VlQ29tbWVudDM2NTk0Njg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1MzM3OQ==", "fields": {"created_at": "2018-02-22T18:16:05Z", "content": "HOORAY", "giver": "sks444", "receiver": "himanshu1603", "review": "MDEyOklzc3VlQ29tbWVudDM2Nzc1NDczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1Mzk0MQ==", "fields": {"created_at": "2018-02-22T18:27:13Z", "content": "HOORAY", "giver": "himanshu1603", "receiver": "himanshu1603", "review": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk1NDE1OA==", "fields": {"created_at": "2018-02-22T18:31:45Z", "content": "LAUGH", "giver": "sks444", "receiver": "himanshu1603", "review": "MDEyOklzc3VlQ29tbWVudDM2Nzc3NDcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Mw==", "fields": {"created_at": "2018-02-23T01:52:50Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4ODA0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY0Nw==", "fields": {"created_at": "2018-02-23T01:52:56Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzIzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjY4OQ==", "fields": {"created_at": "2018-02-23T01:54:31Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTI1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYxMA==", "fields": {"created_at": "2018-02-23T01:51:52Z", "content": "LAUGH", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4OTM1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzMw==", "fields": {"created_at": "2018-02-23T01:52:33Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24xOTk3MjYzNQ==", "fields": {"created_at": "2018-02-23T01:52:38Z", "content": "THUMBS_UP", "giver": "nityeshaga", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDA4NzY1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA0MDYzOQ==", "fields": {"created_at": "2018-02-25T04:56:44Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDI3NTI5MjU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA3Njg5NQ==", "fields": {"created_at": "2018-02-26T13:03:30Z", "content": "THUMBS_UP", "giver": "aabhaas-vaish", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM2ODQ5MTUxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA4NDIzMQ==", "fields": {"created_at": "2018-02-26T15:23:06Z", "content": "THUMBS_UP", "giver": "aabhaas-vaish", "receiver": "aashraybhandar1", "review": "MDEyOklzc3VlQ29tbWVudDM2ODUxMjk4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA4NjM4Mw==", "fields": {"created_at": "2018-02-26T15:55:31Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "aabhaas-vaish", "review": "MDEyOklzc3VlQ29tbWVudDM2ODU0MzMyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA4NjQ2OQ==", "fields": {"created_at": "2018-02-26T15:56:46Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "LenaAn", "review": "MDEyOklzc3VlQ29tbWVudDM2ODU0MjI0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDA5Mjk4OA==", "fields": {"created_at": "2018-02-26T17:42:48Z", "content": "THUMBS_UP", "giver": "aabhaas-vaish", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM2ODU4MjcwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDAzMzM3NQ==", "fields": {"created_at": "2018-02-24T17:24:43Z", "content": "THUMBS_UP", "giver": "aabhaas-vaish", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDM2ODIyMTE4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE1NTI3OA==", "fields": {"created_at": "2018-02-27T17:48:09Z", "content": "THUMBS_UP", "giver": "aabhaas-vaish", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM2ODk2MzQ2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDE1NTM3NQ==", "fields": {"created_at": "2018-02-27T17:49:43Z", "content": "THUMBS_UP", "giver": "Vamshi99", "receiver": "aabhaas-vaish", "review": "MDEyOklzc3VlQ29tbWVudDM2ODk2NTM4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMDI0NTYwNg==", "fields": {"created_at": "2018-03-01T07:59:09Z", "content": "THUMBS_UP", "giver": "aabhaas-vaish", "receiver": "nemaniarjun", "review": "MDEyOklzc3VlQ29tbWVudDM2OTQzMTU4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NzQ1NQ==", "fields": {"created_at": "2018-03-19T12:18:35Z", "content": "THUMBS_UP", "giver": "anshumanv", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE5MTc4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NzcyNQ==", "fields": {"created_at": "2018-03-19T12:25:26Z", "content": "HOORAY", "giver": "anshumanv", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE5MzY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA0NzcyNg==", "fields": {"created_at": "2018-03-19T12:25:28Z", "content": "HEART", "giver": "anshumanv", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NDE5MzY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTA2NTkyNg==", "fields": {"created_at": "2018-03-19T17:33:11Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM3NDI4MDgwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTAwNTY1OQ==", "fields": {"created_at": "2018-03-17T17:54:36Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "nityeshaga", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI2NDYxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDI2Mg==", "fields": {"created_at": "2018-03-21T11:38:46Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDM3Nw==", "fields": {"created_at": "2018-03-21T11:42:15Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTY5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDM4NQ==", "fields": {"created_at": "2018-03-21T11:42:21Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTYzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDM4Nw==", "fields": {"created_at": "2018-03-21T11:42:26Z", "content": "THUMBS_UP", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk3NTczOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE2NDY2Ng==", "fields": {"created_at": "2018-03-21T11:49:12Z", "content": "LAUGH", "giver": "satwikkansal", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTg3NDU2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTE3OTY3OQ==", "fields": {"created_at": "2018-03-21T15:53:14Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "gaocegege", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTk4Mjc3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTMwNTcyMA==", "fields": {"created_at": "2018-03-23T17:08:43Z", "content": "THUMBS_UP", "giver": "jckw", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM3NTczMTQxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMTk1ODkzOA==", "fields": {"created_at": "2018-04-08T11:05:46Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzE1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjE2NTg0OQ==", "fields": {"created_at": "2018-04-12T08:45:21Z", "content": "THUMBS_UP", "giver": "refactormyself", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxNTE1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjM2Njc3MA==", "fields": {"created_at": "2018-04-17T05:50:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MTg0MTQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ1NzA0Mw==", "fields": {"created_at": "2018-04-18T14:57:42Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjA0NDY2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ0OA==", "fields": {"created_at": "2018-04-19T07:10:40Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0NzYxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQ3MQ==", "fields": {"created_at": "2018-04-19T07:11:14Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODM4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjQxOA==", "fields": {"created_at": "2018-04-19T07:09:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0Njg1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU0OA==", "fields": {"created_at": "2018-04-19T07:13:08Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTgwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU1NQ==", "fields": {"created_at": "2018-04-19T07:13:22Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTg3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjU2MA==", "fields": {"created_at": "2018-04-19T07:13:38Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1MDA3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUwMQ==", "fields": {"created_at": "2018-04-19T07:11:50Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0ODQ5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NjUzMQ==", "fields": {"created_at": "2018-04-19T07:12:44Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY0OTAzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1MA==", "fields": {"created_at": "2018-04-19T07:34:34Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDUxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ1Mw==", "fields": {"created_at": "2018-04-19T07:34:36Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDYyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ3Nw==", "fields": {"created_at": "2018-04-19T07:35:04Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzQ4NQ==", "fields": {"created_at": "2018-04-19T07:35:18Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NDI2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjQ5NzY5Nw==", "fields": {"created_at": "2018-04-19T07:40:01Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjY1NTY4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjU0OTM2OA==", "fields": {"created_at": "2018-04-20T02:55:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Mjk0NTkwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjY5NTQwOA==", "fields": {"created_at": "2018-04-24T04:41:19Z", "content": "THUMBS_UP", "giver": "prnvdixit", "receiver": "manankalra", "review": "MDEyOklzc3VlQ29tbWVudDM4MzQxMTY3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNjAyMw==", "fields": {"created_at": "2018-04-22T05:09:32Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "attilanagy", "review": "MDEyOklzc3VlQ29tbWVudDM4MzM1NTg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjYxNzY0NA==", "fields": {"created_at": "2018-04-22T08:29:00Z", "content": "CONFUSED", "giver": "attilanagy", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM4MzM1NjQ2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjczNTM4OQ==", "fields": {"created_at": "2018-04-24T16:30:57Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "prnvdixit", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzYwMzEyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg0NDQ2OQ==", "fields": {"created_at": "2018-04-26T09:57:47Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNzU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg0NDczNA==", "fields": {"created_at": "2018-04-26T10:02:38Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "alisianoi", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzMzgzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg0NTA5Ng==", "fields": {"created_at": "2018-04-26T10:09:58Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg2NDAxNQ==", "fields": {"created_at": "2018-04-26T15:43:24Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg4NjQ2Mg==", "fields": {"created_at": "2018-04-26T23:29:31Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNzU4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg4NjUxMg==", "fields": {"created_at": "2018-04-26T23:32:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNDY1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg4NjUyMg==", "fields": {"created_at": "2018-04-26T23:32:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMzNTczMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjg5MDI1NA==", "fields": {"created_at": "2018-04-27T02:08:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDU2MTkwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk0NDExOQ==", "fields": {"created_at": "2018-04-28T02:34:16Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDY3NTQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk4NDI4MQ==", "fields": {"created_at": "2018-04-30T09:31:50Z", "content": "THUMBS_UP", "giver": "devshiva619", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM0OTM4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk4NDY2NQ==", "fields": {"created_at": "2018-04-30T09:43:39Z", "content": "THUMBS_UP", "giver": "devshiva619", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM1MjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMjk4NTE3OA==", "fields": {"created_at": "2018-04-30T09:59:22Z", "content": "THUMBS_UP", "giver": "devshiva619", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM4NTM1NTQyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NTA0OA==", "fields": {"created_at": "2018-05-01T15:58:43Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0OTA4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NTAwNA==", "fields": {"created_at": "2018-05-01T15:57:32Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA0NjI2MA==", "fields": {"created_at": "2018-05-01T16:27:43Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI0Njc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA1MDY1OQ==", "fields": {"created_at": "2018-05-01T18:01:36Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA3ODk3OA==", "fields": {"created_at": "2018-05-02T09:10:01Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkxMzE0Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzA4MTE3Mw==", "fields": {"created_at": "2018-05-02T09:58:04Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NTkyNTc0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE4NDI1OQ==", "fields": {"created_at": "2018-05-04T05:10:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDM4NTk3MDM2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzE4Nzk0NA==", "fields": {"created_at": "2018-05-04T07:38:28Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4NjUxMjg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzEwMjAyNg==", "fields": {"created_at": "2018-05-02T16:31:40Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI2NDc2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzEzODM0MQ==", "fields": {"created_at": "2018-05-03T10:06:26Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4MzMwMzAyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI2NDk2MA==", "fields": {"created_at": "2018-05-07T03:09:08Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTY0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI4MzE0OQ==", "fields": {"created_at": "2018-05-07T12:47:55Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQwOTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzI4NDczOA==", "fields": {"created_at": "2018-05-07T13:21:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMDgyNQ==", "fields": {"created_at": "2018-05-05T01:21:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM4NjUyODExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTI5MQ==", "fields": {"created_at": "2018-05-05T02:11:42Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTI5OA==", "fields": {"created_at": "2018-05-05T02:12:17Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MTc5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM1OA==", "fields": {"created_at": "2018-05-05T02:19:08Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI0OTcwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM2OQ==", "fields": {"created_at": "2018-05-05T02:20:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTM4Ng==", "fields": {"created_at": "2018-05-05T02:21:54Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjU4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMTkzOA==", "fields": {"created_at": "2018-05-05T03:20:17Z", "content": "HEART", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM4Njc3MjMyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzMjc1NQ==", "fields": {"created_at": "2018-05-05T04:59:31Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjI1MTIwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzIzNzEyMg==", "fields": {"created_at": "2018-05-05T11:54:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI4OTY1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNTMxNw==", "fields": {"created_at": "2018-05-08T00:54:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQ0NDY4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNTMyMg==", "fields": {"created_at": "2018-05-08T00:54:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQxMzQ3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzMxNzI2OA==", "fields": {"created_at": "2018-05-08T02:06:49Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU5NjQ4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIxNw==", "fields": {"created_at": "2018-05-10T12:39:54Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "lilithxxx", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTExMzY3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ1NDIzMw==", "fields": {"created_at": "2018-05-10T12:40:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "newbazz", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTg5NjgxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ3ODY5Mw==", "fields": {"created_at": "2018-05-10T20:29:45Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "nemaniarjun", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0OTAzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQ5Mjk5OA==", "fields": {"created_at": "2018-05-11T05:18:44Z", "content": "LAUGH", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUxODc4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzQzNjMwNw==", "fields": {"created_at": "2018-05-10T03:15:28Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNjg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU1NTY5Mw==", "fields": {"created_at": "2018-05-13T05:29:24Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUxODc4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU1Njc3Nw==", "fields": {"created_at": "2018-05-13T07:45:45Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4OTU3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU2MjA0MQ==", "fields": {"created_at": "2018-05-13T15:15:13Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "The-Compiler", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc5MzU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU2Mzc3OA==", "fields": {"created_at": "2018-05-13T17:26:12Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNzMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzU3MzkxMA==", "fields": {"created_at": "2018-05-14T05:20:27Z", "content": "THUMBS_UP", "giver": "gaocegege", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNzMyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzUwOTc4MA==", "fields": {"created_at": "2018-05-11T12:48:51Z", "content": "CONFUSED", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM4Nzc3MDEzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzY1NzA0MQ==", "fields": {"created_at": "2018-05-15T13:56:15Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gaocegege", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODI5NTQ4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzYyMTc3NQ==", "fields": {"created_at": "2018-05-14T21:54:35Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzkyNjYzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzc1NzU2Nw==", "fields": {"created_at": "2018-05-17T04:32:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODUxMTU0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzcwNzU2Nw==", "fields": {"created_at": "2018-05-16T09:58:32Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODU2NjgxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzg1MzQwNw==", "fields": {"created_at": "2018-05-18T17:39:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yukiisbored", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA1NDU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyMTcyMw==", "fields": {"created_at": "2018-05-18T06:26:13Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gatesn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNDgwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyMTczMw==", "fields": {"created_at": "2018-05-18T06:26:30Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gatesn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTA2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNDA3Mg==", "fields": {"created_at": "2018-05-18T07:31:26Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gatesn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTExNTE0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNTU0NA==", "fields": {"created_at": "2018-05-18T08:06:22Z", "content": "THUMBS_UP", "giver": "gatesn", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4NjEwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNTU2MQ==", "fields": {"created_at": "2018-05-18T08:06:37Z", "content": "THUMBS_UP", "giver": "gatesn", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE4Nzc0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzgyNTYyNw==", "fields": {"created_at": "2018-05-18T08:07:47Z", "content": "THUMBS_UP", "giver": "gatesn", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDM5MDA5NjMxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk3Nzk2Mw==", "fields": {"created_at": "2018-05-22T13:45:35Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gaocegege", "review": "MDEyOklzc3VlQ29tbWVudDM5MDk5NDI1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4NDc1OA==", "fields": {"created_at": "2018-05-22T15:19:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTA0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc0Mw==", "fields": {"created_at": "2018-05-22T16:02:53Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkyMTY5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc2Mw==", "fields": {"created_at": "2018-05-22T16:03:14Z", "content": "LAUGH", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTkzNDgzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzk4Nzc4Mw==", "fields": {"created_at": "2018-05-22T16:03:34Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTk0MzQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzkwMjk1MQ==", "fields": {"created_at": "2018-05-21T05:16:51Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ5NTM3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yMzkyNDcwNw==", "fields": {"created_at": "2018-05-21T15:14:51Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5MDY2MjUzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDA1MTcyOQ==", "fields": {"created_at": "2018-05-23T16:06:17Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM5MTM2ODYwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDA2MDc1Ng==", "fields": {"created_at": "2018-05-23T18:45:13Z", "content": "HOORAY", "giver": "fatma-mohamed", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDM5MTQxMzgzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxNTU3Mg==", "fields": {"created_at": "2018-05-23T03:33:35Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAxMDkyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDAxNTYxNQ==", "fields": {"created_at": "2018-05-23T03:35:00Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDAyNDQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5NzIyNg==", "fields": {"created_at": "2018-05-26T11:48:22Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjU2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODc4MQ==", "fields": {"created_at": "2018-05-26T13:59:44Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjgzOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODcyNA==", "fields": {"created_at": "2018-05-26T13:56:37Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0Njc4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5ODg0NA==", "fields": {"created_at": "2018-05-26T14:03:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0NjkyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDE5OTA1OA==", "fields": {"created_at": "2018-05-26T14:19:28Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0OTM2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDEwNzUyNg==", "fields": {"created_at": "2018-05-24T14:16:03Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDU5OTI4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDEyODgyMQ==", "fields": {"created_at": "2018-05-24T20:15:18Z", "content": "THUMBS_UP", "giver": "xferra", "receiver": "yzgyyang", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDU5OTI4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDIxMjA2MA==", "fields": {"created_at": "2018-05-27T13:01:09Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTAzNzUyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NDEzMQ==", "fields": {"created_at": "2018-06-01T04:24:20Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jsecrest", "review": "MDEyOklzc3VlQ29tbWVudDM5MzY3ODY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDQ1NDI3OQ==", "fields": {"created_at": "2018-06-01T04:32:02Z", "content": "HOORAY", "giver": "jsecrest", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDM5Mzc0ODM1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwNDIzMA==", "fields": {"created_at": "2018-06-02T04:09:00Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "bekicot", "review": "MDEyOklzc3VlQ29tbWVudDM5NDA1MjA4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODM4MQ==", "fields": {"created_at": "2018-06-02T11:03:30Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1MDE1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwODk5Mw==", "fields": {"created_at": "2018-06-02T11:53:50Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "RJ722", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NTc2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTI2Mw==", "fields": {"created_at": "2018-06-02T12:14:54Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDEyOklzc3VlQ29tbWVudDM5NDA4MTgxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTM2MQ==", "fields": {"created_at": "2018-06-02T12:22:58Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1Nzk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTM2Mw==", "fields": {"created_at": "2018-06-02T12:23:07Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1ODM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUwOTQ1NQ==", "fields": {"created_at": "2018-06-02T12:30:40Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NzkyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUyNjY2Ng==", "fields": {"created_at": "2018-06-03T14:22:58Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTE5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUyNjY2OA==", "fields": {"created_at": "2018-06-03T14:23:02Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTEzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDUzMzA1OQ==", "fields": {"created_at": "2018-06-03T22:01:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTQ1MQ==", "fields": {"created_at": "2018-06-05T19:37:07Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTMzODg5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY0NTU5Nw==", "fields": {"created_at": "2018-06-05T19:39:59Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5NTA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDY2MTAyMQ==", "fields": {"created_at": "2018-06-06T02:56:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzE5NTA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYxODE1Ng==", "fields": {"created_at": "2018-06-05T12:12:30Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU5MTcwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNTE0MQ==", "fields": {"created_at": "2018-06-05T14:08:19Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDM5NDcyMTc1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNjY3MQ==", "fields": {"created_at": "2018-06-05T14:28:35Z", "content": "HOORAY", "giver": "Makman2", "receiver": "EverWinter23", "review": "MDEyOklzc3VlQ29tbWVudDM5NDE1NjY3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYyNjc0MQ==", "fields": {"created_at": "2018-06-05T14:29:28Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDM5NDczMDM2Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDYzMDMwOA==", "fields": {"created_at": "2018-06-05T15:18:41Z", "content": "LAUGH", "giver": "Makman2", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzEwOTc5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc2MzQ1Ng==", "fields": {"created_at": "2018-06-07T14:49:45Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzc3NDY2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDc5OTQ1OQ==", "fields": {"created_at": "2018-06-08T05:50:48Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk1MjQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NTI5Mw==", "fields": {"created_at": "2018-06-09T13:11:29Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NTI5NA==", "fields": {"created_at": "2018-06-09T13:11:33Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTA2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg1NTI5Ng==", "fields": {"created_at": "2018-06-09T13:11:37Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDIxNTIxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg3MDM5MA==", "fields": {"created_at": "2018-06-10T13:32:40Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg3MDM5Mg==", "fields": {"created_at": "2018-06-10T13:32:43Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQ0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDg3MDUwOQ==", "fields": {"created_at": "2018-06-10T13:43:14Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDI1MjQyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDgzNTYyMg==", "fields": {"created_at": "2018-06-08T18:36:00Z", "content": "THUMBS_UP", "giver": "damngamerz", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczMzcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk3OTk3NQ==", "fields": {"created_at": "2018-06-12T17:34:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTg1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk4MTE1Ng==", "fields": {"created_at": "2018-06-12T17:55:19Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc1NTQ0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNDk4NDkyOQ==", "fields": {"created_at": "2018-06-12T19:05:29Z", "content": "HEART", "giver": "nvzard", "receiver": "Vamshi99", "review": "MDEyOklzc3VlQ29tbWVudDM5NjY5ODM4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzM4NQ==", "fields": {"created_at": "2018-06-16T02:01:14Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "bekicot", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTA0NzExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzQ4OQ==", "fields": {"created_at": "2018-06-16T02:16:48Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "bekicot", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY5MDIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzUxMw==", "fields": {"created_at": "2018-06-16T02:19:22Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTE1NDgzMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE3NzUyNg==", "fields": {"created_at": "2018-06-16T02:20:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTEwMTE5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4MDAxMQ==", "fields": {"created_at": "2018-06-16T07:34:06Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NDg5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTE4NTQyNQ==", "fields": {"created_at": "2018-06-16T15:49:55Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NTk5Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MDk5Mw==", "fields": {"created_at": "2018-06-21T02:01:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5MzQ3Nw==", "fields": {"created_at": "2018-06-21T03:38:52Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTM5ODA0MQ==", "fields": {"created_at": "2018-06-21T06:37:11Z", "content": "THUMBS_UP", "giver": "chhabrabhishek", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk3NzIzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ1ODYzMw==", "fields": {"created_at": "2018-06-22T06:05:41Z", "content": "LAUGH", "giver": "harshhx17", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ1ODYzNQ==", "fields": {"created_at": "2018-06-22T06:05:44Z", "content": "THUMBS_UP", "giver": "harshhx17", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTMyODUyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQ2Mzk2NQ==", "fields": {"created_at": "2018-06-22T08:24:45Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQwODY0MA==", "fields": {"created_at": "2018-06-21T10:06:37Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MDUxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyODIyMw==", "fields": {"created_at": "2018-06-21T15:55:38Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDM5ODk5OTk5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQyOTgwMQ==", "fields": {"created_at": "2018-06-21T16:23:36Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE0NTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzMjU4Nw==", "fields": {"created_at": "2018-06-21T17:12:54Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIwNDA1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDA2NQ==", "fields": {"created_at": "2018-06-21T17:38:00Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE3MjQzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDM3Mw==", "fields": {"created_at": "2018-06-21T17:43:50Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE0NTQxOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTQzNDk3OQ==", "fields": {"created_at": "2018-06-21T17:53:50Z", "content": "THUMBS_UP", "giver": "meetmangukiya", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDM5OTE2NTc0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2MjkxMQ==", "fields": {"created_at": "2018-06-25T14:46:50Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDA5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2MzAwMw==", "fields": {"created_at": "2018-06-25T14:48:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTU2NTAxMQ==", "fields": {"created_at": "2018-06-25T15:18:06Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMTU3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNDkzMg==", "fields": {"created_at": "2018-06-23T02:18:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUwNjUwNw==", "fields": {"created_at": "2018-06-23T05:39:31Z", "content": "THUMBS_UP", "giver": "bekicot", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc0MjQzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUxNTA4NA==", "fields": {"created_at": "2018-06-23T18:47:34Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2ODk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUxODk1OA==", "fields": {"created_at": "2018-06-24T02:28:36Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3NjI4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTUyMjA5NA==", "fields": {"created_at": "2018-06-24T09:22:04Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "virresh", "review": "MDEyOklzc3VlQ29tbWVudDM5OTczMTEzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MDk5OA==", "fields": {"created_at": "2018-06-27T13:20:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzY0MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MDk5OQ==", "fields": {"created_at": "2018-06-27T13:20:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzUwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MTAwMQ==", "fields": {"created_at": "2018-06-27T13:20:22Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjY0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4MTAwMg==", "fields": {"created_at": "2018-06-27T13:20:24Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjQ2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTY4NDI1Ng==", "fields": {"created_at": "2018-06-27T14:12:13Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg0NA==", "fields": {"created_at": "2018-06-28T17:28:43Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTkxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg1MA==", "fields": {"created_at": "2018-06-28T17:28:52Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTQ4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg1NA==", "fields": {"created_at": "2018-06-28T17:28:56Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTE0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg1OA==", "fields": {"created_at": "2018-06-28T17:28:59Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMDA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTc1Njg2NQ==", "fields": {"created_at": "2018-06-28T17:29:07Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxOTg0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg0NDkyOQ==", "fields": {"created_at": "2018-07-01T08:11:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NTgxNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzA1OQ==", "fields": {"created_at": "2018-07-02T02:09:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTE4NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzA3MQ==", "fields": {"created_at": "2018-07-02T02:10:13Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzE0MA==", "fields": {"created_at": "2018-07-02T02:13:44Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTg1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTg1NzMwNw==", "fields": {"created_at": "2018-07-02T02:23:07Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDY2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTgxNDA2Ng==", "fields": {"created_at": "2018-06-29T17:54:50Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMjkzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNTk3NzQ3Mg==", "fields": {"created_at": "2018-07-04T07:04:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDAyMzk4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjA5NTg5Mg==", "fields": {"created_at": "2018-07-06T12:34:32Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjQ0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA2NA==", "fields": {"created_at": "2018-07-04T17:19:00Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzcxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA2NQ==", "fields": {"created_at": "2018-07-04T17:19:02Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzU3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA2OQ==", "fields": {"created_at": "2018-07-04T17:19:05Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTkzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjAwNjA3MQ==", "fields": {"created_at": "2018-07-04T17:19:08Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTYzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjE5MDA3Ng==", "fields": {"created_at": "2018-07-09T17:06:37Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3NzE3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0MA==", "fields": {"created_at": "2018-07-07T07:58:59Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDY2OTI2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0MQ==", "fields": {"created_at": "2018-07-07T07:59:03Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0Mg==", "fields": {"created_at": "2018-07-07T07:59:06Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyNzM0NA==", "fields": {"created_at": "2018-07-07T07:59:08Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTg3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEyOTUyNw==", "fields": {"created_at": "2018-07-07T11:36:22Z", "content": "THUMBS_UP", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDAyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjAyOA==", "fields": {"created_at": "2018-07-07T15:23:10Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjI4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjE4NA==", "fields": {"created_at": "2018-07-07T15:36:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI3MDUzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjE4OA==", "fields": {"created_at": "2018-07-07T15:37:05Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTkwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjEzMjMwMA==", "fields": {"created_at": "2018-07-07T15:44:55Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTE3NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI0ODYwNw==", "fields": {"created_at": "2018-07-10T15:48:43Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM4OTIxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI0ODYxMQ==", "fields": {"created_at": "2018-07-10T15:48:48Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTM5MjgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI3ODYzNQ==", "fields": {"created_at": "2018-07-11T04:13:07Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNDAwMTU5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI5NTAxNA==", "fields": {"created_at": "2018-07-11T10:50:11Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjI5NTAxOQ==", "fields": {"created_at": "2018-07-11T10:50:15Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMDY4Nw==", "fields": {"created_at": "2018-07-10T07:15:58Z", "content": "THUMBS_DOWN", "giver": "ksdme", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMTQ0NQ==", "fields": {"created_at": "2018-07-10T07:34:45Z", "content": "THUMBS_DOWN", "giver": "palash25", "receiver": "sarthakchakerverty", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzA2Ng==", "fields": {"created_at": "2018-07-10T08:10:17Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjIyMzk3Mg==", "fields": {"created_at": "2018-07-10T08:27:49Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjM2NzMxNg==", "fields": {"created_at": "2018-07-12T13:41:02Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjAzNjY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjQxNTUxMA==", "fields": {"created_at": "2018-07-13T08:57:37Z", "content": "THUMBS_UP", "giver": "sarthakchakerverty", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjUzNzA4Mg==", "fields": {"created_at": "2018-07-17T01:05:11Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgwMTI0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjUzNzA4NQ==", "fields": {"created_at": "2018-07-17T01:05:15Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5OTQzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjUzOTA0OA==", "fields": {"created_at": "2018-07-17T02:24:42Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5MjIyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0NTE4Ng==", "fields": {"created_at": "2018-07-18T18:08:43Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MDYxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY0NTQwMw==", "fields": {"created_at": "2018-07-18T18:12:25Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "nvzard", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzE0ODE3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2ODM3NA==", "fields": {"created_at": "2018-07-19T05:18:10Z", "content": "THUMBS_UP", "giver": "JoeSiew", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjY2OTE0OQ==", "fields": {"created_at": "2018-07-19T05:50:30Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjYwOTQzMg==", "fields": {"created_at": "2018-07-18T07:14:31Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2ODE5NA==", "fields": {"created_at": "2018-07-20T19:11:13Z", "content": "LAUGH", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc2ODIwNA==", "fields": {"created_at": "2018-07-20T19:11:21Z", "content": "HOORAY", "giver": "anctartica", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4MDkzOQ==", "fields": {"created_at": "2018-07-21T06:34:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTc2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4MzY2Ng==", "fields": {"created_at": "2018-07-21T11:09:32Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjYzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NTIwNA==", "fields": {"created_at": "2018-07-21T13:25:56Z", "content": "THUMBS_UP", "giver": "ishanSrt", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTM0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NjQyOA==", "fields": {"created_at": "2018-07-21T15:10:03Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTgzNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc4NjQzMQ==", "fields": {"created_at": "2018-07-21T15:10:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTk4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NDAzNQ==", "fields": {"created_at": "2018-07-22T04:28:56Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzQwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NDAzNg==", "fields": {"created_at": "2018-07-22T04:29:01Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NTE3Mg==", "fields": {"created_at": "2018-07-22T06:48:32Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "MacBox7", "review": "MDEyOklzc3VlQ29tbWVudDQwNjgxMTM5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5NTY0Nw==", "fields": {"created_at": "2018-07-22T07:49:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDQwNjg0NzU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5ODMwOQ==", "fields": {"created_at": "2018-07-22T11:48:10Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTgyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjc5ODQxNQ==", "fields": {"created_at": "2018-07-22T11:57:51Z", "content": "CONFUSED", "giver": "li-boxuan", "receiver": "wisn", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTk3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg0NjU4OA==", "fields": {"created_at": "2018-07-23T16:58:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1MDg2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg1MTQxNg==", "fields": {"created_at": "2018-07-23T18:25:47Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjg3MjE4OA==", "fields": {"created_at": "2018-07-24T04:25:21Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTIwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgxNTg1MQ==", "fields": {"created_at": "2018-07-23T07:04:40Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyMzkzMA==", "fields": {"created_at": "2018-07-23T09:54:15Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "pareksha", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMDQyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyNDUxNg==", "fields": {"created_at": "2018-07-23T10:06:21Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "andrewda", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgyNDgyMg==", "fields": {"created_at": "2018-07-23T10:12:57Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDM5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgzMTcyMw==", "fields": {"created_at": "2018-07-23T12:55:35Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjgzNDgyMQ==", "fields": {"created_at": "2018-07-23T13:50:33Z", "content": "THUMBS_UP", "giver": "wisn", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5MTAxOQ==", "fields": {"created_at": "2018-07-25T23:03:15Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTQwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNjk5MTAyMg==", "fields": {"created_at": "2018-07-25T23:03:20Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "meetmangukiya", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTAyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzA3NjY5NA==", "fields": {"created_at": "2018-07-27T11:33:04Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2ODEzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAxNTAyMw==", "fields": {"created_at": "2018-07-26T10:45:40Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "MacBox7", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM5OTAwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAyNDkzNQ==", "fields": {"created_at": "2018-07-26T14:00:42Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjE1Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzAyNzY4NA==", "fields": {"created_at": "2018-07-26T14:42:24Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQwODA5NzgyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE1OTc2OA==", "fields": {"created_at": "2018-07-30T11:22:18Z", "content": "THUMBS_UP", "giver": "gutsytechster", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODgyMDU2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDQxOQ==", "fields": {"created_at": "2018-07-30T11:39:09Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "wisn", "review": "MDEyOklzc3VlQ29tbWVudDQwODY5MTkwNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDY0MA==", "fields": {"created_at": "2018-07-30T11:44:02Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NjI3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDgxMQ==", "fields": {"created_at": "2018-07-30T11:48:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDkyOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MDgyMA==", "fields": {"created_at": "2018-07-30T11:48:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDk5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MTUzMg==", "fields": {"created_at": "2018-07-30T12:04:58Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTU0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2MTcxNA==", "fields": {"created_at": "2018-07-30T12:09:00Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTEzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2NDkxNw==", "fields": {"created_at": "2018-07-30T13:14:31Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2NDkyMQ==", "fields": {"created_at": "2018-07-30T13:14:35Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE2Nzg2OA==", "fields": {"created_at": "2018-07-30T14:02:59Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODY3NTIxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE3MDY5OA==", "fields": {"created_at": "2018-07-30T14:43:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE3MDc4OA==", "fields": {"created_at": "2018-07-30T14:45:20Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyMjkxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE3NzIzMA==", "fields": {"created_at": "2018-07-30T16:26:35Z", "content": "LAUGH", "giver": "sangamcse", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODkyNDA0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzE5OTYwMA==", "fields": {"created_at": "2018-07-31T00:53:39Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODkxNTY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExMDgwMA==", "fields": {"created_at": "2018-07-28T02:31:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczMjE2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzExNzkxMQ==", "fields": {"created_at": "2018-07-28T14:31:32Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NDM5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjQ5OA==", "fields": {"created_at": "2018-07-29T05:05:47Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDc2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjc5NQ==", "fields": {"created_at": "2018-07-29T05:49:39Z", "content": "THUMBS_UP", "giver": "MacBox7", "receiver": "HemabhKamboj", "review": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyNjk2NQ==", "fields": {"created_at": "2018-07-29T06:14:20Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyODA1MA==", "fields": {"created_at": "2018-07-29T08:23:21Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "HemabhKamboj", "review": "MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyODM2NQ==", "fields": {"created_at": "2018-07-29T08:53:03Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1ODMxMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyODUxNg==", "fields": {"created_at": "2018-07-29T09:09:17Z", "content": "LAUGH", "giver": "kriti21", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwODY2MjgwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEyOTAxMg==", "fields": {"created_at": "2018-07-29T09:53:42Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzA1NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMDc2Mw==", "fields": {"created_at": "2018-07-29T12:28:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDk0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzMDgzMA==", "fields": {"created_at": "2018-07-29T12:37:09Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTMwNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzEzNjUxNw==", "fields": {"created_at": "2018-07-29T19:52:37Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTU0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI1OTI0Mw==", "fields": {"created_at": "2018-07-31T21:56:51Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTgwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI1OTIzNw==", "fields": {"created_at": "2018-07-31T21:56:46Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTk5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI2NzYyNw==", "fields": {"created_at": "2018-08-01T02:52:33Z", "content": "THUMBS_UP", "giver": "kriti21", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwOTQyNzkzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI3NTYwMA==", "fields": {"created_at": "2018-08-01T07:43:01Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "nvzard", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc3NDQ5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI3NTYwNg==", "fields": {"created_at": "2018-08-01T07:43:07Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nvzard", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc3NDQ5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI4MjU1NQ==", "fields": {"created_at": "2018-08-01T09:53:38Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc4ODk4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI5MTg4Mw==", "fields": {"created_at": "2018-08-01T13:13:43Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NDk5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzI5ODkzOA==", "fields": {"created_at": "2018-08-01T14:53:39Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjcyNzAwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzIyOTAzNg==", "fields": {"created_at": "2018-07-31T13:29:56Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjQ5NTUxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzM5NzA1Nw==", "fields": {"created_at": "2018-08-03T05:37:50Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MjA3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ0ODUyNA==", "fields": {"created_at": "2018-08-04T08:05:39Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMxMTU4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MDc4MQ==", "fields": {"created_at": "2018-08-04T12:00:39Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjg5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MTMxOA==", "fields": {"created_at": "2018-08-04T12:45:21Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNzg4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1MjEwNg==", "fields": {"created_at": "2018-08-04T13:52:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODkyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NDY5OA==", "fields": {"created_at": "2018-08-04T17:10:31Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU5Njc5Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NjYzMQ==", "fields": {"created_at": "2018-08-04T19:52:13Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNDg2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ1NjYzMw==", "fields": {"created_at": "2018-08-04T19:52:18Z", "content": "THUMBS_DOWN", "giver": "nvzard", "receiver": "nvzard", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNzkxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2MTg1Mg==", "fields": {"created_at": "2018-08-05T06:27:41Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyMjgwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2MzUzMQ==", "fields": {"created_at": "2018-08-05T09:24:11Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2MzUzNA==", "fields": {"created_at": "2018-08-05T09:24:18Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NTYwMw==", "fields": {"created_at": "2018-08-05T12:50:21Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMDQ5MTA2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NjM1Mw==", "fields": {"created_at": "2018-08-05T13:51:06Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjkyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NjYzMA==", "fields": {"created_at": "2018-08-05T14:09:47Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMDUyMTc0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2Nzg0NA==", "fields": {"created_at": "2018-08-05T15:43:20Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDQ0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2Nzg1NA==", "fields": {"created_at": "2018-08-05T15:44:01Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NzgzOA==", "fields": {"created_at": "2018-08-05T15:42:57Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ2NzgzOQ==", "fields": {"created_at": "2018-08-05T15:43:09Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDM1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4MTAyMw==", "fields": {"created_at": "2018-08-06T06:12:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2MDE2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4NDc1MA==", "fields": {"created_at": "2018-08-06T07:54:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMDA0NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4NTE0Ng==", "fields": {"created_at": "2018-08-06T08:03:06Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMDYxNjY3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ4NTkzMQ==", "fields": {"created_at": "2018-08-06T08:19:07Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTY4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQ5NDg1MQ==", "fields": {"created_at": "2018-08-06T11:33:29Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "gaocegege", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2OTAxOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzQxODc5OQ==", "fields": {"created_at": "2018-08-03T14:16:34Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU0MTM5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzU0MDIwMA==", "fields": {"created_at": "2018-08-07T06:00:22Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjI0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzU0MDIyOA==", "fields": {"created_at": "2018-08-07T06:01:04Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MDI2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzU0MDM0Mw==", "fields": {"created_at": "2018-08-07T06:04:06Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUxMDE4Nw==", "fields": {"created_at": "2018-08-06T16:06:25Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTcyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUxMTg4NA==", "fields": {"created_at": "2018-08-06T16:36:47Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyMDM2OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUyNzAxOA==", "fields": {"created_at": "2018-08-06T21:48:44Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTA0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUyNzIyNw==", "fields": {"created_at": "2018-08-06T21:53:21Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "shreyans800755", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTQ0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUzODY0OA==", "fields": {"created_at": "2018-08-07T04:59:38Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAzOTExNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzUzOTkxNQ==", "fields": {"created_at": "2018-08-07T05:50:37Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0NDM1Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY2OTk3OQ==", "fields": {"created_at": "2018-08-09T05:34:47Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMzE2Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3MDAwOQ==", "fields": {"created_at": "2018-08-09T05:35:58Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyOTUxMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3MDE2MQ==", "fields": {"created_at": "2018-08-09T05:41:10Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQwMzIwOTMyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3MDE4Mw==", "fields": {"created_at": "2018-08-09T05:42:01Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "sangamcse", "review": "MDEyOklzc3VlQ29tbWVudDQwMzIwODY4OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY3ODI1MQ==", "fields": {"created_at": "2018-08-09T08:46:57Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg1MDg4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4MjA4NA==", "fields": {"created_at": "2018-08-09T09:52:40Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODgwNTYyNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4MzcyMA==", "fields": {"created_at": "2018-08-09T10:24:51Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0ODc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4MzcyNw==", "fields": {"created_at": "2018-08-09T10:24:55Z", "content": "LAUGH", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0ODc3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4NzE1MQ==", "fields": {"created_at": "2018-08-09T11:46:09Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0Nzg0NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4NzI0OQ==", "fields": {"created_at": "2018-08-09T11:47:51Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg1MDI0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4ODY1MQ==", "fields": {"created_at": "2018-08-09T12:18:21Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg5OTE0OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4ODY1Nw==", "fields": {"created_at": "2018-08-09T12:18:26Z", "content": "THUMBS_DOWN", "giver": "RaiVaibhav", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg0OTQ3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzY4ODYzNg==", "fields": {"created_at": "2018-08-09T12:18:06Z", "content": "LAUGH", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODg3OTc2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzYzMjUyOQ==", "fields": {"created_at": "2018-08-08T14:59:16Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "blazeu", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjkyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc0MTcyMw==", "fields": {"created_at": "2018-08-10T09:13:44Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjY3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc0MTcyNw==", "fields": {"created_at": "2018-08-10T09:13:48Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjYzNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc0MjI4Mg==", "fields": {"created_at": "2018-08-10T09:25:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwODgwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc1MjkyNQ==", "fields": {"created_at": "2018-08-10T13:30:01Z", "content": "THUMBS_UP", "giver": "aashutoshrathi", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzA1NA==", "fields": {"created_at": "2018-08-11T04:29:34Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMjI0OTk3MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzA3Mw==", "fields": {"created_at": "2018-08-11T04:31:24Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTM5NjYxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzMzNg==", "fields": {"created_at": "2018-08-11T05:06:55Z", "content": "THUMBS_UP", "giver": "blazeu", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNTgyNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4MzUwNA==", "fields": {"created_at": "2018-08-11T05:30:01Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4Mzg4Mw==", "fields": {"created_at": "2018-08-11T06:19:32Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNzk3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4NjM1Mw==", "fields": {"created_at": "2018-08-11T10:27:58Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyMzE5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4NjMyMQ==", "fields": {"created_at": "2018-08-11T10:24:30Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyMjk4MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc4ODY2MQ==", "fields": {"created_at": "2018-08-11T13:59:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyNjY4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1MA==", "fields": {"created_at": "2018-08-11T15:58:34Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTMzMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1Mw==", "fields": {"created_at": "2018-08-11T15:58:40Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MDA4OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1Nw==", "fields": {"created_at": "2018-08-11T15:59:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "kriti21", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMTA4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE1OQ==", "fields": {"created_at": "2018-08-11T15:59:08Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTI3MTY4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5MDE2MQ==", "fields": {"created_at": "2018-08-11T15:59:16Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMwMjQyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5Nzk4OA==", "fields": {"created_at": "2018-08-12T07:03:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NDkyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODA4Nw==", "fields": {"created_at": "2018-08-12T07:14:00Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NTA3Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODExMw==", "fields": {"created_at": "2018-08-12T07:16:26Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NTE0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODEyNQ==", "fields": {"created_at": "2018-08-12T07:18:21Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "Vamshi99", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NDkyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODg0Mw==", "fields": {"created_at": "2018-08-12T08:35:28Z", "content": "LAUGH", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjgyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODgyNQ==", "fields": {"created_at": "2018-08-12T08:33:17Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjUwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODgyOQ==", "fields": {"created_at": "2018-08-12T08:33:36Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0NjgwMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5ODgzMA==", "fields": {"created_at": "2018-08-12T08:33:39Z", "content": "LAUGH", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ0Njc1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5OTA2NQ==", "fields": {"created_at": "2018-08-12T08:56:41Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxMjMyODUyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5OTQ0Mg==", "fields": {"created_at": "2018-08-12T09:31:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxMjMyNjcwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5OTQ0NA==", "fields": {"created_at": "2018-08-12T09:31:28Z", "content": "THUMBS_DOWN", "giver": "jayvdb", "receiver": "RJ722", "review": "MDEyOklzc3VlQ29tbWVudDQxMjMyODMwNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzc5OTQ0OA==", "fields": {"created_at": "2018-08-12T09:31:36Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxMjMyODUyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzcwMTAxMw==", "fields": {"created_at": "2018-08-09T15:33:48Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODk2ODExOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzcwNDIwNw==", "fields": {"created_at": "2018-08-09T16:24:54Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDQxMTc3MjMxMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzczNTc3Mw==", "fields": {"created_at": "2018-08-10T07:05:25Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTExMzEyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzczODAyMw==", "fields": {"created_at": "2018-08-10T07:55:39Z", "content": "HEART", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NzMyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzczOTE3Mw==", "fields": {"created_at": "2018-08-10T08:21:48Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTE1NjQ4Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzg0Mjc4Mw==", "fields": {"created_at": "2018-08-13T15:33:23Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY0MzQxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzg0MjkxMg==", "fields": {"created_at": "2018-08-13T15:35:19Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "anctartica", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY0NDM5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzg4NjA5Ng==", "fields": {"created_at": "2018-08-14T09:55:13Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTg4OTk3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDc0MA==", "fields": {"created_at": "2018-08-12T11:34:55Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDc0Mg==", "fields": {"created_at": "2018-08-12T11:35:05Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTExNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDczMw==", "fields": {"created_at": "2018-08-12T11:34:20Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTAyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDczNg==", "fields": {"created_at": "2018-08-12T11:34:46Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTEwMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMDg5NQ==", "fields": {"created_at": "2018-08-12T11:47:30Z", "content": "THUMBS_UP", "giver": "refeed", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MTk3OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTMxNg==", "fields": {"created_at": "2018-08-12T12:25:03Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "sks444", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzA2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTQ0NQ==", "fields": {"created_at": "2018-08-12T12:36:55Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY4MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTQ1NA==", "fields": {"created_at": "2018-08-12T12:37:22Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY2MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTUyMw==", "fields": {"created_at": "2018-08-12T12:42:10Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1MzY0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTUyNg==", "fields": {"created_at": "2018-08-12T12:42:43Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "virresh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1Mzg2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMTcxMg==", "fields": {"created_at": "2018-08-12T13:00:55Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ1NDM3MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwMzQ0NQ==", "fields": {"created_at": "2018-08-12T15:13:59Z", "content": "THUMBS_UP", "giver": "virresh", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNzY5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTI5Ng==", "fields": {"created_at": "2018-08-12T17:36:21Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDMwOA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ4Ng==", "fields": {"created_at": "2018-08-12T17:52:49Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDY0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ4OA==", "fields": {"created_at": "2018-08-12T17:52:51Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDYyMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ4OQ==", "fields": {"created_at": "2018-08-12T17:52:58Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDU3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ5Mg==", "fields": {"created_at": "2018-08-12T17:53:49Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDU1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ5NQ==", "fields": {"created_at": "2018-08-12T17:53:53Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTQ5Ng==", "fields": {"created_at": "2018-08-12T17:53:55Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUxMg==", "fields": {"created_at": "2018-08-12T17:55:22Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQ0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUxMw==", "fields": {"created_at": "2018-08-12T17:55:26Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDQxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUxOA==", "fields": {"created_at": "2018-08-12T17:55:40Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDM0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUyNw==", "fields": {"created_at": "2018-08-12T17:56:31Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDMyNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgwNTUzMA==", "fields": {"created_at": "2018-08-12T17:56:41Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ2MDI5MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNDA5Mg==", "fields": {"created_at": "2018-08-13T04:31:42Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4OTU4NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNDAzMg==", "fields": {"created_at": "2018-08-13T04:27:50Z", "content": "THUMBS_UP", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODA5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNDAzNA==", "fields": {"created_at": "2018-08-13T04:27:53Z", "content": "LAUGH", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODAwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNDAzNw==", "fields": {"created_at": "2018-08-13T04:28:08Z", "content": "HOORAY", "giver": "RJ722", "receiver": "AbdealiJK", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ4ODIyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNjUyMQ==", "fields": {"created_at": "2018-08-13T06:22:36Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQ3NTU3Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgxNzM4Mw==", "fields": {"created_at": "2018-08-13T06:50:56Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "RaiVaibhav", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTUwNTI3Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgyMTY5Mw==", "fields": {"created_at": "2018-08-13T08:40:41Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "palash25", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTUyODA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzMzg0NQ==", "fields": {"created_at": "2018-08-13T13:15:03Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTYwMTA1MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzMzg0Nw==", "fields": {"created_at": "2018-08-13T13:15:05Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTYwMDk0MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzOTE0Ng==", "fields": {"created_at": "2018-08-13T14:35:59Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDQ5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzOTE1Ng==", "fields": {"created_at": "2018-08-13T14:36:09Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDU5Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzgzOTE2Ng==", "fields": {"created_at": "2018-08-13T14:36:17Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "refeed", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQxNDYwOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzk0NjQ0Mg==", "fields": {"created_at": "2018-08-15T09:41:20Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxMzA0MzM5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzk1OTc2NQ==", "fields": {"created_at": "2018-08-15T14:40:02Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDEyOklzc3VlQ29tbWVudDQxMzEzMTE2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yNzkwMzA0OA==", "fields": {"created_at": "2018-08-14T15:11:05Z", "content": "LAUGH", "giver": "nvzard", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTk4NzA5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODA2NDU0MA==", "fields": {"created_at": "2018-08-17T08:39:15Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDQxMzc3NDg0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODA2NDgwNA==", "fields": {"created_at": "2018-08-17T08:44:13Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "blazeu", "review": "MDEyOklzc3VlQ29tbWVudDQxMzc3NDg0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODExMDE5Mg==", "fields": {"created_at": "2018-08-18T10:00:34Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "Akhelesh", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA3MDEwMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODExNDgxMw==", "fields": {"created_at": "2018-08-18T16:18:55Z", "content": "LAUGH", "giver": "Akhelesh", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA4MDA4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODM0MDAwNQ==", "fields": {"created_at": "2018-08-23T01:27:16Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "hemangsk", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjA3NjY1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODQ2NDMwNw==", "fields": {"created_at": "2018-08-25T12:41:00Z", "content": "THUMBS_UP", "giver": "Dhiraj240", "receiver": "andrewda", "review": "MDEyOklzc3VlQ29tbWVudDQxNTk0OTEyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODQxODc3Ng==", "fields": {"created_at": "2018-08-24T09:41:07Z", "content": "THUMBS_UP", "giver": "123vivekr", "receiver": "nkprince007", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjUyOTEzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODg0NzAwMw==", "fields": {"created_at": "2018-09-03T09:29:53Z", "content": "THUMBS_UP", "giver": "pareksha", "receiver": "mach64", "review": "MDEyOklzc3VlQ29tbWVudDQxODA1NzE0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODg0NzYyMA==", "fields": {"created_at": "2018-09-03T09:41:31Z", "content": "THUMBS_UP", "giver": "Mah1ndra", "receiver": "mach64", "review": "MDEyOklzc3VlQ29tbWVudDQxODA1NzE0OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODg2NTE4Mw==", "fields": {"created_at": "2018-09-03T16:14:52Z", "content": "THUMBS_UP", "giver": "andrewda", "receiver": "Dhiraj240", "review": "MDEyOklzc3VlQ29tbWVudDQxODE0ODk0Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgwNzUwNg==", "fields": {"created_at": "2018-09-01T12:59:24Z", "content": "LAUGH", "giver": "mach64", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxNzg1ODA0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgyMDUyOQ==", "fields": {"created_at": "2018-09-02T09:04:14Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxNzg5NjUxNg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgyMTE3NQ==", "fields": {"created_at": "2018-09-02T09:57:07Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "ksdme", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUxNjU2Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgyMTY5Ng==", "fields": {"created_at": "2018-09-02T10:41:36Z", "content": "THUMBS_UP", "giver": "ksdme", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUzNTE5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgyNzY1OA==", "fields": {"created_at": "2018-09-02T18:05:46Z", "content": "THUMBS_UP", "giver": "atb00ker", "receiver": "shikharvaish28", "review": "MDEyOklzc3VlQ29tbWVudDQxNzk0ODM1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgzNDEwNg==", "fields": {"created_at": "2018-09-03T02:22:24Z", "content": "THUMBS_UP", "giver": "Mah1ndra", "receiver": "shikharvaish28", "review": "MDEyOklzc3VlQ29tbWVudDQxNzk0ODM1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgzODQ0NQ==", "fields": {"created_at": "2018-09-03T06:09:56Z", "content": "THUMBS_UP", "giver": "Mah1ndra", "receiver": "mach64", "review": "MDEyOklzc3VlQ29tbWVudDQxODAwMTg5NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODgzODQ0Ng==", "fields": {"created_at": "2018-09-03T06:10:05Z", "content": "THUMBS_UP", "giver": "Mah1ndra", "receiver": "mach64", "review": "MDEyOklzc3VlQ29tbWVudDQxODAwNTM3OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODk1NjcwNA==", "fields": {"created_at": "2018-09-05T10:05:33Z", "content": "LAUGH", "giver": "Utkarsh1308", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxODY2ODAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODk2NTQ5Mw==", "fields": {"created_at": "2018-09-05T13:06:06Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "atb00ker", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTI1OTUxNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yODk2NTc4Mw==", "fields": {"created_at": "2018-09-05T13:11:17Z", "content": "THUMBS_UP", "giver": "atb00ker", "receiver": "li-boxuan", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTI2MTM2Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTA5MDk2NQ==", "fields": {"created_at": "2018-09-07T12:54:47Z", "content": "LAUGH", "giver": "AdeshAtole", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxODY2ODAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTE1NDUzOA==", "fields": {"created_at": "2018-09-10T01:32:16Z", "content": "THUMBS_DOWN", "giver": "li-boxuan", "receiver": "shikharvaish28", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTkzMjgwMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTE3Njk2NA==", "fields": {"created_at": "2018-09-10T12:15:49Z", "content": "LAUGH", "giver": "atb00ker", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQxODY2ODAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTEyMTM3MQ==", "fields": {"created_at": "2018-09-08T03:00:26Z", "content": "HEART", "giver": "abeerzz", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQxNzg2MjI5NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTM3NDQ3MA==", "fields": {"created_at": "2018-09-13T14:17:58Z", "content": "HOORAY", "giver": "corona10", "receiver": "haeungun", "review": "MDEyOklzc3VlQ29tbWVudDQyMTAxNjI1Mg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTQ4MzMzOA==", "fields": {"created_at": "2018-09-16T15:26:21Z", "content": "THUMBS_DOWN", "giver": "li-boxuan", "receiver": "rishabhgarg25699", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkxNzYxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTQ4NDczNw==", "fields": {"created_at": "2018-09-16T17:22:06Z", "content": "THUMBS_UP", "giver": "123vivekr", "receiver": "PrajwalM2212", "review": "MDEyOklzc3VlQ29tbWVudDQyMTc5OTE0Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTY3NzE3MQ==", "fields": {"created_at": "2018-09-19T23:30:27Z", "content": "THUMBS_UP", "giver": "jayvdb", "receiver": "Man-Jain", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODk0MTI1NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg1MzEwMw==", "fields": {"created_at": "2018-09-24T13:39:15Z", "content": "HEART", "giver": "joenash", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg2MDk2NQ==", "fields": {"created_at": "2018-09-24T15:37:17Z", "content": "THUMBS_UP", "giver": "nalinbhardwaj", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAxNjM2MQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg2MTc1Mw==", "fields": {"created_at": "2018-09-24T15:48:27Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg2MTc1Nw==", "fields": {"created_at": "2018-09-24T15:48:32Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg2NTg1NA==", "fields": {"created_at": "2018-09-24T16:58:00Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg4ODA0Mw==", "fields": {"created_at": "2018-09-25T01:38:30Z", "content": "THUMBS_UP", "giver": "haxzie", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg4ODAyNw==", "fields": {"created_at": "2018-09-25T01:38:08Z", "content": "HEART", "giver": "haxzie", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg5MzA0NA==", "fields": {"created_at": "2018-09-25T05:14:53Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTg5MzI2MQ==", "fields": {"created_at": "2018-09-25T05:22:43Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTk2MzgyMA==", "fields": {"created_at": "2018-09-26T07:31:28Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "aditya81070", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTczMTk1MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24yOTkwNjgxNw==", "fields": {"created_at": "2018-09-25T10:10:20Z", "content": "HEART", "giver": "joenash", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDQyNDIxMjcyMQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE0MTg5Ng==", "fields": {"created_at": "2018-09-29T08:18:40Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "rishabhgarg25699", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQxODM3NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE3Nzc0Mg==", "fields": {"created_at": "2018-10-01T07:08:05Z", "content": "THUMBS_UP", "giver": "palash25", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE3Nzk4MA==", "fields": {"created_at": "2018-10-01T07:15:55Z", "content": "THUMBS_UP", "giver": "sks444", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE3ODU0Mg==", "fields": {"created_at": "2018-10-01T07:31:41Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "rishabhgarg25699", "review": "MDEyOklzc3VlQ29tbWVudDQyNTgxMTI5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE4MTM1Ng==", "fields": {"created_at": "2018-10-01T08:37:21Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "Daronion", "review": "MDEyOklzc3VlQ29tbWVudDQyNTgxNzM3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDE5NDk0MQ==", "fields": {"created_at": "2018-10-01T13:32:41Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDEzOTM2OA==", "fields": {"created_at": "2018-09-29T03:55:46Z", "content": "THUMBS_UP", "giver": "yashovardhanagrawal", "receiver": "joenash", "review": "MDEyOklzc3VlQ29tbWVudDQyNDAyMDQ2NA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDEzOTM3NA==", "fields": {"created_at": "2018-09-29T03:56:01Z", "content": "HEART", "giver": "yashovardhanagrawal", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyNQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDI5OTQzOQ==", "fields": {"created_at": "2018-10-03T05:13:03Z", "content": "THUMBS_UP", "giver": "manankalra", "receiver": "bhawesh96", "review": "MDEyOklzc3VlQ29tbWVudDQyNjUwNzMzOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDIyNjM0NQ==", "fields": {"created_at": "2018-10-01T23:31:29Z", "content": "THUMBS_UP", "giver": "Utkarsh1308", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDQyNTk2Mjk5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDIyNjMyNA==", "fields": {"created_at": "2018-10-01T23:30:30Z", "content": "THUMBS_UP", "giver": "Utkarsh1308", "receiver": "ishanSrt", "review": "MDEyOklzc3VlQ29tbWVudDQyNTc2NzY2OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDMyODQ4MQ==", "fields": {"created_at": "2018-10-03T15:18:58Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "rishabhgarg25699", "review": "MDEyOklzc3VlQ29tbWVudDQyNjQwNDQ4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ1MjAyOA==", "fields": {"created_at": "2018-10-05T14:36:46Z", "content": "THUMBS_UP", "giver": "ayan-b", "receiver": "shikharvaish28", "review": "MDEyOklzc3VlQ29tbWVudDQyNzM4NjA4Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ2MTg3Nw==", "fields": {"created_at": "2018-10-05T17:38:54Z", "content": "THUMBS_UP", "giver": "ayan-b", "receiver": "palash25", "review": "MDEyOklzc3VlQ29tbWVudDQyNzQ0MTkyMw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ2MTg4MQ==", "fields": {"created_at": "2018-10-05T17:38:58Z", "content": "THUMBS_UP", "giver": "ayan-b", "receiver": "srivama", "review": "MDEyOklzc3VlQ29tbWVudDQyNzQ0Mjk5OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3Mjc5MQ==", "fields": {"created_at": "2018-10-05T21:52:52Z", "content": "THUMBS_UP", "giver": "Makman2", "receiver": "ayan-b", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE0NzQ1OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3Mjk2Ng==", "fields": {"created_at": "2018-10-05T21:57:56Z", "content": "THUMBS_UP", "giver": "ayan-b", "receiver": "Makman2", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE0ODA3Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3NjY3Mw==", "fields": {"created_at": "2018-10-06T01:44:07Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDQyNzQ5MzAzNw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3NjY3NQ==", "fields": {"created_at": "2018-10-06T01:44:10Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "Makman2", "review": "MDEyOklzc3VlQ29tbWVudDQyNzQ5MjY5Nw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3NzQ5MA==", "fields": {"created_at": "2018-10-06T03:07:34Z", "content": "HOORAY", "giver": "Utkarsh1308", "receiver": "shikharvaish28", "review": "MDEyOklzc3VlQ29tbWVudDQyNDA5MTYxMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ3ODcxNg==", "fields": {"created_at": "2018-10-06T05:46:58Z", "content": "HOORAY", "giver": "li-boxuan", "receiver": "ayan-b", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE3MjY4Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ5Mjg0MA==", "fields": {"created_at": "2018-10-07T03:01:53Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "li-boxuan", "review": "MDEyOklzc3VlQ29tbWVudDQyNzU4NTcyOQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ5NDYwMg==", "fields": {"created_at": "2018-10-07T07:06:38Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "nvzard", "review": "MDEyOklzc3VlQ29tbWVudDQyNzYyMTgyMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ5NTAyNw==", "fields": {"created_at": "2018-10-07T07:51:20Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "ayan-b", "review": "MDEyOklzc3VlQ29tbWVudDQyNzYyNDk5OA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ5NTU1Mw==", "fields": {"created_at": "2018-10-07T08:43:08Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "sladyn98", "review": "MDEyOklzc3VlQ29tbWVudDQyNzYzNjA4Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDQ5NTY0MA==", "fields": {"created_at": "2018-10-07T08:49:29Z", "content": "HEART", "giver": "RaiVaibhav", "receiver": "sladyn98", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzIwNTY2NQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDU0ODIxNg==", "fields": {"created_at": "2018-10-08T18:51:44Z", "content": "THUMBS_UP", "giver": "richardson-souza", "receiver": "jayvdb", "review": "MDEyOklzc3VlQ29tbWVudDQyNzkwNjU5MA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDUwMDQ2Mg==", "fields": {"created_at": "2018-10-07T15:28:09Z", "content": "THUMBS_UP", "giver": "Naveenaidu", "receiver": "Dhiraj240", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzE4MDkzMg=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDUwMzQ5MA==", "fields": {"created_at": "2018-10-07T19:07:52Z", "content": "THUMBS_UP", "giver": "haxzie", "receiver": "ayan-b", "review": "MDEyOklzc3VlQ29tbWVudDQyNzY3ODIxNA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDUxMjA3Ng==", "fields": {"created_at": "2018-10-08T05:54:36Z", "content": "THUMBS_UP", "giver": "nvzard", "receiver": "RaiVaibhav", "review": "MDEyOklzc3VlQ29tbWVudDQyNzYzNzQ1OQ=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDUzMTg1Ng==", "fields": {"created_at": "2018-10-08T13:51:14Z", "content": "THUMBS_UP", "giver": "li-boxuan", "receiver": "jayvdb", "review": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzMxMjA0Ng=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDUzODU4NA==", "fields": {"created_at": "2018-10-08T15:41:13Z", "content": "THUMBS_UP", "giver": "richardson-souza", "receiver": "sourabh1031", "review": "MDEyOklzc3VlQ29tbWVudDQyNzcyNjk1Mw=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDY3MDQ3OQ==", "fields": {"created_at": "2018-10-10T16:59:31Z", "content": "THUMBS_UP", "giver": "shikharvaish28", "receiver": "AkshJain99", "review": "MDEyOklzc3VlQ29tbWVudDQyODY0NjMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDY3Mjg4NA==", "fields": {"created_at": "2018-10-10T17:39:39Z", "content": "THUMBS_UP", "giver": "AkshJain99", "receiver": "AkshJain99", "review": "MDEyOklzc3VlQ29tbWVudDQyODY0NjMzMA=="}}, {"model": "meta_review.reaction", "pk": "MDg6UmVhY3Rpb24zMDY3ODgwMw==", "fields": {"created_at": "2018-10-10T19:23:46Z", "content": "THUMBS_UP", "giver": "RaiVaibhav", "receiver": "AkshJain99", "review": "MDEyOklzc3VlQ29tbWVudDQyODY5ODEyOA=="}}]